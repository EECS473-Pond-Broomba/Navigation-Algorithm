
imu_gps.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bcc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  08009d70  08009d70  00019d70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0a0  0800a0a0  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0a0  0800a0a0  0001a0a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0a8  0800a0a8  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a0a8  0800a0a8  0001a0a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800a0b0  0800a0b0  0001a0b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a0b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ae8  200001e8  0800a29c  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004cd0  0800a29c  00024cd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ebec  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003d51  00000000  00000000  0003ee00  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001708  00000000  00000000  00042b58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001588  00000000  00000000  00044260  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001aa8c  00000000  00000000  000457e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000134bd  00000000  00000000  00060274  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009d317  00000000  00000000  00073731  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00110a48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b2c  00000000  00000000  00110ac4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009d54 	.word	0x08009d54

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	08009d54 	.word	0x08009d54

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2iz>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad0:	d215      	bcs.n	8000afe <__aeabi_d2iz+0x36>
 8000ad2:	d511      	bpl.n	8000af8 <__aeabi_d2iz+0x30>
 8000ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000adc:	d912      	bls.n	8000b04 <__aeabi_d2iz+0x3c>
 8000ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b02:	d105      	bne.n	8000b10 <__aeabi_d2iz+0x48>
 8000b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	bf08      	it	eq
 8000b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_d2uiz>:
 8000b18:	004a      	lsls	r2, r1, #1
 8000b1a:	d211      	bcs.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d211      	bcs.n	8000b46 <__aeabi_d2uiz+0x2e>
 8000b22:	d50d      	bpl.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d40e      	bmi.n	8000b4c <__aeabi_d2uiz+0x34>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_d2uiz+0x3a>
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0000 	mov.w	r0, #0
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b6c:	f000 b972 	b.w	8000e54 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9e08      	ldr	r6, [sp, #32]
 8000b8e:	4604      	mov	r4, r0
 8000b90:	4688      	mov	r8, r1
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d14b      	bne.n	8000c2e <__udivmoddi4+0xa6>
 8000b96:	428a      	cmp	r2, r1
 8000b98:	4615      	mov	r5, r2
 8000b9a:	d967      	bls.n	8000c6c <__udivmoddi4+0xe4>
 8000b9c:	fab2 f282 	clz	r2, r2
 8000ba0:	b14a      	cbz	r2, 8000bb6 <__udivmoddi4+0x2e>
 8000ba2:	f1c2 0720 	rsb	r7, r2, #32
 8000ba6:	fa01 f302 	lsl.w	r3, r1, r2
 8000baa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bae:	4095      	lsls	r5, r2
 8000bb0:	ea47 0803 	orr.w	r8, r7, r3
 8000bb4:	4094      	lsls	r4, r2
 8000bb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bba:	0c23      	lsrs	r3, r4, #16
 8000bbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bc0:	fa1f fc85 	uxth.w	ip, r5
 8000bc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bcc:	fb07 f10c 	mul.w	r1, r7, ip
 8000bd0:	4299      	cmp	r1, r3
 8000bd2:	d909      	bls.n	8000be8 <__udivmoddi4+0x60>
 8000bd4:	18eb      	adds	r3, r5, r3
 8000bd6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000bda:	f080 811b 	bcs.w	8000e14 <__udivmoddi4+0x28c>
 8000bde:	4299      	cmp	r1, r3
 8000be0:	f240 8118 	bls.w	8000e14 <__udivmoddi4+0x28c>
 8000be4:	3f02      	subs	r7, #2
 8000be6:	442b      	add	r3, r5
 8000be8:	1a5b      	subs	r3, r3, r1
 8000bea:	b2a4      	uxth	r4, r4
 8000bec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bfc:	45a4      	cmp	ip, r4
 8000bfe:	d909      	bls.n	8000c14 <__udivmoddi4+0x8c>
 8000c00:	192c      	adds	r4, r5, r4
 8000c02:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c06:	f080 8107 	bcs.w	8000e18 <__udivmoddi4+0x290>
 8000c0a:	45a4      	cmp	ip, r4
 8000c0c:	f240 8104 	bls.w	8000e18 <__udivmoddi4+0x290>
 8000c10:	3802      	subs	r0, #2
 8000c12:	442c      	add	r4, r5
 8000c14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c18:	eba4 040c 	sub.w	r4, r4, ip
 8000c1c:	2700      	movs	r7, #0
 8000c1e:	b11e      	cbz	r6, 8000c28 <__udivmoddi4+0xa0>
 8000c20:	40d4      	lsrs	r4, r2
 8000c22:	2300      	movs	r3, #0
 8000c24:	e9c6 4300 	strd	r4, r3, [r6]
 8000c28:	4639      	mov	r1, r7
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	428b      	cmp	r3, r1
 8000c30:	d909      	bls.n	8000c46 <__udivmoddi4+0xbe>
 8000c32:	2e00      	cmp	r6, #0
 8000c34:	f000 80eb 	beq.w	8000e0e <__udivmoddi4+0x286>
 8000c38:	2700      	movs	r7, #0
 8000c3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c3e:	4638      	mov	r0, r7
 8000c40:	4639      	mov	r1, r7
 8000c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c46:	fab3 f783 	clz	r7, r3
 8000c4a:	2f00      	cmp	r7, #0
 8000c4c:	d147      	bne.n	8000cde <__udivmoddi4+0x156>
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d302      	bcc.n	8000c58 <__udivmoddi4+0xd0>
 8000c52:	4282      	cmp	r2, r0
 8000c54:	f200 80fa 	bhi.w	8000e4c <__udivmoddi4+0x2c4>
 8000c58:	1a84      	subs	r4, r0, r2
 8000c5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c5e:	2001      	movs	r0, #1
 8000c60:	4698      	mov	r8, r3
 8000c62:	2e00      	cmp	r6, #0
 8000c64:	d0e0      	beq.n	8000c28 <__udivmoddi4+0xa0>
 8000c66:	e9c6 4800 	strd	r4, r8, [r6]
 8000c6a:	e7dd      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000c6c:	b902      	cbnz	r2, 8000c70 <__udivmoddi4+0xe8>
 8000c6e:	deff      	udf	#255	; 0xff
 8000c70:	fab2 f282 	clz	r2, r2
 8000c74:	2a00      	cmp	r2, #0
 8000c76:	f040 808f 	bne.w	8000d98 <__udivmoddi4+0x210>
 8000c7a:	1b49      	subs	r1, r1, r5
 8000c7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c80:	fa1f f885 	uxth.w	r8, r5
 8000c84:	2701      	movs	r7, #1
 8000c86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c8a:	0c23      	lsrs	r3, r4, #16
 8000c8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c94:	fb08 f10c 	mul.w	r1, r8, ip
 8000c98:	4299      	cmp	r1, r3
 8000c9a:	d907      	bls.n	8000cac <__udivmoddi4+0x124>
 8000c9c:	18eb      	adds	r3, r5, r3
 8000c9e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0x122>
 8000ca4:	4299      	cmp	r1, r3
 8000ca6:	f200 80cd 	bhi.w	8000e44 <__udivmoddi4+0x2bc>
 8000caa:	4684      	mov	ip, r0
 8000cac:	1a59      	subs	r1, r3, r1
 8000cae:	b2a3      	uxth	r3, r4
 8000cb0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cb8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cbc:	fb08 f800 	mul.w	r8, r8, r0
 8000cc0:	45a0      	cmp	r8, r4
 8000cc2:	d907      	bls.n	8000cd4 <__udivmoddi4+0x14c>
 8000cc4:	192c      	adds	r4, r5, r4
 8000cc6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x14a>
 8000ccc:	45a0      	cmp	r8, r4
 8000cce:	f200 80b6 	bhi.w	8000e3e <__udivmoddi4+0x2b6>
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	eba4 0408 	sub.w	r4, r4, r8
 8000cd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cdc:	e79f      	b.n	8000c1e <__udivmoddi4+0x96>
 8000cde:	f1c7 0c20 	rsb	ip, r7, #32
 8000ce2:	40bb      	lsls	r3, r7
 8000ce4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ce8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cec:	fa01 f407 	lsl.w	r4, r1, r7
 8000cf0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cf4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cf8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cfc:	4325      	orrs	r5, r4
 8000cfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d02:	0c2c      	lsrs	r4, r5, #16
 8000d04:	fb08 3319 	mls	r3, r8, r9, r3
 8000d08:	fa1f fa8e 	uxth.w	sl, lr
 8000d0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d10:	fb09 f40a 	mul.w	r4, r9, sl
 8000d14:	429c      	cmp	r4, r3
 8000d16:	fa02 f207 	lsl.w	r2, r2, r7
 8000d1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d1e:	d90b      	bls.n	8000d38 <__udivmoddi4+0x1b0>
 8000d20:	eb1e 0303 	adds.w	r3, lr, r3
 8000d24:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d28:	f080 8087 	bcs.w	8000e3a <__udivmoddi4+0x2b2>
 8000d2c:	429c      	cmp	r4, r3
 8000d2e:	f240 8084 	bls.w	8000e3a <__udivmoddi4+0x2b2>
 8000d32:	f1a9 0902 	sub.w	r9, r9, #2
 8000d36:	4473      	add	r3, lr
 8000d38:	1b1b      	subs	r3, r3, r4
 8000d3a:	b2ad      	uxth	r5, r5
 8000d3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d40:	fb08 3310 	mls	r3, r8, r0, r3
 8000d44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d4c:	45a2      	cmp	sl, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x1da>
 8000d50:	eb1e 0404 	adds.w	r4, lr, r4
 8000d54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d58:	d26b      	bcs.n	8000e32 <__udivmoddi4+0x2aa>
 8000d5a:	45a2      	cmp	sl, r4
 8000d5c:	d969      	bls.n	8000e32 <__udivmoddi4+0x2aa>
 8000d5e:	3802      	subs	r0, #2
 8000d60:	4474      	add	r4, lr
 8000d62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d66:	fba0 8902 	umull	r8, r9, r0, r2
 8000d6a:	eba4 040a 	sub.w	r4, r4, sl
 8000d6e:	454c      	cmp	r4, r9
 8000d70:	46c2      	mov	sl, r8
 8000d72:	464b      	mov	r3, r9
 8000d74:	d354      	bcc.n	8000e20 <__udivmoddi4+0x298>
 8000d76:	d051      	beq.n	8000e1c <__udivmoddi4+0x294>
 8000d78:	2e00      	cmp	r6, #0
 8000d7a:	d069      	beq.n	8000e50 <__udivmoddi4+0x2c8>
 8000d7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000d80:	eb64 0403 	sbc.w	r4, r4, r3
 8000d84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d88:	40fd      	lsrs	r5, r7
 8000d8a:	40fc      	lsrs	r4, r7
 8000d8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000d90:	e9c6 5400 	strd	r5, r4, [r6]
 8000d94:	2700      	movs	r7, #0
 8000d96:	e747      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000d98:	f1c2 0320 	rsb	r3, r2, #32
 8000d9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000da0:	4095      	lsls	r5, r2
 8000da2:	fa01 f002 	lsl.w	r0, r1, r2
 8000da6:	fa21 f303 	lsr.w	r3, r1, r3
 8000daa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dae:	4338      	orrs	r0, r7
 8000db0:	0c01      	lsrs	r1, r0, #16
 8000db2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000db6:	fa1f f885 	uxth.w	r8, r5
 8000dba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dbe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc2:	fb07 f308 	mul.w	r3, r7, r8
 8000dc6:	428b      	cmp	r3, r1
 8000dc8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dcc:	d907      	bls.n	8000dde <__udivmoddi4+0x256>
 8000dce:	1869      	adds	r1, r5, r1
 8000dd0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000dd4:	d22f      	bcs.n	8000e36 <__udivmoddi4+0x2ae>
 8000dd6:	428b      	cmp	r3, r1
 8000dd8:	d92d      	bls.n	8000e36 <__udivmoddi4+0x2ae>
 8000dda:	3f02      	subs	r7, #2
 8000ddc:	4429      	add	r1, r5
 8000dde:	1acb      	subs	r3, r1, r3
 8000de0:	b281      	uxth	r1, r0
 8000de2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000de6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dee:	fb00 f308 	mul.w	r3, r0, r8
 8000df2:	428b      	cmp	r3, r1
 8000df4:	d907      	bls.n	8000e06 <__udivmoddi4+0x27e>
 8000df6:	1869      	adds	r1, r5, r1
 8000df8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000dfc:	d217      	bcs.n	8000e2e <__udivmoddi4+0x2a6>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d915      	bls.n	8000e2e <__udivmoddi4+0x2a6>
 8000e02:	3802      	subs	r0, #2
 8000e04:	4429      	add	r1, r5
 8000e06:	1ac9      	subs	r1, r1, r3
 8000e08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e0c:	e73b      	b.n	8000c86 <__udivmoddi4+0xfe>
 8000e0e:	4637      	mov	r7, r6
 8000e10:	4630      	mov	r0, r6
 8000e12:	e709      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000e14:	4607      	mov	r7, r0
 8000e16:	e6e7      	b.n	8000be8 <__udivmoddi4+0x60>
 8000e18:	4618      	mov	r0, r3
 8000e1a:	e6fb      	b.n	8000c14 <__udivmoddi4+0x8c>
 8000e1c:	4541      	cmp	r1, r8
 8000e1e:	d2ab      	bcs.n	8000d78 <__udivmoddi4+0x1f0>
 8000e20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e24:	eb69 020e 	sbc.w	r2, r9, lr
 8000e28:	3801      	subs	r0, #1
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	e7a4      	b.n	8000d78 <__udivmoddi4+0x1f0>
 8000e2e:	4660      	mov	r0, ip
 8000e30:	e7e9      	b.n	8000e06 <__udivmoddi4+0x27e>
 8000e32:	4618      	mov	r0, r3
 8000e34:	e795      	b.n	8000d62 <__udivmoddi4+0x1da>
 8000e36:	4667      	mov	r7, ip
 8000e38:	e7d1      	b.n	8000dde <__udivmoddi4+0x256>
 8000e3a:	4681      	mov	r9, r0
 8000e3c:	e77c      	b.n	8000d38 <__udivmoddi4+0x1b0>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	442c      	add	r4, r5
 8000e42:	e747      	b.n	8000cd4 <__udivmoddi4+0x14c>
 8000e44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e48:	442b      	add	r3, r5
 8000e4a:	e72f      	b.n	8000cac <__udivmoddi4+0x124>
 8000e4c:	4638      	mov	r0, r7
 8000e4e:	e708      	b.n	8000c62 <__udivmoddi4+0xda>
 8000e50:	4637      	mov	r7, r6
 8000e52:	e6e9      	b.n	8000c28 <__udivmoddi4+0xa0>

08000e54 <__aeabi_idiv0>:
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop

08000e58 <_ZN3IMUC1Ev>:
 *      Author: cy
 */

#include <IMU/IMU.h>

IMU::IMU() {
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	4a04      	ldr	r2, [pc, #16]	; (8000e74 <_ZN3IMUC1Ev+0x1c>)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	601a      	str	r2, [r3, #0]
	// Auto-generated constructor stub
}
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	08009df8 	.word	0x08009df8

08000e78 <_ZN3IMUD1Ev>:

IMU::~IMU() {
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	4a04      	ldr	r2, [pc, #16]	; (8000e94 <_ZN3IMUD1Ev+0x1c>)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	601a      	str	r2, [r3, #0]
	// Auto-generated destructor stub
}
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	08009df8 	.word	0x08009df8

08000e98 <_ZN3IMUD0Ev>:
IMU::~IMU() {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
}
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f7ff ffe9 	bl	8000e78 <_ZN3IMUD1Ev>
 8000ea6:	2160      	movs	r1, #96	; 0x60
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f006 ffaf 	bl	8007e0c <_ZdlPvj>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <_ZN3IMU13initializeIMUEP17I2C_HandleTypeDef>:

void IMU::initializeIMU(I2C_HandleTypeDef* handle) {
 8000eb8:	b590      	push	{r4, r7, lr}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
	hi2c = handle;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	683a      	ldr	r2, [r7, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
	// Set mode to NDOF
	setMode(IMU_Mode::OPR_MODE_NDOF);
 8000ec8:	210c      	movs	r1, #12
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f000 fa28 	bl	8001320 <_ZN3IMU7setModeENS_8IMU_ModeE>
	// Set acceleration samples to 0 and time step to 0
	accelTimeSteps = 0;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	659a      	str	r2, [r3, #88]	; 0x58
	accelerationSamples[0][0] = 0.0;
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	f04f 0300 	mov.w	r3, #0
 8000edc:	f04f 0400 	mov.w	r4, #0
 8000ee0:	e9c2 3404 	strd	r3, r4, [r2, #16]
	accelerationSamples[0][1] = 0.0;
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	f04f 0300 	mov.w	r3, #0
 8000eea:	f04f 0400 	mov.w	r4, #0
 8000eee:	e9c2 3406 	strd	r3, r4, [r2, #24]
	accelerationSamples[1][0] = 0.0;
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	f04f 0300 	mov.w	r3, #0
 8000ef8:	f04f 0400 	mov.w	r4, #0
 8000efc:	e9c2 3408 	strd	r3, r4, [r2, #32]
	accelerationSamples[1][1] = 0.0;
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	f04f 0300 	mov.w	r3, #0
 8000f06:	f04f 0400 	mov.w	r4, #0
 8000f0a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	accelerationSamples[2][0] = 0.0;
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	f04f 0300 	mov.w	r3, #0
 8000f14:	f04f 0400 	mov.w	r4, #0
 8000f18:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	accelerationSamples[2][1] = 0.0;
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	f04f 0300 	mov.w	r3, #0
 8000f22:	f04f 0400 	mov.w	r4, #0
 8000f26:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	// Set Euler Angles units to degrees
	eulerAngleUnits = false;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	// Set Angular Rate units to Dps
	gyroscopeUnits = false;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	// Set Acceleration units to m/s^2
	totalAccelerationUnits = false;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	// Set Temperature units to C
	tempUnits = false;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2200      	movs	r2, #0
 8000f46:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	// Set data output format to Windows format
	write8(Registers::BNO055_UNIT_SEL_ADDR, 0x00);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	213b      	movs	r1, #59	; 0x3b
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f000 fa03 	bl	800135a <_ZN3IMU6write8Ehh>
	vTaskDelay(20);
 8000f54:	2014      	movs	r0, #20
 8000f56:	f005 fab1 	bl	80064bc <vTaskDelay>
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd90      	pop	{r4, r7, pc}
	...

08000f64 <_ZN3IMU14getOrientationENS_4AxesE>:

double IMU::getOrientation(Axes axis) {
 8000f64:	b590      	push	{r4, r7, lr}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	70fb      	strb	r3, [r7, #3]
	// Set register we need to read depending on the axis passed in
	uint8_t registerToRead = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	73fb      	strb	r3, [r7, #15]
	switch(axis) {
 8000f74:	78fb      	ldrb	r3, [r7, #3]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d007      	beq.n	8000f8a <_ZN3IMU14getOrientationENS_4AxesE+0x26>
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d008      	beq.n	8000f90 <_ZN3IMU14getOrientationENS_4AxesE+0x2c>
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d000      	beq.n	8000f84 <_ZN3IMU14getOrientationENS_4AxesE+0x20>
		break;
	case Axes::z:
		registerToRead = Registers::BNO055_EULER_H_LSB_ADDR;
		break;
	default:
		break;
 8000f82:	e008      	b.n	8000f96 <_ZN3IMU14getOrientationENS_4AxesE+0x32>
		registerToRead = Registers::BNO055_EULER_P_LSB_ADDR;
 8000f84:	231e      	movs	r3, #30
 8000f86:	73fb      	strb	r3, [r7, #15]
		break;
 8000f88:	e005      	b.n	8000f96 <_ZN3IMU14getOrientationENS_4AxesE+0x32>
		registerToRead = Registers::BNO055_EULER_R_LSB_ADDR;
 8000f8a:	231c      	movs	r3, #28
 8000f8c:	73fb      	strb	r3, [r7, #15]
		break;
 8000f8e:	e002      	b.n	8000f96 <_ZN3IMU14getOrientationENS_4AxesE+0x32>
		registerToRead = Registers::BNO055_EULER_H_LSB_ADDR;
 8000f90:	231a      	movs	r3, #26
 8000f92:	73fb      	strb	r3, [r7, #15]
		break;
 8000f94:	bf00      	nop
	}

	// Read the data registers
	int16_t data = read16(registerToRead);
 8000f96:	7bfb      	ldrb	r3, [r7, #15]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f000 f9fa 	bl	8001394 <_ZN3IMU6read16Eh>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	81bb      	strh	r3, [r7, #12]
	// Section 3.6.5.4 of datasheet for conversion from LSBs to deg/rad
	return eulerAngleUnits ? (double)data / 900.0 : (double)data / 16.0;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d00c      	beq.n	8000fc8 <_ZN3IMU14getOrientationENS_4AxesE+0x64>
 8000fae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fa6e 	bl	8000494 <__aeabi_i2d>
 8000fb8:	f04f 0200 	mov.w	r2, #0
 8000fbc:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <_ZN3IMU14getOrientationENS_4AxesE+0x90>)
 8000fbe:	f7ff fbfd 	bl	80007bc <__aeabi_ddiv>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	460c      	mov	r4, r1
 8000fc6:	e00b      	b.n	8000fe0 <_ZN3IMU14getOrientationENS_4AxesE+0x7c>
 8000fc8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fa61 	bl	8000494 <__aeabi_i2d>
 8000fd2:	f04f 0200 	mov.w	r2, #0
 8000fd6:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <_ZN3IMU14getOrientationENS_4AxesE+0x94>)
 8000fd8:	f7ff fbf0 	bl	80007bc <__aeabi_ddiv>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	460c      	mov	r4, r1
 8000fe0:	ec44 3b17 	vmov	d7, r3, r4
}
 8000fe4:	eeb0 0a47 	vmov.f32	s0, s14
 8000fe8:	eef0 0a67 	vmov.f32	s1, s15
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd90      	pop	{r4, r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	408c2000 	.word	0x408c2000
 8000ff8:	40300000 	.word	0x40300000

08000ffc <_ZN3IMU21getLinearAccelerationENS_4AxesE>:
	int16_t data = read16(registerToRead);
	// Section 3.6.4.1 of datasheet for conversion from LSBs to m/s^2
	return totalAccelerationUnits ? (double)data : (double)data / 100.0;
}

double IMU::getLinearAcceleration(Axes axis) {
 8000ffc:	b590      	push	{r4, r7, lr}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	460b      	mov	r3, r1
 8001006:	70fb      	strb	r3, [r7, #3]
	// Set register we need to read depending on the axis passed in
	uint8_t registerToRead = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	73fb      	strb	r3, [r7, #15]
	switch(axis) {
 800100c:	78fb      	ldrb	r3, [r7, #3]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d007      	beq.n	8001022 <_ZN3IMU21getLinearAccelerationENS_4AxesE+0x26>
 8001012:	2b02      	cmp	r3, #2
 8001014:	d008      	beq.n	8001028 <_ZN3IMU21getLinearAccelerationENS_4AxesE+0x2c>
 8001016:	2b00      	cmp	r3, #0
 8001018:	d000      	beq.n	800101c <_ZN3IMU21getLinearAccelerationENS_4AxesE+0x20>
		break;
	case Axes::z:
		registerToRead = Registers::BNO055_LINEAR_ACCEL_DATA_Z_LSB_ADDR;
		break;
	default:
		break;
 800101a:	e008      	b.n	800102e <_ZN3IMU21getLinearAccelerationENS_4AxesE+0x32>
		registerToRead = Registers::BNO055_LINEAR_ACCEL_DATA_X_LSB_ADDR;
 800101c:	2328      	movs	r3, #40	; 0x28
 800101e:	73fb      	strb	r3, [r7, #15]
		break;
 8001020:	e005      	b.n	800102e <_ZN3IMU21getLinearAccelerationENS_4AxesE+0x32>
		registerToRead = Registers::BNO055_LINEAR_ACCEL_DATA_Y_LSB_ADDR;
 8001022:	232a      	movs	r3, #42	; 0x2a
 8001024:	73fb      	strb	r3, [r7, #15]
		break;
 8001026:	e002      	b.n	800102e <_ZN3IMU21getLinearAccelerationENS_4AxesE+0x32>
		registerToRead = Registers::BNO055_LINEAR_ACCEL_DATA_Z_LSB_ADDR;
 8001028:	232c      	movs	r3, #44	; 0x2c
 800102a:	73fb      	strb	r3, [r7, #15]
		break;
 800102c:	bf00      	nop
	}

	// Read the data registers
	int16_t data = read16(registerToRead);
 800102e:	7bfb      	ldrb	r3, [r7, #15]
 8001030:	4619      	mov	r1, r3
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f000 f9ae 	bl	8001394 <_ZN3IMU6read16Eh>
 8001038:	4603      	mov	r3, r0
 800103a:	81bb      	strh	r3, [r7, #12]
	// Section 3.6.5.6 of datasheet for conversion from LSBs to m/s^2
	return (double)data / 100.0;
 800103c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff fa27 	bl	8000494 <__aeabi_i2d>
 8001046:	f04f 0200 	mov.w	r2, #0
 800104a:	4b07      	ldr	r3, [pc, #28]	; (8001068 <_ZN3IMU21getLinearAccelerationENS_4AxesE+0x6c>)
 800104c:	f7ff fbb6 	bl	80007bc <__aeabi_ddiv>
 8001050:	4603      	mov	r3, r0
 8001052:	460c      	mov	r4, r1
 8001054:	ec44 3b17 	vmov	d7, r3, r4
}
 8001058:	eeb0 0a47 	vmov.f32	s0, s14
 800105c:	eef0 0a67 	vmov.f32	s1, s15
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	bd90      	pop	{r4, r7, pc}
 8001066:	bf00      	nop
 8001068:	40590000 	.word	0x40590000

0800106c <_ZN3IMU23storeLinearAccelerationEv>:

// Shifts elements in column 1 into column 0 and new readings into column 1
void IMU::storeLinearAcceleration() {
 800106c:	b590      	push	{r4, r7, lr}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
	accelerationSamples[0][0] = accelerationSamples[0][1];
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	e9c2 3404 	strd	r3, r4, [r2, #16]
	accelerationSamples[0][1] = getLinearAcceleration(Axes::x);
 8001080:	2100      	movs	r1, #0
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff ffba 	bl	8000ffc <_ZN3IMU21getLinearAccelerationENS_4AxesE>
 8001088:	eeb0 7a40 	vmov.f32	s14, s0
 800108c:	eef0 7a60 	vmov.f32	s15, s1
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	ed83 7b06 	vstr	d7, [r3, #24]
	accelerationSamples[1][0] = accelerationSamples[1][1];
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	e9c2 3408 	strd	r3, r4, [r2, #32]
	accelerationSamples[1][1] = getLinearAcceleration(Axes::y);
 80010a2:	2101      	movs	r1, #1
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff ffa9 	bl	8000ffc <_ZN3IMU21getLinearAccelerationENS_4AxesE>
 80010aa:	eeb0 7a40 	vmov.f32	s14, s0
 80010ae:	eef0 7a60 	vmov.f32	s15, s1
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	accelerationSamples[2][0] = accelerationSamples[2][1];
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	accelerationSamples[2][1] = getLinearAcceleration(Axes::z);
 80010c4:	2102      	movs	r1, #2
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff ff98 	bl	8000ffc <_ZN3IMU21getLinearAccelerationENS_4AxesE>
 80010cc:	eeb0 7a40 	vmov.f32	s14, s0
 80010d0:	eef0 7a60 	vmov.f32	s15, s1
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	accelTimeSteps++;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010de:	1c5a      	adds	r2, r3, #1
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	659a      	str	r2, [r3, #88]	; 0x58
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd90      	pop	{r4, r7, pc}

080010ec <_ZN3IMU23calculateLinearVelocityEv>:

void IMU::calculateLinearVelocity() {
 80010ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
	// If no acceleration time steps taken, return to avoid divide by zero
	if(accelTimeSteps == 0) {
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	f000 80a6 	beq.w	800124c <_ZN3IMU23calculateLinearVelocityEv+0x160>
		return;
	}
	velocity[0] += accelerationSamples[0][0] + accelerationSamples[0][1] * 0.5 * (accelTimeSteps * ACCELERATION_TIME_STEP / 1000.0);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001112:	f04f 0200 	mov.w	r2, #0
 8001116:	4b50      	ldr	r3, [pc, #320]	; (8001258 <_ZN3IMU23calculateLinearVelocityEv+0x16c>)
 8001118:	f7ff fa26 	bl	8000568 <__aeabi_dmul>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	4692      	mov	sl, r2
 8001122:	469b      	mov	fp, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001128:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800112c:	fb02 f303 	mul.w	r3, r2, r3
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff f9af 	bl	8000494 <__aeabi_i2d>
 8001136:	f04f 0200 	mov.w	r2, #0
 800113a:	4b48      	ldr	r3, [pc, #288]	; (800125c <_ZN3IMU23calculateLinearVelocityEv+0x170>)
 800113c:	f7ff fb3e 	bl	80007bc <__aeabi_ddiv>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	4650      	mov	r0, sl
 8001146:	4659      	mov	r1, fp
 8001148:	f7ff fa0e 	bl	8000568 <__aeabi_dmul>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	4640      	mov	r0, r8
 8001152:	4649      	mov	r1, r9
 8001154:	f7ff f852 	bl	80001fc <__adddf3>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	4620      	mov	r0, r4
 800115e:	4629      	mov	r1, r5
 8001160:	f7ff f84c 	bl	80001fc <__adddf3>
 8001164:	4603      	mov	r3, r0
 8001166:	460c      	mov	r4, r1
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	velocity[1] += accelerationSamples[1][0] + accelerationSamples[1][1] * 0.5 * (accelTimeSteps * ACCELERATION_TIME_STEP / 1000.0);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001180:	f04f 0200 	mov.w	r2, #0
 8001184:	4b34      	ldr	r3, [pc, #208]	; (8001258 <_ZN3IMU23calculateLinearVelocityEv+0x16c>)
 8001186:	f7ff f9ef 	bl	8000568 <__aeabi_dmul>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	4692      	mov	sl, r2
 8001190:	469b      	mov	fp, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001196:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800119a:	fb02 f303 	mul.w	r3, r2, r3
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff f978 	bl	8000494 <__aeabi_i2d>
 80011a4:	f04f 0200 	mov.w	r2, #0
 80011a8:	4b2c      	ldr	r3, [pc, #176]	; (800125c <_ZN3IMU23calculateLinearVelocityEv+0x170>)
 80011aa:	f7ff fb07 	bl	80007bc <__aeabi_ddiv>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	4650      	mov	r0, sl
 80011b4:	4659      	mov	r1, fp
 80011b6:	f7ff f9d7 	bl	8000568 <__aeabi_dmul>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	4640      	mov	r0, r8
 80011c0:	4649      	mov	r1, r9
 80011c2:	f7ff f81b 	bl	80001fc <__adddf3>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	4620      	mov	r0, r4
 80011cc:	4629      	mov	r1, r5
 80011ce:	f7ff f815 	bl	80001fc <__adddf3>
 80011d2:	4603      	mov	r3, r0
 80011d4:	460c      	mov	r4, r1
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	velocity[2] += accelerationSamples[2][0] + accelerationSamples[2][1] * 0.5 * (accelTimeSteps * ACCELERATION_TIME_STEP / 1000.0);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	e9d3 890c 	ldrd	r8, r9, [r3, #48]	; 0x30
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80011ee:	f04f 0200 	mov.w	r2, #0
 80011f2:	4b19      	ldr	r3, [pc, #100]	; (8001258 <_ZN3IMU23calculateLinearVelocityEv+0x16c>)
 80011f4:	f7ff f9b8 	bl	8000568 <__aeabi_dmul>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	4692      	mov	sl, r2
 80011fe:	469b      	mov	fp, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001204:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001208:	fb02 f303 	mul.w	r3, r2, r3
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff f941 	bl	8000494 <__aeabi_i2d>
 8001212:	f04f 0200 	mov.w	r2, #0
 8001216:	4b11      	ldr	r3, [pc, #68]	; (800125c <_ZN3IMU23calculateLinearVelocityEv+0x170>)
 8001218:	f7ff fad0 	bl	80007bc <__aeabi_ddiv>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4650      	mov	r0, sl
 8001222:	4659      	mov	r1, fp
 8001224:	f7ff f9a0 	bl	8000568 <__aeabi_dmul>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	4640      	mov	r0, r8
 800122e:	4649      	mov	r1, r9
 8001230:	f7fe ffe4 	bl	80001fc <__adddf3>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	4620      	mov	r0, r4
 800123a:	4629      	mov	r1, r5
 800123c:	f7fe ffde 	bl	80001fc <__adddf3>
 8001240:	4603      	mov	r3, r0
 8001242:	460c      	mov	r4, r1
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
 800124a:	e000      	b.n	800124e <_ZN3IMU23calculateLinearVelocityEv+0x162>
		return;
 800124c:	bf00      	nop
}
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001256:	bf00      	nop
 8001258:	3fe00000 	.word	0x3fe00000
 800125c:	408f4000 	.word	0x408f4000

08001260 <_ZN3IMU17getLinearVelocityENS_4AxesE>:

double IMU::getLinearVelocity(Axes axis) {
 8001260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	460b      	mov	r3, r1
 800126a:	70fb      	strb	r3, [r7, #3]
	switch(axis) {
 800126c:	78fb      	ldrb	r3, [r7, #3]
 800126e:	2b03      	cmp	r3, #3
 8001270:	d845      	bhi.n	80012fe <_ZN3IMU17getLinearVelocityENS_4AxesE+0x9e>
 8001272:	a201      	add	r2, pc, #4	; (adr r2, 8001278 <_ZN3IMU17getLinearVelocityENS_4AxesE+0x18>)
 8001274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001278:	08001289 	.word	0x08001289
 800127c:	08001291 	.word	0x08001291
 8001280:	08001299 	.word	0x08001299
 8001284:	080012a1 	.word	0x080012a1
	case Axes::x:
		return velocity[0];
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800128e:	e039      	b.n	8001304 <_ZN3IMU17getLinearVelocityENS_4AxesE+0xa4>
		break;
	case Axes::y:
		return velocity[1];
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8001296:	e035      	b.n	8001304 <_ZN3IMU17getLinearVelocityENS_4AxesE+0xa4>
		break;
	case Axes::z:
		return velocity[2];
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 800129e:	e031      	b.n	8001304 <_ZN3IMU17getLinearVelocityENS_4AxesE+0xa4>
		break;
	case Axes::xy:
		return sqrt(velocity[0] * velocity[0] + velocity[1] * velocity[1]);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 80012ac:	461a      	mov	r2, r3
 80012ae:	4623      	mov	r3, r4
 80012b0:	f7ff f95a 	bl	8000568 <__aeabi_dmul>
 80012b4:	4603      	mov	r3, r0
 80012b6:	460c      	mov	r4, r1
 80012b8:	461d      	mov	r5, r3
 80012ba:	4626      	mov	r6, r4
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	e9d3 3412 	ldrd	r3, r4, [r3, #72]	; 0x48
 80012c8:	461a      	mov	r2, r3
 80012ca:	4623      	mov	r3, r4
 80012cc:	f7ff f94c 	bl	8000568 <__aeabi_dmul>
 80012d0:	4603      	mov	r3, r0
 80012d2:	460c      	mov	r4, r1
 80012d4:	461a      	mov	r2, r3
 80012d6:	4623      	mov	r3, r4
 80012d8:	4628      	mov	r0, r5
 80012da:	4631      	mov	r1, r6
 80012dc:	f7fe ff8e 	bl	80001fc <__adddf3>
 80012e0:	4603      	mov	r3, r0
 80012e2:	460c      	mov	r4, r1
 80012e4:	ec44 3b17 	vmov	d7, r3, r4
 80012e8:	eeb0 0a47 	vmov.f32	s0, s14
 80012ec:	eef0 0a67 	vmov.f32	s1, s15
 80012f0:	f006 fd90 	bl	8007e14 <sqrt>
 80012f4:	eeb0 7a40 	vmov.f32	s14, s0
 80012f8:	eef0 7a60 	vmov.f32	s15, s1
 80012fc:	e002      	b.n	8001304 <_ZN3IMU17getLinearVelocityENS_4AxesE+0xa4>
		break;
	default:
		break;
 80012fe:	bf00      	nop
	}
	return 0.0;
 8001300:	ed9f 7b05 	vldr	d7, [pc, #20]	; 8001318 <_ZN3IMU17getLinearVelocityENS_4AxesE+0xb8>
}
 8001304:	eeb0 0a47 	vmov.f32	s0, s14
 8001308:	eef0 0a67 	vmov.f32	s1, s15
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001312:	bf00      	nop
 8001314:	f3af 8000 	nop.w
	...

08001320 <_ZN3IMU7setModeENS_8IMU_ModeE>:

void IMU::setMode(IMU_Mode mode) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	460b      	mov	r3, r1
 800132a:	70fb      	strb	r3, [r7, #3]
	write8(Registers::BNO055_OPR_MODE_ADDR, mode);
 800132c:	78fb      	ldrb	r3, [r7, #3]
 800132e:	461a      	mov	r2, r3
 8001330:	213d      	movs	r1, #61	; 0x3d
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f000 f811 	bl	800135a <_ZN3IMU6write8Ehh>
	currentMode = mode;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	78fa      	ldrb	r2, [r7, #3]
 800133c:	721a      	strb	r2, [r3, #8]
	// Time required to switch between operating modes (Datasheet Table 3-6)
	mode == IMU_Mode::OPR_MODE_CONFIGMODE ? vTaskDelay(pdMS_TO_TICKS(19)) : vTaskDelay(pdMS_TO_TICKS(7));
 800133e:	78fb      	ldrb	r3, [r7, #3]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d103      	bne.n	800134c <_ZN3IMU7setModeENS_8IMU_ModeE+0x2c>
 8001344:	2013      	movs	r0, #19
 8001346:	f005 f8b9 	bl	80064bc <vTaskDelay>
	return;
 800134a:	e003      	b.n	8001354 <_ZN3IMU7setModeENS_8IMU_ModeE+0x34>
	mode == IMU_Mode::OPR_MODE_CONFIGMODE ? vTaskDelay(pdMS_TO_TICKS(19)) : vTaskDelay(pdMS_TO_TICKS(7));
 800134c:	2007      	movs	r0, #7
 800134e:	f005 f8b5 	bl	80064bc <vTaskDelay>
	return;
 8001352:	bf00      	nop
}
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <_ZN3IMU6write8Ehh>:

uint8_t IMU::getSysError() {
	return (uint8_t)read8(Registers::BNO055_SYS_ERR_ADDR);
}

HAL_StatusTypeDef IMU::write8(uint8_t reg, uint8_t value) {
 800135a:	b580      	push	{r7, lr}
 800135c:	b086      	sub	sp, #24
 800135e:	af02      	add	r7, sp, #8
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	460b      	mov	r3, r1
 8001364:	70fb      	strb	r3, [r7, #3]
 8001366:	4613      	mov	r3, r2
 8001368:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef ret;
	// Combine reg and value into a buffer
	uint8_t buffer[2];
	buffer[0] = reg;
 800136a:	78fb      	ldrb	r3, [r7, #3]
 800136c:	733b      	strb	r3, [r7, #12]
	buffer[1] = value;
 800136e:	78bb      	ldrb	r3, [r7, #2]
 8001370:	737b      	strb	r3, [r7, #13]
	// Send buffer over
	ret = HAL_I2C_Master_Transmit(hi2c, IMU_I2C_ADDR << 1, buffer, 2, 2);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6858      	ldr	r0, [r3, #4]
 8001376:	f107 020c 	add.w	r2, r7, #12
 800137a:	2302      	movs	r3, #2
 800137c:	9300      	str	r3, [sp, #0]
 800137e:	2302      	movs	r3, #2
 8001380:	2150      	movs	r1, #80	; 0x50
 8001382:	f001 fe71 	bl	8003068 <HAL_I2C_Master_Transmit>
 8001386:	4603      	mov	r3, r0
 8001388:	73fb      	strb	r3, [r7, #15]
	return ret;
 800138a:	7bfb      	ldrb	r3, [r7, #15]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <_ZN3IMU6read16Eh>:
		return 0xFF;
	}
	return (int8_t)value;
}

int16_t IMU::read16(uint8_t reg) {
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af02      	add	r7, sp, #8
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef ret;
	uint8_t buffer[2];
	// Tell sensor that we want to read from reg
	ret = HAL_I2C_Master_Transmit(hi2c, IMU_I2C_ADDR << 1, &reg, 1, I2C_TIMEOUT);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6858      	ldr	r0, [r3, #4]
 80013a4:	1cfa      	adds	r2, r7, #3
 80013a6:	2302      	movs	r3, #2
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	2301      	movs	r3, #1
 80013ac:	2150      	movs	r1, #80	; 0x50
 80013ae:	f001 fe5b 	bl	8003068 <HAL_I2C_Master_Transmit>
 80013b2:	4603      	mov	r3, r0
 80013b4:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) {
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d002      	beq.n	80013c2 <_ZN3IMU6read16Eh+0x2e>
		return 0xFFFF;
 80013bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013c0:	e01a      	b.n	80013f8 <_ZN3IMU6read16Eh+0x64>
	}
	// Read 1 byte from reg
	ret = HAL_I2C_Master_Receive(hi2c, IMU_I2C_ADDR << 1, buffer, 2, I2C_TIMEOUT);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6858      	ldr	r0, [r3, #4]
 80013c6:	f107 0208 	add.w	r2, r7, #8
 80013ca:	2302      	movs	r3, #2
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	2302      	movs	r3, #2
 80013d0:	2150      	movs	r1, #80	; 0x50
 80013d2:	f001 ff47 	bl	8003264 <HAL_I2C_Master_Receive>
 80013d6:	4603      	mov	r3, r0
 80013d8:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) {
 80013da:	7bfb      	ldrb	r3, [r7, #15]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d002      	beq.n	80013e6 <_ZN3IMU6read16Eh+0x52>
		return 0xFFFF;
 80013e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013e4:	e008      	b.n	80013f8 <_ZN3IMU6read16Eh+0x64>
	}
	// The LSB is always at the lower register address, so cast buffer[0] into 16 bits and shift it left by 8
	// And then OR with MSB to combine into 2 bytes
	int16_t value = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80013e6:	7a7b      	ldrb	r3, [r7, #9]
 80013e8:	021b      	lsls	r3, r3, #8
 80013ea:	b21a      	sxth	r2, r3
 80013ec:	7a3b      	ldrb	r3, [r7, #8]
 80013ee:	b21b      	sxth	r3, r3
 80013f0:	4313      	orrs	r3, r2
 80013f2:	81bb      	strh	r3, [r7, #12]
	return value;
 80013f4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <_ZN3GPSC1Ev>:
 *      Author: rishgoel
 */

#include <GPS.h>

GPS::GPS() {
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	4a04      	ldr	r2, [pc, #16]	; (800141c <_ZN3GPSC1Ev+0x1c>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4618      	mov	r0, r3
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	08009e08 	.word	0x08009e08

08001420 <_ZN3GPSD1Ev>:

GPS::~GPS() {
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	4a04      	ldr	r2, [pc, #16]	; (800143c <_ZN3GPSD1Ev+0x1c>)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4618      	mov	r0, r3
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	08009e08 	.word	0x08009e08

08001440 <_ZN3GPSD0Ev>:
GPS::~GPS() {
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
}
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff ffe9 	bl	8001420 <_ZN3GPSD1Ev>
 800144e:	21c8      	movs	r1, #200	; 0xc8
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f006 fcdb 	bl	8007e0c <_ZdlPvj>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4618      	mov	r0, r3
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <_ZN3GPS4initEP20__UART_HandleTypeDef>:

void GPS::init(UART_HandleTypeDef* handle){
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
	//Set the UART handle for gps data
	huart = handle;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	605a      	str	r2, [r3, #4]
	//Initialize the lwgps parser
	lwgps_init(&lwgps_handle);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3308      	adds	r3, #8
 8001474:	4618      	mov	r0, r3
 8001476:	f000 fd6d 	bl	8001f54 <lwgps_init>
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <_ZN3GPS6updateEv>:

bool GPS::update(){
 8001482:	b590      	push	{r4, r7, lr}
 8001484:	b0e7      	sub	sp, #412	; 0x19c
 8001486:	af00      	add	r7, sp, #0
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	6018      	str	r0, [r3, #0]
	char* data[100];
	//TODO Maybe change this to an interrupt based thing
	HAL_UART_Receive(huart,(uint8_t*) data, sizeof(data), 1000);
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6858      	ldr	r0, [r3, #4]
 8001492:	f107 0108 	add.w	r1, r7, #8
 8001496:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800149a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800149e:	f003 fbcd 	bl	8004c3c <HAL_UART_Receive>

	lwgps_process(&lwgps_handle, data, sizeof(data));
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	3308      	adds	r3, #8
 80014a8:	f107 0108 	add.w	r1, r7, #8
 80014ac:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80014b0:	4618      	mov	r0, r3
 80014b2:	f000 fd5d 	bl	8001f70 <lwgps_process>

	if(lwgps_handle.is_valid)
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d011      	beq.n	80014e6 <_ZN3GPS6updateEv+0x64>
	{
		curr_position.latitude = lwgps_handle.latitude;
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80014ca:	1d3a      	adds	r2, r7, #4
 80014cc:	6812      	ldr	r2, [r2, #0]
 80014ce:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
		curr_position.longitude = lwgps_handle.longitude;
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80014da:	1d3a      	adds	r2, r7, #4
 80014dc:	6812      	ldr	r2, [r2, #0]
 80014de:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
		return true;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e000      	b.n	80014e8 <_ZN3GPS6updateEv+0x66>
	}
	return false;
 80014e6:	2300      	movs	r3, #0
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd90      	pop	{r4, r7, pc}

080014f2 <_ZN3GPS11getPositionEv>:

location GPS::getPosition(){
 80014f2:	b490      	push	{r4, r7}
 80014f4:	b08a      	sub	sp, #40	; 0x28
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6178      	str	r0, [r7, #20]
	return curr_position;
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	f107 0418 	add.w	r4, r7, #24
 8001500:	33b8      	adds	r3, #184	; 0xb8
 8001502:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001504:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001508:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800150c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001510:	ec42 1b16 	vmov	d6, r1, r2
 8001514:	ec44 3b17 	vmov	d7, r3, r4
}
 8001518:	eeb0 0a46 	vmov.f32	s0, s12
 800151c:	eef0 0a66 	vmov.f32	s1, s13
 8001520:	eeb0 1a47 	vmov.f32	s2, s14
 8001524:	eef0 1a67 	vmov.f32	s3, s15
 8001528:	3728      	adds	r7, #40	; 0x28
 800152a:	46bd      	mov	sp, r7
 800152c:	bc90      	pop	{r4, r7}
 800152e:	4770      	bx	lr

08001530 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08a      	sub	sp, #40	; 0x28
 8001534:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	609a      	str	r2, [r3, #8]
 8001542:	60da      	str	r2, [r3, #12]
 8001544:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	613b      	str	r3, [r7, #16]
 800154a:	4b2d      	ldr	r3, [pc, #180]	; (8001600 <MX_GPIO_Init+0xd0>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a2c      	ldr	r2, [pc, #176]	; (8001600 <MX_GPIO_Init+0xd0>)
 8001550:	f043 0304 	orr.w	r3, r3, #4
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b2a      	ldr	r3, [pc, #168]	; (8001600 <MX_GPIO_Init+0xd0>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0304 	and.w	r3, r3, #4
 800155e:	613b      	str	r3, [r7, #16]
 8001560:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	4b26      	ldr	r3, [pc, #152]	; (8001600 <MX_GPIO_Init+0xd0>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	4a25      	ldr	r2, [pc, #148]	; (8001600 <MX_GPIO_Init+0xd0>)
 800156c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001570:	6313      	str	r3, [r2, #48]	; 0x30
 8001572:	4b23      	ldr	r3, [pc, #140]	; (8001600 <MX_GPIO_Init+0xd0>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	4b1f      	ldr	r3, [pc, #124]	; (8001600 <MX_GPIO_Init+0xd0>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	4a1e      	ldr	r2, [pc, #120]	; (8001600 <MX_GPIO_Init+0xd0>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6313      	str	r3, [r2, #48]	; 0x30
 800158e:	4b1c      	ldr	r3, [pc, #112]	; (8001600 <MX_GPIO_Init+0xd0>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	4b18      	ldr	r3, [pc, #96]	; (8001600 <MX_GPIO_Init+0xd0>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a17      	ldr	r2, [pc, #92]	; (8001600 <MX_GPIO_Init+0xd0>)
 80015a4:	f043 0302 	orr.w	r3, r3, #2
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b15      	ldr	r3, [pc, #84]	; (8001600 <MX_GPIO_Init+0xd0>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2120      	movs	r1, #32
 80015ba:	4812      	ldr	r0, [pc, #72]	; (8001604 <MX_GPIO_Init+0xd4>)
 80015bc:	f001 fbf8 	bl	8002db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015c6:	4b10      	ldr	r3, [pc, #64]	; (8001608 <MX_GPIO_Init+0xd8>)
 80015c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	4619      	mov	r1, r3
 80015d4:	480d      	ldr	r0, [pc, #52]	; (800160c <MX_GPIO_Init+0xdc>)
 80015d6:	f001 fa69 	bl	8002aac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015da:	2320      	movs	r3, #32
 80015dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015de:	2301      	movs	r3, #1
 80015e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e6:	2300      	movs	r3, #0
 80015e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015ea:	f107 0314 	add.w	r3, r7, #20
 80015ee:	4619      	mov	r1, r3
 80015f0:	4804      	ldr	r0, [pc, #16]	; (8001604 <MX_GPIO_Init+0xd4>)
 80015f2:	f001 fa5b 	bl	8002aac <HAL_GPIO_Init>

}
 80015f6:	bf00      	nop
 80015f8:	3728      	adds	r7, #40	; 0x28
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40023800 	.word	0x40023800
 8001604:	40020000 	.word	0x40020000
 8001608:	10210000 	.word	0x10210000
 800160c:	40020800 	.word	0x40020800

08001610 <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d106      	bne.n	8001632 <prv_parse_number+0x22>
        t = gh->p.term_str;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3371      	adds	r3, #113	; 0x71
 8001628:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; t++) {}      /* Strip leading spaces */
 800162a:	e002      	b.n	8001632 <prv_parse_number+0x22>
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	3301      	adds	r3, #1
 8001630:	603b      	str	r3, [r7, #0]
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d003      	beq.n	8001640 <prv_parse_number+0x30>
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b20      	cmp	r3, #32
 800163e:	d0f5      	beq.n	800162c <prv_parse_number+0x1c>

    minus = (*t == '-' ? (t++, 1) : 0);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b2d      	cmp	r3, #45	; 0x2d
 8001646:	d104      	bne.n	8001652 <prv_parse_number+0x42>
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	3301      	adds	r3, #1
 800164c:	603b      	str	r3, [r7, #0]
 800164e:	2301      	movs	r3, #1
 8001650:	e000      	b.n	8001654 <prv_parse_number+0x44>
 8001652:	2300      	movs	r3, #0
 8001654:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); t++) {
 8001656:	e00d      	b.n	8001674 <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 8001658:	68fa      	ldr	r2, [r7, #12]
 800165a:	4613      	mov	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	461a      	mov	r2, r3
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	3b30      	subs	r3, #48	; 0x30
 800166a:	4413      	add	r3, r2
 800166c:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); t++) {
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	3301      	adds	r3, #1
 8001672:	603b      	str	r3, [r7, #0]
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d007      	beq.n	800168a <prv_parse_number+0x7a>
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b2f      	cmp	r3, #47	; 0x2f
 8001680:	d903      	bls.n	800168a <prv_parse_number+0x7a>
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b39      	cmp	r3, #57	; 0x39
 8001688:	d9e6      	bls.n	8001658 <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 800168a:	7afb      	ldrb	r3, [r7, #11]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d002      	beq.n	8001696 <prv_parse_number+0x86>
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	425b      	negs	r3, r3
 8001694:	e000      	b.n	8001698 <prv_parse_number+0x88>
 8001696:	68fb      	ldr	r3, [r7, #12]
}
 8001698:	4618      	mov	r0, r3
 800169a:	3714      	adds	r7, #20
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 80016a4:	b590      	push	{r4, r7, lr}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
    lwgps_float_t res;

    if (t == NULL) {
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d106      	bne.n	80016c2 <prv_parse_float_number+0x1e>
        t = gh->p.term_str;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3371      	adds	r3, #113	; 0x71
 80016b8:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; t++) {}      /* Strip leading spaces */
 80016ba:	e002      	b.n	80016c2 <prv_parse_float_number+0x1e>
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	3301      	adds	r3, #1
 80016c0:	603b      	str	r3, [r7, #0]
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d003      	beq.n	80016d0 <prv_parse_float_number+0x2c>
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b20      	cmp	r3, #32
 80016ce:	d0f5      	beq.n	80016bc <prv_parse_float_number+0x18>

#if LWGPS_CFG_DOUBLE
    res = strtod(t, NULL);                      /* Parse string to double */
 80016d0:	2100      	movs	r1, #0
 80016d2:	6838      	ldr	r0, [r7, #0]
 80016d4:	f007 fbd4 	bl	8008e80 <strtod>
 80016d8:	ed87 0b02 	vstr	d0, [r7, #8]
#else /* LWGPS_CFG_DOUBLE */
    res = strtof(t, NULL);                      /* Parse string to float */
#endif /* !LWGPS_CFG_DOUBLE */

    return FLT(res);                            /* Return casted value, based on float size */
 80016dc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80016e0:	ec44 3b17 	vmov	d7, r3, r4
}
 80016e4:	eeb0 0a47 	vmov.f32	s0, s14
 80016e8:	eef0 0a67 	vmov.f32	s1, s15
 80016ec:	3714      	adds	r7, #20
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd90      	pop	{r4, r7, pc}
	...

080016f4 <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 80016f4:	b590      	push	{r4, r7, lr}
 80016f6:	b089      	sub	sp, #36	; 0x24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL);          /* Parse value as double */
 80016fc:	2100      	movs	r1, #0
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff ffd0 	bl	80016a4 <prv_parse_float_number>
 8001704:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)ll / 100));            /* Get absolute degrees value, interested in integer part only */
 8001708:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800170c:	f7ff f9dc 	bl	8000ac8 <__aeabi_d2iz>
 8001710:	4603      	mov	r3, r0
 8001712:	4a1f      	ldr	r2, [pc, #124]	; (8001790 <prv_parse_lat_long+0x9c>)
 8001714:	fb82 1203 	smull	r1, r2, r2, r3
 8001718:	1152      	asrs	r2, r2, #5
 800171a:	17db      	asrs	r3, r3, #31
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	4618      	mov	r0, r3
 8001720:	f7fe feb8 	bl	8000494 <__aeabi_i2d>
 8001724:	4603      	mov	r3, r0
 8001726:	460c      	mov	r4, r1
 8001728:	e9c7 3404 	strd	r3, r4, [r7, #16]
    min = ll - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 800172c:	f04f 0200 	mov.w	r2, #0
 8001730:	4b18      	ldr	r3, [pc, #96]	; (8001794 <prv_parse_lat_long+0xa0>)
 8001732:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001736:	f7fe ff17 	bl	8000568 <__aeabi_dmul>
 800173a:	4603      	mov	r3, r0
 800173c:	460c      	mov	r4, r1
 800173e:	461a      	mov	r2, r3
 8001740:	4623      	mov	r3, r4
 8001742:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001746:	f7fe fd57 	bl	80001f8 <__aeabi_dsub>
 800174a:	4603      	mov	r3, r0
 800174c:	460c      	mov	r4, r1
 800174e:	e9c7 3402 	strd	r3, r4, [r7, #8]
    ll = deg + (min / FLT(60.0));               /* Calculate latitude/longitude */
 8001752:	f04f 0200 	mov.w	r2, #0
 8001756:	4b10      	ldr	r3, [pc, #64]	; (8001798 <prv_parse_lat_long+0xa4>)
 8001758:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800175c:	f7ff f82e 	bl	80007bc <__aeabi_ddiv>
 8001760:	4603      	mov	r3, r0
 8001762:	460c      	mov	r4, r1
 8001764:	461a      	mov	r2, r3
 8001766:	4623      	mov	r3, r4
 8001768:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800176c:	f7fe fd46 	bl	80001fc <__adddf3>
 8001770:	4603      	mov	r3, r0
 8001772:	460c      	mov	r4, r1
 8001774:	e9c7 3406 	strd	r3, r4, [r7, #24]

    return ll;
 8001778:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800177c:	ec44 3b17 	vmov	d7, r3, r4
}
 8001780:	eeb0 0a47 	vmov.f32	s0, s14
 8001784:	eef0 0a67 	vmov.f32	s1, s15
 8001788:	3724      	adds	r7, #36	; 0x24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd90      	pop	{r4, r7, pc}
 800178e:	bf00      	nop
 8001790:	51eb851f 	.word	0x51eb851f
 8001794:	40590000 	.word	0x40590000
 8001798:	404e0000 	.word	0x404e0000

0800179c <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 800179c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) {                  /* Check string type */
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
 80017aa:	2800      	cmp	r0, #0
 80017ac:	d169      	bne.n	8001882 <prv_parse_term+0xe6>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	3371      	adds	r3, #113	; 0x71
 80017b2:	2206      	movs	r2, #6
 80017b4:	49c0      	ldr	r1, [pc, #768]	; (8001ab8 <prv_parse_term+0x31c>)
 80017b6:	4618      	mov	r0, r3
 80017b8:	f006 fd3e 	bl	8008238 <strncmp>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d009      	beq.n	80017d6 <prv_parse_term+0x3a>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	3371      	adds	r3, #113	; 0x71
 80017c6:	2206      	movs	r2, #6
 80017c8:	49bc      	ldr	r1, [pc, #752]	; (8001abc <prv_parse_term+0x320>)
 80017ca:	4618      	mov	r0, r3
 80017cc:	f006 fd34 	bl	8008238 <strncmp>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d104      	bne.n	80017e0 <prv_parse_term+0x44>
            gh->p.stat = STAT_GGA;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2201      	movs	r2, #1
 80017da:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80017de:	e04e      	b.n	800187e <prv_parse_term+0xe2>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3371      	adds	r3, #113	; 0x71
 80017e4:	2206      	movs	r2, #6
 80017e6:	49b6      	ldr	r1, [pc, #728]	; (8001ac0 <prv_parse_term+0x324>)
 80017e8:	4618      	mov	r0, r3
 80017ea:	f006 fd25 	bl	8008238 <strncmp>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d009      	beq.n	8001808 <prv_parse_term+0x6c>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3371      	adds	r3, #113	; 0x71
 80017f8:	2206      	movs	r2, #6
 80017fa:	49b2      	ldr	r1, [pc, #712]	; (8001ac4 <prv_parse_term+0x328>)
 80017fc:	4618      	mov	r0, r3
 80017fe:	f006 fd1b 	bl	8008238 <strncmp>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d104      	bne.n	8001812 <prv_parse_term+0x76>
            gh->p.stat = STAT_GSA;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2202      	movs	r2, #2
 800180c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8001810:	e035      	b.n	800187e <prv_parse_term+0xe2>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	3371      	adds	r3, #113	; 0x71
 8001816:	2206      	movs	r2, #6
 8001818:	49ab      	ldr	r1, [pc, #684]	; (8001ac8 <prv_parse_term+0x32c>)
 800181a:	4618      	mov	r0, r3
 800181c:	f006 fd0c 	bl	8008238 <strncmp>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d009      	beq.n	800183a <prv_parse_term+0x9e>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3371      	adds	r3, #113	; 0x71
 800182a:	2206      	movs	r2, #6
 800182c:	49a7      	ldr	r1, [pc, #668]	; (8001acc <prv_parse_term+0x330>)
 800182e:	4618      	mov	r0, r3
 8001830:	f006 fd02 	bl	8008238 <strncmp>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d104      	bne.n	8001844 <prv_parse_term+0xa8>
            gh->p.stat = STAT_GSV;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2203      	movs	r2, #3
 800183e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8001842:	e01c      	b.n	800187e <prv_parse_term+0xe2>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3371      	adds	r3, #113	; 0x71
 8001848:	2206      	movs	r2, #6
 800184a:	49a1      	ldr	r1, [pc, #644]	; (8001ad0 <prv_parse_term+0x334>)
 800184c:	4618      	mov	r0, r3
 800184e:	f006 fcf3 	bl	8008238 <strncmp>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d009      	beq.n	800186c <prv_parse_term+0xd0>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3371      	adds	r3, #113	; 0x71
 800185c:	2206      	movs	r2, #6
 800185e:	499d      	ldr	r1, [pc, #628]	; (8001ad4 <prv_parse_term+0x338>)
 8001860:	4618      	mov	r0, r3
 8001862:	f006 fce9 	bl	8008238 <strncmp>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d104      	bne.n	8001876 <prv_parse_term+0xda>
            gh->p.stat = STAT_RMC;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2204      	movs	r2, #4
 8001870:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8001874:	e003      	b.n	800187e <prv_parse_term+0xe2>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN;          /* Invalid statement for library */
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        }
        return 1;
 800187e:	2301      	movs	r3, #1
 8001880:	e234      	b.n	8001cec <prv_parse_term+0x550>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
 8001888:	2800      	cmp	r0, #0
 800188a:	f000 822e 	beq.w	8001cea <prv_parse_term+0x54e>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {        /* Process GPGGA statement */
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
 8001894:	2801      	cmp	r0, #1
 8001896:	f040 80ca 	bne.w	8001a2e <prv_parse_term+0x292>
        switch (gh->p.term_num) {
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80018a0:	3b01      	subs	r3, #1
 80018a2:	2b0a      	cmp	r3, #10
 80018a4:	f200 8214 	bhi.w	8001cd0 <prv_parse_term+0x534>
 80018a8:	a001      	add	r0, pc, #4	; (adr r0, 80018b0 <prv_parse_term+0x114>)
 80018aa:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80018ae:	bf00      	nop
 80018b0:	080018dd 	.word	0x080018dd
 80018b4:	08001957 	.word	0x08001957
 80018b8:	0800196d 	.word	0x0800196d
 80018bc:	08001997 	.word	0x08001997
 80018c0:	080019ad 	.word	0x080019ad
 80018c4:	080019d7 	.word	0x080019d7
 80018c8:	080019eb 	.word	0x080019eb
 80018cc:	08001cd1 	.word	0x08001cd1
 80018d0:	080019ff 	.word	0x080019ff
 80018d4:	08001cd1 	.word	0x08001cd1
 80018d8:	08001a17 	.word	0x08001a17
            case 1:                             /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80018e2:	3b30      	subs	r3, #48	; 0x30
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	461a      	mov	r2, r3
 80018e8:	0092      	lsls	r2, r2, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80018f6:	4413      	add	r3, r2
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	3b30      	subs	r3, #48	; 0x30
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 800190a:	3b30      	subs	r3, #48	; 0x30
 800190c:	b2db      	uxtb	r3, r3
 800190e:	461a      	mov	r2, r3
 8001910:	0092      	lsls	r2, r2, #2
 8001912:	4413      	add	r3, r2
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	b2da      	uxtb	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800191e:	4413      	add	r3, r2
 8001920:	b2db      	uxtb	r3, r3
 8001922:	3b30      	subs	r3, #48	; 0x30
 8001924:	b2da      	uxtb	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8001932:	3b30      	subs	r3, #48	; 0x30
 8001934:	b2db      	uxtb	r3, r3
 8001936:	461a      	mov	r2, r3
 8001938:	0092      	lsls	r2, r2, #2
 800193a:	4413      	add	r3, r2
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	b2da      	uxtb	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001946:	4413      	add	r3, r2
 8001948:	b2db      	uxtb	r3, r3
 800194a:	3b30      	subs	r3, #48	; 0x30
 800194c:	b2da      	uxtb	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
                break;
 8001954:	e1c9      	b.n	8001cea <prv_parse_term+0x54e>
            case 2:                             /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh);   /* Parse latitude */
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f7ff fecc 	bl	80016f4 <prv_parse_lat_long>
 800195c:	eeb0 7a40 	vmov.f32	s14, s0
 8001960:	eef0 7a60 	vmov.f32	s15, s1
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 800196a:	e1be      	b.n	8001cea <prv_parse_term+0x54e>
            case 3:                             /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001972:	2b53      	cmp	r3, #83	; 0x53
 8001974:	d005      	beq.n	8001982 <prv_parse_term+0x1e6>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800197c:	2b73      	cmp	r3, #115	; 0x73
 800197e:	f040 81a9 	bne.w	8001cd4 <prv_parse_term+0x538>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8001988:	461d      	mov	r5, r3
 800198a:	f084 4600 	eor.w	r6, r4, #2147483648	; 0x80000000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	e9c3 5622 	strd	r5, r6, [r3, #136]	; 0x88
                }
                break;
 8001994:	e19e      	b.n	8001cd4 <prv_parse_term+0x538>
            case 4:                             /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh);  /* Parse longitude */
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff feac 	bl	80016f4 <prv_parse_lat_long>
 800199c:	eeb0 7a40 	vmov.f32	s14, s0
 80019a0:	eef0 7a60 	vmov.f32	s15, s1
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 80019aa:	e19e      	b.n	8001cea <prv_parse_term+0x54e>
            case 5:                             /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80019b2:	2b57      	cmp	r3, #87	; 0x57
 80019b4:	d005      	beq.n	80019c2 <prv_parse_term+0x226>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80019bc:	2b77      	cmp	r3, #119	; 0x77
 80019be:	f040 818b 	bne.w	8001cd8 <prv_parse_term+0x53c>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	e9d3 3424 	ldrd	r3, r4, [r3, #144]	; 0x90
 80019c8:	4619      	mov	r1, r3
 80019ca:	f084 4200 	eor.w	r2, r4, #2147483648	; 0x80000000
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	e9c3 1224 	strd	r1, r2, [r3, #144]	; 0x90
                }
                break;
 80019d4:	e180      	b.n	8001cd8 <prv_parse_term+0x53c>
            case 6:                             /* Fix status */
                gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL);
 80019d6:	2100      	movs	r1, #0
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f7ff fe19 	bl	8001610 <prv_parse_number>
 80019de:	4603      	mov	r3, r0
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
                break;
 80019e8:	e17f      	b.n	8001cea <prv_parse_term+0x54e>
            case 7:                             /* Satellites in use */
                gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL);
 80019ea:	2100      	movs	r1, #0
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f7ff fe0f 	bl	8001610 <prv_parse_number>
 80019f2:	4603      	mov	r3, r0
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
                break;
 80019fc:	e175      	b.n	8001cea <prv_parse_term+0x54e>
            case 9:                             /* Altitude */
                gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL);
 80019fe:	2100      	movs	r1, #0
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f7ff fe4f 	bl	80016a4 <prv_parse_float_number>
 8001a06:	eeb0 7a40 	vmov.f32	s14, s0
 8001a0a:	eef0 7a60 	vmov.f32	s15, s1
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 8001a14:	e169      	b.n	8001cea <prv_parse_term+0x54e>
            case 11:                            /* Altitude above ellipsoid */
                gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL);
 8001a16:	2100      	movs	r1, #0
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff fe43 	bl	80016a4 <prv_parse_float_number>
 8001a1e:	eeb0 7a40 	vmov.f32	s14, s0
 8001a22:	eef0 7a60 	vmov.f32	s15, s1
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 8001a2c:	e15d      	b.n	8001cea <prv_parse_term+0x54e>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {        /* Process GPGSA statement */
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
 8001a34:	2a02      	cmp	r2, #2
 8001a36:	f040 8084 	bne.w	8001b42 <prv_parse_term+0x3a6>
        switch (gh->p.term_num) {
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001a40:	3b02      	subs	r3, #2
 8001a42:	2b0f      	cmp	r3, #15
 8001a44:	d860      	bhi.n	8001b08 <prv_parse_term+0x36c>
 8001a46:	a201      	add	r2, pc, #4	; (adr r2, 8001a4c <prv_parse_term+0x2b0>)
 8001a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a4c:	08001a8d 	.word	0x08001a8d
 8001a50:	08001b09 	.word	0x08001b09
 8001a54:	08001b09 	.word	0x08001b09
 8001a58:	08001b09 	.word	0x08001b09
 8001a5c:	08001b09 	.word	0x08001b09
 8001a60:	08001b09 	.word	0x08001b09
 8001a64:	08001b09 	.word	0x08001b09
 8001a68:	08001b09 	.word	0x08001b09
 8001a6c:	08001b09 	.word	0x08001b09
 8001a70:	08001b09 	.word	0x08001b09
 8001a74:	08001b09 	.word	0x08001b09
 8001a78:	08001b09 	.word	0x08001b09
 8001a7c:	08001b09 	.word	0x08001b09
 8001a80:	08001aa1 	.word	0x08001aa1
 8001a84:	08001ad9 	.word	0x08001ad9
 8001a88:	08001af1 	.word	0x08001af1
            case 2:                             /* Process fix mode */
                gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL);
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff fdbe 	bl	8001610 <prv_parse_number>
 8001a94:	4603      	mov	r3, r0
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
                break;
 8001a9e:	e124      	b.n	8001cea <prv_parse_term+0x54e>
            case 15:                            /* Process PDOP */
                gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL);
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff fdfe 	bl	80016a4 <prv_parse_float_number>
 8001aa8:	eeb0 7a40 	vmov.f32	s14, s0
 8001aac:	eef0 7a60 	vmov.f32	s15, s1
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 8001ab6:	e118      	b.n	8001cea <prv_parse_term+0x54e>
 8001ab8:	08009d70 	.word	0x08009d70
 8001abc:	08009d78 	.word	0x08009d78
 8001ac0:	08009d80 	.word	0x08009d80
 8001ac4:	08009d88 	.word	0x08009d88
 8001ac8:	08009d90 	.word	0x08009d90
 8001acc:	08009d98 	.word	0x08009d98
 8001ad0:	08009da0 	.word	0x08009da0
 8001ad4:	08009da8 	.word	0x08009da8
            case 16:                            /* Process HDOP */
                gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL);
 8001ad8:	2100      	movs	r1, #0
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff fde2 	bl	80016a4 <prv_parse_float_number>
 8001ae0:	eeb0 7a40 	vmov.f32	s14, s0
 8001ae4:	eef0 7a60 	vmov.f32	s15, s1
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 8001aee:	e0fc      	b.n	8001cea <prv_parse_term+0x54e>
            case 17:                            /* Process VDOP */
                gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL);
 8001af0:	2100      	movs	r1, #0
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff fdd6 	bl	80016a4 <prv_parse_float_number>
 8001af8:	eeb0 7a40 	vmov.f32	s14, s0
 8001afc:	eef0 7a60 	vmov.f32	s15, s1
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 8001b06:	e0f0      	b.n	8001cea <prv_parse_term+0x54e>
            default:
                /* Parse satellite IDs */
                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	f240 80e4 	bls.w	8001cdc <prv_parse_term+0x540>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001b1a:	2b0e      	cmp	r3, #14
 8001b1c:	f200 80de 	bhi.w	8001cdc <prv_parse_term+0x540>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 8001b20:	2100      	movs	r1, #0
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff fd74 	bl	8001610 <prv_parse_number>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001b30:	3b03      	subs	r3, #3
 8001b32:	b2d1      	uxtb	r1, r2
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	4413      	add	r3, r2
 8001b38:	460a      	mov	r2, r1
 8001b3a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
                }
                break;
 8001b3e:	bf00      	nop
 8001b40:	e0cc      	b.n	8001cdc <prv_parse_term+0x540>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {        /* Process GPGSV statement */
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
 8001b48:	2a03      	cmp	r2, #3
 8001b4a:	d11b      	bne.n	8001b84 <prv_parse_term+0x3e8>
        switch (gh->p.term_num) {
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d002      	beq.n	8001b5c <prv_parse_term+0x3c0>
 8001b56:	2b03      	cmp	r3, #3
 8001b58:	d00a      	beq.n	8001b70 <prv_parse_term+0x3d4>
                                break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 8001b5a:	e0c6      	b.n	8001cea <prv_parse_term+0x54e>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff fd56 	bl	8001610 <prv_parse_number>
 8001b64:	4603      	mov	r3, r0
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                break;
 8001b6e:	e0bc      	b.n	8001cea <prv_parse_term+0x54e>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 8001b70:	2100      	movs	r1, #0
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7ff fd4c 	bl	8001610 <prv_parse_number>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	b2da      	uxtb	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 8001b82:	e0b2      	b.n	8001cea <prv_parse_term+0x54e>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {        /* Process GPRMC statement */
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
 8001b8a:	2a04      	cmp	r2, #4
 8001b8c:	f040 80a8 	bne.w	8001ce0 <prv_parse_term+0x544>
        switch (gh->p.term_num) {
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	f892 207f 	ldrb.w	r2, [r2, #127]	; 0x7f
 8001b96:	3a02      	subs	r2, #2
 8001b98:	2a09      	cmp	r2, #9
 8001b9a:	f200 80a3 	bhi.w	8001ce4 <prv_parse_term+0x548>
 8001b9e:	a101      	add	r1, pc, #4	; (adr r1, 8001ba4 <prv_parse_term+0x408>)
 8001ba0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8001ba4:	08001bcd 	.word	0x08001bcd
 8001ba8:	08001ce5 	.word	0x08001ce5
 8001bac:	08001ce5 	.word	0x08001ce5
 8001bb0:	08001ce5 	.word	0x08001ce5
 8001bb4:	08001ce5 	.word	0x08001ce5
 8001bb8:	08001be7 	.word	0x08001be7
 8001bbc:	08001bff 	.word	0x08001bff
 8001bc0:	08001c17 	.word	0x08001c17
 8001bc4:	08001c91 	.word	0x08001c91
 8001bc8:	08001ca9 	.word	0x08001ca9
            case 2:                             /* Process valid status */
                gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001bd2:	2b41      	cmp	r3, #65	; 0x41
 8001bd4:	bf0c      	ite	eq
 8001bd6:	2301      	moveq	r3, #1
 8001bd8:	2300      	movne	r3, #0
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	461a      	mov	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 8001be4:	e081      	b.n	8001cea <prv_parse_term+0x54e>
            case 7:                             /* Process ground speed in knots */
                gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL);
 8001be6:	2100      	movs	r1, #0
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7ff fd5b 	bl	80016a4 <prv_parse_float_number>
 8001bee:	eeb0 7a40 	vmov.f32	s14, s0
 8001bf2:	eef0 7a60 	vmov.f32	s15, s1
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 8001bfc:	e075      	b.n	8001cea <prv_parse_term+0x54e>
            case 8:                             /* Process true ground coarse */
                gh->p.data.rmc.course = prv_parse_float_number(gh, NULL);
 8001bfe:	2100      	movs	r1, #0
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff fd4f 	bl	80016a4 <prv_parse_float_number>
 8001c06:	eeb0 7a40 	vmov.f32	s14, s0
 8001c0a:	eef0 7a60 	vmov.f32	s15, s1
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 8001c14:	e069      	b.n	8001cea <prv_parse_term+0x54e>
            case 9:                             /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001c1c:	3b30      	subs	r3, #48	; 0x30
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	461a      	mov	r2, r3
 8001c22:	0092      	lsls	r2, r2, #2
 8001c24:	4413      	add	r3, r2
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001c30:	4413      	add	r3, r2
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	3b30      	subs	r3, #48	; 0x30
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8001c44:	3b30      	subs	r3, #48	; 0x30
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	461a      	mov	r2, r3
 8001c4a:	0092      	lsls	r2, r2, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001c58:	4413      	add	r3, r2
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	3b30      	subs	r3, #48	; 0x30
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8001c6c:	3b30      	subs	r3, #48	; 0x30
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	461a      	mov	r2, r3
 8001c72:	0092      	lsls	r2, r2, #2
 8001c74:	4413      	add	r3, r2
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001c80:	4413      	add	r3, r2
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	3b30      	subs	r3, #48	; 0x30
 8001c86:	b2da      	uxtb	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
                break;
 8001c8e:	e02c      	b.n	8001cea <prv_parse_term+0x54e>
            case 10:                            /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 8001c90:	2100      	movs	r1, #0
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7ff fd06 	bl	80016a4 <prv_parse_float_number>
 8001c98:	eeb0 7a40 	vmov.f32	s14, s0
 8001c9c:	eef0 7a60 	vmov.f32	s15, s1
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 8001ca6:	e020      	b.n	8001cea <prv_parse_term+0x54e>
            case 11:                            /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	f892 2071 	ldrb.w	r2, [r2, #113]	; 0x71
 8001cae:	2a57      	cmp	r2, #87	; 0x57
 8001cb0:	d004      	beq.n	8001cbc <prv_parse_term+0x520>
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	f892 2071 	ldrb.w	r2, [r2, #113]	; 0x71
 8001cb8:	2a77      	cmp	r2, #119	; 0x77
 8001cba:	d115      	bne.n	8001ce8 <prv_parse_term+0x54c>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	e9d2 1228 	ldrd	r1, r2, [r2, #160]	; 0xa0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	f082 4400 	eor.w	r4, r2, #2147483648	; 0x80000000
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0
                }
                break;
 8001cce:	e00b      	b.n	8001ce8 <prv_parse_term+0x54c>
                break;
 8001cd0:	bf00      	nop
 8001cd2:	e00a      	b.n	8001cea <prv_parse_term+0x54e>
                break;
 8001cd4:	bf00      	nop
 8001cd6:	e008      	b.n	8001cea <prv_parse_term+0x54e>
                break;
 8001cd8:	bf00      	nop
 8001cda:	e006      	b.n	8001cea <prv_parse_term+0x54e>
                break;
 8001cdc:	bf00      	nop
 8001cde:	e004      	b.n	8001cea <prv_parse_term+0x54e>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
 8001ce0:	bf00      	nop
 8001ce2:	e002      	b.n	8001cea <prv_parse_term+0x54e>
                break;
 8001ce4:	bf00      	nop
 8001ce6:	e000      	b.n	8001cea <prv_parse_term+0x54e>
                break;
 8001ce8:	bf00      	nop
    return 1;
 8001cea:	2301      	movs	r3, #1
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cf4 <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(gh->p.term_str[1]) & 0x0F);   /* Convert received CRC from string (hex) to number */
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001d02:	2b2f      	cmp	r3, #47	; 0x2f
 8001d04:	d90b      	bls.n	8001d1e <prv_check_crc+0x2a>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001d0c:	2b39      	cmp	r3, #57	; 0x39
 8001d0e:	d806      	bhi.n	8001d1e <prv_check_crc+0x2a>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001d16:	011b      	lsls	r3, r3, #4
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	b25a      	sxtb	r2, r3
 8001d1c:	e026      	b.n	8001d6c <prv_check_crc+0x78>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001d24:	2b60      	cmp	r3, #96	; 0x60
 8001d26:	d90d      	bls.n	8001d44 <prv_check_crc+0x50>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001d2e:	2b7a      	cmp	r3, #122	; 0x7a
 8001d30:	d808      	bhi.n	8001d44 <prv_check_crc+0x50>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001d38:	3b57      	subs	r3, #87	; 0x57
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	011b      	lsls	r3, r3, #4
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	b25a      	sxtb	r2, r3
 8001d42:	e013      	b.n	8001d6c <prv_check_crc+0x78>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001d4a:	2b40      	cmp	r3, #64	; 0x40
 8001d4c:	d90d      	bls.n	8001d6a <prv_check_crc+0x76>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001d54:	2b5a      	cmp	r3, #90	; 0x5a
 8001d56:	d808      	bhi.n	8001d6a <prv_check_crc+0x76>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001d5e:	3b37      	subs	r3, #55	; 0x37
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	011b      	lsls	r3, r3, #4
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	b25a      	sxtb	r2, r3
 8001d68:	e000      	b.n	8001d6c <prv_check_crc+0x78>
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001d72:	2b2f      	cmp	r3, #47	; 0x2f
 8001d74:	d90c      	bls.n	8001d90 <prv_check_crc+0x9c>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001d7c:	2b39      	cmp	r3, #57	; 0x39
 8001d7e:	d807      	bhi.n	8001d90 <prv_check_crc+0x9c>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001d86:	b25b      	sxtb	r3, r3
 8001d88:	f003 030f 	and.w	r3, r3, #15
 8001d8c:	b25b      	sxtb	r3, r3
 8001d8e:	e028      	b.n	8001de2 <prv_check_crc+0xee>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001d96:	2b60      	cmp	r3, #96	; 0x60
 8001d98:	d90e      	bls.n	8001db8 <prv_check_crc+0xc4>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001da0:	2b7a      	cmp	r3, #122	; 0x7a
 8001da2:	d809      	bhi.n	8001db8 <prv_check_crc+0xc4>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001daa:	3b57      	subs	r3, #87	; 0x57
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	b25b      	sxtb	r3, r3
 8001db0:	f003 030f 	and.w	r3, r3, #15
 8001db4:	b25b      	sxtb	r3, r3
 8001db6:	e014      	b.n	8001de2 <prv_check_crc+0xee>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001dbe:	2b40      	cmp	r3, #64	; 0x40
 8001dc0:	d90e      	bls.n	8001de0 <prv_check_crc+0xec>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001dc8:	2b5a      	cmp	r3, #90	; 0x5a
 8001dca:	d809      	bhi.n	8001de0 <prv_check_crc+0xec>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001dd2:	3b37      	subs	r3, #55	; 0x37
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	b25b      	sxtb	r3, r3
 8001dd8:	f003 030f 	and.w	r3, r3, #15
 8001ddc:	b25b      	sxtb	r3, r3
 8001dde:	e000      	b.n	8001de2 <prv_check_crc+0xee>
 8001de0:	2300      	movs	r3, #0
 8001de2:	4313      	orrs	r3, r2
 8001de4:	b25b      	sxtb	r3, r3
 8001de6:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;               /* They must match! */
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001dee:	7bfa      	ldrb	r2, [r7, #15]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	bf0c      	ite	eq
 8001df4:	2301      	moveq	r3, #1
 8001df6:	2300      	movne	r3, #0
 8001df8:	b2db      	uxtb	r3, r3
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3714      	adds	r7, #20
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 8001e06:	b590      	push	{r4, r7, lr}
 8001e08:	b083      	sub	sp, #12
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d136      	bne.n	8001e86 <prv_copy_from_tmp_memory+0x80>
        gh->latitude = gh->p.data.gga.latitude;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	e9c2 3400 	strd	r3, r4, [r2]
        gh->longitude = gh->p.data.gga.longitude;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	e9d3 3424 	ldrd	r3, r4, [r3, #144]	; 0x90
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	e9c2 3402 	strd	r3, r4, [r2, #8]
        gh->altitude = gh->p.data.gga.altitude;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	e9d3 3426 	ldrd	r3, r4, [r3, #152]	; 0x98
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	e9c2 3404 	strd	r3, r4, [r2, #16]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	e9d3 3428 	ldrd	r3, r4, [r3, #160]	; 0xa0
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	e9c2 3406 	strd	r3, r4, [r2, #24]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f883 2020 	strb.w	r2, [r3, #32]
        gh->fix = gh->p.data.gga.fix;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        gh->hours = gh->p.data.gga.hours;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        gh->minutes = gh->p.data.gga.minutes;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        gh->seconds = gh->p.data.gga.seconds;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f893 20ac 	ldrb.w	r2, [r3, #172]	; 0xac
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001e84:	e061      	b.n	8001f4a <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d121      	bne.n	8001ed4 <prv_copy_from_tmp_memory+0xce>
        gh->dop_h = gh->p.data.gsa.dop_h;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
        gh->dop_p = gh->p.data.gsa.dop_p;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	e9d3 3426 	ldrd	r3, r4, [r3, #152]	; 0x98
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
        gh->dop_v = gh->p.data.gsa.dop_v;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	e9d3 3424 	ldrd	r3, r4, [r3, #144]	; 0x90
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f103 0041 	add.w	r0, r3, #65	; 0x41
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	33a1      	adds	r3, #161	; 0xa1
 8001eca:	220c      	movs	r2, #12
 8001ecc:	4619      	mov	r1, r3
 8001ece:	f006 f8e7 	bl	80080a0 <memcpy>
 8001ed2:	e03a      	b.n	8001f4a <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001eda:	2b03      	cmp	r3, #3
 8001edc:	d106      	bne.n	8001eec <prv_copy_from_tmp_memory+0xe6>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8001eea:	e02e      	b.n	8001f4a <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	d129      	bne.n	8001f4a <prv_copy_from_tmp_memory+0x144>
        gh->course = gh->p.data.rmc.course;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	e9d3 3426 	ldrd	r3, r4, [r3, #152]	; 0x98
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
        gh->is_valid = gh->p.data.rmc.is_valid;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        gh->speed = gh->p.data.rmc.speed;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	e9d3 3424 	ldrd	r3, r4, [r3, #144]	; 0x90
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
        gh->variation = gh->p.data.rmc.variation;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	e9d3 3428 	ldrd	r3, r4, [r3, #160]	; 0xa0
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
        gh->date = gh->p.data.rmc.date;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 2089 	ldrb.w	r2, [r3, #137]	; 0x89
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        gh->month = gh->p.data.rmc.month;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 208a 	ldrb.w	r2, [r3, #138]	; 0x8a
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        gh->year = gh->p.data.rmc.year;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f893 208b 	ldrb.w	r2, [r3, #139]	; 0x8b
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 8001f4a:	2301      	movs	r3, #1
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd90      	pop	{r4, r7, pc}

08001f54 <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 8001f5c:	22b0      	movs	r2, #176	; 0xb0
 8001f5e:	2100      	movs	r1, #0
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f006 f8a8 	bl	80080b6 <memset>
    return 1;
 8001f66:	2301      	movs	r3, #1
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8001f80:	e0a7      	b.n	80020d2 <lwgps_process+0x162>
        if (*d == '$') {                        /* Check for beginning of NMEA line */
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b24      	cmp	r3, #36	; 0x24
 8001f88:	d125      	bne.n	8001fd6 <lwgps_process+0x66>
            memset(&gh->p, 0x00, sizeof(gh->p));/* Reset private memory */
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	3370      	adds	r3, #112	; 0x70
 8001f8e:	2240      	movs	r2, #64	; 0x40
 8001f90:	2100      	movs	r1, #0
 8001f92:	4618      	mov	r0, r3
 8001f94:	f006 f88f 	bl	80080b6 <memset>
            TERM_ADD(gh, *d);                   /* Add character to term */
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001f9e:	2b0b      	cmp	r3, #11
 8001fa0:	f200 8091 	bhi.w	80020c6 <lwgps_process+0x156>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001faa:	1c5a      	adds	r2, r3, #1
 8001fac:	b2d1      	uxtb	r1, r2
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	f882 107e 	strb.w	r1, [r2, #126]	; 0x7e
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	781a      	ldrb	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	440b      	add	r3, r1
 8001fbe:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001fc8:	461a      	mov	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	4413      	add	r3, r2
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001fd4:	e077      	b.n	80020c6 <lwgps_process+0x156>
        } else if (*d == ',') {                 /* Term separator character */
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2b2c      	cmp	r3, #44	; 0x2c
 8001fdc:	d11d      	bne.n	800201a <lwgps_process+0xaa>
            prv_parse_term(gh);                     /* Parse term we have currently in memory */
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f7ff fbdc 	bl	800179c <prv_parse_term>
            CRC_ADD(gh, *d);                    /* Add character to CRC computation */
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	4053      	eors	r3, r2
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            TERM_NEXT(gh);                      /* Start with next term */
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800200e:	3301      	adds	r3, #1
 8002010:	b2da      	uxtb	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8002018:	e055      	b.n	80020c6 <lwgps_process+0x156>
        } else if (*d == '*') {                 /* Start indicates end of data for CRC computation */
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b2a      	cmp	r3, #42	; 0x2a
 8002020:	d117      	bne.n	8002052 <lwgps_process+0xe2>
            prv_parse_term(gh);                     /* Parse term we have currently in memory */
 8002022:	68f8      	ldr	r0, [r7, #12]
 8002024:	f7ff fbba 	bl	800179c <prv_parse_term>
            gh->p.star = 1;                     /* STAR detected */
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            TERM_NEXT(gh);                      /* Start with next term */
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002046:	3301      	adds	r3, #1
 8002048:	b2da      	uxtb	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8002050:	e039      	b.n	80020c6 <lwgps_process+0x156>
        } else if (*d == '\r') {
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2b0d      	cmp	r3, #13
 8002058:	d109      	bne.n	800206e <lwgps_process+0xfe>
            if (prv_check_crc(gh)) {            /* Check for CRC result */
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f7ff fe4a 	bl	8001cf4 <prv_check_crc>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d02f      	beq.n	80020c6 <lwgps_process+0x156>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh);   /* Copy memory from temporary to user memory */
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f7ff fecd 	bl	8001e06 <prv_copy_from_tmp_memory>
 800206c:	e02b      	b.n	80020c6 <lwgps_process+0x156>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {                  /* Add to CRC only if star not yet detected */
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002074:	2b00      	cmp	r3, #0
 8002076:	d109      	bne.n	800208c <lwgps_process+0x11c>
                CRC_ADD(gh, *d);                /* Add to CRC */
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	4053      	eors	r3, r2
 8002084:	b2da      	uxtb	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            }
            TERM_ADD(gh, *d);                   /* Add character to term */
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002092:	2b0b      	cmp	r3, #11
 8002094:	d817      	bhi.n	80020c6 <lwgps_process+0x156>
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800209c:	1c5a      	adds	r2, r3, #1
 800209e:	b2d1      	uxtb	r1, r2
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	f882 107e 	strb.w	r1, [r2, #126]	; 0x7e
 80020a6:	4619      	mov	r1, r3
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	781a      	ldrb	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	440b      	add	r3, r1
 80020b0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80020ba:	461a      	mov	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4413      	add	r3, r2
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    for (; len > 0; ++d, --len) {               /* Process all bytes */
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	3301      	adds	r3, #1
 80020ca:	617b      	str	r3, [r7, #20]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3b01      	subs	r3, #1
 80020d0:	607b      	str	r3, [r7, #4]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f47f af54 	bne.w	8001f82 <lwgps_process+0x12>
        }
    }
    return 1;
 80020da:	2301      	movs	r3, #1
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3718      	adds	r7, #24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <_Z11CollectDataPv>:
void print_uart(char* msg, size_t size);

// --------------Our tasks-----------------
// Collects data, task that initializes the IMU, do not remove this task without initializing IMU elsewhere
// Add anymore data collection functions in this task
void CollectData(void* arg) {
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b08a      	sub	sp, #40	; 0x28
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
	imu.initializeIMU(&hi2c1);
 80020ec:	4912      	ldr	r1, [pc, #72]	; (8002138 <_Z11CollectDataPv+0x54>)
 80020ee:	4813      	ldr	r0, [pc, #76]	; (800213c <_Z11CollectDataPv+0x58>)
 80020f0:	f7fe fee2 	bl	8000eb8 <_ZN3IMU13initializeIMUEP17I2C_HandleTypeDef>
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(SAMPLING_PERIOD);
 80020f4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80020f8:	627b      	str	r3, [r7, #36]	; 0x24
	xLastWakeTime = xTaskGetTickCount();
 80020fa:	f004 fb21 	bl	8006740 <xTaskGetTickCount>
 80020fe:	4603      	mov	r3, r0
 8002100:	60fb      	str	r3, [r7, #12]
	while(1) {
		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8002102:	f107 030c 	add.w	r3, r7, #12
 8002106:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800210a:	4618      	mov	r0, r3
 800210c:	f004 f95c 	bl	80063c8 <vTaskDelayUntil>
		double zOrientation = imu.getOrientation(imu.Axes::z);
 8002110:	2102      	movs	r1, #2
 8002112:	480a      	ldr	r0, [pc, #40]	; (800213c <_Z11CollectDataPv+0x58>)
 8002114:	f7fe ff26 	bl	8000f64 <_ZN3IMU14getOrientationENS_4AxesE>
 8002118:	ed87 0b06 	vstr	d0, [r7, #24]
		// Collect linear acceleration samples with other data, could be sampled at
		// different period in another task with the ACCELERATION_TIME_STEP macro
		imu.storeLinearAcceleration();
 800211c:	4807      	ldr	r0, [pc, #28]	; (800213c <_Z11CollectDataPv+0x58>)
 800211e:	f7fe ffa5 	bl	800106c <_ZN3IMU23storeLinearAccelerationEv>
		// Calculate linear velocity, storing of linear acceleration must be followed
		// by calculation of linear velocity
		imu.calculateLinearVelocity();
 8002122:	4806      	ldr	r0, [pc, #24]	; (800213c <_Z11CollectDataPv+0x58>)
 8002124:	f7fe ffe2 	bl	80010ec <_ZN3IMU23calculateLinearVelocityEv>
		double xyVelocity = imu.getLinearVelocity(imu.Axes::xy);
 8002128:	2103      	movs	r1, #3
 800212a:	4804      	ldr	r0, [pc, #16]	; (800213c <_Z11CollectDataPv+0x58>)
 800212c:	f7ff f898 	bl	8001260 <_ZN3IMU17getLinearVelocityENS_4AxesE>
 8002130:	ed87 0b04 	vstr	d0, [r7, #16]
	}
 8002134:	e7e5      	b.n	8002102 <_Z11CollectDataPv+0x1e>
 8002136:	bf00      	nop
 8002138:	20000204 	.word	0x20000204
 800213c:	20000298 	.word	0x20000298

08002140 <_Z10print_uartPcj>:
    vTaskDelay(1000);
  }
}

void print_uart(char* msg, size_t size)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, size, 1000);
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	b29a      	uxth	r2, r3
 800214e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	4803      	ldr	r0, [pc, #12]	; (8002164 <_Z10print_uartPcj+0x24>)
 8002156:	f002 fcd8 	bl	8004b0a <HAL_UART_Transmit>
}
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000258 	.word	0x20000258

08002168 <_Z3gpsPv>:

void gps(void * arg)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b0ba      	sub	sp, #232	; 0xe8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
	GPS gps;
 8002170:	f107 0318 	add.w	r3, r7, #24
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff f943 	bl	8001400 <_ZN3GPSC1Ev>
	gps.init(&huart1);
 800217a:	f107 0318 	add.w	r3, r7, #24
 800217e:	491e      	ldr	r1, [pc, #120]	; (80021f8 <_Z3gpsPv+0x90>)
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff f96d 	bl	8001460 <_ZN3GPS4initEP20__UART_HandleTypeDef>

	for(;;)
	{
		if(gps.update())
 8002186:	f107 0318 	add.w	r3, r7, #24
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff f979 	bl	8001482 <_ZN3GPS6updateEv>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d02a      	beq.n	80021ec <_Z3gpsPv+0x84>
		{
			char* msg = "Latitude = ";
 8002196:	4b19      	ldr	r3, [pc, #100]	; (80021fc <_Z3gpsPv+0x94>)
 8002198:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
			location pos = gps.getPosition();
 800219c:	f107 0318 	add.w	r3, r7, #24
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff f9a6 	bl	80014f2 <_ZN3GPS11getPositionEv>
 80021a6:	eeb0 6a40 	vmov.f32	s12, s0
 80021aa:	eef0 6a60 	vmov.f32	s13, s1
 80021ae:	eeb0 7a41 	vmov.f32	s14, s2
 80021b2:	eef0 7a61 	vmov.f32	s15, s3
 80021b6:	ed87 6b02 	vstr	d6, [r7, #8]
 80021ba:	ed87 7b04 	vstr	d7, [r7, #16]

			print_uart(msg, sizeof(msg));
 80021be:	2104      	movs	r1, #4
 80021c0:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 80021c4:	f7ff ffbc 	bl	8002140 <_Z10print_uartPcj>
//			sprintf(msg,"%f\n",pos.latitude);
			print_uart(msg, sizeof(msg));
 80021c8:	2104      	movs	r1, #4
 80021ca:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 80021ce:	f7ff ffb7 	bl	8002140 <_Z10print_uartPcj>

			msg = "Longitude = ";
 80021d2:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <_Z3gpsPv+0x98>)
 80021d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
			print_uart(msg, sizeof(msg));
 80021d8:	2104      	movs	r1, #4
 80021da:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 80021de:	f7ff ffaf 	bl	8002140 <_Z10print_uartPcj>
//			sprintf(msg,"%f\n",pos.longitude);
			print_uart(msg, sizeof(msg));
 80021e2:	2104      	movs	r1, #4
 80021e4:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 80021e8:	f7ff ffaa 	bl	8002140 <_Z10print_uartPcj>

		}
		HAL_Delay(1000);
 80021ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021f0:	f000 fb58 	bl	80028a4 <HAL_Delay>
	}
 80021f4:	e7c7      	b.n	8002186 <_Z3gpsPv+0x1e>
 80021f6:	bf00      	nop
 80021f8:	20004c48 	.word	0x20004c48
 80021fc:	08009db0 	.word	0x08009db0
 8002200:	08009dbc 	.word	0x08009dbc

08002204 <main>:
}

int main(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af02      	add	r7, sp, #8
  HAL_Init();
 800220a:	f000 fb09 	bl	8002820 <HAL_Init>

  SystemClock_Config();
 800220e:	f000 f827 	bl	8002260 <_Z18SystemClock_Configv>

  MX_GPIO_Init();
 8002212:	f7ff f98d 	bl	8001530 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002216:	f000 fa33 	bl	8002680 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800221a:	f000 fa07 	bl	800262c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800221e:	f000 f895 	bl	800234c <_ZL12MX_I2C1_Initv>
  // Start FreeRTOS
  xTaskCreate(gps, "GPS", configMINIMAL_STACK_SIZE, NULL, 0, NULL);
 8002222:	2300      	movs	r3, #0
 8002224:	9301      	str	r3, [sp, #4]
 8002226:	2300      	movs	r3, #0
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	2300      	movs	r3, #0
 800222c:	2280      	movs	r2, #128	; 0x80
 800222e:	4908      	ldr	r1, [pc, #32]	; (8002250 <main+0x4c>)
 8002230:	4808      	ldr	r0, [pc, #32]	; (8002254 <main+0x50>)
 8002232:	f003 ff85 	bl	8006140 <xTaskCreate>
  xTaskCreate(CollectData, "data", 128, NULL, 1, NULL);
 8002236:	2300      	movs	r3, #0
 8002238:	9301      	str	r3, [sp, #4]
 800223a:	2301      	movs	r3, #1
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	2300      	movs	r3, #0
 8002240:	2280      	movs	r2, #128	; 0x80
 8002242:	4905      	ldr	r1, [pc, #20]	; (8002258 <main+0x54>)
 8002244:	4805      	ldr	r0, [pc, #20]	; (800225c <main+0x58>)
 8002246:	f003 ff7b 	bl	8006140 <xTaskCreate>
//  xTaskCreate(CheckCalibStatus, "calstat", 128, NULL, 1, NULL);
  vTaskStartScheduler();
 800224a:	f004 f96b 	bl	8006524 <vTaskStartScheduler>

  while (1)
 800224e:	e7fe      	b.n	800224e <main+0x4a>
 8002250:	08009dcc 	.word	0x08009dcc
 8002254:	08002169 	.word	0x08002169
 8002258:	08009dd0 	.word	0x08009dd0
 800225c:	080020e5 	.word	0x080020e5

08002260 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b094      	sub	sp, #80	; 0x50
 8002264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002266:	f107 0320 	add.w	r3, r7, #32
 800226a:	2230      	movs	r2, #48	; 0x30
 800226c:	2100      	movs	r1, #0
 800226e:	4618      	mov	r0, r3
 8002270:	f005 ff21 	bl	80080b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002274:	f107 030c 	add.w	r3, r7, #12
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002284:	2300      	movs	r3, #0
 8002286:	60bb      	str	r3, [r7, #8]
 8002288:	4b2e      	ldr	r3, [pc, #184]	; (8002344 <_Z18SystemClock_Configv+0xe4>)
 800228a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228c:	4a2d      	ldr	r2, [pc, #180]	; (8002344 <_Z18SystemClock_Configv+0xe4>)
 800228e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002292:	6413      	str	r3, [r2, #64]	; 0x40
 8002294:	4b2b      	ldr	r3, [pc, #172]	; (8002344 <_Z18SystemClock_Configv+0xe4>)
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800229c:	60bb      	str	r3, [r7, #8]
 800229e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80022a0:	2300      	movs	r3, #0
 80022a2:	607b      	str	r3, [r7, #4]
 80022a4:	4b28      	ldr	r3, [pc, #160]	; (8002348 <_Z18SystemClock_Configv+0xe8>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80022ac:	4a26      	ldr	r2, [pc, #152]	; (8002348 <_Z18SystemClock_Configv+0xe8>)
 80022ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022b2:	6013      	str	r3, [r2, #0]
 80022b4:	4b24      	ldr	r3, [pc, #144]	; (8002348 <_Z18SystemClock_Configv+0xe8>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80022bc:	607b      	str	r3, [r7, #4]
 80022be:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022c0:	2302      	movs	r3, #2
 80022c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022c4:	2301      	movs	r3, #1
 80022c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022c8:	2310      	movs	r3, #16
 80022ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022cc:	2302      	movs	r3, #2
 80022ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022d0:	2300      	movs	r3, #0
 80022d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80022d4:	2310      	movs	r3, #16
 80022d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80022d8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80022dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80022de:	2304      	movs	r3, #4
 80022e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80022e2:	2307      	movs	r3, #7
 80022e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022e6:	f107 0320 	add.w	r3, r7, #32
 80022ea:	4618      	mov	r0, r3
 80022ec:	f001 fd0e 	bl	8003d0c <HAL_RCC_OscConfig>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	bf14      	ite	ne
 80022f6:	2301      	movne	r3, #1
 80022f8:	2300      	moveq	r3, #0
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
 8002300:	f000 f86a 	bl	80023d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002304:	230f      	movs	r3, #15
 8002306:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002308:	2302      	movs	r3, #2
 800230a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002310:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002314:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002316:	2300      	movs	r3, #0
 8002318:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800231a:	f107 030c 	add.w	r3, r7, #12
 800231e:	2102      	movs	r1, #2
 8002320:	4618      	mov	r0, r3
 8002322:	f001 ff63 	bl	80041ec <HAL_RCC_ClockConfig>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	bf14      	ite	ne
 800232c:	2301      	movne	r3, #1
 800232e:	2300      	moveq	r3, #0
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 8002336:	f000 f84f 	bl	80023d8 <Error_Handler>
  }
}
 800233a:	bf00      	nop
 800233c:	3750      	adds	r7, #80	; 0x50
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40023800 	.word	0x40023800
 8002348:	40007000 	.word	0x40007000

0800234c <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002350:	4b15      	ldr	r3, [pc, #84]	; (80023a8 <_ZL12MX_I2C1_Initv+0x5c>)
 8002352:	4a16      	ldr	r2, [pc, #88]	; (80023ac <_ZL12MX_I2C1_Initv+0x60>)
 8002354:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002356:	4b14      	ldr	r3, [pc, #80]	; (80023a8 <_ZL12MX_I2C1_Initv+0x5c>)
 8002358:	4a15      	ldr	r2, [pc, #84]	; (80023b0 <_ZL12MX_I2C1_Initv+0x64>)
 800235a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800235c:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <_ZL12MX_I2C1_Initv+0x5c>)
 800235e:	2200      	movs	r2, #0
 8002360:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002362:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <_ZL12MX_I2C1_Initv+0x5c>)
 8002364:	2200      	movs	r2, #0
 8002366:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002368:	4b0f      	ldr	r3, [pc, #60]	; (80023a8 <_ZL12MX_I2C1_Initv+0x5c>)
 800236a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800236e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002370:	4b0d      	ldr	r3, [pc, #52]	; (80023a8 <_ZL12MX_I2C1_Initv+0x5c>)
 8002372:	2200      	movs	r2, #0
 8002374:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002376:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <_ZL12MX_I2C1_Initv+0x5c>)
 8002378:	2200      	movs	r2, #0
 800237a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800237c:	4b0a      	ldr	r3, [pc, #40]	; (80023a8 <_ZL12MX_I2C1_Initv+0x5c>)
 800237e:	2200      	movs	r2, #0
 8002380:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002382:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <_ZL12MX_I2C1_Initv+0x5c>)
 8002384:	2200      	movs	r2, #0
 8002386:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002388:	4807      	ldr	r0, [pc, #28]	; (80023a8 <_ZL12MX_I2C1_Initv+0x5c>)
 800238a:	f000 fd2b 	bl	8002de4 <HAL_I2C_Init>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	bf14      	ite	ne
 8002394:	2301      	movne	r3, #1
 8002396:	2300      	moveq	r3, #0
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800239e:	f000 f81b 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20000204 	.word	0x20000204
 80023ac:	40005400 	.word	0x40005400
 80023b0:	000186a0 	.word	0x000186a0

080023b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a04      	ldr	r2, [pc, #16]	; (80023d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d101      	bne.n	80023ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80023c6:	f000 fa4d 	bl	8002864 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40014800 	.word	0x40014800

080023d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
	...

080023e8 <_Z41__static_initialization_and_destruction_0ii>:
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d107      	bne.n	8002408 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023fe:	4293      	cmp	r3, r2
 8002400:	d102      	bne.n	8002408 <_Z41__static_initialization_and_destruction_0ii+0x20>
IMU imu;
 8002402:	4809      	ldr	r0, [pc, #36]	; (8002428 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002404:	f7fe fd28 	bl	8000e58 <_ZN3IMUC1Ev>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d107      	bne.n	800241e <_Z41__static_initialization_and_destruction_0ii+0x36>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002414:	4293      	cmp	r3, r2
 8002416:	d102      	bne.n	800241e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002418:	4803      	ldr	r0, [pc, #12]	; (8002428 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800241a:	f7fe fd2d 	bl	8000e78 <_ZN3IMUD1Ev>
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	20000298 	.word	0x20000298

0800242c <_GLOBAL__sub_I_hi2c1>:
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
 8002430:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002434:	2001      	movs	r0, #1
 8002436:	f7ff ffd7 	bl	80023e8 <_Z41__static_initialization_and_destruction_0ii>
 800243a:	bd80      	pop	{r7, pc}

0800243c <_GLOBAL__sub_D_hi2c1>:
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
 8002440:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002444:	2000      	movs	r0, #0
 8002446:	f7ff ffcf 	bl	80023e8 <_Z41__static_initialization_and_destruction_0ii>
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	607b      	str	r3, [r7, #4]
 8002456:	4b10      	ldr	r3, [pc, #64]	; (8002498 <HAL_MspInit+0x4c>)
 8002458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245a:	4a0f      	ldr	r2, [pc, #60]	; (8002498 <HAL_MspInit+0x4c>)
 800245c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002460:	6453      	str	r3, [r2, #68]	; 0x44
 8002462:	4b0d      	ldr	r3, [pc, #52]	; (8002498 <HAL_MspInit+0x4c>)
 8002464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800246a:	607b      	str	r3, [r7, #4]
 800246c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	603b      	str	r3, [r7, #0]
 8002472:	4b09      	ldr	r3, [pc, #36]	; (8002498 <HAL_MspInit+0x4c>)
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	4a08      	ldr	r2, [pc, #32]	; (8002498 <HAL_MspInit+0x4c>)
 8002478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800247c:	6413      	str	r3, [r2, #64]	; 0x40
 800247e:	4b06      	ldr	r3, [pc, #24]	; (8002498 <HAL_MspInit+0x4c>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002486:	603b      	str	r3, [r7, #0]
 8002488:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	40023800 	.word	0x40023800

0800249c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b08c      	sub	sp, #48	; 0x30
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80024a4:	2300      	movs	r3, #0
 80024a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80024a8:	2300      	movs	r3, #0
 80024aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 80024ac:	2200      	movs	r2, #0
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	201a      	movs	r0, #26
 80024b2:	f000 fad1 	bl	8002a58 <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80024b6:	201a      	movs	r0, #26
 80024b8:	f000 faea 	bl	8002a90 <HAL_NVIC_EnableIRQ>
  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 80024bc:	2300      	movs	r3, #0
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	4b1e      	ldr	r3, [pc, #120]	; (800253c <HAL_InitTick+0xa0>)
 80024c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c4:	4a1d      	ldr	r2, [pc, #116]	; (800253c <HAL_InitTick+0xa0>)
 80024c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024ca:	6453      	str	r3, [r2, #68]	; 0x44
 80024cc:	4b1b      	ldr	r3, [pc, #108]	; (800253c <HAL_InitTick+0xa0>)
 80024ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024d4:	60fb      	str	r3, [r7, #12]
 80024d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80024d8:	f107 0210 	add.w	r2, r7, #16
 80024dc:	f107 0314 	add.w	r3, r7, #20
 80024e0:	4611      	mov	r1, r2
 80024e2:	4618      	mov	r0, r3
 80024e4:	f002 f874 	bl	80045d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80024e8:	f002 f85e 	bl	80045a8 <HAL_RCC_GetPCLK2Freq>
 80024ec:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80024ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f0:	4a13      	ldr	r2, [pc, #76]	; (8002540 <HAL_InitTick+0xa4>)
 80024f2:	fba2 2303 	umull	r2, r3, r2, r3
 80024f6:	0c9b      	lsrs	r3, r3, #18
 80024f8:	3b01      	subs	r3, #1
 80024fa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 80024fc:	4b11      	ldr	r3, [pc, #68]	; (8002544 <HAL_InitTick+0xa8>)
 80024fe:	4a12      	ldr	r2, [pc, #72]	; (8002548 <HAL_InitTick+0xac>)
 8002500:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000 / 1000) - 1;
 8002502:	4b10      	ldr	r3, [pc, #64]	; (8002544 <HAL_InitTick+0xa8>)
 8002504:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002508:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 800250a:	4a0e      	ldr	r2, [pc, #56]	; (8002544 <HAL_InitTick+0xa8>)
 800250c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250e:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8002510:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <HAL_InitTick+0xa8>)
 8002512:	2200      	movs	r2, #0
 8002514:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002516:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <HAL_InitTick+0xa8>)
 8002518:	2200      	movs	r2, #0
 800251a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 800251c:	4809      	ldr	r0, [pc, #36]	; (8002544 <HAL_InitTick+0xa8>)
 800251e:	f002 f889 	bl	8004634 <HAL_TIM_Base_Init>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d104      	bne.n	8002532 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 8002528:	4806      	ldr	r0, [pc, #24]	; (8002544 <HAL_InitTick+0xa8>)
 800252a:	f002 f8b8 	bl	800469e <HAL_TIM_Base_Start_IT>
 800252e:	4603      	mov	r3, r0
 8002530:	e000      	b.n	8002534 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
}
 8002534:	4618      	mov	r0, r3
 8002536:	3730      	adds	r7, #48	; 0x30
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40023800 	.word	0x40023800
 8002540:	431bde83 	.word	0x431bde83
 8002544:	20004c08 	.word	0x20004c08
 8002548:	40014800 	.word	0x40014800

0800254c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002550:	bf00      	nop
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800255a:	b480      	push	{r7}
 800255c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800255e:	e7fe      	b.n	800255e <HardFault_Handler+0x4>

08002560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002564:	e7fe      	b.n	8002564 <MemManage_Handler+0x4>

08002566 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002566:	b480      	push	{r7}
 8002568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800256a:	e7fe      	b.n	800256a <BusFault_Handler+0x4>

0800256c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002570:	e7fe      	b.n	8002570 <UsageFault_Handler+0x4>

08002572 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002572:	b480      	push	{r7}
 8002574:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002576:	bf00      	nop
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002584:	4802      	ldr	r0, [pc, #8]	; (8002590 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002586:	f002 f8ae 	bl	80046e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800258a:	bf00      	nop
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	20004c08 	.word	0x20004c08

08002594 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800259c:	4a14      	ldr	r2, [pc, #80]	; (80025f0 <_sbrk+0x5c>)
 800259e:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <_sbrk+0x60>)
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025a8:	4b13      	ldr	r3, [pc, #76]	; (80025f8 <_sbrk+0x64>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d102      	bne.n	80025b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025b0:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <_sbrk+0x64>)
 80025b2:	4a12      	ldr	r2, [pc, #72]	; (80025fc <_sbrk+0x68>)
 80025b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025b6:	4b10      	ldr	r3, [pc, #64]	; (80025f8 <_sbrk+0x64>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4413      	add	r3, r2
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d207      	bcs.n	80025d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025c4:	f005 fd32 	bl	800802c <__errno>
 80025c8:	4602      	mov	r2, r0
 80025ca:	230c      	movs	r3, #12
 80025cc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80025ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025d2:	e009      	b.n	80025e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025d4:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <_sbrk+0x64>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025da:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <_sbrk+0x64>)
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4413      	add	r3, r2
 80025e2:	4a05      	ldr	r2, [pc, #20]	; (80025f8 <_sbrk+0x64>)
 80025e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025e6:	68fb      	ldr	r3, [r7, #12]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	20018000 	.word	0x20018000
 80025f4:	00000400 	.word	0x00000400
 80025f8:	200002f8 	.word	0x200002f8
 80025fc:	20004cd0 	.word	0x20004cd0

08002600 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002604:	4b08      	ldr	r3, [pc, #32]	; (8002628 <SystemInit+0x28>)
 8002606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260a:	4a07      	ldr	r2, [pc, #28]	; (8002628 <SystemInit+0x28>)
 800260c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002610:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002614:	4b04      	ldr	r3, [pc, #16]	; (8002628 <SystemInit+0x28>)
 8002616:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800261a:	609a      	str	r2, [r3, #8]
#endif
}
 800261c:	bf00      	nop
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	e000ed00 	.word	0xe000ed00

0800262c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002630:	4b11      	ldr	r3, [pc, #68]	; (8002678 <MX_USART1_UART_Init+0x4c>)
 8002632:	4a12      	ldr	r2, [pc, #72]	; (800267c <MX_USART1_UART_Init+0x50>)
 8002634:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8002636:	4b10      	ldr	r3, [pc, #64]	; (8002678 <MX_USART1_UART_Init+0x4c>)
 8002638:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800263c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800263e:	4b0e      	ldr	r3, [pc, #56]	; (8002678 <MX_USART1_UART_Init+0x4c>)
 8002640:	2200      	movs	r2, #0
 8002642:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002644:	4b0c      	ldr	r3, [pc, #48]	; (8002678 <MX_USART1_UART_Init+0x4c>)
 8002646:	2200      	movs	r2, #0
 8002648:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800264a:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <MX_USART1_UART_Init+0x4c>)
 800264c:	2200      	movs	r2, #0
 800264e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002650:	4b09      	ldr	r3, [pc, #36]	; (8002678 <MX_USART1_UART_Init+0x4c>)
 8002652:	220c      	movs	r2, #12
 8002654:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002656:	4b08      	ldr	r3, [pc, #32]	; (8002678 <MX_USART1_UART_Init+0x4c>)
 8002658:	2200      	movs	r2, #0
 800265a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800265c:	4b06      	ldr	r3, [pc, #24]	; (8002678 <MX_USART1_UART_Init+0x4c>)
 800265e:	2200      	movs	r2, #0
 8002660:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002662:	4805      	ldr	r0, [pc, #20]	; (8002678 <MX_USART1_UART_Init+0x4c>)
 8002664:	f002 fa04 	bl	8004a70 <HAL_UART_Init>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800266e:	f7ff feb3 	bl	80023d8 <Error_Handler>
  }

}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	20004c48 	.word	0x20004c48
 800267c:	40011000 	.word	0x40011000

08002680 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002684:	4b11      	ldr	r3, [pc, #68]	; (80026cc <MX_USART2_UART_Init+0x4c>)
 8002686:	4a12      	ldr	r2, [pc, #72]	; (80026d0 <MX_USART2_UART_Init+0x50>)
 8002688:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800268a:	4b10      	ldr	r3, [pc, #64]	; (80026cc <MX_USART2_UART_Init+0x4c>)
 800268c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002690:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002692:	4b0e      	ldr	r3, [pc, #56]	; (80026cc <MX_USART2_UART_Init+0x4c>)
 8002694:	2200      	movs	r2, #0
 8002696:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002698:	4b0c      	ldr	r3, [pc, #48]	; (80026cc <MX_USART2_UART_Init+0x4c>)
 800269a:	2200      	movs	r2, #0
 800269c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800269e:	4b0b      	ldr	r3, [pc, #44]	; (80026cc <MX_USART2_UART_Init+0x4c>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026a4:	4b09      	ldr	r3, [pc, #36]	; (80026cc <MX_USART2_UART_Init+0x4c>)
 80026a6:	220c      	movs	r2, #12
 80026a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026aa:	4b08      	ldr	r3, [pc, #32]	; (80026cc <MX_USART2_UART_Init+0x4c>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026b0:	4b06      	ldr	r3, [pc, #24]	; (80026cc <MX_USART2_UART_Init+0x4c>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026b6:	4805      	ldr	r0, [pc, #20]	; (80026cc <MX_USART2_UART_Init+0x4c>)
 80026b8:	f002 f9da 	bl	8004a70 <HAL_UART_Init>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80026c2:	f7ff fe89 	bl	80023d8 <Error_Handler>
  }

}
 80026c6:	bf00      	nop
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	20000258 	.word	0x20000258
 80026d0:	40004400 	.word	0x40004400

080026d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b08c      	sub	sp, #48	; 0x30
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026dc:	f107 031c 	add.w	r3, r7, #28
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	60da      	str	r2, [r3, #12]
 80026ea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a32      	ldr	r2, [pc, #200]	; (80027bc <HAL_UART_MspInit+0xe8>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d12d      	bne.n	8002752 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	61bb      	str	r3, [r7, #24]
 80026fa:	4b31      	ldr	r3, [pc, #196]	; (80027c0 <HAL_UART_MspInit+0xec>)
 80026fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fe:	4a30      	ldr	r2, [pc, #192]	; (80027c0 <HAL_UART_MspInit+0xec>)
 8002700:	f043 0310 	orr.w	r3, r3, #16
 8002704:	6453      	str	r3, [r2, #68]	; 0x44
 8002706:	4b2e      	ldr	r3, [pc, #184]	; (80027c0 <HAL_UART_MspInit+0xec>)
 8002708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270a:	f003 0310 	and.w	r3, r3, #16
 800270e:	61bb      	str	r3, [r7, #24]
 8002710:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]
 8002716:	4b2a      	ldr	r3, [pc, #168]	; (80027c0 <HAL_UART_MspInit+0xec>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	4a29      	ldr	r2, [pc, #164]	; (80027c0 <HAL_UART_MspInit+0xec>)
 800271c:	f043 0301 	orr.w	r3, r3, #1
 8002720:	6313      	str	r3, [r2, #48]	; 0x30
 8002722:	4b27      	ldr	r3, [pc, #156]	; (80027c0 <HAL_UART_MspInit+0xec>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	617b      	str	r3, [r7, #20]
 800272c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800272e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002734:	2302      	movs	r3, #2
 8002736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002738:	2300      	movs	r3, #0
 800273a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800273c:	2303      	movs	r3, #3
 800273e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002740:	2307      	movs	r3, #7
 8002742:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002744:	f107 031c 	add.w	r3, r7, #28
 8002748:	4619      	mov	r1, r3
 800274a:	481e      	ldr	r0, [pc, #120]	; (80027c4 <HAL_UART_MspInit+0xf0>)
 800274c:	f000 f9ae 	bl	8002aac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002750:	e030      	b.n	80027b4 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a1c      	ldr	r2, [pc, #112]	; (80027c8 <HAL_UART_MspInit+0xf4>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d12b      	bne.n	80027b4 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800275c:	2300      	movs	r3, #0
 800275e:	613b      	str	r3, [r7, #16]
 8002760:	4b17      	ldr	r3, [pc, #92]	; (80027c0 <HAL_UART_MspInit+0xec>)
 8002762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002764:	4a16      	ldr	r2, [pc, #88]	; (80027c0 <HAL_UART_MspInit+0xec>)
 8002766:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800276a:	6413      	str	r3, [r2, #64]	; 0x40
 800276c:	4b14      	ldr	r3, [pc, #80]	; (80027c0 <HAL_UART_MspInit+0xec>)
 800276e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002774:	613b      	str	r3, [r7, #16]
 8002776:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002778:	2300      	movs	r3, #0
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	4b10      	ldr	r3, [pc, #64]	; (80027c0 <HAL_UART_MspInit+0xec>)
 800277e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002780:	4a0f      	ldr	r2, [pc, #60]	; (80027c0 <HAL_UART_MspInit+0xec>)
 8002782:	f043 0301 	orr.w	r3, r3, #1
 8002786:	6313      	str	r3, [r2, #48]	; 0x30
 8002788:	4b0d      	ldr	r3, [pc, #52]	; (80027c0 <HAL_UART_MspInit+0xec>)
 800278a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002794:	230c      	movs	r3, #12
 8002796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002798:	2302      	movs	r3, #2
 800279a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279c:	2300      	movs	r3, #0
 800279e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a0:	2300      	movs	r3, #0
 80027a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027a4:	2307      	movs	r3, #7
 80027a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a8:	f107 031c 	add.w	r3, r7, #28
 80027ac:	4619      	mov	r1, r3
 80027ae:	4805      	ldr	r0, [pc, #20]	; (80027c4 <HAL_UART_MspInit+0xf0>)
 80027b0:	f000 f97c 	bl	8002aac <HAL_GPIO_Init>
}
 80027b4:	bf00      	nop
 80027b6:	3730      	adds	r7, #48	; 0x30
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40011000 	.word	0x40011000
 80027c0:	40023800 	.word	0x40023800
 80027c4:	40020000 	.word	0x40020000
 80027c8:	40004400 	.word	0x40004400

080027cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80027cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002804 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80027d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80027d2:	e003      	b.n	80027dc <LoopCopyDataInit>

080027d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80027d4:	4b0c      	ldr	r3, [pc, #48]	; (8002808 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80027d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80027d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80027da:	3104      	adds	r1, #4

080027dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80027dc:	480b      	ldr	r0, [pc, #44]	; (800280c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80027de:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80027e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80027e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80027e4:	d3f6      	bcc.n	80027d4 <CopyDataInit>
  ldr  r2, =_sbss
 80027e6:	4a0b      	ldr	r2, [pc, #44]	; (8002814 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80027e8:	e002      	b.n	80027f0 <LoopFillZerobss>

080027ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80027ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80027ec:	f842 3b04 	str.w	r3, [r2], #4

080027f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80027f0:	4b09      	ldr	r3, [pc, #36]	; (8002818 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80027f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80027f4:	d3f9      	bcc.n	80027ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80027f6:	f7ff ff03 	bl	8002600 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027fa:	f005 fc1d 	bl	8008038 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027fe:	f7ff fd01 	bl	8002204 <main>
  bx  lr    
 8002802:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002804:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8002808:	0800a0b8 	.word	0x0800a0b8
  ldr  r0, =_sdata
 800280c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002810:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8002814:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 8002818:	20004cd0 	.word	0x20004cd0

0800281c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800281c:	e7fe      	b.n	800281c <ADC_IRQHandler>
	...

08002820 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002824:	4b0e      	ldr	r3, [pc, #56]	; (8002860 <HAL_Init+0x40>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a0d      	ldr	r2, [pc, #52]	; (8002860 <HAL_Init+0x40>)
 800282a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800282e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002830:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <HAL_Init+0x40>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a0a      	ldr	r2, [pc, #40]	; (8002860 <HAL_Init+0x40>)
 8002836:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800283a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800283c:	4b08      	ldr	r3, [pc, #32]	; (8002860 <HAL_Init+0x40>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a07      	ldr	r2, [pc, #28]	; (8002860 <HAL_Init+0x40>)
 8002842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002846:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002848:	2003      	movs	r0, #3
 800284a:	f000 f8fa 	bl	8002a42 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800284e:	2000      	movs	r0, #0
 8002850:	f7ff fe24 	bl	800249c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002854:	f7ff fdfa 	bl	800244c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40023c00 	.word	0x40023c00

08002864 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002868:	4b06      	ldr	r3, [pc, #24]	; (8002884 <HAL_IncTick+0x20>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	461a      	mov	r2, r3
 800286e:	4b06      	ldr	r3, [pc, #24]	; (8002888 <HAL_IncTick+0x24>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4413      	add	r3, r2
 8002874:	4a04      	ldr	r2, [pc, #16]	; (8002888 <HAL_IncTick+0x24>)
 8002876:	6013      	str	r3, [r2, #0]
}
 8002878:	bf00      	nop
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	20000008 	.word	0x20000008
 8002888:	20004c88 	.word	0x20004c88

0800288c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  return uwTick;
 8002890:	4b03      	ldr	r3, [pc, #12]	; (80028a0 <HAL_GetTick+0x14>)
 8002892:	681b      	ldr	r3, [r3, #0]
}
 8002894:	4618      	mov	r0, r3
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	20004c88 	.word	0x20004c88

080028a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028ac:	f7ff ffee 	bl	800288c <HAL_GetTick>
 80028b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028bc:	d005      	beq.n	80028ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028be:	4b09      	ldr	r3, [pc, #36]	; (80028e4 <HAL_Delay+0x40>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	461a      	mov	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4413      	add	r3, r2
 80028c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028ca:	bf00      	nop
 80028cc:	f7ff ffde 	bl	800288c <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d8f7      	bhi.n	80028cc <HAL_Delay+0x28>
  {
  }
}
 80028dc:	bf00      	nop
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	20000008 	.word	0x20000008

080028e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028f8:	4b0c      	ldr	r3, [pc, #48]	; (800292c <__NVIC_SetPriorityGrouping+0x44>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028fe:	68ba      	ldr	r2, [r7, #8]
 8002900:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002904:	4013      	ands	r3, r2
 8002906:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002910:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002918:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800291a:	4a04      	ldr	r2, [pc, #16]	; (800292c <__NVIC_SetPriorityGrouping+0x44>)
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	60d3      	str	r3, [r2, #12]
}
 8002920:	bf00      	nop
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	e000ed00 	.word	0xe000ed00

08002930 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002934:	4b04      	ldr	r3, [pc, #16]	; (8002948 <__NVIC_GetPriorityGrouping+0x18>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	0a1b      	lsrs	r3, r3, #8
 800293a:	f003 0307 	and.w	r3, r3, #7
}
 800293e:	4618      	mov	r0, r3
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	e000ed00 	.word	0xe000ed00

0800294c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	4603      	mov	r3, r0
 8002954:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295a:	2b00      	cmp	r3, #0
 800295c:	db0b      	blt.n	8002976 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800295e:	79fb      	ldrb	r3, [r7, #7]
 8002960:	f003 021f 	and.w	r2, r3, #31
 8002964:	4907      	ldr	r1, [pc, #28]	; (8002984 <__NVIC_EnableIRQ+0x38>)
 8002966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296a:	095b      	lsrs	r3, r3, #5
 800296c:	2001      	movs	r0, #1
 800296e:	fa00 f202 	lsl.w	r2, r0, r2
 8002972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	e000e100 	.word	0xe000e100

08002988 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	4603      	mov	r3, r0
 8002990:	6039      	str	r1, [r7, #0]
 8002992:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002998:	2b00      	cmp	r3, #0
 800299a:	db0a      	blt.n	80029b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	b2da      	uxtb	r2, r3
 80029a0:	490c      	ldr	r1, [pc, #48]	; (80029d4 <__NVIC_SetPriority+0x4c>)
 80029a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a6:	0112      	lsls	r2, r2, #4
 80029a8:	b2d2      	uxtb	r2, r2
 80029aa:	440b      	add	r3, r1
 80029ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029b0:	e00a      	b.n	80029c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	b2da      	uxtb	r2, r3
 80029b6:	4908      	ldr	r1, [pc, #32]	; (80029d8 <__NVIC_SetPriority+0x50>)
 80029b8:	79fb      	ldrb	r3, [r7, #7]
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	3b04      	subs	r3, #4
 80029c0:	0112      	lsls	r2, r2, #4
 80029c2:	b2d2      	uxtb	r2, r2
 80029c4:	440b      	add	r3, r1
 80029c6:	761a      	strb	r2, [r3, #24]
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr
 80029d4:	e000e100 	.word	0xe000e100
 80029d8:	e000ed00 	.word	0xe000ed00

080029dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029dc:	b480      	push	{r7}
 80029de:	b089      	sub	sp, #36	; 0x24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f003 0307 	and.w	r3, r3, #7
 80029ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f1c3 0307 	rsb	r3, r3, #7
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	bf28      	it	cs
 80029fa:	2304      	movcs	r3, #4
 80029fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	3304      	adds	r3, #4
 8002a02:	2b06      	cmp	r3, #6
 8002a04:	d902      	bls.n	8002a0c <NVIC_EncodePriority+0x30>
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	3b03      	subs	r3, #3
 8002a0a:	e000      	b.n	8002a0e <NVIC_EncodePriority+0x32>
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	43da      	mvns	r2, r3
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	401a      	ands	r2, r3
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2e:	43d9      	mvns	r1, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a34:	4313      	orrs	r3, r2
         );
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3724      	adds	r7, #36	; 0x24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b082      	sub	sp, #8
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f7ff ff4c 	bl	80028e8 <__NVIC_SetPriorityGrouping>
}
 8002a50:	bf00      	nop
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
 8002a64:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a6a:	f7ff ff61 	bl	8002930 <__NVIC_GetPriorityGrouping>
 8002a6e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	68b9      	ldr	r1, [r7, #8]
 8002a74:	6978      	ldr	r0, [r7, #20]
 8002a76:	f7ff ffb1 	bl	80029dc <NVIC_EncodePriority>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a80:	4611      	mov	r1, r2
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff ff80 	bl	8002988 <__NVIC_SetPriority>
}
 8002a88:	bf00      	nop
 8002a8a:	3718      	adds	r7, #24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff ff54 	bl	800294c <__NVIC_EnableIRQ>
}
 8002aa4:	bf00      	nop
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b089      	sub	sp, #36	; 0x24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61fb      	str	r3, [r7, #28]
 8002ac6:	e159      	b.n	8002d7c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ac8:	2201      	movs	r2, #1
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	f040 8148 	bne.w	8002d76 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d00b      	beq.n	8002b06 <HAL_GPIO_Init+0x5a>
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d007      	beq.n	8002b06 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002afa:	2b11      	cmp	r3, #17
 8002afc:	d003      	beq.n	8002b06 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b12      	cmp	r3, #18
 8002b04:	d130      	bne.n	8002b68 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	2203      	movs	r2, #3
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	43db      	mvns	r3, r3
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	68da      	ldr	r2, [r3, #12]
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	43db      	mvns	r3, r3
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	091b      	lsrs	r3, r3, #4
 8002b52:	f003 0201 	and.w	r2, r3, #1
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	2203      	movs	r2, #3
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d003      	beq.n	8002ba8 <HAL_GPIO_Init+0xfc>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	2b12      	cmp	r3, #18
 8002ba6:	d123      	bne.n	8002bf0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	08da      	lsrs	r2, r3, #3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3208      	adds	r2, #8
 8002bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	220f      	movs	r2, #15
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	691a      	ldr	r2, [r3, #16]
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	f003 0307 	and.w	r3, r3, #7
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	08da      	lsrs	r2, r3, #3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	3208      	adds	r2, #8
 8002bea:	69b9      	ldr	r1, [r7, #24]
 8002bec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	2203      	movs	r2, #3
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	43db      	mvns	r3, r3
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4013      	ands	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f003 0203 	and.w	r2, r3, #3
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 80a2 	beq.w	8002d76 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c32:	2300      	movs	r3, #0
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	4b56      	ldr	r3, [pc, #344]	; (8002d90 <HAL_GPIO_Init+0x2e4>)
 8002c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3a:	4a55      	ldr	r2, [pc, #340]	; (8002d90 <HAL_GPIO_Init+0x2e4>)
 8002c3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c40:	6453      	str	r3, [r2, #68]	; 0x44
 8002c42:	4b53      	ldr	r3, [pc, #332]	; (8002d90 <HAL_GPIO_Init+0x2e4>)
 8002c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c4e:	4a51      	ldr	r2, [pc, #324]	; (8002d94 <HAL_GPIO_Init+0x2e8>)
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	089b      	lsrs	r3, r3, #2
 8002c54:	3302      	adds	r3, #2
 8002c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	220f      	movs	r2, #15
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a48      	ldr	r2, [pc, #288]	; (8002d98 <HAL_GPIO_Init+0x2ec>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d019      	beq.n	8002cae <HAL_GPIO_Init+0x202>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a47      	ldr	r2, [pc, #284]	; (8002d9c <HAL_GPIO_Init+0x2f0>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d013      	beq.n	8002caa <HAL_GPIO_Init+0x1fe>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a46      	ldr	r2, [pc, #280]	; (8002da0 <HAL_GPIO_Init+0x2f4>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d00d      	beq.n	8002ca6 <HAL_GPIO_Init+0x1fa>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a45      	ldr	r2, [pc, #276]	; (8002da4 <HAL_GPIO_Init+0x2f8>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d007      	beq.n	8002ca2 <HAL_GPIO_Init+0x1f6>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a44      	ldr	r2, [pc, #272]	; (8002da8 <HAL_GPIO_Init+0x2fc>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d101      	bne.n	8002c9e <HAL_GPIO_Init+0x1f2>
 8002c9a:	2304      	movs	r3, #4
 8002c9c:	e008      	b.n	8002cb0 <HAL_GPIO_Init+0x204>
 8002c9e:	2307      	movs	r3, #7
 8002ca0:	e006      	b.n	8002cb0 <HAL_GPIO_Init+0x204>
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e004      	b.n	8002cb0 <HAL_GPIO_Init+0x204>
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	e002      	b.n	8002cb0 <HAL_GPIO_Init+0x204>
 8002caa:	2301      	movs	r3, #1
 8002cac:	e000      	b.n	8002cb0 <HAL_GPIO_Init+0x204>
 8002cae:	2300      	movs	r3, #0
 8002cb0:	69fa      	ldr	r2, [r7, #28]
 8002cb2:	f002 0203 	and.w	r2, r2, #3
 8002cb6:	0092      	lsls	r2, r2, #2
 8002cb8:	4093      	lsls	r3, r2
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cc0:	4934      	ldr	r1, [pc, #208]	; (8002d94 <HAL_GPIO_Init+0x2e8>)
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	089b      	lsrs	r3, r3, #2
 8002cc6:	3302      	adds	r3, #2
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cce:	4b37      	ldr	r3, [pc, #220]	; (8002dac <HAL_GPIO_Init+0x300>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cf2:	4a2e      	ldr	r2, [pc, #184]	; (8002dac <HAL_GPIO_Init+0x300>)
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002cf8:	4b2c      	ldr	r3, [pc, #176]	; (8002dac <HAL_GPIO_Init+0x300>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	43db      	mvns	r3, r3
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4013      	ands	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d003      	beq.n	8002d1c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d1c:	4a23      	ldr	r2, [pc, #140]	; (8002dac <HAL_GPIO_Init+0x300>)
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d22:	4b22      	ldr	r3, [pc, #136]	; (8002dac <HAL_GPIO_Init+0x300>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d46:	4a19      	ldr	r2, [pc, #100]	; (8002dac <HAL_GPIO_Init+0x300>)
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d4c:	4b17      	ldr	r3, [pc, #92]	; (8002dac <HAL_GPIO_Init+0x300>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	43db      	mvns	r3, r3
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d70:	4a0e      	ldr	r2, [pc, #56]	; (8002dac <HAL_GPIO_Init+0x300>)
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	61fb      	str	r3, [r7, #28]
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	2b0f      	cmp	r3, #15
 8002d80:	f67f aea2 	bls.w	8002ac8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d84:	bf00      	nop
 8002d86:	3724      	adds	r7, #36	; 0x24
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr
 8002d90:	40023800 	.word	0x40023800
 8002d94:	40013800 	.word	0x40013800
 8002d98:	40020000 	.word	0x40020000
 8002d9c:	40020400 	.word	0x40020400
 8002da0:	40020800 	.word	0x40020800
 8002da4:	40020c00 	.word	0x40020c00
 8002da8:	40021000 	.word	0x40021000
 8002dac:	40013c00 	.word	0x40013c00

08002db0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	460b      	mov	r3, r1
 8002dba:	807b      	strh	r3, [r7, #2]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dc0:	787b      	ldrb	r3, [r7, #1]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dc6:	887a      	ldrh	r2, [r7, #2]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002dcc:	e003      	b.n	8002dd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dce:	887b      	ldrh	r3, [r7, #2]
 8002dd0:	041a      	lsls	r2, r3, #16
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	619a      	str	r2, [r3, #24]
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
	...

08002de4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e11f      	b.n	8003036 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d106      	bne.n	8002e10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 f922 	bl	8003054 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2224      	movs	r2, #36	; 0x24
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0201 	bic.w	r2, r2, #1
 8002e26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e48:	f001 fb9a 	bl	8004580 <HAL_RCC_GetPCLK1Freq>
 8002e4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	4a7b      	ldr	r2, [pc, #492]	; (8003040 <HAL_I2C_Init+0x25c>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d807      	bhi.n	8002e68 <HAL_I2C_Init+0x84>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	4a7a      	ldr	r2, [pc, #488]	; (8003044 <HAL_I2C_Init+0x260>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	bf94      	ite	ls
 8002e60:	2301      	movls	r3, #1
 8002e62:	2300      	movhi	r3, #0
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	e006      	b.n	8002e76 <HAL_I2C_Init+0x92>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4a77      	ldr	r2, [pc, #476]	; (8003048 <HAL_I2C_Init+0x264>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	bf94      	ite	ls
 8002e70:	2301      	movls	r3, #1
 8002e72:	2300      	movhi	r3, #0
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e0db      	b.n	8003036 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	4a72      	ldr	r2, [pc, #456]	; (800304c <HAL_I2C_Init+0x268>)
 8002e82:	fba2 2303 	umull	r2, r3, r2, r3
 8002e86:	0c9b      	lsrs	r3, r3, #18
 8002e88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68ba      	ldr	r2, [r7, #8]
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	4a64      	ldr	r2, [pc, #400]	; (8003040 <HAL_I2C_Init+0x25c>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d802      	bhi.n	8002eb8 <HAL_I2C_Init+0xd4>
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	e009      	b.n	8002ecc <HAL_I2C_Init+0xe8>
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ebe:	fb02 f303 	mul.w	r3, r2, r3
 8002ec2:	4a63      	ldr	r2, [pc, #396]	; (8003050 <HAL_I2C_Init+0x26c>)
 8002ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec8:	099b      	lsrs	r3, r3, #6
 8002eca:	3301      	adds	r3, #1
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	6812      	ldr	r2, [r2, #0]
 8002ed0:	430b      	orrs	r3, r1
 8002ed2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ede:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	4956      	ldr	r1, [pc, #344]	; (8003040 <HAL_I2C_Init+0x25c>)
 8002ee8:	428b      	cmp	r3, r1
 8002eea:	d80d      	bhi.n	8002f08 <HAL_I2C_Init+0x124>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	1e59      	subs	r1, r3, #1
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002efa:	3301      	adds	r3, #1
 8002efc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f00:	2b04      	cmp	r3, #4
 8002f02:	bf38      	it	cc
 8002f04:	2304      	movcc	r3, #4
 8002f06:	e04f      	b.n	8002fa8 <HAL_I2C_Init+0x1c4>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d111      	bne.n	8002f34 <HAL_I2C_Init+0x150>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	1e58      	subs	r0, r3, #1
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6859      	ldr	r1, [r3, #4]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	440b      	add	r3, r1
 8002f1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f22:	3301      	adds	r3, #1
 8002f24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	bf0c      	ite	eq
 8002f2c:	2301      	moveq	r3, #1
 8002f2e:	2300      	movne	r3, #0
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	e012      	b.n	8002f5a <HAL_I2C_Init+0x176>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	1e58      	subs	r0, r3, #1
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6859      	ldr	r1, [r3, #4]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	0099      	lsls	r1, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	bf0c      	ite	eq
 8002f54:	2301      	moveq	r3, #1
 8002f56:	2300      	movne	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_I2C_Init+0x17e>
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e022      	b.n	8002fa8 <HAL_I2C_Init+0x1c4>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10e      	bne.n	8002f88 <HAL_I2C_Init+0x1a4>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	1e58      	subs	r0, r3, #1
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6859      	ldr	r1, [r3, #4]
 8002f72:	460b      	mov	r3, r1
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	440b      	add	r3, r1
 8002f78:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f86:	e00f      	b.n	8002fa8 <HAL_I2C_Init+0x1c4>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	1e58      	subs	r0, r3, #1
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6859      	ldr	r1, [r3, #4]
 8002f90:	460b      	mov	r3, r1
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	440b      	add	r3, r1
 8002f96:	0099      	lsls	r1, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fa4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	6809      	ldr	r1, [r1, #0]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69da      	ldr	r2, [r3, #28]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002fd6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6911      	ldr	r1, [r2, #16]
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	68d2      	ldr	r2, [r2, #12]
 8002fe2:	4311      	orrs	r1, r2
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6812      	ldr	r2, [r2, #0]
 8002fe8:	430b      	orrs	r3, r1
 8002fea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	695a      	ldr	r2, [r3, #20]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	431a      	orrs	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	430a      	orrs	r2, r1
 8003006:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f042 0201 	orr.w	r2, r2, #1
 8003016:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2220      	movs	r2, #32
 8003022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	000186a0 	.word	0x000186a0
 8003044:	001e847f 	.word	0x001e847f
 8003048:	003d08ff 	.word	0x003d08ff
 800304c:	431bde83 	.word	0x431bde83
 8003050:	10624dd3 	.word	0x10624dd3

08003054 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b088      	sub	sp, #32
 800306c:	af02      	add	r7, sp, #8
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	607a      	str	r2, [r7, #4]
 8003072:	461a      	mov	r2, r3
 8003074:	460b      	mov	r3, r1
 8003076:	817b      	strh	r3, [r7, #10]
 8003078:	4613      	mov	r3, r2
 800307a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800307c:	f7ff fc06 	bl	800288c <HAL_GetTick>
 8003080:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b20      	cmp	r3, #32
 800308c:	f040 80e0 	bne.w	8003250 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	2319      	movs	r3, #25
 8003096:	2201      	movs	r2, #1
 8003098:	4970      	ldr	r1, [pc, #448]	; (800325c <HAL_I2C_Master_Transmit+0x1f4>)
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 fc58 	bl	8003950 <I2C_WaitOnFlagUntilTimeout>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80030a6:	2302      	movs	r3, #2
 80030a8:	e0d3      	b.n	8003252 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d101      	bne.n	80030b8 <HAL_I2C_Master_Transmit+0x50>
 80030b4:	2302      	movs	r3, #2
 80030b6:	e0cc      	b.n	8003252 <HAL_I2C_Master_Transmit+0x1ea>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d007      	beq.n	80030de <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f042 0201 	orr.w	r2, r2, #1
 80030dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2221      	movs	r2, #33	; 0x21
 80030f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2210      	movs	r2, #16
 80030fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	893a      	ldrh	r2, [r7, #8]
 800310e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003114:	b29a      	uxth	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	4a50      	ldr	r2, [pc, #320]	; (8003260 <HAL_I2C_Master_Transmit+0x1f8>)
 800311e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003120:	8979      	ldrh	r1, [r7, #10]
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	6a3a      	ldr	r2, [r7, #32]
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f000 fac2 	bl	80036b0 <I2C_MasterRequestWrite>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e08d      	b.n	8003252 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003136:	2300      	movs	r3, #0
 8003138:	613b      	str	r3, [r7, #16]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	613b      	str	r3, [r7, #16]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	613b      	str	r3, [r7, #16]
 800314a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800314c:	e066      	b.n	800321c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	6a39      	ldr	r1, [r7, #32]
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 fcd2 	bl	8003afc <I2C_WaitOnTXEFlagUntilTimeout>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00d      	beq.n	800317a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	2b04      	cmp	r3, #4
 8003164:	d107      	bne.n	8003176 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003174:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e06b      	b.n	8003252 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317e:	781a      	ldrb	r2, [r3, #0]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318a:	1c5a      	adds	r2, r3, #1
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003194:	b29b      	uxth	r3, r3
 8003196:	3b01      	subs	r3, #1
 8003198:	b29a      	uxth	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a2:	3b01      	subs	r3, #1
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	f003 0304 	and.w	r3, r3, #4
 80031b4:	2b04      	cmp	r3, #4
 80031b6:	d11b      	bne.n	80031f0 <HAL_I2C_Master_Transmit+0x188>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d017      	beq.n	80031f0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c4:	781a      	ldrb	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d0:	1c5a      	adds	r2, r3, #1
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031da:	b29b      	uxth	r3, r3
 80031dc:	3b01      	subs	r3, #1
 80031de:	b29a      	uxth	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e8:	3b01      	subs	r3, #1
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	6a39      	ldr	r1, [r7, #32]
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f000 fcc2 	bl	8003b7e <I2C_WaitOnBTFFlagUntilTimeout>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00d      	beq.n	800321c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003204:	2b04      	cmp	r3, #4
 8003206:	d107      	bne.n	8003218 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003216:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e01a      	b.n	8003252 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003220:	2b00      	cmp	r3, #0
 8003222:	d194      	bne.n	800314e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003232:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2220      	movs	r2, #32
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800324c:	2300      	movs	r3, #0
 800324e:	e000      	b.n	8003252 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003250:	2302      	movs	r3, #2
  }
}
 8003252:	4618      	mov	r0, r3
 8003254:	3718      	adds	r7, #24
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	00100002 	.word	0x00100002
 8003260:	ffff0000 	.word	0xffff0000

08003264 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b08c      	sub	sp, #48	; 0x30
 8003268:	af02      	add	r7, sp, #8
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	607a      	str	r2, [r7, #4]
 800326e:	461a      	mov	r2, r3
 8003270:	460b      	mov	r3, r1
 8003272:	817b      	strh	r3, [r7, #10]
 8003274:	4613      	mov	r3, r2
 8003276:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003278:	f7ff fb08 	bl	800288c <HAL_GetTick>
 800327c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b20      	cmp	r3, #32
 8003288:	f040 820b 	bne.w	80036a2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800328c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	2319      	movs	r3, #25
 8003292:	2201      	movs	r2, #1
 8003294:	497c      	ldr	r1, [pc, #496]	; (8003488 <HAL_I2C_Master_Receive+0x224>)
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	f000 fb5a 	bl	8003950 <I2C_WaitOnFlagUntilTimeout>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80032a2:	2302      	movs	r3, #2
 80032a4:	e1fe      	b.n	80036a4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d101      	bne.n	80032b4 <HAL_I2C_Master_Receive+0x50>
 80032b0:	2302      	movs	r3, #2
 80032b2:	e1f7      	b.n	80036a4 <HAL_I2C_Master_Receive+0x440>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d007      	beq.n	80032da <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f042 0201 	orr.w	r2, r2, #1
 80032d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2222      	movs	r2, #34	; 0x22
 80032ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2210      	movs	r2, #16
 80032f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	893a      	ldrh	r2, [r7, #8]
 800330a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003310:	b29a      	uxth	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	4a5c      	ldr	r2, [pc, #368]	; (800348c <HAL_I2C_Master_Receive+0x228>)
 800331a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800331c:	8979      	ldrh	r1, [r7, #10]
 800331e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f000 fa46 	bl	80037b4 <I2C_MasterRequestRead>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e1b8      	b.n	80036a4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003336:	2b00      	cmp	r3, #0
 8003338:	d113      	bne.n	8003362 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800333a:	2300      	movs	r3, #0
 800333c:	623b      	str	r3, [r7, #32]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	623b      	str	r3, [r7, #32]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	623b      	str	r3, [r7, #32]
 800334e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	e18c      	b.n	800367c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003366:	2b01      	cmp	r3, #1
 8003368:	d11b      	bne.n	80033a2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003378:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800337a:	2300      	movs	r3, #0
 800337c:	61fb      	str	r3, [r7, #28]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	61fb      	str	r3, [r7, #28]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	61fb      	str	r3, [r7, #28]
 800338e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	e16c      	b.n	800367c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d11b      	bne.n	80033e2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ca:	2300      	movs	r3, #0
 80033cc:	61bb      	str	r3, [r7, #24]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	61bb      	str	r3, [r7, #24]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	61bb      	str	r3, [r7, #24]
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	e14c      	b.n	800367c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033f2:	2300      	movs	r3, #0
 80033f4:	617b      	str	r3, [r7, #20]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	617b      	str	r3, [r7, #20]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	617b      	str	r3, [r7, #20]
 8003406:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003408:	e138      	b.n	800367c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800340e:	2b03      	cmp	r3, #3
 8003410:	f200 80f1 	bhi.w	80035f6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003418:	2b01      	cmp	r3, #1
 800341a:	d123      	bne.n	8003464 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800341c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800341e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f000 fbed 	bl	8003c00 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e139      	b.n	80036a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	691a      	ldr	r2, [r3, #16]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	b2d2      	uxtb	r2, r2
 800343c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	1c5a      	adds	r2, r3, #1
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800344c:	3b01      	subs	r3, #1
 800344e:	b29a      	uxth	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003458:	b29b      	uxth	r3, r3
 800345a:	3b01      	subs	r3, #1
 800345c:	b29a      	uxth	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003462:	e10b      	b.n	800367c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003468:	2b02      	cmp	r3, #2
 800346a:	d14e      	bne.n	800350a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003472:	2200      	movs	r2, #0
 8003474:	4906      	ldr	r1, [pc, #24]	; (8003490 <HAL_I2C_Master_Receive+0x22c>)
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f000 fa6a 	bl	8003950 <I2C_WaitOnFlagUntilTimeout>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d008      	beq.n	8003494 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e10e      	b.n	80036a4 <HAL_I2C_Master_Receive+0x440>
 8003486:	bf00      	nop
 8003488:	00100002 	.word	0x00100002
 800348c:	ffff0000 	.word	0xffff0000
 8003490:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	691a      	ldr	r2, [r3, #16]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ae:	b2d2      	uxtb	r2, r2
 80034b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b6:	1c5a      	adds	r2, r3, #1
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c0:	3b01      	subs	r3, #1
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	3b01      	subs	r3, #1
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	691a      	ldr	r2, [r3, #16]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	b2d2      	uxtb	r2, r2
 80034e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	1c5a      	adds	r2, r3, #1
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f2:	3b01      	subs	r3, #1
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034fe:	b29b      	uxth	r3, r3
 8003500:	3b01      	subs	r3, #1
 8003502:	b29a      	uxth	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003508:	e0b8      	b.n	800367c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003510:	2200      	movs	r2, #0
 8003512:	4966      	ldr	r1, [pc, #408]	; (80036ac <HAL_I2C_Master_Receive+0x448>)
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f000 fa1b 	bl	8003950 <I2C_WaitOnFlagUntilTimeout>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e0bf      	b.n	80036a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003532:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	691a      	ldr	r2, [r3, #16]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353e:	b2d2      	uxtb	r2, r2
 8003540:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	1c5a      	adds	r2, r3, #1
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003550:	3b01      	subs	r3, #1
 8003552:	b29a      	uxth	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800355c:	b29b      	uxth	r3, r3
 800355e:	3b01      	subs	r3, #1
 8003560:	b29a      	uxth	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356c:	2200      	movs	r2, #0
 800356e:	494f      	ldr	r1, [pc, #316]	; (80036ac <HAL_I2C_Master_Receive+0x448>)
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f000 f9ed 	bl	8003950 <I2C_WaitOnFlagUntilTimeout>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e091      	b.n	80036a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800358e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	691a      	ldr	r2, [r3, #16]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359a:	b2d2      	uxtb	r2, r2
 800359c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	1c5a      	adds	r2, r3, #1
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ac:	3b01      	subs	r3, #1
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	3b01      	subs	r3, #1
 80035bc:	b29a      	uxth	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	691a      	ldr	r2, [r3, #16]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	b2d2      	uxtb	r2, r2
 80035ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	1c5a      	adds	r2, r3, #1
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035de:	3b01      	subs	r3, #1
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	3b01      	subs	r3, #1
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035f4:	e042      	b.n	800367c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f000 fb00 	bl	8003c00 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e04c      	b.n	80036a4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	691a      	ldr	r2, [r3, #16]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	b2d2      	uxtb	r2, r2
 8003616:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003626:	3b01      	subs	r3, #1
 8003628:	b29a      	uxth	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003632:	b29b      	uxth	r3, r3
 8003634:	3b01      	subs	r3, #1
 8003636:	b29a      	uxth	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	f003 0304 	and.w	r3, r3, #4
 8003646:	2b04      	cmp	r3, #4
 8003648:	d118      	bne.n	800367c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	691a      	ldr	r2, [r3, #16]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003654:	b2d2      	uxtb	r2, r2
 8003656:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	1c5a      	adds	r2, r3, #1
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003666:	3b01      	subs	r3, #1
 8003668:	b29a      	uxth	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003672:	b29b      	uxth	r3, r3
 8003674:	3b01      	subs	r3, #1
 8003676:	b29a      	uxth	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003680:	2b00      	cmp	r3, #0
 8003682:	f47f aec2 	bne.w	800340a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2220      	movs	r2, #32
 800368a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800369e:	2300      	movs	r3, #0
 80036a0:	e000      	b.n	80036a4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80036a2:	2302      	movs	r3, #2
  }
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3728      	adds	r7, #40	; 0x28
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	00010004 	.word	0x00010004

080036b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b088      	sub	sp, #32
 80036b4:	af02      	add	r7, sp, #8
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	607a      	str	r2, [r7, #4]
 80036ba:	603b      	str	r3, [r7, #0]
 80036bc:	460b      	mov	r3, r1
 80036be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	2b08      	cmp	r3, #8
 80036ca:	d006      	beq.n	80036da <I2C_MasterRequestWrite+0x2a>
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d003      	beq.n	80036da <I2C_MasterRequestWrite+0x2a>
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036d8:	d108      	bne.n	80036ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	e00b      	b.n	8003704 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f0:	2b12      	cmp	r3, #18
 80036f2:	d107      	bne.n	8003704 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003702:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	9300      	str	r3, [sp, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f000 f91d 	bl	8003950 <I2C_WaitOnFlagUntilTimeout>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00d      	beq.n	8003738 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800372a:	d103      	bne.n	8003734 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003732:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e035      	b.n	80037a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003740:	d108      	bne.n	8003754 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003742:	897b      	ldrh	r3, [r7, #10]
 8003744:	b2db      	uxtb	r3, r3
 8003746:	461a      	mov	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003750:	611a      	str	r2, [r3, #16]
 8003752:	e01b      	b.n	800378c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003754:	897b      	ldrh	r3, [r7, #10]
 8003756:	11db      	asrs	r3, r3, #7
 8003758:	b2db      	uxtb	r3, r3
 800375a:	f003 0306 	and.w	r3, r3, #6
 800375e:	b2db      	uxtb	r3, r3
 8003760:	f063 030f 	orn	r3, r3, #15
 8003764:	b2da      	uxtb	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	490e      	ldr	r1, [pc, #56]	; (80037ac <I2C_MasterRequestWrite+0xfc>)
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 f943 	bl	80039fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e010      	b.n	80037a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003782:	897b      	ldrh	r3, [r7, #10]
 8003784:	b2da      	uxtb	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	4907      	ldr	r1, [pc, #28]	; (80037b0 <I2C_MasterRequestWrite+0x100>)
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f000 f933 	bl	80039fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e000      	b.n	80037a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3718      	adds	r7, #24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	00010008 	.word	0x00010008
 80037b0:	00010002 	.word	0x00010002

080037b4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b088      	sub	sp, #32
 80037b8:	af02      	add	r7, sp, #8
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	607a      	str	r2, [r7, #4]
 80037be:	603b      	str	r3, [r7, #0]
 80037c0:	460b      	mov	r3, r1
 80037c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037d8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	2b08      	cmp	r3, #8
 80037de:	d006      	beq.n	80037ee <I2C_MasterRequestRead+0x3a>
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d003      	beq.n	80037ee <I2C_MasterRequestRead+0x3a>
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037ec:	d108      	bne.n	8003800 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037fc:	601a      	str	r2, [r3, #0]
 80037fe:	e00b      	b.n	8003818 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003804:	2b11      	cmp	r3, #17
 8003806:	d107      	bne.n	8003818 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003816:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	9300      	str	r3, [sp, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f000 f893 	bl	8003950 <I2C_WaitOnFlagUntilTimeout>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00d      	beq.n	800384c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800383e:	d103      	bne.n	8003848 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003846:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e079      	b.n	8003940 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003854:	d108      	bne.n	8003868 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003856:	897b      	ldrh	r3, [r7, #10]
 8003858:	b2db      	uxtb	r3, r3
 800385a:	f043 0301 	orr.w	r3, r3, #1
 800385e:	b2da      	uxtb	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	611a      	str	r2, [r3, #16]
 8003866:	e05f      	b.n	8003928 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003868:	897b      	ldrh	r3, [r7, #10]
 800386a:	11db      	asrs	r3, r3, #7
 800386c:	b2db      	uxtb	r3, r3
 800386e:	f003 0306 	and.w	r3, r3, #6
 8003872:	b2db      	uxtb	r3, r3
 8003874:	f063 030f 	orn	r3, r3, #15
 8003878:	b2da      	uxtb	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	4930      	ldr	r1, [pc, #192]	; (8003948 <I2C_MasterRequestRead+0x194>)
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f000 f8b9 	bl	80039fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e054      	b.n	8003940 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003896:	897b      	ldrh	r3, [r7, #10]
 8003898:	b2da      	uxtb	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	4929      	ldr	r1, [pc, #164]	; (800394c <I2C_MasterRequestRead+0x198>)
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 f8a9 	bl	80039fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e044      	b.n	8003940 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038b6:	2300      	movs	r3, #0
 80038b8:	613b      	str	r3, [r7, #16]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	613b      	str	r3, [r7, #16]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	613b      	str	r3, [r7, #16]
 80038ca:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038da:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 f831 	bl	8003950 <I2C_WaitOnFlagUntilTimeout>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00d      	beq.n	8003910 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003902:	d103      	bne.n	800390c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f44f 7200 	mov.w	r2, #512	; 0x200
 800390a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e017      	b.n	8003940 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003910:	897b      	ldrh	r3, [r7, #10]
 8003912:	11db      	asrs	r3, r3, #7
 8003914:	b2db      	uxtb	r3, r3
 8003916:	f003 0306 	and.w	r3, r3, #6
 800391a:	b2db      	uxtb	r3, r3
 800391c:	f063 030e 	orn	r3, r3, #14
 8003920:	b2da      	uxtb	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	4907      	ldr	r1, [pc, #28]	; (800394c <I2C_MasterRequestRead+0x198>)
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f000 f865 	bl	80039fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e000      	b.n	8003940 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3718      	adds	r7, #24
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	00010008 	.word	0x00010008
 800394c:	00010002 	.word	0x00010002

08003950 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	603b      	str	r3, [r7, #0]
 800395c:	4613      	mov	r3, r2
 800395e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003960:	e025      	b.n	80039ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003968:	d021      	beq.n	80039ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800396a:	f7fe ff8f 	bl	800288c <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	683a      	ldr	r2, [r7, #0]
 8003976:	429a      	cmp	r2, r3
 8003978:	d302      	bcc.n	8003980 <I2C_WaitOnFlagUntilTimeout+0x30>
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d116      	bne.n	80039ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2220      	movs	r2, #32
 800398a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399a:	f043 0220 	orr.w	r2, r3, #32
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e023      	b.n	80039f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	0c1b      	lsrs	r3, r3, #16
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d10d      	bne.n	80039d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	43da      	mvns	r2, r3
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	4013      	ands	r3, r2
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	bf0c      	ite	eq
 80039ca:	2301      	moveq	r3, #1
 80039cc:	2300      	movne	r3, #0
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	461a      	mov	r2, r3
 80039d2:	e00c      	b.n	80039ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	43da      	mvns	r2, r3
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	4013      	ands	r3, r2
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	bf0c      	ite	eq
 80039e6:	2301      	moveq	r3, #1
 80039e8:	2300      	movne	r3, #0
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	461a      	mov	r2, r3
 80039ee:	79fb      	ldrb	r3, [r7, #7]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d0b6      	beq.n	8003962 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b084      	sub	sp, #16
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	60f8      	str	r0, [r7, #12]
 8003a06:	60b9      	str	r1, [r7, #8]
 8003a08:	607a      	str	r2, [r7, #4]
 8003a0a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a0c:	e051      	b.n	8003ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	695b      	ldr	r3, [r3, #20]
 8003a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a1c:	d123      	bne.n	8003a66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a2c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a36:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2220      	movs	r2, #32
 8003a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	f043 0204 	orr.w	r2, r3, #4
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e046      	b.n	8003af4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a6c:	d021      	beq.n	8003ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a6e:	f7fe ff0d 	bl	800288c <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d302      	bcc.n	8003a84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d116      	bne.n	8003ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9e:	f043 0220 	orr.w	r2, r3, #32
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e020      	b.n	8003af4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	0c1b      	lsrs	r3, r3, #16
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d10c      	bne.n	8003ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	43da      	mvns	r2, r3
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	bf14      	ite	ne
 8003ace:	2301      	movne	r3, #1
 8003ad0:	2300      	moveq	r3, #0
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	e00b      	b.n	8003aee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	43da      	mvns	r2, r3
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	bf14      	ite	ne
 8003ae8:	2301      	movne	r3, #1
 8003aea:	2300      	moveq	r3, #0
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d18d      	bne.n	8003a0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b08:	e02d      	b.n	8003b66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f000 f8ce 	bl	8003cac <I2C_IsAcknowledgeFailed>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e02d      	b.n	8003b76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b20:	d021      	beq.n	8003b66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b22:	f7fe feb3 	bl	800288c <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d302      	bcc.n	8003b38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d116      	bne.n	8003b66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2220      	movs	r2, #32
 8003b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	f043 0220 	orr.w	r2, r3, #32
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e007      	b.n	8003b76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b70:	2b80      	cmp	r3, #128	; 0x80
 8003b72:	d1ca      	bne.n	8003b0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b084      	sub	sp, #16
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	60f8      	str	r0, [r7, #12]
 8003b86:	60b9      	str	r1, [r7, #8]
 8003b88:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b8a:	e02d      	b.n	8003be8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f000 f88d 	bl	8003cac <I2C_IsAcknowledgeFailed>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e02d      	b.n	8003bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ba2:	d021      	beq.n	8003be8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ba4:	f7fe fe72 	bl	800288c <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d302      	bcc.n	8003bba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d116      	bne.n	8003be8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd4:	f043 0220 	orr.w	r2, r3, #32
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e007      	b.n	8003bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	f003 0304 	and.w	r3, r3, #4
 8003bf2:	2b04      	cmp	r3, #4
 8003bf4:	d1ca      	bne.n	8003b8c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3710      	adds	r7, #16
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c0c:	e042      	b.n	8003c94 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	f003 0310 	and.w	r3, r3, #16
 8003c18:	2b10      	cmp	r3, #16
 8003c1a:	d119      	bne.n	8003c50 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f06f 0210 	mvn.w	r2, #16
 8003c24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2220      	movs	r2, #32
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e029      	b.n	8003ca4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c50:	f7fe fe1c 	bl	800288c <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	68ba      	ldr	r2, [r7, #8]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d302      	bcc.n	8003c66 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d116      	bne.n	8003c94 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c80:	f043 0220 	orr.w	r2, r3, #32
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e007      	b.n	8003ca4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c9e:	2b40      	cmp	r3, #64	; 0x40
 8003ca0:	d1b5      	bne.n	8003c0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cc2:	d11b      	bne.n	8003cfc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ccc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce8:	f043 0204 	orr.w	r2, r3, #4
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e000      	b.n	8003cfe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
	...

08003d0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e25b      	b.n	80041d6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d075      	beq.n	8003e16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d2a:	4ba3      	ldr	r3, [pc, #652]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 030c 	and.w	r3, r3, #12
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	d00c      	beq.n	8003d50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d36:	4ba0      	ldr	r3, [pc, #640]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d3e:	2b08      	cmp	r3, #8
 8003d40:	d112      	bne.n	8003d68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d42:	4b9d      	ldr	r3, [pc, #628]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d4e:	d10b      	bne.n	8003d68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d50:	4b99      	ldr	r3, [pc, #612]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d05b      	beq.n	8003e14 <HAL_RCC_OscConfig+0x108>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d157      	bne.n	8003e14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e236      	b.n	80041d6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d70:	d106      	bne.n	8003d80 <HAL_RCC_OscConfig+0x74>
 8003d72:	4b91      	ldr	r3, [pc, #580]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a90      	ldr	r2, [pc, #576]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	e01d      	b.n	8003dbc <HAL_RCC_OscConfig+0xb0>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d88:	d10c      	bne.n	8003da4 <HAL_RCC_OscConfig+0x98>
 8003d8a:	4b8b      	ldr	r3, [pc, #556]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a8a      	ldr	r2, [pc, #552]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003d90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	4b88      	ldr	r3, [pc, #544]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a87      	ldr	r2, [pc, #540]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	e00b      	b.n	8003dbc <HAL_RCC_OscConfig+0xb0>
 8003da4:	4b84      	ldr	r3, [pc, #528]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a83      	ldr	r2, [pc, #524]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dae:	6013      	str	r3, [r2, #0]
 8003db0:	4b81      	ldr	r3, [pc, #516]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a80      	ldr	r2, [pc, #512]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d013      	beq.n	8003dec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc4:	f7fe fd62 	bl	800288c <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dcc:	f7fe fd5e 	bl	800288c <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b64      	cmp	r3, #100	; 0x64
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e1fb      	b.n	80041d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dde:	4b76      	ldr	r3, [pc, #472]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0f0      	beq.n	8003dcc <HAL_RCC_OscConfig+0xc0>
 8003dea:	e014      	b.n	8003e16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dec:	f7fe fd4e 	bl	800288c <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003df4:	f7fe fd4a 	bl	800288c <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b64      	cmp	r3, #100	; 0x64
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e1e7      	b.n	80041d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e06:	4b6c      	ldr	r3, [pc, #432]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1f0      	bne.n	8003df4 <HAL_RCC_OscConfig+0xe8>
 8003e12:	e000      	b.n	8003e16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d063      	beq.n	8003eea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e22:	4b65      	ldr	r3, [pc, #404]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f003 030c 	and.w	r3, r3, #12
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00b      	beq.n	8003e46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e2e:	4b62      	ldr	r3, [pc, #392]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e36:	2b08      	cmp	r3, #8
 8003e38:	d11c      	bne.n	8003e74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e3a:	4b5f      	ldr	r3, [pc, #380]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d116      	bne.n	8003e74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e46:	4b5c      	ldr	r3, [pc, #368]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d005      	beq.n	8003e5e <HAL_RCC_OscConfig+0x152>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d001      	beq.n	8003e5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e1bb      	b.n	80041d6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e5e:	4b56      	ldr	r3, [pc, #344]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	4952      	ldr	r1, [pc, #328]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e72:	e03a      	b.n	8003eea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d020      	beq.n	8003ebe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e7c:	4b4f      	ldr	r3, [pc, #316]	; (8003fbc <HAL_RCC_OscConfig+0x2b0>)
 8003e7e:	2201      	movs	r2, #1
 8003e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e82:	f7fe fd03 	bl	800288c <HAL_GetTick>
 8003e86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e88:	e008      	b.n	8003e9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e8a:	f7fe fcff 	bl	800288c <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d901      	bls.n	8003e9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e19c      	b.n	80041d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e9c:	4b46      	ldr	r3, [pc, #280]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d0f0      	beq.n	8003e8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea8:	4b43      	ldr	r3, [pc, #268]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	4940      	ldr	r1, [pc, #256]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	600b      	str	r3, [r1, #0]
 8003ebc:	e015      	b.n	8003eea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ebe:	4b3f      	ldr	r3, [pc, #252]	; (8003fbc <HAL_RCC_OscConfig+0x2b0>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec4:	f7fe fce2 	bl	800288c <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ecc:	f7fe fcde 	bl	800288c <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e17b      	b.n	80041d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ede:	4b36      	ldr	r3, [pc, #216]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1f0      	bne.n	8003ecc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d030      	beq.n	8003f58 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d016      	beq.n	8003f2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003efe:	4b30      	ldr	r3, [pc, #192]	; (8003fc0 <HAL_RCC_OscConfig+0x2b4>)
 8003f00:	2201      	movs	r2, #1
 8003f02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f04:	f7fe fcc2 	bl	800288c <HAL_GetTick>
 8003f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f0c:	f7fe fcbe 	bl	800288c <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e15b      	b.n	80041d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f1e:	4b26      	ldr	r3, [pc, #152]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003f20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0f0      	beq.n	8003f0c <HAL_RCC_OscConfig+0x200>
 8003f2a:	e015      	b.n	8003f58 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f2c:	4b24      	ldr	r3, [pc, #144]	; (8003fc0 <HAL_RCC_OscConfig+0x2b4>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f32:	f7fe fcab 	bl	800288c <HAL_GetTick>
 8003f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f38:	e008      	b.n	8003f4c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f3a:	f7fe fca7 	bl	800288c <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e144      	b.n	80041d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f4c:	4b1a      	ldr	r3, [pc, #104]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003f4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1f0      	bne.n	8003f3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0304 	and.w	r3, r3, #4
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 80a0 	beq.w	80040a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f66:	2300      	movs	r3, #0
 8003f68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f6a:	4b13      	ldr	r3, [pc, #76]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10f      	bne.n	8003f96 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f76:	2300      	movs	r3, #0
 8003f78:	60bb      	str	r3, [r7, #8]
 8003f7a:	4b0f      	ldr	r3, [pc, #60]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	4a0e      	ldr	r2, [pc, #56]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f84:	6413      	str	r3, [r2, #64]	; 0x40
 8003f86:	4b0c      	ldr	r3, [pc, #48]	; (8003fb8 <HAL_RCC_OscConfig+0x2ac>)
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f8e:	60bb      	str	r3, [r7, #8]
 8003f90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f92:	2301      	movs	r3, #1
 8003f94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f96:	4b0b      	ldr	r3, [pc, #44]	; (8003fc4 <HAL_RCC_OscConfig+0x2b8>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d121      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fa2:	4b08      	ldr	r3, [pc, #32]	; (8003fc4 <HAL_RCC_OscConfig+0x2b8>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a07      	ldr	r2, [pc, #28]	; (8003fc4 <HAL_RCC_OscConfig+0x2b8>)
 8003fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fae:	f7fe fc6d 	bl	800288c <HAL_GetTick>
 8003fb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb4:	e011      	b.n	8003fda <HAL_RCC_OscConfig+0x2ce>
 8003fb6:	bf00      	nop
 8003fb8:	40023800 	.word	0x40023800
 8003fbc:	42470000 	.word	0x42470000
 8003fc0:	42470e80 	.word	0x42470e80
 8003fc4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fc8:	f7fe fc60 	bl	800288c <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e0fd      	b.n	80041d6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fda:	4b81      	ldr	r3, [pc, #516]	; (80041e0 <HAL_RCC_OscConfig+0x4d4>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0f0      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d106      	bne.n	8003ffc <HAL_RCC_OscConfig+0x2f0>
 8003fee:	4b7d      	ldr	r3, [pc, #500]	; (80041e4 <HAL_RCC_OscConfig+0x4d8>)
 8003ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff2:	4a7c      	ldr	r2, [pc, #496]	; (80041e4 <HAL_RCC_OscConfig+0x4d8>)
 8003ff4:	f043 0301 	orr.w	r3, r3, #1
 8003ff8:	6713      	str	r3, [r2, #112]	; 0x70
 8003ffa:	e01c      	b.n	8004036 <HAL_RCC_OscConfig+0x32a>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	2b05      	cmp	r3, #5
 8004002:	d10c      	bne.n	800401e <HAL_RCC_OscConfig+0x312>
 8004004:	4b77      	ldr	r3, [pc, #476]	; (80041e4 <HAL_RCC_OscConfig+0x4d8>)
 8004006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004008:	4a76      	ldr	r2, [pc, #472]	; (80041e4 <HAL_RCC_OscConfig+0x4d8>)
 800400a:	f043 0304 	orr.w	r3, r3, #4
 800400e:	6713      	str	r3, [r2, #112]	; 0x70
 8004010:	4b74      	ldr	r3, [pc, #464]	; (80041e4 <HAL_RCC_OscConfig+0x4d8>)
 8004012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004014:	4a73      	ldr	r2, [pc, #460]	; (80041e4 <HAL_RCC_OscConfig+0x4d8>)
 8004016:	f043 0301 	orr.w	r3, r3, #1
 800401a:	6713      	str	r3, [r2, #112]	; 0x70
 800401c:	e00b      	b.n	8004036 <HAL_RCC_OscConfig+0x32a>
 800401e:	4b71      	ldr	r3, [pc, #452]	; (80041e4 <HAL_RCC_OscConfig+0x4d8>)
 8004020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004022:	4a70      	ldr	r2, [pc, #448]	; (80041e4 <HAL_RCC_OscConfig+0x4d8>)
 8004024:	f023 0301 	bic.w	r3, r3, #1
 8004028:	6713      	str	r3, [r2, #112]	; 0x70
 800402a:	4b6e      	ldr	r3, [pc, #440]	; (80041e4 <HAL_RCC_OscConfig+0x4d8>)
 800402c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402e:	4a6d      	ldr	r2, [pc, #436]	; (80041e4 <HAL_RCC_OscConfig+0x4d8>)
 8004030:	f023 0304 	bic.w	r3, r3, #4
 8004034:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d015      	beq.n	800406a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800403e:	f7fe fc25 	bl	800288c <HAL_GetTick>
 8004042:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004044:	e00a      	b.n	800405c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004046:	f7fe fc21 	bl	800288c <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	f241 3288 	movw	r2, #5000	; 0x1388
 8004054:	4293      	cmp	r3, r2
 8004056:	d901      	bls.n	800405c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e0bc      	b.n	80041d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800405c:	4b61      	ldr	r3, [pc, #388]	; (80041e4 <HAL_RCC_OscConfig+0x4d8>)
 800405e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d0ee      	beq.n	8004046 <HAL_RCC_OscConfig+0x33a>
 8004068:	e014      	b.n	8004094 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800406a:	f7fe fc0f 	bl	800288c <HAL_GetTick>
 800406e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004070:	e00a      	b.n	8004088 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004072:	f7fe fc0b 	bl	800288c <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004080:	4293      	cmp	r3, r2
 8004082:	d901      	bls.n	8004088 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e0a6      	b.n	80041d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004088:	4b56      	ldr	r3, [pc, #344]	; (80041e4 <HAL_RCC_OscConfig+0x4d8>)
 800408a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1ee      	bne.n	8004072 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004094:	7dfb      	ldrb	r3, [r7, #23]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d105      	bne.n	80040a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800409a:	4b52      	ldr	r3, [pc, #328]	; (80041e4 <HAL_RCC_OscConfig+0x4d8>)
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	4a51      	ldr	r2, [pc, #324]	; (80041e4 <HAL_RCC_OscConfig+0x4d8>)
 80040a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f000 8092 	beq.w	80041d4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040b0:	4b4c      	ldr	r3, [pc, #304]	; (80041e4 <HAL_RCC_OscConfig+0x4d8>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f003 030c 	and.w	r3, r3, #12
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d05c      	beq.n	8004176 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d141      	bne.n	8004148 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c4:	4b48      	ldr	r3, [pc, #288]	; (80041e8 <HAL_RCC_OscConfig+0x4dc>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ca:	f7fe fbdf 	bl	800288c <HAL_GetTick>
 80040ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040d0:	e008      	b.n	80040e4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040d2:	f7fe fbdb 	bl	800288c <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d901      	bls.n	80040e4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e078      	b.n	80041d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040e4:	4b3f      	ldr	r3, [pc, #252]	; (80041e4 <HAL_RCC_OscConfig+0x4d8>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1f0      	bne.n	80040d2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	69da      	ldr	r2, [r3, #28]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	431a      	orrs	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fe:	019b      	lsls	r3, r3, #6
 8004100:	431a      	orrs	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004106:	085b      	lsrs	r3, r3, #1
 8004108:	3b01      	subs	r3, #1
 800410a:	041b      	lsls	r3, r3, #16
 800410c:	431a      	orrs	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004112:	061b      	lsls	r3, r3, #24
 8004114:	4933      	ldr	r1, [pc, #204]	; (80041e4 <HAL_RCC_OscConfig+0x4d8>)
 8004116:	4313      	orrs	r3, r2
 8004118:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800411a:	4b33      	ldr	r3, [pc, #204]	; (80041e8 <HAL_RCC_OscConfig+0x4dc>)
 800411c:	2201      	movs	r2, #1
 800411e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004120:	f7fe fbb4 	bl	800288c <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004128:	f7fe fbb0 	bl	800288c <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e04d      	b.n	80041d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800413a:	4b2a      	ldr	r3, [pc, #168]	; (80041e4 <HAL_RCC_OscConfig+0x4d8>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d0f0      	beq.n	8004128 <HAL_RCC_OscConfig+0x41c>
 8004146:	e045      	b.n	80041d4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004148:	4b27      	ldr	r3, [pc, #156]	; (80041e8 <HAL_RCC_OscConfig+0x4dc>)
 800414a:	2200      	movs	r2, #0
 800414c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800414e:	f7fe fb9d 	bl	800288c <HAL_GetTick>
 8004152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004154:	e008      	b.n	8004168 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004156:	f7fe fb99 	bl	800288c <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d901      	bls.n	8004168 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e036      	b.n	80041d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004168:	4b1e      	ldr	r3, [pc, #120]	; (80041e4 <HAL_RCC_OscConfig+0x4d8>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1f0      	bne.n	8004156 <HAL_RCC_OscConfig+0x44a>
 8004174:	e02e      	b.n	80041d4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d101      	bne.n	8004182 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e029      	b.n	80041d6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004182:	4b18      	ldr	r3, [pc, #96]	; (80041e4 <HAL_RCC_OscConfig+0x4d8>)
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	429a      	cmp	r2, r3
 8004194:	d11c      	bne.n	80041d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d115      	bne.n	80041d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041aa:	4013      	ands	r3, r2
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d10d      	bne.n	80041d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80041be:	429a      	cmp	r2, r3
 80041c0:	d106      	bne.n	80041d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d001      	beq.n	80041d4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e000      	b.n	80041d6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3718      	adds	r7, #24
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	40007000 	.word	0x40007000
 80041e4:	40023800 	.word	0x40023800
 80041e8:	42470060 	.word	0x42470060

080041ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e0cc      	b.n	800439a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004200:	4b68      	ldr	r3, [pc, #416]	; (80043a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 030f 	and.w	r3, r3, #15
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	429a      	cmp	r2, r3
 800420c:	d90c      	bls.n	8004228 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800420e:	4b65      	ldr	r3, [pc, #404]	; (80043a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004210:	683a      	ldr	r2, [r7, #0]
 8004212:	b2d2      	uxtb	r2, r2
 8004214:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004216:	4b63      	ldr	r3, [pc, #396]	; (80043a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 030f 	and.w	r3, r3, #15
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	429a      	cmp	r2, r3
 8004222:	d001      	beq.n	8004228 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e0b8      	b.n	800439a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0302 	and.w	r3, r3, #2
 8004230:	2b00      	cmp	r3, #0
 8004232:	d020      	beq.n	8004276 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0304 	and.w	r3, r3, #4
 800423c:	2b00      	cmp	r3, #0
 800423e:	d005      	beq.n	800424c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004240:	4b59      	ldr	r3, [pc, #356]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	4a58      	ldr	r2, [pc, #352]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004246:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800424a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0308 	and.w	r3, r3, #8
 8004254:	2b00      	cmp	r3, #0
 8004256:	d005      	beq.n	8004264 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004258:	4b53      	ldr	r3, [pc, #332]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	4a52      	ldr	r2, [pc, #328]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 800425e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004262:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004264:	4b50      	ldr	r3, [pc, #320]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	494d      	ldr	r1, [pc, #308]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004272:	4313      	orrs	r3, r2
 8004274:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b00      	cmp	r3, #0
 8004280:	d044      	beq.n	800430c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d107      	bne.n	800429a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800428a:	4b47      	ldr	r3, [pc, #284]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d119      	bne.n	80042ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e07f      	b.n	800439a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d003      	beq.n	80042aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042a6:	2b03      	cmp	r3, #3
 80042a8:	d107      	bne.n	80042ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042aa:	4b3f      	ldr	r3, [pc, #252]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d109      	bne.n	80042ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e06f      	b.n	800439a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ba:	4b3b      	ldr	r3, [pc, #236]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e067      	b.n	800439a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042ca:	4b37      	ldr	r3, [pc, #220]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f023 0203 	bic.w	r2, r3, #3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	4934      	ldr	r1, [pc, #208]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042dc:	f7fe fad6 	bl	800288c <HAL_GetTick>
 80042e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042e2:	e00a      	b.n	80042fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042e4:	f7fe fad2 	bl	800288c <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e04f      	b.n	800439a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042fa:	4b2b      	ldr	r3, [pc, #172]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f003 020c 	and.w	r2, r3, #12
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	429a      	cmp	r2, r3
 800430a:	d1eb      	bne.n	80042e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800430c:	4b25      	ldr	r3, [pc, #148]	; (80043a4 <HAL_RCC_ClockConfig+0x1b8>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 030f 	and.w	r3, r3, #15
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	429a      	cmp	r2, r3
 8004318:	d20c      	bcs.n	8004334 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800431a:	4b22      	ldr	r3, [pc, #136]	; (80043a4 <HAL_RCC_ClockConfig+0x1b8>)
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	b2d2      	uxtb	r2, r2
 8004320:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004322:	4b20      	ldr	r3, [pc, #128]	; (80043a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 030f 	and.w	r3, r3, #15
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	429a      	cmp	r2, r3
 800432e:	d001      	beq.n	8004334 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e032      	b.n	800439a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	2b00      	cmp	r3, #0
 800433e:	d008      	beq.n	8004352 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004340:	4b19      	ldr	r3, [pc, #100]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	4916      	ldr	r1, [pc, #88]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 800434e:	4313      	orrs	r3, r2
 8004350:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0308 	and.w	r3, r3, #8
 800435a:	2b00      	cmp	r3, #0
 800435c:	d009      	beq.n	8004372 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800435e:	4b12      	ldr	r3, [pc, #72]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	490e      	ldr	r1, [pc, #56]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 800436e:	4313      	orrs	r3, r2
 8004370:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004372:	f000 f821 	bl	80043b8 <HAL_RCC_GetSysClockFreq>
 8004376:	4601      	mov	r1, r0
 8004378:	4b0b      	ldr	r3, [pc, #44]	; (80043a8 <HAL_RCC_ClockConfig+0x1bc>)
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	091b      	lsrs	r3, r3, #4
 800437e:	f003 030f 	and.w	r3, r3, #15
 8004382:	4a0a      	ldr	r2, [pc, #40]	; (80043ac <HAL_RCC_ClockConfig+0x1c0>)
 8004384:	5cd3      	ldrb	r3, [r2, r3]
 8004386:	fa21 f303 	lsr.w	r3, r1, r3
 800438a:	4a09      	ldr	r2, [pc, #36]	; (80043b0 <HAL_RCC_ClockConfig+0x1c4>)
 800438c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800438e:	4b09      	ldr	r3, [pc, #36]	; (80043b4 <HAL_RCC_ClockConfig+0x1c8>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4618      	mov	r0, r3
 8004394:	f7fe f882 	bl	800249c <HAL_InitTick>

  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	40023c00 	.word	0x40023c00
 80043a8:	40023800 	.word	0x40023800
 80043ac:	08009e10 	.word	0x08009e10
 80043b0:	20000000 	.word	0x20000000
 80043b4:	20000004 	.word	0x20000004

080043b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043be:	2300      	movs	r3, #0
 80043c0:	607b      	str	r3, [r7, #4]
 80043c2:	2300      	movs	r3, #0
 80043c4:	60fb      	str	r3, [r7, #12]
 80043c6:	2300      	movs	r3, #0
 80043c8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80043ca:	2300      	movs	r3, #0
 80043cc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043ce:	4b63      	ldr	r3, [pc, #396]	; (800455c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f003 030c 	and.w	r3, r3, #12
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	d007      	beq.n	80043ea <HAL_RCC_GetSysClockFreq+0x32>
 80043da:	2b08      	cmp	r3, #8
 80043dc:	d008      	beq.n	80043f0 <HAL_RCC_GetSysClockFreq+0x38>
 80043de:	2b00      	cmp	r3, #0
 80043e0:	f040 80b4 	bne.w	800454c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043e4:	4b5e      	ldr	r3, [pc, #376]	; (8004560 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80043e6:	60bb      	str	r3, [r7, #8]
       break;
 80043e8:	e0b3      	b.n	8004552 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043ea:	4b5e      	ldr	r3, [pc, #376]	; (8004564 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80043ec:	60bb      	str	r3, [r7, #8]
      break;
 80043ee:	e0b0      	b.n	8004552 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043f0:	4b5a      	ldr	r3, [pc, #360]	; (800455c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043fa:	4b58      	ldr	r3, [pc, #352]	; (800455c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d04a      	beq.n	800449c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004406:	4b55      	ldr	r3, [pc, #340]	; (800455c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	099b      	lsrs	r3, r3, #6
 800440c:	f04f 0400 	mov.w	r4, #0
 8004410:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004414:	f04f 0200 	mov.w	r2, #0
 8004418:	ea03 0501 	and.w	r5, r3, r1
 800441c:	ea04 0602 	and.w	r6, r4, r2
 8004420:	4629      	mov	r1, r5
 8004422:	4632      	mov	r2, r6
 8004424:	f04f 0300 	mov.w	r3, #0
 8004428:	f04f 0400 	mov.w	r4, #0
 800442c:	0154      	lsls	r4, r2, #5
 800442e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004432:	014b      	lsls	r3, r1, #5
 8004434:	4619      	mov	r1, r3
 8004436:	4622      	mov	r2, r4
 8004438:	1b49      	subs	r1, r1, r5
 800443a:	eb62 0206 	sbc.w	r2, r2, r6
 800443e:	f04f 0300 	mov.w	r3, #0
 8004442:	f04f 0400 	mov.w	r4, #0
 8004446:	0194      	lsls	r4, r2, #6
 8004448:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800444c:	018b      	lsls	r3, r1, #6
 800444e:	1a5b      	subs	r3, r3, r1
 8004450:	eb64 0402 	sbc.w	r4, r4, r2
 8004454:	f04f 0100 	mov.w	r1, #0
 8004458:	f04f 0200 	mov.w	r2, #0
 800445c:	00e2      	lsls	r2, r4, #3
 800445e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004462:	00d9      	lsls	r1, r3, #3
 8004464:	460b      	mov	r3, r1
 8004466:	4614      	mov	r4, r2
 8004468:	195b      	adds	r3, r3, r5
 800446a:	eb44 0406 	adc.w	r4, r4, r6
 800446e:	f04f 0100 	mov.w	r1, #0
 8004472:	f04f 0200 	mov.w	r2, #0
 8004476:	0262      	lsls	r2, r4, #9
 8004478:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800447c:	0259      	lsls	r1, r3, #9
 800447e:	460b      	mov	r3, r1
 8004480:	4614      	mov	r4, r2
 8004482:	4618      	mov	r0, r3
 8004484:	4621      	mov	r1, r4
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f04f 0400 	mov.w	r4, #0
 800448c:	461a      	mov	r2, r3
 800448e:	4623      	mov	r3, r4
 8004490:	f7fc fb62 	bl	8000b58 <__aeabi_uldivmod>
 8004494:	4603      	mov	r3, r0
 8004496:	460c      	mov	r4, r1
 8004498:	60fb      	str	r3, [r7, #12]
 800449a:	e049      	b.n	8004530 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800449c:	4b2f      	ldr	r3, [pc, #188]	; (800455c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	099b      	lsrs	r3, r3, #6
 80044a2:	f04f 0400 	mov.w	r4, #0
 80044a6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80044aa:	f04f 0200 	mov.w	r2, #0
 80044ae:	ea03 0501 	and.w	r5, r3, r1
 80044b2:	ea04 0602 	and.w	r6, r4, r2
 80044b6:	4629      	mov	r1, r5
 80044b8:	4632      	mov	r2, r6
 80044ba:	f04f 0300 	mov.w	r3, #0
 80044be:	f04f 0400 	mov.w	r4, #0
 80044c2:	0154      	lsls	r4, r2, #5
 80044c4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80044c8:	014b      	lsls	r3, r1, #5
 80044ca:	4619      	mov	r1, r3
 80044cc:	4622      	mov	r2, r4
 80044ce:	1b49      	subs	r1, r1, r5
 80044d0:	eb62 0206 	sbc.w	r2, r2, r6
 80044d4:	f04f 0300 	mov.w	r3, #0
 80044d8:	f04f 0400 	mov.w	r4, #0
 80044dc:	0194      	lsls	r4, r2, #6
 80044de:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80044e2:	018b      	lsls	r3, r1, #6
 80044e4:	1a5b      	subs	r3, r3, r1
 80044e6:	eb64 0402 	sbc.w	r4, r4, r2
 80044ea:	f04f 0100 	mov.w	r1, #0
 80044ee:	f04f 0200 	mov.w	r2, #0
 80044f2:	00e2      	lsls	r2, r4, #3
 80044f4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80044f8:	00d9      	lsls	r1, r3, #3
 80044fa:	460b      	mov	r3, r1
 80044fc:	4614      	mov	r4, r2
 80044fe:	195b      	adds	r3, r3, r5
 8004500:	eb44 0406 	adc.w	r4, r4, r6
 8004504:	f04f 0100 	mov.w	r1, #0
 8004508:	f04f 0200 	mov.w	r2, #0
 800450c:	02a2      	lsls	r2, r4, #10
 800450e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004512:	0299      	lsls	r1, r3, #10
 8004514:	460b      	mov	r3, r1
 8004516:	4614      	mov	r4, r2
 8004518:	4618      	mov	r0, r3
 800451a:	4621      	mov	r1, r4
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f04f 0400 	mov.w	r4, #0
 8004522:	461a      	mov	r2, r3
 8004524:	4623      	mov	r3, r4
 8004526:	f7fc fb17 	bl	8000b58 <__aeabi_uldivmod>
 800452a:	4603      	mov	r3, r0
 800452c:	460c      	mov	r4, r1
 800452e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004530:	4b0a      	ldr	r3, [pc, #40]	; (800455c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	0c1b      	lsrs	r3, r3, #16
 8004536:	f003 0303 	and.w	r3, r3, #3
 800453a:	3301      	adds	r3, #1
 800453c:	005b      	lsls	r3, r3, #1
 800453e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	fbb2 f3f3 	udiv	r3, r2, r3
 8004548:	60bb      	str	r3, [r7, #8]
      break;
 800454a:	e002      	b.n	8004552 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800454c:	4b04      	ldr	r3, [pc, #16]	; (8004560 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800454e:	60bb      	str	r3, [r7, #8]
      break;
 8004550:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004552:	68bb      	ldr	r3, [r7, #8]
}
 8004554:	4618      	mov	r0, r3
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800455c:	40023800 	.word	0x40023800
 8004560:	00f42400 	.word	0x00f42400
 8004564:	007a1200 	.word	0x007a1200

08004568 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004568:	b480      	push	{r7}
 800456a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800456c:	4b03      	ldr	r3, [pc, #12]	; (800457c <HAL_RCC_GetHCLKFreq+0x14>)
 800456e:	681b      	ldr	r3, [r3, #0]
}
 8004570:	4618      	mov	r0, r3
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	20000000 	.word	0x20000000

08004580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004584:	f7ff fff0 	bl	8004568 <HAL_RCC_GetHCLKFreq>
 8004588:	4601      	mov	r1, r0
 800458a:	4b05      	ldr	r3, [pc, #20]	; (80045a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	0a9b      	lsrs	r3, r3, #10
 8004590:	f003 0307 	and.w	r3, r3, #7
 8004594:	4a03      	ldr	r2, [pc, #12]	; (80045a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004596:	5cd3      	ldrb	r3, [r2, r3]
 8004598:	fa21 f303 	lsr.w	r3, r1, r3
}
 800459c:	4618      	mov	r0, r3
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	40023800 	.word	0x40023800
 80045a4:	08009e20 	.word	0x08009e20

080045a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80045ac:	f7ff ffdc 	bl	8004568 <HAL_RCC_GetHCLKFreq>
 80045b0:	4601      	mov	r1, r0
 80045b2:	4b05      	ldr	r3, [pc, #20]	; (80045c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	0b5b      	lsrs	r3, r3, #13
 80045b8:	f003 0307 	and.w	r3, r3, #7
 80045bc:	4a03      	ldr	r2, [pc, #12]	; (80045cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80045be:	5cd3      	ldrb	r3, [r2, r3]
 80045c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	40023800 	.word	0x40023800
 80045cc:	08009e20 	.word	0x08009e20

080045d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	220f      	movs	r2, #15
 80045de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80045e0:	4b12      	ldr	r3, [pc, #72]	; (800462c <HAL_RCC_GetClockConfig+0x5c>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f003 0203 	and.w	r2, r3, #3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80045ec:	4b0f      	ldr	r3, [pc, #60]	; (800462c <HAL_RCC_GetClockConfig+0x5c>)
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80045f8:	4b0c      	ldr	r3, [pc, #48]	; (800462c <HAL_RCC_GetClockConfig+0x5c>)
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004604:	4b09      	ldr	r3, [pc, #36]	; (800462c <HAL_RCC_GetClockConfig+0x5c>)
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	08db      	lsrs	r3, r3, #3
 800460a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004612:	4b07      	ldr	r3, [pc, #28]	; (8004630 <HAL_RCC_GetClockConfig+0x60>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 020f 	and.w	r2, r3, #15
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	601a      	str	r2, [r3, #0]
}
 800461e:	bf00      	nop
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	40023800 	.word	0x40023800
 8004630:	40023c00 	.word	0x40023c00

08004634 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e01d      	b.n	8004682 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d106      	bne.n	8004660 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f815 	bl	800468a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2202      	movs	r2, #2
 8004664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	3304      	adds	r3, #4
 8004670:	4619      	mov	r1, r3
 8004672:	4610      	mov	r0, r2
 8004674:	f000 f968 	bl	8004948 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3708      	adds	r7, #8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800468a:	b480      	push	{r7}
 800468c:	b083      	sub	sp, #12
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004692:	bf00      	nop
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr

0800469e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800469e:	b480      	push	{r7}
 80046a0:	b085      	sub	sp, #20
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68da      	ldr	r2, [r3, #12]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f042 0201 	orr.w	r2, r2, #1
 80046b4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f003 0307 	and.w	r3, r3, #7
 80046c0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2b06      	cmp	r3, #6
 80046c6:	d007      	beq.n	80046d8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f042 0201 	orr.w	r2, r2, #1
 80046d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3714      	adds	r7, #20
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr

080046e6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b082      	sub	sp, #8
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d122      	bne.n	8004742 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b02      	cmp	r3, #2
 8004708:	d11b      	bne.n	8004742 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f06f 0202 	mvn.w	r2, #2
 8004712:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	f003 0303 	and.w	r3, r3, #3
 8004724:	2b00      	cmp	r3, #0
 8004726:	d003      	beq.n	8004730 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 f8ee 	bl	800490a <HAL_TIM_IC_CaptureCallback>
 800472e:	e005      	b.n	800473c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 f8e0 	bl	80048f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f8f1 	bl	800491e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	f003 0304 	and.w	r3, r3, #4
 800474c:	2b04      	cmp	r3, #4
 800474e:	d122      	bne.n	8004796 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	f003 0304 	and.w	r3, r3, #4
 800475a:	2b04      	cmp	r3, #4
 800475c:	d11b      	bne.n	8004796 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f06f 0204 	mvn.w	r2, #4
 8004766:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2202      	movs	r2, #2
 800476c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004778:	2b00      	cmp	r3, #0
 800477a:	d003      	beq.n	8004784 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f8c4 	bl	800490a <HAL_TIM_IC_CaptureCallback>
 8004782:	e005      	b.n	8004790 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f000 f8b6 	bl	80048f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f8c7 	bl	800491e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	f003 0308 	and.w	r3, r3, #8
 80047a0:	2b08      	cmp	r3, #8
 80047a2:	d122      	bne.n	80047ea <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	f003 0308 	and.w	r3, r3, #8
 80047ae:	2b08      	cmp	r3, #8
 80047b0:	d11b      	bne.n	80047ea <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f06f 0208 	mvn.w	r2, #8
 80047ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2204      	movs	r2, #4
 80047c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	69db      	ldr	r3, [r3, #28]
 80047c8:	f003 0303 	and.w	r3, r3, #3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d003      	beq.n	80047d8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 f89a 	bl	800490a <HAL_TIM_IC_CaptureCallback>
 80047d6:	e005      	b.n	80047e4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 f88c 	bl	80048f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 f89d 	bl	800491e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	f003 0310 	and.w	r3, r3, #16
 80047f4:	2b10      	cmp	r3, #16
 80047f6:	d122      	bne.n	800483e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	f003 0310 	and.w	r3, r3, #16
 8004802:	2b10      	cmp	r3, #16
 8004804:	d11b      	bne.n	800483e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f06f 0210 	mvn.w	r2, #16
 800480e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2208      	movs	r2, #8
 8004814:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	69db      	ldr	r3, [r3, #28]
 800481c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004820:	2b00      	cmp	r3, #0
 8004822:	d003      	beq.n	800482c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 f870 	bl	800490a <HAL_TIM_IC_CaptureCallback>
 800482a:	e005      	b.n	8004838 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 f862 	bl	80048f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 f873 	bl	800491e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	f003 0301 	and.w	r3, r3, #1
 8004848:	2b01      	cmp	r3, #1
 800484a:	d10e      	bne.n	800486a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b01      	cmp	r3, #1
 8004858:	d107      	bne.n	800486a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f06f 0201 	mvn.w	r2, #1
 8004862:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f7fd fda5 	bl	80023b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004874:	2b80      	cmp	r3, #128	; 0x80
 8004876:	d10e      	bne.n	8004896 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004882:	2b80      	cmp	r3, #128	; 0x80
 8004884:	d107      	bne.n	8004896 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800488e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 f8e3 	bl	8004a5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a0:	2b40      	cmp	r3, #64	; 0x40
 80048a2:	d10e      	bne.n	80048c2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ae:	2b40      	cmp	r3, #64	; 0x40
 80048b0:	d107      	bne.n	80048c2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 f838 	bl	8004932 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	f003 0320 	and.w	r3, r3, #32
 80048cc:	2b20      	cmp	r3, #32
 80048ce:	d10e      	bne.n	80048ee <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	f003 0320 	and.w	r3, r3, #32
 80048da:	2b20      	cmp	r3, #32
 80048dc:	d107      	bne.n	80048ee <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f06f 0220 	mvn.w	r2, #32
 80048e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 f8ad 	bl	8004a48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048ee:	bf00      	nop
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}

080048f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b083      	sub	sp, #12
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048fe:	bf00      	nop
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800490a:	b480      	push	{r7}
 800490c:	b083      	sub	sp, #12
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004912:	bf00      	nop
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800491e:	b480      	push	{r7}
 8004920:	b083      	sub	sp, #12
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004926:	bf00      	nop
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr

08004932 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004932:	b480      	push	{r7}
 8004934:	b083      	sub	sp, #12
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
	...

08004948 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a34      	ldr	r2, [pc, #208]	; (8004a2c <TIM_Base_SetConfig+0xe4>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d00f      	beq.n	8004980 <TIM_Base_SetConfig+0x38>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004966:	d00b      	beq.n	8004980 <TIM_Base_SetConfig+0x38>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a31      	ldr	r2, [pc, #196]	; (8004a30 <TIM_Base_SetConfig+0xe8>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d007      	beq.n	8004980 <TIM_Base_SetConfig+0x38>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a30      	ldr	r2, [pc, #192]	; (8004a34 <TIM_Base_SetConfig+0xec>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d003      	beq.n	8004980 <TIM_Base_SetConfig+0x38>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a2f      	ldr	r2, [pc, #188]	; (8004a38 <TIM_Base_SetConfig+0xf0>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d108      	bne.n	8004992 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004986:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	4313      	orrs	r3, r2
 8004990:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a25      	ldr	r2, [pc, #148]	; (8004a2c <TIM_Base_SetConfig+0xe4>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d01b      	beq.n	80049d2 <TIM_Base_SetConfig+0x8a>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049a0:	d017      	beq.n	80049d2 <TIM_Base_SetConfig+0x8a>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a22      	ldr	r2, [pc, #136]	; (8004a30 <TIM_Base_SetConfig+0xe8>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d013      	beq.n	80049d2 <TIM_Base_SetConfig+0x8a>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a21      	ldr	r2, [pc, #132]	; (8004a34 <TIM_Base_SetConfig+0xec>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d00f      	beq.n	80049d2 <TIM_Base_SetConfig+0x8a>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a20      	ldr	r2, [pc, #128]	; (8004a38 <TIM_Base_SetConfig+0xf0>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d00b      	beq.n	80049d2 <TIM_Base_SetConfig+0x8a>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a1f      	ldr	r2, [pc, #124]	; (8004a3c <TIM_Base_SetConfig+0xf4>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d007      	beq.n	80049d2 <TIM_Base_SetConfig+0x8a>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a1e      	ldr	r2, [pc, #120]	; (8004a40 <TIM_Base_SetConfig+0xf8>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d003      	beq.n	80049d2 <TIM_Base_SetConfig+0x8a>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a1d      	ldr	r2, [pc, #116]	; (8004a44 <TIM_Base_SetConfig+0xfc>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d108      	bne.n	80049e4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	689a      	ldr	r2, [r3, #8]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a08      	ldr	r2, [pc, #32]	; (8004a2c <TIM_Base_SetConfig+0xe4>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d103      	bne.n	8004a18 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	691a      	ldr	r2, [r3, #16]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	615a      	str	r2, [r3, #20]
}
 8004a1e:	bf00      	nop
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	40010000 	.word	0x40010000
 8004a30:	40000400 	.word	0x40000400
 8004a34:	40000800 	.word	0x40000800
 8004a38:	40000c00 	.word	0x40000c00
 8004a3c:	40014000 	.word	0x40014000
 8004a40:	40014400 	.word	0x40014400
 8004a44:	40014800 	.word	0x40014800

08004a48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d101      	bne.n	8004a82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e03f      	b.n	8004b02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d106      	bne.n	8004a9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f7fd fe1c 	bl	80026d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2224      	movs	r2, #36	; 0x24
 8004aa0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68da      	ldr	r2, [r3, #12]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ab2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 f9b1 	bl	8004e1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	691a      	ldr	r2, [r3, #16]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ac8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	695a      	ldr	r2, [r3, #20]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ad8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68da      	ldr	r2, [r3, #12]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ae8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2220      	movs	r2, #32
 8004af4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2220      	movs	r2, #32
 8004afc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3708      	adds	r7, #8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b088      	sub	sp, #32
 8004b0e:	af02      	add	r7, sp, #8
 8004b10:	60f8      	str	r0, [r7, #12]
 8004b12:	60b9      	str	r1, [r7, #8]
 8004b14:	603b      	str	r3, [r7, #0]
 8004b16:	4613      	mov	r3, r2
 8004b18:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b20      	cmp	r3, #32
 8004b28:	f040 8083 	bne.w	8004c32 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d002      	beq.n	8004b38 <HAL_UART_Transmit+0x2e>
 8004b32:	88fb      	ldrh	r3, [r7, #6]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d101      	bne.n	8004b3c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e07b      	b.n	8004c34 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d101      	bne.n	8004b4a <HAL_UART_Transmit+0x40>
 8004b46:	2302      	movs	r3, #2
 8004b48:	e074      	b.n	8004c34 <HAL_UART_Transmit+0x12a>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2221      	movs	r2, #33	; 0x21
 8004b5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004b60:	f7fd fe94 	bl	800288c <HAL_GetTick>
 8004b64:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	88fa      	ldrh	r2, [r7, #6]
 8004b6a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	88fa      	ldrh	r2, [r7, #6]
 8004b70:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004b7a:	e042      	b.n	8004c02 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	3b01      	subs	r3, #1
 8004b84:	b29a      	uxth	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b92:	d122      	bne.n	8004bda <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	9300      	str	r3, [sp, #0]
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	2180      	movs	r1, #128	; 0x80
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f000 f8f2 	bl	8004d88 <UART_WaitOnFlagUntilTimeout>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e042      	b.n	8004c34 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	881b      	ldrh	r3, [r3, #0]
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bc0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d103      	bne.n	8004bd2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	3302      	adds	r3, #2
 8004bce:	60bb      	str	r3, [r7, #8]
 8004bd0:	e017      	b.n	8004c02 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	60bb      	str	r3, [r7, #8]
 8004bd8:	e013      	b.n	8004c02 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	9300      	str	r3, [sp, #0]
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2200      	movs	r2, #0
 8004be2:	2180      	movs	r1, #128	; 0x80
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 f8cf 	bl	8004d88 <UART_WaitOnFlagUntilTimeout>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e01f      	b.n	8004c34 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	1c5a      	adds	r2, r3, #1
 8004bf8:	60ba      	str	r2, [r7, #8]
 8004bfa:	781a      	ldrb	r2, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1b7      	bne.n	8004b7c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	2200      	movs	r2, #0
 8004c14:	2140      	movs	r1, #64	; 0x40
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f000 f8b6 	bl	8004d88 <UART_WaitOnFlagUntilTimeout>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e006      	b.n	8004c34 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2220      	movs	r2, #32
 8004c2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	e000      	b.n	8004c34 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004c32:	2302      	movs	r3, #2
  }
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3718      	adds	r7, #24
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b088      	sub	sp, #32
 8004c40:	af02      	add	r7, sp, #8
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	603b      	str	r3, [r7, #0]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	2b20      	cmp	r3, #32
 8004c5a:	f040 8090 	bne.w	8004d7e <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d002      	beq.n	8004c6a <HAL_UART_Receive+0x2e>
 8004c64:	88fb      	ldrh	r3, [r7, #6]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e088      	b.n	8004d80 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d101      	bne.n	8004c7c <HAL_UART_Receive+0x40>
 8004c78:	2302      	movs	r3, #2
 8004c7a:	e081      	b.n	8004d80 <HAL_UART_Receive+0x144>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2222      	movs	r2, #34	; 0x22
 8004c8e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004c92:	f7fd fdfb 	bl	800288c <HAL_GetTick>
 8004c96:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	88fa      	ldrh	r2, [r7, #6]
 8004c9c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	88fa      	ldrh	r2, [r7, #6]
 8004ca2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004cac:	e05c      	b.n	8004d68 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cc4:	d12b      	bne.n	8004d1e <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	2120      	movs	r1, #32
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f000 f859 	bl	8004d88 <UART_WaitOnFlagUntilTimeout>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d001      	beq.n	8004ce0 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e04f      	b.n	8004d80 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d10c      	bne.n	8004d06 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	3302      	adds	r3, #2
 8004d02:	60bb      	str	r3, [r7, #8]
 8004d04:	e030      	b.n	8004d68 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	3301      	adds	r3, #1
 8004d1a:	60bb      	str	r3, [r7, #8]
 8004d1c:	e024      	b.n	8004d68 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	9300      	str	r3, [sp, #0]
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	2200      	movs	r2, #0
 8004d26:	2120      	movs	r1, #32
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	f000 f82d 	bl	8004d88 <UART_WaitOnFlagUntilTimeout>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d001      	beq.n	8004d38 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e023      	b.n	8004d80 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d108      	bne.n	8004d52 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6859      	ldr	r1, [r3, #4]
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	1c5a      	adds	r2, r3, #1
 8004d4a:	60ba      	str	r2, [r7, #8]
 8004d4c:	b2ca      	uxtb	r2, r1
 8004d4e:	701a      	strb	r2, [r3, #0]
 8004d50:	e00a      	b.n	8004d68 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	b2da      	uxtb	r2, r3
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	1c59      	adds	r1, r3, #1
 8004d5e:	60b9      	str	r1, [r7, #8]
 8004d60:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d64:	b2d2      	uxtb	r2, r2
 8004d66:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d19d      	bne.n	8004cae <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2220      	movs	r2, #32
 8004d76:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	e000      	b.n	8004d80 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8004d7e:	2302      	movs	r3, #2
  }
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3718      	adds	r7, #24
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	603b      	str	r3, [r7, #0]
 8004d94:	4613      	mov	r3, r2
 8004d96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d98:	e02c      	b.n	8004df4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004da0:	d028      	beq.n	8004df4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d007      	beq.n	8004db8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004da8:	f7fd fd70 	bl	800288c <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	69ba      	ldr	r2, [r7, #24]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d21d      	bcs.n	8004df4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68da      	ldr	r2, [r3, #12]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004dc6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	695a      	ldr	r2, [r3, #20]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f022 0201 	bic.w	r2, r2, #1
 8004dd6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2220      	movs	r2, #32
 8004ddc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2220      	movs	r2, #32
 8004de4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e00f      	b.n	8004e14 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	68ba      	ldr	r2, [r7, #8]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	bf0c      	ite	eq
 8004e04:	2301      	moveq	r3, #1
 8004e06:	2300      	movne	r3, #0
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	79fb      	ldrb	r3, [r7, #7]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d0c3      	beq.n	8004d9a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e20:	b085      	sub	sp, #20
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	68da      	ldr	r2, [r3, #12]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	689a      	ldr	r2, [r3, #8]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	431a      	orrs	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	69db      	ldr	r3, [r3, #28]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004e5e:	f023 030c 	bic.w	r3, r3, #12
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	6812      	ldr	r2, [r2, #0]
 8004e66:	68f9      	ldr	r1, [r7, #12]
 8004e68:	430b      	orrs	r3, r1
 8004e6a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	699a      	ldr	r2, [r3, #24]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	69db      	ldr	r3, [r3, #28]
 8004e86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e8a:	f040 818b 	bne.w	80051a4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4ac1      	ldr	r2, [pc, #772]	; (8005198 <UART_SetConfig+0x37c>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d005      	beq.n	8004ea4 <UART_SetConfig+0x88>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4abf      	ldr	r2, [pc, #764]	; (800519c <UART_SetConfig+0x380>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	f040 80bd 	bne.w	800501e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ea4:	f7ff fb80 	bl	80045a8 <HAL_RCC_GetPCLK2Freq>
 8004ea8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	461d      	mov	r5, r3
 8004eae:	f04f 0600 	mov.w	r6, #0
 8004eb2:	46a8      	mov	r8, r5
 8004eb4:	46b1      	mov	r9, r6
 8004eb6:	eb18 0308 	adds.w	r3, r8, r8
 8004eba:	eb49 0409 	adc.w	r4, r9, r9
 8004ebe:	4698      	mov	r8, r3
 8004ec0:	46a1      	mov	r9, r4
 8004ec2:	eb18 0805 	adds.w	r8, r8, r5
 8004ec6:	eb49 0906 	adc.w	r9, r9, r6
 8004eca:	f04f 0100 	mov.w	r1, #0
 8004ece:	f04f 0200 	mov.w	r2, #0
 8004ed2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004ed6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004eda:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004ede:	4688      	mov	r8, r1
 8004ee0:	4691      	mov	r9, r2
 8004ee2:	eb18 0005 	adds.w	r0, r8, r5
 8004ee6:	eb49 0106 	adc.w	r1, r9, r6
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	461d      	mov	r5, r3
 8004ef0:	f04f 0600 	mov.w	r6, #0
 8004ef4:	196b      	adds	r3, r5, r5
 8004ef6:	eb46 0406 	adc.w	r4, r6, r6
 8004efa:	461a      	mov	r2, r3
 8004efc:	4623      	mov	r3, r4
 8004efe:	f7fb fe2b 	bl	8000b58 <__aeabi_uldivmod>
 8004f02:	4603      	mov	r3, r0
 8004f04:	460c      	mov	r4, r1
 8004f06:	461a      	mov	r2, r3
 8004f08:	4ba5      	ldr	r3, [pc, #660]	; (80051a0 <UART_SetConfig+0x384>)
 8004f0a:	fba3 2302 	umull	r2, r3, r3, r2
 8004f0e:	095b      	lsrs	r3, r3, #5
 8004f10:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	461d      	mov	r5, r3
 8004f18:	f04f 0600 	mov.w	r6, #0
 8004f1c:	46a9      	mov	r9, r5
 8004f1e:	46b2      	mov	sl, r6
 8004f20:	eb19 0309 	adds.w	r3, r9, r9
 8004f24:	eb4a 040a 	adc.w	r4, sl, sl
 8004f28:	4699      	mov	r9, r3
 8004f2a:	46a2      	mov	sl, r4
 8004f2c:	eb19 0905 	adds.w	r9, r9, r5
 8004f30:	eb4a 0a06 	adc.w	sl, sl, r6
 8004f34:	f04f 0100 	mov.w	r1, #0
 8004f38:	f04f 0200 	mov.w	r2, #0
 8004f3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f40:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f44:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f48:	4689      	mov	r9, r1
 8004f4a:	4692      	mov	sl, r2
 8004f4c:	eb19 0005 	adds.w	r0, r9, r5
 8004f50:	eb4a 0106 	adc.w	r1, sl, r6
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	461d      	mov	r5, r3
 8004f5a:	f04f 0600 	mov.w	r6, #0
 8004f5e:	196b      	adds	r3, r5, r5
 8004f60:	eb46 0406 	adc.w	r4, r6, r6
 8004f64:	461a      	mov	r2, r3
 8004f66:	4623      	mov	r3, r4
 8004f68:	f7fb fdf6 	bl	8000b58 <__aeabi_uldivmod>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	460c      	mov	r4, r1
 8004f70:	461a      	mov	r2, r3
 8004f72:	4b8b      	ldr	r3, [pc, #556]	; (80051a0 <UART_SetConfig+0x384>)
 8004f74:	fba3 1302 	umull	r1, r3, r3, r2
 8004f78:	095b      	lsrs	r3, r3, #5
 8004f7a:	2164      	movs	r1, #100	; 0x64
 8004f7c:	fb01 f303 	mul.w	r3, r1, r3
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	00db      	lsls	r3, r3, #3
 8004f84:	3332      	adds	r3, #50	; 0x32
 8004f86:	4a86      	ldr	r2, [pc, #536]	; (80051a0 <UART_SetConfig+0x384>)
 8004f88:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8c:	095b      	lsrs	r3, r3, #5
 8004f8e:	005b      	lsls	r3, r3, #1
 8004f90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f94:	4498      	add	r8, r3
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	461d      	mov	r5, r3
 8004f9a:	f04f 0600 	mov.w	r6, #0
 8004f9e:	46a9      	mov	r9, r5
 8004fa0:	46b2      	mov	sl, r6
 8004fa2:	eb19 0309 	adds.w	r3, r9, r9
 8004fa6:	eb4a 040a 	adc.w	r4, sl, sl
 8004faa:	4699      	mov	r9, r3
 8004fac:	46a2      	mov	sl, r4
 8004fae:	eb19 0905 	adds.w	r9, r9, r5
 8004fb2:	eb4a 0a06 	adc.w	sl, sl, r6
 8004fb6:	f04f 0100 	mov.w	r1, #0
 8004fba:	f04f 0200 	mov.w	r2, #0
 8004fbe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fc2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004fc6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004fca:	4689      	mov	r9, r1
 8004fcc:	4692      	mov	sl, r2
 8004fce:	eb19 0005 	adds.w	r0, r9, r5
 8004fd2:	eb4a 0106 	adc.w	r1, sl, r6
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	461d      	mov	r5, r3
 8004fdc:	f04f 0600 	mov.w	r6, #0
 8004fe0:	196b      	adds	r3, r5, r5
 8004fe2:	eb46 0406 	adc.w	r4, r6, r6
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	4623      	mov	r3, r4
 8004fea:	f7fb fdb5 	bl	8000b58 <__aeabi_uldivmod>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	460c      	mov	r4, r1
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	4b6a      	ldr	r3, [pc, #424]	; (80051a0 <UART_SetConfig+0x384>)
 8004ff6:	fba3 1302 	umull	r1, r3, r3, r2
 8004ffa:	095b      	lsrs	r3, r3, #5
 8004ffc:	2164      	movs	r1, #100	; 0x64
 8004ffe:	fb01 f303 	mul.w	r3, r1, r3
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	00db      	lsls	r3, r3, #3
 8005006:	3332      	adds	r3, #50	; 0x32
 8005008:	4a65      	ldr	r2, [pc, #404]	; (80051a0 <UART_SetConfig+0x384>)
 800500a:	fba2 2303 	umull	r2, r3, r2, r3
 800500e:	095b      	lsrs	r3, r3, #5
 8005010:	f003 0207 	and.w	r2, r3, #7
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4442      	add	r2, r8
 800501a:	609a      	str	r2, [r3, #8]
 800501c:	e26f      	b.n	80054fe <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800501e:	f7ff faaf 	bl	8004580 <HAL_RCC_GetPCLK1Freq>
 8005022:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	461d      	mov	r5, r3
 8005028:	f04f 0600 	mov.w	r6, #0
 800502c:	46a8      	mov	r8, r5
 800502e:	46b1      	mov	r9, r6
 8005030:	eb18 0308 	adds.w	r3, r8, r8
 8005034:	eb49 0409 	adc.w	r4, r9, r9
 8005038:	4698      	mov	r8, r3
 800503a:	46a1      	mov	r9, r4
 800503c:	eb18 0805 	adds.w	r8, r8, r5
 8005040:	eb49 0906 	adc.w	r9, r9, r6
 8005044:	f04f 0100 	mov.w	r1, #0
 8005048:	f04f 0200 	mov.w	r2, #0
 800504c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005050:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005054:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005058:	4688      	mov	r8, r1
 800505a:	4691      	mov	r9, r2
 800505c:	eb18 0005 	adds.w	r0, r8, r5
 8005060:	eb49 0106 	adc.w	r1, r9, r6
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	461d      	mov	r5, r3
 800506a:	f04f 0600 	mov.w	r6, #0
 800506e:	196b      	adds	r3, r5, r5
 8005070:	eb46 0406 	adc.w	r4, r6, r6
 8005074:	461a      	mov	r2, r3
 8005076:	4623      	mov	r3, r4
 8005078:	f7fb fd6e 	bl	8000b58 <__aeabi_uldivmod>
 800507c:	4603      	mov	r3, r0
 800507e:	460c      	mov	r4, r1
 8005080:	461a      	mov	r2, r3
 8005082:	4b47      	ldr	r3, [pc, #284]	; (80051a0 <UART_SetConfig+0x384>)
 8005084:	fba3 2302 	umull	r2, r3, r3, r2
 8005088:	095b      	lsrs	r3, r3, #5
 800508a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	461d      	mov	r5, r3
 8005092:	f04f 0600 	mov.w	r6, #0
 8005096:	46a9      	mov	r9, r5
 8005098:	46b2      	mov	sl, r6
 800509a:	eb19 0309 	adds.w	r3, r9, r9
 800509e:	eb4a 040a 	adc.w	r4, sl, sl
 80050a2:	4699      	mov	r9, r3
 80050a4:	46a2      	mov	sl, r4
 80050a6:	eb19 0905 	adds.w	r9, r9, r5
 80050aa:	eb4a 0a06 	adc.w	sl, sl, r6
 80050ae:	f04f 0100 	mov.w	r1, #0
 80050b2:	f04f 0200 	mov.w	r2, #0
 80050b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80050be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80050c2:	4689      	mov	r9, r1
 80050c4:	4692      	mov	sl, r2
 80050c6:	eb19 0005 	adds.w	r0, r9, r5
 80050ca:	eb4a 0106 	adc.w	r1, sl, r6
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	461d      	mov	r5, r3
 80050d4:	f04f 0600 	mov.w	r6, #0
 80050d8:	196b      	adds	r3, r5, r5
 80050da:	eb46 0406 	adc.w	r4, r6, r6
 80050de:	461a      	mov	r2, r3
 80050e0:	4623      	mov	r3, r4
 80050e2:	f7fb fd39 	bl	8000b58 <__aeabi_uldivmod>
 80050e6:	4603      	mov	r3, r0
 80050e8:	460c      	mov	r4, r1
 80050ea:	461a      	mov	r2, r3
 80050ec:	4b2c      	ldr	r3, [pc, #176]	; (80051a0 <UART_SetConfig+0x384>)
 80050ee:	fba3 1302 	umull	r1, r3, r3, r2
 80050f2:	095b      	lsrs	r3, r3, #5
 80050f4:	2164      	movs	r1, #100	; 0x64
 80050f6:	fb01 f303 	mul.w	r3, r1, r3
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	00db      	lsls	r3, r3, #3
 80050fe:	3332      	adds	r3, #50	; 0x32
 8005100:	4a27      	ldr	r2, [pc, #156]	; (80051a0 <UART_SetConfig+0x384>)
 8005102:	fba2 2303 	umull	r2, r3, r2, r3
 8005106:	095b      	lsrs	r3, r3, #5
 8005108:	005b      	lsls	r3, r3, #1
 800510a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800510e:	4498      	add	r8, r3
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	461d      	mov	r5, r3
 8005114:	f04f 0600 	mov.w	r6, #0
 8005118:	46a9      	mov	r9, r5
 800511a:	46b2      	mov	sl, r6
 800511c:	eb19 0309 	adds.w	r3, r9, r9
 8005120:	eb4a 040a 	adc.w	r4, sl, sl
 8005124:	4699      	mov	r9, r3
 8005126:	46a2      	mov	sl, r4
 8005128:	eb19 0905 	adds.w	r9, r9, r5
 800512c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005130:	f04f 0100 	mov.w	r1, #0
 8005134:	f04f 0200 	mov.w	r2, #0
 8005138:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800513c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005140:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005144:	4689      	mov	r9, r1
 8005146:	4692      	mov	sl, r2
 8005148:	eb19 0005 	adds.w	r0, r9, r5
 800514c:	eb4a 0106 	adc.w	r1, sl, r6
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	461d      	mov	r5, r3
 8005156:	f04f 0600 	mov.w	r6, #0
 800515a:	196b      	adds	r3, r5, r5
 800515c:	eb46 0406 	adc.w	r4, r6, r6
 8005160:	461a      	mov	r2, r3
 8005162:	4623      	mov	r3, r4
 8005164:	f7fb fcf8 	bl	8000b58 <__aeabi_uldivmod>
 8005168:	4603      	mov	r3, r0
 800516a:	460c      	mov	r4, r1
 800516c:	461a      	mov	r2, r3
 800516e:	4b0c      	ldr	r3, [pc, #48]	; (80051a0 <UART_SetConfig+0x384>)
 8005170:	fba3 1302 	umull	r1, r3, r3, r2
 8005174:	095b      	lsrs	r3, r3, #5
 8005176:	2164      	movs	r1, #100	; 0x64
 8005178:	fb01 f303 	mul.w	r3, r1, r3
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	00db      	lsls	r3, r3, #3
 8005180:	3332      	adds	r3, #50	; 0x32
 8005182:	4a07      	ldr	r2, [pc, #28]	; (80051a0 <UART_SetConfig+0x384>)
 8005184:	fba2 2303 	umull	r2, r3, r2, r3
 8005188:	095b      	lsrs	r3, r3, #5
 800518a:	f003 0207 	and.w	r2, r3, #7
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4442      	add	r2, r8
 8005194:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005196:	e1b2      	b.n	80054fe <UART_SetConfig+0x6e2>
 8005198:	40011000 	.word	0x40011000
 800519c:	40011400 	.word	0x40011400
 80051a0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4ad7      	ldr	r2, [pc, #860]	; (8005508 <UART_SetConfig+0x6ec>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d005      	beq.n	80051ba <UART_SetConfig+0x39e>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4ad6      	ldr	r2, [pc, #856]	; (800550c <UART_SetConfig+0x6f0>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	f040 80d1 	bne.w	800535c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80051ba:	f7ff f9f5 	bl	80045a8 <HAL_RCC_GetPCLK2Freq>
 80051be:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	469a      	mov	sl, r3
 80051c4:	f04f 0b00 	mov.w	fp, #0
 80051c8:	46d0      	mov	r8, sl
 80051ca:	46d9      	mov	r9, fp
 80051cc:	eb18 0308 	adds.w	r3, r8, r8
 80051d0:	eb49 0409 	adc.w	r4, r9, r9
 80051d4:	4698      	mov	r8, r3
 80051d6:	46a1      	mov	r9, r4
 80051d8:	eb18 080a 	adds.w	r8, r8, sl
 80051dc:	eb49 090b 	adc.w	r9, r9, fp
 80051e0:	f04f 0100 	mov.w	r1, #0
 80051e4:	f04f 0200 	mov.w	r2, #0
 80051e8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80051ec:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80051f0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80051f4:	4688      	mov	r8, r1
 80051f6:	4691      	mov	r9, r2
 80051f8:	eb1a 0508 	adds.w	r5, sl, r8
 80051fc:	eb4b 0609 	adc.w	r6, fp, r9
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	4619      	mov	r1, r3
 8005206:	f04f 0200 	mov.w	r2, #0
 800520a:	f04f 0300 	mov.w	r3, #0
 800520e:	f04f 0400 	mov.w	r4, #0
 8005212:	0094      	lsls	r4, r2, #2
 8005214:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005218:	008b      	lsls	r3, r1, #2
 800521a:	461a      	mov	r2, r3
 800521c:	4623      	mov	r3, r4
 800521e:	4628      	mov	r0, r5
 8005220:	4631      	mov	r1, r6
 8005222:	f7fb fc99 	bl	8000b58 <__aeabi_uldivmod>
 8005226:	4603      	mov	r3, r0
 8005228:	460c      	mov	r4, r1
 800522a:	461a      	mov	r2, r3
 800522c:	4bb8      	ldr	r3, [pc, #736]	; (8005510 <UART_SetConfig+0x6f4>)
 800522e:	fba3 2302 	umull	r2, r3, r3, r2
 8005232:	095b      	lsrs	r3, r3, #5
 8005234:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	469b      	mov	fp, r3
 800523c:	f04f 0c00 	mov.w	ip, #0
 8005240:	46d9      	mov	r9, fp
 8005242:	46e2      	mov	sl, ip
 8005244:	eb19 0309 	adds.w	r3, r9, r9
 8005248:	eb4a 040a 	adc.w	r4, sl, sl
 800524c:	4699      	mov	r9, r3
 800524e:	46a2      	mov	sl, r4
 8005250:	eb19 090b 	adds.w	r9, r9, fp
 8005254:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005258:	f04f 0100 	mov.w	r1, #0
 800525c:	f04f 0200 	mov.w	r2, #0
 8005260:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005264:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005268:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800526c:	4689      	mov	r9, r1
 800526e:	4692      	mov	sl, r2
 8005270:	eb1b 0509 	adds.w	r5, fp, r9
 8005274:	eb4c 060a 	adc.w	r6, ip, sl
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	4619      	mov	r1, r3
 800527e:	f04f 0200 	mov.w	r2, #0
 8005282:	f04f 0300 	mov.w	r3, #0
 8005286:	f04f 0400 	mov.w	r4, #0
 800528a:	0094      	lsls	r4, r2, #2
 800528c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005290:	008b      	lsls	r3, r1, #2
 8005292:	461a      	mov	r2, r3
 8005294:	4623      	mov	r3, r4
 8005296:	4628      	mov	r0, r5
 8005298:	4631      	mov	r1, r6
 800529a:	f7fb fc5d 	bl	8000b58 <__aeabi_uldivmod>
 800529e:	4603      	mov	r3, r0
 80052a0:	460c      	mov	r4, r1
 80052a2:	461a      	mov	r2, r3
 80052a4:	4b9a      	ldr	r3, [pc, #616]	; (8005510 <UART_SetConfig+0x6f4>)
 80052a6:	fba3 1302 	umull	r1, r3, r3, r2
 80052aa:	095b      	lsrs	r3, r3, #5
 80052ac:	2164      	movs	r1, #100	; 0x64
 80052ae:	fb01 f303 	mul.w	r3, r1, r3
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	011b      	lsls	r3, r3, #4
 80052b6:	3332      	adds	r3, #50	; 0x32
 80052b8:	4a95      	ldr	r2, [pc, #596]	; (8005510 <UART_SetConfig+0x6f4>)
 80052ba:	fba2 2303 	umull	r2, r3, r2, r3
 80052be:	095b      	lsrs	r3, r3, #5
 80052c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052c4:	4498      	add	r8, r3
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	469b      	mov	fp, r3
 80052ca:	f04f 0c00 	mov.w	ip, #0
 80052ce:	46d9      	mov	r9, fp
 80052d0:	46e2      	mov	sl, ip
 80052d2:	eb19 0309 	adds.w	r3, r9, r9
 80052d6:	eb4a 040a 	adc.w	r4, sl, sl
 80052da:	4699      	mov	r9, r3
 80052dc:	46a2      	mov	sl, r4
 80052de:	eb19 090b 	adds.w	r9, r9, fp
 80052e2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80052e6:	f04f 0100 	mov.w	r1, #0
 80052ea:	f04f 0200 	mov.w	r2, #0
 80052ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80052f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80052fa:	4689      	mov	r9, r1
 80052fc:	4692      	mov	sl, r2
 80052fe:	eb1b 0509 	adds.w	r5, fp, r9
 8005302:	eb4c 060a 	adc.w	r6, ip, sl
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	4619      	mov	r1, r3
 800530c:	f04f 0200 	mov.w	r2, #0
 8005310:	f04f 0300 	mov.w	r3, #0
 8005314:	f04f 0400 	mov.w	r4, #0
 8005318:	0094      	lsls	r4, r2, #2
 800531a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800531e:	008b      	lsls	r3, r1, #2
 8005320:	461a      	mov	r2, r3
 8005322:	4623      	mov	r3, r4
 8005324:	4628      	mov	r0, r5
 8005326:	4631      	mov	r1, r6
 8005328:	f7fb fc16 	bl	8000b58 <__aeabi_uldivmod>
 800532c:	4603      	mov	r3, r0
 800532e:	460c      	mov	r4, r1
 8005330:	461a      	mov	r2, r3
 8005332:	4b77      	ldr	r3, [pc, #476]	; (8005510 <UART_SetConfig+0x6f4>)
 8005334:	fba3 1302 	umull	r1, r3, r3, r2
 8005338:	095b      	lsrs	r3, r3, #5
 800533a:	2164      	movs	r1, #100	; 0x64
 800533c:	fb01 f303 	mul.w	r3, r1, r3
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	011b      	lsls	r3, r3, #4
 8005344:	3332      	adds	r3, #50	; 0x32
 8005346:	4a72      	ldr	r2, [pc, #456]	; (8005510 <UART_SetConfig+0x6f4>)
 8005348:	fba2 2303 	umull	r2, r3, r2, r3
 800534c:	095b      	lsrs	r3, r3, #5
 800534e:	f003 020f 	and.w	r2, r3, #15
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4442      	add	r2, r8
 8005358:	609a      	str	r2, [r3, #8]
 800535a:	e0d0      	b.n	80054fe <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800535c:	f7ff f910 	bl	8004580 <HAL_RCC_GetPCLK1Freq>
 8005360:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	469a      	mov	sl, r3
 8005366:	f04f 0b00 	mov.w	fp, #0
 800536a:	46d0      	mov	r8, sl
 800536c:	46d9      	mov	r9, fp
 800536e:	eb18 0308 	adds.w	r3, r8, r8
 8005372:	eb49 0409 	adc.w	r4, r9, r9
 8005376:	4698      	mov	r8, r3
 8005378:	46a1      	mov	r9, r4
 800537a:	eb18 080a 	adds.w	r8, r8, sl
 800537e:	eb49 090b 	adc.w	r9, r9, fp
 8005382:	f04f 0100 	mov.w	r1, #0
 8005386:	f04f 0200 	mov.w	r2, #0
 800538a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800538e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005392:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005396:	4688      	mov	r8, r1
 8005398:	4691      	mov	r9, r2
 800539a:	eb1a 0508 	adds.w	r5, sl, r8
 800539e:	eb4b 0609 	adc.w	r6, fp, r9
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	4619      	mov	r1, r3
 80053a8:	f04f 0200 	mov.w	r2, #0
 80053ac:	f04f 0300 	mov.w	r3, #0
 80053b0:	f04f 0400 	mov.w	r4, #0
 80053b4:	0094      	lsls	r4, r2, #2
 80053b6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80053ba:	008b      	lsls	r3, r1, #2
 80053bc:	461a      	mov	r2, r3
 80053be:	4623      	mov	r3, r4
 80053c0:	4628      	mov	r0, r5
 80053c2:	4631      	mov	r1, r6
 80053c4:	f7fb fbc8 	bl	8000b58 <__aeabi_uldivmod>
 80053c8:	4603      	mov	r3, r0
 80053ca:	460c      	mov	r4, r1
 80053cc:	461a      	mov	r2, r3
 80053ce:	4b50      	ldr	r3, [pc, #320]	; (8005510 <UART_SetConfig+0x6f4>)
 80053d0:	fba3 2302 	umull	r2, r3, r3, r2
 80053d4:	095b      	lsrs	r3, r3, #5
 80053d6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	469b      	mov	fp, r3
 80053de:	f04f 0c00 	mov.w	ip, #0
 80053e2:	46d9      	mov	r9, fp
 80053e4:	46e2      	mov	sl, ip
 80053e6:	eb19 0309 	adds.w	r3, r9, r9
 80053ea:	eb4a 040a 	adc.w	r4, sl, sl
 80053ee:	4699      	mov	r9, r3
 80053f0:	46a2      	mov	sl, r4
 80053f2:	eb19 090b 	adds.w	r9, r9, fp
 80053f6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80053fa:	f04f 0100 	mov.w	r1, #0
 80053fe:	f04f 0200 	mov.w	r2, #0
 8005402:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005406:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800540a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800540e:	4689      	mov	r9, r1
 8005410:	4692      	mov	sl, r2
 8005412:	eb1b 0509 	adds.w	r5, fp, r9
 8005416:	eb4c 060a 	adc.w	r6, ip, sl
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	4619      	mov	r1, r3
 8005420:	f04f 0200 	mov.w	r2, #0
 8005424:	f04f 0300 	mov.w	r3, #0
 8005428:	f04f 0400 	mov.w	r4, #0
 800542c:	0094      	lsls	r4, r2, #2
 800542e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005432:	008b      	lsls	r3, r1, #2
 8005434:	461a      	mov	r2, r3
 8005436:	4623      	mov	r3, r4
 8005438:	4628      	mov	r0, r5
 800543a:	4631      	mov	r1, r6
 800543c:	f7fb fb8c 	bl	8000b58 <__aeabi_uldivmod>
 8005440:	4603      	mov	r3, r0
 8005442:	460c      	mov	r4, r1
 8005444:	461a      	mov	r2, r3
 8005446:	4b32      	ldr	r3, [pc, #200]	; (8005510 <UART_SetConfig+0x6f4>)
 8005448:	fba3 1302 	umull	r1, r3, r3, r2
 800544c:	095b      	lsrs	r3, r3, #5
 800544e:	2164      	movs	r1, #100	; 0x64
 8005450:	fb01 f303 	mul.w	r3, r1, r3
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	011b      	lsls	r3, r3, #4
 8005458:	3332      	adds	r3, #50	; 0x32
 800545a:	4a2d      	ldr	r2, [pc, #180]	; (8005510 <UART_SetConfig+0x6f4>)
 800545c:	fba2 2303 	umull	r2, r3, r2, r3
 8005460:	095b      	lsrs	r3, r3, #5
 8005462:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005466:	4498      	add	r8, r3
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	469b      	mov	fp, r3
 800546c:	f04f 0c00 	mov.w	ip, #0
 8005470:	46d9      	mov	r9, fp
 8005472:	46e2      	mov	sl, ip
 8005474:	eb19 0309 	adds.w	r3, r9, r9
 8005478:	eb4a 040a 	adc.w	r4, sl, sl
 800547c:	4699      	mov	r9, r3
 800547e:	46a2      	mov	sl, r4
 8005480:	eb19 090b 	adds.w	r9, r9, fp
 8005484:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005488:	f04f 0100 	mov.w	r1, #0
 800548c:	f04f 0200 	mov.w	r2, #0
 8005490:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005494:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005498:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800549c:	4689      	mov	r9, r1
 800549e:	4692      	mov	sl, r2
 80054a0:	eb1b 0509 	adds.w	r5, fp, r9
 80054a4:	eb4c 060a 	adc.w	r6, ip, sl
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	4619      	mov	r1, r3
 80054ae:	f04f 0200 	mov.w	r2, #0
 80054b2:	f04f 0300 	mov.w	r3, #0
 80054b6:	f04f 0400 	mov.w	r4, #0
 80054ba:	0094      	lsls	r4, r2, #2
 80054bc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80054c0:	008b      	lsls	r3, r1, #2
 80054c2:	461a      	mov	r2, r3
 80054c4:	4623      	mov	r3, r4
 80054c6:	4628      	mov	r0, r5
 80054c8:	4631      	mov	r1, r6
 80054ca:	f7fb fb45 	bl	8000b58 <__aeabi_uldivmod>
 80054ce:	4603      	mov	r3, r0
 80054d0:	460c      	mov	r4, r1
 80054d2:	461a      	mov	r2, r3
 80054d4:	4b0e      	ldr	r3, [pc, #56]	; (8005510 <UART_SetConfig+0x6f4>)
 80054d6:	fba3 1302 	umull	r1, r3, r3, r2
 80054da:	095b      	lsrs	r3, r3, #5
 80054dc:	2164      	movs	r1, #100	; 0x64
 80054de:	fb01 f303 	mul.w	r3, r1, r3
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	011b      	lsls	r3, r3, #4
 80054e6:	3332      	adds	r3, #50	; 0x32
 80054e8:	4a09      	ldr	r2, [pc, #36]	; (8005510 <UART_SetConfig+0x6f4>)
 80054ea:	fba2 2303 	umull	r2, r3, r2, r3
 80054ee:	095b      	lsrs	r3, r3, #5
 80054f0:	f003 020f 	and.w	r2, r3, #15
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4442      	add	r2, r8
 80054fa:	609a      	str	r2, [r3, #8]
}
 80054fc:	e7ff      	b.n	80054fe <UART_SetConfig+0x6e2>
 80054fe:	bf00      	nop
 8005500:	3714      	adds	r7, #20
 8005502:	46bd      	mov	sp, r7
 8005504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005508:	40011000 	.word	0x40011000
 800550c:	40011400 	.word	0x40011400
 8005510:	51eb851f 	.word	0x51eb851f

08005514 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	4a07      	ldr	r2, [pc, #28]	; (8005540 <vApplicationGetIdleTaskMemory+0x2c>)
 8005524:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	4a06      	ldr	r2, [pc, #24]	; (8005544 <vApplicationGetIdleTaskMemory+0x30>)
 800552a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2280      	movs	r2, #128	; 0x80
 8005530:	601a      	str	r2, [r3, #0]
}
 8005532:	bf00      	nop
 8005534:	3714      	adds	r7, #20
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	200002fc 	.word	0x200002fc
 8005544:	20000358 	.word	0x20000358

08005548 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	4a07      	ldr	r2, [pc, #28]	; (8005574 <vApplicationGetTimerTaskMemory+0x2c>)
 8005558:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	4a06      	ldr	r2, [pc, #24]	; (8005578 <vApplicationGetTimerTaskMemory+0x30>)
 800555e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005566:	601a      	str	r2, [r3, #0]
}
 8005568:	bf00      	nop
 800556a:	3714      	adds	r7, #20
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr
 8005574:	20000558 	.word	0x20000558
 8005578:	200005b4 	.word	0x200005b4

0800557c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f103 0208 	add.w	r2, r3, #8
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005594:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f103 0208 	add.w	r2, r3, #8
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f103 0208 	add.w	r2, r3, #8
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80055ca:	bf00      	nop
 80055cc:	370c      	adds	r7, #12
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055d6:	b480      	push	{r7}
 80055d8:	b085      	sub	sp, #20
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
 80055de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	689a      	ldr	r2, [r3, #8]
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	683a      	ldr	r2, [r7, #0]
 80055fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	683a      	ldr	r2, [r7, #0]
 8005600:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	1c5a      	adds	r2, r3, #1
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	601a      	str	r2, [r3, #0]
}
 8005612:	bf00      	nop
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800561e:	b480      	push	{r7}
 8005620:	b085      	sub	sp, #20
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
 8005626:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005634:	d103      	bne.n	800563e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	60fb      	str	r3, [r7, #12]
 800563c:	e00c      	b.n	8005658 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	3308      	adds	r3, #8
 8005642:	60fb      	str	r3, [r7, #12]
 8005644:	e002      	b.n	800564c <vListInsert+0x2e>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	429a      	cmp	r2, r3
 8005656:	d2f6      	bcs.n	8005646 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	685a      	ldr	r2, [r3, #4]
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	683a      	ldr	r2, [r7, #0]
 8005666:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	683a      	ldr	r2, [r7, #0]
 8005672:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	1c5a      	adds	r2, r3, #1
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	601a      	str	r2, [r3, #0]
}
 8005684:	bf00      	nop
 8005686:	3714      	adds	r7, #20
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	6892      	ldr	r2, [r2, #8]
 80056a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	6852      	ldr	r2, [r2, #4]
 80056b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d103      	bne.n	80056c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	689a      	ldr	r2, [r3, #8]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	1e5a      	subs	r2, r3, #1
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3714      	adds	r7, #20
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d109      	bne.n	800570c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80056f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fc:	f383 8811 	msr	BASEPRI, r3
 8005700:	f3bf 8f6f 	isb	sy
 8005704:	f3bf 8f4f 	dsb	sy
 8005708:	60bb      	str	r3, [r7, #8]
 800570a:	e7fe      	b.n	800570a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800570c:	f002 f88e 	bl	800782c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005718:	68f9      	ldr	r1, [r7, #12]
 800571a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800571c:	fb01 f303 	mul.w	r3, r1, r3
 8005720:	441a      	add	r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800573c:	3b01      	subs	r3, #1
 800573e:	68f9      	ldr	r1, [r7, #12]
 8005740:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005742:	fb01 f303 	mul.w	r3, r1, r3
 8005746:	441a      	add	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	22ff      	movs	r2, #255	; 0xff
 8005750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	22ff      	movs	r2, #255	; 0xff
 8005758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d114      	bne.n	800578c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d01a      	beq.n	80057a0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	3310      	adds	r3, #16
 800576e:	4618      	mov	r0, r3
 8005770:	f001 f958 	bl	8006a24 <xTaskRemoveFromEventList>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d012      	beq.n	80057a0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800577a:	4b0d      	ldr	r3, [pc, #52]	; (80057b0 <xQueueGenericReset+0xcc>)
 800577c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005780:	601a      	str	r2, [r3, #0]
 8005782:	f3bf 8f4f 	dsb	sy
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	e009      	b.n	80057a0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	3310      	adds	r3, #16
 8005790:	4618      	mov	r0, r3
 8005792:	f7ff fef3 	bl	800557c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	3324      	adds	r3, #36	; 0x24
 800579a:	4618      	mov	r0, r3
 800579c:	f7ff feee 	bl	800557c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80057a0:	f002 f872 	bl	8007888 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80057a4:	2301      	movs	r3, #1
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	e000ed04 	.word	0xe000ed04

080057b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b08e      	sub	sp, #56	; 0x38
 80057b8:	af02      	add	r7, sp, #8
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
 80057c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d109      	bne.n	80057dc <xQueueGenericCreateStatic+0x28>
 80057c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057cc:	f383 8811 	msr	BASEPRI, r3
 80057d0:	f3bf 8f6f 	isb	sy
 80057d4:	f3bf 8f4f 	dsb	sy
 80057d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80057da:	e7fe      	b.n	80057da <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d109      	bne.n	80057f6 <xQueueGenericCreateStatic+0x42>
 80057e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e6:	f383 8811 	msr	BASEPRI, r3
 80057ea:	f3bf 8f6f 	isb	sy
 80057ee:	f3bf 8f4f 	dsb	sy
 80057f2:	627b      	str	r3, [r7, #36]	; 0x24
 80057f4:	e7fe      	b.n	80057f4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d002      	beq.n	8005802 <xQueueGenericCreateStatic+0x4e>
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d001      	beq.n	8005806 <xQueueGenericCreateStatic+0x52>
 8005802:	2301      	movs	r3, #1
 8005804:	e000      	b.n	8005808 <xQueueGenericCreateStatic+0x54>
 8005806:	2300      	movs	r3, #0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d109      	bne.n	8005820 <xQueueGenericCreateStatic+0x6c>
 800580c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005810:	f383 8811 	msr	BASEPRI, r3
 8005814:	f3bf 8f6f 	isb	sy
 8005818:	f3bf 8f4f 	dsb	sy
 800581c:	623b      	str	r3, [r7, #32]
 800581e:	e7fe      	b.n	800581e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d102      	bne.n	800582c <xQueueGenericCreateStatic+0x78>
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d101      	bne.n	8005830 <xQueueGenericCreateStatic+0x7c>
 800582c:	2301      	movs	r3, #1
 800582e:	e000      	b.n	8005832 <xQueueGenericCreateStatic+0x7e>
 8005830:	2300      	movs	r3, #0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d109      	bne.n	800584a <xQueueGenericCreateStatic+0x96>
 8005836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583a:	f383 8811 	msr	BASEPRI, r3
 800583e:	f3bf 8f6f 	isb	sy
 8005842:	f3bf 8f4f 	dsb	sy
 8005846:	61fb      	str	r3, [r7, #28]
 8005848:	e7fe      	b.n	8005848 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800584a:	2350      	movs	r3, #80	; 0x50
 800584c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	2b50      	cmp	r3, #80	; 0x50
 8005852:	d009      	beq.n	8005868 <xQueueGenericCreateStatic+0xb4>
 8005854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005858:	f383 8811 	msr	BASEPRI, r3
 800585c:	f3bf 8f6f 	isb	sy
 8005860:	f3bf 8f4f 	dsb	sy
 8005864:	61bb      	str	r3, [r7, #24]
 8005866:	e7fe      	b.n	8005866 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005868:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800586e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00d      	beq.n	8005890 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800587c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005882:	9300      	str	r3, [sp, #0]
 8005884:	4613      	mov	r3, r2
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	68b9      	ldr	r1, [r7, #8]
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	f000 f805 	bl	800589a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005892:	4618      	mov	r0, r3
 8005894:	3730      	adds	r7, #48	; 0x30
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b084      	sub	sp, #16
 800589e:	af00      	add	r7, sp, #0
 80058a0:	60f8      	str	r0, [r7, #12]
 80058a2:	60b9      	str	r1, [r7, #8]
 80058a4:	607a      	str	r2, [r7, #4]
 80058a6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d103      	bne.n	80058b6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	69ba      	ldr	r2, [r7, #24]
 80058b2:	601a      	str	r2, [r3, #0]
 80058b4:	e002      	b.n	80058bc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	68ba      	ldr	r2, [r7, #8]
 80058c6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80058c8:	2101      	movs	r1, #1
 80058ca:	69b8      	ldr	r0, [r7, #24]
 80058cc:	f7ff ff0a 	bl	80056e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	78fa      	ldrb	r2, [r7, #3]
 80058d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80058d8:	bf00      	nop
 80058da:	3710      	adds	r7, #16
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b08e      	sub	sp, #56	; 0x38
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
 80058ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80058ee:	2300      	movs	r3, #0
 80058f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80058f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d109      	bne.n	8005910 <xQueueGenericSend+0x30>
 80058fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005900:	f383 8811 	msr	BASEPRI, r3
 8005904:	f3bf 8f6f 	isb	sy
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	62bb      	str	r3, [r7, #40]	; 0x28
 800590e:	e7fe      	b.n	800590e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d103      	bne.n	800591e <xQueueGenericSend+0x3e>
 8005916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <xQueueGenericSend+0x42>
 800591e:	2301      	movs	r3, #1
 8005920:	e000      	b.n	8005924 <xQueueGenericSend+0x44>
 8005922:	2300      	movs	r3, #0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d109      	bne.n	800593c <xQueueGenericSend+0x5c>
 8005928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592c:	f383 8811 	msr	BASEPRI, r3
 8005930:	f3bf 8f6f 	isb	sy
 8005934:	f3bf 8f4f 	dsb	sy
 8005938:	627b      	str	r3, [r7, #36]	; 0x24
 800593a:	e7fe      	b.n	800593a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	2b02      	cmp	r3, #2
 8005940:	d103      	bne.n	800594a <xQueueGenericSend+0x6a>
 8005942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005946:	2b01      	cmp	r3, #1
 8005948:	d101      	bne.n	800594e <xQueueGenericSend+0x6e>
 800594a:	2301      	movs	r3, #1
 800594c:	e000      	b.n	8005950 <xQueueGenericSend+0x70>
 800594e:	2300      	movs	r3, #0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d109      	bne.n	8005968 <xQueueGenericSend+0x88>
 8005954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005958:	f383 8811 	msr	BASEPRI, r3
 800595c:	f3bf 8f6f 	isb	sy
 8005960:	f3bf 8f4f 	dsb	sy
 8005964:	623b      	str	r3, [r7, #32]
 8005966:	e7fe      	b.n	8005966 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005968:	f001 fa12 	bl	8006d90 <xTaskGetSchedulerState>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d102      	bne.n	8005978 <xQueueGenericSend+0x98>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d101      	bne.n	800597c <xQueueGenericSend+0x9c>
 8005978:	2301      	movs	r3, #1
 800597a:	e000      	b.n	800597e <xQueueGenericSend+0x9e>
 800597c:	2300      	movs	r3, #0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d109      	bne.n	8005996 <xQueueGenericSend+0xb6>
 8005982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005986:	f383 8811 	msr	BASEPRI, r3
 800598a:	f3bf 8f6f 	isb	sy
 800598e:	f3bf 8f4f 	dsb	sy
 8005992:	61fb      	str	r3, [r7, #28]
 8005994:	e7fe      	b.n	8005994 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005996:	f001 ff49 	bl	800782c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800599a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800599e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d302      	bcc.n	80059ac <xQueueGenericSend+0xcc>
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d129      	bne.n	8005a00 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80059ac:	683a      	ldr	r2, [r7, #0]
 80059ae:	68b9      	ldr	r1, [r7, #8]
 80059b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059b2:	f000 f9ff 	bl	8005db4 <prvCopyDataToQueue>
 80059b6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d010      	beq.n	80059e2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c2:	3324      	adds	r3, #36	; 0x24
 80059c4:	4618      	mov	r0, r3
 80059c6:	f001 f82d 	bl	8006a24 <xTaskRemoveFromEventList>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d013      	beq.n	80059f8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80059d0:	4b3f      	ldr	r3, [pc, #252]	; (8005ad0 <xQueueGenericSend+0x1f0>)
 80059d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059d6:	601a      	str	r2, [r3, #0]
 80059d8:	f3bf 8f4f 	dsb	sy
 80059dc:	f3bf 8f6f 	isb	sy
 80059e0:	e00a      	b.n	80059f8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80059e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d007      	beq.n	80059f8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80059e8:	4b39      	ldr	r3, [pc, #228]	; (8005ad0 <xQueueGenericSend+0x1f0>)
 80059ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059ee:	601a      	str	r2, [r3, #0]
 80059f0:	f3bf 8f4f 	dsb	sy
 80059f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80059f8:	f001 ff46 	bl	8007888 <vPortExitCritical>
				return pdPASS;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e063      	b.n	8005ac8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d103      	bne.n	8005a0e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a06:	f001 ff3f 	bl	8007888 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	e05c      	b.n	8005ac8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d106      	bne.n	8005a22 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a14:	f107 0314 	add.w	r3, r7, #20
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f001 f865 	bl	8006ae8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a22:	f001 ff31 	bl	8007888 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a26:	f000 fde1 	bl	80065ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a2a:	f001 feff 	bl	800782c <vPortEnterCritical>
 8005a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a34:	b25b      	sxtb	r3, r3
 8005a36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a3a:	d103      	bne.n	8005a44 <xQueueGenericSend+0x164>
 8005a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a4a:	b25b      	sxtb	r3, r3
 8005a4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a50:	d103      	bne.n	8005a5a <xQueueGenericSend+0x17a>
 8005a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a5a:	f001 ff15 	bl	8007888 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a5e:	1d3a      	adds	r2, r7, #4
 8005a60:	f107 0314 	add.w	r3, r7, #20
 8005a64:	4611      	mov	r1, r2
 8005a66:	4618      	mov	r0, r3
 8005a68:	f001 f854 	bl	8006b14 <xTaskCheckForTimeOut>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d124      	bne.n	8005abc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005a72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a74:	f000 fa96 	bl	8005fa4 <prvIsQueueFull>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d018      	beq.n	8005ab0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a80:	3310      	adds	r3, #16
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	4611      	mov	r1, r2
 8005a86:	4618      	mov	r0, r3
 8005a88:	f000 ff7e 	bl	8006988 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005a8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a8e:	f000 fa21 	bl	8005ed4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005a92:	f000 fdb9 	bl	8006608 <xTaskResumeAll>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	f47f af7c 	bne.w	8005996 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005a9e:	4b0c      	ldr	r3, [pc, #48]	; (8005ad0 <xQueueGenericSend+0x1f0>)
 8005aa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aa4:	601a      	str	r2, [r3, #0]
 8005aa6:	f3bf 8f4f 	dsb	sy
 8005aaa:	f3bf 8f6f 	isb	sy
 8005aae:	e772      	b.n	8005996 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ab0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ab2:	f000 fa0f 	bl	8005ed4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ab6:	f000 fda7 	bl	8006608 <xTaskResumeAll>
 8005aba:	e76c      	b.n	8005996 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005abc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005abe:	f000 fa09 	bl	8005ed4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ac2:	f000 fda1 	bl	8006608 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005ac6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3738      	adds	r7, #56	; 0x38
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	e000ed04 	.word	0xe000ed04

08005ad4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b08e      	sub	sp, #56	; 0x38
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
 8005ae0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d109      	bne.n	8005b00 <xQueueGenericSendFromISR+0x2c>
 8005aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af0:	f383 8811 	msr	BASEPRI, r3
 8005af4:	f3bf 8f6f 	isb	sy
 8005af8:	f3bf 8f4f 	dsb	sy
 8005afc:	627b      	str	r3, [r7, #36]	; 0x24
 8005afe:	e7fe      	b.n	8005afe <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d103      	bne.n	8005b0e <xQueueGenericSendFromISR+0x3a>
 8005b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d101      	bne.n	8005b12 <xQueueGenericSendFromISR+0x3e>
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e000      	b.n	8005b14 <xQueueGenericSendFromISR+0x40>
 8005b12:	2300      	movs	r3, #0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d109      	bne.n	8005b2c <xQueueGenericSendFromISR+0x58>
 8005b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1c:	f383 8811 	msr	BASEPRI, r3
 8005b20:	f3bf 8f6f 	isb	sy
 8005b24:	f3bf 8f4f 	dsb	sy
 8005b28:	623b      	str	r3, [r7, #32]
 8005b2a:	e7fe      	b.n	8005b2a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d103      	bne.n	8005b3a <xQueueGenericSendFromISR+0x66>
 8005b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d101      	bne.n	8005b3e <xQueueGenericSendFromISR+0x6a>
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e000      	b.n	8005b40 <xQueueGenericSendFromISR+0x6c>
 8005b3e:	2300      	movs	r3, #0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d109      	bne.n	8005b58 <xQueueGenericSendFromISR+0x84>
 8005b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b48:	f383 8811 	msr	BASEPRI, r3
 8005b4c:	f3bf 8f6f 	isb	sy
 8005b50:	f3bf 8f4f 	dsb	sy
 8005b54:	61fb      	str	r3, [r7, #28]
 8005b56:	e7fe      	b.n	8005b56 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b58:	f001 ff44 	bl	80079e4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005b5c:	f3ef 8211 	mrs	r2, BASEPRI
 8005b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b64:	f383 8811 	msr	BASEPRI, r3
 8005b68:	f3bf 8f6f 	isb	sy
 8005b6c:	f3bf 8f4f 	dsb	sy
 8005b70:	61ba      	str	r2, [r7, #24]
 8005b72:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005b74:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b76:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d302      	bcc.n	8005b8a <xQueueGenericSendFromISR+0xb6>
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d12c      	bne.n	8005be4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b94:	683a      	ldr	r2, [r7, #0]
 8005b96:	68b9      	ldr	r1, [r7, #8]
 8005b98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b9a:	f000 f90b 	bl	8005db4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005b9e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005ba2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ba6:	d112      	bne.n	8005bce <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d016      	beq.n	8005bde <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb2:	3324      	adds	r3, #36	; 0x24
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f000 ff35 	bl	8006a24 <xTaskRemoveFromEventList>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00e      	beq.n	8005bde <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00b      	beq.n	8005bde <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	601a      	str	r2, [r3, #0]
 8005bcc:	e007      	b.n	8005bde <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005bce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	b25a      	sxtb	r2, r3
 8005bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005bde:	2301      	movs	r3, #1
 8005be0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005be2:	e001      	b.n	8005be8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005be4:	2300      	movs	r3, #0
 8005be6:	637b      	str	r3, [r7, #52]	; 0x34
 8005be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bea:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3738      	adds	r7, #56	; 0x38
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b08c      	sub	sp, #48	; 0x30
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d109      	bne.n	8005c2a <xQueueReceive+0x2e>
	__asm volatile
 8005c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1a:	f383 8811 	msr	BASEPRI, r3
 8005c1e:	f3bf 8f6f 	isb	sy
 8005c22:	f3bf 8f4f 	dsb	sy
 8005c26:	623b      	str	r3, [r7, #32]
 8005c28:	e7fe      	b.n	8005c28 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d103      	bne.n	8005c38 <xQueueReceive+0x3c>
 8005c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d101      	bne.n	8005c3c <xQueueReceive+0x40>
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e000      	b.n	8005c3e <xQueueReceive+0x42>
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d109      	bne.n	8005c56 <xQueueReceive+0x5a>
 8005c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c46:	f383 8811 	msr	BASEPRI, r3
 8005c4a:	f3bf 8f6f 	isb	sy
 8005c4e:	f3bf 8f4f 	dsb	sy
 8005c52:	61fb      	str	r3, [r7, #28]
 8005c54:	e7fe      	b.n	8005c54 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c56:	f001 f89b 	bl	8006d90 <xTaskGetSchedulerState>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d102      	bne.n	8005c66 <xQueueReceive+0x6a>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d101      	bne.n	8005c6a <xQueueReceive+0x6e>
 8005c66:	2301      	movs	r3, #1
 8005c68:	e000      	b.n	8005c6c <xQueueReceive+0x70>
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d109      	bne.n	8005c84 <xQueueReceive+0x88>
 8005c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c74:	f383 8811 	msr	BASEPRI, r3
 8005c78:	f3bf 8f6f 	isb	sy
 8005c7c:	f3bf 8f4f 	dsb	sy
 8005c80:	61bb      	str	r3, [r7, #24]
 8005c82:	e7fe      	b.n	8005c82 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c84:	f001 fdd2 	bl	800782c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d01f      	beq.n	8005cd4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005c94:	68b9      	ldr	r1, [r7, #8]
 8005c96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c98:	f000 f8f6 	bl	8005e88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9e:	1e5a      	subs	r2, r3, #1
 8005ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00f      	beq.n	8005ccc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cae:	3310      	adds	r3, #16
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f000 feb7 	bl	8006a24 <xTaskRemoveFromEventList>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d007      	beq.n	8005ccc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005cbc:	4b3c      	ldr	r3, [pc, #240]	; (8005db0 <xQueueReceive+0x1b4>)
 8005cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cc2:	601a      	str	r2, [r3, #0]
 8005cc4:	f3bf 8f4f 	dsb	sy
 8005cc8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005ccc:	f001 fddc 	bl	8007888 <vPortExitCritical>
				return pdPASS;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e069      	b.n	8005da8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d103      	bne.n	8005ce2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005cda:	f001 fdd5 	bl	8007888 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	e062      	b.n	8005da8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d106      	bne.n	8005cf6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ce8:	f107 0310 	add.w	r3, r7, #16
 8005cec:	4618      	mov	r0, r3
 8005cee:	f000 fefb 	bl	8006ae8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005cf6:	f001 fdc7 	bl	8007888 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005cfa:	f000 fc77 	bl	80065ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005cfe:	f001 fd95 	bl	800782c <vPortEnterCritical>
 8005d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d08:	b25b      	sxtb	r3, r3
 8005d0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d0e:	d103      	bne.n	8005d18 <xQueueReceive+0x11c>
 8005d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d1e:	b25b      	sxtb	r3, r3
 8005d20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d24:	d103      	bne.n	8005d2e <xQueueReceive+0x132>
 8005d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d2e:	f001 fdab 	bl	8007888 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d32:	1d3a      	adds	r2, r7, #4
 8005d34:	f107 0310 	add.w	r3, r7, #16
 8005d38:	4611      	mov	r1, r2
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f000 feea 	bl	8006b14 <xTaskCheckForTimeOut>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d123      	bne.n	8005d8e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d48:	f000 f916 	bl	8005f78 <prvIsQueueEmpty>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d017      	beq.n	8005d82 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d54:	3324      	adds	r3, #36	; 0x24
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	4611      	mov	r1, r2
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f000 fe14 	bl	8006988 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005d60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d62:	f000 f8b7 	bl	8005ed4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005d66:	f000 fc4f 	bl	8006608 <xTaskResumeAll>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d189      	bne.n	8005c84 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005d70:	4b0f      	ldr	r3, [pc, #60]	; (8005db0 <xQueueReceive+0x1b4>)
 8005d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d76:	601a      	str	r2, [r3, #0]
 8005d78:	f3bf 8f4f 	dsb	sy
 8005d7c:	f3bf 8f6f 	isb	sy
 8005d80:	e780      	b.n	8005c84 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005d82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d84:	f000 f8a6 	bl	8005ed4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d88:	f000 fc3e 	bl	8006608 <xTaskResumeAll>
 8005d8c:	e77a      	b.n	8005c84 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005d8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d90:	f000 f8a0 	bl	8005ed4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d94:	f000 fc38 	bl	8006608 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d9a:	f000 f8ed 	bl	8005f78 <prvIsQueueEmpty>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f43f af6f 	beq.w	8005c84 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005da6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3730      	adds	r7, #48	; 0x30
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	e000ed04 	.word	0xe000ed04

08005db4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b086      	sub	sp, #24
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d10d      	bne.n	8005dee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d14d      	bne.n	8005e76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	4618      	mov	r0, r3
 8005de0:	f000 fff4 	bl	8006dcc <xTaskPriorityDisinherit>
 8005de4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	609a      	str	r2, [r3, #8]
 8005dec:	e043      	b.n	8005e76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d119      	bne.n	8005e28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6858      	ldr	r0, [r3, #4]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	68b9      	ldr	r1, [r7, #8]
 8005e00:	f002 f94e 	bl	80080a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	685a      	ldr	r2, [r3, #4]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0c:	441a      	add	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	685a      	ldr	r2, [r3, #4]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d32b      	bcc.n	8005e76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	605a      	str	r2, [r3, #4]
 8005e26:	e026      	b.n	8005e76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	68d8      	ldr	r0, [r3, #12]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e30:	461a      	mov	r2, r3
 8005e32:	68b9      	ldr	r1, [r7, #8]
 8005e34:	f002 f934 	bl	80080a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	68da      	ldr	r2, [r3, #12]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e40:	425b      	negs	r3, r3
 8005e42:	441a      	add	r2, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	68da      	ldr	r2, [r3, #12]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d207      	bcs.n	8005e64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	689a      	ldr	r2, [r3, #8]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5c:	425b      	negs	r3, r3
 8005e5e:	441a      	add	r2, r3
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d105      	bne.n	8005e76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d002      	beq.n	8005e76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	3b01      	subs	r3, #1
 8005e74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	1c5a      	adds	r2, r3, #1
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005e7e:	697b      	ldr	r3, [r7, #20]
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3718      	adds	r7, #24
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d018      	beq.n	8005ecc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	68da      	ldr	r2, [r3, #12]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea2:	441a      	add	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	68da      	ldr	r2, [r3, #12]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d303      	bcc.n	8005ebc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	68d9      	ldr	r1, [r3, #12]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	6838      	ldr	r0, [r7, #0]
 8005ec8:	f002 f8ea 	bl	80080a0 <memcpy>
	}
}
 8005ecc:	bf00      	nop
 8005ece:	3708      	adds	r7, #8
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005edc:	f001 fca6 	bl	800782c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ee6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ee8:	e011      	b.n	8005f0e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d012      	beq.n	8005f18 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	3324      	adds	r3, #36	; 0x24
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f000 fd94 	bl	8006a24 <xTaskRemoveFromEventList>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005f02:	f000 fe67 	bl	8006bd4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005f06:	7bfb      	ldrb	r3, [r7, #15]
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	dce9      	bgt.n	8005eea <prvUnlockQueue+0x16>
 8005f16:	e000      	b.n	8005f1a <prvUnlockQueue+0x46>
					break;
 8005f18:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	22ff      	movs	r2, #255	; 0xff
 8005f1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005f22:	f001 fcb1 	bl	8007888 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005f26:	f001 fc81 	bl	800782c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f30:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f32:	e011      	b.n	8005f58 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d012      	beq.n	8005f62 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	3310      	adds	r3, #16
 8005f40:	4618      	mov	r0, r3
 8005f42:	f000 fd6f 	bl	8006a24 <xTaskRemoveFromEventList>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d001      	beq.n	8005f50 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005f4c:	f000 fe42 	bl	8006bd4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005f50:	7bbb      	ldrb	r3, [r7, #14]
 8005f52:	3b01      	subs	r3, #1
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	dce9      	bgt.n	8005f34 <prvUnlockQueue+0x60>
 8005f60:	e000      	b.n	8005f64 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005f62:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	22ff      	movs	r2, #255	; 0xff
 8005f68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005f6c:	f001 fc8c 	bl	8007888 <vPortExitCritical>
}
 8005f70:	bf00      	nop
 8005f72:	3710      	adds	r7, #16
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f80:	f001 fc54 	bl	800782c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d102      	bne.n	8005f92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	60fb      	str	r3, [r7, #12]
 8005f90:	e001      	b.n	8005f96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005f92:	2300      	movs	r3, #0
 8005f94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f96:	f001 fc77 	bl	8007888 <vPortExitCritical>

	return xReturn;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005fac:	f001 fc3e 	bl	800782c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d102      	bne.n	8005fc2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	60fb      	str	r3, [r7, #12]
 8005fc0:	e001      	b.n	8005fc6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005fc6:	f001 fc5f 	bl	8007888 <vPortExitCritical>

	return xReturn;
 8005fca:	68fb      	ldr	r3, [r7, #12]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005fde:	2300      	movs	r3, #0
 8005fe0:	60fb      	str	r3, [r7, #12]
 8005fe2:	e014      	b.n	800600e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005fe4:	4a0e      	ldr	r2, [pc, #56]	; (8006020 <vQueueAddToRegistry+0x4c>)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d10b      	bne.n	8006008 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005ff0:	490b      	ldr	r1, [pc, #44]	; (8006020 <vQueueAddToRegistry+0x4c>)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	683a      	ldr	r2, [r7, #0]
 8005ff6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005ffa:	4a09      	ldr	r2, [pc, #36]	; (8006020 <vQueueAddToRegistry+0x4c>)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	00db      	lsls	r3, r3, #3
 8006000:	4413      	add	r3, r2
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006006:	e005      	b.n	8006014 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	3301      	adds	r3, #1
 800600c:	60fb      	str	r3, [r7, #12]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2b07      	cmp	r3, #7
 8006012:	d9e7      	bls.n	8005fe4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006014:	bf00      	nop
 8006016:	3714      	adds	r7, #20
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr
 8006020:	20004c8c 	.word	0x20004c8c

08006024 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006024:	b580      	push	{r7, lr}
 8006026:	b086      	sub	sp, #24
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006034:	f001 fbfa 	bl	800782c <vPortEnterCritical>
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800603e:	b25b      	sxtb	r3, r3
 8006040:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006044:	d103      	bne.n	800604e <vQueueWaitForMessageRestricted+0x2a>
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	2200      	movs	r2, #0
 800604a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006054:	b25b      	sxtb	r3, r3
 8006056:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800605a:	d103      	bne.n	8006064 <vQueueWaitForMessageRestricted+0x40>
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	2200      	movs	r2, #0
 8006060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006064:	f001 fc10 	bl	8007888 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606c:	2b00      	cmp	r3, #0
 800606e:	d106      	bne.n	800607e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	3324      	adds	r3, #36	; 0x24
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	68b9      	ldr	r1, [r7, #8]
 8006078:	4618      	mov	r0, r3
 800607a:	f000 fca9 	bl	80069d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800607e:	6978      	ldr	r0, [r7, #20]
 8006080:	f7ff ff28 	bl	8005ed4 <prvUnlockQueue>
	}
 8006084:	bf00      	nop
 8006086:	3718      	adds	r7, #24
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800608c:	b580      	push	{r7, lr}
 800608e:	b08e      	sub	sp, #56	; 0x38
 8006090:	af04      	add	r7, sp, #16
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
 8006098:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800609a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800609c:	2b00      	cmp	r3, #0
 800609e:	d109      	bne.n	80060b4 <xTaskCreateStatic+0x28>
 80060a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a4:	f383 8811 	msr	BASEPRI, r3
 80060a8:	f3bf 8f6f 	isb	sy
 80060ac:	f3bf 8f4f 	dsb	sy
 80060b0:	623b      	str	r3, [r7, #32]
 80060b2:	e7fe      	b.n	80060b2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80060b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d109      	bne.n	80060ce <xTaskCreateStatic+0x42>
 80060ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060be:	f383 8811 	msr	BASEPRI, r3
 80060c2:	f3bf 8f6f 	isb	sy
 80060c6:	f3bf 8f4f 	dsb	sy
 80060ca:	61fb      	str	r3, [r7, #28]
 80060cc:	e7fe      	b.n	80060cc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80060ce:	235c      	movs	r3, #92	; 0x5c
 80060d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	2b5c      	cmp	r3, #92	; 0x5c
 80060d6:	d009      	beq.n	80060ec <xTaskCreateStatic+0x60>
 80060d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060dc:	f383 8811 	msr	BASEPRI, r3
 80060e0:	f3bf 8f6f 	isb	sy
 80060e4:	f3bf 8f4f 	dsb	sy
 80060e8:	61bb      	str	r3, [r7, #24]
 80060ea:	e7fe      	b.n	80060ea <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80060ec:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80060ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d01e      	beq.n	8006132 <xTaskCreateStatic+0xa6>
 80060f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d01b      	beq.n	8006132 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80060fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006100:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006102:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006106:	2202      	movs	r2, #2
 8006108:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800610c:	2300      	movs	r3, #0
 800610e:	9303      	str	r3, [sp, #12]
 8006110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006112:	9302      	str	r3, [sp, #8]
 8006114:	f107 0314 	add.w	r3, r7, #20
 8006118:	9301      	str	r3, [sp, #4]
 800611a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611c:	9300      	str	r3, [sp, #0]
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	68b9      	ldr	r1, [r7, #8]
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f000 f850 	bl	80061ca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800612a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800612c:	f000 f8dc 	bl	80062e8 <prvAddNewTaskToReadyList>
 8006130:	e001      	b.n	8006136 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8006132:	2300      	movs	r3, #0
 8006134:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006136:	697b      	ldr	r3, [r7, #20]
	}
 8006138:	4618      	mov	r0, r3
 800613a:	3728      	adds	r7, #40	; 0x28
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006140:	b580      	push	{r7, lr}
 8006142:	b08c      	sub	sp, #48	; 0x30
 8006144:	af04      	add	r7, sp, #16
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	603b      	str	r3, [r7, #0]
 800614c:	4613      	mov	r3, r2
 800614e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006150:	88fb      	ldrh	r3, [r7, #6]
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	4618      	mov	r0, r3
 8006156:	f001 fc83 	bl	8007a60 <pvPortMalloc>
 800615a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00e      	beq.n	8006180 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006162:	205c      	movs	r0, #92	; 0x5c
 8006164:	f001 fc7c 	bl	8007a60 <pvPortMalloc>
 8006168:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d003      	beq.n	8006178 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	631a      	str	r2, [r3, #48]	; 0x30
 8006176:	e005      	b.n	8006184 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006178:	6978      	ldr	r0, [r7, #20]
 800617a:	f001 fd33 	bl	8007be4 <vPortFree>
 800617e:	e001      	b.n	8006184 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006180:	2300      	movs	r3, #0
 8006182:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d017      	beq.n	80061ba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006192:	88fa      	ldrh	r2, [r7, #6]
 8006194:	2300      	movs	r3, #0
 8006196:	9303      	str	r3, [sp, #12]
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	9302      	str	r3, [sp, #8]
 800619c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800619e:	9301      	str	r3, [sp, #4]
 80061a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a2:	9300      	str	r3, [sp, #0]
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	68b9      	ldr	r1, [r7, #8]
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f000 f80e 	bl	80061ca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061ae:	69f8      	ldr	r0, [r7, #28]
 80061b0:	f000 f89a 	bl	80062e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80061b4:	2301      	movs	r3, #1
 80061b6:	61bb      	str	r3, [r7, #24]
 80061b8:	e002      	b.n	80061c0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80061ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061be:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80061c0:	69bb      	ldr	r3, [r7, #24]
	}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3720      	adds	r7, #32
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}

080061ca <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b088      	sub	sp, #32
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	60f8      	str	r0, [r7, #12]
 80061d2:	60b9      	str	r1, [r7, #8]
 80061d4:	607a      	str	r2, [r7, #4]
 80061d6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80061d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061da:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	461a      	mov	r2, r3
 80061e2:	21a5      	movs	r1, #165	; 0xa5
 80061e4:	f001 ff67 	bl	80080b6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80061e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80061f2:	3b01      	subs	r3, #1
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	4413      	add	r3, r2
 80061f8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	f023 0307 	bic.w	r3, r3, #7
 8006200:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	f003 0307 	and.w	r3, r3, #7
 8006208:	2b00      	cmp	r3, #0
 800620a:	d009      	beq.n	8006220 <prvInitialiseNewTask+0x56>
 800620c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006210:	f383 8811 	msr	BASEPRI, r3
 8006214:	f3bf 8f6f 	isb	sy
 8006218:	f3bf 8f4f 	dsb	sy
 800621c:	617b      	str	r3, [r7, #20]
 800621e:	e7fe      	b.n	800621e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d01f      	beq.n	8006266 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006226:	2300      	movs	r3, #0
 8006228:	61fb      	str	r3, [r7, #28]
 800622a:	e012      	b.n	8006252 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800622c:	68ba      	ldr	r2, [r7, #8]
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	4413      	add	r3, r2
 8006232:	7819      	ldrb	r1, [r3, #0]
 8006234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	4413      	add	r3, r2
 800623a:	3334      	adds	r3, #52	; 0x34
 800623c:	460a      	mov	r2, r1
 800623e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	4413      	add	r3, r2
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d006      	beq.n	800625a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	3301      	adds	r3, #1
 8006250:	61fb      	str	r3, [r7, #28]
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	2b0f      	cmp	r3, #15
 8006256:	d9e9      	bls.n	800622c <prvInitialiseNewTask+0x62>
 8006258:	e000      	b.n	800625c <prvInitialiseNewTask+0x92>
			{
				break;
 800625a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800625c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625e:	2200      	movs	r2, #0
 8006260:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006264:	e003      	b.n	800626e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006268:	2200      	movs	r2, #0
 800626a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800626e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006270:	2b37      	cmp	r3, #55	; 0x37
 8006272:	d901      	bls.n	8006278 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006274:	2337      	movs	r3, #55	; 0x37
 8006276:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800627c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800627e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006280:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006282:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006286:	2200      	movs	r2, #0
 8006288:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800628a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628c:	3304      	adds	r3, #4
 800628e:	4618      	mov	r0, r3
 8006290:	f7ff f994 	bl	80055bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006296:	3318      	adds	r3, #24
 8006298:	4618      	mov	r0, r3
 800629a:	f7ff f98f 	bl	80055bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800629e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80062aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80062ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80062b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b6:	2200      	movs	r2, #0
 80062b8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80062ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80062c2:	683a      	ldr	r2, [r7, #0]
 80062c4:	68f9      	ldr	r1, [r7, #12]
 80062c6:	69b8      	ldr	r0, [r7, #24]
 80062c8:	f001 f986 	bl	80075d8 <pxPortInitialiseStack>
 80062cc:	4602      	mov	r2, r0
 80062ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80062d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d002      	beq.n	80062de <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80062d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062de:	bf00      	nop
 80062e0:	3720      	adds	r7, #32
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
	...

080062e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80062f0:	f001 fa9c 	bl	800782c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80062f4:	4b2d      	ldr	r3, [pc, #180]	; (80063ac <prvAddNewTaskToReadyList+0xc4>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	3301      	adds	r3, #1
 80062fa:	4a2c      	ldr	r2, [pc, #176]	; (80063ac <prvAddNewTaskToReadyList+0xc4>)
 80062fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80062fe:	4b2c      	ldr	r3, [pc, #176]	; (80063b0 <prvAddNewTaskToReadyList+0xc8>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d109      	bne.n	800631a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006306:	4a2a      	ldr	r2, [pc, #168]	; (80063b0 <prvAddNewTaskToReadyList+0xc8>)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800630c:	4b27      	ldr	r3, [pc, #156]	; (80063ac <prvAddNewTaskToReadyList+0xc4>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2b01      	cmp	r3, #1
 8006312:	d110      	bne.n	8006336 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006314:	f000 fc82 	bl	8006c1c <prvInitialiseTaskLists>
 8006318:	e00d      	b.n	8006336 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800631a:	4b26      	ldr	r3, [pc, #152]	; (80063b4 <prvAddNewTaskToReadyList+0xcc>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d109      	bne.n	8006336 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006322:	4b23      	ldr	r3, [pc, #140]	; (80063b0 <prvAddNewTaskToReadyList+0xc8>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800632c:	429a      	cmp	r2, r3
 800632e:	d802      	bhi.n	8006336 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006330:	4a1f      	ldr	r2, [pc, #124]	; (80063b0 <prvAddNewTaskToReadyList+0xc8>)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006336:	4b20      	ldr	r3, [pc, #128]	; (80063b8 <prvAddNewTaskToReadyList+0xd0>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	3301      	adds	r3, #1
 800633c:	4a1e      	ldr	r2, [pc, #120]	; (80063b8 <prvAddNewTaskToReadyList+0xd0>)
 800633e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006340:	4b1d      	ldr	r3, [pc, #116]	; (80063b8 <prvAddNewTaskToReadyList+0xd0>)
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800634c:	4b1b      	ldr	r3, [pc, #108]	; (80063bc <prvAddNewTaskToReadyList+0xd4>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	429a      	cmp	r2, r3
 8006352:	d903      	bls.n	800635c <prvAddNewTaskToReadyList+0x74>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006358:	4a18      	ldr	r2, [pc, #96]	; (80063bc <prvAddNewTaskToReadyList+0xd4>)
 800635a:	6013      	str	r3, [r2, #0]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006360:	4613      	mov	r3, r2
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	4413      	add	r3, r2
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	4a15      	ldr	r2, [pc, #84]	; (80063c0 <prvAddNewTaskToReadyList+0xd8>)
 800636a:	441a      	add	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	3304      	adds	r3, #4
 8006370:	4619      	mov	r1, r3
 8006372:	4610      	mov	r0, r2
 8006374:	f7ff f92f 	bl	80055d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006378:	f001 fa86 	bl	8007888 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800637c:	4b0d      	ldr	r3, [pc, #52]	; (80063b4 <prvAddNewTaskToReadyList+0xcc>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00e      	beq.n	80063a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006384:	4b0a      	ldr	r3, [pc, #40]	; (80063b0 <prvAddNewTaskToReadyList+0xc8>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638e:	429a      	cmp	r2, r3
 8006390:	d207      	bcs.n	80063a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006392:	4b0c      	ldr	r3, [pc, #48]	; (80063c4 <prvAddNewTaskToReadyList+0xdc>)
 8006394:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006398:	601a      	str	r2, [r3, #0]
 800639a:	f3bf 8f4f 	dsb	sy
 800639e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063a2:	bf00      	nop
 80063a4:	3708      	adds	r7, #8
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	20000e88 	.word	0x20000e88
 80063b0:	200009b4 	.word	0x200009b4
 80063b4:	20000e94 	.word	0x20000e94
 80063b8:	20000ea4 	.word	0x20000ea4
 80063bc:	20000e90 	.word	0x20000e90
 80063c0:	200009b8 	.word	0x200009b8
 80063c4:	e000ed04 	.word	0xe000ed04

080063c8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b08a      	sub	sp, #40	; 0x28
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80063d2:	2300      	movs	r3, #0
 80063d4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d109      	bne.n	80063f0 <vTaskDelayUntil+0x28>
 80063dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e0:	f383 8811 	msr	BASEPRI, r3
 80063e4:	f3bf 8f6f 	isb	sy
 80063e8:	f3bf 8f4f 	dsb	sy
 80063ec:	617b      	str	r3, [r7, #20]
 80063ee:	e7fe      	b.n	80063ee <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d109      	bne.n	800640a <vTaskDelayUntil+0x42>
 80063f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fa:	f383 8811 	msr	BASEPRI, r3
 80063fe:	f3bf 8f6f 	isb	sy
 8006402:	f3bf 8f4f 	dsb	sy
 8006406:	613b      	str	r3, [r7, #16]
 8006408:	e7fe      	b.n	8006408 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 800640a:	4b29      	ldr	r3, [pc, #164]	; (80064b0 <vTaskDelayUntil+0xe8>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d009      	beq.n	8006426 <vTaskDelayUntil+0x5e>
 8006412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006416:	f383 8811 	msr	BASEPRI, r3
 800641a:	f3bf 8f6f 	isb	sy
 800641e:	f3bf 8f4f 	dsb	sy
 8006422:	60fb      	str	r3, [r7, #12]
 8006424:	e7fe      	b.n	8006424 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8006426:	f000 f8e1 	bl	80065ec <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800642a:	4b22      	ldr	r3, [pc, #136]	; (80064b4 <vTaskDelayUntil+0xec>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	683a      	ldr	r2, [r7, #0]
 8006436:	4413      	add	r3, r2
 8006438:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	6a3a      	ldr	r2, [r7, #32]
 8006440:	429a      	cmp	r2, r3
 8006442:	d20b      	bcs.n	800645c <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	69fa      	ldr	r2, [r7, #28]
 800644a:	429a      	cmp	r2, r3
 800644c:	d211      	bcs.n	8006472 <vTaskDelayUntil+0xaa>
 800644e:	69fa      	ldr	r2, [r7, #28]
 8006450:	6a3b      	ldr	r3, [r7, #32]
 8006452:	429a      	cmp	r2, r3
 8006454:	d90d      	bls.n	8006472 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8006456:	2301      	movs	r3, #1
 8006458:	627b      	str	r3, [r7, #36]	; 0x24
 800645a:	e00a      	b.n	8006472 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	69fa      	ldr	r2, [r7, #28]
 8006462:	429a      	cmp	r2, r3
 8006464:	d303      	bcc.n	800646e <vTaskDelayUntil+0xa6>
 8006466:	69fa      	ldr	r2, [r7, #28]
 8006468:	6a3b      	ldr	r3, [r7, #32]
 800646a:	429a      	cmp	r2, r3
 800646c:	d901      	bls.n	8006472 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800646e:	2301      	movs	r3, #1
 8006470:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	69fa      	ldr	r2, [r7, #28]
 8006476:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8006478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647a:	2b00      	cmp	r3, #0
 800647c:	d006      	beq.n	800648c <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800647e:	69fa      	ldr	r2, [r7, #28]
 8006480:	6a3b      	ldr	r3, [r7, #32]
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	2100      	movs	r1, #0
 8006486:	4618      	mov	r0, r3
 8006488:	f000 fd0c 	bl	8006ea4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800648c:	f000 f8bc 	bl	8006608 <xTaskResumeAll>
 8006490:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d107      	bne.n	80064a8 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 8006498:	4b07      	ldr	r3, [pc, #28]	; (80064b8 <vTaskDelayUntil+0xf0>)
 800649a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800649e:	601a      	str	r2, [r3, #0]
 80064a0:	f3bf 8f4f 	dsb	sy
 80064a4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80064a8:	bf00      	nop
 80064aa:	3728      	adds	r7, #40	; 0x28
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	20000eb0 	.word	0x20000eb0
 80064b4:	20000e8c 	.word	0x20000e8c
 80064b8:	e000ed04 	.word	0xe000ed04

080064bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80064c4:	2300      	movs	r3, #0
 80064c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d016      	beq.n	80064fc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80064ce:	4b13      	ldr	r3, [pc, #76]	; (800651c <vTaskDelay+0x60>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d009      	beq.n	80064ea <vTaskDelay+0x2e>
 80064d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064da:	f383 8811 	msr	BASEPRI, r3
 80064de:	f3bf 8f6f 	isb	sy
 80064e2:	f3bf 8f4f 	dsb	sy
 80064e6:	60bb      	str	r3, [r7, #8]
 80064e8:	e7fe      	b.n	80064e8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80064ea:	f000 f87f 	bl	80065ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80064ee:	2100      	movs	r1, #0
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 fcd7 	bl	8006ea4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80064f6:	f000 f887 	bl	8006608 <xTaskResumeAll>
 80064fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d107      	bne.n	8006512 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006502:	4b07      	ldr	r3, [pc, #28]	; (8006520 <vTaskDelay+0x64>)
 8006504:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006508:	601a      	str	r2, [r3, #0]
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006512:	bf00      	nop
 8006514:	3710      	adds	r7, #16
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	20000eb0 	.word	0x20000eb0
 8006520:	e000ed04 	.word	0xe000ed04

08006524 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b08a      	sub	sp, #40	; 0x28
 8006528:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800652a:	2300      	movs	r3, #0
 800652c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800652e:	2300      	movs	r3, #0
 8006530:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006532:	463a      	mov	r2, r7
 8006534:	1d39      	adds	r1, r7, #4
 8006536:	f107 0308 	add.w	r3, r7, #8
 800653a:	4618      	mov	r0, r3
 800653c:	f7fe ffea 	bl	8005514 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006540:	6839      	ldr	r1, [r7, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	9202      	str	r2, [sp, #8]
 8006548:	9301      	str	r3, [sp, #4]
 800654a:	2300      	movs	r3, #0
 800654c:	9300      	str	r3, [sp, #0]
 800654e:	2300      	movs	r3, #0
 8006550:	460a      	mov	r2, r1
 8006552:	4920      	ldr	r1, [pc, #128]	; (80065d4 <vTaskStartScheduler+0xb0>)
 8006554:	4820      	ldr	r0, [pc, #128]	; (80065d8 <vTaskStartScheduler+0xb4>)
 8006556:	f7ff fd99 	bl	800608c <xTaskCreateStatic>
 800655a:	4602      	mov	r2, r0
 800655c:	4b1f      	ldr	r3, [pc, #124]	; (80065dc <vTaskStartScheduler+0xb8>)
 800655e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006560:	4b1e      	ldr	r3, [pc, #120]	; (80065dc <vTaskStartScheduler+0xb8>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d002      	beq.n	800656e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006568:	2301      	movs	r3, #1
 800656a:	617b      	str	r3, [r7, #20]
 800656c:	e001      	b.n	8006572 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800656e:	2300      	movs	r3, #0
 8006570:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d102      	bne.n	800657e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006578:	f000 fce8 	bl	8006f4c <xTimerCreateTimerTask>
 800657c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	2b01      	cmp	r3, #1
 8006582:	d115      	bne.n	80065b0 <vTaskStartScheduler+0x8c>
 8006584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006588:	f383 8811 	msr	BASEPRI, r3
 800658c:	f3bf 8f6f 	isb	sy
 8006590:	f3bf 8f4f 	dsb	sy
 8006594:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006596:	4b12      	ldr	r3, [pc, #72]	; (80065e0 <vTaskStartScheduler+0xbc>)
 8006598:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800659c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800659e:	4b11      	ldr	r3, [pc, #68]	; (80065e4 <vTaskStartScheduler+0xc0>)
 80065a0:	2201      	movs	r2, #1
 80065a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80065a4:	4b10      	ldr	r3, [pc, #64]	; (80065e8 <vTaskStartScheduler+0xc4>)
 80065a6:	2200      	movs	r2, #0
 80065a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80065aa:	f001 f8a1 	bl	80076f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80065ae:	e00d      	b.n	80065cc <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065b6:	d109      	bne.n	80065cc <vTaskStartScheduler+0xa8>
 80065b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065bc:	f383 8811 	msr	BASEPRI, r3
 80065c0:	f3bf 8f6f 	isb	sy
 80065c4:	f3bf 8f4f 	dsb	sy
 80065c8:	60fb      	str	r3, [r7, #12]
 80065ca:	e7fe      	b.n	80065ca <vTaskStartScheduler+0xa6>
}
 80065cc:	bf00      	nop
 80065ce:	3718      	adds	r7, #24
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	08009dd8 	.word	0x08009dd8
 80065d8:	08006bed 	.word	0x08006bed
 80065dc:	20000eac 	.word	0x20000eac
 80065e0:	20000ea8 	.word	0x20000ea8
 80065e4:	20000e94 	.word	0x20000e94
 80065e8:	20000e8c 	.word	0x20000e8c

080065ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80065ec:	b480      	push	{r7}
 80065ee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80065f0:	4b04      	ldr	r3, [pc, #16]	; (8006604 <vTaskSuspendAll+0x18>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	3301      	adds	r3, #1
 80065f6:	4a03      	ldr	r2, [pc, #12]	; (8006604 <vTaskSuspendAll+0x18>)
 80065f8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80065fa:	bf00      	nop
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr
 8006604:	20000eb0 	.word	0x20000eb0

08006608 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800660e:	2300      	movs	r3, #0
 8006610:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006612:	2300      	movs	r3, #0
 8006614:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006616:	4b41      	ldr	r3, [pc, #260]	; (800671c <xTaskResumeAll+0x114>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d109      	bne.n	8006632 <xTaskResumeAll+0x2a>
 800661e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006622:	f383 8811 	msr	BASEPRI, r3
 8006626:	f3bf 8f6f 	isb	sy
 800662a:	f3bf 8f4f 	dsb	sy
 800662e:	603b      	str	r3, [r7, #0]
 8006630:	e7fe      	b.n	8006630 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006632:	f001 f8fb 	bl	800782c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006636:	4b39      	ldr	r3, [pc, #228]	; (800671c <xTaskResumeAll+0x114>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	3b01      	subs	r3, #1
 800663c:	4a37      	ldr	r2, [pc, #220]	; (800671c <xTaskResumeAll+0x114>)
 800663e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006640:	4b36      	ldr	r3, [pc, #216]	; (800671c <xTaskResumeAll+0x114>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d162      	bne.n	800670e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006648:	4b35      	ldr	r3, [pc, #212]	; (8006720 <xTaskResumeAll+0x118>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d05e      	beq.n	800670e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006650:	e02f      	b.n	80066b2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006652:	4b34      	ldr	r3, [pc, #208]	; (8006724 <xTaskResumeAll+0x11c>)
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	3318      	adds	r3, #24
 800665e:	4618      	mov	r0, r3
 8006660:	f7ff f816 	bl	8005690 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	3304      	adds	r3, #4
 8006668:	4618      	mov	r0, r3
 800666a:	f7ff f811 	bl	8005690 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006672:	4b2d      	ldr	r3, [pc, #180]	; (8006728 <xTaskResumeAll+0x120>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	429a      	cmp	r2, r3
 8006678:	d903      	bls.n	8006682 <xTaskResumeAll+0x7a>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667e:	4a2a      	ldr	r2, [pc, #168]	; (8006728 <xTaskResumeAll+0x120>)
 8006680:	6013      	str	r3, [r2, #0]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006686:	4613      	mov	r3, r2
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	4413      	add	r3, r2
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	4a27      	ldr	r2, [pc, #156]	; (800672c <xTaskResumeAll+0x124>)
 8006690:	441a      	add	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	3304      	adds	r3, #4
 8006696:	4619      	mov	r1, r3
 8006698:	4610      	mov	r0, r2
 800669a:	f7fe ff9c 	bl	80055d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066a2:	4b23      	ldr	r3, [pc, #140]	; (8006730 <xTaskResumeAll+0x128>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d302      	bcc.n	80066b2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80066ac:	4b21      	ldr	r3, [pc, #132]	; (8006734 <xTaskResumeAll+0x12c>)
 80066ae:	2201      	movs	r2, #1
 80066b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066b2:	4b1c      	ldr	r3, [pc, #112]	; (8006724 <xTaskResumeAll+0x11c>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1cb      	bne.n	8006652 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d001      	beq.n	80066c4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80066c0:	f000 fb46 	bl	8006d50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80066c4:	4b1c      	ldr	r3, [pc, #112]	; (8006738 <xTaskResumeAll+0x130>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d010      	beq.n	80066f2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80066d0:	f000 f846 	bl	8006760 <xTaskIncrementTick>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d002      	beq.n	80066e0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80066da:	4b16      	ldr	r3, [pc, #88]	; (8006734 <xTaskResumeAll+0x12c>)
 80066dc:	2201      	movs	r2, #1
 80066de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	3b01      	subs	r3, #1
 80066e4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1f1      	bne.n	80066d0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80066ec:	4b12      	ldr	r3, [pc, #72]	; (8006738 <xTaskResumeAll+0x130>)
 80066ee:	2200      	movs	r2, #0
 80066f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80066f2:	4b10      	ldr	r3, [pc, #64]	; (8006734 <xTaskResumeAll+0x12c>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d009      	beq.n	800670e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80066fa:	2301      	movs	r3, #1
 80066fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80066fe:	4b0f      	ldr	r3, [pc, #60]	; (800673c <xTaskResumeAll+0x134>)
 8006700:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006704:	601a      	str	r2, [r3, #0]
 8006706:	f3bf 8f4f 	dsb	sy
 800670a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800670e:	f001 f8bb 	bl	8007888 <vPortExitCritical>

	return xAlreadyYielded;
 8006712:	68bb      	ldr	r3, [r7, #8]
}
 8006714:	4618      	mov	r0, r3
 8006716:	3710      	adds	r7, #16
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}
 800671c:	20000eb0 	.word	0x20000eb0
 8006720:	20000e88 	.word	0x20000e88
 8006724:	20000e48 	.word	0x20000e48
 8006728:	20000e90 	.word	0x20000e90
 800672c:	200009b8 	.word	0x200009b8
 8006730:	200009b4 	.word	0x200009b4
 8006734:	20000e9c 	.word	0x20000e9c
 8006738:	20000e98 	.word	0x20000e98
 800673c:	e000ed04 	.word	0xe000ed04

08006740 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006746:	4b05      	ldr	r3, [pc, #20]	; (800675c <xTaskGetTickCount+0x1c>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800674c:	687b      	ldr	r3, [r7, #4]
}
 800674e:	4618      	mov	r0, r3
 8006750:	370c      	adds	r7, #12
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	20000e8c 	.word	0x20000e8c

08006760 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b086      	sub	sp, #24
 8006764:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006766:	2300      	movs	r3, #0
 8006768:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800676a:	4b4e      	ldr	r3, [pc, #312]	; (80068a4 <xTaskIncrementTick+0x144>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	f040 8088 	bne.w	8006884 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006774:	4b4c      	ldr	r3, [pc, #304]	; (80068a8 <xTaskIncrementTick+0x148>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	3301      	adds	r3, #1
 800677a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800677c:	4a4a      	ldr	r2, [pc, #296]	; (80068a8 <xTaskIncrementTick+0x148>)
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d11f      	bne.n	80067c8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006788:	4b48      	ldr	r3, [pc, #288]	; (80068ac <xTaskIncrementTick+0x14c>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d009      	beq.n	80067a6 <xTaskIncrementTick+0x46>
 8006792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006796:	f383 8811 	msr	BASEPRI, r3
 800679a:	f3bf 8f6f 	isb	sy
 800679e:	f3bf 8f4f 	dsb	sy
 80067a2:	603b      	str	r3, [r7, #0]
 80067a4:	e7fe      	b.n	80067a4 <xTaskIncrementTick+0x44>
 80067a6:	4b41      	ldr	r3, [pc, #260]	; (80068ac <xTaskIncrementTick+0x14c>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	60fb      	str	r3, [r7, #12]
 80067ac:	4b40      	ldr	r3, [pc, #256]	; (80068b0 <xTaskIncrementTick+0x150>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a3e      	ldr	r2, [pc, #248]	; (80068ac <xTaskIncrementTick+0x14c>)
 80067b2:	6013      	str	r3, [r2, #0]
 80067b4:	4a3e      	ldr	r2, [pc, #248]	; (80068b0 <xTaskIncrementTick+0x150>)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6013      	str	r3, [r2, #0]
 80067ba:	4b3e      	ldr	r3, [pc, #248]	; (80068b4 <xTaskIncrementTick+0x154>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	3301      	adds	r3, #1
 80067c0:	4a3c      	ldr	r2, [pc, #240]	; (80068b4 <xTaskIncrementTick+0x154>)
 80067c2:	6013      	str	r3, [r2, #0]
 80067c4:	f000 fac4 	bl	8006d50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80067c8:	4b3b      	ldr	r3, [pc, #236]	; (80068b8 <xTaskIncrementTick+0x158>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d349      	bcc.n	8006866 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067d2:	4b36      	ldr	r3, [pc, #216]	; (80068ac <xTaskIncrementTick+0x14c>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d104      	bne.n	80067e6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067dc:	4b36      	ldr	r3, [pc, #216]	; (80068b8 <xTaskIncrementTick+0x158>)
 80067de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067e2:	601a      	str	r2, [r3, #0]
					break;
 80067e4:	e03f      	b.n	8006866 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067e6:	4b31      	ldr	r3, [pc, #196]	; (80068ac <xTaskIncrementTick+0x14c>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d203      	bcs.n	8006806 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80067fe:	4a2e      	ldr	r2, [pc, #184]	; (80068b8 <xTaskIncrementTick+0x158>)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006804:	e02f      	b.n	8006866 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	3304      	adds	r3, #4
 800680a:	4618      	mov	r0, r3
 800680c:	f7fe ff40 	bl	8005690 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006814:	2b00      	cmp	r3, #0
 8006816:	d004      	beq.n	8006822 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	3318      	adds	r3, #24
 800681c:	4618      	mov	r0, r3
 800681e:	f7fe ff37 	bl	8005690 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006826:	4b25      	ldr	r3, [pc, #148]	; (80068bc <xTaskIncrementTick+0x15c>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	429a      	cmp	r2, r3
 800682c:	d903      	bls.n	8006836 <xTaskIncrementTick+0xd6>
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006832:	4a22      	ldr	r2, [pc, #136]	; (80068bc <xTaskIncrementTick+0x15c>)
 8006834:	6013      	str	r3, [r2, #0]
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800683a:	4613      	mov	r3, r2
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	4413      	add	r3, r2
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	4a1f      	ldr	r2, [pc, #124]	; (80068c0 <xTaskIncrementTick+0x160>)
 8006844:	441a      	add	r2, r3
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	3304      	adds	r3, #4
 800684a:	4619      	mov	r1, r3
 800684c:	4610      	mov	r0, r2
 800684e:	f7fe fec2 	bl	80055d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006856:	4b1b      	ldr	r3, [pc, #108]	; (80068c4 <xTaskIncrementTick+0x164>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800685c:	429a      	cmp	r2, r3
 800685e:	d3b8      	bcc.n	80067d2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006860:	2301      	movs	r3, #1
 8006862:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006864:	e7b5      	b.n	80067d2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006866:	4b17      	ldr	r3, [pc, #92]	; (80068c4 <xTaskIncrementTick+0x164>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800686c:	4914      	ldr	r1, [pc, #80]	; (80068c0 <xTaskIncrementTick+0x160>)
 800686e:	4613      	mov	r3, r2
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	4413      	add	r3, r2
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	440b      	add	r3, r1
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2b01      	cmp	r3, #1
 800687c:	d907      	bls.n	800688e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800687e:	2301      	movs	r3, #1
 8006880:	617b      	str	r3, [r7, #20]
 8006882:	e004      	b.n	800688e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006884:	4b10      	ldr	r3, [pc, #64]	; (80068c8 <xTaskIncrementTick+0x168>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	3301      	adds	r3, #1
 800688a:	4a0f      	ldr	r2, [pc, #60]	; (80068c8 <xTaskIncrementTick+0x168>)
 800688c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800688e:	4b0f      	ldr	r3, [pc, #60]	; (80068cc <xTaskIncrementTick+0x16c>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d001      	beq.n	800689a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8006896:	2301      	movs	r3, #1
 8006898:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800689a:	697b      	ldr	r3, [r7, #20]
}
 800689c:	4618      	mov	r0, r3
 800689e:	3718      	adds	r7, #24
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	20000eb0 	.word	0x20000eb0
 80068a8:	20000e8c 	.word	0x20000e8c
 80068ac:	20000e40 	.word	0x20000e40
 80068b0:	20000e44 	.word	0x20000e44
 80068b4:	20000ea0 	.word	0x20000ea0
 80068b8:	20000ea8 	.word	0x20000ea8
 80068bc:	20000e90 	.word	0x20000e90
 80068c0:	200009b8 	.word	0x200009b8
 80068c4:	200009b4 	.word	0x200009b4
 80068c8:	20000e98 	.word	0x20000e98
 80068cc:	20000e9c 	.word	0x20000e9c

080068d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80068d6:	4b27      	ldr	r3, [pc, #156]	; (8006974 <vTaskSwitchContext+0xa4>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d003      	beq.n	80068e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80068de:	4b26      	ldr	r3, [pc, #152]	; (8006978 <vTaskSwitchContext+0xa8>)
 80068e0:	2201      	movs	r2, #1
 80068e2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80068e4:	e040      	b.n	8006968 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80068e6:	4b24      	ldr	r3, [pc, #144]	; (8006978 <vTaskSwitchContext+0xa8>)
 80068e8:	2200      	movs	r2, #0
 80068ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068ec:	4b23      	ldr	r3, [pc, #140]	; (800697c <vTaskSwitchContext+0xac>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	60fb      	str	r3, [r7, #12]
 80068f2:	e00f      	b.n	8006914 <vTaskSwitchContext+0x44>
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d109      	bne.n	800690e <vTaskSwitchContext+0x3e>
 80068fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fe:	f383 8811 	msr	BASEPRI, r3
 8006902:	f3bf 8f6f 	isb	sy
 8006906:	f3bf 8f4f 	dsb	sy
 800690a:	607b      	str	r3, [r7, #4]
 800690c:	e7fe      	b.n	800690c <vTaskSwitchContext+0x3c>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	3b01      	subs	r3, #1
 8006912:	60fb      	str	r3, [r7, #12]
 8006914:	491a      	ldr	r1, [pc, #104]	; (8006980 <vTaskSwitchContext+0xb0>)
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	4613      	mov	r3, r2
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	4413      	add	r3, r2
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	440b      	add	r3, r1
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d0e5      	beq.n	80068f4 <vTaskSwitchContext+0x24>
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	4613      	mov	r3, r2
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	4413      	add	r3, r2
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	4a13      	ldr	r2, [pc, #76]	; (8006980 <vTaskSwitchContext+0xb0>)
 8006934:	4413      	add	r3, r2
 8006936:	60bb      	str	r3, [r7, #8]
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	685a      	ldr	r2, [r3, #4]
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	605a      	str	r2, [r3, #4]
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	685a      	ldr	r2, [r3, #4]
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	3308      	adds	r3, #8
 800694a:	429a      	cmp	r2, r3
 800694c:	d104      	bne.n	8006958 <vTaskSwitchContext+0x88>
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	685a      	ldr	r2, [r3, #4]
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	605a      	str	r2, [r3, #4]
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	4a09      	ldr	r2, [pc, #36]	; (8006984 <vTaskSwitchContext+0xb4>)
 8006960:	6013      	str	r3, [r2, #0]
 8006962:	4a06      	ldr	r2, [pc, #24]	; (800697c <vTaskSwitchContext+0xac>)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6013      	str	r3, [r2, #0]
}
 8006968:	bf00      	nop
 800696a:	3714      	adds	r7, #20
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr
 8006974:	20000eb0 	.word	0x20000eb0
 8006978:	20000e9c 	.word	0x20000e9c
 800697c:	20000e90 	.word	0x20000e90
 8006980:	200009b8 	.word	0x200009b8
 8006984:	200009b4 	.word	0x200009b4

08006988 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d109      	bne.n	80069ac <vTaskPlaceOnEventList+0x24>
 8006998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699c:	f383 8811 	msr	BASEPRI, r3
 80069a0:	f3bf 8f6f 	isb	sy
 80069a4:	f3bf 8f4f 	dsb	sy
 80069a8:	60fb      	str	r3, [r7, #12]
 80069aa:	e7fe      	b.n	80069aa <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069ac:	4b07      	ldr	r3, [pc, #28]	; (80069cc <vTaskPlaceOnEventList+0x44>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	3318      	adds	r3, #24
 80069b2:	4619      	mov	r1, r3
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f7fe fe32 	bl	800561e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80069ba:	2101      	movs	r1, #1
 80069bc:	6838      	ldr	r0, [r7, #0]
 80069be:	f000 fa71 	bl	8006ea4 <prvAddCurrentTaskToDelayedList>
}
 80069c2:	bf00      	nop
 80069c4:	3710      	adds	r7, #16
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	200009b4 	.word	0x200009b4

080069d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b086      	sub	sp, #24
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d109      	bne.n	80069f6 <vTaskPlaceOnEventListRestricted+0x26>
 80069e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e6:	f383 8811 	msr	BASEPRI, r3
 80069ea:	f3bf 8f6f 	isb	sy
 80069ee:	f3bf 8f4f 	dsb	sy
 80069f2:	617b      	str	r3, [r7, #20]
 80069f4:	e7fe      	b.n	80069f4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069f6:	4b0a      	ldr	r3, [pc, #40]	; (8006a20 <vTaskPlaceOnEventListRestricted+0x50>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	3318      	adds	r3, #24
 80069fc:	4619      	mov	r1, r3
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	f7fe fde9 	bl	80055d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d002      	beq.n	8006a10 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8006a0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a0e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006a10:	6879      	ldr	r1, [r7, #4]
 8006a12:	68b8      	ldr	r0, [r7, #8]
 8006a14:	f000 fa46 	bl	8006ea4 <prvAddCurrentTaskToDelayedList>
	}
 8006a18:	bf00      	nop
 8006a1a:	3718      	adds	r7, #24
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}
 8006a20:	200009b4 	.word	0x200009b4

08006a24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b086      	sub	sp, #24
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d109      	bne.n	8006a4e <xTaskRemoveFromEventList+0x2a>
 8006a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3e:	f383 8811 	msr	BASEPRI, r3
 8006a42:	f3bf 8f6f 	isb	sy
 8006a46:	f3bf 8f4f 	dsb	sy
 8006a4a:	60fb      	str	r3, [r7, #12]
 8006a4c:	e7fe      	b.n	8006a4c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	3318      	adds	r3, #24
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7fe fe1c 	bl	8005690 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a58:	4b1d      	ldr	r3, [pc, #116]	; (8006ad0 <xTaskRemoveFromEventList+0xac>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d11d      	bne.n	8006a9c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	3304      	adds	r3, #4
 8006a64:	4618      	mov	r0, r3
 8006a66:	f7fe fe13 	bl	8005690 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a6e:	4b19      	ldr	r3, [pc, #100]	; (8006ad4 <xTaskRemoveFromEventList+0xb0>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d903      	bls.n	8006a7e <xTaskRemoveFromEventList+0x5a>
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a7a:	4a16      	ldr	r2, [pc, #88]	; (8006ad4 <xTaskRemoveFromEventList+0xb0>)
 8006a7c:	6013      	str	r3, [r2, #0]
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a82:	4613      	mov	r3, r2
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	4413      	add	r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4a13      	ldr	r2, [pc, #76]	; (8006ad8 <xTaskRemoveFromEventList+0xb4>)
 8006a8c:	441a      	add	r2, r3
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	3304      	adds	r3, #4
 8006a92:	4619      	mov	r1, r3
 8006a94:	4610      	mov	r0, r2
 8006a96:	f7fe fd9e 	bl	80055d6 <vListInsertEnd>
 8006a9a:	e005      	b.n	8006aa8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	3318      	adds	r3, #24
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	480e      	ldr	r0, [pc, #56]	; (8006adc <xTaskRemoveFromEventList+0xb8>)
 8006aa4:	f7fe fd97 	bl	80055d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aac:	4b0c      	ldr	r3, [pc, #48]	; (8006ae0 <xTaskRemoveFromEventList+0xbc>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d905      	bls.n	8006ac2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006aba:	4b0a      	ldr	r3, [pc, #40]	; (8006ae4 <xTaskRemoveFromEventList+0xc0>)
 8006abc:	2201      	movs	r2, #1
 8006abe:	601a      	str	r2, [r3, #0]
 8006ac0:	e001      	b.n	8006ac6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006ac6:	697b      	ldr	r3, [r7, #20]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3718      	adds	r7, #24
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	20000eb0 	.word	0x20000eb0
 8006ad4:	20000e90 	.word	0x20000e90
 8006ad8:	200009b8 	.word	0x200009b8
 8006adc:	20000e48 	.word	0x20000e48
 8006ae0:	200009b4 	.word	0x200009b4
 8006ae4:	20000e9c 	.word	0x20000e9c

08006ae8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006af0:	4b06      	ldr	r3, [pc, #24]	; (8006b0c <vTaskInternalSetTimeOutState+0x24>)
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006af8:	4b05      	ldr	r3, [pc, #20]	; (8006b10 <vTaskInternalSetTimeOutState+0x28>)
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	605a      	str	r2, [r3, #4]
}
 8006b00:	bf00      	nop
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr
 8006b0c:	20000ea0 	.word	0x20000ea0
 8006b10:	20000e8c 	.word	0x20000e8c

08006b14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b088      	sub	sp, #32
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d109      	bne.n	8006b38 <xTaskCheckForTimeOut+0x24>
 8006b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b28:	f383 8811 	msr	BASEPRI, r3
 8006b2c:	f3bf 8f6f 	isb	sy
 8006b30:	f3bf 8f4f 	dsb	sy
 8006b34:	613b      	str	r3, [r7, #16]
 8006b36:	e7fe      	b.n	8006b36 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d109      	bne.n	8006b52 <xTaskCheckForTimeOut+0x3e>
 8006b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b42:	f383 8811 	msr	BASEPRI, r3
 8006b46:	f3bf 8f6f 	isb	sy
 8006b4a:	f3bf 8f4f 	dsb	sy
 8006b4e:	60fb      	str	r3, [r7, #12]
 8006b50:	e7fe      	b.n	8006b50 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006b52:	f000 fe6b 	bl	800782c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006b56:	4b1d      	ldr	r3, [pc, #116]	; (8006bcc <xTaskCheckForTimeOut+0xb8>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	69ba      	ldr	r2, [r7, #24]
 8006b62:	1ad3      	subs	r3, r2, r3
 8006b64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b6e:	d102      	bne.n	8006b76 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006b70:	2300      	movs	r3, #0
 8006b72:	61fb      	str	r3, [r7, #28]
 8006b74:	e023      	b.n	8006bbe <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	4b15      	ldr	r3, [pc, #84]	; (8006bd0 <xTaskCheckForTimeOut+0xbc>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d007      	beq.n	8006b92 <xTaskCheckForTimeOut+0x7e>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	69ba      	ldr	r2, [r7, #24]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d302      	bcc.n	8006b92 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	61fb      	str	r3, [r7, #28]
 8006b90:	e015      	b.n	8006bbe <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	697a      	ldr	r2, [r7, #20]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d20b      	bcs.n	8006bb4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	1ad2      	subs	r2, r2, r3
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f7ff ff9d 	bl	8006ae8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	61fb      	str	r3, [r7, #28]
 8006bb2:	e004      	b.n	8006bbe <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006bbe:	f000 fe63 	bl	8007888 <vPortExitCritical>

	return xReturn;
 8006bc2:	69fb      	ldr	r3, [r7, #28]
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3720      	adds	r7, #32
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	20000e8c 	.word	0x20000e8c
 8006bd0:	20000ea0 	.word	0x20000ea0

08006bd4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006bd8:	4b03      	ldr	r3, [pc, #12]	; (8006be8 <vTaskMissedYield+0x14>)
 8006bda:	2201      	movs	r2, #1
 8006bdc:	601a      	str	r2, [r3, #0]
}
 8006bde:	bf00      	nop
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr
 8006be8:	20000e9c 	.word	0x20000e9c

08006bec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006bf4:	f000 f852 	bl	8006c9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006bf8:	4b06      	ldr	r3, [pc, #24]	; (8006c14 <prvIdleTask+0x28>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d9f9      	bls.n	8006bf4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006c00:	4b05      	ldr	r3, [pc, #20]	; (8006c18 <prvIdleTask+0x2c>)
 8006c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c06:	601a      	str	r2, [r3, #0]
 8006c08:	f3bf 8f4f 	dsb	sy
 8006c0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006c10:	e7f0      	b.n	8006bf4 <prvIdleTask+0x8>
 8006c12:	bf00      	nop
 8006c14:	200009b8 	.word	0x200009b8
 8006c18:	e000ed04 	.word	0xe000ed04

08006c1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c22:	2300      	movs	r3, #0
 8006c24:	607b      	str	r3, [r7, #4]
 8006c26:	e00c      	b.n	8006c42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	4413      	add	r3, r2
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	4a12      	ldr	r2, [pc, #72]	; (8006c7c <prvInitialiseTaskLists+0x60>)
 8006c34:	4413      	add	r3, r2
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7fe fca0 	bl	800557c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	3301      	adds	r3, #1
 8006c40:	607b      	str	r3, [r7, #4]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2b37      	cmp	r3, #55	; 0x37
 8006c46:	d9ef      	bls.n	8006c28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006c48:	480d      	ldr	r0, [pc, #52]	; (8006c80 <prvInitialiseTaskLists+0x64>)
 8006c4a:	f7fe fc97 	bl	800557c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006c4e:	480d      	ldr	r0, [pc, #52]	; (8006c84 <prvInitialiseTaskLists+0x68>)
 8006c50:	f7fe fc94 	bl	800557c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006c54:	480c      	ldr	r0, [pc, #48]	; (8006c88 <prvInitialiseTaskLists+0x6c>)
 8006c56:	f7fe fc91 	bl	800557c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006c5a:	480c      	ldr	r0, [pc, #48]	; (8006c8c <prvInitialiseTaskLists+0x70>)
 8006c5c:	f7fe fc8e 	bl	800557c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006c60:	480b      	ldr	r0, [pc, #44]	; (8006c90 <prvInitialiseTaskLists+0x74>)
 8006c62:	f7fe fc8b 	bl	800557c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006c66:	4b0b      	ldr	r3, [pc, #44]	; (8006c94 <prvInitialiseTaskLists+0x78>)
 8006c68:	4a05      	ldr	r2, [pc, #20]	; (8006c80 <prvInitialiseTaskLists+0x64>)
 8006c6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c6c:	4b0a      	ldr	r3, [pc, #40]	; (8006c98 <prvInitialiseTaskLists+0x7c>)
 8006c6e:	4a05      	ldr	r2, [pc, #20]	; (8006c84 <prvInitialiseTaskLists+0x68>)
 8006c70:	601a      	str	r2, [r3, #0]
}
 8006c72:	bf00      	nop
 8006c74:	3708      	adds	r7, #8
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	200009b8 	.word	0x200009b8
 8006c80:	20000e18 	.word	0x20000e18
 8006c84:	20000e2c 	.word	0x20000e2c
 8006c88:	20000e48 	.word	0x20000e48
 8006c8c:	20000e5c 	.word	0x20000e5c
 8006c90:	20000e74 	.word	0x20000e74
 8006c94:	20000e40 	.word	0x20000e40
 8006c98:	20000e44 	.word	0x20000e44

08006c9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ca2:	e019      	b.n	8006cd8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006ca4:	f000 fdc2 	bl	800782c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ca8:	4b0f      	ldr	r3, [pc, #60]	; (8006ce8 <prvCheckTasksWaitingTermination+0x4c>)
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	3304      	adds	r3, #4
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f7fe fceb 	bl	8005690 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006cba:	4b0c      	ldr	r3, [pc, #48]	; (8006cec <prvCheckTasksWaitingTermination+0x50>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	4a0a      	ldr	r2, [pc, #40]	; (8006cec <prvCheckTasksWaitingTermination+0x50>)
 8006cc2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006cc4:	4b0a      	ldr	r3, [pc, #40]	; (8006cf0 <prvCheckTasksWaitingTermination+0x54>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	3b01      	subs	r3, #1
 8006cca:	4a09      	ldr	r2, [pc, #36]	; (8006cf0 <prvCheckTasksWaitingTermination+0x54>)
 8006ccc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006cce:	f000 fddb 	bl	8007888 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 f80e 	bl	8006cf4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006cd8:	4b05      	ldr	r3, [pc, #20]	; (8006cf0 <prvCheckTasksWaitingTermination+0x54>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d1e1      	bne.n	8006ca4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ce0:	bf00      	nop
 8006ce2:	3708      	adds	r7, #8
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	20000e5c 	.word	0x20000e5c
 8006cec:	20000e88 	.word	0x20000e88
 8006cf0:	20000e70 	.word	0x20000e70

08006cf4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d108      	bne.n	8006d18 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f000 ff6a 	bl	8007be4 <vPortFree>
				vPortFree( pxTCB );
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 ff67 	bl	8007be4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d16:	e017      	b.n	8006d48 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d103      	bne.n	8006d2a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 ff5e 	bl	8007be4 <vPortFree>
	}
 8006d28:	e00e      	b.n	8006d48 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006d30:	2b02      	cmp	r3, #2
 8006d32:	d009      	beq.n	8006d48 <prvDeleteTCB+0x54>
 8006d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d38:	f383 8811 	msr	BASEPRI, r3
 8006d3c:	f3bf 8f6f 	isb	sy
 8006d40:	f3bf 8f4f 	dsb	sy
 8006d44:	60fb      	str	r3, [r7, #12]
 8006d46:	e7fe      	b.n	8006d46 <prvDeleteTCB+0x52>
	}
 8006d48:	bf00      	nop
 8006d4a:	3710      	adds	r7, #16
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d56:	4b0c      	ldr	r3, [pc, #48]	; (8006d88 <prvResetNextTaskUnblockTime+0x38>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d104      	bne.n	8006d6a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d60:	4b0a      	ldr	r3, [pc, #40]	; (8006d8c <prvResetNextTaskUnblockTime+0x3c>)
 8006d62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d66:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006d68:	e008      	b.n	8006d7c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d6a:	4b07      	ldr	r3, [pc, #28]	; (8006d88 <prvResetNextTaskUnblockTime+0x38>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	4a04      	ldr	r2, [pc, #16]	; (8006d8c <prvResetNextTaskUnblockTime+0x3c>)
 8006d7a:	6013      	str	r3, [r2, #0]
}
 8006d7c:	bf00      	nop
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr
 8006d88:	20000e40 	.word	0x20000e40
 8006d8c:	20000ea8 	.word	0x20000ea8

08006d90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006d96:	4b0b      	ldr	r3, [pc, #44]	; (8006dc4 <xTaskGetSchedulerState+0x34>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d102      	bne.n	8006da4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	607b      	str	r3, [r7, #4]
 8006da2:	e008      	b.n	8006db6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006da4:	4b08      	ldr	r3, [pc, #32]	; (8006dc8 <xTaskGetSchedulerState+0x38>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d102      	bne.n	8006db2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006dac:	2302      	movs	r3, #2
 8006dae:	607b      	str	r3, [r7, #4]
 8006db0:	e001      	b.n	8006db6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006db2:	2300      	movs	r3, #0
 8006db4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006db6:	687b      	ldr	r3, [r7, #4]
	}
 8006db8:	4618      	mov	r0, r3
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr
 8006dc4:	20000e94 	.word	0x20000e94
 8006dc8:	20000eb0 	.word	0x20000eb0

08006dcc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b086      	sub	sp, #24
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d054      	beq.n	8006e8c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006de2:	4b2d      	ldr	r3, [pc, #180]	; (8006e98 <xTaskPriorityDisinherit+0xcc>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	693a      	ldr	r2, [r7, #16]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d009      	beq.n	8006e00 <xTaskPriorityDisinherit+0x34>
 8006dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df0:	f383 8811 	msr	BASEPRI, r3
 8006df4:	f3bf 8f6f 	isb	sy
 8006df8:	f3bf 8f4f 	dsb	sy
 8006dfc:	60fb      	str	r3, [r7, #12]
 8006dfe:	e7fe      	b.n	8006dfe <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d109      	bne.n	8006e1c <xTaskPriorityDisinherit+0x50>
 8006e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0c:	f383 8811 	msr	BASEPRI, r3
 8006e10:	f3bf 8f6f 	isb	sy
 8006e14:	f3bf 8f4f 	dsb	sy
 8006e18:	60bb      	str	r3, [r7, #8]
 8006e1a:	e7fe      	b.n	8006e1a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e20:	1e5a      	subs	r2, r3, #1
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d02c      	beq.n	8006e8c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d128      	bne.n	8006e8c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	3304      	adds	r3, #4
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f7fe fc26 	bl	8005690 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e50:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e5c:	4b0f      	ldr	r3, [pc, #60]	; (8006e9c <xTaskPriorityDisinherit+0xd0>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d903      	bls.n	8006e6c <xTaskPriorityDisinherit+0xa0>
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e68:	4a0c      	ldr	r2, [pc, #48]	; (8006e9c <xTaskPriorityDisinherit+0xd0>)
 8006e6a:	6013      	str	r3, [r2, #0]
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e70:	4613      	mov	r3, r2
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	4413      	add	r3, r2
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	4a09      	ldr	r2, [pc, #36]	; (8006ea0 <xTaskPriorityDisinherit+0xd4>)
 8006e7a:	441a      	add	r2, r3
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	3304      	adds	r3, #4
 8006e80:	4619      	mov	r1, r3
 8006e82:	4610      	mov	r0, r2
 8006e84:	f7fe fba7 	bl	80055d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e8c:	697b      	ldr	r3, [r7, #20]
	}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3718      	adds	r7, #24
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	200009b4 	.word	0x200009b4
 8006e9c:	20000e90 	.word	0x20000e90
 8006ea0:	200009b8 	.word	0x200009b8

08006ea4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006eae:	4b21      	ldr	r3, [pc, #132]	; (8006f34 <prvAddCurrentTaskToDelayedList+0x90>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006eb4:	4b20      	ldr	r3, [pc, #128]	; (8006f38 <prvAddCurrentTaskToDelayedList+0x94>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	3304      	adds	r3, #4
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7fe fbe8 	bl	8005690 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ec6:	d10a      	bne.n	8006ede <prvAddCurrentTaskToDelayedList+0x3a>
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d007      	beq.n	8006ede <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ece:	4b1a      	ldr	r3, [pc, #104]	; (8006f38 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	3304      	adds	r3, #4
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	4819      	ldr	r0, [pc, #100]	; (8006f3c <prvAddCurrentTaskToDelayedList+0x98>)
 8006ed8:	f7fe fb7d 	bl	80055d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006edc:	e026      	b.n	8006f2c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006ee6:	4b14      	ldr	r3, [pc, #80]	; (8006f38 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	68ba      	ldr	r2, [r7, #8]
 8006eec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d209      	bcs.n	8006f0a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ef6:	4b12      	ldr	r3, [pc, #72]	; (8006f40 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	4b0f      	ldr	r3, [pc, #60]	; (8006f38 <prvAddCurrentTaskToDelayedList+0x94>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	3304      	adds	r3, #4
 8006f00:	4619      	mov	r1, r3
 8006f02:	4610      	mov	r0, r2
 8006f04:	f7fe fb8b 	bl	800561e <vListInsert>
}
 8006f08:	e010      	b.n	8006f2c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f0a:	4b0e      	ldr	r3, [pc, #56]	; (8006f44 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	4b0a      	ldr	r3, [pc, #40]	; (8006f38 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	3304      	adds	r3, #4
 8006f14:	4619      	mov	r1, r3
 8006f16:	4610      	mov	r0, r2
 8006f18:	f7fe fb81 	bl	800561e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006f1c:	4b0a      	ldr	r3, [pc, #40]	; (8006f48 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68ba      	ldr	r2, [r7, #8]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d202      	bcs.n	8006f2c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006f26:	4a08      	ldr	r2, [pc, #32]	; (8006f48 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	6013      	str	r3, [r2, #0]
}
 8006f2c:	bf00      	nop
 8006f2e:	3710      	adds	r7, #16
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	20000e8c 	.word	0x20000e8c
 8006f38:	200009b4 	.word	0x200009b4
 8006f3c:	20000e74 	.word	0x20000e74
 8006f40:	20000e44 	.word	0x20000e44
 8006f44:	20000e40 	.word	0x20000e40
 8006f48:	20000ea8 	.word	0x20000ea8

08006f4c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b08a      	sub	sp, #40	; 0x28
 8006f50:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006f52:	2300      	movs	r3, #0
 8006f54:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006f56:	f000 faff 	bl	8007558 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006f5a:	4b1c      	ldr	r3, [pc, #112]	; (8006fcc <xTimerCreateTimerTask+0x80>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d021      	beq.n	8006fa6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006f62:	2300      	movs	r3, #0
 8006f64:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006f66:	2300      	movs	r3, #0
 8006f68:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006f6a:	1d3a      	adds	r2, r7, #4
 8006f6c:	f107 0108 	add.w	r1, r7, #8
 8006f70:	f107 030c 	add.w	r3, r7, #12
 8006f74:	4618      	mov	r0, r3
 8006f76:	f7fe fae7 	bl	8005548 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006f7a:	6879      	ldr	r1, [r7, #4]
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	9202      	str	r2, [sp, #8]
 8006f82:	9301      	str	r3, [sp, #4]
 8006f84:	2302      	movs	r3, #2
 8006f86:	9300      	str	r3, [sp, #0]
 8006f88:	2300      	movs	r3, #0
 8006f8a:	460a      	mov	r2, r1
 8006f8c:	4910      	ldr	r1, [pc, #64]	; (8006fd0 <xTimerCreateTimerTask+0x84>)
 8006f8e:	4811      	ldr	r0, [pc, #68]	; (8006fd4 <xTimerCreateTimerTask+0x88>)
 8006f90:	f7ff f87c 	bl	800608c <xTaskCreateStatic>
 8006f94:	4602      	mov	r2, r0
 8006f96:	4b10      	ldr	r3, [pc, #64]	; (8006fd8 <xTimerCreateTimerTask+0x8c>)
 8006f98:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006f9a:	4b0f      	ldr	r3, [pc, #60]	; (8006fd8 <xTimerCreateTimerTask+0x8c>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d001      	beq.n	8006fa6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d109      	bne.n	8006fc0 <xTimerCreateTimerTask+0x74>
 8006fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb0:	f383 8811 	msr	BASEPRI, r3
 8006fb4:	f3bf 8f6f 	isb	sy
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	613b      	str	r3, [r7, #16]
 8006fbe:	e7fe      	b.n	8006fbe <xTimerCreateTimerTask+0x72>
	return xReturn;
 8006fc0:	697b      	ldr	r3, [r7, #20]
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3718      	adds	r7, #24
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	20000ee4 	.word	0x20000ee4
 8006fd0:	08009de0 	.word	0x08009de0
 8006fd4:	0800710d 	.word	0x0800710d
 8006fd8:	20000ee8 	.word	0x20000ee8

08006fdc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b08a      	sub	sp, #40	; 0x28
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	607a      	str	r2, [r7, #4]
 8006fe8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006fea:	2300      	movs	r3, #0
 8006fec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d109      	bne.n	8007008 <xTimerGenericCommand+0x2c>
 8006ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff8:	f383 8811 	msr	BASEPRI, r3
 8006ffc:	f3bf 8f6f 	isb	sy
 8007000:	f3bf 8f4f 	dsb	sy
 8007004:	623b      	str	r3, [r7, #32]
 8007006:	e7fe      	b.n	8007006 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007008:	4b19      	ldr	r3, [pc, #100]	; (8007070 <xTimerGenericCommand+0x94>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d02a      	beq.n	8007066 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	2b05      	cmp	r3, #5
 8007020:	dc18      	bgt.n	8007054 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007022:	f7ff feb5 	bl	8006d90 <xTaskGetSchedulerState>
 8007026:	4603      	mov	r3, r0
 8007028:	2b02      	cmp	r3, #2
 800702a:	d109      	bne.n	8007040 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800702c:	4b10      	ldr	r3, [pc, #64]	; (8007070 <xTimerGenericCommand+0x94>)
 800702e:	6818      	ldr	r0, [r3, #0]
 8007030:	f107 0110 	add.w	r1, r7, #16
 8007034:	2300      	movs	r3, #0
 8007036:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007038:	f7fe fc52 	bl	80058e0 <xQueueGenericSend>
 800703c:	6278      	str	r0, [r7, #36]	; 0x24
 800703e:	e012      	b.n	8007066 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007040:	4b0b      	ldr	r3, [pc, #44]	; (8007070 <xTimerGenericCommand+0x94>)
 8007042:	6818      	ldr	r0, [r3, #0]
 8007044:	f107 0110 	add.w	r1, r7, #16
 8007048:	2300      	movs	r3, #0
 800704a:	2200      	movs	r2, #0
 800704c:	f7fe fc48 	bl	80058e0 <xQueueGenericSend>
 8007050:	6278      	str	r0, [r7, #36]	; 0x24
 8007052:	e008      	b.n	8007066 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007054:	4b06      	ldr	r3, [pc, #24]	; (8007070 <xTimerGenericCommand+0x94>)
 8007056:	6818      	ldr	r0, [r3, #0]
 8007058:	f107 0110 	add.w	r1, r7, #16
 800705c:	2300      	movs	r3, #0
 800705e:	683a      	ldr	r2, [r7, #0]
 8007060:	f7fe fd38 	bl	8005ad4 <xQueueGenericSendFromISR>
 8007064:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007068:	4618      	mov	r0, r3
 800706a:	3728      	adds	r7, #40	; 0x28
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	20000ee4 	.word	0x20000ee4

08007074 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b088      	sub	sp, #32
 8007078:	af02      	add	r7, sp, #8
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800707e:	4b22      	ldr	r3, [pc, #136]	; (8007108 <prvProcessExpiredTimer+0x94>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	3304      	adds	r3, #4
 800708c:	4618      	mov	r0, r3
 800708e:	f7fe faff 	bl	8005690 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007098:	f003 0304 	and.w	r3, r3, #4
 800709c:	2b00      	cmp	r3, #0
 800709e:	d021      	beq.n	80070e4 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	699a      	ldr	r2, [r3, #24]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	18d1      	adds	r1, r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	683a      	ldr	r2, [r7, #0]
 80070ac:	6978      	ldr	r0, [r7, #20]
 80070ae:	f000 f8d1 	bl	8007254 <prvInsertTimerInActiveList>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d01e      	beq.n	80070f6 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80070b8:	2300      	movs	r3, #0
 80070ba:	9300      	str	r3, [sp, #0]
 80070bc:	2300      	movs	r3, #0
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	2100      	movs	r1, #0
 80070c2:	6978      	ldr	r0, [r7, #20]
 80070c4:	f7ff ff8a 	bl	8006fdc <xTimerGenericCommand>
 80070c8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d112      	bne.n	80070f6 <prvProcessExpiredTimer+0x82>
 80070d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d4:	f383 8811 	msr	BASEPRI, r3
 80070d8:	f3bf 8f6f 	isb	sy
 80070dc:	f3bf 8f4f 	dsb	sy
 80070e0:	60fb      	str	r3, [r7, #12]
 80070e2:	e7fe      	b.n	80070e2 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070ea:	f023 0301 	bic.w	r3, r3, #1
 80070ee:	b2da      	uxtb	r2, r3
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	6a1b      	ldr	r3, [r3, #32]
 80070fa:	6978      	ldr	r0, [r7, #20]
 80070fc:	4798      	blx	r3
}
 80070fe:	bf00      	nop
 8007100:	3718      	adds	r7, #24
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	20000edc 	.word	0x20000edc

0800710c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007114:	f107 0308 	add.w	r3, r7, #8
 8007118:	4618      	mov	r0, r3
 800711a:	f000 f857 	bl	80071cc <prvGetNextExpireTime>
 800711e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	4619      	mov	r1, r3
 8007124:	68f8      	ldr	r0, [r7, #12]
 8007126:	f000 f803 	bl	8007130 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800712a:	f000 f8d5 	bl	80072d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800712e:	e7f1      	b.n	8007114 <prvTimerTask+0x8>

08007130 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800713a:	f7ff fa57 	bl	80065ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800713e:	f107 0308 	add.w	r3, r7, #8
 8007142:	4618      	mov	r0, r3
 8007144:	f000 f866 	bl	8007214 <prvSampleTimeNow>
 8007148:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d130      	bne.n	80071b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d10a      	bne.n	800716c <prvProcessTimerOrBlockTask+0x3c>
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	429a      	cmp	r2, r3
 800715c:	d806      	bhi.n	800716c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800715e:	f7ff fa53 	bl	8006608 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007162:	68f9      	ldr	r1, [r7, #12]
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f7ff ff85 	bl	8007074 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800716a:	e024      	b.n	80071b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d008      	beq.n	8007184 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007172:	4b13      	ldr	r3, [pc, #76]	; (80071c0 <prvProcessTimerOrBlockTask+0x90>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d101      	bne.n	8007180 <prvProcessTimerOrBlockTask+0x50>
 800717c:	2301      	movs	r3, #1
 800717e:	e000      	b.n	8007182 <prvProcessTimerOrBlockTask+0x52>
 8007180:	2300      	movs	r3, #0
 8007182:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007184:	4b0f      	ldr	r3, [pc, #60]	; (80071c4 <prvProcessTimerOrBlockTask+0x94>)
 8007186:	6818      	ldr	r0, [r3, #0]
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	1ad3      	subs	r3, r2, r3
 800718e:	683a      	ldr	r2, [r7, #0]
 8007190:	4619      	mov	r1, r3
 8007192:	f7fe ff47 	bl	8006024 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007196:	f7ff fa37 	bl	8006608 <xTaskResumeAll>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d10a      	bne.n	80071b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80071a0:	4b09      	ldr	r3, [pc, #36]	; (80071c8 <prvProcessTimerOrBlockTask+0x98>)
 80071a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071a6:	601a      	str	r2, [r3, #0]
 80071a8:	f3bf 8f4f 	dsb	sy
 80071ac:	f3bf 8f6f 	isb	sy
}
 80071b0:	e001      	b.n	80071b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80071b2:	f7ff fa29 	bl	8006608 <xTaskResumeAll>
}
 80071b6:	bf00      	nop
 80071b8:	3710      	adds	r7, #16
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	20000ee0 	.word	0x20000ee0
 80071c4:	20000ee4 	.word	0x20000ee4
 80071c8:	e000ed04 	.word	0xe000ed04

080071cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80071cc:	b480      	push	{r7}
 80071ce:	b085      	sub	sp, #20
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80071d4:	4b0e      	ldr	r3, [pc, #56]	; (8007210 <prvGetNextExpireTime+0x44>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d101      	bne.n	80071e2 <prvGetNextExpireTime+0x16>
 80071de:	2201      	movs	r2, #1
 80071e0:	e000      	b.n	80071e4 <prvGetNextExpireTime+0x18>
 80071e2:	2200      	movs	r2, #0
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d105      	bne.n	80071fc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071f0:	4b07      	ldr	r3, [pc, #28]	; (8007210 <prvGetNextExpireTime+0x44>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	60fb      	str	r3, [r7, #12]
 80071fa:	e001      	b.n	8007200 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80071fc:	2300      	movs	r3, #0
 80071fe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007200:	68fb      	ldr	r3, [r7, #12]
}
 8007202:	4618      	mov	r0, r3
 8007204:	3714      	adds	r7, #20
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr
 800720e:	bf00      	nop
 8007210:	20000edc 	.word	0x20000edc

08007214 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800721c:	f7ff fa90 	bl	8006740 <xTaskGetTickCount>
 8007220:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007222:	4b0b      	ldr	r3, [pc, #44]	; (8007250 <prvSampleTimeNow+0x3c>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	429a      	cmp	r2, r3
 800722a:	d205      	bcs.n	8007238 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800722c:	f000 f930 	bl	8007490 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	601a      	str	r2, [r3, #0]
 8007236:	e002      	b.n	800723e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800723e:	4a04      	ldr	r2, [pc, #16]	; (8007250 <prvSampleTimeNow+0x3c>)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007244:	68fb      	ldr	r3, [r7, #12]
}
 8007246:	4618      	mov	r0, r3
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	20000eec 	.word	0x20000eec

08007254 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b086      	sub	sp, #24
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	607a      	str	r2, [r7, #4]
 8007260:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007262:	2300      	movs	r3, #0
 8007264:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	68ba      	ldr	r2, [r7, #8]
 800726a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007272:	68ba      	ldr	r2, [r7, #8]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	429a      	cmp	r2, r3
 8007278:	d812      	bhi.n	80072a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	1ad2      	subs	r2, r2, r3
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	699b      	ldr	r3, [r3, #24]
 8007284:	429a      	cmp	r2, r3
 8007286:	d302      	bcc.n	800728e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007288:	2301      	movs	r3, #1
 800728a:	617b      	str	r3, [r7, #20]
 800728c:	e01b      	b.n	80072c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800728e:	4b10      	ldr	r3, [pc, #64]	; (80072d0 <prvInsertTimerInActiveList+0x7c>)
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	3304      	adds	r3, #4
 8007296:	4619      	mov	r1, r3
 8007298:	4610      	mov	r0, r2
 800729a:	f7fe f9c0 	bl	800561e <vListInsert>
 800729e:	e012      	b.n	80072c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d206      	bcs.n	80072b6 <prvInsertTimerInActiveList+0x62>
 80072a8:	68ba      	ldr	r2, [r7, #8]
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d302      	bcc.n	80072b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80072b0:	2301      	movs	r3, #1
 80072b2:	617b      	str	r3, [r7, #20]
 80072b4:	e007      	b.n	80072c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80072b6:	4b07      	ldr	r3, [pc, #28]	; (80072d4 <prvInsertTimerInActiveList+0x80>)
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	3304      	adds	r3, #4
 80072be:	4619      	mov	r1, r3
 80072c0:	4610      	mov	r0, r2
 80072c2:	f7fe f9ac 	bl	800561e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80072c6:	697b      	ldr	r3, [r7, #20]
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3718      	adds	r7, #24
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	20000ee0 	.word	0x20000ee0
 80072d4:	20000edc 	.word	0x20000edc

080072d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b08e      	sub	sp, #56	; 0x38
 80072dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80072de:	e0c6      	b.n	800746e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	da17      	bge.n	8007316 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80072e6:	1d3b      	adds	r3, r7, #4
 80072e8:	3304      	adds	r3, #4
 80072ea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80072ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d109      	bne.n	8007306 <prvProcessReceivedCommands+0x2e>
 80072f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f6:	f383 8811 	msr	BASEPRI, r3
 80072fa:	f3bf 8f6f 	isb	sy
 80072fe:	f3bf 8f4f 	dsb	sy
 8007302:	61fb      	str	r3, [r7, #28]
 8007304:	e7fe      	b.n	8007304 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800730c:	6850      	ldr	r0, [r2, #4]
 800730e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007310:	6892      	ldr	r2, [r2, #8]
 8007312:	4611      	mov	r1, r2
 8007314:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2b00      	cmp	r3, #0
 800731a:	f2c0 80a7 	blt.w	800746c <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007324:	695b      	ldr	r3, [r3, #20]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d004      	beq.n	8007334 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800732a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732c:	3304      	adds	r3, #4
 800732e:	4618      	mov	r0, r3
 8007330:	f7fe f9ae 	bl	8005690 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007334:	463b      	mov	r3, r7
 8007336:	4618      	mov	r0, r3
 8007338:	f7ff ff6c 	bl	8007214 <prvSampleTimeNow>
 800733c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2b09      	cmp	r3, #9
 8007342:	f200 8094 	bhi.w	800746e <prvProcessReceivedCommands+0x196>
 8007346:	a201      	add	r2, pc, #4	; (adr r2, 800734c <prvProcessReceivedCommands+0x74>)
 8007348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800734c:	08007375 	.word	0x08007375
 8007350:	08007375 	.word	0x08007375
 8007354:	08007375 	.word	0x08007375
 8007358:	080073e7 	.word	0x080073e7
 800735c:	080073fb 	.word	0x080073fb
 8007360:	08007443 	.word	0x08007443
 8007364:	08007375 	.word	0x08007375
 8007368:	08007375 	.word	0x08007375
 800736c:	080073e7 	.word	0x080073e7
 8007370:	080073fb 	.word	0x080073fb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007376:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800737a:	f043 0301 	orr.w	r3, r3, #1
 800737e:	b2da      	uxtb	r2, r3
 8007380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007382:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007386:	68ba      	ldr	r2, [r7, #8]
 8007388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800738a:	699b      	ldr	r3, [r3, #24]
 800738c:	18d1      	adds	r1, r2, r3
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007392:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007394:	f7ff ff5e 	bl	8007254 <prvInsertTimerInActiveList>
 8007398:	4603      	mov	r3, r0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d067      	beq.n	800746e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800739e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a0:	6a1b      	ldr	r3, [r3, #32]
 80073a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80073a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073ac:	f003 0304 	and.w	r3, r3, #4
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d05c      	beq.n	800746e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80073b4:	68ba      	ldr	r2, [r7, #8]
 80073b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b8:	699b      	ldr	r3, [r3, #24]
 80073ba:	441a      	add	r2, r3
 80073bc:	2300      	movs	r3, #0
 80073be:	9300      	str	r3, [sp, #0]
 80073c0:	2300      	movs	r3, #0
 80073c2:	2100      	movs	r1, #0
 80073c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073c6:	f7ff fe09 	bl	8006fdc <xTimerGenericCommand>
 80073ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80073cc:	6a3b      	ldr	r3, [r7, #32]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d14d      	bne.n	800746e <prvProcessReceivedCommands+0x196>
 80073d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d6:	f383 8811 	msr	BASEPRI, r3
 80073da:	f3bf 8f6f 	isb	sy
 80073de:	f3bf 8f4f 	dsb	sy
 80073e2:	61bb      	str	r3, [r7, #24]
 80073e4:	e7fe      	b.n	80073e4 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80073e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073ec:	f023 0301 	bic.w	r3, r3, #1
 80073f0:	b2da      	uxtb	r2, r3
 80073f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80073f8:	e039      	b.n	800746e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80073fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007400:	f043 0301 	orr.w	r3, r3, #1
 8007404:	b2da      	uxtb	r2, r3
 8007406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007408:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800740c:	68ba      	ldr	r2, [r7, #8]
 800740e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007410:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007414:	699b      	ldr	r3, [r3, #24]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d109      	bne.n	800742e <prvProcessReceivedCommands+0x156>
 800741a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800741e:	f383 8811 	msr	BASEPRI, r3
 8007422:	f3bf 8f6f 	isb	sy
 8007426:	f3bf 8f4f 	dsb	sy
 800742a:	617b      	str	r3, [r7, #20]
 800742c:	e7fe      	b.n	800742c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800742e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007430:	699a      	ldr	r2, [r3, #24]
 8007432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007434:	18d1      	adds	r1, r2, r3
 8007436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800743a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800743c:	f7ff ff0a 	bl	8007254 <prvInsertTimerInActiveList>
					break;
 8007440:	e015      	b.n	800746e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007444:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007448:	f003 0302 	and.w	r3, r3, #2
 800744c:	2b00      	cmp	r3, #0
 800744e:	d103      	bne.n	8007458 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8007450:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007452:	f000 fbc7 	bl	8007be4 <vPortFree>
 8007456:	e00a      	b.n	800746e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800745e:	f023 0301 	bic.w	r3, r3, #1
 8007462:	b2da      	uxtb	r2, r3
 8007464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007466:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800746a:	e000      	b.n	800746e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800746c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800746e:	4b07      	ldr	r3, [pc, #28]	; (800748c <prvProcessReceivedCommands+0x1b4>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	1d39      	adds	r1, r7, #4
 8007474:	2200      	movs	r2, #0
 8007476:	4618      	mov	r0, r3
 8007478:	f7fe fbc0 	bl	8005bfc <xQueueReceive>
 800747c:	4603      	mov	r3, r0
 800747e:	2b00      	cmp	r3, #0
 8007480:	f47f af2e 	bne.w	80072e0 <prvProcessReceivedCommands+0x8>
	}
}
 8007484:	bf00      	nop
 8007486:	3730      	adds	r7, #48	; 0x30
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	20000ee4 	.word	0x20000ee4

08007490 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b088      	sub	sp, #32
 8007494:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007496:	e047      	b.n	8007528 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007498:	4b2d      	ldr	r3, [pc, #180]	; (8007550 <prvSwitchTimerLists+0xc0>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074a2:	4b2b      	ldr	r3, [pc, #172]	; (8007550 <prvSwitchTimerLists+0xc0>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	3304      	adds	r3, #4
 80074b0:	4618      	mov	r0, r3
 80074b2:	f7fe f8ed 	bl	8005690 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6a1b      	ldr	r3, [r3, #32]
 80074ba:	68f8      	ldr	r0, [r7, #12]
 80074bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074c4:	f003 0304 	and.w	r3, r3, #4
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d02d      	beq.n	8007528 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	699b      	ldr	r3, [r3, #24]
 80074d0:	693a      	ldr	r2, [r7, #16]
 80074d2:	4413      	add	r3, r2
 80074d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80074d6:	68ba      	ldr	r2, [r7, #8]
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d90e      	bls.n	80074fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	68ba      	ldr	r2, [r7, #8]
 80074e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	68fa      	ldr	r2, [r7, #12]
 80074e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80074ea:	4b19      	ldr	r3, [pc, #100]	; (8007550 <prvSwitchTimerLists+0xc0>)
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	3304      	adds	r3, #4
 80074f2:	4619      	mov	r1, r3
 80074f4:	4610      	mov	r0, r2
 80074f6:	f7fe f892 	bl	800561e <vListInsert>
 80074fa:	e015      	b.n	8007528 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80074fc:	2300      	movs	r3, #0
 80074fe:	9300      	str	r3, [sp, #0]
 8007500:	2300      	movs	r3, #0
 8007502:	693a      	ldr	r2, [r7, #16]
 8007504:	2100      	movs	r1, #0
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f7ff fd68 	bl	8006fdc <xTimerGenericCommand>
 800750c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d109      	bne.n	8007528 <prvSwitchTimerLists+0x98>
 8007514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007518:	f383 8811 	msr	BASEPRI, r3
 800751c:	f3bf 8f6f 	isb	sy
 8007520:	f3bf 8f4f 	dsb	sy
 8007524:	603b      	str	r3, [r7, #0]
 8007526:	e7fe      	b.n	8007526 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007528:	4b09      	ldr	r3, [pc, #36]	; (8007550 <prvSwitchTimerLists+0xc0>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d1b2      	bne.n	8007498 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007532:	4b07      	ldr	r3, [pc, #28]	; (8007550 <prvSwitchTimerLists+0xc0>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007538:	4b06      	ldr	r3, [pc, #24]	; (8007554 <prvSwitchTimerLists+0xc4>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a04      	ldr	r2, [pc, #16]	; (8007550 <prvSwitchTimerLists+0xc0>)
 800753e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007540:	4a04      	ldr	r2, [pc, #16]	; (8007554 <prvSwitchTimerLists+0xc4>)
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	6013      	str	r3, [r2, #0]
}
 8007546:	bf00      	nop
 8007548:	3718      	adds	r7, #24
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	20000edc 	.word	0x20000edc
 8007554:	20000ee0 	.word	0x20000ee0

08007558 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800755e:	f000 f965 	bl	800782c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007562:	4b15      	ldr	r3, [pc, #84]	; (80075b8 <prvCheckForValidListAndQueue+0x60>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d120      	bne.n	80075ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800756a:	4814      	ldr	r0, [pc, #80]	; (80075bc <prvCheckForValidListAndQueue+0x64>)
 800756c:	f7fe f806 	bl	800557c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007570:	4813      	ldr	r0, [pc, #76]	; (80075c0 <prvCheckForValidListAndQueue+0x68>)
 8007572:	f7fe f803 	bl	800557c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007576:	4b13      	ldr	r3, [pc, #76]	; (80075c4 <prvCheckForValidListAndQueue+0x6c>)
 8007578:	4a10      	ldr	r2, [pc, #64]	; (80075bc <prvCheckForValidListAndQueue+0x64>)
 800757a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800757c:	4b12      	ldr	r3, [pc, #72]	; (80075c8 <prvCheckForValidListAndQueue+0x70>)
 800757e:	4a10      	ldr	r2, [pc, #64]	; (80075c0 <prvCheckForValidListAndQueue+0x68>)
 8007580:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007582:	2300      	movs	r3, #0
 8007584:	9300      	str	r3, [sp, #0]
 8007586:	4b11      	ldr	r3, [pc, #68]	; (80075cc <prvCheckForValidListAndQueue+0x74>)
 8007588:	4a11      	ldr	r2, [pc, #68]	; (80075d0 <prvCheckForValidListAndQueue+0x78>)
 800758a:	2110      	movs	r1, #16
 800758c:	200a      	movs	r0, #10
 800758e:	f7fe f911 	bl	80057b4 <xQueueGenericCreateStatic>
 8007592:	4602      	mov	r2, r0
 8007594:	4b08      	ldr	r3, [pc, #32]	; (80075b8 <prvCheckForValidListAndQueue+0x60>)
 8007596:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007598:	4b07      	ldr	r3, [pc, #28]	; (80075b8 <prvCheckForValidListAndQueue+0x60>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d005      	beq.n	80075ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80075a0:	4b05      	ldr	r3, [pc, #20]	; (80075b8 <prvCheckForValidListAndQueue+0x60>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	490b      	ldr	r1, [pc, #44]	; (80075d4 <prvCheckForValidListAndQueue+0x7c>)
 80075a6:	4618      	mov	r0, r3
 80075a8:	f7fe fd14 	bl	8005fd4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80075ac:	f000 f96c 	bl	8007888 <vPortExitCritical>
}
 80075b0:	bf00      	nop
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop
 80075b8:	20000ee4 	.word	0x20000ee4
 80075bc:	20000eb4 	.word	0x20000eb4
 80075c0:	20000ec8 	.word	0x20000ec8
 80075c4:	20000edc 	.word	0x20000edc
 80075c8:	20000ee0 	.word	0x20000ee0
 80075cc:	20000f90 	.word	0x20000f90
 80075d0:	20000ef0 	.word	0x20000ef0
 80075d4:	08009de8 	.word	0x08009de8

080075d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80075d8:	b480      	push	{r7}
 80075da:	b085      	sub	sp, #20
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	3b04      	subs	r3, #4
 80075e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80075f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	3b04      	subs	r3, #4
 80075f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	f023 0201 	bic.w	r2, r3, #1
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	3b04      	subs	r3, #4
 8007606:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007608:	4a0c      	ldr	r2, [pc, #48]	; (800763c <pxPortInitialiseStack+0x64>)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	3b14      	subs	r3, #20
 8007612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	3b04      	subs	r3, #4
 800761e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f06f 0202 	mvn.w	r2, #2
 8007626:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	3b20      	subs	r3, #32
 800762c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800762e:	68fb      	ldr	r3, [r7, #12]
}
 8007630:	4618      	mov	r0, r3
 8007632:	3714      	adds	r7, #20
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr
 800763c:	08007641 	.word	0x08007641

08007640 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007640:	b480      	push	{r7}
 8007642:	b085      	sub	sp, #20
 8007644:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007646:	2300      	movs	r3, #0
 8007648:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800764a:	4b11      	ldr	r3, [pc, #68]	; (8007690 <prvTaskExitError+0x50>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007652:	d009      	beq.n	8007668 <prvTaskExitError+0x28>
 8007654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007658:	f383 8811 	msr	BASEPRI, r3
 800765c:	f3bf 8f6f 	isb	sy
 8007660:	f3bf 8f4f 	dsb	sy
 8007664:	60fb      	str	r3, [r7, #12]
 8007666:	e7fe      	b.n	8007666 <prvTaskExitError+0x26>
 8007668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766c:	f383 8811 	msr	BASEPRI, r3
 8007670:	f3bf 8f6f 	isb	sy
 8007674:	f3bf 8f4f 	dsb	sy
 8007678:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800767a:	bf00      	nop
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d0fc      	beq.n	800767c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007682:	bf00      	nop
 8007684:	3714      	adds	r7, #20
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr
 800768e:	bf00      	nop
 8007690:	2000000c 	.word	0x2000000c
	...

080076a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80076a0:	4b07      	ldr	r3, [pc, #28]	; (80076c0 <pxCurrentTCBConst2>)
 80076a2:	6819      	ldr	r1, [r3, #0]
 80076a4:	6808      	ldr	r0, [r1, #0]
 80076a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076aa:	f380 8809 	msr	PSP, r0
 80076ae:	f3bf 8f6f 	isb	sy
 80076b2:	f04f 0000 	mov.w	r0, #0
 80076b6:	f380 8811 	msr	BASEPRI, r0
 80076ba:	4770      	bx	lr
 80076bc:	f3af 8000 	nop.w

080076c0 <pxCurrentTCBConst2>:
 80076c0:	200009b4 	.word	0x200009b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80076c4:	bf00      	nop
 80076c6:	bf00      	nop

080076c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80076c8:	4808      	ldr	r0, [pc, #32]	; (80076ec <prvPortStartFirstTask+0x24>)
 80076ca:	6800      	ldr	r0, [r0, #0]
 80076cc:	6800      	ldr	r0, [r0, #0]
 80076ce:	f380 8808 	msr	MSP, r0
 80076d2:	f04f 0000 	mov.w	r0, #0
 80076d6:	f380 8814 	msr	CONTROL, r0
 80076da:	b662      	cpsie	i
 80076dc:	b661      	cpsie	f
 80076de:	f3bf 8f4f 	dsb	sy
 80076e2:	f3bf 8f6f 	isb	sy
 80076e6:	df00      	svc	0
 80076e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80076ea:	bf00      	nop
 80076ec:	e000ed08 	.word	0xe000ed08

080076f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b086      	sub	sp, #24
 80076f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80076f6:	4b44      	ldr	r3, [pc, #272]	; (8007808 <xPortStartScheduler+0x118>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a44      	ldr	r2, [pc, #272]	; (800780c <xPortStartScheduler+0x11c>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d109      	bne.n	8007714 <xPortStartScheduler+0x24>
 8007700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007704:	f383 8811 	msr	BASEPRI, r3
 8007708:	f3bf 8f6f 	isb	sy
 800770c:	f3bf 8f4f 	dsb	sy
 8007710:	613b      	str	r3, [r7, #16]
 8007712:	e7fe      	b.n	8007712 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007714:	4b3c      	ldr	r3, [pc, #240]	; (8007808 <xPortStartScheduler+0x118>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a3d      	ldr	r2, [pc, #244]	; (8007810 <xPortStartScheduler+0x120>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d109      	bne.n	8007732 <xPortStartScheduler+0x42>
 800771e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007722:	f383 8811 	msr	BASEPRI, r3
 8007726:	f3bf 8f6f 	isb	sy
 800772a:	f3bf 8f4f 	dsb	sy
 800772e:	60fb      	str	r3, [r7, #12]
 8007730:	e7fe      	b.n	8007730 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007732:	4b38      	ldr	r3, [pc, #224]	; (8007814 <xPortStartScheduler+0x124>)
 8007734:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	b2db      	uxtb	r3, r3
 800773c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	22ff      	movs	r2, #255	; 0xff
 8007742:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	b2db      	uxtb	r3, r3
 800774a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800774c:	78fb      	ldrb	r3, [r7, #3]
 800774e:	b2db      	uxtb	r3, r3
 8007750:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007754:	b2da      	uxtb	r2, r3
 8007756:	4b30      	ldr	r3, [pc, #192]	; (8007818 <xPortStartScheduler+0x128>)
 8007758:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800775a:	4b30      	ldr	r3, [pc, #192]	; (800781c <xPortStartScheduler+0x12c>)
 800775c:	2207      	movs	r2, #7
 800775e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007760:	e009      	b.n	8007776 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007762:	4b2e      	ldr	r3, [pc, #184]	; (800781c <xPortStartScheduler+0x12c>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	3b01      	subs	r3, #1
 8007768:	4a2c      	ldr	r2, [pc, #176]	; (800781c <xPortStartScheduler+0x12c>)
 800776a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800776c:	78fb      	ldrb	r3, [r7, #3]
 800776e:	b2db      	uxtb	r3, r3
 8007770:	005b      	lsls	r3, r3, #1
 8007772:	b2db      	uxtb	r3, r3
 8007774:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007776:	78fb      	ldrb	r3, [r7, #3]
 8007778:	b2db      	uxtb	r3, r3
 800777a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800777e:	2b80      	cmp	r3, #128	; 0x80
 8007780:	d0ef      	beq.n	8007762 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007782:	4b26      	ldr	r3, [pc, #152]	; (800781c <xPortStartScheduler+0x12c>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f1c3 0307 	rsb	r3, r3, #7
 800778a:	2b04      	cmp	r3, #4
 800778c:	d009      	beq.n	80077a2 <xPortStartScheduler+0xb2>
 800778e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007792:	f383 8811 	msr	BASEPRI, r3
 8007796:	f3bf 8f6f 	isb	sy
 800779a:	f3bf 8f4f 	dsb	sy
 800779e:	60bb      	str	r3, [r7, #8]
 80077a0:	e7fe      	b.n	80077a0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80077a2:	4b1e      	ldr	r3, [pc, #120]	; (800781c <xPortStartScheduler+0x12c>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	021b      	lsls	r3, r3, #8
 80077a8:	4a1c      	ldr	r2, [pc, #112]	; (800781c <xPortStartScheduler+0x12c>)
 80077aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80077ac:	4b1b      	ldr	r3, [pc, #108]	; (800781c <xPortStartScheduler+0x12c>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80077b4:	4a19      	ldr	r2, [pc, #100]	; (800781c <xPortStartScheduler+0x12c>)
 80077b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	b2da      	uxtb	r2, r3
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80077c0:	4b17      	ldr	r3, [pc, #92]	; (8007820 <xPortStartScheduler+0x130>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a16      	ldr	r2, [pc, #88]	; (8007820 <xPortStartScheduler+0x130>)
 80077c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80077ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80077cc:	4b14      	ldr	r3, [pc, #80]	; (8007820 <xPortStartScheduler+0x130>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a13      	ldr	r2, [pc, #76]	; (8007820 <xPortStartScheduler+0x130>)
 80077d2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80077d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80077d8:	f000 f8d6 	bl	8007988 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80077dc:	4b11      	ldr	r3, [pc, #68]	; (8007824 <xPortStartScheduler+0x134>)
 80077de:	2200      	movs	r2, #0
 80077e0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80077e2:	f000 f8f5 	bl	80079d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80077e6:	4b10      	ldr	r3, [pc, #64]	; (8007828 <xPortStartScheduler+0x138>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a0f      	ldr	r2, [pc, #60]	; (8007828 <xPortStartScheduler+0x138>)
 80077ec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80077f0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80077f2:	f7ff ff69 	bl	80076c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80077f6:	f7ff f86b 	bl	80068d0 <vTaskSwitchContext>
	prvTaskExitError();
 80077fa:	f7ff ff21 	bl	8007640 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3718      	adds	r7, #24
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	e000ed00 	.word	0xe000ed00
 800780c:	410fc271 	.word	0x410fc271
 8007810:	410fc270 	.word	0x410fc270
 8007814:	e000e400 	.word	0xe000e400
 8007818:	20000fe0 	.word	0x20000fe0
 800781c:	20000fe4 	.word	0x20000fe4
 8007820:	e000ed20 	.word	0xe000ed20
 8007824:	2000000c 	.word	0x2000000c
 8007828:	e000ef34 	.word	0xe000ef34

0800782c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007836:	f383 8811 	msr	BASEPRI, r3
 800783a:	f3bf 8f6f 	isb	sy
 800783e:	f3bf 8f4f 	dsb	sy
 8007842:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007844:	4b0e      	ldr	r3, [pc, #56]	; (8007880 <vPortEnterCritical+0x54>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	3301      	adds	r3, #1
 800784a:	4a0d      	ldr	r2, [pc, #52]	; (8007880 <vPortEnterCritical+0x54>)
 800784c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800784e:	4b0c      	ldr	r3, [pc, #48]	; (8007880 <vPortEnterCritical+0x54>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2b01      	cmp	r3, #1
 8007854:	d10e      	bne.n	8007874 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007856:	4b0b      	ldr	r3, [pc, #44]	; (8007884 <vPortEnterCritical+0x58>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	b2db      	uxtb	r3, r3
 800785c:	2b00      	cmp	r3, #0
 800785e:	d009      	beq.n	8007874 <vPortEnterCritical+0x48>
 8007860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007864:	f383 8811 	msr	BASEPRI, r3
 8007868:	f3bf 8f6f 	isb	sy
 800786c:	f3bf 8f4f 	dsb	sy
 8007870:	603b      	str	r3, [r7, #0]
 8007872:	e7fe      	b.n	8007872 <vPortEnterCritical+0x46>
	}
}
 8007874:	bf00      	nop
 8007876:	370c      	adds	r7, #12
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr
 8007880:	2000000c 	.word	0x2000000c
 8007884:	e000ed04 	.word	0xe000ed04

08007888 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800788e:	4b11      	ldr	r3, [pc, #68]	; (80078d4 <vPortExitCritical+0x4c>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d109      	bne.n	80078aa <vPortExitCritical+0x22>
 8007896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789a:	f383 8811 	msr	BASEPRI, r3
 800789e:	f3bf 8f6f 	isb	sy
 80078a2:	f3bf 8f4f 	dsb	sy
 80078a6:	607b      	str	r3, [r7, #4]
 80078a8:	e7fe      	b.n	80078a8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80078aa:	4b0a      	ldr	r3, [pc, #40]	; (80078d4 <vPortExitCritical+0x4c>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	3b01      	subs	r3, #1
 80078b0:	4a08      	ldr	r2, [pc, #32]	; (80078d4 <vPortExitCritical+0x4c>)
 80078b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80078b4:	4b07      	ldr	r3, [pc, #28]	; (80078d4 <vPortExitCritical+0x4c>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d104      	bne.n	80078c6 <vPortExitCritical+0x3e>
 80078bc:	2300      	movs	r3, #0
 80078be:	603b      	str	r3, [r7, #0]
	__asm volatile
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80078c6:	bf00      	nop
 80078c8:	370c      	adds	r7, #12
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr
 80078d2:	bf00      	nop
 80078d4:	2000000c 	.word	0x2000000c
	...

080078e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80078e0:	f3ef 8009 	mrs	r0, PSP
 80078e4:	f3bf 8f6f 	isb	sy
 80078e8:	4b15      	ldr	r3, [pc, #84]	; (8007940 <pxCurrentTCBConst>)
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	f01e 0f10 	tst.w	lr, #16
 80078f0:	bf08      	it	eq
 80078f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80078f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078fa:	6010      	str	r0, [r2, #0]
 80078fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007900:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007904:	f380 8811 	msr	BASEPRI, r0
 8007908:	f3bf 8f4f 	dsb	sy
 800790c:	f3bf 8f6f 	isb	sy
 8007910:	f7fe ffde 	bl	80068d0 <vTaskSwitchContext>
 8007914:	f04f 0000 	mov.w	r0, #0
 8007918:	f380 8811 	msr	BASEPRI, r0
 800791c:	bc09      	pop	{r0, r3}
 800791e:	6819      	ldr	r1, [r3, #0]
 8007920:	6808      	ldr	r0, [r1, #0]
 8007922:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007926:	f01e 0f10 	tst.w	lr, #16
 800792a:	bf08      	it	eq
 800792c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007930:	f380 8809 	msr	PSP, r0
 8007934:	f3bf 8f6f 	isb	sy
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop
 800793c:	f3af 8000 	nop.w

08007940 <pxCurrentTCBConst>:
 8007940:	200009b4 	.word	0x200009b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007944:	bf00      	nop
 8007946:	bf00      	nop

08007948 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
	__asm volatile
 800794e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007952:	f383 8811 	msr	BASEPRI, r3
 8007956:	f3bf 8f6f 	isb	sy
 800795a:	f3bf 8f4f 	dsb	sy
 800795e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007960:	f7fe fefe 	bl	8006760 <xTaskIncrementTick>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d003      	beq.n	8007972 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800796a:	4b06      	ldr	r3, [pc, #24]	; (8007984 <SysTick_Handler+0x3c>)
 800796c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007970:	601a      	str	r2, [r3, #0]
 8007972:	2300      	movs	r3, #0
 8007974:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800797c:	bf00      	nop
 800797e:	3708      	adds	r7, #8
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}
 8007984:	e000ed04 	.word	0xe000ed04

08007988 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007988:	b480      	push	{r7}
 800798a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800798c:	4b0b      	ldr	r3, [pc, #44]	; (80079bc <vPortSetupTimerInterrupt+0x34>)
 800798e:	2200      	movs	r2, #0
 8007990:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007992:	4b0b      	ldr	r3, [pc, #44]	; (80079c0 <vPortSetupTimerInterrupt+0x38>)
 8007994:	2200      	movs	r2, #0
 8007996:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007998:	4b0a      	ldr	r3, [pc, #40]	; (80079c4 <vPortSetupTimerInterrupt+0x3c>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a0a      	ldr	r2, [pc, #40]	; (80079c8 <vPortSetupTimerInterrupt+0x40>)
 800799e:	fba2 2303 	umull	r2, r3, r2, r3
 80079a2:	099b      	lsrs	r3, r3, #6
 80079a4:	4a09      	ldr	r2, [pc, #36]	; (80079cc <vPortSetupTimerInterrupt+0x44>)
 80079a6:	3b01      	subs	r3, #1
 80079a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80079aa:	4b04      	ldr	r3, [pc, #16]	; (80079bc <vPortSetupTimerInterrupt+0x34>)
 80079ac:	2207      	movs	r2, #7
 80079ae:	601a      	str	r2, [r3, #0]
}
 80079b0:	bf00      	nop
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr
 80079ba:	bf00      	nop
 80079bc:	e000e010 	.word	0xe000e010
 80079c0:	e000e018 	.word	0xe000e018
 80079c4:	20000000 	.word	0x20000000
 80079c8:	10624dd3 	.word	0x10624dd3
 80079cc:	e000e014 	.word	0xe000e014

080079d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80079d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80079e0 <vPortEnableVFP+0x10>
 80079d4:	6801      	ldr	r1, [r0, #0]
 80079d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80079da:	6001      	str	r1, [r0, #0]
 80079dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80079de:	bf00      	nop
 80079e0:	e000ed88 	.word	0xe000ed88

080079e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80079ea:	f3ef 8305 	mrs	r3, IPSR
 80079ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2b0f      	cmp	r3, #15
 80079f4:	d913      	bls.n	8007a1e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80079f6:	4a16      	ldr	r2, [pc, #88]	; (8007a50 <vPortValidateInterruptPriority+0x6c>)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	4413      	add	r3, r2
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007a00:	4b14      	ldr	r3, [pc, #80]	; (8007a54 <vPortValidateInterruptPriority+0x70>)
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	7afa      	ldrb	r2, [r7, #11]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d209      	bcs.n	8007a1e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8007a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0e:	f383 8811 	msr	BASEPRI, r3
 8007a12:	f3bf 8f6f 	isb	sy
 8007a16:	f3bf 8f4f 	dsb	sy
 8007a1a:	607b      	str	r3, [r7, #4]
 8007a1c:	e7fe      	b.n	8007a1c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007a1e:	4b0e      	ldr	r3, [pc, #56]	; (8007a58 <vPortValidateInterruptPriority+0x74>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007a26:	4b0d      	ldr	r3, [pc, #52]	; (8007a5c <vPortValidateInterruptPriority+0x78>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d909      	bls.n	8007a42 <vPortValidateInterruptPriority+0x5e>
 8007a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a32:	f383 8811 	msr	BASEPRI, r3
 8007a36:	f3bf 8f6f 	isb	sy
 8007a3a:	f3bf 8f4f 	dsb	sy
 8007a3e:	603b      	str	r3, [r7, #0]
 8007a40:	e7fe      	b.n	8007a40 <vPortValidateInterruptPriority+0x5c>
	}
 8007a42:	bf00      	nop
 8007a44:	3714      	adds	r7, #20
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	e000e3f0 	.word	0xe000e3f0
 8007a54:	20000fe0 	.word	0x20000fe0
 8007a58:	e000ed0c 	.word	0xe000ed0c
 8007a5c:	20000fe4 	.word	0x20000fe4

08007a60 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b08a      	sub	sp, #40	; 0x28
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007a6c:	f7fe fdbe 	bl	80065ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007a70:	4b57      	ldr	r3, [pc, #348]	; (8007bd0 <pvPortMalloc+0x170>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d101      	bne.n	8007a7c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007a78:	f000 f90c 	bl	8007c94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007a7c:	4b55      	ldr	r3, [pc, #340]	; (8007bd4 <pvPortMalloc+0x174>)
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	4013      	ands	r3, r2
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f040 808c 	bne.w	8007ba2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d01c      	beq.n	8007aca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007a90:	2208      	movs	r2, #8
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4413      	add	r3, r2
 8007a96:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f003 0307 	and.w	r3, r3, #7
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d013      	beq.n	8007aca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f023 0307 	bic.w	r3, r3, #7
 8007aa8:	3308      	adds	r3, #8
 8007aaa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f003 0307 	and.w	r3, r3, #7
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d009      	beq.n	8007aca <pvPortMalloc+0x6a>
 8007ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aba:	f383 8811 	msr	BASEPRI, r3
 8007abe:	f3bf 8f6f 	isb	sy
 8007ac2:	f3bf 8f4f 	dsb	sy
 8007ac6:	617b      	str	r3, [r7, #20]
 8007ac8:	e7fe      	b.n	8007ac8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d068      	beq.n	8007ba2 <pvPortMalloc+0x142>
 8007ad0:	4b41      	ldr	r3, [pc, #260]	; (8007bd8 <pvPortMalloc+0x178>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d863      	bhi.n	8007ba2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007ada:	4b40      	ldr	r3, [pc, #256]	; (8007bdc <pvPortMalloc+0x17c>)
 8007adc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007ade:	4b3f      	ldr	r3, [pc, #252]	; (8007bdc <pvPortMalloc+0x17c>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ae4:	e004      	b.n	8007af0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d903      	bls.n	8007b02 <pvPortMalloc+0xa2>
 8007afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d1f1      	bne.n	8007ae6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007b02:	4b33      	ldr	r3, [pc, #204]	; (8007bd0 <pvPortMalloc+0x170>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d04a      	beq.n	8007ba2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007b0c:	6a3b      	ldr	r3, [r7, #32]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	2208      	movs	r2, #8
 8007b12:	4413      	add	r3, r2
 8007b14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	6a3b      	ldr	r3, [r7, #32]
 8007b1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b20:	685a      	ldr	r2, [r3, #4]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	1ad2      	subs	r2, r2, r3
 8007b26:	2308      	movs	r3, #8
 8007b28:	005b      	lsls	r3, r3, #1
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d91e      	bls.n	8007b6c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4413      	add	r3, r2
 8007b34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b36:	69bb      	ldr	r3, [r7, #24]
 8007b38:	f003 0307 	and.w	r3, r3, #7
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d009      	beq.n	8007b54 <pvPortMalloc+0xf4>
 8007b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b44:	f383 8811 	msr	BASEPRI, r3
 8007b48:	f3bf 8f6f 	isb	sy
 8007b4c:	f3bf 8f4f 	dsb	sy
 8007b50:	613b      	str	r3, [r7, #16]
 8007b52:	e7fe      	b.n	8007b52 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b56:	685a      	ldr	r2, [r3, #4]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	1ad2      	subs	r2, r2, r3
 8007b5c:	69bb      	ldr	r3, [r7, #24]
 8007b5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007b66:	69b8      	ldr	r0, [r7, #24]
 8007b68:	f000 f8f6 	bl	8007d58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b6c:	4b1a      	ldr	r3, [pc, #104]	; (8007bd8 <pvPortMalloc+0x178>)
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	1ad3      	subs	r3, r2, r3
 8007b76:	4a18      	ldr	r2, [pc, #96]	; (8007bd8 <pvPortMalloc+0x178>)
 8007b78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b7a:	4b17      	ldr	r3, [pc, #92]	; (8007bd8 <pvPortMalloc+0x178>)
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	4b18      	ldr	r3, [pc, #96]	; (8007be0 <pvPortMalloc+0x180>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d203      	bcs.n	8007b8e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007b86:	4b14      	ldr	r3, [pc, #80]	; (8007bd8 <pvPortMalloc+0x178>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a15      	ldr	r2, [pc, #84]	; (8007be0 <pvPortMalloc+0x180>)
 8007b8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b90:	685a      	ldr	r2, [r3, #4]
 8007b92:	4b10      	ldr	r3, [pc, #64]	; (8007bd4 <pvPortMalloc+0x174>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	431a      	orrs	r2, r3
 8007b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007ba2:	f7fe fd31 	bl	8006608 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	f003 0307 	and.w	r3, r3, #7
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d009      	beq.n	8007bc4 <pvPortMalloc+0x164>
 8007bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb4:	f383 8811 	msr	BASEPRI, r3
 8007bb8:	f3bf 8f6f 	isb	sy
 8007bbc:	f3bf 8f4f 	dsb	sy
 8007bc0:	60fb      	str	r3, [r7, #12]
 8007bc2:	e7fe      	b.n	8007bc2 <pvPortMalloc+0x162>
	return pvReturn;
 8007bc4:	69fb      	ldr	r3, [r7, #28]
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3728      	adds	r7, #40	; 0x28
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	20004bf0 	.word	0x20004bf0
 8007bd4:	20004bfc 	.word	0x20004bfc
 8007bd8:	20004bf4 	.word	0x20004bf4
 8007bdc:	20004be8 	.word	0x20004be8
 8007be0:	20004bf8 	.word	0x20004bf8

08007be4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b086      	sub	sp, #24
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d046      	beq.n	8007c84 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007bf6:	2308      	movs	r3, #8
 8007bf8:	425b      	negs	r3, r3
 8007bfa:	697a      	ldr	r2, [r7, #20]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	685a      	ldr	r2, [r3, #4]
 8007c08:	4b20      	ldr	r3, [pc, #128]	; (8007c8c <vPortFree+0xa8>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4013      	ands	r3, r2
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d109      	bne.n	8007c26 <vPortFree+0x42>
 8007c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c16:	f383 8811 	msr	BASEPRI, r3
 8007c1a:	f3bf 8f6f 	isb	sy
 8007c1e:	f3bf 8f4f 	dsb	sy
 8007c22:	60fb      	str	r3, [r7, #12]
 8007c24:	e7fe      	b.n	8007c24 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d009      	beq.n	8007c42 <vPortFree+0x5e>
 8007c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c32:	f383 8811 	msr	BASEPRI, r3
 8007c36:	f3bf 8f6f 	isb	sy
 8007c3a:	f3bf 8f4f 	dsb	sy
 8007c3e:	60bb      	str	r3, [r7, #8]
 8007c40:	e7fe      	b.n	8007c40 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	685a      	ldr	r2, [r3, #4]
 8007c46:	4b11      	ldr	r3, [pc, #68]	; (8007c8c <vPortFree+0xa8>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4013      	ands	r3, r2
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d019      	beq.n	8007c84 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d115      	bne.n	8007c84 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	685a      	ldr	r2, [r3, #4]
 8007c5c:	4b0b      	ldr	r3, [pc, #44]	; (8007c8c <vPortFree+0xa8>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	43db      	mvns	r3, r3
 8007c62:	401a      	ands	r2, r3
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007c68:	f7fe fcc0 	bl	80065ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	685a      	ldr	r2, [r3, #4]
 8007c70:	4b07      	ldr	r3, [pc, #28]	; (8007c90 <vPortFree+0xac>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4413      	add	r3, r2
 8007c76:	4a06      	ldr	r2, [pc, #24]	; (8007c90 <vPortFree+0xac>)
 8007c78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007c7a:	6938      	ldr	r0, [r7, #16]
 8007c7c:	f000 f86c 	bl	8007d58 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007c80:	f7fe fcc2 	bl	8006608 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007c84:	bf00      	nop
 8007c86:	3718      	adds	r7, #24
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}
 8007c8c:	20004bfc 	.word	0x20004bfc
 8007c90:	20004bf4 	.word	0x20004bf4

08007c94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007c94:	b480      	push	{r7}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007c9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007c9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ca0:	4b27      	ldr	r3, [pc, #156]	; (8007d40 <prvHeapInit+0xac>)
 8007ca2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f003 0307 	and.w	r3, r3, #7
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00c      	beq.n	8007cc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	3307      	adds	r3, #7
 8007cb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f023 0307 	bic.w	r3, r3, #7
 8007cba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007cbc:	68ba      	ldr	r2, [r7, #8]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	1ad3      	subs	r3, r2, r3
 8007cc2:	4a1f      	ldr	r2, [pc, #124]	; (8007d40 <prvHeapInit+0xac>)
 8007cc4:	4413      	add	r3, r2
 8007cc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007ccc:	4a1d      	ldr	r2, [pc, #116]	; (8007d44 <prvHeapInit+0xb0>)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007cd2:	4b1c      	ldr	r3, [pc, #112]	; (8007d44 <prvHeapInit+0xb0>)
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	68ba      	ldr	r2, [r7, #8]
 8007cdc:	4413      	add	r3, r2
 8007cde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ce0:	2208      	movs	r2, #8
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	1a9b      	subs	r3, r3, r2
 8007ce6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f023 0307 	bic.w	r3, r3, #7
 8007cee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	4a15      	ldr	r2, [pc, #84]	; (8007d48 <prvHeapInit+0xb4>)
 8007cf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007cf6:	4b14      	ldr	r3, [pc, #80]	; (8007d48 <prvHeapInit+0xb4>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007cfe:	4b12      	ldr	r3, [pc, #72]	; (8007d48 <prvHeapInit+0xb4>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2200      	movs	r2, #0
 8007d04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	68fa      	ldr	r2, [r7, #12]
 8007d0e:	1ad2      	subs	r2, r2, r3
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007d14:	4b0c      	ldr	r3, [pc, #48]	; (8007d48 <prvHeapInit+0xb4>)
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	4a0a      	ldr	r2, [pc, #40]	; (8007d4c <prvHeapInit+0xb8>)
 8007d22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	4a09      	ldr	r2, [pc, #36]	; (8007d50 <prvHeapInit+0xbc>)
 8007d2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007d2c:	4b09      	ldr	r3, [pc, #36]	; (8007d54 <prvHeapInit+0xc0>)
 8007d2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007d32:	601a      	str	r2, [r3, #0]
}
 8007d34:	bf00      	nop
 8007d36:	3714      	adds	r7, #20
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr
 8007d40:	20000fe8 	.word	0x20000fe8
 8007d44:	20004be8 	.word	0x20004be8
 8007d48:	20004bf0 	.word	0x20004bf0
 8007d4c:	20004bf8 	.word	0x20004bf8
 8007d50:	20004bf4 	.word	0x20004bf4
 8007d54:	20004bfc 	.word	0x20004bfc

08007d58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b085      	sub	sp, #20
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007d60:	4b28      	ldr	r3, [pc, #160]	; (8007e04 <prvInsertBlockIntoFreeList+0xac>)
 8007d62:	60fb      	str	r3, [r7, #12]
 8007d64:	e002      	b.n	8007d6c <prvInsertBlockIntoFreeList+0x14>
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	60fb      	str	r3, [r7, #12]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d8f7      	bhi.n	8007d66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	68ba      	ldr	r2, [r7, #8]
 8007d80:	4413      	add	r3, r2
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d108      	bne.n	8007d9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	685a      	ldr	r2, [r3, #4]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	441a      	add	r2, r3
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	68ba      	ldr	r2, [r7, #8]
 8007da4:	441a      	add	r2, r3
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d118      	bne.n	8007de0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	4b15      	ldr	r3, [pc, #84]	; (8007e08 <prvInsertBlockIntoFreeList+0xb0>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d00d      	beq.n	8007dd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	685a      	ldr	r2, [r3, #4]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	441a      	add	r2, r3
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	601a      	str	r2, [r3, #0]
 8007dd4:	e008      	b.n	8007de8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007dd6:	4b0c      	ldr	r3, [pc, #48]	; (8007e08 <prvInsertBlockIntoFreeList+0xb0>)
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	601a      	str	r2, [r3, #0]
 8007dde:	e003      	b.n	8007de8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007de8:	68fa      	ldr	r2, [r7, #12]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d002      	beq.n	8007df6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	687a      	ldr	r2, [r7, #4]
 8007df4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007df6:	bf00      	nop
 8007df8:	3714      	adds	r7, #20
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop
 8007e04:	20004be8 	.word	0x20004be8
 8007e08:	20004bf0 	.word	0x20004bf0

08007e0c <_ZdlPvj>:
 8007e0c:	f000 b800 	b.w	8007e10 <_ZdlPv>

08007e10 <_ZdlPv>:
 8007e10:	f000 b93e 	b.w	8008090 <free>

08007e14 <sqrt>:
 8007e14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e18:	ed2d 8b02 	vpush	{d8}
 8007e1c:	b08b      	sub	sp, #44	; 0x2c
 8007e1e:	ec55 4b10 	vmov	r4, r5, d0
 8007e22:	f000 f851 	bl	8007ec8 <__ieee754_sqrt>
 8007e26:	4b26      	ldr	r3, [pc, #152]	; (8007ec0 <sqrt+0xac>)
 8007e28:	eeb0 8a40 	vmov.f32	s16, s0
 8007e2c:	eef0 8a60 	vmov.f32	s17, s1
 8007e30:	f993 6000 	ldrsb.w	r6, [r3]
 8007e34:	1c73      	adds	r3, r6, #1
 8007e36:	d02a      	beq.n	8007e8e <sqrt+0x7a>
 8007e38:	4622      	mov	r2, r4
 8007e3a:	462b      	mov	r3, r5
 8007e3c:	4620      	mov	r0, r4
 8007e3e:	4629      	mov	r1, r5
 8007e40:	f7f8 fe2c 	bl	8000a9c <__aeabi_dcmpun>
 8007e44:	4607      	mov	r7, r0
 8007e46:	bb10      	cbnz	r0, 8007e8e <sqrt+0x7a>
 8007e48:	f04f 0800 	mov.w	r8, #0
 8007e4c:	f04f 0900 	mov.w	r9, #0
 8007e50:	4642      	mov	r2, r8
 8007e52:	464b      	mov	r3, r9
 8007e54:	4620      	mov	r0, r4
 8007e56:	4629      	mov	r1, r5
 8007e58:	f7f8 fdf8 	bl	8000a4c <__aeabi_dcmplt>
 8007e5c:	b1b8      	cbz	r0, 8007e8e <sqrt+0x7a>
 8007e5e:	2301      	movs	r3, #1
 8007e60:	9300      	str	r3, [sp, #0]
 8007e62:	4b18      	ldr	r3, [pc, #96]	; (8007ec4 <sqrt+0xb0>)
 8007e64:	9301      	str	r3, [sp, #4]
 8007e66:	9708      	str	r7, [sp, #32]
 8007e68:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8007e6c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007e70:	b9b6      	cbnz	r6, 8007ea0 <sqrt+0x8c>
 8007e72:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8007e76:	4668      	mov	r0, sp
 8007e78:	f000 f8d6 	bl	8008028 <matherr>
 8007e7c:	b1d0      	cbz	r0, 8007eb4 <sqrt+0xa0>
 8007e7e:	9b08      	ldr	r3, [sp, #32]
 8007e80:	b11b      	cbz	r3, 8007e8a <sqrt+0x76>
 8007e82:	f000 f8d3 	bl	800802c <__errno>
 8007e86:	9b08      	ldr	r3, [sp, #32]
 8007e88:	6003      	str	r3, [r0, #0]
 8007e8a:	ed9d 8b06 	vldr	d8, [sp, #24]
 8007e8e:	eeb0 0a48 	vmov.f32	s0, s16
 8007e92:	eef0 0a68 	vmov.f32	s1, s17
 8007e96:	b00b      	add	sp, #44	; 0x2c
 8007e98:	ecbd 8b02 	vpop	{d8}
 8007e9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ea0:	4642      	mov	r2, r8
 8007ea2:	464b      	mov	r3, r9
 8007ea4:	4640      	mov	r0, r8
 8007ea6:	4649      	mov	r1, r9
 8007ea8:	f7f8 fc88 	bl	80007bc <__aeabi_ddiv>
 8007eac:	2e02      	cmp	r6, #2
 8007eae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007eb2:	d1e0      	bne.n	8007e76 <sqrt+0x62>
 8007eb4:	f000 f8ba 	bl	800802c <__errno>
 8007eb8:	2321      	movs	r3, #33	; 0x21
 8007eba:	6003      	str	r3, [r0, #0]
 8007ebc:	e7df      	b.n	8007e7e <sqrt+0x6a>
 8007ebe:	bf00      	nop
 8007ec0:	20000010 	.word	0x20000010
 8007ec4:	08009e28 	.word	0x08009e28

08007ec8 <__ieee754_sqrt>:
 8007ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ecc:	4955      	ldr	r1, [pc, #340]	; (8008024 <__ieee754_sqrt+0x15c>)
 8007ece:	ec55 4b10 	vmov	r4, r5, d0
 8007ed2:	43a9      	bics	r1, r5
 8007ed4:	462b      	mov	r3, r5
 8007ed6:	462a      	mov	r2, r5
 8007ed8:	d112      	bne.n	8007f00 <__ieee754_sqrt+0x38>
 8007eda:	ee10 2a10 	vmov	r2, s0
 8007ede:	ee10 0a10 	vmov	r0, s0
 8007ee2:	4629      	mov	r1, r5
 8007ee4:	f7f8 fb40 	bl	8000568 <__aeabi_dmul>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	460b      	mov	r3, r1
 8007eec:	4620      	mov	r0, r4
 8007eee:	4629      	mov	r1, r5
 8007ef0:	f7f8 f984 	bl	80001fc <__adddf3>
 8007ef4:	4604      	mov	r4, r0
 8007ef6:	460d      	mov	r5, r1
 8007ef8:	ec45 4b10 	vmov	d0, r4, r5
 8007efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f00:	2d00      	cmp	r5, #0
 8007f02:	ee10 0a10 	vmov	r0, s0
 8007f06:	4621      	mov	r1, r4
 8007f08:	dc0f      	bgt.n	8007f2a <__ieee754_sqrt+0x62>
 8007f0a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007f0e:	4330      	orrs	r0, r6
 8007f10:	d0f2      	beq.n	8007ef8 <__ieee754_sqrt+0x30>
 8007f12:	b155      	cbz	r5, 8007f2a <__ieee754_sqrt+0x62>
 8007f14:	ee10 2a10 	vmov	r2, s0
 8007f18:	4620      	mov	r0, r4
 8007f1a:	4629      	mov	r1, r5
 8007f1c:	f7f8 f96c 	bl	80001f8 <__aeabi_dsub>
 8007f20:	4602      	mov	r2, r0
 8007f22:	460b      	mov	r3, r1
 8007f24:	f7f8 fc4a 	bl	80007bc <__aeabi_ddiv>
 8007f28:	e7e4      	b.n	8007ef4 <__ieee754_sqrt+0x2c>
 8007f2a:	151b      	asrs	r3, r3, #20
 8007f2c:	d073      	beq.n	8008016 <__ieee754_sqrt+0x14e>
 8007f2e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007f32:	07dd      	lsls	r5, r3, #31
 8007f34:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007f38:	bf48      	it	mi
 8007f3a:	0fc8      	lsrmi	r0, r1, #31
 8007f3c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007f40:	bf44      	itt	mi
 8007f42:	0049      	lslmi	r1, r1, #1
 8007f44:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8007f48:	2500      	movs	r5, #0
 8007f4a:	1058      	asrs	r0, r3, #1
 8007f4c:	0fcb      	lsrs	r3, r1, #31
 8007f4e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8007f52:	0049      	lsls	r1, r1, #1
 8007f54:	2316      	movs	r3, #22
 8007f56:	462c      	mov	r4, r5
 8007f58:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8007f5c:	19a7      	adds	r7, r4, r6
 8007f5e:	4297      	cmp	r7, r2
 8007f60:	bfde      	ittt	le
 8007f62:	19bc      	addle	r4, r7, r6
 8007f64:	1bd2      	suble	r2, r2, r7
 8007f66:	19ad      	addle	r5, r5, r6
 8007f68:	0fcf      	lsrs	r7, r1, #31
 8007f6a:	3b01      	subs	r3, #1
 8007f6c:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8007f70:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007f74:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007f78:	d1f0      	bne.n	8007f5c <__ieee754_sqrt+0x94>
 8007f7a:	f04f 0c20 	mov.w	ip, #32
 8007f7e:	469e      	mov	lr, r3
 8007f80:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007f84:	42a2      	cmp	r2, r4
 8007f86:	eb06 070e 	add.w	r7, r6, lr
 8007f8a:	dc02      	bgt.n	8007f92 <__ieee754_sqrt+0xca>
 8007f8c:	d112      	bne.n	8007fb4 <__ieee754_sqrt+0xec>
 8007f8e:	428f      	cmp	r7, r1
 8007f90:	d810      	bhi.n	8007fb4 <__ieee754_sqrt+0xec>
 8007f92:	2f00      	cmp	r7, #0
 8007f94:	eb07 0e06 	add.w	lr, r7, r6
 8007f98:	da42      	bge.n	8008020 <__ieee754_sqrt+0x158>
 8007f9a:	f1be 0f00 	cmp.w	lr, #0
 8007f9e:	db3f      	blt.n	8008020 <__ieee754_sqrt+0x158>
 8007fa0:	f104 0801 	add.w	r8, r4, #1
 8007fa4:	1b12      	subs	r2, r2, r4
 8007fa6:	428f      	cmp	r7, r1
 8007fa8:	bf88      	it	hi
 8007faa:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8007fae:	1bc9      	subs	r1, r1, r7
 8007fb0:	4433      	add	r3, r6
 8007fb2:	4644      	mov	r4, r8
 8007fb4:	0052      	lsls	r2, r2, #1
 8007fb6:	f1bc 0c01 	subs.w	ip, ip, #1
 8007fba:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8007fbe:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007fc2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007fc6:	d1dd      	bne.n	8007f84 <__ieee754_sqrt+0xbc>
 8007fc8:	430a      	orrs	r2, r1
 8007fca:	d006      	beq.n	8007fda <__ieee754_sqrt+0x112>
 8007fcc:	1c5c      	adds	r4, r3, #1
 8007fce:	bf13      	iteet	ne
 8007fd0:	3301      	addne	r3, #1
 8007fd2:	3501      	addeq	r5, #1
 8007fd4:	4663      	moveq	r3, ip
 8007fd6:	f023 0301 	bicne.w	r3, r3, #1
 8007fda:	106a      	asrs	r2, r5, #1
 8007fdc:	085b      	lsrs	r3, r3, #1
 8007fde:	07e9      	lsls	r1, r5, #31
 8007fe0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007fe4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007fe8:	bf48      	it	mi
 8007fea:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8007fee:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8007ff2:	461c      	mov	r4, r3
 8007ff4:	e780      	b.n	8007ef8 <__ieee754_sqrt+0x30>
 8007ff6:	0aca      	lsrs	r2, r1, #11
 8007ff8:	3815      	subs	r0, #21
 8007ffa:	0549      	lsls	r1, r1, #21
 8007ffc:	2a00      	cmp	r2, #0
 8007ffe:	d0fa      	beq.n	8007ff6 <__ieee754_sqrt+0x12e>
 8008000:	02d6      	lsls	r6, r2, #11
 8008002:	d50a      	bpl.n	800801a <__ieee754_sqrt+0x152>
 8008004:	f1c3 0420 	rsb	r4, r3, #32
 8008008:	fa21 f404 	lsr.w	r4, r1, r4
 800800c:	1e5d      	subs	r5, r3, #1
 800800e:	4099      	lsls	r1, r3
 8008010:	4322      	orrs	r2, r4
 8008012:	1b43      	subs	r3, r0, r5
 8008014:	e78b      	b.n	8007f2e <__ieee754_sqrt+0x66>
 8008016:	4618      	mov	r0, r3
 8008018:	e7f0      	b.n	8007ffc <__ieee754_sqrt+0x134>
 800801a:	0052      	lsls	r2, r2, #1
 800801c:	3301      	adds	r3, #1
 800801e:	e7ef      	b.n	8008000 <__ieee754_sqrt+0x138>
 8008020:	46a0      	mov	r8, r4
 8008022:	e7bf      	b.n	8007fa4 <__ieee754_sqrt+0xdc>
 8008024:	7ff00000 	.word	0x7ff00000

08008028 <matherr>:
 8008028:	2000      	movs	r0, #0
 800802a:	4770      	bx	lr

0800802c <__errno>:
 800802c:	4b01      	ldr	r3, [pc, #4]	; (8008034 <__errno+0x8>)
 800802e:	6818      	ldr	r0, [r3, #0]
 8008030:	4770      	bx	lr
 8008032:	bf00      	nop
 8008034:	20000014 	.word	0x20000014

08008038 <__libc_init_array>:
 8008038:	b570      	push	{r4, r5, r6, lr}
 800803a:	4e0d      	ldr	r6, [pc, #52]	; (8008070 <__libc_init_array+0x38>)
 800803c:	4c0d      	ldr	r4, [pc, #52]	; (8008074 <__libc_init_array+0x3c>)
 800803e:	1ba4      	subs	r4, r4, r6
 8008040:	10a4      	asrs	r4, r4, #2
 8008042:	2500      	movs	r5, #0
 8008044:	42a5      	cmp	r5, r4
 8008046:	d109      	bne.n	800805c <__libc_init_array+0x24>
 8008048:	4e0b      	ldr	r6, [pc, #44]	; (8008078 <__libc_init_array+0x40>)
 800804a:	4c0c      	ldr	r4, [pc, #48]	; (800807c <__libc_init_array+0x44>)
 800804c:	f001 fe82 	bl	8009d54 <_init>
 8008050:	1ba4      	subs	r4, r4, r6
 8008052:	10a4      	asrs	r4, r4, #2
 8008054:	2500      	movs	r5, #0
 8008056:	42a5      	cmp	r5, r4
 8008058:	d105      	bne.n	8008066 <__libc_init_array+0x2e>
 800805a:	bd70      	pop	{r4, r5, r6, pc}
 800805c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008060:	4798      	blx	r3
 8008062:	3501      	adds	r5, #1
 8008064:	e7ee      	b.n	8008044 <__libc_init_array+0xc>
 8008066:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800806a:	4798      	blx	r3
 800806c:	3501      	adds	r5, #1
 800806e:	e7f2      	b.n	8008056 <__libc_init_array+0x1e>
 8008070:	0800a0a8 	.word	0x0800a0a8
 8008074:	0800a0a8 	.word	0x0800a0a8
 8008078:	0800a0a8 	.word	0x0800a0a8
 800807c:	0800a0b0 	.word	0x0800a0b0

08008080 <malloc>:
 8008080:	4b02      	ldr	r3, [pc, #8]	; (800808c <malloc+0xc>)
 8008082:	4601      	mov	r1, r0
 8008084:	6818      	ldr	r0, [r3, #0]
 8008086:	f000 b86d 	b.w	8008164 <_malloc_r>
 800808a:	bf00      	nop
 800808c:	20000014 	.word	0x20000014

08008090 <free>:
 8008090:	4b02      	ldr	r3, [pc, #8]	; (800809c <free+0xc>)
 8008092:	4601      	mov	r1, r0
 8008094:	6818      	ldr	r0, [r3, #0]
 8008096:	f000 b817 	b.w	80080c8 <_free_r>
 800809a:	bf00      	nop
 800809c:	20000014 	.word	0x20000014

080080a0 <memcpy>:
 80080a0:	b510      	push	{r4, lr}
 80080a2:	1e43      	subs	r3, r0, #1
 80080a4:	440a      	add	r2, r1
 80080a6:	4291      	cmp	r1, r2
 80080a8:	d100      	bne.n	80080ac <memcpy+0xc>
 80080aa:	bd10      	pop	{r4, pc}
 80080ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080b4:	e7f7      	b.n	80080a6 <memcpy+0x6>

080080b6 <memset>:
 80080b6:	4402      	add	r2, r0
 80080b8:	4603      	mov	r3, r0
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d100      	bne.n	80080c0 <memset+0xa>
 80080be:	4770      	bx	lr
 80080c0:	f803 1b01 	strb.w	r1, [r3], #1
 80080c4:	e7f9      	b.n	80080ba <memset+0x4>
	...

080080c8 <_free_r>:
 80080c8:	b538      	push	{r3, r4, r5, lr}
 80080ca:	4605      	mov	r5, r0
 80080cc:	2900      	cmp	r1, #0
 80080ce:	d045      	beq.n	800815c <_free_r+0x94>
 80080d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080d4:	1f0c      	subs	r4, r1, #4
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	bfb8      	it	lt
 80080da:	18e4      	addlt	r4, r4, r3
 80080dc:	f001 fa1e 	bl	800951c <__malloc_lock>
 80080e0:	4a1f      	ldr	r2, [pc, #124]	; (8008160 <_free_r+0x98>)
 80080e2:	6813      	ldr	r3, [r2, #0]
 80080e4:	4610      	mov	r0, r2
 80080e6:	b933      	cbnz	r3, 80080f6 <_free_r+0x2e>
 80080e8:	6063      	str	r3, [r4, #4]
 80080ea:	6014      	str	r4, [r2, #0]
 80080ec:	4628      	mov	r0, r5
 80080ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080f2:	f001 ba14 	b.w	800951e <__malloc_unlock>
 80080f6:	42a3      	cmp	r3, r4
 80080f8:	d90c      	bls.n	8008114 <_free_r+0x4c>
 80080fa:	6821      	ldr	r1, [r4, #0]
 80080fc:	1862      	adds	r2, r4, r1
 80080fe:	4293      	cmp	r3, r2
 8008100:	bf04      	itt	eq
 8008102:	681a      	ldreq	r2, [r3, #0]
 8008104:	685b      	ldreq	r3, [r3, #4]
 8008106:	6063      	str	r3, [r4, #4]
 8008108:	bf04      	itt	eq
 800810a:	1852      	addeq	r2, r2, r1
 800810c:	6022      	streq	r2, [r4, #0]
 800810e:	6004      	str	r4, [r0, #0]
 8008110:	e7ec      	b.n	80080ec <_free_r+0x24>
 8008112:	4613      	mov	r3, r2
 8008114:	685a      	ldr	r2, [r3, #4]
 8008116:	b10a      	cbz	r2, 800811c <_free_r+0x54>
 8008118:	42a2      	cmp	r2, r4
 800811a:	d9fa      	bls.n	8008112 <_free_r+0x4a>
 800811c:	6819      	ldr	r1, [r3, #0]
 800811e:	1858      	adds	r0, r3, r1
 8008120:	42a0      	cmp	r0, r4
 8008122:	d10b      	bne.n	800813c <_free_r+0x74>
 8008124:	6820      	ldr	r0, [r4, #0]
 8008126:	4401      	add	r1, r0
 8008128:	1858      	adds	r0, r3, r1
 800812a:	4282      	cmp	r2, r0
 800812c:	6019      	str	r1, [r3, #0]
 800812e:	d1dd      	bne.n	80080ec <_free_r+0x24>
 8008130:	6810      	ldr	r0, [r2, #0]
 8008132:	6852      	ldr	r2, [r2, #4]
 8008134:	605a      	str	r2, [r3, #4]
 8008136:	4401      	add	r1, r0
 8008138:	6019      	str	r1, [r3, #0]
 800813a:	e7d7      	b.n	80080ec <_free_r+0x24>
 800813c:	d902      	bls.n	8008144 <_free_r+0x7c>
 800813e:	230c      	movs	r3, #12
 8008140:	602b      	str	r3, [r5, #0]
 8008142:	e7d3      	b.n	80080ec <_free_r+0x24>
 8008144:	6820      	ldr	r0, [r4, #0]
 8008146:	1821      	adds	r1, r4, r0
 8008148:	428a      	cmp	r2, r1
 800814a:	bf04      	itt	eq
 800814c:	6811      	ldreq	r1, [r2, #0]
 800814e:	6852      	ldreq	r2, [r2, #4]
 8008150:	6062      	str	r2, [r4, #4]
 8008152:	bf04      	itt	eq
 8008154:	1809      	addeq	r1, r1, r0
 8008156:	6021      	streq	r1, [r4, #0]
 8008158:	605c      	str	r4, [r3, #4]
 800815a:	e7c7      	b.n	80080ec <_free_r+0x24>
 800815c:	bd38      	pop	{r3, r4, r5, pc}
 800815e:	bf00      	nop
 8008160:	20004c00 	.word	0x20004c00

08008164 <_malloc_r>:
 8008164:	b570      	push	{r4, r5, r6, lr}
 8008166:	1ccd      	adds	r5, r1, #3
 8008168:	f025 0503 	bic.w	r5, r5, #3
 800816c:	3508      	adds	r5, #8
 800816e:	2d0c      	cmp	r5, #12
 8008170:	bf38      	it	cc
 8008172:	250c      	movcc	r5, #12
 8008174:	2d00      	cmp	r5, #0
 8008176:	4606      	mov	r6, r0
 8008178:	db01      	blt.n	800817e <_malloc_r+0x1a>
 800817a:	42a9      	cmp	r1, r5
 800817c:	d903      	bls.n	8008186 <_malloc_r+0x22>
 800817e:	230c      	movs	r3, #12
 8008180:	6033      	str	r3, [r6, #0]
 8008182:	2000      	movs	r0, #0
 8008184:	bd70      	pop	{r4, r5, r6, pc}
 8008186:	f001 f9c9 	bl	800951c <__malloc_lock>
 800818a:	4a21      	ldr	r2, [pc, #132]	; (8008210 <_malloc_r+0xac>)
 800818c:	6814      	ldr	r4, [r2, #0]
 800818e:	4621      	mov	r1, r4
 8008190:	b991      	cbnz	r1, 80081b8 <_malloc_r+0x54>
 8008192:	4c20      	ldr	r4, [pc, #128]	; (8008214 <_malloc_r+0xb0>)
 8008194:	6823      	ldr	r3, [r4, #0]
 8008196:	b91b      	cbnz	r3, 80081a0 <_malloc_r+0x3c>
 8008198:	4630      	mov	r0, r6
 800819a:	f000 f83d 	bl	8008218 <_sbrk_r>
 800819e:	6020      	str	r0, [r4, #0]
 80081a0:	4629      	mov	r1, r5
 80081a2:	4630      	mov	r0, r6
 80081a4:	f000 f838 	bl	8008218 <_sbrk_r>
 80081a8:	1c43      	adds	r3, r0, #1
 80081aa:	d124      	bne.n	80081f6 <_malloc_r+0x92>
 80081ac:	230c      	movs	r3, #12
 80081ae:	6033      	str	r3, [r6, #0]
 80081b0:	4630      	mov	r0, r6
 80081b2:	f001 f9b4 	bl	800951e <__malloc_unlock>
 80081b6:	e7e4      	b.n	8008182 <_malloc_r+0x1e>
 80081b8:	680b      	ldr	r3, [r1, #0]
 80081ba:	1b5b      	subs	r3, r3, r5
 80081bc:	d418      	bmi.n	80081f0 <_malloc_r+0x8c>
 80081be:	2b0b      	cmp	r3, #11
 80081c0:	d90f      	bls.n	80081e2 <_malloc_r+0x7e>
 80081c2:	600b      	str	r3, [r1, #0]
 80081c4:	50cd      	str	r5, [r1, r3]
 80081c6:	18cc      	adds	r4, r1, r3
 80081c8:	4630      	mov	r0, r6
 80081ca:	f001 f9a8 	bl	800951e <__malloc_unlock>
 80081ce:	f104 000b 	add.w	r0, r4, #11
 80081d2:	1d23      	adds	r3, r4, #4
 80081d4:	f020 0007 	bic.w	r0, r0, #7
 80081d8:	1ac3      	subs	r3, r0, r3
 80081da:	d0d3      	beq.n	8008184 <_malloc_r+0x20>
 80081dc:	425a      	negs	r2, r3
 80081de:	50e2      	str	r2, [r4, r3]
 80081e0:	e7d0      	b.n	8008184 <_malloc_r+0x20>
 80081e2:	428c      	cmp	r4, r1
 80081e4:	684b      	ldr	r3, [r1, #4]
 80081e6:	bf16      	itet	ne
 80081e8:	6063      	strne	r3, [r4, #4]
 80081ea:	6013      	streq	r3, [r2, #0]
 80081ec:	460c      	movne	r4, r1
 80081ee:	e7eb      	b.n	80081c8 <_malloc_r+0x64>
 80081f0:	460c      	mov	r4, r1
 80081f2:	6849      	ldr	r1, [r1, #4]
 80081f4:	e7cc      	b.n	8008190 <_malloc_r+0x2c>
 80081f6:	1cc4      	adds	r4, r0, #3
 80081f8:	f024 0403 	bic.w	r4, r4, #3
 80081fc:	42a0      	cmp	r0, r4
 80081fe:	d005      	beq.n	800820c <_malloc_r+0xa8>
 8008200:	1a21      	subs	r1, r4, r0
 8008202:	4630      	mov	r0, r6
 8008204:	f000 f808 	bl	8008218 <_sbrk_r>
 8008208:	3001      	adds	r0, #1
 800820a:	d0cf      	beq.n	80081ac <_malloc_r+0x48>
 800820c:	6025      	str	r5, [r4, #0]
 800820e:	e7db      	b.n	80081c8 <_malloc_r+0x64>
 8008210:	20004c00 	.word	0x20004c00
 8008214:	20004c04 	.word	0x20004c04

08008218 <_sbrk_r>:
 8008218:	b538      	push	{r3, r4, r5, lr}
 800821a:	4c06      	ldr	r4, [pc, #24]	; (8008234 <_sbrk_r+0x1c>)
 800821c:	2300      	movs	r3, #0
 800821e:	4605      	mov	r5, r0
 8008220:	4608      	mov	r0, r1
 8008222:	6023      	str	r3, [r4, #0]
 8008224:	f7fa f9b6 	bl	8002594 <_sbrk>
 8008228:	1c43      	adds	r3, r0, #1
 800822a:	d102      	bne.n	8008232 <_sbrk_r+0x1a>
 800822c:	6823      	ldr	r3, [r4, #0]
 800822e:	b103      	cbz	r3, 8008232 <_sbrk_r+0x1a>
 8008230:	602b      	str	r3, [r5, #0]
 8008232:	bd38      	pop	{r3, r4, r5, pc}
 8008234:	20004ccc 	.word	0x20004ccc

08008238 <strncmp>:
 8008238:	b510      	push	{r4, lr}
 800823a:	b16a      	cbz	r2, 8008258 <strncmp+0x20>
 800823c:	3901      	subs	r1, #1
 800823e:	1884      	adds	r4, r0, r2
 8008240:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008244:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008248:	4293      	cmp	r3, r2
 800824a:	d103      	bne.n	8008254 <strncmp+0x1c>
 800824c:	42a0      	cmp	r0, r4
 800824e:	d001      	beq.n	8008254 <strncmp+0x1c>
 8008250:	2b00      	cmp	r3, #0
 8008252:	d1f5      	bne.n	8008240 <strncmp+0x8>
 8008254:	1a98      	subs	r0, r3, r2
 8008256:	bd10      	pop	{r4, pc}
 8008258:	4610      	mov	r0, r2
 800825a:	e7fc      	b.n	8008256 <strncmp+0x1e>

0800825c <sulp>:
 800825c:	b570      	push	{r4, r5, r6, lr}
 800825e:	4604      	mov	r4, r0
 8008260:	460d      	mov	r5, r1
 8008262:	ec45 4b10 	vmov	d0, r4, r5
 8008266:	4616      	mov	r6, r2
 8008268:	f001 fc26 	bl	8009ab8 <__ulp>
 800826c:	ec51 0b10 	vmov	r0, r1, d0
 8008270:	b17e      	cbz	r6, 8008292 <sulp+0x36>
 8008272:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008276:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800827a:	2b00      	cmp	r3, #0
 800827c:	dd09      	ble.n	8008292 <sulp+0x36>
 800827e:	051b      	lsls	r3, r3, #20
 8008280:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008284:	2400      	movs	r4, #0
 8008286:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800828a:	4622      	mov	r2, r4
 800828c:	462b      	mov	r3, r5
 800828e:	f7f8 f96b 	bl	8000568 <__aeabi_dmul>
 8008292:	bd70      	pop	{r4, r5, r6, pc}
 8008294:	0000      	movs	r0, r0
	...

08008298 <_strtod_l>:
 8008298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800829c:	461f      	mov	r7, r3
 800829e:	b0a1      	sub	sp, #132	; 0x84
 80082a0:	2300      	movs	r3, #0
 80082a2:	4681      	mov	r9, r0
 80082a4:	4638      	mov	r0, r7
 80082a6:	460e      	mov	r6, r1
 80082a8:	9217      	str	r2, [sp, #92]	; 0x5c
 80082aa:	931c      	str	r3, [sp, #112]	; 0x70
 80082ac:	f001 f922 	bl	80094f4 <__localeconv_l>
 80082b0:	4680      	mov	r8, r0
 80082b2:	6800      	ldr	r0, [r0, #0]
 80082b4:	f7f7 ff94 	bl	80001e0 <strlen>
 80082b8:	f04f 0a00 	mov.w	sl, #0
 80082bc:	4604      	mov	r4, r0
 80082be:	f04f 0b00 	mov.w	fp, #0
 80082c2:	961b      	str	r6, [sp, #108]	; 0x6c
 80082c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80082c6:	781a      	ldrb	r2, [r3, #0]
 80082c8:	2a0d      	cmp	r2, #13
 80082ca:	d832      	bhi.n	8008332 <_strtod_l+0x9a>
 80082cc:	2a09      	cmp	r2, #9
 80082ce:	d236      	bcs.n	800833e <_strtod_l+0xa6>
 80082d0:	2a00      	cmp	r2, #0
 80082d2:	d03e      	beq.n	8008352 <_strtod_l+0xba>
 80082d4:	2300      	movs	r3, #0
 80082d6:	930d      	str	r3, [sp, #52]	; 0x34
 80082d8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80082da:	782b      	ldrb	r3, [r5, #0]
 80082dc:	2b30      	cmp	r3, #48	; 0x30
 80082de:	f040 80ac 	bne.w	800843a <_strtod_l+0x1a2>
 80082e2:	786b      	ldrb	r3, [r5, #1]
 80082e4:	2b58      	cmp	r3, #88	; 0x58
 80082e6:	d001      	beq.n	80082ec <_strtod_l+0x54>
 80082e8:	2b78      	cmp	r3, #120	; 0x78
 80082ea:	d167      	bne.n	80083bc <_strtod_l+0x124>
 80082ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082ee:	9301      	str	r3, [sp, #4]
 80082f0:	ab1c      	add	r3, sp, #112	; 0x70
 80082f2:	9300      	str	r3, [sp, #0]
 80082f4:	9702      	str	r7, [sp, #8]
 80082f6:	ab1d      	add	r3, sp, #116	; 0x74
 80082f8:	4a88      	ldr	r2, [pc, #544]	; (800851c <_strtod_l+0x284>)
 80082fa:	a91b      	add	r1, sp, #108	; 0x6c
 80082fc:	4648      	mov	r0, r9
 80082fe:	f000 fe22 	bl	8008f46 <__gethex>
 8008302:	f010 0407 	ands.w	r4, r0, #7
 8008306:	4606      	mov	r6, r0
 8008308:	d005      	beq.n	8008316 <_strtod_l+0x7e>
 800830a:	2c06      	cmp	r4, #6
 800830c:	d12b      	bne.n	8008366 <_strtod_l+0xce>
 800830e:	3501      	adds	r5, #1
 8008310:	2300      	movs	r3, #0
 8008312:	951b      	str	r5, [sp, #108]	; 0x6c
 8008314:	930d      	str	r3, [sp, #52]	; 0x34
 8008316:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008318:	2b00      	cmp	r3, #0
 800831a:	f040 859a 	bne.w	8008e52 <_strtod_l+0xbba>
 800831e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008320:	b1e3      	cbz	r3, 800835c <_strtod_l+0xc4>
 8008322:	4652      	mov	r2, sl
 8008324:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008328:	ec43 2b10 	vmov	d0, r2, r3
 800832c:	b021      	add	sp, #132	; 0x84
 800832e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008332:	2a2b      	cmp	r2, #43	; 0x2b
 8008334:	d015      	beq.n	8008362 <_strtod_l+0xca>
 8008336:	2a2d      	cmp	r2, #45	; 0x2d
 8008338:	d004      	beq.n	8008344 <_strtod_l+0xac>
 800833a:	2a20      	cmp	r2, #32
 800833c:	d1ca      	bne.n	80082d4 <_strtod_l+0x3c>
 800833e:	3301      	adds	r3, #1
 8008340:	931b      	str	r3, [sp, #108]	; 0x6c
 8008342:	e7bf      	b.n	80082c4 <_strtod_l+0x2c>
 8008344:	2201      	movs	r2, #1
 8008346:	920d      	str	r2, [sp, #52]	; 0x34
 8008348:	1c5a      	adds	r2, r3, #1
 800834a:	921b      	str	r2, [sp, #108]	; 0x6c
 800834c:	785b      	ldrb	r3, [r3, #1]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d1c2      	bne.n	80082d8 <_strtod_l+0x40>
 8008352:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008354:	961b      	str	r6, [sp, #108]	; 0x6c
 8008356:	2b00      	cmp	r3, #0
 8008358:	f040 8579 	bne.w	8008e4e <_strtod_l+0xbb6>
 800835c:	4652      	mov	r2, sl
 800835e:	465b      	mov	r3, fp
 8008360:	e7e2      	b.n	8008328 <_strtod_l+0x90>
 8008362:	2200      	movs	r2, #0
 8008364:	e7ef      	b.n	8008346 <_strtod_l+0xae>
 8008366:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008368:	b13a      	cbz	r2, 800837a <_strtod_l+0xe2>
 800836a:	2135      	movs	r1, #53	; 0x35
 800836c:	a81e      	add	r0, sp, #120	; 0x78
 800836e:	f001 fc9b 	bl	8009ca8 <__copybits>
 8008372:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008374:	4648      	mov	r0, r9
 8008376:	f001 f907 	bl	8009588 <_Bfree>
 800837a:	3c01      	subs	r4, #1
 800837c:	2c04      	cmp	r4, #4
 800837e:	d806      	bhi.n	800838e <_strtod_l+0xf6>
 8008380:	e8df f004 	tbb	[pc, r4]
 8008384:	1714030a 	.word	0x1714030a
 8008388:	0a          	.byte	0x0a
 8008389:	00          	.byte	0x00
 800838a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800838e:	0730      	lsls	r0, r6, #28
 8008390:	d5c1      	bpl.n	8008316 <_strtod_l+0x7e>
 8008392:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008396:	e7be      	b.n	8008316 <_strtod_l+0x7e>
 8008398:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800839c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800839e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80083a2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80083a6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80083aa:	e7f0      	b.n	800838e <_strtod_l+0xf6>
 80083ac:	f8df b170 	ldr.w	fp, [pc, #368]	; 8008520 <_strtod_l+0x288>
 80083b0:	e7ed      	b.n	800838e <_strtod_l+0xf6>
 80083b2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80083b6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80083ba:	e7e8      	b.n	800838e <_strtod_l+0xf6>
 80083bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80083be:	1c5a      	adds	r2, r3, #1
 80083c0:	921b      	str	r2, [sp, #108]	; 0x6c
 80083c2:	785b      	ldrb	r3, [r3, #1]
 80083c4:	2b30      	cmp	r3, #48	; 0x30
 80083c6:	d0f9      	beq.n	80083bc <_strtod_l+0x124>
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d0a4      	beq.n	8008316 <_strtod_l+0x7e>
 80083cc:	2301      	movs	r3, #1
 80083ce:	2500      	movs	r5, #0
 80083d0:	9306      	str	r3, [sp, #24]
 80083d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80083d4:	9308      	str	r3, [sp, #32]
 80083d6:	9507      	str	r5, [sp, #28]
 80083d8:	9505      	str	r5, [sp, #20]
 80083da:	220a      	movs	r2, #10
 80083dc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80083de:	7807      	ldrb	r7, [r0, #0]
 80083e0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80083e4:	b2d9      	uxtb	r1, r3
 80083e6:	2909      	cmp	r1, #9
 80083e8:	d929      	bls.n	800843e <_strtod_l+0x1a6>
 80083ea:	4622      	mov	r2, r4
 80083ec:	f8d8 1000 	ldr.w	r1, [r8]
 80083f0:	f7ff ff22 	bl	8008238 <strncmp>
 80083f4:	2800      	cmp	r0, #0
 80083f6:	d031      	beq.n	800845c <_strtod_l+0x1c4>
 80083f8:	2000      	movs	r0, #0
 80083fa:	9c05      	ldr	r4, [sp, #20]
 80083fc:	9004      	str	r0, [sp, #16]
 80083fe:	463b      	mov	r3, r7
 8008400:	4602      	mov	r2, r0
 8008402:	2b65      	cmp	r3, #101	; 0x65
 8008404:	d001      	beq.n	800840a <_strtod_l+0x172>
 8008406:	2b45      	cmp	r3, #69	; 0x45
 8008408:	d114      	bne.n	8008434 <_strtod_l+0x19c>
 800840a:	b924      	cbnz	r4, 8008416 <_strtod_l+0x17e>
 800840c:	b910      	cbnz	r0, 8008414 <_strtod_l+0x17c>
 800840e:	9b06      	ldr	r3, [sp, #24]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d09e      	beq.n	8008352 <_strtod_l+0xba>
 8008414:	2400      	movs	r4, #0
 8008416:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8008418:	1c73      	adds	r3, r6, #1
 800841a:	931b      	str	r3, [sp, #108]	; 0x6c
 800841c:	7873      	ldrb	r3, [r6, #1]
 800841e:	2b2b      	cmp	r3, #43	; 0x2b
 8008420:	d078      	beq.n	8008514 <_strtod_l+0x27c>
 8008422:	2b2d      	cmp	r3, #45	; 0x2d
 8008424:	d070      	beq.n	8008508 <_strtod_l+0x270>
 8008426:	f04f 0c00 	mov.w	ip, #0
 800842a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800842e:	2f09      	cmp	r7, #9
 8008430:	d97c      	bls.n	800852c <_strtod_l+0x294>
 8008432:	961b      	str	r6, [sp, #108]	; 0x6c
 8008434:	f04f 0e00 	mov.w	lr, #0
 8008438:	e09a      	b.n	8008570 <_strtod_l+0x2d8>
 800843a:	2300      	movs	r3, #0
 800843c:	e7c7      	b.n	80083ce <_strtod_l+0x136>
 800843e:	9905      	ldr	r1, [sp, #20]
 8008440:	2908      	cmp	r1, #8
 8008442:	bfdd      	ittte	le
 8008444:	9907      	ldrle	r1, [sp, #28]
 8008446:	fb02 3301 	mlale	r3, r2, r1, r3
 800844a:	9307      	strle	r3, [sp, #28]
 800844c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8008450:	9b05      	ldr	r3, [sp, #20]
 8008452:	3001      	adds	r0, #1
 8008454:	3301      	adds	r3, #1
 8008456:	9305      	str	r3, [sp, #20]
 8008458:	901b      	str	r0, [sp, #108]	; 0x6c
 800845a:	e7bf      	b.n	80083dc <_strtod_l+0x144>
 800845c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800845e:	191a      	adds	r2, r3, r4
 8008460:	921b      	str	r2, [sp, #108]	; 0x6c
 8008462:	9a05      	ldr	r2, [sp, #20]
 8008464:	5d1b      	ldrb	r3, [r3, r4]
 8008466:	2a00      	cmp	r2, #0
 8008468:	d037      	beq.n	80084da <_strtod_l+0x242>
 800846a:	9c05      	ldr	r4, [sp, #20]
 800846c:	4602      	mov	r2, r0
 800846e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008472:	2909      	cmp	r1, #9
 8008474:	d913      	bls.n	800849e <_strtod_l+0x206>
 8008476:	2101      	movs	r1, #1
 8008478:	9104      	str	r1, [sp, #16]
 800847a:	e7c2      	b.n	8008402 <_strtod_l+0x16a>
 800847c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800847e:	1c5a      	adds	r2, r3, #1
 8008480:	921b      	str	r2, [sp, #108]	; 0x6c
 8008482:	785b      	ldrb	r3, [r3, #1]
 8008484:	3001      	adds	r0, #1
 8008486:	2b30      	cmp	r3, #48	; 0x30
 8008488:	d0f8      	beq.n	800847c <_strtod_l+0x1e4>
 800848a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800848e:	2a08      	cmp	r2, #8
 8008490:	f200 84e4 	bhi.w	8008e5c <_strtod_l+0xbc4>
 8008494:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008496:	9208      	str	r2, [sp, #32]
 8008498:	4602      	mov	r2, r0
 800849a:	2000      	movs	r0, #0
 800849c:	4604      	mov	r4, r0
 800849e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80084a2:	f100 0101 	add.w	r1, r0, #1
 80084a6:	d012      	beq.n	80084ce <_strtod_l+0x236>
 80084a8:	440a      	add	r2, r1
 80084aa:	eb00 0c04 	add.w	ip, r0, r4
 80084ae:	4621      	mov	r1, r4
 80084b0:	270a      	movs	r7, #10
 80084b2:	458c      	cmp	ip, r1
 80084b4:	d113      	bne.n	80084de <_strtod_l+0x246>
 80084b6:	1821      	adds	r1, r4, r0
 80084b8:	2908      	cmp	r1, #8
 80084ba:	f104 0401 	add.w	r4, r4, #1
 80084be:	4404      	add	r4, r0
 80084c0:	dc19      	bgt.n	80084f6 <_strtod_l+0x25e>
 80084c2:	9b07      	ldr	r3, [sp, #28]
 80084c4:	210a      	movs	r1, #10
 80084c6:	fb01 e303 	mla	r3, r1, r3, lr
 80084ca:	9307      	str	r3, [sp, #28]
 80084cc:	2100      	movs	r1, #0
 80084ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80084d0:	1c58      	adds	r0, r3, #1
 80084d2:	901b      	str	r0, [sp, #108]	; 0x6c
 80084d4:	785b      	ldrb	r3, [r3, #1]
 80084d6:	4608      	mov	r0, r1
 80084d8:	e7c9      	b.n	800846e <_strtod_l+0x1d6>
 80084da:	9805      	ldr	r0, [sp, #20]
 80084dc:	e7d3      	b.n	8008486 <_strtod_l+0x1ee>
 80084de:	2908      	cmp	r1, #8
 80084e0:	f101 0101 	add.w	r1, r1, #1
 80084e4:	dc03      	bgt.n	80084ee <_strtod_l+0x256>
 80084e6:	9b07      	ldr	r3, [sp, #28]
 80084e8:	437b      	muls	r3, r7
 80084ea:	9307      	str	r3, [sp, #28]
 80084ec:	e7e1      	b.n	80084b2 <_strtod_l+0x21a>
 80084ee:	2910      	cmp	r1, #16
 80084f0:	bfd8      	it	le
 80084f2:	437d      	mulle	r5, r7
 80084f4:	e7dd      	b.n	80084b2 <_strtod_l+0x21a>
 80084f6:	2c10      	cmp	r4, #16
 80084f8:	bfdc      	itt	le
 80084fa:	210a      	movle	r1, #10
 80084fc:	fb01 e505 	mlale	r5, r1, r5, lr
 8008500:	e7e4      	b.n	80084cc <_strtod_l+0x234>
 8008502:	2301      	movs	r3, #1
 8008504:	9304      	str	r3, [sp, #16]
 8008506:	e781      	b.n	800840c <_strtod_l+0x174>
 8008508:	f04f 0c01 	mov.w	ip, #1
 800850c:	1cb3      	adds	r3, r6, #2
 800850e:	931b      	str	r3, [sp, #108]	; 0x6c
 8008510:	78b3      	ldrb	r3, [r6, #2]
 8008512:	e78a      	b.n	800842a <_strtod_l+0x192>
 8008514:	f04f 0c00 	mov.w	ip, #0
 8008518:	e7f8      	b.n	800850c <_strtod_l+0x274>
 800851a:	bf00      	nop
 800851c:	08009e3c 	.word	0x08009e3c
 8008520:	7ff00000 	.word	0x7ff00000
 8008524:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008526:	1c5f      	adds	r7, r3, #1
 8008528:	971b      	str	r7, [sp, #108]	; 0x6c
 800852a:	785b      	ldrb	r3, [r3, #1]
 800852c:	2b30      	cmp	r3, #48	; 0x30
 800852e:	d0f9      	beq.n	8008524 <_strtod_l+0x28c>
 8008530:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8008534:	2f08      	cmp	r7, #8
 8008536:	f63f af7d 	bhi.w	8008434 <_strtod_l+0x19c>
 800853a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800853e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008540:	930a      	str	r3, [sp, #40]	; 0x28
 8008542:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008544:	1c5f      	adds	r7, r3, #1
 8008546:	971b      	str	r7, [sp, #108]	; 0x6c
 8008548:	785b      	ldrb	r3, [r3, #1]
 800854a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800854e:	f1b8 0f09 	cmp.w	r8, #9
 8008552:	d937      	bls.n	80085c4 <_strtod_l+0x32c>
 8008554:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008556:	1a7f      	subs	r7, r7, r1
 8008558:	2f08      	cmp	r7, #8
 800855a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800855e:	dc37      	bgt.n	80085d0 <_strtod_l+0x338>
 8008560:	45be      	cmp	lr, r7
 8008562:	bfa8      	it	ge
 8008564:	46be      	movge	lr, r7
 8008566:	f1bc 0f00 	cmp.w	ip, #0
 800856a:	d001      	beq.n	8008570 <_strtod_l+0x2d8>
 800856c:	f1ce 0e00 	rsb	lr, lr, #0
 8008570:	2c00      	cmp	r4, #0
 8008572:	d151      	bne.n	8008618 <_strtod_l+0x380>
 8008574:	2800      	cmp	r0, #0
 8008576:	f47f aece 	bne.w	8008316 <_strtod_l+0x7e>
 800857a:	9a06      	ldr	r2, [sp, #24]
 800857c:	2a00      	cmp	r2, #0
 800857e:	f47f aeca 	bne.w	8008316 <_strtod_l+0x7e>
 8008582:	9a04      	ldr	r2, [sp, #16]
 8008584:	2a00      	cmp	r2, #0
 8008586:	f47f aee4 	bne.w	8008352 <_strtod_l+0xba>
 800858a:	2b4e      	cmp	r3, #78	; 0x4e
 800858c:	d027      	beq.n	80085de <_strtod_l+0x346>
 800858e:	dc21      	bgt.n	80085d4 <_strtod_l+0x33c>
 8008590:	2b49      	cmp	r3, #73	; 0x49
 8008592:	f47f aede 	bne.w	8008352 <_strtod_l+0xba>
 8008596:	49a0      	ldr	r1, [pc, #640]	; (8008818 <_strtod_l+0x580>)
 8008598:	a81b      	add	r0, sp, #108	; 0x6c
 800859a:	f000 ff07 	bl	80093ac <__match>
 800859e:	2800      	cmp	r0, #0
 80085a0:	f43f aed7 	beq.w	8008352 <_strtod_l+0xba>
 80085a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80085a6:	499d      	ldr	r1, [pc, #628]	; (800881c <_strtod_l+0x584>)
 80085a8:	3b01      	subs	r3, #1
 80085aa:	a81b      	add	r0, sp, #108	; 0x6c
 80085ac:	931b      	str	r3, [sp, #108]	; 0x6c
 80085ae:	f000 fefd 	bl	80093ac <__match>
 80085b2:	b910      	cbnz	r0, 80085ba <_strtod_l+0x322>
 80085b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80085b6:	3301      	adds	r3, #1
 80085b8:	931b      	str	r3, [sp, #108]	; 0x6c
 80085ba:	f8df b274 	ldr.w	fp, [pc, #628]	; 8008830 <_strtod_l+0x598>
 80085be:	f04f 0a00 	mov.w	sl, #0
 80085c2:	e6a8      	b.n	8008316 <_strtod_l+0x7e>
 80085c4:	210a      	movs	r1, #10
 80085c6:	fb01 3e0e 	mla	lr, r1, lr, r3
 80085ca:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80085ce:	e7b8      	b.n	8008542 <_strtod_l+0x2aa>
 80085d0:	46be      	mov	lr, r7
 80085d2:	e7c8      	b.n	8008566 <_strtod_l+0x2ce>
 80085d4:	2b69      	cmp	r3, #105	; 0x69
 80085d6:	d0de      	beq.n	8008596 <_strtod_l+0x2fe>
 80085d8:	2b6e      	cmp	r3, #110	; 0x6e
 80085da:	f47f aeba 	bne.w	8008352 <_strtod_l+0xba>
 80085de:	4990      	ldr	r1, [pc, #576]	; (8008820 <_strtod_l+0x588>)
 80085e0:	a81b      	add	r0, sp, #108	; 0x6c
 80085e2:	f000 fee3 	bl	80093ac <__match>
 80085e6:	2800      	cmp	r0, #0
 80085e8:	f43f aeb3 	beq.w	8008352 <_strtod_l+0xba>
 80085ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	2b28      	cmp	r3, #40	; 0x28
 80085f2:	d10e      	bne.n	8008612 <_strtod_l+0x37a>
 80085f4:	aa1e      	add	r2, sp, #120	; 0x78
 80085f6:	498b      	ldr	r1, [pc, #556]	; (8008824 <_strtod_l+0x58c>)
 80085f8:	a81b      	add	r0, sp, #108	; 0x6c
 80085fa:	f000 feeb 	bl	80093d4 <__hexnan>
 80085fe:	2805      	cmp	r0, #5
 8008600:	d107      	bne.n	8008612 <_strtod_l+0x37a>
 8008602:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008604:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8008608:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800860c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008610:	e681      	b.n	8008316 <_strtod_l+0x7e>
 8008612:	f8df b224 	ldr.w	fp, [pc, #548]	; 8008838 <_strtod_l+0x5a0>
 8008616:	e7d2      	b.n	80085be <_strtod_l+0x326>
 8008618:	ebae 0302 	sub.w	r3, lr, r2
 800861c:	9306      	str	r3, [sp, #24]
 800861e:	9b05      	ldr	r3, [sp, #20]
 8008620:	9807      	ldr	r0, [sp, #28]
 8008622:	2b00      	cmp	r3, #0
 8008624:	bf08      	it	eq
 8008626:	4623      	moveq	r3, r4
 8008628:	2c10      	cmp	r4, #16
 800862a:	9305      	str	r3, [sp, #20]
 800862c:	46a0      	mov	r8, r4
 800862e:	bfa8      	it	ge
 8008630:	f04f 0810 	movge.w	r8, #16
 8008634:	f7f7 ff1e 	bl	8000474 <__aeabi_ui2d>
 8008638:	2c09      	cmp	r4, #9
 800863a:	4682      	mov	sl, r0
 800863c:	468b      	mov	fp, r1
 800863e:	dc13      	bgt.n	8008668 <_strtod_l+0x3d0>
 8008640:	9b06      	ldr	r3, [sp, #24]
 8008642:	2b00      	cmp	r3, #0
 8008644:	f43f ae67 	beq.w	8008316 <_strtod_l+0x7e>
 8008648:	9b06      	ldr	r3, [sp, #24]
 800864a:	dd7a      	ble.n	8008742 <_strtod_l+0x4aa>
 800864c:	2b16      	cmp	r3, #22
 800864e:	dc61      	bgt.n	8008714 <_strtod_l+0x47c>
 8008650:	4a75      	ldr	r2, [pc, #468]	; (8008828 <_strtod_l+0x590>)
 8008652:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8008656:	e9de 0100 	ldrd	r0, r1, [lr]
 800865a:	4652      	mov	r2, sl
 800865c:	465b      	mov	r3, fp
 800865e:	f7f7 ff83 	bl	8000568 <__aeabi_dmul>
 8008662:	4682      	mov	sl, r0
 8008664:	468b      	mov	fp, r1
 8008666:	e656      	b.n	8008316 <_strtod_l+0x7e>
 8008668:	4b6f      	ldr	r3, [pc, #444]	; (8008828 <_strtod_l+0x590>)
 800866a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800866e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008672:	f7f7 ff79 	bl	8000568 <__aeabi_dmul>
 8008676:	4606      	mov	r6, r0
 8008678:	4628      	mov	r0, r5
 800867a:	460f      	mov	r7, r1
 800867c:	f7f7 fefa 	bl	8000474 <__aeabi_ui2d>
 8008680:	4602      	mov	r2, r0
 8008682:	460b      	mov	r3, r1
 8008684:	4630      	mov	r0, r6
 8008686:	4639      	mov	r1, r7
 8008688:	f7f7 fdb8 	bl	80001fc <__adddf3>
 800868c:	2c0f      	cmp	r4, #15
 800868e:	4682      	mov	sl, r0
 8008690:	468b      	mov	fp, r1
 8008692:	ddd5      	ble.n	8008640 <_strtod_l+0x3a8>
 8008694:	9b06      	ldr	r3, [sp, #24]
 8008696:	eba4 0808 	sub.w	r8, r4, r8
 800869a:	4498      	add	r8, r3
 800869c:	f1b8 0f00 	cmp.w	r8, #0
 80086a0:	f340 8096 	ble.w	80087d0 <_strtod_l+0x538>
 80086a4:	f018 030f 	ands.w	r3, r8, #15
 80086a8:	d00a      	beq.n	80086c0 <_strtod_l+0x428>
 80086aa:	495f      	ldr	r1, [pc, #380]	; (8008828 <_strtod_l+0x590>)
 80086ac:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80086b0:	4652      	mov	r2, sl
 80086b2:	465b      	mov	r3, fp
 80086b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086b8:	f7f7 ff56 	bl	8000568 <__aeabi_dmul>
 80086bc:	4682      	mov	sl, r0
 80086be:	468b      	mov	fp, r1
 80086c0:	f038 080f 	bics.w	r8, r8, #15
 80086c4:	d073      	beq.n	80087ae <_strtod_l+0x516>
 80086c6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80086ca:	dd47      	ble.n	800875c <_strtod_l+0x4c4>
 80086cc:	2400      	movs	r4, #0
 80086ce:	46a0      	mov	r8, r4
 80086d0:	9407      	str	r4, [sp, #28]
 80086d2:	9405      	str	r4, [sp, #20]
 80086d4:	2322      	movs	r3, #34	; 0x22
 80086d6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8008830 <_strtod_l+0x598>
 80086da:	f8c9 3000 	str.w	r3, [r9]
 80086de:	f04f 0a00 	mov.w	sl, #0
 80086e2:	9b07      	ldr	r3, [sp, #28]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	f43f ae16 	beq.w	8008316 <_strtod_l+0x7e>
 80086ea:	991c      	ldr	r1, [sp, #112]	; 0x70
 80086ec:	4648      	mov	r0, r9
 80086ee:	f000 ff4b 	bl	8009588 <_Bfree>
 80086f2:	9905      	ldr	r1, [sp, #20]
 80086f4:	4648      	mov	r0, r9
 80086f6:	f000 ff47 	bl	8009588 <_Bfree>
 80086fa:	4641      	mov	r1, r8
 80086fc:	4648      	mov	r0, r9
 80086fe:	f000 ff43 	bl	8009588 <_Bfree>
 8008702:	9907      	ldr	r1, [sp, #28]
 8008704:	4648      	mov	r0, r9
 8008706:	f000 ff3f 	bl	8009588 <_Bfree>
 800870a:	4621      	mov	r1, r4
 800870c:	4648      	mov	r0, r9
 800870e:	f000 ff3b 	bl	8009588 <_Bfree>
 8008712:	e600      	b.n	8008316 <_strtod_l+0x7e>
 8008714:	9a06      	ldr	r2, [sp, #24]
 8008716:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800871a:	4293      	cmp	r3, r2
 800871c:	dbba      	blt.n	8008694 <_strtod_l+0x3fc>
 800871e:	4d42      	ldr	r5, [pc, #264]	; (8008828 <_strtod_l+0x590>)
 8008720:	f1c4 040f 	rsb	r4, r4, #15
 8008724:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008728:	4652      	mov	r2, sl
 800872a:	465b      	mov	r3, fp
 800872c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008730:	f7f7 ff1a 	bl	8000568 <__aeabi_dmul>
 8008734:	9b06      	ldr	r3, [sp, #24]
 8008736:	1b1c      	subs	r4, r3, r4
 8008738:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800873c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008740:	e78d      	b.n	800865e <_strtod_l+0x3c6>
 8008742:	f113 0f16 	cmn.w	r3, #22
 8008746:	dba5      	blt.n	8008694 <_strtod_l+0x3fc>
 8008748:	4a37      	ldr	r2, [pc, #220]	; (8008828 <_strtod_l+0x590>)
 800874a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800874e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8008752:	4650      	mov	r0, sl
 8008754:	4659      	mov	r1, fp
 8008756:	f7f8 f831 	bl	80007bc <__aeabi_ddiv>
 800875a:	e782      	b.n	8008662 <_strtod_l+0x3ca>
 800875c:	2300      	movs	r3, #0
 800875e:	4e33      	ldr	r6, [pc, #204]	; (800882c <_strtod_l+0x594>)
 8008760:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008764:	4650      	mov	r0, sl
 8008766:	4659      	mov	r1, fp
 8008768:	461d      	mov	r5, r3
 800876a:	f1b8 0f01 	cmp.w	r8, #1
 800876e:	dc21      	bgt.n	80087b4 <_strtod_l+0x51c>
 8008770:	b10b      	cbz	r3, 8008776 <_strtod_l+0x4de>
 8008772:	4682      	mov	sl, r0
 8008774:	468b      	mov	fp, r1
 8008776:	4b2d      	ldr	r3, [pc, #180]	; (800882c <_strtod_l+0x594>)
 8008778:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800877c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008780:	4652      	mov	r2, sl
 8008782:	465b      	mov	r3, fp
 8008784:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008788:	f7f7 feee 	bl	8000568 <__aeabi_dmul>
 800878c:	4b28      	ldr	r3, [pc, #160]	; (8008830 <_strtod_l+0x598>)
 800878e:	460a      	mov	r2, r1
 8008790:	400b      	ands	r3, r1
 8008792:	4928      	ldr	r1, [pc, #160]	; (8008834 <_strtod_l+0x59c>)
 8008794:	428b      	cmp	r3, r1
 8008796:	4682      	mov	sl, r0
 8008798:	d898      	bhi.n	80086cc <_strtod_l+0x434>
 800879a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800879e:	428b      	cmp	r3, r1
 80087a0:	bf86      	itte	hi
 80087a2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800883c <_strtod_l+0x5a4>
 80087a6:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 80087aa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80087ae:	2300      	movs	r3, #0
 80087b0:	9304      	str	r3, [sp, #16]
 80087b2:	e077      	b.n	80088a4 <_strtod_l+0x60c>
 80087b4:	f018 0f01 	tst.w	r8, #1
 80087b8:	d006      	beq.n	80087c8 <_strtod_l+0x530>
 80087ba:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80087be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c2:	f7f7 fed1 	bl	8000568 <__aeabi_dmul>
 80087c6:	2301      	movs	r3, #1
 80087c8:	3501      	adds	r5, #1
 80087ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 80087ce:	e7cc      	b.n	800876a <_strtod_l+0x4d2>
 80087d0:	d0ed      	beq.n	80087ae <_strtod_l+0x516>
 80087d2:	f1c8 0800 	rsb	r8, r8, #0
 80087d6:	f018 020f 	ands.w	r2, r8, #15
 80087da:	d00a      	beq.n	80087f2 <_strtod_l+0x55a>
 80087dc:	4b12      	ldr	r3, [pc, #72]	; (8008828 <_strtod_l+0x590>)
 80087de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087e2:	4650      	mov	r0, sl
 80087e4:	4659      	mov	r1, fp
 80087e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ea:	f7f7 ffe7 	bl	80007bc <__aeabi_ddiv>
 80087ee:	4682      	mov	sl, r0
 80087f0:	468b      	mov	fp, r1
 80087f2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80087f6:	d0da      	beq.n	80087ae <_strtod_l+0x516>
 80087f8:	f1b8 0f1f 	cmp.w	r8, #31
 80087fc:	dd20      	ble.n	8008840 <_strtod_l+0x5a8>
 80087fe:	2400      	movs	r4, #0
 8008800:	46a0      	mov	r8, r4
 8008802:	9407      	str	r4, [sp, #28]
 8008804:	9405      	str	r4, [sp, #20]
 8008806:	2322      	movs	r3, #34	; 0x22
 8008808:	f04f 0a00 	mov.w	sl, #0
 800880c:	f04f 0b00 	mov.w	fp, #0
 8008810:	f8c9 3000 	str.w	r3, [r9]
 8008814:	e765      	b.n	80086e2 <_strtod_l+0x44a>
 8008816:	bf00      	nop
 8008818:	08009e2d 	.word	0x08009e2d
 800881c:	08009e30 	.word	0x08009e30
 8008820:	08009e36 	.word	0x08009e36
 8008824:	08009e50 	.word	0x08009e50
 8008828:	08009ec8 	.word	0x08009ec8
 800882c:	08009ea0 	.word	0x08009ea0
 8008830:	7ff00000 	.word	0x7ff00000
 8008834:	7ca00000 	.word	0x7ca00000
 8008838:	fff80000 	.word	0xfff80000
 800883c:	7fefffff 	.word	0x7fefffff
 8008840:	f018 0310 	ands.w	r3, r8, #16
 8008844:	bf18      	it	ne
 8008846:	236a      	movne	r3, #106	; 0x6a
 8008848:	4da0      	ldr	r5, [pc, #640]	; (8008acc <_strtod_l+0x834>)
 800884a:	9304      	str	r3, [sp, #16]
 800884c:	4650      	mov	r0, sl
 800884e:	4659      	mov	r1, fp
 8008850:	2300      	movs	r3, #0
 8008852:	f1b8 0f00 	cmp.w	r8, #0
 8008856:	f300 810a 	bgt.w	8008a6e <_strtod_l+0x7d6>
 800885a:	b10b      	cbz	r3, 8008860 <_strtod_l+0x5c8>
 800885c:	4682      	mov	sl, r0
 800885e:	468b      	mov	fp, r1
 8008860:	9b04      	ldr	r3, [sp, #16]
 8008862:	b1bb      	cbz	r3, 8008894 <_strtod_l+0x5fc>
 8008864:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8008868:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800886c:	2b00      	cmp	r3, #0
 800886e:	4659      	mov	r1, fp
 8008870:	dd10      	ble.n	8008894 <_strtod_l+0x5fc>
 8008872:	2b1f      	cmp	r3, #31
 8008874:	f340 8107 	ble.w	8008a86 <_strtod_l+0x7ee>
 8008878:	2b34      	cmp	r3, #52	; 0x34
 800887a:	bfde      	ittt	le
 800887c:	3b20      	suble	r3, #32
 800887e:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8008882:	fa02 f303 	lslle.w	r3, r2, r3
 8008886:	f04f 0a00 	mov.w	sl, #0
 800888a:	bfcc      	ite	gt
 800888c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008890:	ea03 0b01 	andle.w	fp, r3, r1
 8008894:	2200      	movs	r2, #0
 8008896:	2300      	movs	r3, #0
 8008898:	4650      	mov	r0, sl
 800889a:	4659      	mov	r1, fp
 800889c:	f7f8 f8cc 	bl	8000a38 <__aeabi_dcmpeq>
 80088a0:	2800      	cmp	r0, #0
 80088a2:	d1ac      	bne.n	80087fe <_strtod_l+0x566>
 80088a4:	9b07      	ldr	r3, [sp, #28]
 80088a6:	9300      	str	r3, [sp, #0]
 80088a8:	9a05      	ldr	r2, [sp, #20]
 80088aa:	9908      	ldr	r1, [sp, #32]
 80088ac:	4623      	mov	r3, r4
 80088ae:	4648      	mov	r0, r9
 80088b0:	f000 febc 	bl	800962c <__s2b>
 80088b4:	9007      	str	r0, [sp, #28]
 80088b6:	2800      	cmp	r0, #0
 80088b8:	f43f af08 	beq.w	80086cc <_strtod_l+0x434>
 80088bc:	9a06      	ldr	r2, [sp, #24]
 80088be:	9b06      	ldr	r3, [sp, #24]
 80088c0:	2a00      	cmp	r2, #0
 80088c2:	f1c3 0300 	rsb	r3, r3, #0
 80088c6:	bfa8      	it	ge
 80088c8:	2300      	movge	r3, #0
 80088ca:	930e      	str	r3, [sp, #56]	; 0x38
 80088cc:	2400      	movs	r4, #0
 80088ce:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80088d2:	9316      	str	r3, [sp, #88]	; 0x58
 80088d4:	46a0      	mov	r8, r4
 80088d6:	9b07      	ldr	r3, [sp, #28]
 80088d8:	4648      	mov	r0, r9
 80088da:	6859      	ldr	r1, [r3, #4]
 80088dc:	f000 fe20 	bl	8009520 <_Balloc>
 80088e0:	9005      	str	r0, [sp, #20]
 80088e2:	2800      	cmp	r0, #0
 80088e4:	f43f aef6 	beq.w	80086d4 <_strtod_l+0x43c>
 80088e8:	9b07      	ldr	r3, [sp, #28]
 80088ea:	691a      	ldr	r2, [r3, #16]
 80088ec:	3202      	adds	r2, #2
 80088ee:	f103 010c 	add.w	r1, r3, #12
 80088f2:	0092      	lsls	r2, r2, #2
 80088f4:	300c      	adds	r0, #12
 80088f6:	f7ff fbd3 	bl	80080a0 <memcpy>
 80088fa:	aa1e      	add	r2, sp, #120	; 0x78
 80088fc:	a91d      	add	r1, sp, #116	; 0x74
 80088fe:	ec4b ab10 	vmov	d0, sl, fp
 8008902:	4648      	mov	r0, r9
 8008904:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008908:	f001 f94c 	bl	8009ba4 <__d2b>
 800890c:	901c      	str	r0, [sp, #112]	; 0x70
 800890e:	2800      	cmp	r0, #0
 8008910:	f43f aee0 	beq.w	80086d4 <_strtod_l+0x43c>
 8008914:	2101      	movs	r1, #1
 8008916:	4648      	mov	r0, r9
 8008918:	f000 ff14 	bl	8009744 <__i2b>
 800891c:	4680      	mov	r8, r0
 800891e:	2800      	cmp	r0, #0
 8008920:	f43f aed8 	beq.w	80086d4 <_strtod_l+0x43c>
 8008924:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008926:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008928:	2e00      	cmp	r6, #0
 800892a:	bfab      	itete	ge
 800892c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800892e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8008930:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8008932:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8008934:	bfac      	ite	ge
 8008936:	18f7      	addge	r7, r6, r3
 8008938:	1b9d      	sublt	r5, r3, r6
 800893a:	9b04      	ldr	r3, [sp, #16]
 800893c:	1af6      	subs	r6, r6, r3
 800893e:	4416      	add	r6, r2
 8008940:	4b63      	ldr	r3, [pc, #396]	; (8008ad0 <_strtod_l+0x838>)
 8008942:	3e01      	subs	r6, #1
 8008944:	429e      	cmp	r6, r3
 8008946:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800894a:	f280 80af 	bge.w	8008aac <_strtod_l+0x814>
 800894e:	1b9b      	subs	r3, r3, r6
 8008950:	2b1f      	cmp	r3, #31
 8008952:	eba2 0203 	sub.w	r2, r2, r3
 8008956:	f04f 0101 	mov.w	r1, #1
 800895a:	f300 809b 	bgt.w	8008a94 <_strtod_l+0x7fc>
 800895e:	fa01 f303 	lsl.w	r3, r1, r3
 8008962:	930f      	str	r3, [sp, #60]	; 0x3c
 8008964:	2300      	movs	r3, #0
 8008966:	930a      	str	r3, [sp, #40]	; 0x28
 8008968:	18be      	adds	r6, r7, r2
 800896a:	9b04      	ldr	r3, [sp, #16]
 800896c:	42b7      	cmp	r7, r6
 800896e:	4415      	add	r5, r2
 8008970:	441d      	add	r5, r3
 8008972:	463b      	mov	r3, r7
 8008974:	bfa8      	it	ge
 8008976:	4633      	movge	r3, r6
 8008978:	42ab      	cmp	r3, r5
 800897a:	bfa8      	it	ge
 800897c:	462b      	movge	r3, r5
 800897e:	2b00      	cmp	r3, #0
 8008980:	bfc2      	ittt	gt
 8008982:	1af6      	subgt	r6, r6, r3
 8008984:	1aed      	subgt	r5, r5, r3
 8008986:	1aff      	subgt	r7, r7, r3
 8008988:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800898a:	b1bb      	cbz	r3, 80089bc <_strtod_l+0x724>
 800898c:	4641      	mov	r1, r8
 800898e:	461a      	mov	r2, r3
 8008990:	4648      	mov	r0, r9
 8008992:	f000 ff77 	bl	8009884 <__pow5mult>
 8008996:	4680      	mov	r8, r0
 8008998:	2800      	cmp	r0, #0
 800899a:	f43f ae9b 	beq.w	80086d4 <_strtod_l+0x43c>
 800899e:	4601      	mov	r1, r0
 80089a0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80089a2:	4648      	mov	r0, r9
 80089a4:	f000 fed7 	bl	8009756 <__multiply>
 80089a8:	900c      	str	r0, [sp, #48]	; 0x30
 80089aa:	2800      	cmp	r0, #0
 80089ac:	f43f ae92 	beq.w	80086d4 <_strtod_l+0x43c>
 80089b0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80089b2:	4648      	mov	r0, r9
 80089b4:	f000 fde8 	bl	8009588 <_Bfree>
 80089b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089ba:	931c      	str	r3, [sp, #112]	; 0x70
 80089bc:	2e00      	cmp	r6, #0
 80089be:	dc7a      	bgt.n	8008ab6 <_strtod_l+0x81e>
 80089c0:	9b06      	ldr	r3, [sp, #24]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	dd08      	ble.n	80089d8 <_strtod_l+0x740>
 80089c6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80089c8:	9905      	ldr	r1, [sp, #20]
 80089ca:	4648      	mov	r0, r9
 80089cc:	f000 ff5a 	bl	8009884 <__pow5mult>
 80089d0:	9005      	str	r0, [sp, #20]
 80089d2:	2800      	cmp	r0, #0
 80089d4:	f43f ae7e 	beq.w	80086d4 <_strtod_l+0x43c>
 80089d8:	2d00      	cmp	r5, #0
 80089da:	dd08      	ble.n	80089ee <_strtod_l+0x756>
 80089dc:	462a      	mov	r2, r5
 80089de:	9905      	ldr	r1, [sp, #20]
 80089e0:	4648      	mov	r0, r9
 80089e2:	f000 ff9d 	bl	8009920 <__lshift>
 80089e6:	9005      	str	r0, [sp, #20]
 80089e8:	2800      	cmp	r0, #0
 80089ea:	f43f ae73 	beq.w	80086d4 <_strtod_l+0x43c>
 80089ee:	2f00      	cmp	r7, #0
 80089f0:	dd08      	ble.n	8008a04 <_strtod_l+0x76c>
 80089f2:	4641      	mov	r1, r8
 80089f4:	463a      	mov	r2, r7
 80089f6:	4648      	mov	r0, r9
 80089f8:	f000 ff92 	bl	8009920 <__lshift>
 80089fc:	4680      	mov	r8, r0
 80089fe:	2800      	cmp	r0, #0
 8008a00:	f43f ae68 	beq.w	80086d4 <_strtod_l+0x43c>
 8008a04:	9a05      	ldr	r2, [sp, #20]
 8008a06:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008a08:	4648      	mov	r0, r9
 8008a0a:	f000 fff7 	bl	80099fc <__mdiff>
 8008a0e:	4604      	mov	r4, r0
 8008a10:	2800      	cmp	r0, #0
 8008a12:	f43f ae5f 	beq.w	80086d4 <_strtod_l+0x43c>
 8008a16:	68c3      	ldr	r3, [r0, #12]
 8008a18:	930c      	str	r3, [sp, #48]	; 0x30
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	60c3      	str	r3, [r0, #12]
 8008a1e:	4641      	mov	r1, r8
 8008a20:	f000 ffd2 	bl	80099c8 <__mcmp>
 8008a24:	2800      	cmp	r0, #0
 8008a26:	da55      	bge.n	8008ad4 <_strtod_l+0x83c>
 8008a28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a2a:	b9e3      	cbnz	r3, 8008a66 <_strtod_l+0x7ce>
 8008a2c:	f1ba 0f00 	cmp.w	sl, #0
 8008a30:	d119      	bne.n	8008a66 <_strtod_l+0x7ce>
 8008a32:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a36:	b9b3      	cbnz	r3, 8008a66 <_strtod_l+0x7ce>
 8008a38:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008a3c:	0d1b      	lsrs	r3, r3, #20
 8008a3e:	051b      	lsls	r3, r3, #20
 8008a40:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008a44:	d90f      	bls.n	8008a66 <_strtod_l+0x7ce>
 8008a46:	6963      	ldr	r3, [r4, #20]
 8008a48:	b913      	cbnz	r3, 8008a50 <_strtod_l+0x7b8>
 8008a4a:	6923      	ldr	r3, [r4, #16]
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	dd0a      	ble.n	8008a66 <_strtod_l+0x7ce>
 8008a50:	4621      	mov	r1, r4
 8008a52:	2201      	movs	r2, #1
 8008a54:	4648      	mov	r0, r9
 8008a56:	f000 ff63 	bl	8009920 <__lshift>
 8008a5a:	4641      	mov	r1, r8
 8008a5c:	4604      	mov	r4, r0
 8008a5e:	f000 ffb3 	bl	80099c8 <__mcmp>
 8008a62:	2800      	cmp	r0, #0
 8008a64:	dc67      	bgt.n	8008b36 <_strtod_l+0x89e>
 8008a66:	9b04      	ldr	r3, [sp, #16]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d171      	bne.n	8008b50 <_strtod_l+0x8b8>
 8008a6c:	e63d      	b.n	80086ea <_strtod_l+0x452>
 8008a6e:	f018 0f01 	tst.w	r8, #1
 8008a72:	d004      	beq.n	8008a7e <_strtod_l+0x7e6>
 8008a74:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008a78:	f7f7 fd76 	bl	8000568 <__aeabi_dmul>
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008a82:	3508      	adds	r5, #8
 8008a84:	e6e5      	b.n	8008852 <_strtod_l+0x5ba>
 8008a86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a8e:	ea03 0a0a 	and.w	sl, r3, sl
 8008a92:	e6ff      	b.n	8008894 <_strtod_l+0x5fc>
 8008a94:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8008a98:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8008a9c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008aa0:	36e2      	adds	r6, #226	; 0xe2
 8008aa2:	fa01 f306 	lsl.w	r3, r1, r6
 8008aa6:	930a      	str	r3, [sp, #40]	; 0x28
 8008aa8:	910f      	str	r1, [sp, #60]	; 0x3c
 8008aaa:	e75d      	b.n	8008968 <_strtod_l+0x6d0>
 8008aac:	2300      	movs	r3, #0
 8008aae:	930a      	str	r3, [sp, #40]	; 0x28
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ab4:	e758      	b.n	8008968 <_strtod_l+0x6d0>
 8008ab6:	4632      	mov	r2, r6
 8008ab8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008aba:	4648      	mov	r0, r9
 8008abc:	f000 ff30 	bl	8009920 <__lshift>
 8008ac0:	901c      	str	r0, [sp, #112]	; 0x70
 8008ac2:	2800      	cmp	r0, #0
 8008ac4:	f47f af7c 	bne.w	80089c0 <_strtod_l+0x728>
 8008ac8:	e604      	b.n	80086d4 <_strtod_l+0x43c>
 8008aca:	bf00      	nop
 8008acc:	08009e68 	.word	0x08009e68
 8008ad0:	fffffc02 	.word	0xfffffc02
 8008ad4:	465d      	mov	r5, fp
 8008ad6:	f040 8086 	bne.w	8008be6 <_strtod_l+0x94e>
 8008ada:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008adc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008ae0:	b32a      	cbz	r2, 8008b2e <_strtod_l+0x896>
 8008ae2:	4aaf      	ldr	r2, [pc, #700]	; (8008da0 <_strtod_l+0xb08>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d153      	bne.n	8008b90 <_strtod_l+0x8f8>
 8008ae8:	9b04      	ldr	r3, [sp, #16]
 8008aea:	4650      	mov	r0, sl
 8008aec:	b1d3      	cbz	r3, 8008b24 <_strtod_l+0x88c>
 8008aee:	4aad      	ldr	r2, [pc, #692]	; (8008da4 <_strtod_l+0xb0c>)
 8008af0:	402a      	ands	r2, r5
 8008af2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008af6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008afa:	d816      	bhi.n	8008b2a <_strtod_l+0x892>
 8008afc:	0d12      	lsrs	r2, r2, #20
 8008afe:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008b02:	fa01 f303 	lsl.w	r3, r1, r3
 8008b06:	4298      	cmp	r0, r3
 8008b08:	d142      	bne.n	8008b90 <_strtod_l+0x8f8>
 8008b0a:	4ba7      	ldr	r3, [pc, #668]	; (8008da8 <_strtod_l+0xb10>)
 8008b0c:	429d      	cmp	r5, r3
 8008b0e:	d102      	bne.n	8008b16 <_strtod_l+0x87e>
 8008b10:	3001      	adds	r0, #1
 8008b12:	f43f addf 	beq.w	80086d4 <_strtod_l+0x43c>
 8008b16:	4ba3      	ldr	r3, [pc, #652]	; (8008da4 <_strtod_l+0xb0c>)
 8008b18:	402b      	ands	r3, r5
 8008b1a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008b1e:	f04f 0a00 	mov.w	sl, #0
 8008b22:	e7a0      	b.n	8008a66 <_strtod_l+0x7ce>
 8008b24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b28:	e7ed      	b.n	8008b06 <_strtod_l+0x86e>
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	e7eb      	b.n	8008b06 <_strtod_l+0x86e>
 8008b2e:	bb7b      	cbnz	r3, 8008b90 <_strtod_l+0x8f8>
 8008b30:	f1ba 0f00 	cmp.w	sl, #0
 8008b34:	d12c      	bne.n	8008b90 <_strtod_l+0x8f8>
 8008b36:	9904      	ldr	r1, [sp, #16]
 8008b38:	4a9a      	ldr	r2, [pc, #616]	; (8008da4 <_strtod_l+0xb0c>)
 8008b3a:	465b      	mov	r3, fp
 8008b3c:	b1f1      	cbz	r1, 8008b7c <_strtod_l+0x8e4>
 8008b3e:	ea02 010b 	and.w	r1, r2, fp
 8008b42:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008b46:	dc19      	bgt.n	8008b7c <_strtod_l+0x8e4>
 8008b48:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008b4c:	f77f ae5b 	ble.w	8008806 <_strtod_l+0x56e>
 8008b50:	4a96      	ldr	r2, [pc, #600]	; (8008dac <_strtod_l+0xb14>)
 8008b52:	2300      	movs	r3, #0
 8008b54:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8008b58:	4650      	mov	r0, sl
 8008b5a:	4659      	mov	r1, fp
 8008b5c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008b60:	f7f7 fd02 	bl	8000568 <__aeabi_dmul>
 8008b64:	4682      	mov	sl, r0
 8008b66:	468b      	mov	fp, r1
 8008b68:	2900      	cmp	r1, #0
 8008b6a:	f47f adbe 	bne.w	80086ea <_strtod_l+0x452>
 8008b6e:	2800      	cmp	r0, #0
 8008b70:	f47f adbb 	bne.w	80086ea <_strtod_l+0x452>
 8008b74:	2322      	movs	r3, #34	; 0x22
 8008b76:	f8c9 3000 	str.w	r3, [r9]
 8008b7a:	e5b6      	b.n	80086ea <_strtod_l+0x452>
 8008b7c:	4013      	ands	r3, r2
 8008b7e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008b82:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008b86:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008b8a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008b8e:	e76a      	b.n	8008a66 <_strtod_l+0x7ce>
 8008b90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b92:	b193      	cbz	r3, 8008bba <_strtod_l+0x922>
 8008b94:	422b      	tst	r3, r5
 8008b96:	f43f af66 	beq.w	8008a66 <_strtod_l+0x7ce>
 8008b9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b9c:	9a04      	ldr	r2, [sp, #16]
 8008b9e:	4650      	mov	r0, sl
 8008ba0:	4659      	mov	r1, fp
 8008ba2:	b173      	cbz	r3, 8008bc2 <_strtod_l+0x92a>
 8008ba4:	f7ff fb5a 	bl	800825c <sulp>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	460b      	mov	r3, r1
 8008bac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008bb0:	f7f7 fb24 	bl	80001fc <__adddf3>
 8008bb4:	4682      	mov	sl, r0
 8008bb6:	468b      	mov	fp, r1
 8008bb8:	e755      	b.n	8008a66 <_strtod_l+0x7ce>
 8008bba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008bbc:	ea13 0f0a 	tst.w	r3, sl
 8008bc0:	e7e9      	b.n	8008b96 <_strtod_l+0x8fe>
 8008bc2:	f7ff fb4b 	bl	800825c <sulp>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	460b      	mov	r3, r1
 8008bca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008bce:	f7f7 fb13 	bl	80001f8 <__aeabi_dsub>
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	4682      	mov	sl, r0
 8008bd8:	468b      	mov	fp, r1
 8008bda:	f7f7 ff2d 	bl	8000a38 <__aeabi_dcmpeq>
 8008bde:	2800      	cmp	r0, #0
 8008be0:	f47f ae11 	bne.w	8008806 <_strtod_l+0x56e>
 8008be4:	e73f      	b.n	8008a66 <_strtod_l+0x7ce>
 8008be6:	4641      	mov	r1, r8
 8008be8:	4620      	mov	r0, r4
 8008bea:	f001 f82a 	bl	8009c42 <__ratio>
 8008bee:	ec57 6b10 	vmov	r6, r7, d0
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008bf8:	ee10 0a10 	vmov	r0, s0
 8008bfc:	4639      	mov	r1, r7
 8008bfe:	f7f7 ff2f 	bl	8000a60 <__aeabi_dcmple>
 8008c02:	2800      	cmp	r0, #0
 8008c04:	d077      	beq.n	8008cf6 <_strtod_l+0xa5e>
 8008c06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d04a      	beq.n	8008ca2 <_strtod_l+0xa0a>
 8008c0c:	4b68      	ldr	r3, [pc, #416]	; (8008db0 <_strtod_l+0xb18>)
 8008c0e:	2200      	movs	r2, #0
 8008c10:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008c14:	4f66      	ldr	r7, [pc, #408]	; (8008db0 <_strtod_l+0xb18>)
 8008c16:	2600      	movs	r6, #0
 8008c18:	4b62      	ldr	r3, [pc, #392]	; (8008da4 <_strtod_l+0xb0c>)
 8008c1a:	402b      	ands	r3, r5
 8008c1c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008c20:	4b64      	ldr	r3, [pc, #400]	; (8008db4 <_strtod_l+0xb1c>)
 8008c22:	429a      	cmp	r2, r3
 8008c24:	f040 80ce 	bne.w	8008dc4 <_strtod_l+0xb2c>
 8008c28:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008c2c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008c30:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8008c34:	ec4b ab10 	vmov	d0, sl, fp
 8008c38:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008c3c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008c40:	f000 ff3a 	bl	8009ab8 <__ulp>
 8008c44:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008c48:	ec53 2b10 	vmov	r2, r3, d0
 8008c4c:	f7f7 fc8c 	bl	8000568 <__aeabi_dmul>
 8008c50:	4652      	mov	r2, sl
 8008c52:	465b      	mov	r3, fp
 8008c54:	f7f7 fad2 	bl	80001fc <__adddf3>
 8008c58:	460b      	mov	r3, r1
 8008c5a:	4952      	ldr	r1, [pc, #328]	; (8008da4 <_strtod_l+0xb0c>)
 8008c5c:	4a56      	ldr	r2, [pc, #344]	; (8008db8 <_strtod_l+0xb20>)
 8008c5e:	4019      	ands	r1, r3
 8008c60:	4291      	cmp	r1, r2
 8008c62:	4682      	mov	sl, r0
 8008c64:	d95b      	bls.n	8008d1e <_strtod_l+0xa86>
 8008c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c68:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d103      	bne.n	8008c78 <_strtod_l+0x9e0>
 8008c70:	9b08      	ldr	r3, [sp, #32]
 8008c72:	3301      	adds	r3, #1
 8008c74:	f43f ad2e 	beq.w	80086d4 <_strtod_l+0x43c>
 8008c78:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8008da8 <_strtod_l+0xb10>
 8008c7c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008c80:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008c82:	4648      	mov	r0, r9
 8008c84:	f000 fc80 	bl	8009588 <_Bfree>
 8008c88:	9905      	ldr	r1, [sp, #20]
 8008c8a:	4648      	mov	r0, r9
 8008c8c:	f000 fc7c 	bl	8009588 <_Bfree>
 8008c90:	4641      	mov	r1, r8
 8008c92:	4648      	mov	r0, r9
 8008c94:	f000 fc78 	bl	8009588 <_Bfree>
 8008c98:	4621      	mov	r1, r4
 8008c9a:	4648      	mov	r0, r9
 8008c9c:	f000 fc74 	bl	8009588 <_Bfree>
 8008ca0:	e619      	b.n	80088d6 <_strtod_l+0x63e>
 8008ca2:	f1ba 0f00 	cmp.w	sl, #0
 8008ca6:	d11a      	bne.n	8008cde <_strtod_l+0xa46>
 8008ca8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008cac:	b9eb      	cbnz	r3, 8008cea <_strtod_l+0xa52>
 8008cae:	2200      	movs	r2, #0
 8008cb0:	4b3f      	ldr	r3, [pc, #252]	; (8008db0 <_strtod_l+0xb18>)
 8008cb2:	4630      	mov	r0, r6
 8008cb4:	4639      	mov	r1, r7
 8008cb6:	f7f7 fec9 	bl	8000a4c <__aeabi_dcmplt>
 8008cba:	b9c8      	cbnz	r0, 8008cf0 <_strtod_l+0xa58>
 8008cbc:	4630      	mov	r0, r6
 8008cbe:	4639      	mov	r1, r7
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	4b3e      	ldr	r3, [pc, #248]	; (8008dbc <_strtod_l+0xb24>)
 8008cc4:	f7f7 fc50 	bl	8000568 <__aeabi_dmul>
 8008cc8:	4606      	mov	r6, r0
 8008cca:	460f      	mov	r7, r1
 8008ccc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008cd0:	9618      	str	r6, [sp, #96]	; 0x60
 8008cd2:	9319      	str	r3, [sp, #100]	; 0x64
 8008cd4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8008cd8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008cdc:	e79c      	b.n	8008c18 <_strtod_l+0x980>
 8008cde:	f1ba 0f01 	cmp.w	sl, #1
 8008ce2:	d102      	bne.n	8008cea <_strtod_l+0xa52>
 8008ce4:	2d00      	cmp	r5, #0
 8008ce6:	f43f ad8e 	beq.w	8008806 <_strtod_l+0x56e>
 8008cea:	2200      	movs	r2, #0
 8008cec:	4b34      	ldr	r3, [pc, #208]	; (8008dc0 <_strtod_l+0xb28>)
 8008cee:	e78f      	b.n	8008c10 <_strtod_l+0x978>
 8008cf0:	2600      	movs	r6, #0
 8008cf2:	4f32      	ldr	r7, [pc, #200]	; (8008dbc <_strtod_l+0xb24>)
 8008cf4:	e7ea      	b.n	8008ccc <_strtod_l+0xa34>
 8008cf6:	4b31      	ldr	r3, [pc, #196]	; (8008dbc <_strtod_l+0xb24>)
 8008cf8:	4630      	mov	r0, r6
 8008cfa:	4639      	mov	r1, r7
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f7f7 fc33 	bl	8000568 <__aeabi_dmul>
 8008d02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d04:	4606      	mov	r6, r0
 8008d06:	460f      	mov	r7, r1
 8008d08:	b933      	cbnz	r3, 8008d18 <_strtod_l+0xa80>
 8008d0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008d0e:	9010      	str	r0, [sp, #64]	; 0x40
 8008d10:	9311      	str	r3, [sp, #68]	; 0x44
 8008d12:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008d16:	e7df      	b.n	8008cd8 <_strtod_l+0xa40>
 8008d18:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008d1c:	e7f9      	b.n	8008d12 <_strtod_l+0xa7a>
 8008d1e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008d22:	9b04      	ldr	r3, [sp, #16]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d1ab      	bne.n	8008c80 <_strtod_l+0x9e8>
 8008d28:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008d2c:	0d1b      	lsrs	r3, r3, #20
 8008d2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008d30:	051b      	lsls	r3, r3, #20
 8008d32:	429a      	cmp	r2, r3
 8008d34:	465d      	mov	r5, fp
 8008d36:	d1a3      	bne.n	8008c80 <_strtod_l+0x9e8>
 8008d38:	4639      	mov	r1, r7
 8008d3a:	4630      	mov	r0, r6
 8008d3c:	f7f7 fec4 	bl	8000ac8 <__aeabi_d2iz>
 8008d40:	f7f7 fba8 	bl	8000494 <__aeabi_i2d>
 8008d44:	460b      	mov	r3, r1
 8008d46:	4602      	mov	r2, r0
 8008d48:	4639      	mov	r1, r7
 8008d4a:	4630      	mov	r0, r6
 8008d4c:	f7f7 fa54 	bl	80001f8 <__aeabi_dsub>
 8008d50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d52:	4606      	mov	r6, r0
 8008d54:	460f      	mov	r7, r1
 8008d56:	b933      	cbnz	r3, 8008d66 <_strtod_l+0xace>
 8008d58:	f1ba 0f00 	cmp.w	sl, #0
 8008d5c:	d103      	bne.n	8008d66 <_strtod_l+0xace>
 8008d5e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8008d62:	2d00      	cmp	r5, #0
 8008d64:	d06d      	beq.n	8008e42 <_strtod_l+0xbaa>
 8008d66:	a30a      	add	r3, pc, #40	; (adr r3, 8008d90 <_strtod_l+0xaf8>)
 8008d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d6c:	4630      	mov	r0, r6
 8008d6e:	4639      	mov	r1, r7
 8008d70:	f7f7 fe6c 	bl	8000a4c <__aeabi_dcmplt>
 8008d74:	2800      	cmp	r0, #0
 8008d76:	f47f acb8 	bne.w	80086ea <_strtod_l+0x452>
 8008d7a:	a307      	add	r3, pc, #28	; (adr r3, 8008d98 <_strtod_l+0xb00>)
 8008d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d80:	4630      	mov	r0, r6
 8008d82:	4639      	mov	r1, r7
 8008d84:	f7f7 fe80 	bl	8000a88 <__aeabi_dcmpgt>
 8008d88:	2800      	cmp	r0, #0
 8008d8a:	f43f af79 	beq.w	8008c80 <_strtod_l+0x9e8>
 8008d8e:	e4ac      	b.n	80086ea <_strtod_l+0x452>
 8008d90:	94a03595 	.word	0x94a03595
 8008d94:	3fdfffff 	.word	0x3fdfffff
 8008d98:	35afe535 	.word	0x35afe535
 8008d9c:	3fe00000 	.word	0x3fe00000
 8008da0:	000fffff 	.word	0x000fffff
 8008da4:	7ff00000 	.word	0x7ff00000
 8008da8:	7fefffff 	.word	0x7fefffff
 8008dac:	39500000 	.word	0x39500000
 8008db0:	3ff00000 	.word	0x3ff00000
 8008db4:	7fe00000 	.word	0x7fe00000
 8008db8:	7c9fffff 	.word	0x7c9fffff
 8008dbc:	3fe00000 	.word	0x3fe00000
 8008dc0:	bff00000 	.word	0xbff00000
 8008dc4:	9b04      	ldr	r3, [sp, #16]
 8008dc6:	b333      	cbz	r3, 8008e16 <_strtod_l+0xb7e>
 8008dc8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008dca:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008dce:	d822      	bhi.n	8008e16 <_strtod_l+0xb7e>
 8008dd0:	a327      	add	r3, pc, #156	; (adr r3, 8008e70 <_strtod_l+0xbd8>)
 8008dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd6:	4630      	mov	r0, r6
 8008dd8:	4639      	mov	r1, r7
 8008dda:	f7f7 fe41 	bl	8000a60 <__aeabi_dcmple>
 8008dde:	b1a0      	cbz	r0, 8008e0a <_strtod_l+0xb72>
 8008de0:	4639      	mov	r1, r7
 8008de2:	4630      	mov	r0, r6
 8008de4:	f7f7 fe98 	bl	8000b18 <__aeabi_d2uiz>
 8008de8:	2800      	cmp	r0, #0
 8008dea:	bf08      	it	eq
 8008dec:	2001      	moveq	r0, #1
 8008dee:	f7f7 fb41 	bl	8000474 <__aeabi_ui2d>
 8008df2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008df4:	4606      	mov	r6, r0
 8008df6:	460f      	mov	r7, r1
 8008df8:	bb03      	cbnz	r3, 8008e3c <_strtod_l+0xba4>
 8008dfa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008dfe:	9012      	str	r0, [sp, #72]	; 0x48
 8008e00:	9313      	str	r3, [sp, #76]	; 0x4c
 8008e02:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8008e06:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008e0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008e0e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008e12:	1a9b      	subs	r3, r3, r2
 8008e14:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e16:	ed9d 0b08 	vldr	d0, [sp, #32]
 8008e1a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8008e1e:	f000 fe4b 	bl	8009ab8 <__ulp>
 8008e22:	4650      	mov	r0, sl
 8008e24:	ec53 2b10 	vmov	r2, r3, d0
 8008e28:	4659      	mov	r1, fp
 8008e2a:	f7f7 fb9d 	bl	8000568 <__aeabi_dmul>
 8008e2e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008e32:	f7f7 f9e3 	bl	80001fc <__adddf3>
 8008e36:	4682      	mov	sl, r0
 8008e38:	468b      	mov	fp, r1
 8008e3a:	e772      	b.n	8008d22 <_strtod_l+0xa8a>
 8008e3c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8008e40:	e7df      	b.n	8008e02 <_strtod_l+0xb6a>
 8008e42:	a30d      	add	r3, pc, #52	; (adr r3, 8008e78 <_strtod_l+0xbe0>)
 8008e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e48:	f7f7 fe00 	bl	8000a4c <__aeabi_dcmplt>
 8008e4c:	e79c      	b.n	8008d88 <_strtod_l+0xaf0>
 8008e4e:	2300      	movs	r3, #0
 8008e50:	930d      	str	r3, [sp, #52]	; 0x34
 8008e52:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008e54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008e56:	6013      	str	r3, [r2, #0]
 8008e58:	f7ff ba61 	b.w	800831e <_strtod_l+0x86>
 8008e5c:	2b65      	cmp	r3, #101	; 0x65
 8008e5e:	f04f 0200 	mov.w	r2, #0
 8008e62:	f43f ab4e 	beq.w	8008502 <_strtod_l+0x26a>
 8008e66:	2101      	movs	r1, #1
 8008e68:	4614      	mov	r4, r2
 8008e6a:	9104      	str	r1, [sp, #16]
 8008e6c:	f7ff bacb 	b.w	8008406 <_strtod_l+0x16e>
 8008e70:	ffc00000 	.word	0xffc00000
 8008e74:	41dfffff 	.word	0x41dfffff
 8008e78:	94a03595 	.word	0x94a03595
 8008e7c:	3fcfffff 	.word	0x3fcfffff

08008e80 <strtod>:
 8008e80:	4b07      	ldr	r3, [pc, #28]	; (8008ea0 <strtod+0x20>)
 8008e82:	4a08      	ldr	r2, [pc, #32]	; (8008ea4 <strtod+0x24>)
 8008e84:	b410      	push	{r4}
 8008e86:	681c      	ldr	r4, [r3, #0]
 8008e88:	6a23      	ldr	r3, [r4, #32]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	bf08      	it	eq
 8008e8e:	4613      	moveq	r3, r2
 8008e90:	460a      	mov	r2, r1
 8008e92:	4601      	mov	r1, r0
 8008e94:	4620      	mov	r0, r4
 8008e96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e9a:	f7ff b9fd 	b.w	8008298 <_strtod_l>
 8008e9e:	bf00      	nop
 8008ea0:	20000014 	.word	0x20000014
 8008ea4:	20000078 	.word	0x20000078

08008ea8 <rshift>:
 8008ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008eaa:	6906      	ldr	r6, [r0, #16]
 8008eac:	114b      	asrs	r3, r1, #5
 8008eae:	429e      	cmp	r6, r3
 8008eb0:	f100 0414 	add.w	r4, r0, #20
 8008eb4:	dd30      	ble.n	8008f18 <rshift+0x70>
 8008eb6:	f011 011f 	ands.w	r1, r1, #31
 8008eba:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008ebe:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8008ec2:	d108      	bne.n	8008ed6 <rshift+0x2e>
 8008ec4:	4621      	mov	r1, r4
 8008ec6:	42b2      	cmp	r2, r6
 8008ec8:	460b      	mov	r3, r1
 8008eca:	d211      	bcs.n	8008ef0 <rshift+0x48>
 8008ecc:	f852 3b04 	ldr.w	r3, [r2], #4
 8008ed0:	f841 3b04 	str.w	r3, [r1], #4
 8008ed4:	e7f7      	b.n	8008ec6 <rshift+0x1e>
 8008ed6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8008eda:	f1c1 0c20 	rsb	ip, r1, #32
 8008ede:	40cd      	lsrs	r5, r1
 8008ee0:	3204      	adds	r2, #4
 8008ee2:	4623      	mov	r3, r4
 8008ee4:	42b2      	cmp	r2, r6
 8008ee6:	4617      	mov	r7, r2
 8008ee8:	d30c      	bcc.n	8008f04 <rshift+0x5c>
 8008eea:	601d      	str	r5, [r3, #0]
 8008eec:	b105      	cbz	r5, 8008ef0 <rshift+0x48>
 8008eee:	3304      	adds	r3, #4
 8008ef0:	1b1a      	subs	r2, r3, r4
 8008ef2:	42a3      	cmp	r3, r4
 8008ef4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008ef8:	bf08      	it	eq
 8008efa:	2300      	moveq	r3, #0
 8008efc:	6102      	str	r2, [r0, #16]
 8008efe:	bf08      	it	eq
 8008f00:	6143      	streq	r3, [r0, #20]
 8008f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f04:	683f      	ldr	r7, [r7, #0]
 8008f06:	fa07 f70c 	lsl.w	r7, r7, ip
 8008f0a:	433d      	orrs	r5, r7
 8008f0c:	f843 5b04 	str.w	r5, [r3], #4
 8008f10:	f852 5b04 	ldr.w	r5, [r2], #4
 8008f14:	40cd      	lsrs	r5, r1
 8008f16:	e7e5      	b.n	8008ee4 <rshift+0x3c>
 8008f18:	4623      	mov	r3, r4
 8008f1a:	e7e9      	b.n	8008ef0 <rshift+0x48>

08008f1c <__hexdig_fun>:
 8008f1c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008f20:	2b09      	cmp	r3, #9
 8008f22:	d802      	bhi.n	8008f2a <__hexdig_fun+0xe>
 8008f24:	3820      	subs	r0, #32
 8008f26:	b2c0      	uxtb	r0, r0
 8008f28:	4770      	bx	lr
 8008f2a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008f2e:	2b05      	cmp	r3, #5
 8008f30:	d801      	bhi.n	8008f36 <__hexdig_fun+0x1a>
 8008f32:	3847      	subs	r0, #71	; 0x47
 8008f34:	e7f7      	b.n	8008f26 <__hexdig_fun+0xa>
 8008f36:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008f3a:	2b05      	cmp	r3, #5
 8008f3c:	d801      	bhi.n	8008f42 <__hexdig_fun+0x26>
 8008f3e:	3827      	subs	r0, #39	; 0x27
 8008f40:	e7f1      	b.n	8008f26 <__hexdig_fun+0xa>
 8008f42:	2000      	movs	r0, #0
 8008f44:	4770      	bx	lr

08008f46 <__gethex>:
 8008f46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f4a:	b08b      	sub	sp, #44	; 0x2c
 8008f4c:	468a      	mov	sl, r1
 8008f4e:	9002      	str	r0, [sp, #8]
 8008f50:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008f52:	9306      	str	r3, [sp, #24]
 8008f54:	4690      	mov	r8, r2
 8008f56:	f000 facd 	bl	80094f4 <__localeconv_l>
 8008f5a:	6803      	ldr	r3, [r0, #0]
 8008f5c:	9303      	str	r3, [sp, #12]
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f7f7 f93e 	bl	80001e0 <strlen>
 8008f64:	9b03      	ldr	r3, [sp, #12]
 8008f66:	9001      	str	r0, [sp, #4]
 8008f68:	4403      	add	r3, r0
 8008f6a:	f04f 0b00 	mov.w	fp, #0
 8008f6e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008f72:	9307      	str	r3, [sp, #28]
 8008f74:	f8da 3000 	ldr.w	r3, [sl]
 8008f78:	3302      	adds	r3, #2
 8008f7a:	461f      	mov	r7, r3
 8008f7c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008f80:	2830      	cmp	r0, #48	; 0x30
 8008f82:	d06c      	beq.n	800905e <__gethex+0x118>
 8008f84:	f7ff ffca 	bl	8008f1c <__hexdig_fun>
 8008f88:	4604      	mov	r4, r0
 8008f8a:	2800      	cmp	r0, #0
 8008f8c:	d16a      	bne.n	8009064 <__gethex+0x11e>
 8008f8e:	9a01      	ldr	r2, [sp, #4]
 8008f90:	9903      	ldr	r1, [sp, #12]
 8008f92:	4638      	mov	r0, r7
 8008f94:	f7ff f950 	bl	8008238 <strncmp>
 8008f98:	2800      	cmp	r0, #0
 8008f9a:	d166      	bne.n	800906a <__gethex+0x124>
 8008f9c:	9b01      	ldr	r3, [sp, #4]
 8008f9e:	5cf8      	ldrb	r0, [r7, r3]
 8008fa0:	18fe      	adds	r6, r7, r3
 8008fa2:	f7ff ffbb 	bl	8008f1c <__hexdig_fun>
 8008fa6:	2800      	cmp	r0, #0
 8008fa8:	d062      	beq.n	8009070 <__gethex+0x12a>
 8008faa:	4633      	mov	r3, r6
 8008fac:	7818      	ldrb	r0, [r3, #0]
 8008fae:	2830      	cmp	r0, #48	; 0x30
 8008fb0:	461f      	mov	r7, r3
 8008fb2:	f103 0301 	add.w	r3, r3, #1
 8008fb6:	d0f9      	beq.n	8008fac <__gethex+0x66>
 8008fb8:	f7ff ffb0 	bl	8008f1c <__hexdig_fun>
 8008fbc:	fab0 f580 	clz	r5, r0
 8008fc0:	096d      	lsrs	r5, r5, #5
 8008fc2:	4634      	mov	r4, r6
 8008fc4:	f04f 0b01 	mov.w	fp, #1
 8008fc8:	463a      	mov	r2, r7
 8008fca:	4616      	mov	r6, r2
 8008fcc:	3201      	adds	r2, #1
 8008fce:	7830      	ldrb	r0, [r6, #0]
 8008fd0:	f7ff ffa4 	bl	8008f1c <__hexdig_fun>
 8008fd4:	2800      	cmp	r0, #0
 8008fd6:	d1f8      	bne.n	8008fca <__gethex+0x84>
 8008fd8:	9a01      	ldr	r2, [sp, #4]
 8008fda:	9903      	ldr	r1, [sp, #12]
 8008fdc:	4630      	mov	r0, r6
 8008fde:	f7ff f92b 	bl	8008238 <strncmp>
 8008fe2:	b950      	cbnz	r0, 8008ffa <__gethex+0xb4>
 8008fe4:	b954      	cbnz	r4, 8008ffc <__gethex+0xb6>
 8008fe6:	9b01      	ldr	r3, [sp, #4]
 8008fe8:	18f4      	adds	r4, r6, r3
 8008fea:	4622      	mov	r2, r4
 8008fec:	4616      	mov	r6, r2
 8008fee:	3201      	adds	r2, #1
 8008ff0:	7830      	ldrb	r0, [r6, #0]
 8008ff2:	f7ff ff93 	bl	8008f1c <__hexdig_fun>
 8008ff6:	2800      	cmp	r0, #0
 8008ff8:	d1f8      	bne.n	8008fec <__gethex+0xa6>
 8008ffa:	b10c      	cbz	r4, 8009000 <__gethex+0xba>
 8008ffc:	1ba4      	subs	r4, r4, r6
 8008ffe:	00a4      	lsls	r4, r4, #2
 8009000:	7833      	ldrb	r3, [r6, #0]
 8009002:	2b50      	cmp	r3, #80	; 0x50
 8009004:	d001      	beq.n	800900a <__gethex+0xc4>
 8009006:	2b70      	cmp	r3, #112	; 0x70
 8009008:	d140      	bne.n	800908c <__gethex+0x146>
 800900a:	7873      	ldrb	r3, [r6, #1]
 800900c:	2b2b      	cmp	r3, #43	; 0x2b
 800900e:	d031      	beq.n	8009074 <__gethex+0x12e>
 8009010:	2b2d      	cmp	r3, #45	; 0x2d
 8009012:	d033      	beq.n	800907c <__gethex+0x136>
 8009014:	1c71      	adds	r1, r6, #1
 8009016:	f04f 0900 	mov.w	r9, #0
 800901a:	7808      	ldrb	r0, [r1, #0]
 800901c:	f7ff ff7e 	bl	8008f1c <__hexdig_fun>
 8009020:	1e43      	subs	r3, r0, #1
 8009022:	b2db      	uxtb	r3, r3
 8009024:	2b18      	cmp	r3, #24
 8009026:	d831      	bhi.n	800908c <__gethex+0x146>
 8009028:	f1a0 0210 	sub.w	r2, r0, #16
 800902c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009030:	f7ff ff74 	bl	8008f1c <__hexdig_fun>
 8009034:	1e43      	subs	r3, r0, #1
 8009036:	b2db      	uxtb	r3, r3
 8009038:	2b18      	cmp	r3, #24
 800903a:	d922      	bls.n	8009082 <__gethex+0x13c>
 800903c:	f1b9 0f00 	cmp.w	r9, #0
 8009040:	d000      	beq.n	8009044 <__gethex+0xfe>
 8009042:	4252      	negs	r2, r2
 8009044:	4414      	add	r4, r2
 8009046:	f8ca 1000 	str.w	r1, [sl]
 800904a:	b30d      	cbz	r5, 8009090 <__gethex+0x14a>
 800904c:	f1bb 0f00 	cmp.w	fp, #0
 8009050:	bf0c      	ite	eq
 8009052:	2706      	moveq	r7, #6
 8009054:	2700      	movne	r7, #0
 8009056:	4638      	mov	r0, r7
 8009058:	b00b      	add	sp, #44	; 0x2c
 800905a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800905e:	f10b 0b01 	add.w	fp, fp, #1
 8009062:	e78a      	b.n	8008f7a <__gethex+0x34>
 8009064:	2500      	movs	r5, #0
 8009066:	462c      	mov	r4, r5
 8009068:	e7ae      	b.n	8008fc8 <__gethex+0x82>
 800906a:	463e      	mov	r6, r7
 800906c:	2501      	movs	r5, #1
 800906e:	e7c7      	b.n	8009000 <__gethex+0xba>
 8009070:	4604      	mov	r4, r0
 8009072:	e7fb      	b.n	800906c <__gethex+0x126>
 8009074:	f04f 0900 	mov.w	r9, #0
 8009078:	1cb1      	adds	r1, r6, #2
 800907a:	e7ce      	b.n	800901a <__gethex+0xd4>
 800907c:	f04f 0901 	mov.w	r9, #1
 8009080:	e7fa      	b.n	8009078 <__gethex+0x132>
 8009082:	230a      	movs	r3, #10
 8009084:	fb03 0202 	mla	r2, r3, r2, r0
 8009088:	3a10      	subs	r2, #16
 800908a:	e7cf      	b.n	800902c <__gethex+0xe6>
 800908c:	4631      	mov	r1, r6
 800908e:	e7da      	b.n	8009046 <__gethex+0x100>
 8009090:	1bf3      	subs	r3, r6, r7
 8009092:	3b01      	subs	r3, #1
 8009094:	4629      	mov	r1, r5
 8009096:	2b07      	cmp	r3, #7
 8009098:	dc49      	bgt.n	800912e <__gethex+0x1e8>
 800909a:	9802      	ldr	r0, [sp, #8]
 800909c:	f000 fa40 	bl	8009520 <_Balloc>
 80090a0:	9b01      	ldr	r3, [sp, #4]
 80090a2:	f100 0914 	add.w	r9, r0, #20
 80090a6:	f04f 0b00 	mov.w	fp, #0
 80090aa:	f1c3 0301 	rsb	r3, r3, #1
 80090ae:	4605      	mov	r5, r0
 80090b0:	f8cd 9010 	str.w	r9, [sp, #16]
 80090b4:	46da      	mov	sl, fp
 80090b6:	9308      	str	r3, [sp, #32]
 80090b8:	42b7      	cmp	r7, r6
 80090ba:	d33b      	bcc.n	8009134 <__gethex+0x1ee>
 80090bc:	9804      	ldr	r0, [sp, #16]
 80090be:	f840 ab04 	str.w	sl, [r0], #4
 80090c2:	eba0 0009 	sub.w	r0, r0, r9
 80090c6:	1080      	asrs	r0, r0, #2
 80090c8:	6128      	str	r0, [r5, #16]
 80090ca:	0147      	lsls	r7, r0, #5
 80090cc:	4650      	mov	r0, sl
 80090ce:	f000 faeb 	bl	80096a8 <__hi0bits>
 80090d2:	f8d8 6000 	ldr.w	r6, [r8]
 80090d6:	1a3f      	subs	r7, r7, r0
 80090d8:	42b7      	cmp	r7, r6
 80090da:	dd64      	ble.n	80091a6 <__gethex+0x260>
 80090dc:	1bbf      	subs	r7, r7, r6
 80090de:	4639      	mov	r1, r7
 80090e0:	4628      	mov	r0, r5
 80090e2:	f000 fdfb 	bl	8009cdc <__any_on>
 80090e6:	4682      	mov	sl, r0
 80090e8:	b178      	cbz	r0, 800910a <__gethex+0x1c4>
 80090ea:	1e7b      	subs	r3, r7, #1
 80090ec:	1159      	asrs	r1, r3, #5
 80090ee:	f003 021f 	and.w	r2, r3, #31
 80090f2:	f04f 0a01 	mov.w	sl, #1
 80090f6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80090fa:	fa0a f202 	lsl.w	r2, sl, r2
 80090fe:	420a      	tst	r2, r1
 8009100:	d003      	beq.n	800910a <__gethex+0x1c4>
 8009102:	4553      	cmp	r3, sl
 8009104:	dc46      	bgt.n	8009194 <__gethex+0x24e>
 8009106:	f04f 0a02 	mov.w	sl, #2
 800910a:	4639      	mov	r1, r7
 800910c:	4628      	mov	r0, r5
 800910e:	f7ff fecb 	bl	8008ea8 <rshift>
 8009112:	443c      	add	r4, r7
 8009114:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009118:	42a3      	cmp	r3, r4
 800911a:	da52      	bge.n	80091c2 <__gethex+0x27c>
 800911c:	4629      	mov	r1, r5
 800911e:	9802      	ldr	r0, [sp, #8]
 8009120:	f000 fa32 	bl	8009588 <_Bfree>
 8009124:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009126:	2300      	movs	r3, #0
 8009128:	6013      	str	r3, [r2, #0]
 800912a:	27a3      	movs	r7, #163	; 0xa3
 800912c:	e793      	b.n	8009056 <__gethex+0x110>
 800912e:	3101      	adds	r1, #1
 8009130:	105b      	asrs	r3, r3, #1
 8009132:	e7b0      	b.n	8009096 <__gethex+0x150>
 8009134:	1e73      	subs	r3, r6, #1
 8009136:	9305      	str	r3, [sp, #20]
 8009138:	9a07      	ldr	r2, [sp, #28]
 800913a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800913e:	4293      	cmp	r3, r2
 8009140:	d018      	beq.n	8009174 <__gethex+0x22e>
 8009142:	f1bb 0f20 	cmp.w	fp, #32
 8009146:	d107      	bne.n	8009158 <__gethex+0x212>
 8009148:	9b04      	ldr	r3, [sp, #16]
 800914a:	f8c3 a000 	str.w	sl, [r3]
 800914e:	3304      	adds	r3, #4
 8009150:	f04f 0a00 	mov.w	sl, #0
 8009154:	9304      	str	r3, [sp, #16]
 8009156:	46d3      	mov	fp, sl
 8009158:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800915c:	f7ff fede 	bl	8008f1c <__hexdig_fun>
 8009160:	f000 000f 	and.w	r0, r0, #15
 8009164:	fa00 f00b 	lsl.w	r0, r0, fp
 8009168:	ea4a 0a00 	orr.w	sl, sl, r0
 800916c:	f10b 0b04 	add.w	fp, fp, #4
 8009170:	9b05      	ldr	r3, [sp, #20]
 8009172:	e00d      	b.n	8009190 <__gethex+0x24a>
 8009174:	9b05      	ldr	r3, [sp, #20]
 8009176:	9a08      	ldr	r2, [sp, #32]
 8009178:	4413      	add	r3, r2
 800917a:	42bb      	cmp	r3, r7
 800917c:	d3e1      	bcc.n	8009142 <__gethex+0x1fc>
 800917e:	4618      	mov	r0, r3
 8009180:	9a01      	ldr	r2, [sp, #4]
 8009182:	9903      	ldr	r1, [sp, #12]
 8009184:	9309      	str	r3, [sp, #36]	; 0x24
 8009186:	f7ff f857 	bl	8008238 <strncmp>
 800918a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800918c:	2800      	cmp	r0, #0
 800918e:	d1d8      	bne.n	8009142 <__gethex+0x1fc>
 8009190:	461e      	mov	r6, r3
 8009192:	e791      	b.n	80090b8 <__gethex+0x172>
 8009194:	1eb9      	subs	r1, r7, #2
 8009196:	4628      	mov	r0, r5
 8009198:	f000 fda0 	bl	8009cdc <__any_on>
 800919c:	2800      	cmp	r0, #0
 800919e:	d0b2      	beq.n	8009106 <__gethex+0x1c0>
 80091a0:	f04f 0a03 	mov.w	sl, #3
 80091a4:	e7b1      	b.n	800910a <__gethex+0x1c4>
 80091a6:	da09      	bge.n	80091bc <__gethex+0x276>
 80091a8:	1bf7      	subs	r7, r6, r7
 80091aa:	4629      	mov	r1, r5
 80091ac:	463a      	mov	r2, r7
 80091ae:	9802      	ldr	r0, [sp, #8]
 80091b0:	f000 fbb6 	bl	8009920 <__lshift>
 80091b4:	1be4      	subs	r4, r4, r7
 80091b6:	4605      	mov	r5, r0
 80091b8:	f100 0914 	add.w	r9, r0, #20
 80091bc:	f04f 0a00 	mov.w	sl, #0
 80091c0:	e7a8      	b.n	8009114 <__gethex+0x1ce>
 80091c2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80091c6:	42a0      	cmp	r0, r4
 80091c8:	dd6a      	ble.n	80092a0 <__gethex+0x35a>
 80091ca:	1b04      	subs	r4, r0, r4
 80091cc:	42a6      	cmp	r6, r4
 80091ce:	dc2e      	bgt.n	800922e <__gethex+0x2e8>
 80091d0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80091d4:	2b02      	cmp	r3, #2
 80091d6:	d022      	beq.n	800921e <__gethex+0x2d8>
 80091d8:	2b03      	cmp	r3, #3
 80091da:	d024      	beq.n	8009226 <__gethex+0x2e0>
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d115      	bne.n	800920c <__gethex+0x2c6>
 80091e0:	42a6      	cmp	r6, r4
 80091e2:	d113      	bne.n	800920c <__gethex+0x2c6>
 80091e4:	2e01      	cmp	r6, #1
 80091e6:	dc0b      	bgt.n	8009200 <__gethex+0x2ba>
 80091e8:	9a06      	ldr	r2, [sp, #24]
 80091ea:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80091ee:	6013      	str	r3, [r2, #0]
 80091f0:	2301      	movs	r3, #1
 80091f2:	612b      	str	r3, [r5, #16]
 80091f4:	f8c9 3000 	str.w	r3, [r9]
 80091f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80091fa:	2762      	movs	r7, #98	; 0x62
 80091fc:	601d      	str	r5, [r3, #0]
 80091fe:	e72a      	b.n	8009056 <__gethex+0x110>
 8009200:	1e71      	subs	r1, r6, #1
 8009202:	4628      	mov	r0, r5
 8009204:	f000 fd6a 	bl	8009cdc <__any_on>
 8009208:	2800      	cmp	r0, #0
 800920a:	d1ed      	bne.n	80091e8 <__gethex+0x2a2>
 800920c:	4629      	mov	r1, r5
 800920e:	9802      	ldr	r0, [sp, #8]
 8009210:	f000 f9ba 	bl	8009588 <_Bfree>
 8009214:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009216:	2300      	movs	r3, #0
 8009218:	6013      	str	r3, [r2, #0]
 800921a:	2750      	movs	r7, #80	; 0x50
 800921c:	e71b      	b.n	8009056 <__gethex+0x110>
 800921e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009220:	2b00      	cmp	r3, #0
 8009222:	d0e1      	beq.n	80091e8 <__gethex+0x2a2>
 8009224:	e7f2      	b.n	800920c <__gethex+0x2c6>
 8009226:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009228:	2b00      	cmp	r3, #0
 800922a:	d1dd      	bne.n	80091e8 <__gethex+0x2a2>
 800922c:	e7ee      	b.n	800920c <__gethex+0x2c6>
 800922e:	1e67      	subs	r7, r4, #1
 8009230:	f1ba 0f00 	cmp.w	sl, #0
 8009234:	d131      	bne.n	800929a <__gethex+0x354>
 8009236:	b127      	cbz	r7, 8009242 <__gethex+0x2fc>
 8009238:	4639      	mov	r1, r7
 800923a:	4628      	mov	r0, r5
 800923c:	f000 fd4e 	bl	8009cdc <__any_on>
 8009240:	4682      	mov	sl, r0
 8009242:	117a      	asrs	r2, r7, #5
 8009244:	2301      	movs	r3, #1
 8009246:	f007 071f 	and.w	r7, r7, #31
 800924a:	fa03 f707 	lsl.w	r7, r3, r7
 800924e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8009252:	4621      	mov	r1, r4
 8009254:	421f      	tst	r7, r3
 8009256:	4628      	mov	r0, r5
 8009258:	bf18      	it	ne
 800925a:	f04a 0a02 	orrne.w	sl, sl, #2
 800925e:	1b36      	subs	r6, r6, r4
 8009260:	f7ff fe22 	bl	8008ea8 <rshift>
 8009264:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8009268:	2702      	movs	r7, #2
 800926a:	f1ba 0f00 	cmp.w	sl, #0
 800926e:	d048      	beq.n	8009302 <__gethex+0x3bc>
 8009270:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009274:	2b02      	cmp	r3, #2
 8009276:	d015      	beq.n	80092a4 <__gethex+0x35e>
 8009278:	2b03      	cmp	r3, #3
 800927a:	d017      	beq.n	80092ac <__gethex+0x366>
 800927c:	2b01      	cmp	r3, #1
 800927e:	d109      	bne.n	8009294 <__gethex+0x34e>
 8009280:	f01a 0f02 	tst.w	sl, #2
 8009284:	d006      	beq.n	8009294 <__gethex+0x34e>
 8009286:	f8d9 3000 	ldr.w	r3, [r9]
 800928a:	ea4a 0a03 	orr.w	sl, sl, r3
 800928e:	f01a 0f01 	tst.w	sl, #1
 8009292:	d10e      	bne.n	80092b2 <__gethex+0x36c>
 8009294:	f047 0710 	orr.w	r7, r7, #16
 8009298:	e033      	b.n	8009302 <__gethex+0x3bc>
 800929a:	f04f 0a01 	mov.w	sl, #1
 800929e:	e7d0      	b.n	8009242 <__gethex+0x2fc>
 80092a0:	2701      	movs	r7, #1
 80092a2:	e7e2      	b.n	800926a <__gethex+0x324>
 80092a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80092a6:	f1c3 0301 	rsb	r3, r3, #1
 80092aa:	9315      	str	r3, [sp, #84]	; 0x54
 80092ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d0f0      	beq.n	8009294 <__gethex+0x34e>
 80092b2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80092b6:	f105 0314 	add.w	r3, r5, #20
 80092ba:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80092be:	eb03 010a 	add.w	r1, r3, sl
 80092c2:	f04f 0c00 	mov.w	ip, #0
 80092c6:	4618      	mov	r0, r3
 80092c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80092cc:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80092d0:	d01c      	beq.n	800930c <__gethex+0x3c6>
 80092d2:	3201      	adds	r2, #1
 80092d4:	6002      	str	r2, [r0, #0]
 80092d6:	2f02      	cmp	r7, #2
 80092d8:	f105 0314 	add.w	r3, r5, #20
 80092dc:	d138      	bne.n	8009350 <__gethex+0x40a>
 80092de:	f8d8 2000 	ldr.w	r2, [r8]
 80092e2:	3a01      	subs	r2, #1
 80092e4:	42b2      	cmp	r2, r6
 80092e6:	d10a      	bne.n	80092fe <__gethex+0x3b8>
 80092e8:	1171      	asrs	r1, r6, #5
 80092ea:	2201      	movs	r2, #1
 80092ec:	f006 061f 	and.w	r6, r6, #31
 80092f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80092f4:	fa02 f606 	lsl.w	r6, r2, r6
 80092f8:	421e      	tst	r6, r3
 80092fa:	bf18      	it	ne
 80092fc:	4617      	movne	r7, r2
 80092fe:	f047 0720 	orr.w	r7, r7, #32
 8009302:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009304:	601d      	str	r5, [r3, #0]
 8009306:	9b06      	ldr	r3, [sp, #24]
 8009308:	601c      	str	r4, [r3, #0]
 800930a:	e6a4      	b.n	8009056 <__gethex+0x110>
 800930c:	4299      	cmp	r1, r3
 800930e:	f843 cc04 	str.w	ip, [r3, #-4]
 8009312:	d8d8      	bhi.n	80092c6 <__gethex+0x380>
 8009314:	68ab      	ldr	r3, [r5, #8]
 8009316:	4599      	cmp	r9, r3
 8009318:	db12      	blt.n	8009340 <__gethex+0x3fa>
 800931a:	6869      	ldr	r1, [r5, #4]
 800931c:	9802      	ldr	r0, [sp, #8]
 800931e:	3101      	adds	r1, #1
 8009320:	f000 f8fe 	bl	8009520 <_Balloc>
 8009324:	692a      	ldr	r2, [r5, #16]
 8009326:	3202      	adds	r2, #2
 8009328:	f105 010c 	add.w	r1, r5, #12
 800932c:	4683      	mov	fp, r0
 800932e:	0092      	lsls	r2, r2, #2
 8009330:	300c      	adds	r0, #12
 8009332:	f7fe feb5 	bl	80080a0 <memcpy>
 8009336:	4629      	mov	r1, r5
 8009338:	9802      	ldr	r0, [sp, #8]
 800933a:	f000 f925 	bl	8009588 <_Bfree>
 800933e:	465d      	mov	r5, fp
 8009340:	692b      	ldr	r3, [r5, #16]
 8009342:	1c5a      	adds	r2, r3, #1
 8009344:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009348:	612a      	str	r2, [r5, #16]
 800934a:	2201      	movs	r2, #1
 800934c:	615a      	str	r2, [r3, #20]
 800934e:	e7c2      	b.n	80092d6 <__gethex+0x390>
 8009350:	692a      	ldr	r2, [r5, #16]
 8009352:	454a      	cmp	r2, r9
 8009354:	dd0b      	ble.n	800936e <__gethex+0x428>
 8009356:	2101      	movs	r1, #1
 8009358:	4628      	mov	r0, r5
 800935a:	f7ff fda5 	bl	8008ea8 <rshift>
 800935e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009362:	3401      	adds	r4, #1
 8009364:	42a3      	cmp	r3, r4
 8009366:	f6ff aed9 	blt.w	800911c <__gethex+0x1d6>
 800936a:	2701      	movs	r7, #1
 800936c:	e7c7      	b.n	80092fe <__gethex+0x3b8>
 800936e:	f016 061f 	ands.w	r6, r6, #31
 8009372:	d0fa      	beq.n	800936a <__gethex+0x424>
 8009374:	449a      	add	sl, r3
 8009376:	f1c6 0620 	rsb	r6, r6, #32
 800937a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800937e:	f000 f993 	bl	80096a8 <__hi0bits>
 8009382:	42b0      	cmp	r0, r6
 8009384:	dbe7      	blt.n	8009356 <__gethex+0x410>
 8009386:	e7f0      	b.n	800936a <__gethex+0x424>

08009388 <L_shift>:
 8009388:	f1c2 0208 	rsb	r2, r2, #8
 800938c:	0092      	lsls	r2, r2, #2
 800938e:	b570      	push	{r4, r5, r6, lr}
 8009390:	f1c2 0620 	rsb	r6, r2, #32
 8009394:	6843      	ldr	r3, [r0, #4]
 8009396:	6804      	ldr	r4, [r0, #0]
 8009398:	fa03 f506 	lsl.w	r5, r3, r6
 800939c:	432c      	orrs	r4, r5
 800939e:	40d3      	lsrs	r3, r2
 80093a0:	6004      	str	r4, [r0, #0]
 80093a2:	f840 3f04 	str.w	r3, [r0, #4]!
 80093a6:	4288      	cmp	r0, r1
 80093a8:	d3f4      	bcc.n	8009394 <L_shift+0xc>
 80093aa:	bd70      	pop	{r4, r5, r6, pc}

080093ac <__match>:
 80093ac:	b530      	push	{r4, r5, lr}
 80093ae:	6803      	ldr	r3, [r0, #0]
 80093b0:	3301      	adds	r3, #1
 80093b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093b6:	b914      	cbnz	r4, 80093be <__match+0x12>
 80093b8:	6003      	str	r3, [r0, #0]
 80093ba:	2001      	movs	r0, #1
 80093bc:	bd30      	pop	{r4, r5, pc}
 80093be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80093c6:	2d19      	cmp	r5, #25
 80093c8:	bf98      	it	ls
 80093ca:	3220      	addls	r2, #32
 80093cc:	42a2      	cmp	r2, r4
 80093ce:	d0f0      	beq.n	80093b2 <__match+0x6>
 80093d0:	2000      	movs	r0, #0
 80093d2:	e7f3      	b.n	80093bc <__match+0x10>

080093d4 <__hexnan>:
 80093d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093d8:	680b      	ldr	r3, [r1, #0]
 80093da:	6801      	ldr	r1, [r0, #0]
 80093dc:	115f      	asrs	r7, r3, #5
 80093de:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80093e2:	f013 031f 	ands.w	r3, r3, #31
 80093e6:	b087      	sub	sp, #28
 80093e8:	bf18      	it	ne
 80093ea:	3704      	addne	r7, #4
 80093ec:	2500      	movs	r5, #0
 80093ee:	1f3e      	subs	r6, r7, #4
 80093f0:	4682      	mov	sl, r0
 80093f2:	4690      	mov	r8, r2
 80093f4:	9301      	str	r3, [sp, #4]
 80093f6:	f847 5c04 	str.w	r5, [r7, #-4]
 80093fa:	46b1      	mov	r9, r6
 80093fc:	4634      	mov	r4, r6
 80093fe:	9502      	str	r5, [sp, #8]
 8009400:	46ab      	mov	fp, r5
 8009402:	784a      	ldrb	r2, [r1, #1]
 8009404:	1c4b      	adds	r3, r1, #1
 8009406:	9303      	str	r3, [sp, #12]
 8009408:	b342      	cbz	r2, 800945c <__hexnan+0x88>
 800940a:	4610      	mov	r0, r2
 800940c:	9105      	str	r1, [sp, #20]
 800940e:	9204      	str	r2, [sp, #16]
 8009410:	f7ff fd84 	bl	8008f1c <__hexdig_fun>
 8009414:	2800      	cmp	r0, #0
 8009416:	d143      	bne.n	80094a0 <__hexnan+0xcc>
 8009418:	9a04      	ldr	r2, [sp, #16]
 800941a:	9905      	ldr	r1, [sp, #20]
 800941c:	2a20      	cmp	r2, #32
 800941e:	d818      	bhi.n	8009452 <__hexnan+0x7e>
 8009420:	9b02      	ldr	r3, [sp, #8]
 8009422:	459b      	cmp	fp, r3
 8009424:	dd13      	ble.n	800944e <__hexnan+0x7a>
 8009426:	454c      	cmp	r4, r9
 8009428:	d206      	bcs.n	8009438 <__hexnan+0x64>
 800942a:	2d07      	cmp	r5, #7
 800942c:	dc04      	bgt.n	8009438 <__hexnan+0x64>
 800942e:	462a      	mov	r2, r5
 8009430:	4649      	mov	r1, r9
 8009432:	4620      	mov	r0, r4
 8009434:	f7ff ffa8 	bl	8009388 <L_shift>
 8009438:	4544      	cmp	r4, r8
 800943a:	d944      	bls.n	80094c6 <__hexnan+0xf2>
 800943c:	2300      	movs	r3, #0
 800943e:	f1a4 0904 	sub.w	r9, r4, #4
 8009442:	f844 3c04 	str.w	r3, [r4, #-4]
 8009446:	f8cd b008 	str.w	fp, [sp, #8]
 800944a:	464c      	mov	r4, r9
 800944c:	461d      	mov	r5, r3
 800944e:	9903      	ldr	r1, [sp, #12]
 8009450:	e7d7      	b.n	8009402 <__hexnan+0x2e>
 8009452:	2a29      	cmp	r2, #41	; 0x29
 8009454:	d14a      	bne.n	80094ec <__hexnan+0x118>
 8009456:	3102      	adds	r1, #2
 8009458:	f8ca 1000 	str.w	r1, [sl]
 800945c:	f1bb 0f00 	cmp.w	fp, #0
 8009460:	d044      	beq.n	80094ec <__hexnan+0x118>
 8009462:	454c      	cmp	r4, r9
 8009464:	d206      	bcs.n	8009474 <__hexnan+0xa0>
 8009466:	2d07      	cmp	r5, #7
 8009468:	dc04      	bgt.n	8009474 <__hexnan+0xa0>
 800946a:	462a      	mov	r2, r5
 800946c:	4649      	mov	r1, r9
 800946e:	4620      	mov	r0, r4
 8009470:	f7ff ff8a 	bl	8009388 <L_shift>
 8009474:	4544      	cmp	r4, r8
 8009476:	d928      	bls.n	80094ca <__hexnan+0xf6>
 8009478:	4643      	mov	r3, r8
 800947a:	f854 2b04 	ldr.w	r2, [r4], #4
 800947e:	f843 2b04 	str.w	r2, [r3], #4
 8009482:	42a6      	cmp	r6, r4
 8009484:	d2f9      	bcs.n	800947a <__hexnan+0xa6>
 8009486:	2200      	movs	r2, #0
 8009488:	f843 2b04 	str.w	r2, [r3], #4
 800948c:	429e      	cmp	r6, r3
 800948e:	d2fb      	bcs.n	8009488 <__hexnan+0xb4>
 8009490:	6833      	ldr	r3, [r6, #0]
 8009492:	b91b      	cbnz	r3, 800949c <__hexnan+0xc8>
 8009494:	4546      	cmp	r6, r8
 8009496:	d127      	bne.n	80094e8 <__hexnan+0x114>
 8009498:	2301      	movs	r3, #1
 800949a:	6033      	str	r3, [r6, #0]
 800949c:	2005      	movs	r0, #5
 800949e:	e026      	b.n	80094ee <__hexnan+0x11a>
 80094a0:	3501      	adds	r5, #1
 80094a2:	2d08      	cmp	r5, #8
 80094a4:	f10b 0b01 	add.w	fp, fp, #1
 80094a8:	dd06      	ble.n	80094b8 <__hexnan+0xe4>
 80094aa:	4544      	cmp	r4, r8
 80094ac:	d9cf      	bls.n	800944e <__hexnan+0x7a>
 80094ae:	2300      	movs	r3, #0
 80094b0:	f844 3c04 	str.w	r3, [r4, #-4]
 80094b4:	2501      	movs	r5, #1
 80094b6:	3c04      	subs	r4, #4
 80094b8:	6822      	ldr	r2, [r4, #0]
 80094ba:	f000 000f 	and.w	r0, r0, #15
 80094be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80094c2:	6020      	str	r0, [r4, #0]
 80094c4:	e7c3      	b.n	800944e <__hexnan+0x7a>
 80094c6:	2508      	movs	r5, #8
 80094c8:	e7c1      	b.n	800944e <__hexnan+0x7a>
 80094ca:	9b01      	ldr	r3, [sp, #4]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d0df      	beq.n	8009490 <__hexnan+0xbc>
 80094d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80094d4:	f1c3 0320 	rsb	r3, r3, #32
 80094d8:	fa22 f303 	lsr.w	r3, r2, r3
 80094dc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80094e0:	401a      	ands	r2, r3
 80094e2:	f847 2c04 	str.w	r2, [r7, #-4]
 80094e6:	e7d3      	b.n	8009490 <__hexnan+0xbc>
 80094e8:	3e04      	subs	r6, #4
 80094ea:	e7d1      	b.n	8009490 <__hexnan+0xbc>
 80094ec:	2004      	movs	r0, #4
 80094ee:	b007      	add	sp, #28
 80094f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080094f4 <__localeconv_l>:
 80094f4:	30f0      	adds	r0, #240	; 0xf0
 80094f6:	4770      	bx	lr

080094f8 <__ascii_mbtowc>:
 80094f8:	b082      	sub	sp, #8
 80094fa:	b901      	cbnz	r1, 80094fe <__ascii_mbtowc+0x6>
 80094fc:	a901      	add	r1, sp, #4
 80094fe:	b142      	cbz	r2, 8009512 <__ascii_mbtowc+0x1a>
 8009500:	b14b      	cbz	r3, 8009516 <__ascii_mbtowc+0x1e>
 8009502:	7813      	ldrb	r3, [r2, #0]
 8009504:	600b      	str	r3, [r1, #0]
 8009506:	7812      	ldrb	r2, [r2, #0]
 8009508:	1c10      	adds	r0, r2, #0
 800950a:	bf18      	it	ne
 800950c:	2001      	movne	r0, #1
 800950e:	b002      	add	sp, #8
 8009510:	4770      	bx	lr
 8009512:	4610      	mov	r0, r2
 8009514:	e7fb      	b.n	800950e <__ascii_mbtowc+0x16>
 8009516:	f06f 0001 	mvn.w	r0, #1
 800951a:	e7f8      	b.n	800950e <__ascii_mbtowc+0x16>

0800951c <__malloc_lock>:
 800951c:	4770      	bx	lr

0800951e <__malloc_unlock>:
 800951e:	4770      	bx	lr

08009520 <_Balloc>:
 8009520:	b570      	push	{r4, r5, r6, lr}
 8009522:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009524:	4604      	mov	r4, r0
 8009526:	460e      	mov	r6, r1
 8009528:	b93d      	cbnz	r5, 800953a <_Balloc+0x1a>
 800952a:	2010      	movs	r0, #16
 800952c:	f7fe fda8 	bl	8008080 <malloc>
 8009530:	6260      	str	r0, [r4, #36]	; 0x24
 8009532:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009536:	6005      	str	r5, [r0, #0]
 8009538:	60c5      	str	r5, [r0, #12]
 800953a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800953c:	68eb      	ldr	r3, [r5, #12]
 800953e:	b183      	cbz	r3, 8009562 <_Balloc+0x42>
 8009540:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009548:	b9b8      	cbnz	r0, 800957a <_Balloc+0x5a>
 800954a:	2101      	movs	r1, #1
 800954c:	fa01 f506 	lsl.w	r5, r1, r6
 8009550:	1d6a      	adds	r2, r5, #5
 8009552:	0092      	lsls	r2, r2, #2
 8009554:	4620      	mov	r0, r4
 8009556:	f000 fbe2 	bl	8009d1e <_calloc_r>
 800955a:	b160      	cbz	r0, 8009576 <_Balloc+0x56>
 800955c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009560:	e00e      	b.n	8009580 <_Balloc+0x60>
 8009562:	2221      	movs	r2, #33	; 0x21
 8009564:	2104      	movs	r1, #4
 8009566:	4620      	mov	r0, r4
 8009568:	f000 fbd9 	bl	8009d1e <_calloc_r>
 800956c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800956e:	60e8      	str	r0, [r5, #12]
 8009570:	68db      	ldr	r3, [r3, #12]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d1e4      	bne.n	8009540 <_Balloc+0x20>
 8009576:	2000      	movs	r0, #0
 8009578:	bd70      	pop	{r4, r5, r6, pc}
 800957a:	6802      	ldr	r2, [r0, #0]
 800957c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009580:	2300      	movs	r3, #0
 8009582:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009586:	e7f7      	b.n	8009578 <_Balloc+0x58>

08009588 <_Bfree>:
 8009588:	b570      	push	{r4, r5, r6, lr}
 800958a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800958c:	4606      	mov	r6, r0
 800958e:	460d      	mov	r5, r1
 8009590:	b93c      	cbnz	r4, 80095a2 <_Bfree+0x1a>
 8009592:	2010      	movs	r0, #16
 8009594:	f7fe fd74 	bl	8008080 <malloc>
 8009598:	6270      	str	r0, [r6, #36]	; 0x24
 800959a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800959e:	6004      	str	r4, [r0, #0]
 80095a0:	60c4      	str	r4, [r0, #12]
 80095a2:	b13d      	cbz	r5, 80095b4 <_Bfree+0x2c>
 80095a4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80095a6:	686a      	ldr	r2, [r5, #4]
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80095ae:	6029      	str	r1, [r5, #0]
 80095b0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80095b4:	bd70      	pop	{r4, r5, r6, pc}

080095b6 <__multadd>:
 80095b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095ba:	690d      	ldr	r5, [r1, #16]
 80095bc:	461f      	mov	r7, r3
 80095be:	4606      	mov	r6, r0
 80095c0:	460c      	mov	r4, r1
 80095c2:	f101 0c14 	add.w	ip, r1, #20
 80095c6:	2300      	movs	r3, #0
 80095c8:	f8dc 0000 	ldr.w	r0, [ip]
 80095cc:	b281      	uxth	r1, r0
 80095ce:	fb02 7101 	mla	r1, r2, r1, r7
 80095d2:	0c0f      	lsrs	r7, r1, #16
 80095d4:	0c00      	lsrs	r0, r0, #16
 80095d6:	fb02 7000 	mla	r0, r2, r0, r7
 80095da:	b289      	uxth	r1, r1
 80095dc:	3301      	adds	r3, #1
 80095de:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80095e2:	429d      	cmp	r5, r3
 80095e4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80095e8:	f84c 1b04 	str.w	r1, [ip], #4
 80095ec:	dcec      	bgt.n	80095c8 <__multadd+0x12>
 80095ee:	b1d7      	cbz	r7, 8009626 <__multadd+0x70>
 80095f0:	68a3      	ldr	r3, [r4, #8]
 80095f2:	42ab      	cmp	r3, r5
 80095f4:	dc12      	bgt.n	800961c <__multadd+0x66>
 80095f6:	6861      	ldr	r1, [r4, #4]
 80095f8:	4630      	mov	r0, r6
 80095fa:	3101      	adds	r1, #1
 80095fc:	f7ff ff90 	bl	8009520 <_Balloc>
 8009600:	6922      	ldr	r2, [r4, #16]
 8009602:	3202      	adds	r2, #2
 8009604:	f104 010c 	add.w	r1, r4, #12
 8009608:	4680      	mov	r8, r0
 800960a:	0092      	lsls	r2, r2, #2
 800960c:	300c      	adds	r0, #12
 800960e:	f7fe fd47 	bl	80080a0 <memcpy>
 8009612:	4621      	mov	r1, r4
 8009614:	4630      	mov	r0, r6
 8009616:	f7ff ffb7 	bl	8009588 <_Bfree>
 800961a:	4644      	mov	r4, r8
 800961c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009620:	3501      	adds	r5, #1
 8009622:	615f      	str	r7, [r3, #20]
 8009624:	6125      	str	r5, [r4, #16]
 8009626:	4620      	mov	r0, r4
 8009628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800962c <__s2b>:
 800962c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009630:	460c      	mov	r4, r1
 8009632:	4615      	mov	r5, r2
 8009634:	461f      	mov	r7, r3
 8009636:	2209      	movs	r2, #9
 8009638:	3308      	adds	r3, #8
 800963a:	4606      	mov	r6, r0
 800963c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009640:	2100      	movs	r1, #0
 8009642:	2201      	movs	r2, #1
 8009644:	429a      	cmp	r2, r3
 8009646:	db20      	blt.n	800968a <__s2b+0x5e>
 8009648:	4630      	mov	r0, r6
 800964a:	f7ff ff69 	bl	8009520 <_Balloc>
 800964e:	9b08      	ldr	r3, [sp, #32]
 8009650:	6143      	str	r3, [r0, #20]
 8009652:	2d09      	cmp	r5, #9
 8009654:	f04f 0301 	mov.w	r3, #1
 8009658:	6103      	str	r3, [r0, #16]
 800965a:	dd19      	ble.n	8009690 <__s2b+0x64>
 800965c:	f104 0809 	add.w	r8, r4, #9
 8009660:	46c1      	mov	r9, r8
 8009662:	442c      	add	r4, r5
 8009664:	f819 3b01 	ldrb.w	r3, [r9], #1
 8009668:	4601      	mov	r1, r0
 800966a:	3b30      	subs	r3, #48	; 0x30
 800966c:	220a      	movs	r2, #10
 800966e:	4630      	mov	r0, r6
 8009670:	f7ff ffa1 	bl	80095b6 <__multadd>
 8009674:	45a1      	cmp	r9, r4
 8009676:	d1f5      	bne.n	8009664 <__s2b+0x38>
 8009678:	eb08 0405 	add.w	r4, r8, r5
 800967c:	3c08      	subs	r4, #8
 800967e:	1b2d      	subs	r5, r5, r4
 8009680:	1963      	adds	r3, r4, r5
 8009682:	42bb      	cmp	r3, r7
 8009684:	db07      	blt.n	8009696 <__s2b+0x6a>
 8009686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800968a:	0052      	lsls	r2, r2, #1
 800968c:	3101      	adds	r1, #1
 800968e:	e7d9      	b.n	8009644 <__s2b+0x18>
 8009690:	340a      	adds	r4, #10
 8009692:	2509      	movs	r5, #9
 8009694:	e7f3      	b.n	800967e <__s2b+0x52>
 8009696:	f814 3b01 	ldrb.w	r3, [r4], #1
 800969a:	4601      	mov	r1, r0
 800969c:	3b30      	subs	r3, #48	; 0x30
 800969e:	220a      	movs	r2, #10
 80096a0:	4630      	mov	r0, r6
 80096a2:	f7ff ff88 	bl	80095b6 <__multadd>
 80096a6:	e7eb      	b.n	8009680 <__s2b+0x54>

080096a8 <__hi0bits>:
 80096a8:	0c02      	lsrs	r2, r0, #16
 80096aa:	0412      	lsls	r2, r2, #16
 80096ac:	4603      	mov	r3, r0
 80096ae:	b9b2      	cbnz	r2, 80096de <__hi0bits+0x36>
 80096b0:	0403      	lsls	r3, r0, #16
 80096b2:	2010      	movs	r0, #16
 80096b4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80096b8:	bf04      	itt	eq
 80096ba:	021b      	lsleq	r3, r3, #8
 80096bc:	3008      	addeq	r0, #8
 80096be:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80096c2:	bf04      	itt	eq
 80096c4:	011b      	lsleq	r3, r3, #4
 80096c6:	3004      	addeq	r0, #4
 80096c8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80096cc:	bf04      	itt	eq
 80096ce:	009b      	lsleq	r3, r3, #2
 80096d0:	3002      	addeq	r0, #2
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	db06      	blt.n	80096e4 <__hi0bits+0x3c>
 80096d6:	005b      	lsls	r3, r3, #1
 80096d8:	d503      	bpl.n	80096e2 <__hi0bits+0x3a>
 80096da:	3001      	adds	r0, #1
 80096dc:	4770      	bx	lr
 80096de:	2000      	movs	r0, #0
 80096e0:	e7e8      	b.n	80096b4 <__hi0bits+0xc>
 80096e2:	2020      	movs	r0, #32
 80096e4:	4770      	bx	lr

080096e6 <__lo0bits>:
 80096e6:	6803      	ldr	r3, [r0, #0]
 80096e8:	f013 0207 	ands.w	r2, r3, #7
 80096ec:	4601      	mov	r1, r0
 80096ee:	d00b      	beq.n	8009708 <__lo0bits+0x22>
 80096f0:	07da      	lsls	r2, r3, #31
 80096f2:	d423      	bmi.n	800973c <__lo0bits+0x56>
 80096f4:	0798      	lsls	r0, r3, #30
 80096f6:	bf49      	itett	mi
 80096f8:	085b      	lsrmi	r3, r3, #1
 80096fa:	089b      	lsrpl	r3, r3, #2
 80096fc:	2001      	movmi	r0, #1
 80096fe:	600b      	strmi	r3, [r1, #0]
 8009700:	bf5c      	itt	pl
 8009702:	600b      	strpl	r3, [r1, #0]
 8009704:	2002      	movpl	r0, #2
 8009706:	4770      	bx	lr
 8009708:	b298      	uxth	r0, r3
 800970a:	b9a8      	cbnz	r0, 8009738 <__lo0bits+0x52>
 800970c:	0c1b      	lsrs	r3, r3, #16
 800970e:	2010      	movs	r0, #16
 8009710:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009714:	bf04      	itt	eq
 8009716:	0a1b      	lsreq	r3, r3, #8
 8009718:	3008      	addeq	r0, #8
 800971a:	071a      	lsls	r2, r3, #28
 800971c:	bf04      	itt	eq
 800971e:	091b      	lsreq	r3, r3, #4
 8009720:	3004      	addeq	r0, #4
 8009722:	079a      	lsls	r2, r3, #30
 8009724:	bf04      	itt	eq
 8009726:	089b      	lsreq	r3, r3, #2
 8009728:	3002      	addeq	r0, #2
 800972a:	07da      	lsls	r2, r3, #31
 800972c:	d402      	bmi.n	8009734 <__lo0bits+0x4e>
 800972e:	085b      	lsrs	r3, r3, #1
 8009730:	d006      	beq.n	8009740 <__lo0bits+0x5a>
 8009732:	3001      	adds	r0, #1
 8009734:	600b      	str	r3, [r1, #0]
 8009736:	4770      	bx	lr
 8009738:	4610      	mov	r0, r2
 800973a:	e7e9      	b.n	8009710 <__lo0bits+0x2a>
 800973c:	2000      	movs	r0, #0
 800973e:	4770      	bx	lr
 8009740:	2020      	movs	r0, #32
 8009742:	4770      	bx	lr

08009744 <__i2b>:
 8009744:	b510      	push	{r4, lr}
 8009746:	460c      	mov	r4, r1
 8009748:	2101      	movs	r1, #1
 800974a:	f7ff fee9 	bl	8009520 <_Balloc>
 800974e:	2201      	movs	r2, #1
 8009750:	6144      	str	r4, [r0, #20]
 8009752:	6102      	str	r2, [r0, #16]
 8009754:	bd10      	pop	{r4, pc}

08009756 <__multiply>:
 8009756:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800975a:	4614      	mov	r4, r2
 800975c:	690a      	ldr	r2, [r1, #16]
 800975e:	6923      	ldr	r3, [r4, #16]
 8009760:	429a      	cmp	r2, r3
 8009762:	bfb8      	it	lt
 8009764:	460b      	movlt	r3, r1
 8009766:	4688      	mov	r8, r1
 8009768:	bfbc      	itt	lt
 800976a:	46a0      	movlt	r8, r4
 800976c:	461c      	movlt	r4, r3
 800976e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009772:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009776:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800977a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800977e:	eb07 0609 	add.w	r6, r7, r9
 8009782:	42b3      	cmp	r3, r6
 8009784:	bfb8      	it	lt
 8009786:	3101      	addlt	r1, #1
 8009788:	f7ff feca 	bl	8009520 <_Balloc>
 800978c:	f100 0514 	add.w	r5, r0, #20
 8009790:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009794:	462b      	mov	r3, r5
 8009796:	2200      	movs	r2, #0
 8009798:	4573      	cmp	r3, lr
 800979a:	d316      	bcc.n	80097ca <__multiply+0x74>
 800979c:	f104 0214 	add.w	r2, r4, #20
 80097a0:	f108 0114 	add.w	r1, r8, #20
 80097a4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80097a8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80097ac:	9300      	str	r3, [sp, #0]
 80097ae:	9b00      	ldr	r3, [sp, #0]
 80097b0:	9201      	str	r2, [sp, #4]
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d80c      	bhi.n	80097d0 <__multiply+0x7a>
 80097b6:	2e00      	cmp	r6, #0
 80097b8:	dd03      	ble.n	80097c2 <__multiply+0x6c>
 80097ba:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d05d      	beq.n	800987e <__multiply+0x128>
 80097c2:	6106      	str	r6, [r0, #16]
 80097c4:	b003      	add	sp, #12
 80097c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ca:	f843 2b04 	str.w	r2, [r3], #4
 80097ce:	e7e3      	b.n	8009798 <__multiply+0x42>
 80097d0:	f8b2 b000 	ldrh.w	fp, [r2]
 80097d4:	f1bb 0f00 	cmp.w	fp, #0
 80097d8:	d023      	beq.n	8009822 <__multiply+0xcc>
 80097da:	4689      	mov	r9, r1
 80097dc:	46ac      	mov	ip, r5
 80097de:	f04f 0800 	mov.w	r8, #0
 80097e2:	f859 4b04 	ldr.w	r4, [r9], #4
 80097e6:	f8dc a000 	ldr.w	sl, [ip]
 80097ea:	b2a3      	uxth	r3, r4
 80097ec:	fa1f fa8a 	uxth.w	sl, sl
 80097f0:	fb0b a303 	mla	r3, fp, r3, sl
 80097f4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80097f8:	f8dc 4000 	ldr.w	r4, [ip]
 80097fc:	4443      	add	r3, r8
 80097fe:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009802:	fb0b 840a 	mla	r4, fp, sl, r8
 8009806:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800980a:	46e2      	mov	sl, ip
 800980c:	b29b      	uxth	r3, r3
 800980e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009812:	454f      	cmp	r7, r9
 8009814:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009818:	f84a 3b04 	str.w	r3, [sl], #4
 800981c:	d82b      	bhi.n	8009876 <__multiply+0x120>
 800981e:	f8cc 8004 	str.w	r8, [ip, #4]
 8009822:	9b01      	ldr	r3, [sp, #4]
 8009824:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009828:	3204      	adds	r2, #4
 800982a:	f1ba 0f00 	cmp.w	sl, #0
 800982e:	d020      	beq.n	8009872 <__multiply+0x11c>
 8009830:	682b      	ldr	r3, [r5, #0]
 8009832:	4689      	mov	r9, r1
 8009834:	46a8      	mov	r8, r5
 8009836:	f04f 0b00 	mov.w	fp, #0
 800983a:	f8b9 c000 	ldrh.w	ip, [r9]
 800983e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009842:	fb0a 440c 	mla	r4, sl, ip, r4
 8009846:	445c      	add	r4, fp
 8009848:	46c4      	mov	ip, r8
 800984a:	b29b      	uxth	r3, r3
 800984c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009850:	f84c 3b04 	str.w	r3, [ip], #4
 8009854:	f859 3b04 	ldr.w	r3, [r9], #4
 8009858:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800985c:	0c1b      	lsrs	r3, r3, #16
 800985e:	fb0a b303 	mla	r3, sl, r3, fp
 8009862:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009866:	454f      	cmp	r7, r9
 8009868:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800986c:	d805      	bhi.n	800987a <__multiply+0x124>
 800986e:	f8c8 3004 	str.w	r3, [r8, #4]
 8009872:	3504      	adds	r5, #4
 8009874:	e79b      	b.n	80097ae <__multiply+0x58>
 8009876:	46d4      	mov	ip, sl
 8009878:	e7b3      	b.n	80097e2 <__multiply+0x8c>
 800987a:	46e0      	mov	r8, ip
 800987c:	e7dd      	b.n	800983a <__multiply+0xe4>
 800987e:	3e01      	subs	r6, #1
 8009880:	e799      	b.n	80097b6 <__multiply+0x60>
	...

08009884 <__pow5mult>:
 8009884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009888:	4615      	mov	r5, r2
 800988a:	f012 0203 	ands.w	r2, r2, #3
 800988e:	4606      	mov	r6, r0
 8009890:	460f      	mov	r7, r1
 8009892:	d007      	beq.n	80098a4 <__pow5mult+0x20>
 8009894:	3a01      	subs	r2, #1
 8009896:	4c21      	ldr	r4, [pc, #132]	; (800991c <__pow5mult+0x98>)
 8009898:	2300      	movs	r3, #0
 800989a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800989e:	f7ff fe8a 	bl	80095b6 <__multadd>
 80098a2:	4607      	mov	r7, r0
 80098a4:	10ad      	asrs	r5, r5, #2
 80098a6:	d035      	beq.n	8009914 <__pow5mult+0x90>
 80098a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80098aa:	b93c      	cbnz	r4, 80098bc <__pow5mult+0x38>
 80098ac:	2010      	movs	r0, #16
 80098ae:	f7fe fbe7 	bl	8008080 <malloc>
 80098b2:	6270      	str	r0, [r6, #36]	; 0x24
 80098b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80098b8:	6004      	str	r4, [r0, #0]
 80098ba:	60c4      	str	r4, [r0, #12]
 80098bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80098c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80098c4:	b94c      	cbnz	r4, 80098da <__pow5mult+0x56>
 80098c6:	f240 2171 	movw	r1, #625	; 0x271
 80098ca:	4630      	mov	r0, r6
 80098cc:	f7ff ff3a 	bl	8009744 <__i2b>
 80098d0:	2300      	movs	r3, #0
 80098d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80098d6:	4604      	mov	r4, r0
 80098d8:	6003      	str	r3, [r0, #0]
 80098da:	f04f 0800 	mov.w	r8, #0
 80098de:	07eb      	lsls	r3, r5, #31
 80098e0:	d50a      	bpl.n	80098f8 <__pow5mult+0x74>
 80098e2:	4639      	mov	r1, r7
 80098e4:	4622      	mov	r2, r4
 80098e6:	4630      	mov	r0, r6
 80098e8:	f7ff ff35 	bl	8009756 <__multiply>
 80098ec:	4639      	mov	r1, r7
 80098ee:	4681      	mov	r9, r0
 80098f0:	4630      	mov	r0, r6
 80098f2:	f7ff fe49 	bl	8009588 <_Bfree>
 80098f6:	464f      	mov	r7, r9
 80098f8:	106d      	asrs	r5, r5, #1
 80098fa:	d00b      	beq.n	8009914 <__pow5mult+0x90>
 80098fc:	6820      	ldr	r0, [r4, #0]
 80098fe:	b938      	cbnz	r0, 8009910 <__pow5mult+0x8c>
 8009900:	4622      	mov	r2, r4
 8009902:	4621      	mov	r1, r4
 8009904:	4630      	mov	r0, r6
 8009906:	f7ff ff26 	bl	8009756 <__multiply>
 800990a:	6020      	str	r0, [r4, #0]
 800990c:	f8c0 8000 	str.w	r8, [r0]
 8009910:	4604      	mov	r4, r0
 8009912:	e7e4      	b.n	80098de <__pow5mult+0x5a>
 8009914:	4638      	mov	r0, r7
 8009916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800991a:	bf00      	nop
 800991c:	08009f90 	.word	0x08009f90

08009920 <__lshift>:
 8009920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009924:	460c      	mov	r4, r1
 8009926:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800992a:	6923      	ldr	r3, [r4, #16]
 800992c:	6849      	ldr	r1, [r1, #4]
 800992e:	eb0a 0903 	add.w	r9, sl, r3
 8009932:	68a3      	ldr	r3, [r4, #8]
 8009934:	4607      	mov	r7, r0
 8009936:	4616      	mov	r6, r2
 8009938:	f109 0501 	add.w	r5, r9, #1
 800993c:	42ab      	cmp	r3, r5
 800993e:	db32      	blt.n	80099a6 <__lshift+0x86>
 8009940:	4638      	mov	r0, r7
 8009942:	f7ff fded 	bl	8009520 <_Balloc>
 8009946:	2300      	movs	r3, #0
 8009948:	4680      	mov	r8, r0
 800994a:	f100 0114 	add.w	r1, r0, #20
 800994e:	461a      	mov	r2, r3
 8009950:	4553      	cmp	r3, sl
 8009952:	db2b      	blt.n	80099ac <__lshift+0x8c>
 8009954:	6920      	ldr	r0, [r4, #16]
 8009956:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800995a:	f104 0314 	add.w	r3, r4, #20
 800995e:	f016 021f 	ands.w	r2, r6, #31
 8009962:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009966:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800996a:	d025      	beq.n	80099b8 <__lshift+0x98>
 800996c:	f1c2 0e20 	rsb	lr, r2, #32
 8009970:	2000      	movs	r0, #0
 8009972:	681e      	ldr	r6, [r3, #0]
 8009974:	468a      	mov	sl, r1
 8009976:	4096      	lsls	r6, r2
 8009978:	4330      	orrs	r0, r6
 800997a:	f84a 0b04 	str.w	r0, [sl], #4
 800997e:	f853 0b04 	ldr.w	r0, [r3], #4
 8009982:	459c      	cmp	ip, r3
 8009984:	fa20 f00e 	lsr.w	r0, r0, lr
 8009988:	d814      	bhi.n	80099b4 <__lshift+0x94>
 800998a:	6048      	str	r0, [r1, #4]
 800998c:	b108      	cbz	r0, 8009992 <__lshift+0x72>
 800998e:	f109 0502 	add.w	r5, r9, #2
 8009992:	3d01      	subs	r5, #1
 8009994:	4638      	mov	r0, r7
 8009996:	f8c8 5010 	str.w	r5, [r8, #16]
 800999a:	4621      	mov	r1, r4
 800999c:	f7ff fdf4 	bl	8009588 <_Bfree>
 80099a0:	4640      	mov	r0, r8
 80099a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099a6:	3101      	adds	r1, #1
 80099a8:	005b      	lsls	r3, r3, #1
 80099aa:	e7c7      	b.n	800993c <__lshift+0x1c>
 80099ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80099b0:	3301      	adds	r3, #1
 80099b2:	e7cd      	b.n	8009950 <__lshift+0x30>
 80099b4:	4651      	mov	r1, sl
 80099b6:	e7dc      	b.n	8009972 <__lshift+0x52>
 80099b8:	3904      	subs	r1, #4
 80099ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80099be:	f841 2f04 	str.w	r2, [r1, #4]!
 80099c2:	459c      	cmp	ip, r3
 80099c4:	d8f9      	bhi.n	80099ba <__lshift+0x9a>
 80099c6:	e7e4      	b.n	8009992 <__lshift+0x72>

080099c8 <__mcmp>:
 80099c8:	6903      	ldr	r3, [r0, #16]
 80099ca:	690a      	ldr	r2, [r1, #16]
 80099cc:	1a9b      	subs	r3, r3, r2
 80099ce:	b530      	push	{r4, r5, lr}
 80099d0:	d10c      	bne.n	80099ec <__mcmp+0x24>
 80099d2:	0092      	lsls	r2, r2, #2
 80099d4:	3014      	adds	r0, #20
 80099d6:	3114      	adds	r1, #20
 80099d8:	1884      	adds	r4, r0, r2
 80099da:	4411      	add	r1, r2
 80099dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80099e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80099e4:	4295      	cmp	r5, r2
 80099e6:	d003      	beq.n	80099f0 <__mcmp+0x28>
 80099e8:	d305      	bcc.n	80099f6 <__mcmp+0x2e>
 80099ea:	2301      	movs	r3, #1
 80099ec:	4618      	mov	r0, r3
 80099ee:	bd30      	pop	{r4, r5, pc}
 80099f0:	42a0      	cmp	r0, r4
 80099f2:	d3f3      	bcc.n	80099dc <__mcmp+0x14>
 80099f4:	e7fa      	b.n	80099ec <__mcmp+0x24>
 80099f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80099fa:	e7f7      	b.n	80099ec <__mcmp+0x24>

080099fc <__mdiff>:
 80099fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a00:	460d      	mov	r5, r1
 8009a02:	4607      	mov	r7, r0
 8009a04:	4611      	mov	r1, r2
 8009a06:	4628      	mov	r0, r5
 8009a08:	4614      	mov	r4, r2
 8009a0a:	f7ff ffdd 	bl	80099c8 <__mcmp>
 8009a0e:	1e06      	subs	r6, r0, #0
 8009a10:	d108      	bne.n	8009a24 <__mdiff+0x28>
 8009a12:	4631      	mov	r1, r6
 8009a14:	4638      	mov	r0, r7
 8009a16:	f7ff fd83 	bl	8009520 <_Balloc>
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a24:	bfa4      	itt	ge
 8009a26:	4623      	movge	r3, r4
 8009a28:	462c      	movge	r4, r5
 8009a2a:	4638      	mov	r0, r7
 8009a2c:	6861      	ldr	r1, [r4, #4]
 8009a2e:	bfa6      	itte	ge
 8009a30:	461d      	movge	r5, r3
 8009a32:	2600      	movge	r6, #0
 8009a34:	2601      	movlt	r6, #1
 8009a36:	f7ff fd73 	bl	8009520 <_Balloc>
 8009a3a:	692b      	ldr	r3, [r5, #16]
 8009a3c:	60c6      	str	r6, [r0, #12]
 8009a3e:	6926      	ldr	r6, [r4, #16]
 8009a40:	f105 0914 	add.w	r9, r5, #20
 8009a44:	f104 0214 	add.w	r2, r4, #20
 8009a48:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009a4c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009a50:	f100 0514 	add.w	r5, r0, #20
 8009a54:	f04f 0e00 	mov.w	lr, #0
 8009a58:	f852 ab04 	ldr.w	sl, [r2], #4
 8009a5c:	f859 4b04 	ldr.w	r4, [r9], #4
 8009a60:	fa1e f18a 	uxtah	r1, lr, sl
 8009a64:	b2a3      	uxth	r3, r4
 8009a66:	1ac9      	subs	r1, r1, r3
 8009a68:	0c23      	lsrs	r3, r4, #16
 8009a6a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009a6e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009a72:	b289      	uxth	r1, r1
 8009a74:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009a78:	45c8      	cmp	r8, r9
 8009a7a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009a7e:	4694      	mov	ip, r2
 8009a80:	f845 3b04 	str.w	r3, [r5], #4
 8009a84:	d8e8      	bhi.n	8009a58 <__mdiff+0x5c>
 8009a86:	45bc      	cmp	ip, r7
 8009a88:	d304      	bcc.n	8009a94 <__mdiff+0x98>
 8009a8a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009a8e:	b183      	cbz	r3, 8009ab2 <__mdiff+0xb6>
 8009a90:	6106      	str	r6, [r0, #16]
 8009a92:	e7c5      	b.n	8009a20 <__mdiff+0x24>
 8009a94:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009a98:	fa1e f381 	uxtah	r3, lr, r1
 8009a9c:	141a      	asrs	r2, r3, #16
 8009a9e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009aa2:	b29b      	uxth	r3, r3
 8009aa4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009aa8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009aac:	f845 3b04 	str.w	r3, [r5], #4
 8009ab0:	e7e9      	b.n	8009a86 <__mdiff+0x8a>
 8009ab2:	3e01      	subs	r6, #1
 8009ab4:	e7e9      	b.n	8009a8a <__mdiff+0x8e>
	...

08009ab8 <__ulp>:
 8009ab8:	4b12      	ldr	r3, [pc, #72]	; (8009b04 <__ulp+0x4c>)
 8009aba:	ee10 2a90 	vmov	r2, s1
 8009abe:	401a      	ands	r2, r3
 8009ac0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	dd04      	ble.n	8009ad2 <__ulp+0x1a>
 8009ac8:	2000      	movs	r0, #0
 8009aca:	4619      	mov	r1, r3
 8009acc:	ec41 0b10 	vmov	d0, r0, r1
 8009ad0:	4770      	bx	lr
 8009ad2:	425b      	negs	r3, r3
 8009ad4:	151b      	asrs	r3, r3, #20
 8009ad6:	2b13      	cmp	r3, #19
 8009ad8:	f04f 0000 	mov.w	r0, #0
 8009adc:	f04f 0100 	mov.w	r1, #0
 8009ae0:	dc04      	bgt.n	8009aec <__ulp+0x34>
 8009ae2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009ae6:	fa42 f103 	asr.w	r1, r2, r3
 8009aea:	e7ef      	b.n	8009acc <__ulp+0x14>
 8009aec:	3b14      	subs	r3, #20
 8009aee:	2b1e      	cmp	r3, #30
 8009af0:	f04f 0201 	mov.w	r2, #1
 8009af4:	bfda      	itte	le
 8009af6:	f1c3 031f 	rsble	r3, r3, #31
 8009afa:	fa02 f303 	lslle.w	r3, r2, r3
 8009afe:	4613      	movgt	r3, r2
 8009b00:	4618      	mov	r0, r3
 8009b02:	e7e3      	b.n	8009acc <__ulp+0x14>
 8009b04:	7ff00000 	.word	0x7ff00000

08009b08 <__b2d>:
 8009b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b0a:	6905      	ldr	r5, [r0, #16]
 8009b0c:	f100 0714 	add.w	r7, r0, #20
 8009b10:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009b14:	1f2e      	subs	r6, r5, #4
 8009b16:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009b1a:	4620      	mov	r0, r4
 8009b1c:	f7ff fdc4 	bl	80096a8 <__hi0bits>
 8009b20:	f1c0 0320 	rsb	r3, r0, #32
 8009b24:	280a      	cmp	r0, #10
 8009b26:	600b      	str	r3, [r1, #0]
 8009b28:	f8df c074 	ldr.w	ip, [pc, #116]	; 8009ba0 <__b2d+0x98>
 8009b2c:	dc14      	bgt.n	8009b58 <__b2d+0x50>
 8009b2e:	f1c0 0e0b 	rsb	lr, r0, #11
 8009b32:	fa24 f10e 	lsr.w	r1, r4, lr
 8009b36:	42b7      	cmp	r7, r6
 8009b38:	ea41 030c 	orr.w	r3, r1, ip
 8009b3c:	bf34      	ite	cc
 8009b3e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009b42:	2100      	movcs	r1, #0
 8009b44:	3015      	adds	r0, #21
 8009b46:	fa04 f000 	lsl.w	r0, r4, r0
 8009b4a:	fa21 f10e 	lsr.w	r1, r1, lr
 8009b4e:	ea40 0201 	orr.w	r2, r0, r1
 8009b52:	ec43 2b10 	vmov	d0, r2, r3
 8009b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b58:	42b7      	cmp	r7, r6
 8009b5a:	bf3a      	itte	cc
 8009b5c:	f1a5 0608 	subcc.w	r6, r5, #8
 8009b60:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009b64:	2100      	movcs	r1, #0
 8009b66:	380b      	subs	r0, #11
 8009b68:	d015      	beq.n	8009b96 <__b2d+0x8e>
 8009b6a:	4084      	lsls	r4, r0
 8009b6c:	f1c0 0520 	rsb	r5, r0, #32
 8009b70:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8009b74:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8009b78:	42be      	cmp	r6, r7
 8009b7a:	fa21 fc05 	lsr.w	ip, r1, r5
 8009b7e:	ea44 030c 	orr.w	r3, r4, ip
 8009b82:	bf8c      	ite	hi
 8009b84:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009b88:	2400      	movls	r4, #0
 8009b8a:	fa01 f000 	lsl.w	r0, r1, r0
 8009b8e:	40ec      	lsrs	r4, r5
 8009b90:	ea40 0204 	orr.w	r2, r0, r4
 8009b94:	e7dd      	b.n	8009b52 <__b2d+0x4a>
 8009b96:	ea44 030c 	orr.w	r3, r4, ip
 8009b9a:	460a      	mov	r2, r1
 8009b9c:	e7d9      	b.n	8009b52 <__b2d+0x4a>
 8009b9e:	bf00      	nop
 8009ba0:	3ff00000 	.word	0x3ff00000

08009ba4 <__d2b>:
 8009ba4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009ba8:	460e      	mov	r6, r1
 8009baa:	2101      	movs	r1, #1
 8009bac:	ec59 8b10 	vmov	r8, r9, d0
 8009bb0:	4615      	mov	r5, r2
 8009bb2:	f7ff fcb5 	bl	8009520 <_Balloc>
 8009bb6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009bba:	4607      	mov	r7, r0
 8009bbc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009bc0:	bb34      	cbnz	r4, 8009c10 <__d2b+0x6c>
 8009bc2:	9301      	str	r3, [sp, #4]
 8009bc4:	f1b8 0300 	subs.w	r3, r8, #0
 8009bc8:	d027      	beq.n	8009c1a <__d2b+0x76>
 8009bca:	a802      	add	r0, sp, #8
 8009bcc:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009bd0:	f7ff fd89 	bl	80096e6 <__lo0bits>
 8009bd4:	9900      	ldr	r1, [sp, #0]
 8009bd6:	b1f0      	cbz	r0, 8009c16 <__d2b+0x72>
 8009bd8:	9a01      	ldr	r2, [sp, #4]
 8009bda:	f1c0 0320 	rsb	r3, r0, #32
 8009bde:	fa02 f303 	lsl.w	r3, r2, r3
 8009be2:	430b      	orrs	r3, r1
 8009be4:	40c2      	lsrs	r2, r0
 8009be6:	617b      	str	r3, [r7, #20]
 8009be8:	9201      	str	r2, [sp, #4]
 8009bea:	9b01      	ldr	r3, [sp, #4]
 8009bec:	61bb      	str	r3, [r7, #24]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	bf14      	ite	ne
 8009bf2:	2102      	movne	r1, #2
 8009bf4:	2101      	moveq	r1, #1
 8009bf6:	6139      	str	r1, [r7, #16]
 8009bf8:	b1c4      	cbz	r4, 8009c2c <__d2b+0x88>
 8009bfa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009bfe:	4404      	add	r4, r0
 8009c00:	6034      	str	r4, [r6, #0]
 8009c02:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009c06:	6028      	str	r0, [r5, #0]
 8009c08:	4638      	mov	r0, r7
 8009c0a:	b003      	add	sp, #12
 8009c0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c14:	e7d5      	b.n	8009bc2 <__d2b+0x1e>
 8009c16:	6179      	str	r1, [r7, #20]
 8009c18:	e7e7      	b.n	8009bea <__d2b+0x46>
 8009c1a:	a801      	add	r0, sp, #4
 8009c1c:	f7ff fd63 	bl	80096e6 <__lo0bits>
 8009c20:	9b01      	ldr	r3, [sp, #4]
 8009c22:	617b      	str	r3, [r7, #20]
 8009c24:	2101      	movs	r1, #1
 8009c26:	6139      	str	r1, [r7, #16]
 8009c28:	3020      	adds	r0, #32
 8009c2a:	e7e5      	b.n	8009bf8 <__d2b+0x54>
 8009c2c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009c30:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009c34:	6030      	str	r0, [r6, #0]
 8009c36:	6918      	ldr	r0, [r3, #16]
 8009c38:	f7ff fd36 	bl	80096a8 <__hi0bits>
 8009c3c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009c40:	e7e1      	b.n	8009c06 <__d2b+0x62>

08009c42 <__ratio>:
 8009c42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c46:	4688      	mov	r8, r1
 8009c48:	4669      	mov	r1, sp
 8009c4a:	4681      	mov	r9, r0
 8009c4c:	f7ff ff5c 	bl	8009b08 <__b2d>
 8009c50:	a901      	add	r1, sp, #4
 8009c52:	4640      	mov	r0, r8
 8009c54:	ec57 6b10 	vmov	r6, r7, d0
 8009c58:	f7ff ff56 	bl	8009b08 <__b2d>
 8009c5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009c60:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009c64:	eba3 0c02 	sub.w	ip, r3, r2
 8009c68:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009c6c:	1a9b      	subs	r3, r3, r2
 8009c6e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009c72:	ec5b ab10 	vmov	sl, fp, d0
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	bfce      	itee	gt
 8009c7a:	463a      	movgt	r2, r7
 8009c7c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009c80:	465a      	movle	r2, fp
 8009c82:	4659      	mov	r1, fp
 8009c84:	463d      	mov	r5, r7
 8009c86:	bfd4      	ite	le
 8009c88:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8009c8c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8009c90:	4630      	mov	r0, r6
 8009c92:	ee10 2a10 	vmov	r2, s0
 8009c96:	460b      	mov	r3, r1
 8009c98:	4629      	mov	r1, r5
 8009c9a:	f7f6 fd8f 	bl	80007bc <__aeabi_ddiv>
 8009c9e:	ec41 0b10 	vmov	d0, r0, r1
 8009ca2:	b003      	add	sp, #12
 8009ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009ca8 <__copybits>:
 8009ca8:	3901      	subs	r1, #1
 8009caa:	b510      	push	{r4, lr}
 8009cac:	1149      	asrs	r1, r1, #5
 8009cae:	6914      	ldr	r4, [r2, #16]
 8009cb0:	3101      	adds	r1, #1
 8009cb2:	f102 0314 	add.w	r3, r2, #20
 8009cb6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009cba:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009cbe:	42a3      	cmp	r3, r4
 8009cc0:	4602      	mov	r2, r0
 8009cc2:	d303      	bcc.n	8009ccc <__copybits+0x24>
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	428a      	cmp	r2, r1
 8009cc8:	d305      	bcc.n	8009cd6 <__copybits+0x2e>
 8009cca:	bd10      	pop	{r4, pc}
 8009ccc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cd0:	f840 2b04 	str.w	r2, [r0], #4
 8009cd4:	e7f3      	b.n	8009cbe <__copybits+0x16>
 8009cd6:	f842 3b04 	str.w	r3, [r2], #4
 8009cda:	e7f4      	b.n	8009cc6 <__copybits+0x1e>

08009cdc <__any_on>:
 8009cdc:	f100 0214 	add.w	r2, r0, #20
 8009ce0:	6900      	ldr	r0, [r0, #16]
 8009ce2:	114b      	asrs	r3, r1, #5
 8009ce4:	4298      	cmp	r0, r3
 8009ce6:	b510      	push	{r4, lr}
 8009ce8:	db11      	blt.n	8009d0e <__any_on+0x32>
 8009cea:	dd0a      	ble.n	8009d02 <__any_on+0x26>
 8009cec:	f011 011f 	ands.w	r1, r1, #31
 8009cf0:	d007      	beq.n	8009d02 <__any_on+0x26>
 8009cf2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009cf6:	fa24 f001 	lsr.w	r0, r4, r1
 8009cfa:	fa00 f101 	lsl.w	r1, r0, r1
 8009cfe:	428c      	cmp	r4, r1
 8009d00:	d10b      	bne.n	8009d1a <__any_on+0x3e>
 8009d02:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d803      	bhi.n	8009d12 <__any_on+0x36>
 8009d0a:	2000      	movs	r0, #0
 8009d0c:	bd10      	pop	{r4, pc}
 8009d0e:	4603      	mov	r3, r0
 8009d10:	e7f7      	b.n	8009d02 <__any_on+0x26>
 8009d12:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009d16:	2900      	cmp	r1, #0
 8009d18:	d0f5      	beq.n	8009d06 <__any_on+0x2a>
 8009d1a:	2001      	movs	r0, #1
 8009d1c:	e7f6      	b.n	8009d0c <__any_on+0x30>

08009d1e <_calloc_r>:
 8009d1e:	b538      	push	{r3, r4, r5, lr}
 8009d20:	fb02 f401 	mul.w	r4, r2, r1
 8009d24:	4621      	mov	r1, r4
 8009d26:	f7fe fa1d 	bl	8008164 <_malloc_r>
 8009d2a:	4605      	mov	r5, r0
 8009d2c:	b118      	cbz	r0, 8009d36 <_calloc_r+0x18>
 8009d2e:	4622      	mov	r2, r4
 8009d30:	2100      	movs	r1, #0
 8009d32:	f7fe f9c0 	bl	80080b6 <memset>
 8009d36:	4628      	mov	r0, r5
 8009d38:	bd38      	pop	{r3, r4, r5, pc}

08009d3a <__ascii_wctomb>:
 8009d3a:	b149      	cbz	r1, 8009d50 <__ascii_wctomb+0x16>
 8009d3c:	2aff      	cmp	r2, #255	; 0xff
 8009d3e:	bf85      	ittet	hi
 8009d40:	238a      	movhi	r3, #138	; 0x8a
 8009d42:	6003      	strhi	r3, [r0, #0]
 8009d44:	700a      	strbls	r2, [r1, #0]
 8009d46:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009d4a:	bf98      	it	ls
 8009d4c:	2001      	movls	r0, #1
 8009d4e:	4770      	bx	lr
 8009d50:	4608      	mov	r0, r1
 8009d52:	4770      	bx	lr

08009d54 <_init>:
 8009d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d56:	bf00      	nop
 8009d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d5a:	bc08      	pop	{r3}
 8009d5c:	469e      	mov	lr, r3
 8009d5e:	4770      	bx	lr

08009d60 <_fini>:
 8009d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d62:	bf00      	nop
 8009d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d66:	bc08      	pop	{r3}
 8009d68:	469e      	mov	lr, r3
 8009d6a:	4770      	bx	lr
