
imu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004598  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08004738  08004738  00014738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004760  08004760  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004760  08004760  00014760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004768  08004768  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004768  08004768  00014768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08004770  08004770  00014770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004778  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000060c  20000074  080047ec  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000680  080047ec  00020680  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011363  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000249d  00000000  00000000  00031407  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001100  00000000  00000000  000338a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001010  00000000  00000000  000349a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016fb6  00000000  00000000  000359b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c49b  00000000  00000000  0004c96e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00095766  00000000  00000000  00058e09  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ee56f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a30  00000000  00000000  000ee5ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004720 	.word	0x08004720

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08004720 	.word	0x08004720

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800031e:	f1a4 0401 	sub.w	r4, r4, #1
 8000322:	d1e9      	bne.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_uldivmod>:
 800097c:	b953      	cbnz	r3, 8000994 <__aeabi_uldivmod+0x18>
 800097e:	b94a      	cbnz	r2, 8000994 <__aeabi_uldivmod+0x18>
 8000980:	2900      	cmp	r1, #0
 8000982:	bf08      	it	eq
 8000984:	2800      	cmpeq	r0, #0
 8000986:	bf1c      	itt	ne
 8000988:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800098c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000990:	f000 b972 	b.w	8000c78 <__aeabi_idiv0>
 8000994:	f1ad 0c08 	sub.w	ip, sp, #8
 8000998:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800099c:	f000 f806 	bl	80009ac <__udivmoddi4>
 80009a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009a8:	b004      	add	sp, #16
 80009aa:	4770      	bx	lr

080009ac <__udivmoddi4>:
 80009ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009b0:	9e08      	ldr	r6, [sp, #32]
 80009b2:	4604      	mov	r4, r0
 80009b4:	4688      	mov	r8, r1
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d14b      	bne.n	8000a52 <__udivmoddi4+0xa6>
 80009ba:	428a      	cmp	r2, r1
 80009bc:	4615      	mov	r5, r2
 80009be:	d967      	bls.n	8000a90 <__udivmoddi4+0xe4>
 80009c0:	fab2 f282 	clz	r2, r2
 80009c4:	b14a      	cbz	r2, 80009da <__udivmoddi4+0x2e>
 80009c6:	f1c2 0720 	rsb	r7, r2, #32
 80009ca:	fa01 f302 	lsl.w	r3, r1, r2
 80009ce:	fa20 f707 	lsr.w	r7, r0, r7
 80009d2:	4095      	lsls	r5, r2
 80009d4:	ea47 0803 	orr.w	r8, r7, r3
 80009d8:	4094      	lsls	r4, r2
 80009da:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80009de:	0c23      	lsrs	r3, r4, #16
 80009e0:	fbb8 f7fe 	udiv	r7, r8, lr
 80009e4:	fa1f fc85 	uxth.w	ip, r5
 80009e8:	fb0e 8817 	mls	r8, lr, r7, r8
 80009ec:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009f0:	fb07 f10c 	mul.w	r1, r7, ip
 80009f4:	4299      	cmp	r1, r3
 80009f6:	d909      	bls.n	8000a0c <__udivmoddi4+0x60>
 80009f8:	18eb      	adds	r3, r5, r3
 80009fa:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80009fe:	f080 811b 	bcs.w	8000c38 <__udivmoddi4+0x28c>
 8000a02:	4299      	cmp	r1, r3
 8000a04:	f240 8118 	bls.w	8000c38 <__udivmoddi4+0x28c>
 8000a08:	3f02      	subs	r7, #2
 8000a0a:	442b      	add	r3, r5
 8000a0c:	1a5b      	subs	r3, r3, r1
 8000a0e:	b2a4      	uxth	r4, r4
 8000a10:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a14:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a1c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a20:	45a4      	cmp	ip, r4
 8000a22:	d909      	bls.n	8000a38 <__udivmoddi4+0x8c>
 8000a24:	192c      	adds	r4, r5, r4
 8000a26:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000a2a:	f080 8107 	bcs.w	8000c3c <__udivmoddi4+0x290>
 8000a2e:	45a4      	cmp	ip, r4
 8000a30:	f240 8104 	bls.w	8000c3c <__udivmoddi4+0x290>
 8000a34:	3802      	subs	r0, #2
 8000a36:	442c      	add	r4, r5
 8000a38:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000a3c:	eba4 040c 	sub.w	r4, r4, ip
 8000a40:	2700      	movs	r7, #0
 8000a42:	b11e      	cbz	r6, 8000a4c <__udivmoddi4+0xa0>
 8000a44:	40d4      	lsrs	r4, r2
 8000a46:	2300      	movs	r3, #0
 8000a48:	e9c6 4300 	strd	r4, r3, [r6]
 8000a4c:	4639      	mov	r1, r7
 8000a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a52:	428b      	cmp	r3, r1
 8000a54:	d909      	bls.n	8000a6a <__udivmoddi4+0xbe>
 8000a56:	2e00      	cmp	r6, #0
 8000a58:	f000 80eb 	beq.w	8000c32 <__udivmoddi4+0x286>
 8000a5c:	2700      	movs	r7, #0
 8000a5e:	e9c6 0100 	strd	r0, r1, [r6]
 8000a62:	4638      	mov	r0, r7
 8000a64:	4639      	mov	r1, r7
 8000a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a6a:	fab3 f783 	clz	r7, r3
 8000a6e:	2f00      	cmp	r7, #0
 8000a70:	d147      	bne.n	8000b02 <__udivmoddi4+0x156>
 8000a72:	428b      	cmp	r3, r1
 8000a74:	d302      	bcc.n	8000a7c <__udivmoddi4+0xd0>
 8000a76:	4282      	cmp	r2, r0
 8000a78:	f200 80fa 	bhi.w	8000c70 <__udivmoddi4+0x2c4>
 8000a7c:	1a84      	subs	r4, r0, r2
 8000a7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000a82:	2001      	movs	r0, #1
 8000a84:	4698      	mov	r8, r3
 8000a86:	2e00      	cmp	r6, #0
 8000a88:	d0e0      	beq.n	8000a4c <__udivmoddi4+0xa0>
 8000a8a:	e9c6 4800 	strd	r4, r8, [r6]
 8000a8e:	e7dd      	b.n	8000a4c <__udivmoddi4+0xa0>
 8000a90:	b902      	cbnz	r2, 8000a94 <__udivmoddi4+0xe8>
 8000a92:	deff      	udf	#255	; 0xff
 8000a94:	fab2 f282 	clz	r2, r2
 8000a98:	2a00      	cmp	r2, #0
 8000a9a:	f040 808f 	bne.w	8000bbc <__udivmoddi4+0x210>
 8000a9e:	1b49      	subs	r1, r1, r5
 8000aa0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000aa4:	fa1f f885 	uxth.w	r8, r5
 8000aa8:	2701      	movs	r7, #1
 8000aaa:	fbb1 fcfe 	udiv	ip, r1, lr
 8000aae:	0c23      	lsrs	r3, r4, #16
 8000ab0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ab4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ab8:	fb08 f10c 	mul.w	r1, r8, ip
 8000abc:	4299      	cmp	r1, r3
 8000abe:	d907      	bls.n	8000ad0 <__udivmoddi4+0x124>
 8000ac0:	18eb      	adds	r3, r5, r3
 8000ac2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000ac6:	d202      	bcs.n	8000ace <__udivmoddi4+0x122>
 8000ac8:	4299      	cmp	r1, r3
 8000aca:	f200 80cd 	bhi.w	8000c68 <__udivmoddi4+0x2bc>
 8000ace:	4684      	mov	ip, r0
 8000ad0:	1a59      	subs	r1, r3, r1
 8000ad2:	b2a3      	uxth	r3, r4
 8000ad4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ad8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000adc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ae0:	fb08 f800 	mul.w	r8, r8, r0
 8000ae4:	45a0      	cmp	r8, r4
 8000ae6:	d907      	bls.n	8000af8 <__udivmoddi4+0x14c>
 8000ae8:	192c      	adds	r4, r5, r4
 8000aea:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000aee:	d202      	bcs.n	8000af6 <__udivmoddi4+0x14a>
 8000af0:	45a0      	cmp	r8, r4
 8000af2:	f200 80b6 	bhi.w	8000c62 <__udivmoddi4+0x2b6>
 8000af6:	4618      	mov	r0, r3
 8000af8:	eba4 0408 	sub.w	r4, r4, r8
 8000afc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b00:	e79f      	b.n	8000a42 <__udivmoddi4+0x96>
 8000b02:	f1c7 0c20 	rsb	ip, r7, #32
 8000b06:	40bb      	lsls	r3, r7
 8000b08:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b0c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b10:	fa01 f407 	lsl.w	r4, r1, r7
 8000b14:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b18:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b1c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b20:	4325      	orrs	r5, r4
 8000b22:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b26:	0c2c      	lsrs	r4, r5, #16
 8000b28:	fb08 3319 	mls	r3, r8, r9, r3
 8000b2c:	fa1f fa8e 	uxth.w	sl, lr
 8000b30:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000b34:	fb09 f40a 	mul.w	r4, r9, sl
 8000b38:	429c      	cmp	r4, r3
 8000b3a:	fa02 f207 	lsl.w	r2, r2, r7
 8000b3e:	fa00 f107 	lsl.w	r1, r0, r7
 8000b42:	d90b      	bls.n	8000b5c <__udivmoddi4+0x1b0>
 8000b44:	eb1e 0303 	adds.w	r3, lr, r3
 8000b48:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000b4c:	f080 8087 	bcs.w	8000c5e <__udivmoddi4+0x2b2>
 8000b50:	429c      	cmp	r4, r3
 8000b52:	f240 8084 	bls.w	8000c5e <__udivmoddi4+0x2b2>
 8000b56:	f1a9 0902 	sub.w	r9, r9, #2
 8000b5a:	4473      	add	r3, lr
 8000b5c:	1b1b      	subs	r3, r3, r4
 8000b5e:	b2ad      	uxth	r5, r5
 8000b60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b64:	fb08 3310 	mls	r3, r8, r0, r3
 8000b68:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000b6c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000b70:	45a2      	cmp	sl, r4
 8000b72:	d908      	bls.n	8000b86 <__udivmoddi4+0x1da>
 8000b74:	eb1e 0404 	adds.w	r4, lr, r4
 8000b78:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b7c:	d26b      	bcs.n	8000c56 <__udivmoddi4+0x2aa>
 8000b7e:	45a2      	cmp	sl, r4
 8000b80:	d969      	bls.n	8000c56 <__udivmoddi4+0x2aa>
 8000b82:	3802      	subs	r0, #2
 8000b84:	4474      	add	r4, lr
 8000b86:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000b8e:	eba4 040a 	sub.w	r4, r4, sl
 8000b92:	454c      	cmp	r4, r9
 8000b94:	46c2      	mov	sl, r8
 8000b96:	464b      	mov	r3, r9
 8000b98:	d354      	bcc.n	8000c44 <__udivmoddi4+0x298>
 8000b9a:	d051      	beq.n	8000c40 <__udivmoddi4+0x294>
 8000b9c:	2e00      	cmp	r6, #0
 8000b9e:	d069      	beq.n	8000c74 <__udivmoddi4+0x2c8>
 8000ba0:	ebb1 050a 	subs.w	r5, r1, sl
 8000ba4:	eb64 0403 	sbc.w	r4, r4, r3
 8000ba8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000bac:	40fd      	lsrs	r5, r7
 8000bae:	40fc      	lsrs	r4, r7
 8000bb0:	ea4c 0505 	orr.w	r5, ip, r5
 8000bb4:	e9c6 5400 	strd	r5, r4, [r6]
 8000bb8:	2700      	movs	r7, #0
 8000bba:	e747      	b.n	8000a4c <__udivmoddi4+0xa0>
 8000bbc:	f1c2 0320 	rsb	r3, r2, #32
 8000bc0:	fa20 f703 	lsr.w	r7, r0, r3
 8000bc4:	4095      	lsls	r5, r2
 8000bc6:	fa01 f002 	lsl.w	r0, r1, r2
 8000bca:	fa21 f303 	lsr.w	r3, r1, r3
 8000bce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bd2:	4338      	orrs	r0, r7
 8000bd4:	0c01      	lsrs	r1, r0, #16
 8000bd6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000bda:	fa1f f885 	uxth.w	r8, r5
 8000bde:	fb0e 3317 	mls	r3, lr, r7, r3
 8000be2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000be6:	fb07 f308 	mul.w	r3, r7, r8
 8000bea:	428b      	cmp	r3, r1
 8000bec:	fa04 f402 	lsl.w	r4, r4, r2
 8000bf0:	d907      	bls.n	8000c02 <__udivmoddi4+0x256>
 8000bf2:	1869      	adds	r1, r5, r1
 8000bf4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000bf8:	d22f      	bcs.n	8000c5a <__udivmoddi4+0x2ae>
 8000bfa:	428b      	cmp	r3, r1
 8000bfc:	d92d      	bls.n	8000c5a <__udivmoddi4+0x2ae>
 8000bfe:	3f02      	subs	r7, #2
 8000c00:	4429      	add	r1, r5
 8000c02:	1acb      	subs	r3, r1, r3
 8000c04:	b281      	uxth	r1, r0
 8000c06:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c0a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c12:	fb00 f308 	mul.w	r3, r0, r8
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d907      	bls.n	8000c2a <__udivmoddi4+0x27e>
 8000c1a:	1869      	adds	r1, r5, r1
 8000c1c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000c20:	d217      	bcs.n	8000c52 <__udivmoddi4+0x2a6>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d915      	bls.n	8000c52 <__udivmoddi4+0x2a6>
 8000c26:	3802      	subs	r0, #2
 8000c28:	4429      	add	r1, r5
 8000c2a:	1ac9      	subs	r1, r1, r3
 8000c2c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000c30:	e73b      	b.n	8000aaa <__udivmoddi4+0xfe>
 8000c32:	4637      	mov	r7, r6
 8000c34:	4630      	mov	r0, r6
 8000c36:	e709      	b.n	8000a4c <__udivmoddi4+0xa0>
 8000c38:	4607      	mov	r7, r0
 8000c3a:	e6e7      	b.n	8000a0c <__udivmoddi4+0x60>
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	e6fb      	b.n	8000a38 <__udivmoddi4+0x8c>
 8000c40:	4541      	cmp	r1, r8
 8000c42:	d2ab      	bcs.n	8000b9c <__udivmoddi4+0x1f0>
 8000c44:	ebb8 0a02 	subs.w	sl, r8, r2
 8000c48:	eb69 020e 	sbc.w	r2, r9, lr
 8000c4c:	3801      	subs	r0, #1
 8000c4e:	4613      	mov	r3, r2
 8000c50:	e7a4      	b.n	8000b9c <__udivmoddi4+0x1f0>
 8000c52:	4660      	mov	r0, ip
 8000c54:	e7e9      	b.n	8000c2a <__udivmoddi4+0x27e>
 8000c56:	4618      	mov	r0, r3
 8000c58:	e795      	b.n	8000b86 <__udivmoddi4+0x1da>
 8000c5a:	4667      	mov	r7, ip
 8000c5c:	e7d1      	b.n	8000c02 <__udivmoddi4+0x256>
 8000c5e:	4681      	mov	r9, r0
 8000c60:	e77c      	b.n	8000b5c <__udivmoddi4+0x1b0>
 8000c62:	3802      	subs	r0, #2
 8000c64:	442c      	add	r4, r5
 8000c66:	e747      	b.n	8000af8 <__udivmoddi4+0x14c>
 8000c68:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c6c:	442b      	add	r3, r5
 8000c6e:	e72f      	b.n	8000ad0 <__udivmoddi4+0x124>
 8000c70:	4638      	mov	r0, r7
 8000c72:	e708      	b.n	8000a86 <__udivmoddi4+0xda>
 8000c74:	4637      	mov	r7, r6
 8000c76:	e6e9      	b.n	8000a4c <__udivmoddi4+0xa0>

08000c78 <__aeabi_idiv0>:
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop

08000c7c <_ZN3IMUC1Ev>:
 *      Author: cy
 */

#include <IMU/IMU.h>

IMU::IMU() {
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <_ZN3IMUC1Ev+0x1c>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	601a      	str	r2, [r3, #0]
	// Auto-generated constructor stub
}
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	08004740 	.word	0x08004740

08000c9c <_ZN3IMUD1Ev>:

IMU::~IMU() {
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <_ZN3IMUD1Ev+0x1c>)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	601a      	str	r2, [r3, #0]
	// Auto-generated destructor stub
}
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4618      	mov	r0, r3
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	08004740 	.word	0x08004740

08000cbc <_ZN3IMUD0Ev>:
IMU::~IMU() {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
}
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	f7ff ffe9 	bl	8000c9c <_ZN3IMUD1Ev>
 8000cca:	2160      	movs	r1, #96	; 0x60
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f003 fc93 	bl	80045f8 <_ZdlPvj>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <_ZN3IMU13initializeIMUERK17I2C_HandleTypeDef>:

void IMU::initializeIMU(const I2C_HandleTypeDef &handle) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
	hi2c = handle;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	683a      	ldr	r2, [r7, #0]
 8000cea:	3304      	adds	r3, #4
 8000cec:	4611      	mov	r1, r2
 8000cee:	2254      	movs	r2, #84	; 0x54
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f003 fcb1 	bl	8004658 <memcpy>
	// Set mode to NDOF
	setMode(IMU_Mode::OPR_MODE_NDOF);
 8000cf6:	210c      	movs	r1, #12
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f000 f867 	bl	8000dcc <_ZN3IMU7setModeENS_8IMU_ModeE>
	// Set Euler Angles units to degrees
	eulerAngleUnits = false;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2200      	movs	r2, #0
 8000d02:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	// Set Angular Rate units to Dps
	gyroscopeUnits = false;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	// Set Acceleration units to m/s^2
	totalAccelerationUnits = false;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2200      	movs	r2, #0
 8000d12:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	// Set Temperature units to C
	tempUnits = false;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	// Set data output format to Windows format
	write8(Registers::BNO055_UNIT_SEL_ADDR, 0x00);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	213b      	movs	r1, #59	; 0x3b
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f000 f870 	bl	8000e08 <_ZN3IMU6write8Ehh>
	vTaskDelay(20);
 8000d28:	2014      	movs	r0, #20
 8000d2a:	f003 f937 	bl	8003f9c <vTaskDelay>
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <_ZN3IMU14getOrientationENS_4AxesE>:

double IMU::getOrientation(Axes axis) {
 8000d38:	b590      	push	{r4, r7, lr}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	460b      	mov	r3, r1
 8000d42:	70fb      	strb	r3, [r7, #3]
	// Set register we need to read depending on the axis passed in
	uint8_t registerToRead = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	73fb      	strb	r3, [r7, #15]
	switch(axis) {
 8000d48:	78fb      	ldrb	r3, [r7, #3]
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d007      	beq.n	8000d5e <_ZN3IMU14getOrientationENS_4AxesE+0x26>
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	d008      	beq.n	8000d64 <_ZN3IMU14getOrientationENS_4AxesE+0x2c>
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d000      	beq.n	8000d58 <_ZN3IMU14getOrientationENS_4AxesE+0x20>
		break;
	case Axes::z:
		registerToRead = Registers::BNO055_EULER_H_LSB_ADDR;
		break;
	default:
		break;
 8000d56:	e008      	b.n	8000d6a <_ZN3IMU14getOrientationENS_4AxesE+0x32>
		registerToRead = Registers::BNO055_EULER_P_LSB_ADDR;
 8000d58:	231e      	movs	r3, #30
 8000d5a:	73fb      	strb	r3, [r7, #15]
		break;
 8000d5c:	e005      	b.n	8000d6a <_ZN3IMU14getOrientationENS_4AxesE+0x32>
		registerToRead = Registers::BNO055_EULER_R_LSB_ADDR;
 8000d5e:	231c      	movs	r3, #28
 8000d60:	73fb      	strb	r3, [r7, #15]
		break;
 8000d62:	e002      	b.n	8000d6a <_ZN3IMU14getOrientationENS_4AxesE+0x32>
		registerToRead = Registers::BNO055_EULER_H_LSB_ADDR;
 8000d64:	231a      	movs	r3, #26
 8000d66:	73fb      	strb	r3, [r7, #15]
		break;
 8000d68:	bf00      	nop
	}

	// Read the data registers
	uint16_t data = read16(registerToRead);
 8000d6a:	7bfb      	ldrb	r3, [r7, #15]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f000 f868 	bl	8000e44 <_ZN3IMU6read16Eh>
 8000d74:	4603      	mov	r3, r0
 8000d76:	81bb      	strh	r3, [r7, #12]
	// Section 3.6.5.4 of datasheet for conversion from LSBs to deg/rad
	return eulerAngleUnits ? (double)data / 900.0 : (double)data / 16.0;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d00b      	beq.n	8000d9a <_ZN3IMU14getOrientationENS_4AxesE+0x62>
 8000d82:	89bb      	ldrh	r3, [r7, #12]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff fb6d 	bl	8000464 <__aeabi_ui2d>
 8000d8a:	f04f 0200 	mov.w	r2, #0
 8000d8e:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <_ZN3IMU14getOrientationENS_4AxesE+0x8c>)
 8000d90:	f7ff fd0c 	bl	80007ac <__aeabi_ddiv>
 8000d94:	4603      	mov	r3, r0
 8000d96:	460c      	mov	r4, r1
 8000d98:	e00a      	b.n	8000db0 <_ZN3IMU14getOrientationENS_4AxesE+0x78>
 8000d9a:	89bb      	ldrh	r3, [r7, #12]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff fb61 	bl	8000464 <__aeabi_ui2d>
 8000da2:	f04f 0200 	mov.w	r2, #0
 8000da6:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <_ZN3IMU14getOrientationENS_4AxesE+0x90>)
 8000da8:	f7ff fd00 	bl	80007ac <__aeabi_ddiv>
 8000dac:	4603      	mov	r3, r0
 8000dae:	460c      	mov	r4, r1
 8000db0:	ec44 3b17 	vmov	d7, r3, r4
}
 8000db4:	eeb0 0a47 	vmov.f32	s0, s14
 8000db8:	eef0 0a67 	vmov.f32	s1, s15
 8000dbc:	3714      	adds	r7, #20
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd90      	pop	{r4, r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	408c2000 	.word	0x408c2000
 8000dc8:	40300000 	.word	0x40300000

08000dcc <_ZN3IMU7setModeENS_8IMU_ModeE>:
	uint16_t data = read16(registerToRead);
	// Section 3.6.5.6 of datasheet for conversion from LSBs to m/s^2
	return (double)data / 100.0;
}

void IMU::setMode(IMU_Mode mode) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	70fb      	strb	r3, [r7, #3]
	write8(Registers::BNO055_OPR_MODE_ADDR, mode);
 8000dd8:	78fb      	ldrb	r3, [r7, #3]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	213d      	movs	r1, #61	; 0x3d
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f000 f812 	bl	8000e08 <_ZN3IMU6write8Ehh>
	currentMode = mode;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	78fa      	ldrb	r2, [r7, #3]
 8000de8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	// Time required to switch between operating modes (Datasheet Table 3-6)
	mode == IMU_Mode::OPR_MODE_CONFIGMODE ? vTaskDelay(19) : vTaskDelay(7);
 8000dec:	78fb      	ldrb	r3, [r7, #3]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d103      	bne.n	8000dfa <_ZN3IMU7setModeENS_8IMU_ModeE+0x2e>
 8000df2:	2013      	movs	r0, #19
 8000df4:	f003 f8d2 	bl	8003f9c <vTaskDelay>
	return;
 8000df8:	e003      	b.n	8000e02 <_ZN3IMU7setModeENS_8IMU_ModeE+0x36>
	mode == IMU_Mode::OPR_MODE_CONFIGMODE ? vTaskDelay(19) : vTaskDelay(7);
 8000dfa:	2007      	movs	r0, #7
 8000dfc:	f003 f8ce 	bl	8003f9c <vTaskDelay>
	return;
 8000e00:	bf00      	nop
}
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <_ZN3IMU6write8Ehh>:

HAL_StatusTypeDef IMU::write8(uint8_t reg, uint8_t value) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af02      	add	r7, sp, #8
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	460b      	mov	r3, r1
 8000e12:	70fb      	strb	r3, [r7, #3]
 8000e14:	4613      	mov	r3, r2
 8000e16:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef ret;
	// Combine reg and value into a buffer
	uint8_t buffer[2];
	buffer[0] = reg;
 8000e18:	78fb      	ldrb	r3, [r7, #3]
 8000e1a:	733b      	strb	r3, [r7, #12]
	buffer[1] = value;
 8000e1c:	78bb      	ldrb	r3, [r7, #2]
 8000e1e:	737b      	strb	r3, [r7, #13]
	// Send buffer over
	ret = HAL_I2C_Master_Transmit(&hi2c, IMU_I2C_ADDR << 1, buffer, 2, HAL_MAX_DELAY);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	1d18      	adds	r0, r3, #4
 8000e24:	f107 020c 	add.w	r2, r7, #12
 8000e28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e2c:	9300      	str	r3, [sp, #0]
 8000e2e:	2302      	movs	r3, #2
 8000e30:	2150      	movs	r1, #80	; 0x50
 8000e32:	f000 ff5d 	bl	8001cf0 <HAL_I2C_Master_Transmit>
 8000e36:	4603      	mov	r3, r0
 8000e38:	73fb      	strb	r3, [r7, #15]
	return ret;
 8000e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <_ZN3IMU6read16Eh>:
		return 0xFF;
	}
	return value;
}

uint16_t IMU::read16(uint8_t reg) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af02      	add	r7, sp, #8
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef ret;
	uint8_t buffer[2];
	// Tell sensor that we want to read from reg
	ret = HAL_I2C_Master_Transmit(&hi2c, IMU_I2C_ADDR << 1, &reg, 1, HAL_MAX_DELAY);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	1d18      	adds	r0, r3, #4
 8000e54:	1cfa      	adds	r2, r7, #3
 8000e56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	2150      	movs	r1, #80	; 0x50
 8000e60:	f000 ff46 	bl	8001cf0 <HAL_I2C_Master_Transmit>
 8000e64:	4603      	mov	r3, r0
 8000e66:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) {
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d002      	beq.n	8000e74 <_ZN3IMU6read16Eh+0x30>
		return 0xFFFF;
 8000e6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e72:	e01b      	b.n	8000eac <_ZN3IMU6read16Eh+0x68>
	}
	// Read 1 byte from reg
	ret = HAL_I2C_Master_Receive(&hi2c, IMU_I2C_ADDR << 1, buffer, 2, HAL_MAX_DELAY);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	1d18      	adds	r0, r3, #4
 8000e78:	f107 0208 	add.w	r2, r7, #8
 8000e7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e80:	9300      	str	r3, [sp, #0]
 8000e82:	2302      	movs	r3, #2
 8000e84:	2150      	movs	r1, #80	; 0x50
 8000e86:	f001 f831 	bl	8001eec <HAL_I2C_Master_Receive>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) {
 8000e8e:	7bfb      	ldrb	r3, [r7, #15]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d002      	beq.n	8000e9a <_ZN3IMU6read16Eh+0x56>
		return 0xFFFF;
 8000e94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e98:	e008      	b.n	8000eac <_ZN3IMU6read16Eh+0x68>
	}
	// The LSB is always at the lower register address, so cast buffer[0] into 16 bits and shift it left by 8
	// And then OR with MSB to combine into 2 bytes
	uint16_t value = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000e9a:	7a7b      	ldrb	r3, [r7, #9]
 8000e9c:	021b      	lsls	r3, r3, #8
 8000e9e:	b21a      	sxth	r2, r3
 8000ea0:	7a3b      	ldrb	r3, [r7, #8]
 8000ea2:	b21b      	sxth	r3, r3
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	b21b      	sxth	r3, r3
 8000ea8:	81bb      	strh	r3, [r7, #12]
	return value;
 8000eaa:	89bb      	ldrh	r3, [r7, #12]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3710      	adds	r7, #16
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <main>:

// Our tasks
void PrintEulerAngle(void* arg);

int main(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eba:	f000 fb21 	bl	8001500 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000ebe:	f000 f815 	bl	8000eec <_Z18SystemClock_Configv>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec2:	f000 f8eb 	bl	800109c <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000ec6:	f000 f8bb 	bl	8001040 <_ZL19MX_USART2_UART_Initv>
  MX_I2C1_Init();
 8000eca:	f000 f885 	bl	8000fd8 <_ZL12MX_I2C1_Initv>
  imu.initializeIMU(hi2c1);
 8000ece:	4905      	ldr	r1, [pc, #20]	; (8000ee4 <main+0x30>)
 8000ed0:	4805      	ldr	r0, [pc, #20]	; (8000ee8 <main+0x34>)
 8000ed2:	f7ff ff03 	bl	8000cdc <_ZN3IMU13initializeIMUERK17I2C_HandleTypeDef>
//  xTaskCreate(PrintEulerAngle, "Print Absolute Orientation", 1024, NULL, 1, NULL);
//  vTaskStartScheduler();

  while (1)
  {
	  double zOrientation = imu.getOrientation(imu.Axes::z);
 8000ed6:	2102      	movs	r1, #2
 8000ed8:	4803      	ldr	r0, [pc, #12]	; (8000ee8 <main+0x34>)
 8000eda:	f7ff ff2d 	bl	8000d38 <_ZN3IMU14getOrientationENS_4AxesE>
 8000ede:	ed87 0b00 	vstr	d0, [r7]
  }
 8000ee2:	e7f8      	b.n	8000ed6 <main+0x22>
 8000ee4:	20000090 	.word	0x20000090
 8000ee8:	20000124 	.word	0x20000124

08000eec <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b094      	sub	sp, #80	; 0x50
 8000ef0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef2:	f107 0320 	add.w	r3, r7, #32
 8000ef6:	2230      	movs	r2, #48	; 0x30
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4618      	mov	r0, r3
 8000efc:	f003 fbb7 	bl	800466e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f00:	f107 030c 	add.w	r3, r7, #12
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f10:	2300      	movs	r3, #0
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	4b2e      	ldr	r3, [pc, #184]	; (8000fd0 <_Z18SystemClock_Configv+0xe4>)
 8000f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f18:	4a2d      	ldr	r2, [pc, #180]	; (8000fd0 <_Z18SystemClock_Configv+0xe4>)
 8000f1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f20:	4b2b      	ldr	r3, [pc, #172]	; (8000fd0 <_Z18SystemClock_Configv+0xe4>)
 8000f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	4b28      	ldr	r3, [pc, #160]	; (8000fd4 <_Z18SystemClock_Configv+0xe8>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f38:	4a26      	ldr	r2, [pc, #152]	; (8000fd4 <_Z18SystemClock_Configv+0xe8>)
 8000f3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f3e:	6013      	str	r3, [r2, #0]
 8000f40:	4b24      	ldr	r3, [pc, #144]	; (8000fd4 <_Z18SystemClock_Configv+0xe8>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f50:	2301      	movs	r3, #1
 8000f52:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f54:	2310      	movs	r3, #16
 8000f56:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f60:	2310      	movs	r3, #16
 8000f62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f64:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f68:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f6a:	2304      	movs	r3, #4
 8000f6c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f6e:	2307      	movs	r3, #7
 8000f70:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f72:	f107 0320 	add.w	r3, r7, #32
 8000f76:	4618      	mov	r0, r3
 8000f78:	f001 fd0c 	bl	8002994 <HAL_RCC_OscConfig>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	bf14      	ite	ne
 8000f82:	2301      	movne	r3, #1
 8000f84:	2300      	moveq	r3, #0
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
 8000f8c:	f000 f908 	bl	80011a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f90:	230f      	movs	r3, #15
 8000f92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f94:	2302      	movs	r3, #2
 8000f96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fa6:	f107 030c 	add.w	r3, r7, #12
 8000faa:	2102      	movs	r1, #2
 8000fac:	4618      	mov	r0, r3
 8000fae:	f001 ff61 	bl	8002e74 <HAL_RCC_ClockConfig>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	bf14      	ite	ne
 8000fb8:	2301      	movne	r3, #1
 8000fba:	2300      	moveq	r3, #0
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 8000fc2:	f000 f8ed 	bl	80011a0 <Error_Handler>
  }
}
 8000fc6:	bf00      	nop
 8000fc8:	3750      	adds	r7, #80	; 0x50
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40007000 	.word	0x40007000

08000fd8 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fdc:	4b15      	ldr	r3, [pc, #84]	; (8001034 <_ZL12MX_I2C1_Initv+0x5c>)
 8000fde:	4a16      	ldr	r2, [pc, #88]	; (8001038 <_ZL12MX_I2C1_Initv+0x60>)
 8000fe0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fe2:	4b14      	ldr	r3, [pc, #80]	; (8001034 <_ZL12MX_I2C1_Initv+0x5c>)
 8000fe4:	4a15      	ldr	r2, [pc, #84]	; (800103c <_ZL12MX_I2C1_Initv+0x64>)
 8000fe6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <_ZL12MX_I2C1_Initv+0x5c>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fee:	4b11      	ldr	r3, [pc, #68]	; (8001034 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ff6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ffa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ffc:	4b0d      	ldr	r3, [pc, #52]	; (8001034 <_ZL12MX_I2C1_Initv+0x5c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001002:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <_ZL12MX_I2C1_Initv+0x5c>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001008:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <_ZL12MX_I2C1_Initv+0x5c>)
 800100a:	2200      	movs	r2, #0
 800100c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <_ZL12MX_I2C1_Initv+0x5c>)
 8001010:	2200      	movs	r2, #0
 8001012:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001014:	4807      	ldr	r0, [pc, #28]	; (8001034 <_ZL12MX_I2C1_Initv+0x5c>)
 8001016:	f000 fd33 	bl	8001a80 <HAL_I2C_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	bf14      	ite	ne
 8001020:	2301      	movne	r3, #1
 8001022:	2300      	moveq	r3, #0
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800102a:	f000 f8b9 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000090 	.word	0x20000090
 8001038:	40005400 	.word	0x40005400
 800103c:	000186a0 	.word	0x000186a0

08001040 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001044:	4b13      	ldr	r3, [pc, #76]	; (8001094 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001046:	4a14      	ldr	r2, [pc, #80]	; (8001098 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001048:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800104a:	4b12      	ldr	r3, [pc, #72]	; (8001094 <_ZL19MX_USART2_UART_Initv+0x54>)
 800104c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001050:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001052:	4b10      	ldr	r3, [pc, #64]	; (8001094 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001058:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <_ZL19MX_USART2_UART_Initv+0x54>)
 800105a:	2200      	movs	r2, #0
 800105c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800105e:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001064:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001066:	220c      	movs	r2, #12
 8001068:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106a:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <_ZL19MX_USART2_UART_Initv+0x54>)
 800106c:	2200      	movs	r2, #0
 800106e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001072:	2200      	movs	r2, #0
 8001074:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001076:	4807      	ldr	r0, [pc, #28]	; (8001094 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001078:	f002 fb3e 	bl	80036f8 <HAL_UART_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	bf14      	ite	ne
 8001082:	2301      	movne	r3, #1
 8001084:	2300      	moveq	r3, #0
 8001086:	b2db      	uxtb	r3, r3
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 800108c:	f000 f888 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}
 8001094:	200000e4 	.word	0x200000e4
 8001098:	40004400 	.word	0x40004400

0800109c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	60da      	str	r2, [r3, #12]
 80010b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
 80010b6:	4b2d      	ldr	r3, [pc, #180]	; (800116c <_ZL12MX_GPIO_Initv+0xd0>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a2c      	ldr	r2, [pc, #176]	; (800116c <_ZL12MX_GPIO_Initv+0xd0>)
 80010bc:	f043 0304 	orr.w	r3, r3, #4
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b2a      	ldr	r3, [pc, #168]	; (800116c <_ZL12MX_GPIO_Initv+0xd0>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0304 	and.w	r3, r3, #4
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	4b26      	ldr	r3, [pc, #152]	; (800116c <_ZL12MX_GPIO_Initv+0xd0>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a25      	ldr	r2, [pc, #148]	; (800116c <_ZL12MX_GPIO_Initv+0xd0>)
 80010d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b23      	ldr	r3, [pc, #140]	; (800116c <_ZL12MX_GPIO_Initv+0xd0>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	4b1f      	ldr	r3, [pc, #124]	; (800116c <_ZL12MX_GPIO_Initv+0xd0>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a1e      	ldr	r2, [pc, #120]	; (800116c <_ZL12MX_GPIO_Initv+0xd0>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b1c      	ldr	r3, [pc, #112]	; (800116c <_ZL12MX_GPIO_Initv+0xd0>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	4b18      	ldr	r3, [pc, #96]	; (800116c <_ZL12MX_GPIO_Initv+0xd0>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a17      	ldr	r2, [pc, #92]	; (800116c <_ZL12MX_GPIO_Initv+0xd0>)
 8001110:	f043 0302 	orr.w	r3, r3, #2
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b15      	ldr	r3, [pc, #84]	; (800116c <_ZL12MX_GPIO_Initv+0xd0>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001122:	2200      	movs	r2, #0
 8001124:	2120      	movs	r1, #32
 8001126:	4812      	ldr	r0, [pc, #72]	; (8001170 <_ZL12MX_GPIO_Initv+0xd4>)
 8001128:	f000 fc90 	bl	8001a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800112c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001130:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001132:	4b10      	ldr	r3, [pc, #64]	; (8001174 <_ZL12MX_GPIO_Initv+0xd8>)
 8001134:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	4619      	mov	r1, r3
 8001140:	480d      	ldr	r0, [pc, #52]	; (8001178 <_ZL12MX_GPIO_Initv+0xdc>)
 8001142:	f000 fb01 	bl	8001748 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001146:	2320      	movs	r3, #32
 8001148:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114a:	2301      	movs	r3, #1
 800114c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001152:	2300      	movs	r3, #0
 8001154:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	4619      	mov	r1, r3
 800115c:	4804      	ldr	r0, [pc, #16]	; (8001170 <_ZL12MX_GPIO_Initv+0xd4>)
 800115e:	f000 faf3 	bl	8001748 <HAL_GPIO_Init>

}
 8001162:	bf00      	nop
 8001164:	3728      	adds	r7, #40	; 0x28
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40023800 	.word	0x40023800
 8001170:	40020000 	.word	0x40020000
 8001174:	10210000 	.word	0x10210000
 8001178:	40020800 	.word	0x40020800

0800117c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a04      	ldr	r2, [pc, #16]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d101      	bne.n	8001192 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800118e:	f000 f9d9 	bl	8001544 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40000c00 	.word	0x40000c00

080011a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
	...

080011b0 <_Z41__static_initialization_and_destruction_0ii>:
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d107      	bne.n	80011d0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d102      	bne.n	80011d0 <_Z41__static_initialization_and_destruction_0ii+0x20>
IMU imu;
 80011ca:	4809      	ldr	r0, [pc, #36]	; (80011f0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80011cc:	f7ff fd56 	bl	8000c7c <_ZN3IMUC1Ev>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d107      	bne.n	80011e6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011dc:	4293      	cmp	r3, r2
 80011de:	d102      	bne.n	80011e6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80011e0:	4803      	ldr	r0, [pc, #12]	; (80011f0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80011e2:	f7ff fd5b 	bl	8000c9c <_ZN3IMUD1Ev>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000124 	.word	0x20000124

080011f4 <_GLOBAL__sub_I_hi2c1>:
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80011fc:	2001      	movs	r0, #1
 80011fe:	f7ff ffd7 	bl	80011b0 <_Z41__static_initialization_and_destruction_0ii>
 8001202:	bd80      	pop	{r7, pc}

08001204 <_GLOBAL__sub_D_hi2c1>:
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
 8001208:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800120c:	2000      	movs	r0, #0
 800120e:	f7ff ffcf 	bl	80011b0 <_Z41__static_initialization_and_destruction_0ii>
 8001212:	bd80      	pop	{r7, pc}

08001214 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	607b      	str	r3, [r7, #4]
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <HAL_MspInit+0x4c>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001222:	4a0f      	ldr	r2, [pc, #60]	; (8001260 <HAL_MspInit+0x4c>)
 8001224:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001228:	6453      	str	r3, [r2, #68]	; 0x44
 800122a:	4b0d      	ldr	r3, [pc, #52]	; (8001260 <HAL_MspInit+0x4c>)
 800122c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	603b      	str	r3, [r7, #0]
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <HAL_MspInit+0x4c>)
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	4a08      	ldr	r2, [pc, #32]	; (8001260 <HAL_MspInit+0x4c>)
 8001240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001244:	6413      	str	r3, [r2, #64]	; 0x40
 8001246:	4b06      	ldr	r3, [pc, #24]	; (8001260 <HAL_MspInit+0x4c>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124e:	603b      	str	r3, [r7, #0]
 8001250:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001252:	2007      	movs	r0, #7
 8001254:	f000 fa43 	bl	80016de <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40023800 	.word	0x40023800

08001264 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08a      	sub	sp, #40	; 0x28
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a19      	ldr	r2, [pc, #100]	; (80012e8 <HAL_I2C_MspInit+0x84>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d12c      	bne.n	80012e0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	4b18      	ldr	r3, [pc, #96]	; (80012ec <HAL_I2C_MspInit+0x88>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a17      	ldr	r2, [pc, #92]	; (80012ec <HAL_I2C_MspInit+0x88>)
 8001290:	f043 0302 	orr.w	r3, r3, #2
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b15      	ldr	r3, [pc, #84]	; (80012ec <HAL_I2C_MspInit+0x88>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012a8:	2312      	movs	r3, #18
 80012aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ac:	2301      	movs	r3, #1
 80012ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b0:	2303      	movs	r3, #3
 80012b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012b4:	2304      	movs	r3, #4
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	4619      	mov	r1, r3
 80012be:	480c      	ldr	r0, [pc, #48]	; (80012f0 <HAL_I2C_MspInit+0x8c>)
 80012c0:	f000 fa42 	bl	8001748 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012c4:	2300      	movs	r3, #0
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <HAL_I2C_MspInit+0x88>)
 80012ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012cc:	4a07      	ldr	r2, [pc, #28]	; (80012ec <HAL_I2C_MspInit+0x88>)
 80012ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012d2:	6413      	str	r3, [r2, #64]	; 0x40
 80012d4:	4b05      	ldr	r3, [pc, #20]	; (80012ec <HAL_I2C_MspInit+0x88>)
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012e0:	bf00      	nop
 80012e2:	3728      	adds	r7, #40	; 0x28
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40005400 	.word	0x40005400
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40020400 	.word	0x40020400

080012f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08a      	sub	sp, #40	; 0x28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a19      	ldr	r2, [pc, #100]	; (8001378 <HAL_UART_MspInit+0x84>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d12b      	bne.n	800136e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
 800131a:	4b18      	ldr	r3, [pc, #96]	; (800137c <HAL_UART_MspInit+0x88>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	4a17      	ldr	r2, [pc, #92]	; (800137c <HAL_UART_MspInit+0x88>)
 8001320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001324:	6413      	str	r3, [r2, #64]	; 0x40
 8001326:	4b15      	ldr	r3, [pc, #84]	; (800137c <HAL_UART_MspInit+0x88>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132e:	613b      	str	r3, [r7, #16]
 8001330:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	4b11      	ldr	r3, [pc, #68]	; (800137c <HAL_UART_MspInit+0x88>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a10      	ldr	r2, [pc, #64]	; (800137c <HAL_UART_MspInit+0x88>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <HAL_UART_MspInit+0x88>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800134e:	230c      	movs	r3, #12
 8001350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800135e:	2307      	movs	r3, #7
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	4619      	mov	r1, r3
 8001368:	4805      	ldr	r0, [pc, #20]	; (8001380 <HAL_UART_MspInit+0x8c>)
 800136a:	f000 f9ed 	bl	8001748 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800136e:	bf00      	nop
 8001370:	3728      	adds	r7, #40	; 0x28
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40004400 	.word	0x40004400
 800137c:	40023800 	.word	0x40023800
 8001380:	40020000 	.word	0x40020000

08001384 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b08c      	sub	sp, #48	; 0x30
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8001394:	2200      	movs	r2, #0
 8001396:	6879      	ldr	r1, [r7, #4]
 8001398:	2032      	movs	r0, #50	; 0x32
 800139a:	f000 f9ab 	bl	80016f4 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800139e:	2032      	movs	r0, #50	; 0x32
 80013a0:	f000 f9c4 	bl	800172c <HAL_NVIC_EnableIRQ>
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80013a4:	2300      	movs	r3, #0
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	4b1f      	ldr	r3, [pc, #124]	; (8001428 <HAL_InitTick+0xa4>)
 80013aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ac:	4a1e      	ldr	r2, [pc, #120]	; (8001428 <HAL_InitTick+0xa4>)
 80013ae:	f043 0308 	orr.w	r3, r3, #8
 80013b2:	6413      	str	r3, [r2, #64]	; 0x40
 80013b4:	4b1c      	ldr	r3, [pc, #112]	; (8001428 <HAL_InitTick+0xa4>)
 80013b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b8:	f003 0308 	and.w	r3, r3, #8
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013c0:	f107 0210 	add.w	r2, r7, #16
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	4611      	mov	r1, r2
 80013ca:	4618      	mov	r0, r3
 80013cc:	f001 ff44 	bl	8003258 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80013d0:	f001 ff1a 	bl	8003208 <HAL_RCC_GetPCLK1Freq>
 80013d4:	4603      	mov	r3, r0
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80013da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013dc:	4a13      	ldr	r2, [pc, #76]	; (800142c <HAL_InitTick+0xa8>)
 80013de:	fba2 2303 	umull	r2, r3, r2, r3
 80013e2:	0c9b      	lsrs	r3, r3, #18
 80013e4:	3b01      	subs	r3, #1
 80013e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80013e8:	4b11      	ldr	r3, [pc, #68]	; (8001430 <HAL_InitTick+0xac>)
 80013ea:	4a12      	ldr	r2, [pc, #72]	; (8001434 <HAL_InitTick+0xb0>)
 80013ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 80013ee:	4b10      	ldr	r3, [pc, #64]	; (8001430 <HAL_InitTick+0xac>)
 80013f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013f4:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80013f6:	4a0e      	ldr	r2, [pc, #56]	; (8001430 <HAL_InitTick+0xac>)
 80013f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013fa:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80013fc:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <HAL_InitTick+0xac>)
 80013fe:	2200      	movs	r2, #0
 8001400:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001402:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <HAL_InitTick+0xac>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8001408:	4809      	ldr	r0, [pc, #36]	; (8001430 <HAL_InitTick+0xac>)
 800140a:	f001 ff57 	bl	80032bc <HAL_TIM_Base_Init>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d104      	bne.n	800141e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8001414:	4806      	ldr	r0, [pc, #24]	; (8001430 <HAL_InitTick+0xac>)
 8001416:	f001 ff86 	bl	8003326 <HAL_TIM_Base_Start_IT>
 800141a:	4603      	mov	r3, r0
 800141c:	e000      	b.n	8001420 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
}
 8001420:	4618      	mov	r0, r3
 8001422:	3730      	adds	r7, #48	; 0x30
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40023800 	.word	0x40023800
 800142c:	431bde83 	.word	0x431bde83
 8001430:	2000063c 	.word	0x2000063c
 8001434:	40000c00 	.word	0x40000c00

08001438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800144a:	e7fe      	b.n	800144a <HardFault_Handler+0x4>

0800144c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001450:	e7fe      	b.n	8001450 <MemManage_Handler+0x4>

08001452 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001456:	e7fe      	b.n	8001456 <BusFault_Handler+0x4>

08001458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800145c:	e7fe      	b.n	800145c <UsageFault_Handler+0x4>

0800145e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001470:	4802      	ldr	r0, [pc, #8]	; (800147c <TIM5_IRQHandler+0x10>)
 8001472:	f001 ff7c 	bl	800336e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	2000063c 	.word	0x2000063c

08001480 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001484:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <SystemInit+0x28>)
 8001486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800148a:	4a07      	ldr	r2, [pc, #28]	; (80014a8 <SystemInit+0x28>)
 800148c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001490:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001494:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <SystemInit+0x28>)
 8001496:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800149a:	609a      	str	r2, [r3, #8]
#endif
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014e4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80014b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80014b2:	e003      	b.n	80014bc <LoopCopyDataInit>

080014b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80014b4:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80014b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80014b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80014ba:	3104      	adds	r1, #4

080014bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80014bc:	480b      	ldr	r0, [pc, #44]	; (80014ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80014be:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80014c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80014c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80014c4:	d3f6      	bcc.n	80014b4 <CopyDataInit>
  ldr  r2, =_sbss
 80014c6:	4a0b      	ldr	r2, [pc, #44]	; (80014f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80014c8:	e002      	b.n	80014d0 <LoopFillZerobss>

080014ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80014ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80014cc:	f842 3b04 	str.w	r3, [r2], #4

080014d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80014d0:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80014d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80014d4:	d3f9      	bcc.n	80014ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014d6:	f7ff ffd3 	bl	8001480 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014da:	f003 f891 	bl	8004600 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014de:	f7ff fce9 	bl	8000eb4 <main>
  bx  lr    
 80014e2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80014e4:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80014e8:	08004778 	.word	0x08004778
  ldr  r0, =_sdata
 80014ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80014f0:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80014f4:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 80014f8:	20000680 	.word	0x20000680

080014fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014fc:	e7fe      	b.n	80014fc <ADC_IRQHandler>
	...

08001500 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001504:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <HAL_Init+0x40>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a0d      	ldr	r2, [pc, #52]	; (8001540 <HAL_Init+0x40>)
 800150a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800150e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001510:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <HAL_Init+0x40>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a0a      	ldr	r2, [pc, #40]	; (8001540 <HAL_Init+0x40>)
 8001516:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800151a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800151c:	4b08      	ldr	r3, [pc, #32]	; (8001540 <HAL_Init+0x40>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a07      	ldr	r2, [pc, #28]	; (8001540 <HAL_Init+0x40>)
 8001522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001526:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001528:	2003      	movs	r0, #3
 800152a:	f000 f8d8 	bl	80016de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800152e:	2000      	movs	r0, #0
 8001530:	f7ff ff28 	bl	8001384 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001534:	f7ff fe6e 	bl	8001214 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40023c00 	.word	0x40023c00

08001544 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <HAL_IncTick+0x20>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	461a      	mov	r2, r3
 800154e:	4b06      	ldr	r3, [pc, #24]	; (8001568 <HAL_IncTick+0x24>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4413      	add	r3, r2
 8001554:	4a04      	ldr	r2, [pc, #16]	; (8001568 <HAL_IncTick+0x24>)
 8001556:	6013      	str	r3, [r2, #0]
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	20000008 	.word	0x20000008
 8001568:	2000067c 	.word	0x2000067c

0800156c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  return uwTick;
 8001570:	4b03      	ldr	r3, [pc, #12]	; (8001580 <HAL_GetTick+0x14>)
 8001572:	681b      	ldr	r3, [r3, #0]
}
 8001574:	4618      	mov	r0, r3
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	2000067c 	.word	0x2000067c

08001584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015a0:	4013      	ands	r3, r2
 80015a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015b6:	4a04      	ldr	r2, [pc, #16]	; (80015c8 <__NVIC_SetPriorityGrouping+0x44>)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	60d3      	str	r3, [r2, #12]
}
 80015bc:	bf00      	nop
 80015be:	3714      	adds	r7, #20
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d0:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <__NVIC_GetPriorityGrouping+0x18>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	0a1b      	lsrs	r3, r3, #8
 80015d6:	f003 0307 	and.w	r3, r3, #7
}
 80015da:	4618      	mov	r0, r3
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	db0b      	blt.n	8001612 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	f003 021f 	and.w	r2, r3, #31
 8001600:	4907      	ldr	r1, [pc, #28]	; (8001620 <__NVIC_EnableIRQ+0x38>)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	095b      	lsrs	r3, r3, #5
 8001608:	2001      	movs	r0, #1
 800160a:	fa00 f202 	lsl.w	r2, r0, r2
 800160e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	e000e100 	.word	0xe000e100

08001624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	6039      	str	r1, [r7, #0]
 800162e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001634:	2b00      	cmp	r3, #0
 8001636:	db0a      	blt.n	800164e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	b2da      	uxtb	r2, r3
 800163c:	490c      	ldr	r1, [pc, #48]	; (8001670 <__NVIC_SetPriority+0x4c>)
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	0112      	lsls	r2, r2, #4
 8001644:	b2d2      	uxtb	r2, r2
 8001646:	440b      	add	r3, r1
 8001648:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800164c:	e00a      	b.n	8001664 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	b2da      	uxtb	r2, r3
 8001652:	4908      	ldr	r1, [pc, #32]	; (8001674 <__NVIC_SetPriority+0x50>)
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	f003 030f 	and.w	r3, r3, #15
 800165a:	3b04      	subs	r3, #4
 800165c:	0112      	lsls	r2, r2, #4
 800165e:	b2d2      	uxtb	r2, r2
 8001660:	440b      	add	r3, r1
 8001662:	761a      	strb	r2, [r3, #24]
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	e000e100 	.word	0xe000e100
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001678:	b480      	push	{r7}
 800167a:	b089      	sub	sp, #36	; 0x24
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	f1c3 0307 	rsb	r3, r3, #7
 8001692:	2b04      	cmp	r3, #4
 8001694:	bf28      	it	cs
 8001696:	2304      	movcs	r3, #4
 8001698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3304      	adds	r3, #4
 800169e:	2b06      	cmp	r3, #6
 80016a0:	d902      	bls.n	80016a8 <NVIC_EncodePriority+0x30>
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	3b03      	subs	r3, #3
 80016a6:	e000      	b.n	80016aa <NVIC_EncodePriority+0x32>
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43da      	mvns	r2, r3
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	401a      	ands	r2, r3
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ca:	43d9      	mvns	r1, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d0:	4313      	orrs	r3, r2
         );
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3724      	adds	r7, #36	; 0x24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff ff4c 	bl	8001584 <__NVIC_SetPriorityGrouping>
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
 8001700:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001706:	f7ff ff61 	bl	80015cc <__NVIC_GetPriorityGrouping>
 800170a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	68b9      	ldr	r1, [r7, #8]
 8001710:	6978      	ldr	r0, [r7, #20]
 8001712:	f7ff ffb1 	bl	8001678 <NVIC_EncodePriority>
 8001716:	4602      	mov	r2, r0
 8001718:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800171c:	4611      	mov	r1, r2
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff ff80 	bl	8001624 <__NVIC_SetPriority>
}
 8001724:	bf00      	nop
 8001726:	3718      	adds	r7, #24
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff ff54 	bl	80015e8 <__NVIC_EnableIRQ>
}
 8001740:	bf00      	nop
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001748:	b480      	push	{r7}
 800174a:	b089      	sub	sp, #36	; 0x24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001756:	2300      	movs	r3, #0
 8001758:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800175a:	2300      	movs	r3, #0
 800175c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800175e:	2300      	movs	r3, #0
 8001760:	61fb      	str	r3, [r7, #28]
 8001762:	e159      	b.n	8001a18 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001764:	2201      	movs	r2, #1
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	697a      	ldr	r2, [r7, #20]
 8001774:	4013      	ands	r3, r2
 8001776:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	429a      	cmp	r2, r3
 800177e:	f040 8148 	bne.w	8001a12 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d00b      	beq.n	80017a2 <HAL_GPIO_Init+0x5a>
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2b02      	cmp	r3, #2
 8001790:	d007      	beq.n	80017a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001796:	2b11      	cmp	r3, #17
 8001798:	d003      	beq.n	80017a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2b12      	cmp	r3, #18
 80017a0:	d130      	bne.n	8001804 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	2203      	movs	r2, #3
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43db      	mvns	r3, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4013      	ands	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	68da      	ldr	r2, [r3, #12]
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017d8:	2201      	movs	r2, #1
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4013      	ands	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	091b      	lsrs	r3, r3, #4
 80017ee:	f003 0201 	and.w	r2, r3, #1
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	2203      	movs	r2, #3
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4013      	ands	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4313      	orrs	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	2b02      	cmp	r3, #2
 800183a:	d003      	beq.n	8001844 <HAL_GPIO_Init+0xfc>
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	2b12      	cmp	r3, #18
 8001842:	d123      	bne.n	800188c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	08da      	lsrs	r2, r3, #3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3208      	adds	r2, #8
 800184c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001850:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	f003 0307 	and.w	r3, r3, #7
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	220f      	movs	r2, #15
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4013      	ands	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	691a      	ldr	r2, [r3, #16]
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4313      	orrs	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	08da      	lsrs	r2, r3, #3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	3208      	adds	r2, #8
 8001886:	69b9      	ldr	r1, [r7, #24]
 8001888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	2203      	movs	r2, #3
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 0203 	and.w	r2, r3, #3
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f000 80a2 	beq.w	8001a12 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	4b56      	ldr	r3, [pc, #344]	; (8001a2c <HAL_GPIO_Init+0x2e4>)
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d6:	4a55      	ldr	r2, [pc, #340]	; (8001a2c <HAL_GPIO_Init+0x2e4>)
 80018d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018dc:	6453      	str	r3, [r2, #68]	; 0x44
 80018de:	4b53      	ldr	r3, [pc, #332]	; (8001a2c <HAL_GPIO_Init+0x2e4>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018ea:	4a51      	ldr	r2, [pc, #324]	; (8001a30 <HAL_GPIO_Init+0x2e8>)
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	089b      	lsrs	r3, r3, #2
 80018f0:	3302      	adds	r3, #2
 80018f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	220f      	movs	r2, #15
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43db      	mvns	r3, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4013      	ands	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a48      	ldr	r2, [pc, #288]	; (8001a34 <HAL_GPIO_Init+0x2ec>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d019      	beq.n	800194a <HAL_GPIO_Init+0x202>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a47      	ldr	r2, [pc, #284]	; (8001a38 <HAL_GPIO_Init+0x2f0>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d013      	beq.n	8001946 <HAL_GPIO_Init+0x1fe>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a46      	ldr	r2, [pc, #280]	; (8001a3c <HAL_GPIO_Init+0x2f4>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d00d      	beq.n	8001942 <HAL_GPIO_Init+0x1fa>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a45      	ldr	r2, [pc, #276]	; (8001a40 <HAL_GPIO_Init+0x2f8>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d007      	beq.n	800193e <HAL_GPIO_Init+0x1f6>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a44      	ldr	r2, [pc, #272]	; (8001a44 <HAL_GPIO_Init+0x2fc>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d101      	bne.n	800193a <HAL_GPIO_Init+0x1f2>
 8001936:	2304      	movs	r3, #4
 8001938:	e008      	b.n	800194c <HAL_GPIO_Init+0x204>
 800193a:	2307      	movs	r3, #7
 800193c:	e006      	b.n	800194c <HAL_GPIO_Init+0x204>
 800193e:	2303      	movs	r3, #3
 8001940:	e004      	b.n	800194c <HAL_GPIO_Init+0x204>
 8001942:	2302      	movs	r3, #2
 8001944:	e002      	b.n	800194c <HAL_GPIO_Init+0x204>
 8001946:	2301      	movs	r3, #1
 8001948:	e000      	b.n	800194c <HAL_GPIO_Init+0x204>
 800194a:	2300      	movs	r3, #0
 800194c:	69fa      	ldr	r2, [r7, #28]
 800194e:	f002 0203 	and.w	r2, r2, #3
 8001952:	0092      	lsls	r2, r2, #2
 8001954:	4093      	lsls	r3, r2
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4313      	orrs	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800195c:	4934      	ldr	r1, [pc, #208]	; (8001a30 <HAL_GPIO_Init+0x2e8>)
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	089b      	lsrs	r3, r3, #2
 8001962:	3302      	adds	r3, #2
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800196a:	4b37      	ldr	r3, [pc, #220]	; (8001a48 <HAL_GPIO_Init+0x300>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	43db      	mvns	r3, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4013      	ands	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	4313      	orrs	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800198e:	4a2e      	ldr	r2, [pc, #184]	; (8001a48 <HAL_GPIO_Init+0x300>)
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001994:	4b2c      	ldr	r3, [pc, #176]	; (8001a48 <HAL_GPIO_Init+0x300>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	43db      	mvns	r3, r3
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4013      	ands	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d003      	beq.n	80019b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019b8:	4a23      	ldr	r2, [pc, #140]	; (8001a48 <HAL_GPIO_Init+0x300>)
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019be:	4b22      	ldr	r3, [pc, #136]	; (8001a48 <HAL_GPIO_Init+0x300>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4013      	ands	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019e2:	4a19      	ldr	r2, [pc, #100]	; (8001a48 <HAL_GPIO_Init+0x300>)
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019e8:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <HAL_GPIO_Init+0x300>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4013      	ands	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a0c:	4a0e      	ldr	r2, [pc, #56]	; (8001a48 <HAL_GPIO_Init+0x300>)
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3301      	adds	r3, #1
 8001a16:	61fb      	str	r3, [r7, #28]
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	2b0f      	cmp	r3, #15
 8001a1c:	f67f aea2 	bls.w	8001764 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a20:	bf00      	nop
 8001a22:	3724      	adds	r7, #36	; 0x24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	40013800 	.word	0x40013800
 8001a34:	40020000 	.word	0x40020000
 8001a38:	40020400 	.word	0x40020400
 8001a3c:	40020800 	.word	0x40020800
 8001a40:	40020c00 	.word	0x40020c00
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40013c00 	.word	0x40013c00

08001a4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	460b      	mov	r3, r1
 8001a56:	807b      	strh	r3, [r7, #2]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a5c:	787b      	ldrb	r3, [r7, #1]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a62:	887a      	ldrh	r2, [r7, #2]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a68:	e003      	b.n	8001a72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a6a:	887b      	ldrh	r3, [r7, #2]
 8001a6c:	041a      	lsls	r2, r3, #16
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	619a      	str	r2, [r3, #24]
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
	...

08001a80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e11f      	b.n	8001cd2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d106      	bne.n	8001aac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff fbdc 	bl	8001264 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2224      	movs	r2, #36	; 0x24
 8001ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f022 0201 	bic.w	r2, r2, #1
 8001ac2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ad2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ae2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ae4:	f001 fb90 	bl	8003208 <HAL_RCC_GetPCLK1Freq>
 8001ae8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	4a7b      	ldr	r2, [pc, #492]	; (8001cdc <HAL_I2C_Init+0x25c>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d807      	bhi.n	8001b04 <HAL_I2C_Init+0x84>
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4a7a      	ldr	r2, [pc, #488]	; (8001ce0 <HAL_I2C_Init+0x260>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	bf94      	ite	ls
 8001afc:	2301      	movls	r3, #1
 8001afe:	2300      	movhi	r3, #0
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	e006      	b.n	8001b12 <HAL_I2C_Init+0x92>
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4a77      	ldr	r2, [pc, #476]	; (8001ce4 <HAL_I2C_Init+0x264>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	bf94      	ite	ls
 8001b0c:	2301      	movls	r3, #1
 8001b0e:	2300      	movhi	r3, #0
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e0db      	b.n	8001cd2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	4a72      	ldr	r2, [pc, #456]	; (8001ce8 <HAL_I2C_Init+0x268>)
 8001b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b22:	0c9b      	lsrs	r3, r3, #18
 8001b24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68ba      	ldr	r2, [r7, #8]
 8001b36:	430a      	orrs	r2, r1
 8001b38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	6a1b      	ldr	r3, [r3, #32]
 8001b40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	4a64      	ldr	r2, [pc, #400]	; (8001cdc <HAL_I2C_Init+0x25c>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d802      	bhi.n	8001b54 <HAL_I2C_Init+0xd4>
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	3301      	adds	r3, #1
 8001b52:	e009      	b.n	8001b68 <HAL_I2C_Init+0xe8>
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b5a:	fb02 f303 	mul.w	r3, r2, r3
 8001b5e:	4a63      	ldr	r2, [pc, #396]	; (8001cec <HAL_I2C_Init+0x26c>)
 8001b60:	fba2 2303 	umull	r2, r3, r2, r3
 8001b64:	099b      	lsrs	r3, r3, #6
 8001b66:	3301      	adds	r3, #1
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	6812      	ldr	r2, [r2, #0]
 8001b6c:	430b      	orrs	r3, r1
 8001b6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	4956      	ldr	r1, [pc, #344]	; (8001cdc <HAL_I2C_Init+0x25c>)
 8001b84:	428b      	cmp	r3, r1
 8001b86:	d80d      	bhi.n	8001ba4 <HAL_I2C_Init+0x124>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	1e59      	subs	r1, r3, #1
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b96:	3301      	adds	r3, #1
 8001b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b9c:	2b04      	cmp	r3, #4
 8001b9e:	bf38      	it	cc
 8001ba0:	2304      	movcc	r3, #4
 8001ba2:	e04f      	b.n	8001c44 <HAL_I2C_Init+0x1c4>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d111      	bne.n	8001bd0 <HAL_I2C_Init+0x150>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	1e58      	subs	r0, r3, #1
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6859      	ldr	r1, [r3, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	440b      	add	r3, r1
 8001bba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	bf0c      	ite	eq
 8001bc8:	2301      	moveq	r3, #1
 8001bca:	2300      	movne	r3, #0
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	e012      	b.n	8001bf6 <HAL_I2C_Init+0x176>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	1e58      	subs	r0, r3, #1
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6859      	ldr	r1, [r3, #4]
 8001bd8:	460b      	mov	r3, r1
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	440b      	add	r3, r1
 8001bde:	0099      	lsls	r1, r3, #2
 8001be0:	440b      	add	r3, r1
 8001be2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001be6:	3301      	adds	r3, #1
 8001be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	bf0c      	ite	eq
 8001bf0:	2301      	moveq	r3, #1
 8001bf2:	2300      	movne	r3, #0
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <HAL_I2C_Init+0x17e>
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e022      	b.n	8001c44 <HAL_I2C_Init+0x1c4>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d10e      	bne.n	8001c24 <HAL_I2C_Init+0x1a4>
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	1e58      	subs	r0, r3, #1
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6859      	ldr	r1, [r3, #4]
 8001c0e:	460b      	mov	r3, r1
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	440b      	add	r3, r1
 8001c14:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c18:	3301      	adds	r3, #1
 8001c1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c22:	e00f      	b.n	8001c44 <HAL_I2C_Init+0x1c4>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	1e58      	subs	r0, r3, #1
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6859      	ldr	r1, [r3, #4]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	440b      	add	r3, r1
 8001c32:	0099      	lsls	r1, r3, #2
 8001c34:	440b      	add	r3, r1
 8001c36:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c44:	6879      	ldr	r1, [r7, #4]
 8001c46:	6809      	ldr	r1, [r1, #0]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69da      	ldr	r2, [r3, #28]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	430a      	orrs	r2, r1
 8001c66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	6911      	ldr	r1, [r2, #16]
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	68d2      	ldr	r2, [r2, #12]
 8001c7e:	4311      	orrs	r1, r2
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	6812      	ldr	r2, [r2, #0]
 8001c84:	430b      	orrs	r3, r1
 8001c86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	695a      	ldr	r2, [r3, #20]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f042 0201 	orr.w	r2, r2, #1
 8001cb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2220      	movs	r2, #32
 8001cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	000186a0 	.word	0x000186a0
 8001ce0:	001e847f 	.word	0x001e847f
 8001ce4:	003d08ff 	.word	0x003d08ff
 8001ce8:	431bde83 	.word	0x431bde83
 8001cec:	10624dd3 	.word	0x10624dd3

08001cf0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b088      	sub	sp, #32
 8001cf4:	af02      	add	r7, sp, #8
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	607a      	str	r2, [r7, #4]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	817b      	strh	r3, [r7, #10]
 8001d00:	4613      	mov	r3, r2
 8001d02:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d04:	f7ff fc32 	bl	800156c <HAL_GetTick>
 8001d08:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b20      	cmp	r3, #32
 8001d14:	f040 80e0 	bne.w	8001ed8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	2319      	movs	r3, #25
 8001d1e:	2201      	movs	r2, #1
 8001d20:	4970      	ldr	r1, [pc, #448]	; (8001ee4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f000 fc58 	bl	80025d8 <I2C_WaitOnFlagUntilTimeout>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	e0d3      	b.n	8001eda <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d101      	bne.n	8001d40 <HAL_I2C_Master_Transmit+0x50>
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	e0cc      	b.n	8001eda <HAL_I2C_Master_Transmit+0x1ea>
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d007      	beq.n	8001d66 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f042 0201 	orr.w	r2, r2, #1
 8001d64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d74:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2221      	movs	r2, #33	; 0x21
 8001d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2210      	movs	r2, #16
 8001d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	893a      	ldrh	r2, [r7, #8]
 8001d96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	4a50      	ldr	r2, [pc, #320]	; (8001ee8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001da6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001da8:	8979      	ldrh	r1, [r7, #10]
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	6a3a      	ldr	r2, [r7, #32]
 8001dae:	68f8      	ldr	r0, [r7, #12]
 8001db0:	f000 fac2 	bl	8002338 <I2C_MasterRequestWrite>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e08d      	b.n	8001eda <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	613b      	str	r3, [r7, #16]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	695b      	ldr	r3, [r3, #20]
 8001dc8:	613b      	str	r3, [r7, #16]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	613b      	str	r3, [r7, #16]
 8001dd2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001dd4:	e066      	b.n	8001ea4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	6a39      	ldr	r1, [r7, #32]
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f000 fcd2 	bl	8002784 <I2C_WaitOnTXEFlagUntilTimeout>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00d      	beq.n	8001e02 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	2b04      	cmp	r3, #4
 8001dec:	d107      	bne.n	8001dfe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dfc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e06b      	b.n	8001eda <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e06:	781a      	ldrb	r2, [r3, #0]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e12:	1c5a      	adds	r2, r3, #1
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	695b      	ldr	r3, [r3, #20]
 8001e38:	f003 0304 	and.w	r3, r3, #4
 8001e3c:	2b04      	cmp	r3, #4
 8001e3e:	d11b      	bne.n	8001e78 <HAL_I2C_Master_Transmit+0x188>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d017      	beq.n	8001e78 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4c:	781a      	ldrb	r2, [r3, #0]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e58:	1c5a      	adds	r2, r3, #1
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	3b01      	subs	r3, #1
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e70:	3b01      	subs	r3, #1
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e78:	697a      	ldr	r2, [r7, #20]
 8001e7a:	6a39      	ldr	r1, [r7, #32]
 8001e7c:	68f8      	ldr	r0, [r7, #12]
 8001e7e:	f000 fcc2 	bl	8002806 <I2C_WaitOnBTFFlagUntilTimeout>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00d      	beq.n	8001ea4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8c:	2b04      	cmp	r3, #4
 8001e8e:	d107      	bne.n	8001ea0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e9e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e01a      	b.n	8001eda <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d194      	bne.n	8001dd6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2220      	movs	r2, #32
 8001ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	e000      	b.n	8001eda <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001ed8:	2302      	movs	r3, #2
  }
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	00100002 	.word	0x00100002
 8001ee8:	ffff0000 	.word	0xffff0000

08001eec <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08c      	sub	sp, #48	; 0x30
 8001ef0:	af02      	add	r7, sp, #8
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	607a      	str	r2, [r7, #4]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	460b      	mov	r3, r1
 8001efa:	817b      	strh	r3, [r7, #10]
 8001efc:	4613      	mov	r3, r2
 8001efe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f00:	f7ff fb34 	bl	800156c <HAL_GetTick>
 8001f04:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b20      	cmp	r3, #32
 8001f10:	f040 820b 	bne.w	800232a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	9300      	str	r3, [sp, #0]
 8001f18:	2319      	movs	r3, #25
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	497c      	ldr	r1, [pc, #496]	; (8002110 <HAL_I2C_Master_Receive+0x224>)
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f000 fb5a 	bl	80025d8 <I2C_WaitOnFlagUntilTimeout>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	e1fe      	b.n	800232c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d101      	bne.n	8001f3c <HAL_I2C_Master_Receive+0x50>
 8001f38:	2302      	movs	r3, #2
 8001f3a:	e1f7      	b.n	800232c <HAL_I2C_Master_Receive+0x440>
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d007      	beq.n	8001f62 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f042 0201 	orr.w	r2, r2, #1
 8001f60:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f70:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2222      	movs	r2, #34	; 0x22
 8001f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2210      	movs	r2, #16
 8001f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2200      	movs	r2, #0
 8001f86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	893a      	ldrh	r2, [r7, #8]
 8001f92:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	4a5c      	ldr	r2, [pc, #368]	; (8002114 <HAL_I2C_Master_Receive+0x228>)
 8001fa2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001fa4:	8979      	ldrh	r1, [r7, #10]
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f000 fa46 	bl	800243c <I2C_MasterRequestRead>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e1b8      	b.n	800232c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d113      	bne.n	8001fea <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	623b      	str	r3, [r7, #32]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	695b      	ldr	r3, [r3, #20]
 8001fcc:	623b      	str	r3, [r7, #32]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	623b      	str	r3, [r7, #32]
 8001fd6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	e18c      	b.n	8002304 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d11b      	bne.n	800202a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002000:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002002:	2300      	movs	r3, #0
 8002004:	61fb      	str	r3, [r7, #28]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	695b      	ldr	r3, [r3, #20]
 800200c:	61fb      	str	r3, [r7, #28]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	61fb      	str	r3, [r7, #28]
 8002016:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	e16c      	b.n	8002304 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800202e:	2b02      	cmp	r3, #2
 8002030:	d11b      	bne.n	800206a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002040:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002050:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002052:	2300      	movs	r3, #0
 8002054:	61bb      	str	r3, [r7, #24]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	695b      	ldr	r3, [r3, #20]
 800205c:	61bb      	str	r3, [r7, #24]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	61bb      	str	r3, [r7, #24]
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	e14c      	b.n	8002304 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002078:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800207a:	2300      	movs	r3, #0
 800207c:	617b      	str	r3, [r7, #20]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	617b      	str	r3, [r7, #20]
 800208e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002090:	e138      	b.n	8002304 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002096:	2b03      	cmp	r3, #3
 8002098:	f200 80f1 	bhi.w	800227e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d123      	bne.n	80020ec <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80020a8:	68f8      	ldr	r0, [r7, #12]
 80020aa:	f000 fbed 	bl	8002888 <I2C_WaitOnRXNEFlagUntilTimeout>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e139      	b.n	800232c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	691a      	ldr	r2, [r3, #16]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c2:	b2d2      	uxtb	r2, r2
 80020c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ca:	1c5a      	adds	r2, r3, #1
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d4:	3b01      	subs	r3, #1
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	3b01      	subs	r3, #1
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80020ea:	e10b      	b.n	8002304 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d14e      	bne.n	8002192 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020fa:	2200      	movs	r2, #0
 80020fc:	4906      	ldr	r1, [pc, #24]	; (8002118 <HAL_I2C_Master_Receive+0x22c>)
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f000 fa6a 	bl	80025d8 <I2C_WaitOnFlagUntilTimeout>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d008      	beq.n	800211c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e10e      	b.n	800232c <HAL_I2C_Master_Receive+0x440>
 800210e:	bf00      	nop
 8002110:	00100002 	.word	0x00100002
 8002114:	ffff0000 	.word	0xffff0000
 8002118:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800212a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	691a      	ldr	r2, [r3, #16]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213e:	1c5a      	adds	r2, r3, #1
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002148:	3b01      	subs	r3, #1
 800214a:	b29a      	uxth	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002154:	b29b      	uxth	r3, r3
 8002156:	3b01      	subs	r3, #1
 8002158:	b29a      	uxth	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	691a      	ldr	r2, [r3, #16]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002168:	b2d2      	uxtb	r2, r2
 800216a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	1c5a      	adds	r2, r3, #1
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800217a:	3b01      	subs	r3, #1
 800217c:	b29a      	uxth	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002186:	b29b      	uxth	r3, r3
 8002188:	3b01      	subs	r3, #1
 800218a:	b29a      	uxth	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002190:	e0b8      	b.n	8002304 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002194:	9300      	str	r3, [sp, #0]
 8002196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002198:	2200      	movs	r2, #0
 800219a:	4966      	ldr	r1, [pc, #408]	; (8002334 <HAL_I2C_Master_Receive+0x448>)
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f000 fa1b 	bl	80025d8 <I2C_WaitOnFlagUntilTimeout>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e0bf      	b.n	800232c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	691a      	ldr	r2, [r3, #16]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c6:	b2d2      	uxtb	r2, r2
 80021c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	1c5a      	adds	r2, r3, #1
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d8:	3b01      	subs	r3, #1
 80021da:	b29a      	uxth	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	3b01      	subs	r3, #1
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f4:	2200      	movs	r2, #0
 80021f6:	494f      	ldr	r1, [pc, #316]	; (8002334 <HAL_I2C_Master_Receive+0x448>)
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f000 f9ed 	bl	80025d8 <I2C_WaitOnFlagUntilTimeout>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e091      	b.n	800232c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002216:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	691a      	ldr	r2, [r3, #16]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222a:	1c5a      	adds	r2, r3, #1
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002234:	3b01      	subs	r3, #1
 8002236:	b29a      	uxth	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002240:	b29b      	uxth	r3, r3
 8002242:	3b01      	subs	r3, #1
 8002244:	b29a      	uxth	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	691a      	ldr	r2, [r3, #16]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225c:	1c5a      	adds	r2, r3, #1
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002266:	3b01      	subs	r3, #1
 8002268:	b29a      	uxth	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002272:	b29b      	uxth	r3, r3
 8002274:	3b01      	subs	r3, #1
 8002276:	b29a      	uxth	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800227c:	e042      	b.n	8002304 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800227e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002280:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002282:	68f8      	ldr	r0, [r7, #12]
 8002284:	f000 fb00 	bl	8002888 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e04c      	b.n	800232c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	691a      	ldr	r2, [r3, #16]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229c:	b2d2      	uxtb	r2, r2
 800229e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a4:	1c5a      	adds	r2, r3, #1
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ae:	3b01      	subs	r3, #1
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	3b01      	subs	r3, #1
 80022be:	b29a      	uxth	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	f003 0304 	and.w	r3, r3, #4
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	d118      	bne.n	8002304 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	691a      	ldr	r2, [r3, #16]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022dc:	b2d2      	uxtb	r2, r2
 80022de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e4:	1c5a      	adds	r2, r3, #1
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ee:	3b01      	subs	r3, #1
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	3b01      	subs	r3, #1
 80022fe:	b29a      	uxth	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002308:	2b00      	cmp	r3, #0
 800230a:	f47f aec2 	bne.w	8002092 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2220      	movs	r2, #32
 8002312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002326:	2300      	movs	r3, #0
 8002328:	e000      	b.n	800232c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800232a:	2302      	movs	r3, #2
  }
}
 800232c:	4618      	mov	r0, r3
 800232e:	3728      	adds	r7, #40	; 0x28
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	00010004 	.word	0x00010004

08002338 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b088      	sub	sp, #32
 800233c:	af02      	add	r7, sp, #8
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	607a      	str	r2, [r7, #4]
 8002342:	603b      	str	r3, [r7, #0]
 8002344:	460b      	mov	r3, r1
 8002346:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	2b08      	cmp	r3, #8
 8002352:	d006      	beq.n	8002362 <I2C_MasterRequestWrite+0x2a>
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d003      	beq.n	8002362 <I2C_MasterRequestWrite+0x2a>
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002360:	d108      	bne.n	8002374 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	e00b      	b.n	800238c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002378:	2b12      	cmp	r3, #18
 800237a:	d107      	bne.n	800238c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800238a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f000 f91d 	bl	80025d8 <I2C_WaitOnFlagUntilTimeout>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00d      	beq.n	80023c0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023b2:	d103      	bne.n	80023bc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e035      	b.n	800242c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023c8:	d108      	bne.n	80023dc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023ca:	897b      	ldrh	r3, [r7, #10]
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	461a      	mov	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023d8:	611a      	str	r2, [r3, #16]
 80023da:	e01b      	b.n	8002414 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80023dc:	897b      	ldrh	r3, [r7, #10]
 80023de:	11db      	asrs	r3, r3, #7
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	f003 0306 	and.w	r3, r3, #6
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	f063 030f 	orn	r3, r3, #15
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	490e      	ldr	r1, [pc, #56]	; (8002434 <I2C_MasterRequestWrite+0xfc>)
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f000 f943 	bl	8002686 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e010      	b.n	800242c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800240a:	897b      	ldrh	r3, [r7, #10]
 800240c:	b2da      	uxtb	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	4907      	ldr	r1, [pc, #28]	; (8002438 <I2C_MasterRequestWrite+0x100>)
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 f933 	bl	8002686 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e000      	b.n	800242c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3718      	adds	r7, #24
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	00010008 	.word	0x00010008
 8002438:	00010002 	.word	0x00010002

0800243c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b088      	sub	sp, #32
 8002440:	af02      	add	r7, sp, #8
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	607a      	str	r2, [r7, #4]
 8002446:	603b      	str	r3, [r7, #0]
 8002448:	460b      	mov	r3, r1
 800244a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002450:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002460:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	2b08      	cmp	r3, #8
 8002466:	d006      	beq.n	8002476 <I2C_MasterRequestRead+0x3a>
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d003      	beq.n	8002476 <I2C_MasterRequestRead+0x3a>
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002474:	d108      	bne.n	8002488 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	e00b      	b.n	80024a0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248c:	2b11      	cmp	r3, #17
 800248e:	d107      	bne.n	80024a0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800249e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f000 f893 	bl	80025d8 <I2C_WaitOnFlagUntilTimeout>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00d      	beq.n	80024d4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024c6:	d103      	bne.n	80024d0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e079      	b.n	80025c8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024dc:	d108      	bne.n	80024f0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80024de:	897b      	ldrh	r3, [r7, #10]
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	b2da      	uxtb	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	611a      	str	r2, [r3, #16]
 80024ee:	e05f      	b.n	80025b0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80024f0:	897b      	ldrh	r3, [r7, #10]
 80024f2:	11db      	asrs	r3, r3, #7
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	f003 0306 	and.w	r3, r3, #6
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	f063 030f 	orn	r3, r3, #15
 8002500:	b2da      	uxtb	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	4930      	ldr	r1, [pc, #192]	; (80025d0 <I2C_MasterRequestRead+0x194>)
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f000 f8b9 	bl	8002686 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e054      	b.n	80025c8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800251e:	897b      	ldrh	r3, [r7, #10]
 8002520:	b2da      	uxtb	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	4929      	ldr	r1, [pc, #164]	; (80025d4 <I2C_MasterRequestRead+0x198>)
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f000 f8a9 	bl	8002686 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e044      	b.n	80025c8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800253e:	2300      	movs	r3, #0
 8002540:	613b      	str	r3, [r7, #16]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	695b      	ldr	r3, [r3, #20]
 8002548:	613b      	str	r3, [r7, #16]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	613b      	str	r3, [r7, #16]
 8002552:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002562:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	f000 f831 	bl	80025d8 <I2C_WaitOnFlagUntilTimeout>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00d      	beq.n	8002598 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800258a:	d103      	bne.n	8002594 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002592:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e017      	b.n	80025c8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002598:	897b      	ldrh	r3, [r7, #10]
 800259a:	11db      	asrs	r3, r3, #7
 800259c:	b2db      	uxtb	r3, r3
 800259e:	f003 0306 	and.w	r3, r3, #6
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	f063 030e 	orn	r3, r3, #14
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	4907      	ldr	r1, [pc, #28]	; (80025d4 <I2C_MasterRequestRead+0x198>)
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 f865 	bl	8002686 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e000      	b.n	80025c8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3718      	adds	r7, #24
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	00010008 	.word	0x00010008
 80025d4:	00010002 	.word	0x00010002

080025d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	603b      	str	r3, [r7, #0]
 80025e4:	4613      	mov	r3, r2
 80025e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025e8:	e025      	b.n	8002636 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025f0:	d021      	beq.n	8002636 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025f2:	f7fe ffbb 	bl	800156c <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d302      	bcc.n	8002608 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d116      	bne.n	8002636 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2220      	movs	r2, #32
 8002612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	f043 0220 	orr.w	r2, r3, #32
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e023      	b.n	800267e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	0c1b      	lsrs	r3, r3, #16
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b01      	cmp	r3, #1
 800263e:	d10d      	bne.n	800265c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	43da      	mvns	r2, r3
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	4013      	ands	r3, r2
 800264c:	b29b      	uxth	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	bf0c      	ite	eq
 8002652:	2301      	moveq	r3, #1
 8002654:	2300      	movne	r3, #0
 8002656:	b2db      	uxtb	r3, r3
 8002658:	461a      	mov	r2, r3
 800265a:	e00c      	b.n	8002676 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	43da      	mvns	r2, r3
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	4013      	ands	r3, r2
 8002668:	b29b      	uxth	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	bf0c      	ite	eq
 800266e:	2301      	moveq	r3, #1
 8002670:	2300      	movne	r3, #0
 8002672:	b2db      	uxtb	r3, r3
 8002674:	461a      	mov	r2, r3
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	429a      	cmp	r2, r3
 800267a:	d0b6      	beq.n	80025ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b084      	sub	sp, #16
 800268a:	af00      	add	r7, sp, #0
 800268c:	60f8      	str	r0, [r7, #12]
 800268e:	60b9      	str	r1, [r7, #8]
 8002690:	607a      	str	r2, [r7, #4]
 8002692:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002694:	e051      	b.n	800273a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026a4:	d123      	bne.n	80026ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026b4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026be:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2220      	movs	r2, #32
 80026ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	f043 0204 	orr.w	r2, r3, #4
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e046      	b.n	800277c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026f4:	d021      	beq.n	800273a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026f6:	f7fe ff39 	bl	800156c <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	429a      	cmp	r2, r3
 8002704:	d302      	bcc.n	800270c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d116      	bne.n	800273a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2220      	movs	r2, #32
 8002716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	f043 0220 	orr.w	r2, r3, #32
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e020      	b.n	800277c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	0c1b      	lsrs	r3, r3, #16
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2b01      	cmp	r3, #1
 8002742:	d10c      	bne.n	800275e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	43da      	mvns	r2, r3
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	4013      	ands	r3, r2
 8002750:	b29b      	uxth	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	bf14      	ite	ne
 8002756:	2301      	movne	r3, #1
 8002758:	2300      	moveq	r3, #0
 800275a:	b2db      	uxtb	r3, r3
 800275c:	e00b      	b.n	8002776 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	43da      	mvns	r2, r3
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	4013      	ands	r3, r2
 800276a:	b29b      	uxth	r3, r3
 800276c:	2b00      	cmp	r3, #0
 800276e:	bf14      	ite	ne
 8002770:	2301      	movne	r3, #1
 8002772:	2300      	moveq	r3, #0
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d18d      	bne.n	8002696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002790:	e02d      	b.n	80027ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f000 f8ce 	bl	8002934 <I2C_IsAcknowledgeFailed>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e02d      	b.n	80027fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027a8:	d021      	beq.n	80027ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027aa:	f7fe fedf 	bl	800156c <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d302      	bcc.n	80027c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d116      	bne.n	80027ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2220      	movs	r2, #32
 80027ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	f043 0220 	orr.w	r2, r3, #32
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e007      	b.n	80027fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f8:	2b80      	cmp	r3, #128	; 0x80
 80027fa:	d1ca      	bne.n	8002792 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b084      	sub	sp, #16
 800280a:	af00      	add	r7, sp, #0
 800280c:	60f8      	str	r0, [r7, #12]
 800280e:	60b9      	str	r1, [r7, #8]
 8002810:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002812:	e02d      	b.n	8002870 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f000 f88d 	bl	8002934 <I2C_IsAcknowledgeFailed>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e02d      	b.n	8002880 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800282a:	d021      	beq.n	8002870 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800282c:	f7fe fe9e 	bl	800156c <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	429a      	cmp	r2, r3
 800283a:	d302      	bcc.n	8002842 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d116      	bne.n	8002870 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2220      	movs	r2, #32
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285c:	f043 0220 	orr.w	r2, r3, #32
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e007      	b.n	8002880 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	f003 0304 	and.w	r3, r3, #4
 800287a:	2b04      	cmp	r3, #4
 800287c:	d1ca      	bne.n	8002814 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002894:	e042      	b.n	800291c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	f003 0310 	and.w	r3, r3, #16
 80028a0:	2b10      	cmp	r3, #16
 80028a2:	d119      	bne.n	80028d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f06f 0210 	mvn.w	r2, #16
 80028ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2220      	movs	r2, #32
 80028b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e029      	b.n	800292c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028d8:	f7fe fe48 	bl	800156c <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	68ba      	ldr	r2, [r7, #8]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d302      	bcc.n	80028ee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d116      	bne.n	800291c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2220      	movs	r2, #32
 80028f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	f043 0220 	orr.w	r2, r3, #32
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e007      	b.n	800292c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002926:	2b40      	cmp	r3, #64	; 0x40
 8002928:	d1b5      	bne.n	8002896 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3710      	adds	r7, #16
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002946:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800294a:	d11b      	bne.n	8002984 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002954:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2220      	movs	r2, #32
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	f043 0204 	orr.w	r2, r3, #4
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e000      	b.n	8002986 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
	...

08002994 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e25b      	b.n	8002e5e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d075      	beq.n	8002a9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029b2:	4ba3      	ldr	r3, [pc, #652]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f003 030c 	and.w	r3, r3, #12
 80029ba:	2b04      	cmp	r3, #4
 80029bc:	d00c      	beq.n	80029d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029be:	4ba0      	ldr	r3, [pc, #640]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029c6:	2b08      	cmp	r3, #8
 80029c8:	d112      	bne.n	80029f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ca:	4b9d      	ldr	r3, [pc, #628]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029d6:	d10b      	bne.n	80029f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029d8:	4b99      	ldr	r3, [pc, #612]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d05b      	beq.n	8002a9c <HAL_RCC_OscConfig+0x108>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d157      	bne.n	8002a9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e236      	b.n	8002e5e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029f8:	d106      	bne.n	8002a08 <HAL_RCC_OscConfig+0x74>
 80029fa:	4b91      	ldr	r3, [pc, #580]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a90      	ldr	r2, [pc, #576]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	e01d      	b.n	8002a44 <HAL_RCC_OscConfig+0xb0>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a10:	d10c      	bne.n	8002a2c <HAL_RCC_OscConfig+0x98>
 8002a12:	4b8b      	ldr	r3, [pc, #556]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a8a      	ldr	r2, [pc, #552]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002a18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a1c:	6013      	str	r3, [r2, #0]
 8002a1e:	4b88      	ldr	r3, [pc, #544]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a87      	ldr	r2, [pc, #540]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a28:	6013      	str	r3, [r2, #0]
 8002a2a:	e00b      	b.n	8002a44 <HAL_RCC_OscConfig+0xb0>
 8002a2c:	4b84      	ldr	r3, [pc, #528]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a83      	ldr	r2, [pc, #524]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a36:	6013      	str	r3, [r2, #0]
 8002a38:	4b81      	ldr	r3, [pc, #516]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a80      	ldr	r2, [pc, #512]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002a3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d013      	beq.n	8002a74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4c:	f7fe fd8e 	bl	800156c <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a54:	f7fe fd8a 	bl	800156c <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b64      	cmp	r3, #100	; 0x64
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e1fb      	b.n	8002e5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a66:	4b76      	ldr	r3, [pc, #472]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d0f0      	beq.n	8002a54 <HAL_RCC_OscConfig+0xc0>
 8002a72:	e014      	b.n	8002a9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a74:	f7fe fd7a 	bl	800156c <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a7c:	f7fe fd76 	bl	800156c <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b64      	cmp	r3, #100	; 0x64
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e1e7      	b.n	8002e5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a8e:	4b6c      	ldr	r3, [pc, #432]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1f0      	bne.n	8002a7c <HAL_RCC_OscConfig+0xe8>
 8002a9a:	e000      	b.n	8002a9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d063      	beq.n	8002b72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002aaa:	4b65      	ldr	r3, [pc, #404]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 030c 	and.w	r3, r3, #12
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00b      	beq.n	8002ace <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ab6:	4b62      	ldr	r3, [pc, #392]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002abe:	2b08      	cmp	r3, #8
 8002ac0:	d11c      	bne.n	8002afc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ac2:	4b5f      	ldr	r3, [pc, #380]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d116      	bne.n	8002afc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ace:	4b5c      	ldr	r3, [pc, #368]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d005      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x152>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d001      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e1bb      	b.n	8002e5e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae6:	4b56      	ldr	r3, [pc, #344]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	4952      	ldr	r1, [pc, #328]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002afa:	e03a      	b.n	8002b72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d020      	beq.n	8002b46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b04:	4b4f      	ldr	r3, [pc, #316]	; (8002c44 <HAL_RCC_OscConfig+0x2b0>)
 8002b06:	2201      	movs	r2, #1
 8002b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b0a:	f7fe fd2f 	bl	800156c <HAL_GetTick>
 8002b0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b10:	e008      	b.n	8002b24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b12:	f7fe fd2b 	bl	800156c <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e19c      	b.n	8002e5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b24:	4b46      	ldr	r3, [pc, #280]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d0f0      	beq.n	8002b12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b30:	4b43      	ldr	r3, [pc, #268]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	4940      	ldr	r1, [pc, #256]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	600b      	str	r3, [r1, #0]
 8002b44:	e015      	b.n	8002b72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b46:	4b3f      	ldr	r3, [pc, #252]	; (8002c44 <HAL_RCC_OscConfig+0x2b0>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4c:	f7fe fd0e 	bl	800156c <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b54:	f7fe fd0a 	bl	800156c <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e17b      	b.n	8002e5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b66:	4b36      	ldr	r3, [pc, #216]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1f0      	bne.n	8002b54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0308 	and.w	r3, r3, #8
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d030      	beq.n	8002be0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d016      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b86:	4b30      	ldr	r3, [pc, #192]	; (8002c48 <HAL_RCC_OscConfig+0x2b4>)
 8002b88:	2201      	movs	r2, #1
 8002b8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b8c:	f7fe fcee 	bl	800156c <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b94:	f7fe fcea 	bl	800156c <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e15b      	b.n	8002e5e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ba6:	4b26      	ldr	r3, [pc, #152]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0f0      	beq.n	8002b94 <HAL_RCC_OscConfig+0x200>
 8002bb2:	e015      	b.n	8002be0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bb4:	4b24      	ldr	r3, [pc, #144]	; (8002c48 <HAL_RCC_OscConfig+0x2b4>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bba:	f7fe fcd7 	bl	800156c <HAL_GetTick>
 8002bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bc0:	e008      	b.n	8002bd4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bc2:	f7fe fcd3 	bl	800156c <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e144      	b.n	8002e5e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd4:	4b1a      	ldr	r3, [pc, #104]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002bd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1f0      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f000 80a0 	beq.w	8002d2e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bf2:	4b13      	ldr	r3, [pc, #76]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10f      	bne.n	8002c1e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60bb      	str	r3, [r7, #8]
 8002c02:	4b0f      	ldr	r3, [pc, #60]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	4a0e      	ldr	r2, [pc, #56]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c0e:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c16:	60bb      	str	r3, [r7, #8]
 8002c18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c1e:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <HAL_RCC_OscConfig+0x2b8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d121      	bne.n	8002c6e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c2a:	4b08      	ldr	r3, [pc, #32]	; (8002c4c <HAL_RCC_OscConfig+0x2b8>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a07      	ldr	r2, [pc, #28]	; (8002c4c <HAL_RCC_OscConfig+0x2b8>)
 8002c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c36:	f7fe fc99 	bl	800156c <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3c:	e011      	b.n	8002c62 <HAL_RCC_OscConfig+0x2ce>
 8002c3e:	bf00      	nop
 8002c40:	40023800 	.word	0x40023800
 8002c44:	42470000 	.word	0x42470000
 8002c48:	42470e80 	.word	0x42470e80
 8002c4c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c50:	f7fe fc8c 	bl	800156c <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e0fd      	b.n	8002e5e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c62:	4b81      	ldr	r3, [pc, #516]	; (8002e68 <HAL_RCC_OscConfig+0x4d4>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f0      	beq.n	8002c50 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d106      	bne.n	8002c84 <HAL_RCC_OscConfig+0x2f0>
 8002c76:	4b7d      	ldr	r3, [pc, #500]	; (8002e6c <HAL_RCC_OscConfig+0x4d8>)
 8002c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7a:	4a7c      	ldr	r2, [pc, #496]	; (8002e6c <HAL_RCC_OscConfig+0x4d8>)
 8002c7c:	f043 0301 	orr.w	r3, r3, #1
 8002c80:	6713      	str	r3, [r2, #112]	; 0x70
 8002c82:	e01c      	b.n	8002cbe <HAL_RCC_OscConfig+0x32a>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	2b05      	cmp	r3, #5
 8002c8a:	d10c      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x312>
 8002c8c:	4b77      	ldr	r3, [pc, #476]	; (8002e6c <HAL_RCC_OscConfig+0x4d8>)
 8002c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c90:	4a76      	ldr	r2, [pc, #472]	; (8002e6c <HAL_RCC_OscConfig+0x4d8>)
 8002c92:	f043 0304 	orr.w	r3, r3, #4
 8002c96:	6713      	str	r3, [r2, #112]	; 0x70
 8002c98:	4b74      	ldr	r3, [pc, #464]	; (8002e6c <HAL_RCC_OscConfig+0x4d8>)
 8002c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9c:	4a73      	ldr	r2, [pc, #460]	; (8002e6c <HAL_RCC_OscConfig+0x4d8>)
 8002c9e:	f043 0301 	orr.w	r3, r3, #1
 8002ca2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ca4:	e00b      	b.n	8002cbe <HAL_RCC_OscConfig+0x32a>
 8002ca6:	4b71      	ldr	r3, [pc, #452]	; (8002e6c <HAL_RCC_OscConfig+0x4d8>)
 8002ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002caa:	4a70      	ldr	r2, [pc, #448]	; (8002e6c <HAL_RCC_OscConfig+0x4d8>)
 8002cac:	f023 0301 	bic.w	r3, r3, #1
 8002cb0:	6713      	str	r3, [r2, #112]	; 0x70
 8002cb2:	4b6e      	ldr	r3, [pc, #440]	; (8002e6c <HAL_RCC_OscConfig+0x4d8>)
 8002cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb6:	4a6d      	ldr	r2, [pc, #436]	; (8002e6c <HAL_RCC_OscConfig+0x4d8>)
 8002cb8:	f023 0304 	bic.w	r3, r3, #4
 8002cbc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d015      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc6:	f7fe fc51 	bl	800156c <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ccc:	e00a      	b.n	8002ce4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cce:	f7fe fc4d 	bl	800156c <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e0bc      	b.n	8002e5e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ce4:	4b61      	ldr	r3, [pc, #388]	; (8002e6c <HAL_RCC_OscConfig+0x4d8>)
 8002ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d0ee      	beq.n	8002cce <HAL_RCC_OscConfig+0x33a>
 8002cf0:	e014      	b.n	8002d1c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cf2:	f7fe fc3b 	bl	800156c <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cf8:	e00a      	b.n	8002d10 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cfa:	f7fe fc37 	bl	800156c <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e0a6      	b.n	8002e5e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d10:	4b56      	ldr	r3, [pc, #344]	; (8002e6c <HAL_RCC_OscConfig+0x4d8>)
 8002d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1ee      	bne.n	8002cfa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d1c:	7dfb      	ldrb	r3, [r7, #23]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d105      	bne.n	8002d2e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d22:	4b52      	ldr	r3, [pc, #328]	; (8002e6c <HAL_RCC_OscConfig+0x4d8>)
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	4a51      	ldr	r2, [pc, #324]	; (8002e6c <HAL_RCC_OscConfig+0x4d8>)
 8002d28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d2c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f000 8092 	beq.w	8002e5c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d38:	4b4c      	ldr	r3, [pc, #304]	; (8002e6c <HAL_RCC_OscConfig+0x4d8>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f003 030c 	and.w	r3, r3, #12
 8002d40:	2b08      	cmp	r3, #8
 8002d42:	d05c      	beq.n	8002dfe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d141      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d4c:	4b48      	ldr	r3, [pc, #288]	; (8002e70 <HAL_RCC_OscConfig+0x4dc>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d52:	f7fe fc0b 	bl	800156c <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d58:	e008      	b.n	8002d6c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d5a:	f7fe fc07 	bl	800156c <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e078      	b.n	8002e5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d6c:	4b3f      	ldr	r3, [pc, #252]	; (8002e6c <HAL_RCC_OscConfig+0x4d8>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1f0      	bne.n	8002d5a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	69da      	ldr	r2, [r3, #28]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	431a      	orrs	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d86:	019b      	lsls	r3, r3, #6
 8002d88:	431a      	orrs	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8e:	085b      	lsrs	r3, r3, #1
 8002d90:	3b01      	subs	r3, #1
 8002d92:	041b      	lsls	r3, r3, #16
 8002d94:	431a      	orrs	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9a:	061b      	lsls	r3, r3, #24
 8002d9c:	4933      	ldr	r1, [pc, #204]	; (8002e6c <HAL_RCC_OscConfig+0x4d8>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002da2:	4b33      	ldr	r3, [pc, #204]	; (8002e70 <HAL_RCC_OscConfig+0x4dc>)
 8002da4:	2201      	movs	r2, #1
 8002da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da8:	f7fe fbe0 	bl	800156c <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002db0:	f7fe fbdc 	bl	800156c <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e04d      	b.n	8002e5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dc2:	4b2a      	ldr	r3, [pc, #168]	; (8002e6c <HAL_RCC_OscConfig+0x4d8>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0f0      	beq.n	8002db0 <HAL_RCC_OscConfig+0x41c>
 8002dce:	e045      	b.n	8002e5c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dd0:	4b27      	ldr	r3, [pc, #156]	; (8002e70 <HAL_RCC_OscConfig+0x4dc>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd6:	f7fe fbc9 	bl	800156c <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ddc:	e008      	b.n	8002df0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dde:	f7fe fbc5 	bl	800156c <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e036      	b.n	8002e5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002df0:	4b1e      	ldr	r3, [pc, #120]	; (8002e6c <HAL_RCC_OscConfig+0x4d8>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1f0      	bne.n	8002dde <HAL_RCC_OscConfig+0x44a>
 8002dfc:	e02e      	b.n	8002e5c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d101      	bne.n	8002e0a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e029      	b.n	8002e5e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e0a:	4b18      	ldr	r3, [pc, #96]	; (8002e6c <HAL_RCC_OscConfig+0x4d8>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d11c      	bne.n	8002e58 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d115      	bne.n	8002e58 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e32:	4013      	ands	r3, r2
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d10d      	bne.n	8002e58 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d106      	bne.n	8002e58 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d001      	beq.n	8002e5c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e000      	b.n	8002e5e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3718      	adds	r7, #24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	40007000 	.word	0x40007000
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	42470060 	.word	0x42470060

08002e74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e0cc      	b.n	8003022 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e88:	4b68      	ldr	r3, [pc, #416]	; (800302c <HAL_RCC_ClockConfig+0x1b8>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 030f 	and.w	r3, r3, #15
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d90c      	bls.n	8002eb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e96:	4b65      	ldr	r3, [pc, #404]	; (800302c <HAL_RCC_ClockConfig+0x1b8>)
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9e:	4b63      	ldr	r3, [pc, #396]	; (800302c <HAL_RCC_ClockConfig+0x1b8>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 030f 	and.w	r3, r3, #15
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d001      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e0b8      	b.n	8003022 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d020      	beq.n	8002efe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0304 	and.w	r3, r3, #4
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d005      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ec8:	4b59      	ldr	r3, [pc, #356]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	4a58      	ldr	r2, [pc, #352]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002ece:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ed2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0308 	and.w	r3, r3, #8
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d005      	beq.n	8002eec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ee0:	4b53      	ldr	r3, [pc, #332]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	4a52      	ldr	r2, [pc, #328]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002eea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eec:	4b50      	ldr	r3, [pc, #320]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	494d      	ldr	r1, [pc, #308]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d044      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d107      	bne.n	8002f22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f12:	4b47      	ldr	r3, [pc, #284]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d119      	bne.n	8002f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e07f      	b.n	8003022 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d003      	beq.n	8002f32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f2e:	2b03      	cmp	r3, #3
 8002f30:	d107      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f32:	4b3f      	ldr	r3, [pc, #252]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d109      	bne.n	8002f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e06f      	b.n	8003022 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f42:	4b3b      	ldr	r3, [pc, #236]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e067      	b.n	8003022 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f52:	4b37      	ldr	r3, [pc, #220]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f023 0203 	bic.w	r2, r3, #3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	4934      	ldr	r1, [pc, #208]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f64:	f7fe fb02 	bl	800156c <HAL_GetTick>
 8002f68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f6a:	e00a      	b.n	8002f82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f6c:	f7fe fafe 	bl	800156c <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e04f      	b.n	8003022 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f82:	4b2b      	ldr	r3, [pc, #172]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 020c 	and.w	r2, r3, #12
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d1eb      	bne.n	8002f6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f94:	4b25      	ldr	r3, [pc, #148]	; (800302c <HAL_RCC_ClockConfig+0x1b8>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 030f 	and.w	r3, r3, #15
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d20c      	bcs.n	8002fbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fa2:	4b22      	ldr	r3, [pc, #136]	; (800302c <HAL_RCC_ClockConfig+0x1b8>)
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	b2d2      	uxtb	r2, r2
 8002fa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002faa:	4b20      	ldr	r3, [pc, #128]	; (800302c <HAL_RCC_ClockConfig+0x1b8>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d001      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e032      	b.n	8003022 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0304 	and.w	r3, r3, #4
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d008      	beq.n	8002fda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fc8:	4b19      	ldr	r3, [pc, #100]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	4916      	ldr	r1, [pc, #88]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0308 	and.w	r3, r3, #8
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d009      	beq.n	8002ffa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fe6:	4b12      	ldr	r3, [pc, #72]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	490e      	ldr	r1, [pc, #56]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ffa:	f000 f821 	bl	8003040 <HAL_RCC_GetSysClockFreq>
 8002ffe:	4601      	mov	r1, r0
 8003000:	4b0b      	ldr	r3, [pc, #44]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	091b      	lsrs	r3, r3, #4
 8003006:	f003 030f 	and.w	r3, r3, #15
 800300a:	4a0a      	ldr	r2, [pc, #40]	; (8003034 <HAL_RCC_ClockConfig+0x1c0>)
 800300c:	5cd3      	ldrb	r3, [r2, r3]
 800300e:	fa21 f303 	lsr.w	r3, r1, r3
 8003012:	4a09      	ldr	r2, [pc, #36]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8003014:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003016:	4b09      	ldr	r3, [pc, #36]	; (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4618      	mov	r0, r3
 800301c:	f7fe f9b2 	bl	8001384 <HAL_InitTick>

  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40023c00 	.word	0x40023c00
 8003030:	40023800 	.word	0x40023800
 8003034:	08004748 	.word	0x08004748
 8003038:	20000000 	.word	0x20000000
 800303c:	20000004 	.word	0x20000004

08003040 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003046:	2300      	movs	r3, #0
 8003048:	607b      	str	r3, [r7, #4]
 800304a:	2300      	movs	r3, #0
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	2300      	movs	r3, #0
 8003050:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003052:	2300      	movs	r3, #0
 8003054:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003056:	4b63      	ldr	r3, [pc, #396]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 030c 	and.w	r3, r3, #12
 800305e:	2b04      	cmp	r3, #4
 8003060:	d007      	beq.n	8003072 <HAL_RCC_GetSysClockFreq+0x32>
 8003062:	2b08      	cmp	r3, #8
 8003064:	d008      	beq.n	8003078 <HAL_RCC_GetSysClockFreq+0x38>
 8003066:	2b00      	cmp	r3, #0
 8003068:	f040 80b4 	bne.w	80031d4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800306c:	4b5e      	ldr	r3, [pc, #376]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800306e:	60bb      	str	r3, [r7, #8]
       break;
 8003070:	e0b3      	b.n	80031da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003072:	4b5e      	ldr	r3, [pc, #376]	; (80031ec <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003074:	60bb      	str	r3, [r7, #8]
      break;
 8003076:	e0b0      	b.n	80031da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003078:	4b5a      	ldr	r3, [pc, #360]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003080:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003082:	4b58      	ldr	r3, [pc, #352]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d04a      	beq.n	8003124 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800308e:	4b55      	ldr	r3, [pc, #340]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	099b      	lsrs	r3, r3, #6
 8003094:	f04f 0400 	mov.w	r4, #0
 8003098:	f240 11ff 	movw	r1, #511	; 0x1ff
 800309c:	f04f 0200 	mov.w	r2, #0
 80030a0:	ea03 0501 	and.w	r5, r3, r1
 80030a4:	ea04 0602 	and.w	r6, r4, r2
 80030a8:	4629      	mov	r1, r5
 80030aa:	4632      	mov	r2, r6
 80030ac:	f04f 0300 	mov.w	r3, #0
 80030b0:	f04f 0400 	mov.w	r4, #0
 80030b4:	0154      	lsls	r4, r2, #5
 80030b6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80030ba:	014b      	lsls	r3, r1, #5
 80030bc:	4619      	mov	r1, r3
 80030be:	4622      	mov	r2, r4
 80030c0:	1b49      	subs	r1, r1, r5
 80030c2:	eb62 0206 	sbc.w	r2, r2, r6
 80030c6:	f04f 0300 	mov.w	r3, #0
 80030ca:	f04f 0400 	mov.w	r4, #0
 80030ce:	0194      	lsls	r4, r2, #6
 80030d0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80030d4:	018b      	lsls	r3, r1, #6
 80030d6:	1a5b      	subs	r3, r3, r1
 80030d8:	eb64 0402 	sbc.w	r4, r4, r2
 80030dc:	f04f 0100 	mov.w	r1, #0
 80030e0:	f04f 0200 	mov.w	r2, #0
 80030e4:	00e2      	lsls	r2, r4, #3
 80030e6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80030ea:	00d9      	lsls	r1, r3, #3
 80030ec:	460b      	mov	r3, r1
 80030ee:	4614      	mov	r4, r2
 80030f0:	195b      	adds	r3, r3, r5
 80030f2:	eb44 0406 	adc.w	r4, r4, r6
 80030f6:	f04f 0100 	mov.w	r1, #0
 80030fa:	f04f 0200 	mov.w	r2, #0
 80030fe:	0262      	lsls	r2, r4, #9
 8003100:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003104:	0259      	lsls	r1, r3, #9
 8003106:	460b      	mov	r3, r1
 8003108:	4614      	mov	r4, r2
 800310a:	4618      	mov	r0, r3
 800310c:	4621      	mov	r1, r4
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f04f 0400 	mov.w	r4, #0
 8003114:	461a      	mov	r2, r3
 8003116:	4623      	mov	r3, r4
 8003118:	f7fd fc30 	bl	800097c <__aeabi_uldivmod>
 800311c:	4603      	mov	r3, r0
 800311e:	460c      	mov	r4, r1
 8003120:	60fb      	str	r3, [r7, #12]
 8003122:	e049      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003124:	4b2f      	ldr	r3, [pc, #188]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	099b      	lsrs	r3, r3, #6
 800312a:	f04f 0400 	mov.w	r4, #0
 800312e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003132:	f04f 0200 	mov.w	r2, #0
 8003136:	ea03 0501 	and.w	r5, r3, r1
 800313a:	ea04 0602 	and.w	r6, r4, r2
 800313e:	4629      	mov	r1, r5
 8003140:	4632      	mov	r2, r6
 8003142:	f04f 0300 	mov.w	r3, #0
 8003146:	f04f 0400 	mov.w	r4, #0
 800314a:	0154      	lsls	r4, r2, #5
 800314c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003150:	014b      	lsls	r3, r1, #5
 8003152:	4619      	mov	r1, r3
 8003154:	4622      	mov	r2, r4
 8003156:	1b49      	subs	r1, r1, r5
 8003158:	eb62 0206 	sbc.w	r2, r2, r6
 800315c:	f04f 0300 	mov.w	r3, #0
 8003160:	f04f 0400 	mov.w	r4, #0
 8003164:	0194      	lsls	r4, r2, #6
 8003166:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800316a:	018b      	lsls	r3, r1, #6
 800316c:	1a5b      	subs	r3, r3, r1
 800316e:	eb64 0402 	sbc.w	r4, r4, r2
 8003172:	f04f 0100 	mov.w	r1, #0
 8003176:	f04f 0200 	mov.w	r2, #0
 800317a:	00e2      	lsls	r2, r4, #3
 800317c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003180:	00d9      	lsls	r1, r3, #3
 8003182:	460b      	mov	r3, r1
 8003184:	4614      	mov	r4, r2
 8003186:	195b      	adds	r3, r3, r5
 8003188:	eb44 0406 	adc.w	r4, r4, r6
 800318c:	f04f 0100 	mov.w	r1, #0
 8003190:	f04f 0200 	mov.w	r2, #0
 8003194:	02a2      	lsls	r2, r4, #10
 8003196:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800319a:	0299      	lsls	r1, r3, #10
 800319c:	460b      	mov	r3, r1
 800319e:	4614      	mov	r4, r2
 80031a0:	4618      	mov	r0, r3
 80031a2:	4621      	mov	r1, r4
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f04f 0400 	mov.w	r4, #0
 80031aa:	461a      	mov	r2, r3
 80031ac:	4623      	mov	r3, r4
 80031ae:	f7fd fbe5 	bl	800097c <__aeabi_uldivmod>
 80031b2:	4603      	mov	r3, r0
 80031b4:	460c      	mov	r4, r1
 80031b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031b8:	4b0a      	ldr	r3, [pc, #40]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	0c1b      	lsrs	r3, r3, #16
 80031be:	f003 0303 	and.w	r3, r3, #3
 80031c2:	3301      	adds	r3, #1
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d0:	60bb      	str	r3, [r7, #8]
      break;
 80031d2:	e002      	b.n	80031da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031d4:	4b04      	ldr	r3, [pc, #16]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80031d6:	60bb      	str	r3, [r7, #8]
      break;
 80031d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031da:	68bb      	ldr	r3, [r7, #8]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031e4:	40023800 	.word	0x40023800
 80031e8:	00f42400 	.word	0x00f42400
 80031ec:	007a1200 	.word	0x007a1200

080031f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031f4:	4b03      	ldr	r3, [pc, #12]	; (8003204 <HAL_RCC_GetHCLKFreq+0x14>)
 80031f6:	681b      	ldr	r3, [r3, #0]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	20000000 	.word	0x20000000

08003208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800320c:	f7ff fff0 	bl	80031f0 <HAL_RCC_GetHCLKFreq>
 8003210:	4601      	mov	r1, r0
 8003212:	4b05      	ldr	r3, [pc, #20]	; (8003228 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	0a9b      	lsrs	r3, r3, #10
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	4a03      	ldr	r2, [pc, #12]	; (800322c <HAL_RCC_GetPCLK1Freq+0x24>)
 800321e:	5cd3      	ldrb	r3, [r2, r3]
 8003220:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003224:	4618      	mov	r0, r3
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40023800 	.word	0x40023800
 800322c:	08004758 	.word	0x08004758

08003230 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003234:	f7ff ffdc 	bl	80031f0 <HAL_RCC_GetHCLKFreq>
 8003238:	4601      	mov	r1, r0
 800323a:	4b05      	ldr	r3, [pc, #20]	; (8003250 <HAL_RCC_GetPCLK2Freq+0x20>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	0b5b      	lsrs	r3, r3, #13
 8003240:	f003 0307 	and.w	r3, r3, #7
 8003244:	4a03      	ldr	r2, [pc, #12]	; (8003254 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003246:	5cd3      	ldrb	r3, [r2, r3]
 8003248:	fa21 f303 	lsr.w	r3, r1, r3
}
 800324c:	4618      	mov	r0, r3
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40023800 	.word	0x40023800
 8003254:	08004758 	.word	0x08004758

08003258 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	220f      	movs	r2, #15
 8003266:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003268:	4b12      	ldr	r3, [pc, #72]	; (80032b4 <HAL_RCC_GetClockConfig+0x5c>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 0203 	and.w	r2, r3, #3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003274:	4b0f      	ldr	r3, [pc, #60]	; (80032b4 <HAL_RCC_GetClockConfig+0x5c>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003280:	4b0c      	ldr	r3, [pc, #48]	; (80032b4 <HAL_RCC_GetClockConfig+0x5c>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800328c:	4b09      	ldr	r3, [pc, #36]	; (80032b4 <HAL_RCC_GetClockConfig+0x5c>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	08db      	lsrs	r3, r3, #3
 8003292:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800329a:	4b07      	ldr	r3, [pc, #28]	; (80032b8 <HAL_RCC_GetClockConfig+0x60>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 020f 	and.w	r2, r3, #15
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	601a      	str	r2, [r3, #0]
}
 80032a6:	bf00      	nop
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	40023800 	.word	0x40023800
 80032b8:	40023c00 	.word	0x40023c00

080032bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e01d      	b.n	800330a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d106      	bne.n	80032e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f815 	bl	8003312 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2202      	movs	r2, #2
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	3304      	adds	r3, #4
 80032f8:	4619      	mov	r1, r3
 80032fa:	4610      	mov	r0, r2
 80032fc:	f000 f968 	bl	80035d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003312:	b480      	push	{r7}
 8003314:	b083      	sub	sp, #12
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800331a:	bf00      	nop
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr

08003326 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003326:	b480      	push	{r7}
 8003328:	b085      	sub	sp, #20
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68da      	ldr	r2, [r3, #12]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f042 0201 	orr.w	r2, r2, #1
 800333c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f003 0307 	and.w	r3, r3, #7
 8003348:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2b06      	cmp	r3, #6
 800334e:	d007      	beq.n	8003360 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f042 0201 	orr.w	r2, r2, #1
 800335e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b082      	sub	sp, #8
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b02      	cmp	r3, #2
 8003382:	d122      	bne.n	80033ca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b02      	cmp	r3, #2
 8003390:	d11b      	bne.n	80033ca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f06f 0202 	mvn.w	r2, #2
 800339a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	f003 0303 	and.w	r3, r3, #3
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 f8ee 	bl	8003592 <HAL_TIM_IC_CaptureCallback>
 80033b6:	e005      	b.n	80033c4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 f8e0 	bl	800357e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f8f1 	bl	80035a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b04      	cmp	r3, #4
 80033d6:	d122      	bne.n	800341e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	f003 0304 	and.w	r3, r3, #4
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	d11b      	bne.n	800341e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f06f 0204 	mvn.w	r2, #4
 80033ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2202      	movs	r2, #2
 80033f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003400:	2b00      	cmp	r3, #0
 8003402:	d003      	beq.n	800340c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 f8c4 	bl	8003592 <HAL_TIM_IC_CaptureCallback>
 800340a:	e005      	b.n	8003418 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 f8b6 	bl	800357e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f8c7 	bl	80035a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	f003 0308 	and.w	r3, r3, #8
 8003428:	2b08      	cmp	r3, #8
 800342a:	d122      	bne.n	8003472 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	f003 0308 	and.w	r3, r3, #8
 8003436:	2b08      	cmp	r3, #8
 8003438:	d11b      	bne.n	8003472 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f06f 0208 	mvn.w	r2, #8
 8003442:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2204      	movs	r2, #4
 8003448:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	69db      	ldr	r3, [r3, #28]
 8003450:	f003 0303 	and.w	r3, r3, #3
 8003454:	2b00      	cmp	r3, #0
 8003456:	d003      	beq.n	8003460 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 f89a 	bl	8003592 <HAL_TIM_IC_CaptureCallback>
 800345e:	e005      	b.n	800346c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 f88c 	bl	800357e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f89d 	bl	80035a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	f003 0310 	and.w	r3, r3, #16
 800347c:	2b10      	cmp	r3, #16
 800347e:	d122      	bne.n	80034c6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	f003 0310 	and.w	r3, r3, #16
 800348a:	2b10      	cmp	r3, #16
 800348c:	d11b      	bne.n	80034c6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f06f 0210 	mvn.w	r2, #16
 8003496:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2208      	movs	r2, #8
 800349c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	69db      	ldr	r3, [r3, #28]
 80034a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d003      	beq.n	80034b4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 f870 	bl	8003592 <HAL_TIM_IC_CaptureCallback>
 80034b2:	e005      	b.n	80034c0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 f862 	bl	800357e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f873 	bl	80035a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d10e      	bne.n	80034f2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d107      	bne.n	80034f2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f06f 0201 	mvn.w	r2, #1
 80034ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f7fd fe45 	bl	800117c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fc:	2b80      	cmp	r3, #128	; 0x80
 80034fe:	d10e      	bne.n	800351e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800350a:	2b80      	cmp	r3, #128	; 0x80
 800350c:	d107      	bne.n	800351e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003516:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 f8e3 	bl	80036e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003528:	2b40      	cmp	r3, #64	; 0x40
 800352a:	d10e      	bne.n	800354a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003536:	2b40      	cmp	r3, #64	; 0x40
 8003538:	d107      	bne.n	800354a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003542:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 f838 	bl	80035ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	f003 0320 	and.w	r3, r3, #32
 8003554:	2b20      	cmp	r3, #32
 8003556:	d10e      	bne.n	8003576 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	f003 0320 	and.w	r3, r3, #32
 8003562:	2b20      	cmp	r3, #32
 8003564:	d107      	bne.n	8003576 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f06f 0220 	mvn.w	r2, #32
 800356e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 f8ad 	bl	80036d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003576:	bf00      	nop
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800357e:	b480      	push	{r7}
 8003580:	b083      	sub	sp, #12
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003586:	bf00      	nop
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr

08003592 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003592:	b480      	push	{r7}
 8003594:	b083      	sub	sp, #12
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800359a:	bf00      	nop
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr

080035a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035a6:	b480      	push	{r7}
 80035a8:	b083      	sub	sp, #12
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035ae:	bf00      	nop
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035c2:	bf00      	nop
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
	...

080035d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a34      	ldr	r2, [pc, #208]	; (80036b4 <TIM_Base_SetConfig+0xe4>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d00f      	beq.n	8003608 <TIM_Base_SetConfig+0x38>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ee:	d00b      	beq.n	8003608 <TIM_Base_SetConfig+0x38>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a31      	ldr	r2, [pc, #196]	; (80036b8 <TIM_Base_SetConfig+0xe8>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d007      	beq.n	8003608 <TIM_Base_SetConfig+0x38>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a30      	ldr	r2, [pc, #192]	; (80036bc <TIM_Base_SetConfig+0xec>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d003      	beq.n	8003608 <TIM_Base_SetConfig+0x38>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a2f      	ldr	r2, [pc, #188]	; (80036c0 <TIM_Base_SetConfig+0xf0>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d108      	bne.n	800361a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800360e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	4313      	orrs	r3, r2
 8003618:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a25      	ldr	r2, [pc, #148]	; (80036b4 <TIM_Base_SetConfig+0xe4>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d01b      	beq.n	800365a <TIM_Base_SetConfig+0x8a>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003628:	d017      	beq.n	800365a <TIM_Base_SetConfig+0x8a>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a22      	ldr	r2, [pc, #136]	; (80036b8 <TIM_Base_SetConfig+0xe8>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d013      	beq.n	800365a <TIM_Base_SetConfig+0x8a>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a21      	ldr	r2, [pc, #132]	; (80036bc <TIM_Base_SetConfig+0xec>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d00f      	beq.n	800365a <TIM_Base_SetConfig+0x8a>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a20      	ldr	r2, [pc, #128]	; (80036c0 <TIM_Base_SetConfig+0xf0>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d00b      	beq.n	800365a <TIM_Base_SetConfig+0x8a>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a1f      	ldr	r2, [pc, #124]	; (80036c4 <TIM_Base_SetConfig+0xf4>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d007      	beq.n	800365a <TIM_Base_SetConfig+0x8a>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a1e      	ldr	r2, [pc, #120]	; (80036c8 <TIM_Base_SetConfig+0xf8>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d003      	beq.n	800365a <TIM_Base_SetConfig+0x8a>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a1d      	ldr	r2, [pc, #116]	; (80036cc <TIM_Base_SetConfig+0xfc>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d108      	bne.n	800366c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003660:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	4313      	orrs	r3, r2
 800366a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	4313      	orrs	r3, r2
 8003678:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a08      	ldr	r2, [pc, #32]	; (80036b4 <TIM_Base_SetConfig+0xe4>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d103      	bne.n	80036a0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	691a      	ldr	r2, [r3, #16]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	615a      	str	r2, [r3, #20]
}
 80036a6:	bf00      	nop
 80036a8:	3714      	adds	r7, #20
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	40010000 	.word	0x40010000
 80036b8:	40000400 	.word	0x40000400
 80036bc:	40000800 	.word	0x40000800
 80036c0:	40000c00 	.word	0x40000c00
 80036c4:	40014000 	.word	0x40014000
 80036c8:	40014400 	.word	0x40014400
 80036cc:	40014800 	.word	0x40014800

080036d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e03f      	b.n	800378a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d106      	bne.n	8003724 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7fd fde8 	bl	80012f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2224      	movs	r2, #36	; 0x24
 8003728:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800373a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f829 	bl	8003794 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	691a      	ldr	r2, [r3, #16]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003750:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	695a      	ldr	r2, [r3, #20]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003760:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68da      	ldr	r2, [r3, #12]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003770:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2220      	movs	r2, #32
 8003784:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
	...

08003794 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003798:	b085      	sub	sp, #20
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	68da      	ldr	r2, [r3, #12]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	431a      	orrs	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	431a      	orrs	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	69db      	ldr	r3, [r3, #28]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80037d6:	f023 030c 	bic.w	r3, r3, #12
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	6812      	ldr	r2, [r2, #0]
 80037de:	68f9      	ldr	r1, [r7, #12]
 80037e0:	430b      	orrs	r3, r1
 80037e2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	699a      	ldr	r2, [r3, #24]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003802:	f040 818b 	bne.w	8003b1c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4ac1      	ldr	r2, [pc, #772]	; (8003b10 <UART_SetConfig+0x37c>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d005      	beq.n	800381c <UART_SetConfig+0x88>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4abf      	ldr	r2, [pc, #764]	; (8003b14 <UART_SetConfig+0x380>)
 8003816:	4293      	cmp	r3, r2
 8003818:	f040 80bd 	bne.w	8003996 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800381c:	f7ff fd08 	bl	8003230 <HAL_RCC_GetPCLK2Freq>
 8003820:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	461d      	mov	r5, r3
 8003826:	f04f 0600 	mov.w	r6, #0
 800382a:	46a8      	mov	r8, r5
 800382c:	46b1      	mov	r9, r6
 800382e:	eb18 0308 	adds.w	r3, r8, r8
 8003832:	eb49 0409 	adc.w	r4, r9, r9
 8003836:	4698      	mov	r8, r3
 8003838:	46a1      	mov	r9, r4
 800383a:	eb18 0805 	adds.w	r8, r8, r5
 800383e:	eb49 0906 	adc.w	r9, r9, r6
 8003842:	f04f 0100 	mov.w	r1, #0
 8003846:	f04f 0200 	mov.w	r2, #0
 800384a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800384e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003852:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003856:	4688      	mov	r8, r1
 8003858:	4691      	mov	r9, r2
 800385a:	eb18 0005 	adds.w	r0, r8, r5
 800385e:	eb49 0106 	adc.w	r1, r9, r6
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	461d      	mov	r5, r3
 8003868:	f04f 0600 	mov.w	r6, #0
 800386c:	196b      	adds	r3, r5, r5
 800386e:	eb46 0406 	adc.w	r4, r6, r6
 8003872:	461a      	mov	r2, r3
 8003874:	4623      	mov	r3, r4
 8003876:	f7fd f881 	bl	800097c <__aeabi_uldivmod>
 800387a:	4603      	mov	r3, r0
 800387c:	460c      	mov	r4, r1
 800387e:	461a      	mov	r2, r3
 8003880:	4ba5      	ldr	r3, [pc, #660]	; (8003b18 <UART_SetConfig+0x384>)
 8003882:	fba3 2302 	umull	r2, r3, r3, r2
 8003886:	095b      	lsrs	r3, r3, #5
 8003888:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	461d      	mov	r5, r3
 8003890:	f04f 0600 	mov.w	r6, #0
 8003894:	46a9      	mov	r9, r5
 8003896:	46b2      	mov	sl, r6
 8003898:	eb19 0309 	adds.w	r3, r9, r9
 800389c:	eb4a 040a 	adc.w	r4, sl, sl
 80038a0:	4699      	mov	r9, r3
 80038a2:	46a2      	mov	sl, r4
 80038a4:	eb19 0905 	adds.w	r9, r9, r5
 80038a8:	eb4a 0a06 	adc.w	sl, sl, r6
 80038ac:	f04f 0100 	mov.w	r1, #0
 80038b0:	f04f 0200 	mov.w	r2, #0
 80038b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038b8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038bc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038c0:	4689      	mov	r9, r1
 80038c2:	4692      	mov	sl, r2
 80038c4:	eb19 0005 	adds.w	r0, r9, r5
 80038c8:	eb4a 0106 	adc.w	r1, sl, r6
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	461d      	mov	r5, r3
 80038d2:	f04f 0600 	mov.w	r6, #0
 80038d6:	196b      	adds	r3, r5, r5
 80038d8:	eb46 0406 	adc.w	r4, r6, r6
 80038dc:	461a      	mov	r2, r3
 80038de:	4623      	mov	r3, r4
 80038e0:	f7fd f84c 	bl	800097c <__aeabi_uldivmod>
 80038e4:	4603      	mov	r3, r0
 80038e6:	460c      	mov	r4, r1
 80038e8:	461a      	mov	r2, r3
 80038ea:	4b8b      	ldr	r3, [pc, #556]	; (8003b18 <UART_SetConfig+0x384>)
 80038ec:	fba3 1302 	umull	r1, r3, r3, r2
 80038f0:	095b      	lsrs	r3, r3, #5
 80038f2:	2164      	movs	r1, #100	; 0x64
 80038f4:	fb01 f303 	mul.w	r3, r1, r3
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	3332      	adds	r3, #50	; 0x32
 80038fe:	4a86      	ldr	r2, [pc, #536]	; (8003b18 <UART_SetConfig+0x384>)
 8003900:	fba2 2303 	umull	r2, r3, r2, r3
 8003904:	095b      	lsrs	r3, r3, #5
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800390c:	4498      	add	r8, r3
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	461d      	mov	r5, r3
 8003912:	f04f 0600 	mov.w	r6, #0
 8003916:	46a9      	mov	r9, r5
 8003918:	46b2      	mov	sl, r6
 800391a:	eb19 0309 	adds.w	r3, r9, r9
 800391e:	eb4a 040a 	adc.w	r4, sl, sl
 8003922:	4699      	mov	r9, r3
 8003924:	46a2      	mov	sl, r4
 8003926:	eb19 0905 	adds.w	r9, r9, r5
 800392a:	eb4a 0a06 	adc.w	sl, sl, r6
 800392e:	f04f 0100 	mov.w	r1, #0
 8003932:	f04f 0200 	mov.w	r2, #0
 8003936:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800393a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800393e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003942:	4689      	mov	r9, r1
 8003944:	4692      	mov	sl, r2
 8003946:	eb19 0005 	adds.w	r0, r9, r5
 800394a:	eb4a 0106 	adc.w	r1, sl, r6
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	461d      	mov	r5, r3
 8003954:	f04f 0600 	mov.w	r6, #0
 8003958:	196b      	adds	r3, r5, r5
 800395a:	eb46 0406 	adc.w	r4, r6, r6
 800395e:	461a      	mov	r2, r3
 8003960:	4623      	mov	r3, r4
 8003962:	f7fd f80b 	bl	800097c <__aeabi_uldivmod>
 8003966:	4603      	mov	r3, r0
 8003968:	460c      	mov	r4, r1
 800396a:	461a      	mov	r2, r3
 800396c:	4b6a      	ldr	r3, [pc, #424]	; (8003b18 <UART_SetConfig+0x384>)
 800396e:	fba3 1302 	umull	r1, r3, r3, r2
 8003972:	095b      	lsrs	r3, r3, #5
 8003974:	2164      	movs	r1, #100	; 0x64
 8003976:	fb01 f303 	mul.w	r3, r1, r3
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	00db      	lsls	r3, r3, #3
 800397e:	3332      	adds	r3, #50	; 0x32
 8003980:	4a65      	ldr	r2, [pc, #404]	; (8003b18 <UART_SetConfig+0x384>)
 8003982:	fba2 2303 	umull	r2, r3, r2, r3
 8003986:	095b      	lsrs	r3, r3, #5
 8003988:	f003 0207 	and.w	r2, r3, #7
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4442      	add	r2, r8
 8003992:	609a      	str	r2, [r3, #8]
 8003994:	e26f      	b.n	8003e76 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003996:	f7ff fc37 	bl	8003208 <HAL_RCC_GetPCLK1Freq>
 800399a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	461d      	mov	r5, r3
 80039a0:	f04f 0600 	mov.w	r6, #0
 80039a4:	46a8      	mov	r8, r5
 80039a6:	46b1      	mov	r9, r6
 80039a8:	eb18 0308 	adds.w	r3, r8, r8
 80039ac:	eb49 0409 	adc.w	r4, r9, r9
 80039b0:	4698      	mov	r8, r3
 80039b2:	46a1      	mov	r9, r4
 80039b4:	eb18 0805 	adds.w	r8, r8, r5
 80039b8:	eb49 0906 	adc.w	r9, r9, r6
 80039bc:	f04f 0100 	mov.w	r1, #0
 80039c0:	f04f 0200 	mov.w	r2, #0
 80039c4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80039c8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80039cc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80039d0:	4688      	mov	r8, r1
 80039d2:	4691      	mov	r9, r2
 80039d4:	eb18 0005 	adds.w	r0, r8, r5
 80039d8:	eb49 0106 	adc.w	r1, r9, r6
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	461d      	mov	r5, r3
 80039e2:	f04f 0600 	mov.w	r6, #0
 80039e6:	196b      	adds	r3, r5, r5
 80039e8:	eb46 0406 	adc.w	r4, r6, r6
 80039ec:	461a      	mov	r2, r3
 80039ee:	4623      	mov	r3, r4
 80039f0:	f7fc ffc4 	bl	800097c <__aeabi_uldivmod>
 80039f4:	4603      	mov	r3, r0
 80039f6:	460c      	mov	r4, r1
 80039f8:	461a      	mov	r2, r3
 80039fa:	4b47      	ldr	r3, [pc, #284]	; (8003b18 <UART_SetConfig+0x384>)
 80039fc:	fba3 2302 	umull	r2, r3, r3, r2
 8003a00:	095b      	lsrs	r3, r3, #5
 8003a02:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	461d      	mov	r5, r3
 8003a0a:	f04f 0600 	mov.w	r6, #0
 8003a0e:	46a9      	mov	r9, r5
 8003a10:	46b2      	mov	sl, r6
 8003a12:	eb19 0309 	adds.w	r3, r9, r9
 8003a16:	eb4a 040a 	adc.w	r4, sl, sl
 8003a1a:	4699      	mov	r9, r3
 8003a1c:	46a2      	mov	sl, r4
 8003a1e:	eb19 0905 	adds.w	r9, r9, r5
 8003a22:	eb4a 0a06 	adc.w	sl, sl, r6
 8003a26:	f04f 0100 	mov.w	r1, #0
 8003a2a:	f04f 0200 	mov.w	r2, #0
 8003a2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a32:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a36:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a3a:	4689      	mov	r9, r1
 8003a3c:	4692      	mov	sl, r2
 8003a3e:	eb19 0005 	adds.w	r0, r9, r5
 8003a42:	eb4a 0106 	adc.w	r1, sl, r6
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	461d      	mov	r5, r3
 8003a4c:	f04f 0600 	mov.w	r6, #0
 8003a50:	196b      	adds	r3, r5, r5
 8003a52:	eb46 0406 	adc.w	r4, r6, r6
 8003a56:	461a      	mov	r2, r3
 8003a58:	4623      	mov	r3, r4
 8003a5a:	f7fc ff8f 	bl	800097c <__aeabi_uldivmod>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	460c      	mov	r4, r1
 8003a62:	461a      	mov	r2, r3
 8003a64:	4b2c      	ldr	r3, [pc, #176]	; (8003b18 <UART_SetConfig+0x384>)
 8003a66:	fba3 1302 	umull	r1, r3, r3, r2
 8003a6a:	095b      	lsrs	r3, r3, #5
 8003a6c:	2164      	movs	r1, #100	; 0x64
 8003a6e:	fb01 f303 	mul.w	r3, r1, r3
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	3332      	adds	r3, #50	; 0x32
 8003a78:	4a27      	ldr	r2, [pc, #156]	; (8003b18 <UART_SetConfig+0x384>)
 8003a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7e:	095b      	lsrs	r3, r3, #5
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a86:	4498      	add	r8, r3
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	461d      	mov	r5, r3
 8003a8c:	f04f 0600 	mov.w	r6, #0
 8003a90:	46a9      	mov	r9, r5
 8003a92:	46b2      	mov	sl, r6
 8003a94:	eb19 0309 	adds.w	r3, r9, r9
 8003a98:	eb4a 040a 	adc.w	r4, sl, sl
 8003a9c:	4699      	mov	r9, r3
 8003a9e:	46a2      	mov	sl, r4
 8003aa0:	eb19 0905 	adds.w	r9, r9, r5
 8003aa4:	eb4a 0a06 	adc.w	sl, sl, r6
 8003aa8:	f04f 0100 	mov.w	r1, #0
 8003aac:	f04f 0200 	mov.w	r2, #0
 8003ab0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ab4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ab8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003abc:	4689      	mov	r9, r1
 8003abe:	4692      	mov	sl, r2
 8003ac0:	eb19 0005 	adds.w	r0, r9, r5
 8003ac4:	eb4a 0106 	adc.w	r1, sl, r6
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	461d      	mov	r5, r3
 8003ace:	f04f 0600 	mov.w	r6, #0
 8003ad2:	196b      	adds	r3, r5, r5
 8003ad4:	eb46 0406 	adc.w	r4, r6, r6
 8003ad8:	461a      	mov	r2, r3
 8003ada:	4623      	mov	r3, r4
 8003adc:	f7fc ff4e 	bl	800097c <__aeabi_uldivmod>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	460c      	mov	r4, r1
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	4b0c      	ldr	r3, [pc, #48]	; (8003b18 <UART_SetConfig+0x384>)
 8003ae8:	fba3 1302 	umull	r1, r3, r3, r2
 8003aec:	095b      	lsrs	r3, r3, #5
 8003aee:	2164      	movs	r1, #100	; 0x64
 8003af0:	fb01 f303 	mul.w	r3, r1, r3
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	3332      	adds	r3, #50	; 0x32
 8003afa:	4a07      	ldr	r2, [pc, #28]	; (8003b18 <UART_SetConfig+0x384>)
 8003afc:	fba2 2303 	umull	r2, r3, r2, r3
 8003b00:	095b      	lsrs	r3, r3, #5
 8003b02:	f003 0207 	and.w	r2, r3, #7
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4442      	add	r2, r8
 8003b0c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003b0e:	e1b2      	b.n	8003e76 <UART_SetConfig+0x6e2>
 8003b10:	40011000 	.word	0x40011000
 8003b14:	40011400 	.word	0x40011400
 8003b18:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4ad7      	ldr	r2, [pc, #860]	; (8003e80 <UART_SetConfig+0x6ec>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d005      	beq.n	8003b32 <UART_SetConfig+0x39e>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4ad6      	ldr	r2, [pc, #856]	; (8003e84 <UART_SetConfig+0x6f0>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	f040 80d1 	bne.w	8003cd4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b32:	f7ff fb7d 	bl	8003230 <HAL_RCC_GetPCLK2Freq>
 8003b36:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	469a      	mov	sl, r3
 8003b3c:	f04f 0b00 	mov.w	fp, #0
 8003b40:	46d0      	mov	r8, sl
 8003b42:	46d9      	mov	r9, fp
 8003b44:	eb18 0308 	adds.w	r3, r8, r8
 8003b48:	eb49 0409 	adc.w	r4, r9, r9
 8003b4c:	4698      	mov	r8, r3
 8003b4e:	46a1      	mov	r9, r4
 8003b50:	eb18 080a 	adds.w	r8, r8, sl
 8003b54:	eb49 090b 	adc.w	r9, r9, fp
 8003b58:	f04f 0100 	mov.w	r1, #0
 8003b5c:	f04f 0200 	mov.w	r2, #0
 8003b60:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b64:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003b68:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003b6c:	4688      	mov	r8, r1
 8003b6e:	4691      	mov	r9, r2
 8003b70:	eb1a 0508 	adds.w	r5, sl, r8
 8003b74:	eb4b 0609 	adc.w	r6, fp, r9
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	f04f 0200 	mov.w	r2, #0
 8003b82:	f04f 0300 	mov.w	r3, #0
 8003b86:	f04f 0400 	mov.w	r4, #0
 8003b8a:	0094      	lsls	r4, r2, #2
 8003b8c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b90:	008b      	lsls	r3, r1, #2
 8003b92:	461a      	mov	r2, r3
 8003b94:	4623      	mov	r3, r4
 8003b96:	4628      	mov	r0, r5
 8003b98:	4631      	mov	r1, r6
 8003b9a:	f7fc feef 	bl	800097c <__aeabi_uldivmod>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	460c      	mov	r4, r1
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	4bb8      	ldr	r3, [pc, #736]	; (8003e88 <UART_SetConfig+0x6f4>)
 8003ba6:	fba3 2302 	umull	r2, r3, r3, r2
 8003baa:	095b      	lsrs	r3, r3, #5
 8003bac:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	469b      	mov	fp, r3
 8003bb4:	f04f 0c00 	mov.w	ip, #0
 8003bb8:	46d9      	mov	r9, fp
 8003bba:	46e2      	mov	sl, ip
 8003bbc:	eb19 0309 	adds.w	r3, r9, r9
 8003bc0:	eb4a 040a 	adc.w	r4, sl, sl
 8003bc4:	4699      	mov	r9, r3
 8003bc6:	46a2      	mov	sl, r4
 8003bc8:	eb19 090b 	adds.w	r9, r9, fp
 8003bcc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003bd0:	f04f 0100 	mov.w	r1, #0
 8003bd4:	f04f 0200 	mov.w	r2, #0
 8003bd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bdc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003be0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003be4:	4689      	mov	r9, r1
 8003be6:	4692      	mov	sl, r2
 8003be8:	eb1b 0509 	adds.w	r5, fp, r9
 8003bec:	eb4c 060a 	adc.w	r6, ip, sl
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	f04f 0200 	mov.w	r2, #0
 8003bfa:	f04f 0300 	mov.w	r3, #0
 8003bfe:	f04f 0400 	mov.w	r4, #0
 8003c02:	0094      	lsls	r4, r2, #2
 8003c04:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c08:	008b      	lsls	r3, r1, #2
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	4623      	mov	r3, r4
 8003c0e:	4628      	mov	r0, r5
 8003c10:	4631      	mov	r1, r6
 8003c12:	f7fc feb3 	bl	800097c <__aeabi_uldivmod>
 8003c16:	4603      	mov	r3, r0
 8003c18:	460c      	mov	r4, r1
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	4b9a      	ldr	r3, [pc, #616]	; (8003e88 <UART_SetConfig+0x6f4>)
 8003c1e:	fba3 1302 	umull	r1, r3, r3, r2
 8003c22:	095b      	lsrs	r3, r3, #5
 8003c24:	2164      	movs	r1, #100	; 0x64
 8003c26:	fb01 f303 	mul.w	r3, r1, r3
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	3332      	adds	r3, #50	; 0x32
 8003c30:	4a95      	ldr	r2, [pc, #596]	; (8003e88 <UART_SetConfig+0x6f4>)
 8003c32:	fba2 2303 	umull	r2, r3, r2, r3
 8003c36:	095b      	lsrs	r3, r3, #5
 8003c38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c3c:	4498      	add	r8, r3
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	469b      	mov	fp, r3
 8003c42:	f04f 0c00 	mov.w	ip, #0
 8003c46:	46d9      	mov	r9, fp
 8003c48:	46e2      	mov	sl, ip
 8003c4a:	eb19 0309 	adds.w	r3, r9, r9
 8003c4e:	eb4a 040a 	adc.w	r4, sl, sl
 8003c52:	4699      	mov	r9, r3
 8003c54:	46a2      	mov	sl, r4
 8003c56:	eb19 090b 	adds.w	r9, r9, fp
 8003c5a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003c5e:	f04f 0100 	mov.w	r1, #0
 8003c62:	f04f 0200 	mov.w	r2, #0
 8003c66:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c6a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c6e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c72:	4689      	mov	r9, r1
 8003c74:	4692      	mov	sl, r2
 8003c76:	eb1b 0509 	adds.w	r5, fp, r9
 8003c7a:	eb4c 060a 	adc.w	r6, ip, sl
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	4619      	mov	r1, r3
 8003c84:	f04f 0200 	mov.w	r2, #0
 8003c88:	f04f 0300 	mov.w	r3, #0
 8003c8c:	f04f 0400 	mov.w	r4, #0
 8003c90:	0094      	lsls	r4, r2, #2
 8003c92:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c96:	008b      	lsls	r3, r1, #2
 8003c98:	461a      	mov	r2, r3
 8003c9a:	4623      	mov	r3, r4
 8003c9c:	4628      	mov	r0, r5
 8003c9e:	4631      	mov	r1, r6
 8003ca0:	f7fc fe6c 	bl	800097c <__aeabi_uldivmod>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	460c      	mov	r4, r1
 8003ca8:	461a      	mov	r2, r3
 8003caa:	4b77      	ldr	r3, [pc, #476]	; (8003e88 <UART_SetConfig+0x6f4>)
 8003cac:	fba3 1302 	umull	r1, r3, r3, r2
 8003cb0:	095b      	lsrs	r3, r3, #5
 8003cb2:	2164      	movs	r1, #100	; 0x64
 8003cb4:	fb01 f303 	mul.w	r3, r1, r3
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	3332      	adds	r3, #50	; 0x32
 8003cbe:	4a72      	ldr	r2, [pc, #456]	; (8003e88 <UART_SetConfig+0x6f4>)
 8003cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc4:	095b      	lsrs	r3, r3, #5
 8003cc6:	f003 020f 	and.w	r2, r3, #15
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4442      	add	r2, r8
 8003cd0:	609a      	str	r2, [r3, #8]
 8003cd2:	e0d0      	b.n	8003e76 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cd4:	f7ff fa98 	bl	8003208 <HAL_RCC_GetPCLK1Freq>
 8003cd8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	469a      	mov	sl, r3
 8003cde:	f04f 0b00 	mov.w	fp, #0
 8003ce2:	46d0      	mov	r8, sl
 8003ce4:	46d9      	mov	r9, fp
 8003ce6:	eb18 0308 	adds.w	r3, r8, r8
 8003cea:	eb49 0409 	adc.w	r4, r9, r9
 8003cee:	4698      	mov	r8, r3
 8003cf0:	46a1      	mov	r9, r4
 8003cf2:	eb18 080a 	adds.w	r8, r8, sl
 8003cf6:	eb49 090b 	adc.w	r9, r9, fp
 8003cfa:	f04f 0100 	mov.w	r1, #0
 8003cfe:	f04f 0200 	mov.w	r2, #0
 8003d02:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d06:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d0a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d0e:	4688      	mov	r8, r1
 8003d10:	4691      	mov	r9, r2
 8003d12:	eb1a 0508 	adds.w	r5, sl, r8
 8003d16:	eb4b 0609 	adc.w	r6, fp, r9
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	4619      	mov	r1, r3
 8003d20:	f04f 0200 	mov.w	r2, #0
 8003d24:	f04f 0300 	mov.w	r3, #0
 8003d28:	f04f 0400 	mov.w	r4, #0
 8003d2c:	0094      	lsls	r4, r2, #2
 8003d2e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d32:	008b      	lsls	r3, r1, #2
 8003d34:	461a      	mov	r2, r3
 8003d36:	4623      	mov	r3, r4
 8003d38:	4628      	mov	r0, r5
 8003d3a:	4631      	mov	r1, r6
 8003d3c:	f7fc fe1e 	bl	800097c <__aeabi_uldivmod>
 8003d40:	4603      	mov	r3, r0
 8003d42:	460c      	mov	r4, r1
 8003d44:	461a      	mov	r2, r3
 8003d46:	4b50      	ldr	r3, [pc, #320]	; (8003e88 <UART_SetConfig+0x6f4>)
 8003d48:	fba3 2302 	umull	r2, r3, r3, r2
 8003d4c:	095b      	lsrs	r3, r3, #5
 8003d4e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	469b      	mov	fp, r3
 8003d56:	f04f 0c00 	mov.w	ip, #0
 8003d5a:	46d9      	mov	r9, fp
 8003d5c:	46e2      	mov	sl, ip
 8003d5e:	eb19 0309 	adds.w	r3, r9, r9
 8003d62:	eb4a 040a 	adc.w	r4, sl, sl
 8003d66:	4699      	mov	r9, r3
 8003d68:	46a2      	mov	sl, r4
 8003d6a:	eb19 090b 	adds.w	r9, r9, fp
 8003d6e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003d72:	f04f 0100 	mov.w	r1, #0
 8003d76:	f04f 0200 	mov.w	r2, #0
 8003d7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d7e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d82:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d86:	4689      	mov	r9, r1
 8003d88:	4692      	mov	sl, r2
 8003d8a:	eb1b 0509 	adds.w	r5, fp, r9
 8003d8e:	eb4c 060a 	adc.w	r6, ip, sl
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	4619      	mov	r1, r3
 8003d98:	f04f 0200 	mov.w	r2, #0
 8003d9c:	f04f 0300 	mov.w	r3, #0
 8003da0:	f04f 0400 	mov.w	r4, #0
 8003da4:	0094      	lsls	r4, r2, #2
 8003da6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003daa:	008b      	lsls	r3, r1, #2
 8003dac:	461a      	mov	r2, r3
 8003dae:	4623      	mov	r3, r4
 8003db0:	4628      	mov	r0, r5
 8003db2:	4631      	mov	r1, r6
 8003db4:	f7fc fde2 	bl	800097c <__aeabi_uldivmod>
 8003db8:	4603      	mov	r3, r0
 8003dba:	460c      	mov	r4, r1
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	4b32      	ldr	r3, [pc, #200]	; (8003e88 <UART_SetConfig+0x6f4>)
 8003dc0:	fba3 1302 	umull	r1, r3, r3, r2
 8003dc4:	095b      	lsrs	r3, r3, #5
 8003dc6:	2164      	movs	r1, #100	; 0x64
 8003dc8:	fb01 f303 	mul.w	r3, r1, r3
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	011b      	lsls	r3, r3, #4
 8003dd0:	3332      	adds	r3, #50	; 0x32
 8003dd2:	4a2d      	ldr	r2, [pc, #180]	; (8003e88 <UART_SetConfig+0x6f4>)
 8003dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd8:	095b      	lsrs	r3, r3, #5
 8003dda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dde:	4498      	add	r8, r3
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	469b      	mov	fp, r3
 8003de4:	f04f 0c00 	mov.w	ip, #0
 8003de8:	46d9      	mov	r9, fp
 8003dea:	46e2      	mov	sl, ip
 8003dec:	eb19 0309 	adds.w	r3, r9, r9
 8003df0:	eb4a 040a 	adc.w	r4, sl, sl
 8003df4:	4699      	mov	r9, r3
 8003df6:	46a2      	mov	sl, r4
 8003df8:	eb19 090b 	adds.w	r9, r9, fp
 8003dfc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003e00:	f04f 0100 	mov.w	r1, #0
 8003e04:	f04f 0200 	mov.w	r2, #0
 8003e08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e0c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e10:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e14:	4689      	mov	r9, r1
 8003e16:	4692      	mov	sl, r2
 8003e18:	eb1b 0509 	adds.w	r5, fp, r9
 8003e1c:	eb4c 060a 	adc.w	r6, ip, sl
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	4619      	mov	r1, r3
 8003e26:	f04f 0200 	mov.w	r2, #0
 8003e2a:	f04f 0300 	mov.w	r3, #0
 8003e2e:	f04f 0400 	mov.w	r4, #0
 8003e32:	0094      	lsls	r4, r2, #2
 8003e34:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e38:	008b      	lsls	r3, r1, #2
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	4623      	mov	r3, r4
 8003e3e:	4628      	mov	r0, r5
 8003e40:	4631      	mov	r1, r6
 8003e42:	f7fc fd9b 	bl	800097c <__aeabi_uldivmod>
 8003e46:	4603      	mov	r3, r0
 8003e48:	460c      	mov	r4, r1
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	4b0e      	ldr	r3, [pc, #56]	; (8003e88 <UART_SetConfig+0x6f4>)
 8003e4e:	fba3 1302 	umull	r1, r3, r3, r2
 8003e52:	095b      	lsrs	r3, r3, #5
 8003e54:	2164      	movs	r1, #100	; 0x64
 8003e56:	fb01 f303 	mul.w	r3, r1, r3
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	011b      	lsls	r3, r3, #4
 8003e5e:	3332      	adds	r3, #50	; 0x32
 8003e60:	4a09      	ldr	r2, [pc, #36]	; (8003e88 <UART_SetConfig+0x6f4>)
 8003e62:	fba2 2303 	umull	r2, r3, r2, r3
 8003e66:	095b      	lsrs	r3, r3, #5
 8003e68:	f003 020f 	and.w	r2, r3, #15
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4442      	add	r2, r8
 8003e72:	609a      	str	r2, [r3, #8]
}
 8003e74:	e7ff      	b.n	8003e76 <UART_SetConfig+0x6e2>
 8003e76:	bf00      	nop
 8003e78:	3714      	adds	r7, #20
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e80:	40011000 	.word	0x40011000
 8003e84:	40011400 	.word	0x40011400
 8003e88:	51eb851f 	.word	0x51eb851f

08003e8c <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	689a      	ldr	r2, [r3, #8]
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	683a      	ldr	r2, [r7, #0]
 8003eb0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	1c5a      	adds	r2, r3, #1
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	601a      	str	r2, [r3, #0]
}
 8003ec8:	bf00      	nop
 8003eca:	3714      	adds	r7, #20
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003eea:	d103      	bne.n	8003ef4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	60fb      	str	r3, [r7, #12]
 8003ef2:	e00c      	b.n	8003f0e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3308      	adds	r3, #8
 8003ef8:	60fb      	str	r3, [r7, #12]
 8003efa:	e002      	b.n	8003f02 <vListInsert+0x2e>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	60fb      	str	r3, [r7, #12]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d2f6      	bcs.n	8003efc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	685a      	ldr	r2, [r3, #4]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	1c5a      	adds	r2, r3, #1
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	601a      	str	r2, [r3, #0]
}
 8003f3a:	bf00      	nop
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr

08003f46 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003f46:	b480      	push	{r7}
 8003f48:	b085      	sub	sp, #20
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	6892      	ldr	r2, [r2, #8]
 8003f5c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	6852      	ldr	r2, [r2, #4]
 8003f66:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d103      	bne.n	8003f7a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	689a      	ldr	r2, [r3, #8]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	1e5a      	subs	r2, r3, #1
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3714      	adds	r7, #20
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
	...

08003f9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d016      	beq.n	8003fdc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003fae:	4b13      	ldr	r3, [pc, #76]	; (8003ffc <vTaskDelay+0x60>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d009      	beq.n	8003fca <vTaskDelay+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fba:	f383 8811 	msr	BASEPRI, r3
 8003fbe:	f3bf 8f6f 	isb	sy
 8003fc2:	f3bf 8f4f 	dsb	sy
 8003fc6:	60bb      	str	r3, [r7, #8]
 8003fc8:	e7fe      	b.n	8003fc8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003fca:	f000 f81b 	bl	8004004 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003fce:	2100      	movs	r1, #0
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 f9f5 	bl	80043c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003fd6:	f000 f823 	bl	8004020 <xTaskResumeAll>
 8003fda:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d107      	bne.n	8003ff2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003fe2:	4b07      	ldr	r3, [pc, #28]	; (8004000 <vTaskDelay+0x64>)
 8003fe4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fe8:	601a      	str	r2, [r3, #0]
 8003fea:	f3bf 8f4f 	dsb	sy
 8003fee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ff2:	bf00      	nop
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	20000634 	.word	0x20000634
 8004000:	e000ed04 	.word	0xe000ed04

08004004 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004008:	4b04      	ldr	r3, [pc, #16]	; (800401c <vTaskSuspendAll+0x18>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	3301      	adds	r3, #1
 800400e:	4a03      	ldr	r2, [pc, #12]	; (800401c <vTaskSuspendAll+0x18>)
 8004010:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004012:	bf00      	nop
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr
 800401c:	20000634 	.word	0x20000634

08004020 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004026:	2300      	movs	r3, #0
 8004028:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800402a:	2300      	movs	r3, #0
 800402c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800402e:	4b41      	ldr	r3, [pc, #260]	; (8004134 <xTaskResumeAll+0x114>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d109      	bne.n	800404a <xTaskResumeAll+0x2a>
 8004036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403a:	f383 8811 	msr	BASEPRI, r3
 800403e:	f3bf 8f6f 	isb	sy
 8004042:	f3bf 8f4f 	dsb	sy
 8004046:	603b      	str	r3, [r7, #0]
 8004048:	e7fe      	b.n	8004048 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800404a:	f000 fa25 	bl	8004498 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800404e:	4b39      	ldr	r3, [pc, #228]	; (8004134 <xTaskResumeAll+0x114>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	3b01      	subs	r3, #1
 8004054:	4a37      	ldr	r2, [pc, #220]	; (8004134 <xTaskResumeAll+0x114>)
 8004056:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004058:	4b36      	ldr	r3, [pc, #216]	; (8004134 <xTaskResumeAll+0x114>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d162      	bne.n	8004126 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004060:	4b35      	ldr	r3, [pc, #212]	; (8004138 <xTaskResumeAll+0x118>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d05e      	beq.n	8004126 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004068:	e02f      	b.n	80040ca <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800406a:	4b34      	ldr	r3, [pc, #208]	; (800413c <xTaskResumeAll+0x11c>)
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	3318      	adds	r3, #24
 8004076:	4618      	mov	r0, r3
 8004078:	f7ff ff65 	bl	8003f46 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	3304      	adds	r3, #4
 8004080:	4618      	mov	r0, r3
 8004082:	f7ff ff60 	bl	8003f46 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800408a:	4b2d      	ldr	r3, [pc, #180]	; (8004140 <xTaskResumeAll+0x120>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	429a      	cmp	r2, r3
 8004090:	d903      	bls.n	800409a <xTaskResumeAll+0x7a>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004096:	4a2a      	ldr	r2, [pc, #168]	; (8004140 <xTaskResumeAll+0x120>)
 8004098:	6013      	str	r3, [r2, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800409e:	4613      	mov	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4413      	add	r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	4a27      	ldr	r2, [pc, #156]	; (8004144 <xTaskResumeAll+0x124>)
 80040a8:	441a      	add	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	3304      	adds	r3, #4
 80040ae:	4619      	mov	r1, r3
 80040b0:	4610      	mov	r0, r2
 80040b2:	f7ff feeb 	bl	8003e8c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ba:	4b23      	ldr	r3, [pc, #140]	; (8004148 <xTaskResumeAll+0x128>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d302      	bcc.n	80040ca <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80040c4:	4b21      	ldr	r3, [pc, #132]	; (800414c <xTaskResumeAll+0x12c>)
 80040c6:	2201      	movs	r2, #1
 80040c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040ca:	4b1c      	ldr	r3, [pc, #112]	; (800413c <xTaskResumeAll+0x11c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1cb      	bne.n	800406a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80040d8:	f000 f952 	bl	8004380 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80040dc:	4b1c      	ldr	r3, [pc, #112]	; (8004150 <xTaskResumeAll+0x130>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d010      	beq.n	800410a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80040e8:	f000 f836 	bl	8004158 <xTaskIncrementTick>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d002      	beq.n	80040f8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80040f2:	4b16      	ldr	r3, [pc, #88]	; (800414c <xTaskResumeAll+0x12c>)
 80040f4:	2201      	movs	r2, #1
 80040f6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	3b01      	subs	r3, #1
 80040fc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1f1      	bne.n	80040e8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004104:	4b12      	ldr	r3, [pc, #72]	; (8004150 <xTaskResumeAll+0x130>)
 8004106:	2200      	movs	r2, #0
 8004108:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800410a:	4b10      	ldr	r3, [pc, #64]	; (800414c <xTaskResumeAll+0x12c>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d009      	beq.n	8004126 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004112:	2301      	movs	r3, #1
 8004114:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004116:	4b0f      	ldr	r3, [pc, #60]	; (8004154 <xTaskResumeAll+0x134>)
 8004118:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800411c:	601a      	str	r2, [r3, #0]
 800411e:	f3bf 8f4f 	dsb	sy
 8004122:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004126:	f000 f9e5 	bl	80044f4 <vPortExitCritical>

	return xAlreadyYielded;
 800412a:	68bb      	ldr	r3, [r7, #8]
}
 800412c:	4618      	mov	r0, r3
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	20000634 	.word	0x20000634
 8004138:	20000618 	.word	0x20000618
 800413c:	200005f0 	.word	0x200005f0
 8004140:	20000620 	.word	0x20000620
 8004144:	20000188 	.word	0x20000188
 8004148:	20000184 	.word	0x20000184
 800414c:	20000628 	.word	0x20000628
 8004150:	20000624 	.word	0x20000624
 8004154:	e000ed04 	.word	0xe000ed04

08004158 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800415e:	2300      	movs	r3, #0
 8004160:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004162:	4b4e      	ldr	r3, [pc, #312]	; (800429c <xTaskIncrementTick+0x144>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	f040 8088 	bne.w	800427c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800416c:	4b4c      	ldr	r3, [pc, #304]	; (80042a0 <xTaskIncrementTick+0x148>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	3301      	adds	r3, #1
 8004172:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004174:	4a4a      	ldr	r2, [pc, #296]	; (80042a0 <xTaskIncrementTick+0x148>)
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d11f      	bne.n	80041c0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004180:	4b48      	ldr	r3, [pc, #288]	; (80042a4 <xTaskIncrementTick+0x14c>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d009      	beq.n	800419e <xTaskIncrementTick+0x46>
 800418a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418e:	f383 8811 	msr	BASEPRI, r3
 8004192:	f3bf 8f6f 	isb	sy
 8004196:	f3bf 8f4f 	dsb	sy
 800419a:	603b      	str	r3, [r7, #0]
 800419c:	e7fe      	b.n	800419c <xTaskIncrementTick+0x44>
 800419e:	4b41      	ldr	r3, [pc, #260]	; (80042a4 <xTaskIncrementTick+0x14c>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	60fb      	str	r3, [r7, #12]
 80041a4:	4b40      	ldr	r3, [pc, #256]	; (80042a8 <xTaskIncrementTick+0x150>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a3e      	ldr	r2, [pc, #248]	; (80042a4 <xTaskIncrementTick+0x14c>)
 80041aa:	6013      	str	r3, [r2, #0]
 80041ac:	4a3e      	ldr	r2, [pc, #248]	; (80042a8 <xTaskIncrementTick+0x150>)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6013      	str	r3, [r2, #0]
 80041b2:	4b3e      	ldr	r3, [pc, #248]	; (80042ac <xTaskIncrementTick+0x154>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	3301      	adds	r3, #1
 80041b8:	4a3c      	ldr	r2, [pc, #240]	; (80042ac <xTaskIncrementTick+0x154>)
 80041ba:	6013      	str	r3, [r2, #0]
 80041bc:	f000 f8e0 	bl	8004380 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80041c0:	4b3b      	ldr	r3, [pc, #236]	; (80042b0 <xTaskIncrementTick+0x158>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d349      	bcc.n	800425e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041ca:	4b36      	ldr	r3, [pc, #216]	; (80042a4 <xTaskIncrementTick+0x14c>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d104      	bne.n	80041de <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041d4:	4b36      	ldr	r3, [pc, #216]	; (80042b0 <xTaskIncrementTick+0x158>)
 80041d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041da:	601a      	str	r2, [r3, #0]
					break;
 80041dc:	e03f      	b.n	800425e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041de:	4b31      	ldr	r3, [pc, #196]	; (80042a4 <xTaskIncrementTick+0x14c>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d203      	bcs.n	80041fe <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80041f6:	4a2e      	ldr	r2, [pc, #184]	; (80042b0 <xTaskIncrementTick+0x158>)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80041fc:	e02f      	b.n	800425e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	3304      	adds	r3, #4
 8004202:	4618      	mov	r0, r3
 8004204:	f7ff fe9f 	bl	8003f46 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420c:	2b00      	cmp	r3, #0
 800420e:	d004      	beq.n	800421a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	3318      	adds	r3, #24
 8004214:	4618      	mov	r0, r3
 8004216:	f7ff fe96 	bl	8003f46 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800421e:	4b25      	ldr	r3, [pc, #148]	; (80042b4 <xTaskIncrementTick+0x15c>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	429a      	cmp	r2, r3
 8004224:	d903      	bls.n	800422e <xTaskIncrementTick+0xd6>
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422a:	4a22      	ldr	r2, [pc, #136]	; (80042b4 <xTaskIncrementTick+0x15c>)
 800422c:	6013      	str	r3, [r2, #0]
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004232:	4613      	mov	r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	4413      	add	r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	4a1f      	ldr	r2, [pc, #124]	; (80042b8 <xTaskIncrementTick+0x160>)
 800423c:	441a      	add	r2, r3
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	3304      	adds	r3, #4
 8004242:	4619      	mov	r1, r3
 8004244:	4610      	mov	r0, r2
 8004246:	f7ff fe21 	bl	8003e8c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800424e:	4b1b      	ldr	r3, [pc, #108]	; (80042bc <xTaskIncrementTick+0x164>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004254:	429a      	cmp	r2, r3
 8004256:	d3b8      	bcc.n	80041ca <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004258:	2301      	movs	r3, #1
 800425a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800425c:	e7b5      	b.n	80041ca <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800425e:	4b17      	ldr	r3, [pc, #92]	; (80042bc <xTaskIncrementTick+0x164>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004264:	4914      	ldr	r1, [pc, #80]	; (80042b8 <xTaskIncrementTick+0x160>)
 8004266:	4613      	mov	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4413      	add	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	440b      	add	r3, r1
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d907      	bls.n	8004286 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8004276:	2301      	movs	r3, #1
 8004278:	617b      	str	r3, [r7, #20]
 800427a:	e004      	b.n	8004286 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800427c:	4b10      	ldr	r3, [pc, #64]	; (80042c0 <xTaskIncrementTick+0x168>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	3301      	adds	r3, #1
 8004282:	4a0f      	ldr	r2, [pc, #60]	; (80042c0 <xTaskIncrementTick+0x168>)
 8004284:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004286:	4b0f      	ldr	r3, [pc, #60]	; (80042c4 <xTaskIncrementTick+0x16c>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800428e:	2301      	movs	r3, #1
 8004290:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004292:	697b      	ldr	r3, [r7, #20]
}
 8004294:	4618      	mov	r0, r3
 8004296:	3718      	adds	r7, #24
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	20000634 	.word	0x20000634
 80042a0:	2000061c 	.word	0x2000061c
 80042a4:	200005e8 	.word	0x200005e8
 80042a8:	200005ec 	.word	0x200005ec
 80042ac:	2000062c 	.word	0x2000062c
 80042b0:	20000630 	.word	0x20000630
 80042b4:	20000620 	.word	0x20000620
 80042b8:	20000188 	.word	0x20000188
 80042bc:	20000184 	.word	0x20000184
 80042c0:	20000624 	.word	0x20000624
 80042c4:	20000628 	.word	0x20000628

080042c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80042ce:	4b27      	ldr	r3, [pc, #156]	; (800436c <vTaskSwitchContext+0xa4>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d003      	beq.n	80042de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80042d6:	4b26      	ldr	r3, [pc, #152]	; (8004370 <vTaskSwitchContext+0xa8>)
 80042d8:	2201      	movs	r2, #1
 80042da:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80042dc:	e040      	b.n	8004360 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80042de:	4b24      	ldr	r3, [pc, #144]	; (8004370 <vTaskSwitchContext+0xa8>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042e4:	4b23      	ldr	r3, [pc, #140]	; (8004374 <vTaskSwitchContext+0xac>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	60fb      	str	r3, [r7, #12]
 80042ea:	e00f      	b.n	800430c <vTaskSwitchContext+0x44>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d109      	bne.n	8004306 <vTaskSwitchContext+0x3e>
 80042f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f6:	f383 8811 	msr	BASEPRI, r3
 80042fa:	f3bf 8f6f 	isb	sy
 80042fe:	f3bf 8f4f 	dsb	sy
 8004302:	607b      	str	r3, [r7, #4]
 8004304:	e7fe      	b.n	8004304 <vTaskSwitchContext+0x3c>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	3b01      	subs	r3, #1
 800430a:	60fb      	str	r3, [r7, #12]
 800430c:	491a      	ldr	r1, [pc, #104]	; (8004378 <vTaskSwitchContext+0xb0>)
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	4613      	mov	r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	4413      	add	r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	440b      	add	r3, r1
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d0e5      	beq.n	80042ec <vTaskSwitchContext+0x24>
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	4613      	mov	r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4413      	add	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4a13      	ldr	r2, [pc, #76]	; (8004378 <vTaskSwitchContext+0xb0>)
 800432c:	4413      	add	r3, r2
 800432e:	60bb      	str	r3, [r7, #8]
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	605a      	str	r2, [r3, #4]
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	685a      	ldr	r2, [r3, #4]
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	3308      	adds	r3, #8
 8004342:	429a      	cmp	r2, r3
 8004344:	d104      	bne.n	8004350 <vTaskSwitchContext+0x88>
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	605a      	str	r2, [r3, #4]
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	4a09      	ldr	r2, [pc, #36]	; (800437c <vTaskSwitchContext+0xb4>)
 8004358:	6013      	str	r3, [r2, #0]
 800435a:	4a06      	ldr	r2, [pc, #24]	; (8004374 <vTaskSwitchContext+0xac>)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6013      	str	r3, [r2, #0]
}
 8004360:	bf00      	nop
 8004362:	3714      	adds	r7, #20
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr
 800436c:	20000634 	.word	0x20000634
 8004370:	20000628 	.word	0x20000628
 8004374:	20000620 	.word	0x20000620
 8004378:	20000188 	.word	0x20000188
 800437c:	20000184 	.word	0x20000184

08004380 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004386:	4b0c      	ldr	r3, [pc, #48]	; (80043b8 <prvResetNextTaskUnblockTime+0x38>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d104      	bne.n	800439a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004390:	4b0a      	ldr	r3, [pc, #40]	; (80043bc <prvResetNextTaskUnblockTime+0x3c>)
 8004392:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004396:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004398:	e008      	b.n	80043ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800439a:	4b07      	ldr	r3, [pc, #28]	; (80043b8 <prvResetNextTaskUnblockTime+0x38>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	4a04      	ldr	r2, [pc, #16]	; (80043bc <prvResetNextTaskUnblockTime+0x3c>)
 80043aa:	6013      	str	r3, [r2, #0]
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr
 80043b8:	200005e8 	.word	0x200005e8
 80043bc:	20000630 	.word	0x20000630

080043c0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80043ca:	4b21      	ldr	r3, [pc, #132]	; (8004450 <prvAddCurrentTaskToDelayedList+0x90>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043d0:	4b20      	ldr	r3, [pc, #128]	; (8004454 <prvAddCurrentTaskToDelayedList+0x94>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	3304      	adds	r3, #4
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7ff fdb5 	bl	8003f46 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043e2:	d10a      	bne.n	80043fa <prvAddCurrentTaskToDelayedList+0x3a>
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d007      	beq.n	80043fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043ea:	4b1a      	ldr	r3, [pc, #104]	; (8004454 <prvAddCurrentTaskToDelayedList+0x94>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	3304      	adds	r3, #4
 80043f0:	4619      	mov	r1, r3
 80043f2:	4819      	ldr	r0, [pc, #100]	; (8004458 <prvAddCurrentTaskToDelayedList+0x98>)
 80043f4:	f7ff fd4a 	bl	8003e8c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80043f8:	e026      	b.n	8004448 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4413      	add	r3, r2
 8004400:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004402:	4b14      	ldr	r3, [pc, #80]	; (8004454 <prvAddCurrentTaskToDelayedList+0x94>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	429a      	cmp	r2, r3
 8004410:	d209      	bcs.n	8004426 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004412:	4b12      	ldr	r3, [pc, #72]	; (800445c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	4b0f      	ldr	r3, [pc, #60]	; (8004454 <prvAddCurrentTaskToDelayedList+0x94>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	3304      	adds	r3, #4
 800441c:	4619      	mov	r1, r3
 800441e:	4610      	mov	r0, r2
 8004420:	f7ff fd58 	bl	8003ed4 <vListInsert>
}
 8004424:	e010      	b.n	8004448 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004426:	4b0e      	ldr	r3, [pc, #56]	; (8004460 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	4b0a      	ldr	r3, [pc, #40]	; (8004454 <prvAddCurrentTaskToDelayedList+0x94>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	3304      	adds	r3, #4
 8004430:	4619      	mov	r1, r3
 8004432:	4610      	mov	r0, r2
 8004434:	f7ff fd4e 	bl	8003ed4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004438:	4b0a      	ldr	r3, [pc, #40]	; (8004464 <prvAddCurrentTaskToDelayedList+0xa4>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	429a      	cmp	r2, r3
 8004440:	d202      	bcs.n	8004448 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004442:	4a08      	ldr	r2, [pc, #32]	; (8004464 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	6013      	str	r3, [r2, #0]
}
 8004448:	bf00      	nop
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	2000061c 	.word	0x2000061c
 8004454:	20000184 	.word	0x20000184
 8004458:	20000604 	.word	0x20000604
 800445c:	200005ec 	.word	0x200005ec
 8004460:	200005e8 	.word	0x200005e8
 8004464:	20000630 	.word	0x20000630
	...

08004470 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004470:	4b07      	ldr	r3, [pc, #28]	; (8004490 <pxCurrentTCBConst2>)
 8004472:	6819      	ldr	r1, [r3, #0]
 8004474:	6808      	ldr	r0, [r1, #0]
 8004476:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800447a:	f380 8809 	msr	PSP, r0
 800447e:	f3bf 8f6f 	isb	sy
 8004482:	f04f 0000 	mov.w	r0, #0
 8004486:	f380 8811 	msr	BASEPRI, r0
 800448a:	4770      	bx	lr
 800448c:	f3af 8000 	nop.w

08004490 <pxCurrentTCBConst2>:
 8004490:	20000184 	.word	0x20000184
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004494:	bf00      	nop
 8004496:	bf00      	nop

08004498 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a2:	f383 8811 	msr	BASEPRI, r3
 80044a6:	f3bf 8f6f 	isb	sy
 80044aa:	f3bf 8f4f 	dsb	sy
 80044ae:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80044b0:	4b0e      	ldr	r3, [pc, #56]	; (80044ec <vPortEnterCritical+0x54>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	3301      	adds	r3, #1
 80044b6:	4a0d      	ldr	r2, [pc, #52]	; (80044ec <vPortEnterCritical+0x54>)
 80044b8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80044ba:	4b0c      	ldr	r3, [pc, #48]	; (80044ec <vPortEnterCritical+0x54>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d10e      	bne.n	80044e0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80044c2:	4b0b      	ldr	r3, [pc, #44]	; (80044f0 <vPortEnterCritical+0x58>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d009      	beq.n	80044e0 <vPortEnterCritical+0x48>
 80044cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d0:	f383 8811 	msr	BASEPRI, r3
 80044d4:	f3bf 8f6f 	isb	sy
 80044d8:	f3bf 8f4f 	dsb	sy
 80044dc:	603b      	str	r3, [r7, #0]
 80044de:	e7fe      	b.n	80044de <vPortEnterCritical+0x46>
	}
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr
 80044ec:	2000000c 	.word	0x2000000c
 80044f0:	e000ed04 	.word	0xe000ed04

080044f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80044fa:	4b11      	ldr	r3, [pc, #68]	; (8004540 <vPortExitCritical+0x4c>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d109      	bne.n	8004516 <vPortExitCritical+0x22>
 8004502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004506:	f383 8811 	msr	BASEPRI, r3
 800450a:	f3bf 8f6f 	isb	sy
 800450e:	f3bf 8f4f 	dsb	sy
 8004512:	607b      	str	r3, [r7, #4]
 8004514:	e7fe      	b.n	8004514 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004516:	4b0a      	ldr	r3, [pc, #40]	; (8004540 <vPortExitCritical+0x4c>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	3b01      	subs	r3, #1
 800451c:	4a08      	ldr	r2, [pc, #32]	; (8004540 <vPortExitCritical+0x4c>)
 800451e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004520:	4b07      	ldr	r3, [pc, #28]	; (8004540 <vPortExitCritical+0x4c>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d104      	bne.n	8004532 <vPortExitCritical+0x3e>
 8004528:	2300      	movs	r3, #0
 800452a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004532:	bf00      	nop
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	2000000c 	.word	0x2000000c
	...

08004550 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004550:	f3ef 8009 	mrs	r0, PSP
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	4b15      	ldr	r3, [pc, #84]	; (80045b0 <pxCurrentTCBConst>)
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	f01e 0f10 	tst.w	lr, #16
 8004560:	bf08      	it	eq
 8004562:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004566:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800456a:	6010      	str	r0, [r2, #0]
 800456c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004570:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004574:	f380 8811 	msr	BASEPRI, r0
 8004578:	f3bf 8f4f 	dsb	sy
 800457c:	f3bf 8f6f 	isb	sy
 8004580:	f7ff fea2 	bl	80042c8 <vTaskSwitchContext>
 8004584:	f04f 0000 	mov.w	r0, #0
 8004588:	f380 8811 	msr	BASEPRI, r0
 800458c:	bc09      	pop	{r0, r3}
 800458e:	6819      	ldr	r1, [r3, #0]
 8004590:	6808      	ldr	r0, [r1, #0]
 8004592:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004596:	f01e 0f10 	tst.w	lr, #16
 800459a:	bf08      	it	eq
 800459c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80045a0:	f380 8809 	msr	PSP, r0
 80045a4:	f3bf 8f6f 	isb	sy
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	f3af 8000 	nop.w

080045b0 <pxCurrentTCBConst>:
 80045b0:	20000184 	.word	0x20000184
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80045b4:	bf00      	nop
 80045b6:	bf00      	nop

080045b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
	__asm volatile
 80045be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c2:	f383 8811 	msr	BASEPRI, r3
 80045c6:	f3bf 8f6f 	isb	sy
 80045ca:	f3bf 8f4f 	dsb	sy
 80045ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80045d0:	f7ff fdc2 	bl	8004158 <xTaskIncrementTick>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80045da:	4b06      	ldr	r3, [pc, #24]	; (80045f4 <SysTick_Handler+0x3c>)
 80045dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045e0:	601a      	str	r2, [r3, #0]
 80045e2:	2300      	movs	r3, #0
 80045e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80045ec:	bf00      	nop
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	e000ed04 	.word	0xe000ed04

080045f8 <_ZdlPvj>:
 80045f8:	f000 b800 	b.w	80045fc <_ZdlPv>

080045fc <_ZdlPv>:
 80045fc:	f000 b824 	b.w	8004648 <free>

08004600 <__libc_init_array>:
 8004600:	b570      	push	{r4, r5, r6, lr}
 8004602:	4e0d      	ldr	r6, [pc, #52]	; (8004638 <__libc_init_array+0x38>)
 8004604:	4c0d      	ldr	r4, [pc, #52]	; (800463c <__libc_init_array+0x3c>)
 8004606:	1ba4      	subs	r4, r4, r6
 8004608:	10a4      	asrs	r4, r4, #2
 800460a:	2500      	movs	r5, #0
 800460c:	42a5      	cmp	r5, r4
 800460e:	d109      	bne.n	8004624 <__libc_init_array+0x24>
 8004610:	4e0b      	ldr	r6, [pc, #44]	; (8004640 <__libc_init_array+0x40>)
 8004612:	4c0c      	ldr	r4, [pc, #48]	; (8004644 <__libc_init_array+0x44>)
 8004614:	f000 f884 	bl	8004720 <_init>
 8004618:	1ba4      	subs	r4, r4, r6
 800461a:	10a4      	asrs	r4, r4, #2
 800461c:	2500      	movs	r5, #0
 800461e:	42a5      	cmp	r5, r4
 8004620:	d105      	bne.n	800462e <__libc_init_array+0x2e>
 8004622:	bd70      	pop	{r4, r5, r6, pc}
 8004624:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004628:	4798      	blx	r3
 800462a:	3501      	adds	r5, #1
 800462c:	e7ee      	b.n	800460c <__libc_init_array+0xc>
 800462e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004632:	4798      	blx	r3
 8004634:	3501      	adds	r5, #1
 8004636:	e7f2      	b.n	800461e <__libc_init_array+0x1e>
 8004638:	08004768 	.word	0x08004768
 800463c:	08004768 	.word	0x08004768
 8004640:	08004768 	.word	0x08004768
 8004644:	08004770 	.word	0x08004770

08004648 <free>:
 8004648:	4b02      	ldr	r3, [pc, #8]	; (8004654 <free+0xc>)
 800464a:	4601      	mov	r1, r0
 800464c:	6818      	ldr	r0, [r3, #0]
 800464e:	f000 b817 	b.w	8004680 <_free_r>
 8004652:	bf00      	nop
 8004654:	20000010 	.word	0x20000010

08004658 <memcpy>:
 8004658:	b510      	push	{r4, lr}
 800465a:	1e43      	subs	r3, r0, #1
 800465c:	440a      	add	r2, r1
 800465e:	4291      	cmp	r1, r2
 8004660:	d100      	bne.n	8004664 <memcpy+0xc>
 8004662:	bd10      	pop	{r4, pc}
 8004664:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004668:	f803 4f01 	strb.w	r4, [r3, #1]!
 800466c:	e7f7      	b.n	800465e <memcpy+0x6>

0800466e <memset>:
 800466e:	4402      	add	r2, r0
 8004670:	4603      	mov	r3, r0
 8004672:	4293      	cmp	r3, r2
 8004674:	d100      	bne.n	8004678 <memset+0xa>
 8004676:	4770      	bx	lr
 8004678:	f803 1b01 	strb.w	r1, [r3], #1
 800467c:	e7f9      	b.n	8004672 <memset+0x4>
	...

08004680 <_free_r>:
 8004680:	b538      	push	{r3, r4, r5, lr}
 8004682:	4605      	mov	r5, r0
 8004684:	2900      	cmp	r1, #0
 8004686:	d045      	beq.n	8004714 <_free_r+0x94>
 8004688:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800468c:	1f0c      	subs	r4, r1, #4
 800468e:	2b00      	cmp	r3, #0
 8004690:	bfb8      	it	lt
 8004692:	18e4      	addlt	r4, r4, r3
 8004694:	f000 f842 	bl	800471c <__malloc_lock>
 8004698:	4a1f      	ldr	r2, [pc, #124]	; (8004718 <_free_r+0x98>)
 800469a:	6813      	ldr	r3, [r2, #0]
 800469c:	4610      	mov	r0, r2
 800469e:	b933      	cbnz	r3, 80046ae <_free_r+0x2e>
 80046a0:	6063      	str	r3, [r4, #4]
 80046a2:	6014      	str	r4, [r2, #0]
 80046a4:	4628      	mov	r0, r5
 80046a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046aa:	f000 b838 	b.w	800471e <__malloc_unlock>
 80046ae:	42a3      	cmp	r3, r4
 80046b0:	d90c      	bls.n	80046cc <_free_r+0x4c>
 80046b2:	6821      	ldr	r1, [r4, #0]
 80046b4:	1862      	adds	r2, r4, r1
 80046b6:	4293      	cmp	r3, r2
 80046b8:	bf04      	itt	eq
 80046ba:	681a      	ldreq	r2, [r3, #0]
 80046bc:	685b      	ldreq	r3, [r3, #4]
 80046be:	6063      	str	r3, [r4, #4]
 80046c0:	bf04      	itt	eq
 80046c2:	1852      	addeq	r2, r2, r1
 80046c4:	6022      	streq	r2, [r4, #0]
 80046c6:	6004      	str	r4, [r0, #0]
 80046c8:	e7ec      	b.n	80046a4 <_free_r+0x24>
 80046ca:	4613      	mov	r3, r2
 80046cc:	685a      	ldr	r2, [r3, #4]
 80046ce:	b10a      	cbz	r2, 80046d4 <_free_r+0x54>
 80046d0:	42a2      	cmp	r2, r4
 80046d2:	d9fa      	bls.n	80046ca <_free_r+0x4a>
 80046d4:	6819      	ldr	r1, [r3, #0]
 80046d6:	1858      	adds	r0, r3, r1
 80046d8:	42a0      	cmp	r0, r4
 80046da:	d10b      	bne.n	80046f4 <_free_r+0x74>
 80046dc:	6820      	ldr	r0, [r4, #0]
 80046de:	4401      	add	r1, r0
 80046e0:	1858      	adds	r0, r3, r1
 80046e2:	4282      	cmp	r2, r0
 80046e4:	6019      	str	r1, [r3, #0]
 80046e6:	d1dd      	bne.n	80046a4 <_free_r+0x24>
 80046e8:	6810      	ldr	r0, [r2, #0]
 80046ea:	6852      	ldr	r2, [r2, #4]
 80046ec:	605a      	str	r2, [r3, #4]
 80046ee:	4401      	add	r1, r0
 80046f0:	6019      	str	r1, [r3, #0]
 80046f2:	e7d7      	b.n	80046a4 <_free_r+0x24>
 80046f4:	d902      	bls.n	80046fc <_free_r+0x7c>
 80046f6:	230c      	movs	r3, #12
 80046f8:	602b      	str	r3, [r5, #0]
 80046fa:	e7d3      	b.n	80046a4 <_free_r+0x24>
 80046fc:	6820      	ldr	r0, [r4, #0]
 80046fe:	1821      	adds	r1, r4, r0
 8004700:	428a      	cmp	r2, r1
 8004702:	bf04      	itt	eq
 8004704:	6811      	ldreq	r1, [r2, #0]
 8004706:	6852      	ldreq	r2, [r2, #4]
 8004708:	6062      	str	r2, [r4, #4]
 800470a:	bf04      	itt	eq
 800470c:	1809      	addeq	r1, r1, r0
 800470e:	6021      	streq	r1, [r4, #0]
 8004710:	605c      	str	r4, [r3, #4]
 8004712:	e7c7      	b.n	80046a4 <_free_r+0x24>
 8004714:	bd38      	pop	{r3, r4, r5, pc}
 8004716:	bf00      	nop
 8004718:	20000638 	.word	0x20000638

0800471c <__malloc_lock>:
 800471c:	4770      	bx	lr

0800471e <__malloc_unlock>:
 800471e:	4770      	bx	lr

08004720 <_init>:
 8004720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004722:	bf00      	nop
 8004724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004726:	bc08      	pop	{r3}
 8004728:	469e      	mov	lr, r3
 800472a:	4770      	bx	lr

0800472c <_fini>:
 800472c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800472e:	bf00      	nop
 8004730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004732:	bc08      	pop	{r3}
 8004734:	469e      	mov	lr, r3
 8004736:	4770      	bx	lr
