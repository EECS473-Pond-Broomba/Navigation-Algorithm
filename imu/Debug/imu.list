
imu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000664c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080067ec  080067ec  000167ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006834  08006834  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006834  08006834  00016834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800683c  0800683c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800683c  0800683c  0001683c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08006844  08006844  00016844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800684c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a50  20000074  080068c0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004ac4  080068c0  00024ac4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019ded  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000311c  00000000  00000000  00039e91  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015b8  00000000  00000000  0003cfb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001488  00000000  00000000  0003e568  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017b7d  00000000  00000000  0003f9f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000104df  00000000  00000000  0005756d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00098acf  00000000  00000000  00067a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010051b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e78  00000000  00000000  00100598  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080067d4 	.word	0x080067d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080067d4 	.word	0x080067d4

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800031e:	f1a4 0401 	sub.w	r4, r4, #1
 8000322:	d1e9      	bne.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_uldivmod>:
 800097c:	b953      	cbnz	r3, 8000994 <__aeabi_uldivmod+0x18>
 800097e:	b94a      	cbnz	r2, 8000994 <__aeabi_uldivmod+0x18>
 8000980:	2900      	cmp	r1, #0
 8000982:	bf08      	it	eq
 8000984:	2800      	cmpeq	r0, #0
 8000986:	bf1c      	itt	ne
 8000988:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800098c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000990:	f000 b972 	b.w	8000c78 <__aeabi_idiv0>
 8000994:	f1ad 0c08 	sub.w	ip, sp, #8
 8000998:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800099c:	f000 f806 	bl	80009ac <__udivmoddi4>
 80009a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009a8:	b004      	add	sp, #16
 80009aa:	4770      	bx	lr

080009ac <__udivmoddi4>:
 80009ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009b0:	9e08      	ldr	r6, [sp, #32]
 80009b2:	4604      	mov	r4, r0
 80009b4:	4688      	mov	r8, r1
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d14b      	bne.n	8000a52 <__udivmoddi4+0xa6>
 80009ba:	428a      	cmp	r2, r1
 80009bc:	4615      	mov	r5, r2
 80009be:	d967      	bls.n	8000a90 <__udivmoddi4+0xe4>
 80009c0:	fab2 f282 	clz	r2, r2
 80009c4:	b14a      	cbz	r2, 80009da <__udivmoddi4+0x2e>
 80009c6:	f1c2 0720 	rsb	r7, r2, #32
 80009ca:	fa01 f302 	lsl.w	r3, r1, r2
 80009ce:	fa20 f707 	lsr.w	r7, r0, r7
 80009d2:	4095      	lsls	r5, r2
 80009d4:	ea47 0803 	orr.w	r8, r7, r3
 80009d8:	4094      	lsls	r4, r2
 80009da:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80009de:	0c23      	lsrs	r3, r4, #16
 80009e0:	fbb8 f7fe 	udiv	r7, r8, lr
 80009e4:	fa1f fc85 	uxth.w	ip, r5
 80009e8:	fb0e 8817 	mls	r8, lr, r7, r8
 80009ec:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009f0:	fb07 f10c 	mul.w	r1, r7, ip
 80009f4:	4299      	cmp	r1, r3
 80009f6:	d909      	bls.n	8000a0c <__udivmoddi4+0x60>
 80009f8:	18eb      	adds	r3, r5, r3
 80009fa:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80009fe:	f080 811b 	bcs.w	8000c38 <__udivmoddi4+0x28c>
 8000a02:	4299      	cmp	r1, r3
 8000a04:	f240 8118 	bls.w	8000c38 <__udivmoddi4+0x28c>
 8000a08:	3f02      	subs	r7, #2
 8000a0a:	442b      	add	r3, r5
 8000a0c:	1a5b      	subs	r3, r3, r1
 8000a0e:	b2a4      	uxth	r4, r4
 8000a10:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a14:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a1c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a20:	45a4      	cmp	ip, r4
 8000a22:	d909      	bls.n	8000a38 <__udivmoddi4+0x8c>
 8000a24:	192c      	adds	r4, r5, r4
 8000a26:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000a2a:	f080 8107 	bcs.w	8000c3c <__udivmoddi4+0x290>
 8000a2e:	45a4      	cmp	ip, r4
 8000a30:	f240 8104 	bls.w	8000c3c <__udivmoddi4+0x290>
 8000a34:	3802      	subs	r0, #2
 8000a36:	442c      	add	r4, r5
 8000a38:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000a3c:	eba4 040c 	sub.w	r4, r4, ip
 8000a40:	2700      	movs	r7, #0
 8000a42:	b11e      	cbz	r6, 8000a4c <__udivmoddi4+0xa0>
 8000a44:	40d4      	lsrs	r4, r2
 8000a46:	2300      	movs	r3, #0
 8000a48:	e9c6 4300 	strd	r4, r3, [r6]
 8000a4c:	4639      	mov	r1, r7
 8000a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a52:	428b      	cmp	r3, r1
 8000a54:	d909      	bls.n	8000a6a <__udivmoddi4+0xbe>
 8000a56:	2e00      	cmp	r6, #0
 8000a58:	f000 80eb 	beq.w	8000c32 <__udivmoddi4+0x286>
 8000a5c:	2700      	movs	r7, #0
 8000a5e:	e9c6 0100 	strd	r0, r1, [r6]
 8000a62:	4638      	mov	r0, r7
 8000a64:	4639      	mov	r1, r7
 8000a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a6a:	fab3 f783 	clz	r7, r3
 8000a6e:	2f00      	cmp	r7, #0
 8000a70:	d147      	bne.n	8000b02 <__udivmoddi4+0x156>
 8000a72:	428b      	cmp	r3, r1
 8000a74:	d302      	bcc.n	8000a7c <__udivmoddi4+0xd0>
 8000a76:	4282      	cmp	r2, r0
 8000a78:	f200 80fa 	bhi.w	8000c70 <__udivmoddi4+0x2c4>
 8000a7c:	1a84      	subs	r4, r0, r2
 8000a7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000a82:	2001      	movs	r0, #1
 8000a84:	4698      	mov	r8, r3
 8000a86:	2e00      	cmp	r6, #0
 8000a88:	d0e0      	beq.n	8000a4c <__udivmoddi4+0xa0>
 8000a8a:	e9c6 4800 	strd	r4, r8, [r6]
 8000a8e:	e7dd      	b.n	8000a4c <__udivmoddi4+0xa0>
 8000a90:	b902      	cbnz	r2, 8000a94 <__udivmoddi4+0xe8>
 8000a92:	deff      	udf	#255	; 0xff
 8000a94:	fab2 f282 	clz	r2, r2
 8000a98:	2a00      	cmp	r2, #0
 8000a9a:	f040 808f 	bne.w	8000bbc <__udivmoddi4+0x210>
 8000a9e:	1b49      	subs	r1, r1, r5
 8000aa0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000aa4:	fa1f f885 	uxth.w	r8, r5
 8000aa8:	2701      	movs	r7, #1
 8000aaa:	fbb1 fcfe 	udiv	ip, r1, lr
 8000aae:	0c23      	lsrs	r3, r4, #16
 8000ab0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ab4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ab8:	fb08 f10c 	mul.w	r1, r8, ip
 8000abc:	4299      	cmp	r1, r3
 8000abe:	d907      	bls.n	8000ad0 <__udivmoddi4+0x124>
 8000ac0:	18eb      	adds	r3, r5, r3
 8000ac2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000ac6:	d202      	bcs.n	8000ace <__udivmoddi4+0x122>
 8000ac8:	4299      	cmp	r1, r3
 8000aca:	f200 80cd 	bhi.w	8000c68 <__udivmoddi4+0x2bc>
 8000ace:	4684      	mov	ip, r0
 8000ad0:	1a59      	subs	r1, r3, r1
 8000ad2:	b2a3      	uxth	r3, r4
 8000ad4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ad8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000adc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ae0:	fb08 f800 	mul.w	r8, r8, r0
 8000ae4:	45a0      	cmp	r8, r4
 8000ae6:	d907      	bls.n	8000af8 <__udivmoddi4+0x14c>
 8000ae8:	192c      	adds	r4, r5, r4
 8000aea:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000aee:	d202      	bcs.n	8000af6 <__udivmoddi4+0x14a>
 8000af0:	45a0      	cmp	r8, r4
 8000af2:	f200 80b6 	bhi.w	8000c62 <__udivmoddi4+0x2b6>
 8000af6:	4618      	mov	r0, r3
 8000af8:	eba4 0408 	sub.w	r4, r4, r8
 8000afc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b00:	e79f      	b.n	8000a42 <__udivmoddi4+0x96>
 8000b02:	f1c7 0c20 	rsb	ip, r7, #32
 8000b06:	40bb      	lsls	r3, r7
 8000b08:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b0c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b10:	fa01 f407 	lsl.w	r4, r1, r7
 8000b14:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b18:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b1c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b20:	4325      	orrs	r5, r4
 8000b22:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b26:	0c2c      	lsrs	r4, r5, #16
 8000b28:	fb08 3319 	mls	r3, r8, r9, r3
 8000b2c:	fa1f fa8e 	uxth.w	sl, lr
 8000b30:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000b34:	fb09 f40a 	mul.w	r4, r9, sl
 8000b38:	429c      	cmp	r4, r3
 8000b3a:	fa02 f207 	lsl.w	r2, r2, r7
 8000b3e:	fa00 f107 	lsl.w	r1, r0, r7
 8000b42:	d90b      	bls.n	8000b5c <__udivmoddi4+0x1b0>
 8000b44:	eb1e 0303 	adds.w	r3, lr, r3
 8000b48:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000b4c:	f080 8087 	bcs.w	8000c5e <__udivmoddi4+0x2b2>
 8000b50:	429c      	cmp	r4, r3
 8000b52:	f240 8084 	bls.w	8000c5e <__udivmoddi4+0x2b2>
 8000b56:	f1a9 0902 	sub.w	r9, r9, #2
 8000b5a:	4473      	add	r3, lr
 8000b5c:	1b1b      	subs	r3, r3, r4
 8000b5e:	b2ad      	uxth	r5, r5
 8000b60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b64:	fb08 3310 	mls	r3, r8, r0, r3
 8000b68:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000b6c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000b70:	45a2      	cmp	sl, r4
 8000b72:	d908      	bls.n	8000b86 <__udivmoddi4+0x1da>
 8000b74:	eb1e 0404 	adds.w	r4, lr, r4
 8000b78:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b7c:	d26b      	bcs.n	8000c56 <__udivmoddi4+0x2aa>
 8000b7e:	45a2      	cmp	sl, r4
 8000b80:	d969      	bls.n	8000c56 <__udivmoddi4+0x2aa>
 8000b82:	3802      	subs	r0, #2
 8000b84:	4474      	add	r4, lr
 8000b86:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000b8e:	eba4 040a 	sub.w	r4, r4, sl
 8000b92:	454c      	cmp	r4, r9
 8000b94:	46c2      	mov	sl, r8
 8000b96:	464b      	mov	r3, r9
 8000b98:	d354      	bcc.n	8000c44 <__udivmoddi4+0x298>
 8000b9a:	d051      	beq.n	8000c40 <__udivmoddi4+0x294>
 8000b9c:	2e00      	cmp	r6, #0
 8000b9e:	d069      	beq.n	8000c74 <__udivmoddi4+0x2c8>
 8000ba0:	ebb1 050a 	subs.w	r5, r1, sl
 8000ba4:	eb64 0403 	sbc.w	r4, r4, r3
 8000ba8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000bac:	40fd      	lsrs	r5, r7
 8000bae:	40fc      	lsrs	r4, r7
 8000bb0:	ea4c 0505 	orr.w	r5, ip, r5
 8000bb4:	e9c6 5400 	strd	r5, r4, [r6]
 8000bb8:	2700      	movs	r7, #0
 8000bba:	e747      	b.n	8000a4c <__udivmoddi4+0xa0>
 8000bbc:	f1c2 0320 	rsb	r3, r2, #32
 8000bc0:	fa20 f703 	lsr.w	r7, r0, r3
 8000bc4:	4095      	lsls	r5, r2
 8000bc6:	fa01 f002 	lsl.w	r0, r1, r2
 8000bca:	fa21 f303 	lsr.w	r3, r1, r3
 8000bce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bd2:	4338      	orrs	r0, r7
 8000bd4:	0c01      	lsrs	r1, r0, #16
 8000bd6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000bda:	fa1f f885 	uxth.w	r8, r5
 8000bde:	fb0e 3317 	mls	r3, lr, r7, r3
 8000be2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000be6:	fb07 f308 	mul.w	r3, r7, r8
 8000bea:	428b      	cmp	r3, r1
 8000bec:	fa04 f402 	lsl.w	r4, r4, r2
 8000bf0:	d907      	bls.n	8000c02 <__udivmoddi4+0x256>
 8000bf2:	1869      	adds	r1, r5, r1
 8000bf4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000bf8:	d22f      	bcs.n	8000c5a <__udivmoddi4+0x2ae>
 8000bfa:	428b      	cmp	r3, r1
 8000bfc:	d92d      	bls.n	8000c5a <__udivmoddi4+0x2ae>
 8000bfe:	3f02      	subs	r7, #2
 8000c00:	4429      	add	r1, r5
 8000c02:	1acb      	subs	r3, r1, r3
 8000c04:	b281      	uxth	r1, r0
 8000c06:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c0a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c12:	fb00 f308 	mul.w	r3, r0, r8
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d907      	bls.n	8000c2a <__udivmoddi4+0x27e>
 8000c1a:	1869      	adds	r1, r5, r1
 8000c1c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000c20:	d217      	bcs.n	8000c52 <__udivmoddi4+0x2a6>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d915      	bls.n	8000c52 <__udivmoddi4+0x2a6>
 8000c26:	3802      	subs	r0, #2
 8000c28:	4429      	add	r1, r5
 8000c2a:	1ac9      	subs	r1, r1, r3
 8000c2c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000c30:	e73b      	b.n	8000aaa <__udivmoddi4+0xfe>
 8000c32:	4637      	mov	r7, r6
 8000c34:	4630      	mov	r0, r6
 8000c36:	e709      	b.n	8000a4c <__udivmoddi4+0xa0>
 8000c38:	4607      	mov	r7, r0
 8000c3a:	e6e7      	b.n	8000a0c <__udivmoddi4+0x60>
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	e6fb      	b.n	8000a38 <__udivmoddi4+0x8c>
 8000c40:	4541      	cmp	r1, r8
 8000c42:	d2ab      	bcs.n	8000b9c <__udivmoddi4+0x1f0>
 8000c44:	ebb8 0a02 	subs.w	sl, r8, r2
 8000c48:	eb69 020e 	sbc.w	r2, r9, lr
 8000c4c:	3801      	subs	r0, #1
 8000c4e:	4613      	mov	r3, r2
 8000c50:	e7a4      	b.n	8000b9c <__udivmoddi4+0x1f0>
 8000c52:	4660      	mov	r0, ip
 8000c54:	e7e9      	b.n	8000c2a <__udivmoddi4+0x27e>
 8000c56:	4618      	mov	r0, r3
 8000c58:	e795      	b.n	8000b86 <__udivmoddi4+0x1da>
 8000c5a:	4667      	mov	r7, ip
 8000c5c:	e7d1      	b.n	8000c02 <__udivmoddi4+0x256>
 8000c5e:	4681      	mov	r9, r0
 8000c60:	e77c      	b.n	8000b5c <__udivmoddi4+0x1b0>
 8000c62:	3802      	subs	r0, #2
 8000c64:	442c      	add	r4, r5
 8000c66:	e747      	b.n	8000af8 <__udivmoddi4+0x14c>
 8000c68:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c6c:	442b      	add	r3, r5
 8000c6e:	e72f      	b.n	8000ad0 <__udivmoddi4+0x124>
 8000c70:	4638      	mov	r0, r7
 8000c72:	e708      	b.n	8000a86 <__udivmoddi4+0xda>
 8000c74:	4637      	mov	r7, r6
 8000c76:	e6e9      	b.n	8000a4c <__udivmoddi4+0xa0>

08000c78 <__aeabi_idiv0>:
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop

08000c7c <_ZN3IMUC1Ev>:
 *      Author: cy
 */

#include <IMU/IMU.h>

IMU::IMU() {
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <_ZN3IMUC1Ev+0x1c>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	601a      	str	r2, [r3, #0]
	// Auto-generated constructor stub
}
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	08006814 	.word	0x08006814

08000c9c <_ZN3IMUD1Ev>:

IMU::~IMU() {
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <_ZN3IMUD1Ev+0x1c>)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	601a      	str	r2, [r3, #0]
	// Auto-generated destructor stub
}
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4618      	mov	r0, r3
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	08006814 	.word	0x08006814

08000cbc <_ZN3IMUD0Ev>:
IMU::~IMU() {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
}
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	f7ff ffe9 	bl	8000c9c <_ZN3IMUD1Ev>
 8000cca:	2110      	movs	r1, #16
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f005 fced 	bl	80066ac <_ZdlPvj>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <_ZN3IMU13initializeIMUEP17I2C_HandleTypeDef>:

void IMU::initializeIMU(I2C_HandleTypeDef* handle) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
	hi2c = handle;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	683a      	ldr	r2, [r7, #0]
 8000cea:	605a      	str	r2, [r3, #4]
	// Set mode to NDOF
	setMode(IMU_Mode::OPR_MODE_NDOF);
 8000cec:	210c      	movs	r1, #12
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f000 f860 	bl	8000db4 <_ZN3IMU7setModeENS_8IMU_ModeE>
	// Set Euler Angles units to degrees
	eulerAngleUnits = false;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	72da      	strb	r2, [r3, #11]
	// Set Angular Rate units to Dps
	gyroscopeUnits = false;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	729a      	strb	r2, [r3, #10]
	// Set Acceleration units to m/s^2
	totalAccelerationUnits = false;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2200      	movs	r2, #0
 8000d04:	725a      	strb	r2, [r3, #9]
	// Set Temperature units to C
	tempUnits = false;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2200      	movs	r2, #0
 8000d0a:	731a      	strb	r2, [r3, #12]
	// Set data output format to Windows format
	write8(Registers::BNO055_UNIT_SEL_ADDR, 0x00);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	213b      	movs	r1, #59	; 0x3b
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f000 f86c 	bl	8000dee <_ZN3IMU6write8Ehh>
	vTaskDelay(20);
 8000d16:	2014      	movs	r0, #20
 8000d18:	f004 f824 	bl	8004d64 <vTaskDelay>
}
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <_ZN3IMU14getOrientationENS_4AxesE>:

double IMU::getOrientation(Axes axis) {
 8000d24:	b590      	push	{r4, r7, lr}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	70fb      	strb	r3, [r7, #3]
	// Set register we need to read depending on the axis passed in
	uint8_t registerToRead = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	73fb      	strb	r3, [r7, #15]
	switch(axis) {
 8000d34:	78fb      	ldrb	r3, [r7, #3]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d007      	beq.n	8000d4a <_ZN3IMU14getOrientationENS_4AxesE+0x26>
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	d008      	beq.n	8000d50 <_ZN3IMU14getOrientationENS_4AxesE+0x2c>
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d000      	beq.n	8000d44 <_ZN3IMU14getOrientationENS_4AxesE+0x20>
		break;
	case Axes::z:
		registerToRead = Registers::BNO055_EULER_H_LSB_ADDR;
		break;
	default:
		break;
 8000d42:	e008      	b.n	8000d56 <_ZN3IMU14getOrientationENS_4AxesE+0x32>
		registerToRead = Registers::BNO055_EULER_P_LSB_ADDR;
 8000d44:	231e      	movs	r3, #30
 8000d46:	73fb      	strb	r3, [r7, #15]
		break;
 8000d48:	e005      	b.n	8000d56 <_ZN3IMU14getOrientationENS_4AxesE+0x32>
		registerToRead = Registers::BNO055_EULER_R_LSB_ADDR;
 8000d4a:	231c      	movs	r3, #28
 8000d4c:	73fb      	strb	r3, [r7, #15]
		break;
 8000d4e:	e002      	b.n	8000d56 <_ZN3IMU14getOrientationENS_4AxesE+0x32>
		registerToRead = Registers::BNO055_EULER_H_LSB_ADDR;
 8000d50:	231a      	movs	r3, #26
 8000d52:	73fb      	strb	r3, [r7, #15]
		break;
 8000d54:	bf00      	nop
	}

	// Read the data registers
	uint16_t data = read16(registerToRead);
 8000d56:	7bfb      	ldrb	r3, [r7, #15]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f000 f864 	bl	8000e28 <_ZN3IMU6read16Eh>
 8000d60:	4603      	mov	r3, r0
 8000d62:	81bb      	strh	r3, [r7, #12]
	// Section 3.6.5.4 of datasheet for conversion from LSBs to deg/rad
	return eulerAngleUnits ? (double)data / 900.0 : (double)data / 16.0;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	7adb      	ldrb	r3, [r3, #11]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d00b      	beq.n	8000d84 <_ZN3IMU14getOrientationENS_4AxesE+0x60>
 8000d6c:	89bb      	ldrh	r3, [r7, #12]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff fb78 	bl	8000464 <__aeabi_ui2d>
 8000d74:	f04f 0200 	mov.w	r2, #0
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <_ZN3IMU14getOrientationENS_4AxesE+0x88>)
 8000d7a:	f7ff fd17 	bl	80007ac <__aeabi_ddiv>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	460c      	mov	r4, r1
 8000d82:	e00a      	b.n	8000d9a <_ZN3IMU14getOrientationENS_4AxesE+0x76>
 8000d84:	89bb      	ldrh	r3, [r7, #12]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff fb6c 	bl	8000464 <__aeabi_ui2d>
 8000d8c:	f04f 0200 	mov.w	r2, #0
 8000d90:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <_ZN3IMU14getOrientationENS_4AxesE+0x8c>)
 8000d92:	f7ff fd0b 	bl	80007ac <__aeabi_ddiv>
 8000d96:	4603      	mov	r3, r0
 8000d98:	460c      	mov	r4, r1
 8000d9a:	ec44 3b17 	vmov	d7, r3, r4
}
 8000d9e:	eeb0 0a47 	vmov.f32	s0, s14
 8000da2:	eef0 0a67 	vmov.f32	s1, s15
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd90      	pop	{r4, r7, pc}
 8000dac:	408c2000 	.word	0x408c2000
 8000db0:	40300000 	.word	0x40300000

08000db4 <_ZN3IMU7setModeENS_8IMU_ModeE>:
	uint16_t data = read16(registerToRead);
	// Section 3.6.5.6 of datasheet for conversion from LSBs to m/s^2
	return (double)data / 100.0;
}

void IMU::setMode(IMU_Mode mode) {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	70fb      	strb	r3, [r7, #3]
	write8(Registers::BNO055_OPR_MODE_ADDR, mode);
 8000dc0:	78fb      	ldrb	r3, [r7, #3]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	213d      	movs	r1, #61	; 0x3d
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f000 f811 	bl	8000dee <_ZN3IMU6write8Ehh>
	currentMode = mode;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	78fa      	ldrb	r2, [r7, #3]
 8000dd0:	721a      	strb	r2, [r3, #8]
	// Time required to switch between operating modes (Datasheet Table 3-6)
	mode == IMU_Mode::OPR_MODE_CONFIGMODE ? vTaskDelay(19) : vTaskDelay(7);
 8000dd2:	78fb      	ldrb	r3, [r7, #3]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d103      	bne.n	8000de0 <_ZN3IMU7setModeENS_8IMU_ModeE+0x2c>
 8000dd8:	2013      	movs	r0, #19
 8000dda:	f003 ffc3 	bl	8004d64 <vTaskDelay>
	return;
 8000dde:	e003      	b.n	8000de8 <_ZN3IMU7setModeENS_8IMU_ModeE+0x34>
	mode == IMU_Mode::OPR_MODE_CONFIGMODE ? vTaskDelay(19) : vTaskDelay(7);
 8000de0:	2007      	movs	r0, #7
 8000de2:	f003 ffbf 	bl	8004d64 <vTaskDelay>
	return;
 8000de6:	bf00      	nop
}
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <_ZN3IMU6write8Ehh>:

HAL_StatusTypeDef IMU::write8(uint8_t reg, uint8_t value) {
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b086      	sub	sp, #24
 8000df2:	af02      	add	r7, sp, #8
 8000df4:	6078      	str	r0, [r7, #4]
 8000df6:	460b      	mov	r3, r1
 8000df8:	70fb      	strb	r3, [r7, #3]
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef ret;
	// Combine reg and value into a buffer
	uint8_t buffer[2];
	buffer[0] = reg;
 8000dfe:	78fb      	ldrb	r3, [r7, #3]
 8000e00:	733b      	strb	r3, [r7, #12]
	buffer[1] = value;
 8000e02:	78bb      	ldrb	r3, [r7, #2]
 8000e04:	737b      	strb	r3, [r7, #13]
	// Send buffer over
	ret = HAL_I2C_Master_Transmit(hi2c, IMU_I2C_ADDR << 1, buffer, 2, 2);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6858      	ldr	r0, [r3, #4]
 8000e0a:	f107 020c 	add.w	r2, r7, #12
 8000e0e:	2302      	movs	r3, #2
 8000e10:	9300      	str	r3, [sp, #0]
 8000e12:	2302      	movs	r3, #2
 8000e14:	2150      	movs	r1, #80	; 0x50
 8000e16:	f000 ff7d 	bl	8001d14 <HAL_I2C_Master_Transmit>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	73fb      	strb	r3, [r7, #15]
	return ret;
 8000e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3710      	adds	r7, #16
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <_ZN3IMU6read16Eh>:
		return 0xFF;
	}
	return value;
}

uint16_t IMU::read16(uint8_t reg) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af02      	add	r7, sp, #8
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	460b      	mov	r3, r1
 8000e32:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef ret;
	uint8_t buffer[2];
	// Tell sensor that we want to read from reg
	ret = HAL_I2C_Master_Transmit(hi2c, IMU_I2C_ADDR << 1, &reg, 1, I2C_TIMEOUT);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6858      	ldr	r0, [r3, #4]
 8000e38:	1cfa      	adds	r2, r7, #3
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	9300      	str	r3, [sp, #0]
 8000e3e:	2301      	movs	r3, #1
 8000e40:	2150      	movs	r1, #80	; 0x50
 8000e42:	f000 ff67 	bl	8001d14 <HAL_I2C_Master_Transmit>
 8000e46:	4603      	mov	r3, r0
 8000e48:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) {
 8000e4a:	7bfb      	ldrb	r3, [r7, #15]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d002      	beq.n	8000e56 <_ZN3IMU6read16Eh+0x2e>
		return 0xFFFF;
 8000e50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e54:	e01a      	b.n	8000e8c <_ZN3IMU6read16Eh+0x64>
	}
	// Read 1 byte from reg
	ret = HAL_I2C_Master_Receive(hi2c, IMU_I2C_ADDR << 1, buffer, 2, I2C_TIMEOUT);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6858      	ldr	r0, [r3, #4]
 8000e5a:	f107 0208 	add.w	r2, r7, #8
 8000e5e:	2302      	movs	r3, #2
 8000e60:	9300      	str	r3, [sp, #0]
 8000e62:	2302      	movs	r3, #2
 8000e64:	2150      	movs	r1, #80	; 0x50
 8000e66:	f001 f853 	bl	8001f10 <HAL_I2C_Master_Receive>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) {
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d002      	beq.n	8000e7a <_ZN3IMU6read16Eh+0x52>
		return 0xFFFF;
 8000e74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e78:	e008      	b.n	8000e8c <_ZN3IMU6read16Eh+0x64>
	}
	// The LSB is always at the lower register address, so cast buffer[0] into 16 bits and shift it left by 8
	// And then OR with MSB to combine into 2 bytes
	uint16_t value = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000e7a:	7a7b      	ldrb	r3, [r7, #9]
 8000e7c:	021b      	lsls	r3, r3, #8
 8000e7e:	b21a      	sxth	r2, r3
 8000e80:	7a3b      	ldrb	r3, [r7, #8]
 8000e82:	b21b      	sxth	r3, r3
 8000e84:	4313      	orrs	r3, r2
 8000e86:	b21b      	sxth	r3, r3
 8000e88:	81bb      	strh	r3, [r7, #12]
	return value;
 8000e8a:	89bb      	ldrh	r3, [r7, #12]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <_Z13GetEulerAnglePv>:
static void MX_I2C1_Init(void);


// Our tasks
// Gets the Euler angle orientation and prints it out every 1 second
void GetEulerAngle(void* arg) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
//	TickType_t xLastWakeTime;
//	const TickType_t xPeriod = pdMS_TO_TICKS(1000);
//	xLastWakeTime = xTaskGetTickCount();
	while(1) {
//		vTaskDelayUntil(&xLastWakeTime, xPeriod);
		double zOrientation = imu.getOrientation(imu.Axes::z);
 8000e9c:	2102      	movs	r1, #2
 8000e9e:	4804      	ldr	r0, [pc, #16]	; (8000eb0 <_Z13GetEulerAnglePv+0x1c>)
 8000ea0:	f7ff ff40 	bl	8000d24 <_ZN3IMU14getOrientationENS_4AxesE>
 8000ea4:	ed87 0b02 	vstr	d0, [r7, #8]
		vTaskDelay(100);
 8000ea8:	2064      	movs	r0, #100	; 0x64
 8000eaa:	f003 ff5b 	bl	8004d64 <vTaskDelay>
	}
 8000eae:	e7f5      	b.n	8000e9c <_Z13GetEulerAnglePv+0x8>
 8000eb0:	20000128 	.word	0x20000128

08000eb4 <main>:
}

int main(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af02      	add	r7, sp, #8
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eba:	f000 fb33 	bl	8001524 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000ebe:	f000 f827 	bl	8000f10 <_Z18SystemClock_Configv>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec2:	f000 f8fd 	bl	80010c0 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000ec6:	f000 f8cd 	bl	8001064 <_ZL19MX_USART2_UART_Initv>
  MX_I2C1_Init();
 8000eca:	f000 f897 	bl	8000ffc <_ZL12MX_I2C1_Initv>
  imu.initializeIMU(&hi2c1);
 8000ece:	490b      	ldr	r1, [pc, #44]	; (8000efc <main+0x48>)
 8000ed0:	480b      	ldr	r0, [pc, #44]	; (8000f00 <main+0x4c>)
 8000ed2:	f7ff ff03 	bl	8000cdc <_ZN3IMU13initializeIMUEP17I2C_HandleTypeDef>
//  osThreadDef(temp, GetEulerAngle, osPriorityNormal, 1, 1024);

//  eulerAngleHandle = osThreadCreate(osThread(temp), NULL);
//  osThreadId_t GetEulerAngleHandle = osThreadNew(GetEulerAngle, NULL, &GetEulerAngle_attributes);
//  osDelay(10);
  taskCreateStatus = xTaskCreate(GetEulerAngle, "task1", 128, NULL, 1, NULL);
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	9301      	str	r3, [sp, #4]
 8000eda:	2301      	movs	r3, #1
 8000edc:	9300      	str	r3, [sp, #0]
 8000ede:	2300      	movs	r3, #0
 8000ee0:	2280      	movs	r2, #128	; 0x80
 8000ee2:	4908      	ldr	r1, [pc, #32]	; (8000f04 <main+0x50>)
 8000ee4:	4808      	ldr	r0, [pc, #32]	; (8000f08 <main+0x54>)
 8000ee6:	f003 fdf9 	bl	8004adc <xTaskCreate>
 8000eea:	4602      	mov	r2, r0
 8000eec:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <main+0x58>)
 8000eee:	601a      	str	r2, [r3, #0]
  vTaskStartScheduler();
 8000ef0:	f003 ff6c 	bl	8004dcc <vTaskStartScheduler>
  int dummy = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	607b      	str	r3, [r7, #4]
//  kernelStatus = osKernelStart();

  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <main+0x44>
 8000efa:	bf00      	nop
 8000efc:	20000090 	.word	0x20000090
 8000f00:	20000128 	.word	0x20000128
 8000f04:	080067ec 	.word	0x080067ec
 8000f08:	08000e95 	.word	0x08000e95
 8000f0c:	20000124 	.word	0x20000124

08000f10 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b094      	sub	sp, #80	; 0x50
 8000f14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f16:	f107 0320 	add.w	r3, r7, #32
 8000f1a:	2230      	movs	r2, #48	; 0x30
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f005 fbff 	bl	8006722 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f24:	f107 030c 	add.w	r3, r7, #12
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f34:	2300      	movs	r3, #0
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	4b2e      	ldr	r3, [pc, #184]	; (8000ff4 <_Z18SystemClock_Configv+0xe4>)
 8000f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3c:	4a2d      	ldr	r2, [pc, #180]	; (8000ff4 <_Z18SystemClock_Configv+0xe4>)
 8000f3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f42:	6413      	str	r3, [r2, #64]	; 0x40
 8000f44:	4b2b      	ldr	r3, [pc, #172]	; (8000ff4 <_Z18SystemClock_Configv+0xe4>)
 8000f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f50:	2300      	movs	r3, #0
 8000f52:	607b      	str	r3, [r7, #4]
 8000f54:	4b28      	ldr	r3, [pc, #160]	; (8000ff8 <_Z18SystemClock_Configv+0xe8>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f5c:	4a26      	ldr	r2, [pc, #152]	; (8000ff8 <_Z18SystemClock_Configv+0xe8>)
 8000f5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f62:	6013      	str	r3, [r2, #0]
 8000f64:	4b24      	ldr	r3, [pc, #144]	; (8000ff8 <_Z18SystemClock_Configv+0xe8>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f70:	2302      	movs	r3, #2
 8000f72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f74:	2301      	movs	r3, #1
 8000f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f78:	2310      	movs	r3, #16
 8000f7a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f80:	2300      	movs	r3, #0
 8000f82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f84:	2310      	movs	r3, #16
 8000f86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f88:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f8c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f8e:	2304      	movs	r3, #4
 8000f90:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f92:	2307      	movs	r3, #7
 8000f94:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f96:	f107 0320 	add.w	r3, r7, #32
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f001 fd0c 	bl	80029b8 <HAL_RCC_OscConfig>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	bf14      	ite	ne
 8000fa6:	2301      	movne	r3, #1
 8000fa8:	2300      	moveq	r3, #0
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
 8000fb0:	f000 f908 	bl	80011c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb4:	230f      	movs	r3, #15
 8000fb6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	2102      	movs	r1, #2
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f001 ff61 	bl	8002e98 <HAL_RCC_ClockConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	bf14      	ite	ne
 8000fdc:	2301      	movne	r3, #1
 8000fde:	2300      	moveq	r3, #0
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 8000fe6:	f000 f8ed 	bl	80011c4 <Error_Handler>
  }
}
 8000fea:	bf00      	nop
 8000fec:	3750      	adds	r7, #80	; 0x50
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40007000 	.word	0x40007000

08000ffc <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001000:	4b15      	ldr	r3, [pc, #84]	; (8001058 <_ZL12MX_I2C1_Initv+0x5c>)
 8001002:	4a16      	ldr	r2, [pc, #88]	; (800105c <_ZL12MX_I2C1_Initv+0x60>)
 8001004:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001006:	4b14      	ldr	r3, [pc, #80]	; (8001058 <_ZL12MX_I2C1_Initv+0x5c>)
 8001008:	4a15      	ldr	r2, [pc, #84]	; (8001060 <_ZL12MX_I2C1_Initv+0x64>)
 800100a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <_ZL12MX_I2C1_Initv+0x5c>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001012:	4b11      	ldr	r3, [pc, #68]	; (8001058 <_ZL12MX_I2C1_Initv+0x5c>)
 8001014:	2200      	movs	r2, #0
 8001016:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001018:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <_ZL12MX_I2C1_Initv+0x5c>)
 800101a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800101e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001020:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <_ZL12MX_I2C1_Initv+0x5c>)
 8001022:	2200      	movs	r2, #0
 8001024:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001026:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <_ZL12MX_I2C1_Initv+0x5c>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800102c:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <_ZL12MX_I2C1_Initv+0x5c>)
 800102e:	2200      	movs	r2, #0
 8001030:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <_ZL12MX_I2C1_Initv+0x5c>)
 8001034:	2200      	movs	r2, #0
 8001036:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001038:	4807      	ldr	r0, [pc, #28]	; (8001058 <_ZL12MX_I2C1_Initv+0x5c>)
 800103a:	f000 fd33 	bl	8001aa4 <HAL_I2C_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	bf14      	ite	ne
 8001044:	2301      	movne	r3, #1
 8001046:	2300      	moveq	r3, #0
 8001048:	b2db      	uxtb	r3, r3
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800104e:	f000 f8b9 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000090 	.word	0x20000090
 800105c:	40005400 	.word	0x40005400
 8001060:	000186a0 	.word	0x000186a0

08001064 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001068:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800106a:	4a14      	ldr	r2, [pc, #80]	; (80010bc <_ZL19MX_USART2_UART_Initv+0x58>)
 800106c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800106e:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001070:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001074:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001076:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800107c:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001082:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001088:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800108a:	220c      	movs	r2, #12
 800108c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800108e:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001090:	2200      	movs	r2, #0
 8001092:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001094:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001096:	2200      	movs	r2, #0
 8001098:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800109a:	4807      	ldr	r0, [pc, #28]	; (80010b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800109c:	f002 fb3e 	bl	800371c <HAL_UART_Init>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	bf14      	ite	ne
 80010a6:	2301      	movne	r3, #1
 80010a8:	2300      	moveq	r3, #0
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80010b0:	f000 f888 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	200000e4 	.word	0x200000e4
 80010bc:	40004400 	.word	0x40004400

080010c0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08a      	sub	sp, #40	; 0x28
 80010c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]
 80010d2:	60da      	str	r2, [r3, #12]
 80010d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	4b2d      	ldr	r3, [pc, #180]	; (8001190 <_ZL12MX_GPIO_Initv+0xd0>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a2c      	ldr	r2, [pc, #176]	; (8001190 <_ZL12MX_GPIO_Initv+0xd0>)
 80010e0:	f043 0304 	orr.w	r3, r3, #4
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b2a      	ldr	r3, [pc, #168]	; (8001190 <_ZL12MX_GPIO_Initv+0xd0>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f003 0304 	and.w	r3, r3, #4
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	4b26      	ldr	r3, [pc, #152]	; (8001190 <_ZL12MX_GPIO_Initv+0xd0>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a25      	ldr	r2, [pc, #148]	; (8001190 <_ZL12MX_GPIO_Initv+0xd0>)
 80010fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b23      	ldr	r3, [pc, #140]	; (8001190 <_ZL12MX_GPIO_Initv+0xd0>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	60bb      	str	r3, [r7, #8]
 8001112:	4b1f      	ldr	r3, [pc, #124]	; (8001190 <_ZL12MX_GPIO_Initv+0xd0>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a1e      	ldr	r2, [pc, #120]	; (8001190 <_ZL12MX_GPIO_Initv+0xd0>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <_ZL12MX_GPIO_Initv+0xd0>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	607b      	str	r3, [r7, #4]
 800112e:	4b18      	ldr	r3, [pc, #96]	; (8001190 <_ZL12MX_GPIO_Initv+0xd0>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a17      	ldr	r2, [pc, #92]	; (8001190 <_ZL12MX_GPIO_Initv+0xd0>)
 8001134:	f043 0302 	orr.w	r3, r3, #2
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b15      	ldr	r3, [pc, #84]	; (8001190 <_ZL12MX_GPIO_Initv+0xd0>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001146:	2200      	movs	r2, #0
 8001148:	2120      	movs	r1, #32
 800114a:	4812      	ldr	r0, [pc, #72]	; (8001194 <_ZL12MX_GPIO_Initv+0xd4>)
 800114c:	f000 fc90 	bl	8001a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001150:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001154:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001156:	4b10      	ldr	r3, [pc, #64]	; (8001198 <_ZL12MX_GPIO_Initv+0xd8>)
 8001158:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800115e:	f107 0314 	add.w	r3, r7, #20
 8001162:	4619      	mov	r1, r3
 8001164:	480d      	ldr	r0, [pc, #52]	; (800119c <_ZL12MX_GPIO_Initv+0xdc>)
 8001166:	f000 fb01 	bl	800176c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800116a:	2320      	movs	r3, #32
 800116c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116e:	2301      	movs	r3, #1
 8001170:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2300      	movs	r3, #0
 8001178:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	4619      	mov	r1, r3
 8001180:	4804      	ldr	r0, [pc, #16]	; (8001194 <_ZL12MX_GPIO_Initv+0xd4>)
 8001182:	f000 faf3 	bl	800176c <HAL_GPIO_Init>

}
 8001186:	bf00      	nop
 8001188:	3728      	adds	r7, #40	; 0x28
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40023800 	.word	0x40023800
 8001194:	40020000 	.word	0x40020000
 8001198:	10210000 	.word	0x10210000
 800119c:	40020800 	.word	0x40020800

080011a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d101      	bne.n	80011b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011b2:	f000 f9d9 	bl	8001568 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40000c00 	.word	0x40000c00

080011c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <_Z41__static_initialization_and_destruction_0ii>:
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d107      	bne.n	80011f4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d102      	bne.n	80011f4 <_Z41__static_initialization_and_destruction_0ii+0x20>
IMU imu;
 80011ee:	4809      	ldr	r0, [pc, #36]	; (8001214 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80011f0:	f7ff fd44 	bl	8000c7c <_ZN3IMUC1Ev>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d107      	bne.n	800120a <_Z41__static_initialization_and_destruction_0ii+0x36>
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001200:	4293      	cmp	r3, r2
 8001202:	d102      	bne.n	800120a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001204:	4803      	ldr	r0, [pc, #12]	; (8001214 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001206:	f7ff fd49 	bl	8000c9c <_ZN3IMUD1Ev>
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000128 	.word	0x20000128

08001218 <_GLOBAL__sub_I_hi2c1>:
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
 800121c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001220:	2001      	movs	r0, #1
 8001222:	f7ff ffd7 	bl	80011d4 <_Z41__static_initialization_and_destruction_0ii>
 8001226:	bd80      	pop	{r7, pc}

08001228 <_GLOBAL__sub_D_hi2c1>:
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
 800122c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001230:	2000      	movs	r0, #0
 8001232:	f7ff ffcf 	bl	80011d4 <_Z41__static_initialization_and_destruction_0ii>
 8001236:	bd80      	pop	{r7, pc}

08001238 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	607b      	str	r3, [r7, #4]
 8001242:	4b10      	ldr	r3, [pc, #64]	; (8001284 <HAL_MspInit+0x4c>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001246:	4a0f      	ldr	r2, [pc, #60]	; (8001284 <HAL_MspInit+0x4c>)
 8001248:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800124c:	6453      	str	r3, [r2, #68]	; 0x44
 800124e:	4b0d      	ldr	r3, [pc, #52]	; (8001284 <HAL_MspInit+0x4c>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	603b      	str	r3, [r7, #0]
 800125e:	4b09      	ldr	r3, [pc, #36]	; (8001284 <HAL_MspInit+0x4c>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	4a08      	ldr	r2, [pc, #32]	; (8001284 <HAL_MspInit+0x4c>)
 8001264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001268:	6413      	str	r3, [r2, #64]	; 0x40
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <HAL_MspInit+0x4c>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001272:	603b      	str	r3, [r7, #0]
 8001274:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001276:	2007      	movs	r0, #7
 8001278:	f000 fa43 	bl	8001702 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40023800 	.word	0x40023800

08001288 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	; 0x28
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a19      	ldr	r2, [pc, #100]	; (800130c <HAL_I2C_MspInit+0x84>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d12c      	bne.n	8001304 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	613b      	str	r3, [r7, #16]
 80012ae:	4b18      	ldr	r3, [pc, #96]	; (8001310 <HAL_I2C_MspInit+0x88>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a17      	ldr	r2, [pc, #92]	; (8001310 <HAL_I2C_MspInit+0x88>)
 80012b4:	f043 0302 	orr.w	r3, r3, #2
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b15      	ldr	r3, [pc, #84]	; (8001310 <HAL_I2C_MspInit+0x88>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	613b      	str	r3, [r7, #16]
 80012c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012cc:	2312      	movs	r3, #18
 80012ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012d0:	2301      	movs	r3, #1
 80012d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d4:	2303      	movs	r3, #3
 80012d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012d8:	2304      	movs	r3, #4
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	4619      	mov	r1, r3
 80012e2:	480c      	ldr	r0, [pc, #48]	; (8001314 <HAL_I2C_MspInit+0x8c>)
 80012e4:	f000 fa42 	bl	800176c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012e8:	2300      	movs	r3, #0
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	4b08      	ldr	r3, [pc, #32]	; (8001310 <HAL_I2C_MspInit+0x88>)
 80012ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f0:	4a07      	ldr	r2, [pc, #28]	; (8001310 <HAL_I2C_MspInit+0x88>)
 80012f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012f6:	6413      	str	r3, [r2, #64]	; 0x40
 80012f8:	4b05      	ldr	r3, [pc, #20]	; (8001310 <HAL_I2C_MspInit+0x88>)
 80012fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001304:	bf00      	nop
 8001306:	3728      	adds	r7, #40	; 0x28
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40005400 	.word	0x40005400
 8001310:	40023800 	.word	0x40023800
 8001314:	40020400 	.word	0x40020400

08001318 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08a      	sub	sp, #40	; 0x28
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a19      	ldr	r2, [pc, #100]	; (800139c <HAL_UART_MspInit+0x84>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d12b      	bne.n	8001392 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <HAL_UART_MspInit+0x88>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	4a17      	ldr	r2, [pc, #92]	; (80013a0 <HAL_UART_MspInit+0x88>)
 8001344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001348:	6413      	str	r3, [r2, #64]	; 0x40
 800134a:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <HAL_UART_MspInit+0x88>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001352:	613b      	str	r3, [r7, #16]
 8001354:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <HAL_UART_MspInit+0x88>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a10      	ldr	r2, [pc, #64]	; (80013a0 <HAL_UART_MspInit+0x88>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <HAL_UART_MspInit+0x88>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001372:	230c      	movs	r3, #12
 8001374:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001376:	2302      	movs	r3, #2
 8001378:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137e:	2300      	movs	r3, #0
 8001380:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001382:	2307      	movs	r3, #7
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001386:	f107 0314 	add.w	r3, r7, #20
 800138a:	4619      	mov	r1, r3
 800138c:	4805      	ldr	r0, [pc, #20]	; (80013a4 <HAL_UART_MspInit+0x8c>)
 800138e:	f000 f9ed 	bl	800176c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001392:	bf00      	nop
 8001394:	3728      	adds	r7, #40	; 0x28
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40004400 	.word	0x40004400
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40020000 	.word	0x40020000

080013a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08c      	sub	sp, #48	; 0x30
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 80013b8:	2200      	movs	r2, #0
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	2032      	movs	r0, #50	; 0x32
 80013be:	f000 f9ab 	bl	8001718 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80013c2:	2032      	movs	r0, #50	; 0x32
 80013c4:	f000 f9c4 	bl	8001750 <HAL_NVIC_EnableIRQ>
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	4b1f      	ldr	r3, [pc, #124]	; (800144c <HAL_InitTick+0xa4>)
 80013ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d0:	4a1e      	ldr	r2, [pc, #120]	; (800144c <HAL_InitTick+0xa4>)
 80013d2:	f043 0308 	orr.w	r3, r3, #8
 80013d6:	6413      	str	r3, [r2, #64]	; 0x40
 80013d8:	4b1c      	ldr	r3, [pc, #112]	; (800144c <HAL_InitTick+0xa4>)
 80013da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013dc:	f003 0308 	and.w	r3, r3, #8
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013e4:	f107 0210 	add.w	r2, r7, #16
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	4611      	mov	r1, r2
 80013ee:	4618      	mov	r0, r3
 80013f0:	f001 ff44 	bl	800327c <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80013f4:	f001 ff1a 	bl	800322c <HAL_RCC_GetPCLK1Freq>
 80013f8:	4603      	mov	r3, r0
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80013fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001400:	4a13      	ldr	r2, [pc, #76]	; (8001450 <HAL_InitTick+0xa8>)
 8001402:	fba2 2303 	umull	r2, r3, r2, r3
 8001406:	0c9b      	lsrs	r3, r3, #18
 8001408:	3b01      	subs	r3, #1
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 800140c:	4b11      	ldr	r3, [pc, #68]	; (8001454 <HAL_InitTick+0xac>)
 800140e:	4a12      	ldr	r2, [pc, #72]	; (8001458 <HAL_InitTick+0xb0>)
 8001410:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8001412:	4b10      	ldr	r3, [pc, #64]	; (8001454 <HAL_InitTick+0xac>)
 8001414:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001418:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 800141a:	4a0e      	ldr	r2, [pc, #56]	; (8001454 <HAL_InitTick+0xac>)
 800141c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800141e:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <HAL_InitTick+0xac>)
 8001422:	2200      	movs	r2, #0
 8001424:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001426:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <HAL_InitTick+0xac>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 800142c:	4809      	ldr	r0, [pc, #36]	; (8001454 <HAL_InitTick+0xac>)
 800142e:	f001 ff57 	bl	80032e0 <HAL_TIM_Base_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d104      	bne.n	8001442 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8001438:	4806      	ldr	r0, [pc, #24]	; (8001454 <HAL_InitTick+0xac>)
 800143a:	f001 ff86 	bl	800334a <HAL_TIM_Base_Start_IT>
 800143e:	4603      	mov	r3, r0
 8001440:	e000      	b.n	8001444 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
}
 8001444:	4618      	mov	r0, r3
 8001446:	3730      	adds	r7, #48	; 0x30
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40023800 	.word	0x40023800
 8001450:	431bde83 	.word	0x431bde83
 8001454:	20004a40 	.word	0x20004a40
 8001458:	40000c00 	.word	0x40000c00

0800145c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800146e:	e7fe      	b.n	800146e <HardFault_Handler+0x4>

08001470 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001474:	e7fe      	b.n	8001474 <MemManage_Handler+0x4>

08001476 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800147a:	e7fe      	b.n	800147a <BusFault_Handler+0x4>

0800147c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001480:	e7fe      	b.n	8001480 <UsageFault_Handler+0x4>

08001482 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001494:	4802      	ldr	r0, [pc, #8]	; (80014a0 <TIM5_IRQHandler+0x10>)
 8001496:	f001 ff7c 	bl	8003392 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20004a40 	.word	0x20004a40

080014a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014a8:	4b08      	ldr	r3, [pc, #32]	; (80014cc <SystemInit+0x28>)
 80014aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ae:	4a07      	ldr	r2, [pc, #28]	; (80014cc <SystemInit+0x28>)
 80014b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014b8:	4b04      	ldr	r3, [pc, #16]	; (80014cc <SystemInit+0x28>)
 80014ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014be:	609a      	str	r2, [r3, #8]
#endif
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001508 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80014d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80014d6:	e003      	b.n	80014e0 <LoopCopyDataInit>

080014d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80014d8:	4b0c      	ldr	r3, [pc, #48]	; (800150c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80014da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80014dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80014de:	3104      	adds	r1, #4

080014e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80014e0:	480b      	ldr	r0, [pc, #44]	; (8001510 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80014e2:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80014e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80014e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80014e8:	d3f6      	bcc.n	80014d8 <CopyDataInit>
  ldr  r2, =_sbss
 80014ea:	4a0b      	ldr	r2, [pc, #44]	; (8001518 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80014ec:	e002      	b.n	80014f4 <LoopFillZerobss>

080014ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80014ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80014f0:	f842 3b04 	str.w	r3, [r2], #4

080014f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80014f4:	4b09      	ldr	r3, [pc, #36]	; (800151c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80014f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80014f8:	d3f9      	bcc.n	80014ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014fa:	f7ff ffd3 	bl	80014a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014fe:	f005 f8d9 	bl	80066b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001502:	f7ff fcd7 	bl	8000eb4 <main>
  bx  lr    
 8001506:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001508:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 800150c:	0800684c 	.word	0x0800684c
  ldr  r0, =_sdata
 8001510:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001514:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001518:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 800151c:	20004ac4 	.word	0x20004ac4

08001520 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001520:	e7fe      	b.n	8001520 <ADC_IRQHandler>
	...

08001524 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001528:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <HAL_Init+0x40>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a0d      	ldr	r2, [pc, #52]	; (8001564 <HAL_Init+0x40>)
 800152e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001532:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001534:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <HAL_Init+0x40>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a0a      	ldr	r2, [pc, #40]	; (8001564 <HAL_Init+0x40>)
 800153a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800153e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001540:	4b08      	ldr	r3, [pc, #32]	; (8001564 <HAL_Init+0x40>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a07      	ldr	r2, [pc, #28]	; (8001564 <HAL_Init+0x40>)
 8001546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800154a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800154c:	2003      	movs	r0, #3
 800154e:	f000 f8d8 	bl	8001702 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001552:	2000      	movs	r0, #0
 8001554:	f7ff ff28 	bl	80013a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001558:	f7ff fe6e 	bl	8001238 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40023c00 	.word	0x40023c00

08001568 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <HAL_IncTick+0x20>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	461a      	mov	r2, r3
 8001572:	4b06      	ldr	r3, [pc, #24]	; (800158c <HAL_IncTick+0x24>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4413      	add	r3, r2
 8001578:	4a04      	ldr	r2, [pc, #16]	; (800158c <HAL_IncTick+0x24>)
 800157a:	6013      	str	r3, [r2, #0]
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	20000008 	.word	0x20000008
 800158c:	20004a80 	.word	0x20004a80

08001590 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  return uwTick;
 8001594:	4b03      	ldr	r3, [pc, #12]	; (80015a4 <HAL_GetTick+0x14>)
 8001596:	681b      	ldr	r3, [r3, #0]
}
 8001598:	4618      	mov	r0, r3
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	20004a80 	.word	0x20004a80

080015a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b8:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <__NVIC_SetPriorityGrouping+0x44>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015c4:	4013      	ands	r3, r2
 80015c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015da:	4a04      	ldr	r2, [pc, #16]	; (80015ec <__NVIC_SetPriorityGrouping+0x44>)
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	60d3      	str	r3, [r2, #12]
}
 80015e0:	bf00      	nop
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015f4:	4b04      	ldr	r3, [pc, #16]	; (8001608 <__NVIC_GetPriorityGrouping+0x18>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	0a1b      	lsrs	r3, r3, #8
 80015fa:	f003 0307 	and.w	r3, r3, #7
}
 80015fe:	4618      	mov	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	2b00      	cmp	r3, #0
 800161c:	db0b      	blt.n	8001636 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	f003 021f 	and.w	r2, r3, #31
 8001624:	4907      	ldr	r1, [pc, #28]	; (8001644 <__NVIC_EnableIRQ+0x38>)
 8001626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162a:	095b      	lsrs	r3, r3, #5
 800162c:	2001      	movs	r0, #1
 800162e:	fa00 f202 	lsl.w	r2, r0, r2
 8001632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000e100 	.word	0xe000e100

08001648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	6039      	str	r1, [r7, #0]
 8001652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001658:	2b00      	cmp	r3, #0
 800165a:	db0a      	blt.n	8001672 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	b2da      	uxtb	r2, r3
 8001660:	490c      	ldr	r1, [pc, #48]	; (8001694 <__NVIC_SetPriority+0x4c>)
 8001662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001666:	0112      	lsls	r2, r2, #4
 8001668:	b2d2      	uxtb	r2, r2
 800166a:	440b      	add	r3, r1
 800166c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001670:	e00a      	b.n	8001688 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4908      	ldr	r1, [pc, #32]	; (8001698 <__NVIC_SetPriority+0x50>)
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	f003 030f 	and.w	r3, r3, #15
 800167e:	3b04      	subs	r3, #4
 8001680:	0112      	lsls	r2, r2, #4
 8001682:	b2d2      	uxtb	r2, r2
 8001684:	440b      	add	r3, r1
 8001686:	761a      	strb	r2, [r3, #24]
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	e000e100 	.word	0xe000e100
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800169c:	b480      	push	{r7}
 800169e:	b089      	sub	sp, #36	; 0x24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	f1c3 0307 	rsb	r3, r3, #7
 80016b6:	2b04      	cmp	r3, #4
 80016b8:	bf28      	it	cs
 80016ba:	2304      	movcs	r3, #4
 80016bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	3304      	adds	r3, #4
 80016c2:	2b06      	cmp	r3, #6
 80016c4:	d902      	bls.n	80016cc <NVIC_EncodePriority+0x30>
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	3b03      	subs	r3, #3
 80016ca:	e000      	b.n	80016ce <NVIC_EncodePriority+0x32>
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43da      	mvns	r2, r3
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	401a      	ands	r2, r3
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	fa01 f303 	lsl.w	r3, r1, r3
 80016ee:	43d9      	mvns	r1, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f4:	4313      	orrs	r3, r2
         );
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3724      	adds	r7, #36	; 0x24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b082      	sub	sp, #8
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff ff4c 	bl	80015a8 <__NVIC_SetPriorityGrouping>
}
 8001710:	bf00      	nop
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
 8001724:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800172a:	f7ff ff61 	bl	80015f0 <__NVIC_GetPriorityGrouping>
 800172e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	68b9      	ldr	r1, [r7, #8]
 8001734:	6978      	ldr	r0, [r7, #20]
 8001736:	f7ff ffb1 	bl	800169c <NVIC_EncodePriority>
 800173a:	4602      	mov	r2, r0
 800173c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001740:	4611      	mov	r1, r2
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff ff80 	bl	8001648 <__NVIC_SetPriority>
}
 8001748:	bf00      	nop
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff ff54 	bl	800160c <__NVIC_EnableIRQ>
}
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800176c:	b480      	push	{r7}
 800176e:	b089      	sub	sp, #36	; 0x24
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800177e:	2300      	movs	r3, #0
 8001780:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001782:	2300      	movs	r3, #0
 8001784:	61fb      	str	r3, [r7, #28]
 8001786:	e159      	b.n	8001a3c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001788:	2201      	movs	r2, #1
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	4013      	ands	r3, r2
 800179a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	f040 8148 	bne.w	8001a36 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d00b      	beq.n	80017c6 <HAL_GPIO_Init+0x5a>
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d007      	beq.n	80017c6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017ba:	2b11      	cmp	r3, #17
 80017bc:	d003      	beq.n	80017c6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b12      	cmp	r3, #18
 80017c4:	d130      	bne.n	8001828 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	2203      	movs	r2, #3
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43db      	mvns	r3, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4013      	ands	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	68da      	ldr	r2, [r3, #12]
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017fc:	2201      	movs	r2, #1
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	4013      	ands	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	091b      	lsrs	r3, r3, #4
 8001812:	f003 0201 	and.w	r2, r3, #1
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4313      	orrs	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	2203      	movs	r2, #3
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	689a      	ldr	r2, [r3, #8]
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	4313      	orrs	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	2b02      	cmp	r3, #2
 800185e:	d003      	beq.n	8001868 <HAL_GPIO_Init+0xfc>
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	2b12      	cmp	r3, #18
 8001866:	d123      	bne.n	80018b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	08da      	lsrs	r2, r3, #3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3208      	adds	r2, #8
 8001870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001874:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	f003 0307 	and.w	r3, r3, #7
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	220f      	movs	r2, #15
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4013      	ands	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	691a      	ldr	r2, [r3, #16]
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	4313      	orrs	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	08da      	lsrs	r2, r3, #3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	3208      	adds	r2, #8
 80018aa:	69b9      	ldr	r1, [r7, #24]
 80018ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	2203      	movs	r2, #3
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4013      	ands	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 0203 	and.w	r2, r3, #3
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4313      	orrs	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f000 80a2 	beq.w	8001a36 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	4b56      	ldr	r3, [pc, #344]	; (8001a50 <HAL_GPIO_Init+0x2e4>)
 80018f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fa:	4a55      	ldr	r2, [pc, #340]	; (8001a50 <HAL_GPIO_Init+0x2e4>)
 80018fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001900:	6453      	str	r3, [r2, #68]	; 0x44
 8001902:	4b53      	ldr	r3, [pc, #332]	; (8001a50 <HAL_GPIO_Init+0x2e4>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800190e:	4a51      	ldr	r2, [pc, #324]	; (8001a54 <HAL_GPIO_Init+0x2e8>)
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	089b      	lsrs	r3, r3, #2
 8001914:	3302      	adds	r3, #2
 8001916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800191a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f003 0303 	and.w	r3, r3, #3
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	220f      	movs	r2, #15
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43db      	mvns	r3, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4013      	ands	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a48      	ldr	r2, [pc, #288]	; (8001a58 <HAL_GPIO_Init+0x2ec>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d019      	beq.n	800196e <HAL_GPIO_Init+0x202>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a47      	ldr	r2, [pc, #284]	; (8001a5c <HAL_GPIO_Init+0x2f0>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d013      	beq.n	800196a <HAL_GPIO_Init+0x1fe>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a46      	ldr	r2, [pc, #280]	; (8001a60 <HAL_GPIO_Init+0x2f4>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d00d      	beq.n	8001966 <HAL_GPIO_Init+0x1fa>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a45      	ldr	r2, [pc, #276]	; (8001a64 <HAL_GPIO_Init+0x2f8>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d007      	beq.n	8001962 <HAL_GPIO_Init+0x1f6>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a44      	ldr	r2, [pc, #272]	; (8001a68 <HAL_GPIO_Init+0x2fc>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d101      	bne.n	800195e <HAL_GPIO_Init+0x1f2>
 800195a:	2304      	movs	r3, #4
 800195c:	e008      	b.n	8001970 <HAL_GPIO_Init+0x204>
 800195e:	2307      	movs	r3, #7
 8001960:	e006      	b.n	8001970 <HAL_GPIO_Init+0x204>
 8001962:	2303      	movs	r3, #3
 8001964:	e004      	b.n	8001970 <HAL_GPIO_Init+0x204>
 8001966:	2302      	movs	r3, #2
 8001968:	e002      	b.n	8001970 <HAL_GPIO_Init+0x204>
 800196a:	2301      	movs	r3, #1
 800196c:	e000      	b.n	8001970 <HAL_GPIO_Init+0x204>
 800196e:	2300      	movs	r3, #0
 8001970:	69fa      	ldr	r2, [r7, #28]
 8001972:	f002 0203 	and.w	r2, r2, #3
 8001976:	0092      	lsls	r2, r2, #2
 8001978:	4093      	lsls	r3, r2
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4313      	orrs	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001980:	4934      	ldr	r1, [pc, #208]	; (8001a54 <HAL_GPIO_Init+0x2e8>)
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	089b      	lsrs	r3, r3, #2
 8001986:	3302      	adds	r3, #2
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800198e:	4b37      	ldr	r3, [pc, #220]	; (8001a6c <HAL_GPIO_Init+0x300>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	43db      	mvns	r3, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4013      	ands	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019b2:	4a2e      	ldr	r2, [pc, #184]	; (8001a6c <HAL_GPIO_Init+0x300>)
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019b8:	4b2c      	ldr	r3, [pc, #176]	; (8001a6c <HAL_GPIO_Init+0x300>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	43db      	mvns	r3, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4013      	ands	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d003      	beq.n	80019dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	4313      	orrs	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019dc:	4a23      	ldr	r2, [pc, #140]	; (8001a6c <HAL_GPIO_Init+0x300>)
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019e2:	4b22      	ldr	r3, [pc, #136]	; (8001a6c <HAL_GPIO_Init+0x300>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	43db      	mvns	r3, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4013      	ands	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a06:	4a19      	ldr	r2, [pc, #100]	; (8001a6c <HAL_GPIO_Init+0x300>)
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a0c:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <HAL_GPIO_Init+0x300>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	43db      	mvns	r3, r3
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d003      	beq.n	8001a30 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a30:	4a0e      	ldr	r2, [pc, #56]	; (8001a6c <HAL_GPIO_Init+0x300>)
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	61fb      	str	r3, [r7, #28]
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	2b0f      	cmp	r3, #15
 8001a40:	f67f aea2 	bls.w	8001788 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a44:	bf00      	nop
 8001a46:	3724      	adds	r7, #36	; 0x24
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40013800 	.word	0x40013800
 8001a58:	40020000 	.word	0x40020000
 8001a5c:	40020400 	.word	0x40020400
 8001a60:	40020800 	.word	0x40020800
 8001a64:	40020c00 	.word	0x40020c00
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	40013c00 	.word	0x40013c00

08001a70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	460b      	mov	r3, r1
 8001a7a:	807b      	strh	r3, [r7, #2]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a80:	787b      	ldrb	r3, [r7, #1]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a86:	887a      	ldrh	r2, [r7, #2]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a8c:	e003      	b.n	8001a96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a8e:	887b      	ldrh	r3, [r7, #2]
 8001a90:	041a      	lsls	r2, r3, #16
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	619a      	str	r2, [r3, #24]
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
	...

08001aa4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e11f      	b.n	8001cf6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d106      	bne.n	8001ad0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff fbdc 	bl	8001288 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2224      	movs	r2, #36	; 0x24
 8001ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f022 0201 	bic.w	r2, r2, #1
 8001ae6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001af6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b08:	f001 fb90 	bl	800322c <HAL_RCC_GetPCLK1Freq>
 8001b0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	4a7b      	ldr	r2, [pc, #492]	; (8001d00 <HAL_I2C_Init+0x25c>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d807      	bhi.n	8001b28 <HAL_I2C_Init+0x84>
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4a7a      	ldr	r2, [pc, #488]	; (8001d04 <HAL_I2C_Init+0x260>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	bf94      	ite	ls
 8001b20:	2301      	movls	r3, #1
 8001b22:	2300      	movhi	r3, #0
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	e006      	b.n	8001b36 <HAL_I2C_Init+0x92>
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	4a77      	ldr	r2, [pc, #476]	; (8001d08 <HAL_I2C_Init+0x264>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	bf94      	ite	ls
 8001b30:	2301      	movls	r3, #1
 8001b32:	2300      	movhi	r3, #0
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e0db      	b.n	8001cf6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	4a72      	ldr	r2, [pc, #456]	; (8001d0c <HAL_I2C_Init+0x268>)
 8001b42:	fba2 2303 	umull	r2, r3, r2, r3
 8001b46:	0c9b      	lsrs	r3, r3, #18
 8001b48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	68ba      	ldr	r2, [r7, #8]
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	4a64      	ldr	r2, [pc, #400]	; (8001d00 <HAL_I2C_Init+0x25c>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d802      	bhi.n	8001b78 <HAL_I2C_Init+0xd4>
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	3301      	adds	r3, #1
 8001b76:	e009      	b.n	8001b8c <HAL_I2C_Init+0xe8>
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b7e:	fb02 f303 	mul.w	r3, r2, r3
 8001b82:	4a63      	ldr	r2, [pc, #396]	; (8001d10 <HAL_I2C_Init+0x26c>)
 8001b84:	fba2 2303 	umull	r2, r3, r2, r3
 8001b88:	099b      	lsrs	r3, r3, #6
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	6812      	ldr	r2, [r2, #0]
 8001b90:	430b      	orrs	r3, r1
 8001b92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b9e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	4956      	ldr	r1, [pc, #344]	; (8001d00 <HAL_I2C_Init+0x25c>)
 8001ba8:	428b      	cmp	r3, r1
 8001baa:	d80d      	bhi.n	8001bc8 <HAL_I2C_Init+0x124>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	1e59      	subs	r1, r3, #1
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bba:	3301      	adds	r3, #1
 8001bbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bc0:	2b04      	cmp	r3, #4
 8001bc2:	bf38      	it	cc
 8001bc4:	2304      	movcc	r3, #4
 8001bc6:	e04f      	b.n	8001c68 <HAL_I2C_Init+0x1c4>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d111      	bne.n	8001bf4 <HAL_I2C_Init+0x150>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	1e58      	subs	r0, r3, #1
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6859      	ldr	r1, [r3, #4]
 8001bd8:	460b      	mov	r3, r1
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	440b      	add	r3, r1
 8001bde:	fbb0 f3f3 	udiv	r3, r0, r3
 8001be2:	3301      	adds	r3, #1
 8001be4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	bf0c      	ite	eq
 8001bec:	2301      	moveq	r3, #1
 8001bee:	2300      	movne	r3, #0
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	e012      	b.n	8001c1a <HAL_I2C_Init+0x176>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	1e58      	subs	r0, r3, #1
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6859      	ldr	r1, [r3, #4]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	440b      	add	r3, r1
 8001c02:	0099      	lsls	r1, r3, #2
 8001c04:	440b      	add	r3, r1
 8001c06:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	bf0c      	ite	eq
 8001c14:	2301      	moveq	r3, #1
 8001c16:	2300      	movne	r3, #0
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_I2C_Init+0x17e>
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e022      	b.n	8001c68 <HAL_I2C_Init+0x1c4>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10e      	bne.n	8001c48 <HAL_I2C_Init+0x1a4>
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	1e58      	subs	r0, r3, #1
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6859      	ldr	r1, [r3, #4]
 8001c32:	460b      	mov	r3, r1
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	440b      	add	r3, r1
 8001c38:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c46:	e00f      	b.n	8001c68 <HAL_I2C_Init+0x1c4>
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	1e58      	subs	r0, r3, #1
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6859      	ldr	r1, [r3, #4]
 8001c50:	460b      	mov	r3, r1
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	440b      	add	r3, r1
 8001c56:	0099      	lsls	r1, r3, #2
 8001c58:	440b      	add	r3, r1
 8001c5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c5e:	3301      	adds	r3, #1
 8001c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c68:	6879      	ldr	r1, [r7, #4]
 8001c6a:	6809      	ldr	r1, [r1, #0]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	69da      	ldr	r2, [r3, #28]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a1b      	ldr	r3, [r3, #32]
 8001c82:	431a      	orrs	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	6911      	ldr	r1, [r2, #16]
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	68d2      	ldr	r2, [r2, #12]
 8001ca2:	4311      	orrs	r1, r2
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	6812      	ldr	r2, [r2, #0]
 8001ca8:	430b      	orrs	r3, r1
 8001caa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	695a      	ldr	r2, [r3, #20]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f042 0201 	orr.w	r2, r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2220      	movs	r2, #32
 8001ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	000186a0 	.word	0x000186a0
 8001d04:	001e847f 	.word	0x001e847f
 8001d08:	003d08ff 	.word	0x003d08ff
 8001d0c:	431bde83 	.word	0x431bde83
 8001d10:	10624dd3 	.word	0x10624dd3

08001d14 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b088      	sub	sp, #32
 8001d18:	af02      	add	r7, sp, #8
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	607a      	str	r2, [r7, #4]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	460b      	mov	r3, r1
 8001d22:	817b      	strh	r3, [r7, #10]
 8001d24:	4613      	mov	r3, r2
 8001d26:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d28:	f7ff fc32 	bl	8001590 <HAL_GetTick>
 8001d2c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b20      	cmp	r3, #32
 8001d38:	f040 80e0 	bne.w	8001efc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	2319      	movs	r3, #25
 8001d42:	2201      	movs	r2, #1
 8001d44:	4970      	ldr	r1, [pc, #448]	; (8001f08 <HAL_I2C_Master_Transmit+0x1f4>)
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f000 fc58 	bl	80025fc <I2C_WaitOnFlagUntilTimeout>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001d52:	2302      	movs	r3, #2
 8001d54:	e0d3      	b.n	8001efe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d101      	bne.n	8001d64 <HAL_I2C_Master_Transmit+0x50>
 8001d60:	2302      	movs	r3, #2
 8001d62:	e0cc      	b.n	8001efe <HAL_I2C_Master_Transmit+0x1ea>
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d007      	beq.n	8001d8a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f042 0201 	orr.w	r2, r2, #1
 8001d88:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d98:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2221      	movs	r2, #33	; 0x21
 8001d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2210      	movs	r2, #16
 8001da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	893a      	ldrh	r2, [r7, #8]
 8001dba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	4a50      	ldr	r2, [pc, #320]	; (8001f0c <HAL_I2C_Master_Transmit+0x1f8>)
 8001dca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001dcc:	8979      	ldrh	r1, [r7, #10]
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	6a3a      	ldr	r2, [r7, #32]
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f000 fac2 	bl	800235c <I2C_MasterRequestWrite>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e08d      	b.n	8001efe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001de2:	2300      	movs	r3, #0
 8001de4:	613b      	str	r3, [r7, #16]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	695b      	ldr	r3, [r3, #20]
 8001dec:	613b      	str	r3, [r7, #16]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	613b      	str	r3, [r7, #16]
 8001df6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001df8:	e066      	b.n	8001ec8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	6a39      	ldr	r1, [r7, #32]
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f000 fcd2 	bl	80027a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d00d      	beq.n	8001e26 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	d107      	bne.n	8001e22 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e06b      	b.n	8001efe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2a:	781a      	ldrb	r2, [r3, #0]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e36:	1c5a      	adds	r2, r3, #1
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	3b01      	subs	r3, #1
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	695b      	ldr	r3, [r3, #20]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d11b      	bne.n	8001e9c <HAL_I2C_Master_Transmit+0x188>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d017      	beq.n	8001e9c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e70:	781a      	ldrb	r2, [r3, #0]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	1c5a      	adds	r2, r3, #1
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e94:	3b01      	subs	r3, #1
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e9c:	697a      	ldr	r2, [r7, #20]
 8001e9e:	6a39      	ldr	r1, [r7, #32]
 8001ea0:	68f8      	ldr	r0, [r7, #12]
 8001ea2:	f000 fcc2 	bl	800282a <I2C_WaitOnBTFFlagUntilTimeout>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d00d      	beq.n	8001ec8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb0:	2b04      	cmp	r3, #4
 8001eb2:	d107      	bne.n	8001ec4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ec2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e01a      	b.n	8001efe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d194      	bne.n	8001dfa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ede:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2220      	movs	r2, #32
 8001ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	e000      	b.n	8001efe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001efc:	2302      	movs	r3, #2
  }
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3718      	adds	r7, #24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	00100002 	.word	0x00100002
 8001f0c:	ffff0000 	.word	0xffff0000

08001f10 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08c      	sub	sp, #48	; 0x30
 8001f14:	af02      	add	r7, sp, #8
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	607a      	str	r2, [r7, #4]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	817b      	strh	r3, [r7, #10]
 8001f20:	4613      	mov	r3, r2
 8001f22:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f24:	f7ff fb34 	bl	8001590 <HAL_GetTick>
 8001f28:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b20      	cmp	r3, #32
 8001f34:	f040 820b 	bne.w	800234e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	2319      	movs	r3, #25
 8001f3e:	2201      	movs	r2, #1
 8001f40:	497c      	ldr	r1, [pc, #496]	; (8002134 <HAL_I2C_Master_Receive+0x224>)
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f000 fb5a 	bl	80025fc <I2C_WaitOnFlagUntilTimeout>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e1fe      	b.n	8002350 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d101      	bne.n	8001f60 <HAL_I2C_Master_Receive+0x50>
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	e1f7      	b.n	8002350 <HAL_I2C_Master_Receive+0x440>
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d007      	beq.n	8001f86 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f042 0201 	orr.w	r2, r2, #1
 8001f84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f94:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2222      	movs	r2, #34	; 0x22
 8001f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2210      	movs	r2, #16
 8001fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	893a      	ldrh	r2, [r7, #8]
 8001fb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	4a5c      	ldr	r2, [pc, #368]	; (8002138 <HAL_I2C_Master_Receive+0x228>)
 8001fc6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001fc8:	8979      	ldrh	r1, [r7, #10]
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f000 fa46 	bl	8002460 <I2C_MasterRequestRead>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e1b8      	b.n	8002350 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d113      	bne.n	800200e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	623b      	str	r3, [r7, #32]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	623b      	str	r3, [r7, #32]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	623b      	str	r3, [r7, #32]
 8001ffa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	e18c      	b.n	8002328 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002012:	2b01      	cmp	r3, #1
 8002014:	d11b      	bne.n	800204e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002024:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002026:	2300      	movs	r3, #0
 8002028:	61fb      	str	r3, [r7, #28]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	695b      	ldr	r3, [r3, #20]
 8002030:	61fb      	str	r3, [r7, #28]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	61fb      	str	r3, [r7, #28]
 800203a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	e16c      	b.n	8002328 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002052:	2b02      	cmp	r3, #2
 8002054:	d11b      	bne.n	800208e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002064:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002074:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002076:	2300      	movs	r3, #0
 8002078:	61bb      	str	r3, [r7, #24]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	61bb      	str	r3, [r7, #24]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	61bb      	str	r3, [r7, #24]
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	e14c      	b.n	8002328 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800209c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	617b      	str	r3, [r7, #20]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	617b      	str	r3, [r7, #20]
 80020b2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80020b4:	e138      	b.n	8002328 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ba:	2b03      	cmp	r3, #3
 80020bc:	f200 80f1 	bhi.w	80022a2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d123      	bne.n	8002110 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f000 fbed 	bl	80028ac <I2C_WaitOnRXNEFlagUntilTimeout>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e139      	b.n	8002350 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	691a      	ldr	r2, [r3, #16]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ee:	1c5a      	adds	r2, r3, #1
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f8:	3b01      	subs	r3, #1
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002104:	b29b      	uxth	r3, r3
 8002106:	3b01      	subs	r3, #1
 8002108:	b29a      	uxth	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800210e:	e10b      	b.n	8002328 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002114:	2b02      	cmp	r3, #2
 8002116:	d14e      	bne.n	80021b6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800211e:	2200      	movs	r2, #0
 8002120:	4906      	ldr	r1, [pc, #24]	; (800213c <HAL_I2C_Master_Receive+0x22c>)
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	f000 fa6a 	bl	80025fc <I2C_WaitOnFlagUntilTimeout>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d008      	beq.n	8002140 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e10e      	b.n	8002350 <HAL_I2C_Master_Receive+0x440>
 8002132:	bf00      	nop
 8002134:	00100002 	.word	0x00100002
 8002138:	ffff0000 	.word	0xffff0000
 800213c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800214e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	691a      	ldr	r2, [r3, #16]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215a:	b2d2      	uxtb	r2, r2
 800215c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002162:	1c5a      	adds	r2, r3, #1
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800216c:	3b01      	subs	r3, #1
 800216e:	b29a      	uxth	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002178:	b29b      	uxth	r3, r3
 800217a:	3b01      	subs	r3, #1
 800217c:	b29a      	uxth	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	691a      	ldr	r2, [r3, #16]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218c:	b2d2      	uxtb	r2, r2
 800218e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002194:	1c5a      	adds	r2, r3, #1
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800219e:	3b01      	subs	r3, #1
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	3b01      	subs	r3, #1
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80021b4:	e0b8      	b.n	8002328 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021bc:	2200      	movs	r2, #0
 80021be:	4966      	ldr	r1, [pc, #408]	; (8002358 <HAL_I2C_Master_Receive+0x448>)
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f000 fa1b 	bl	80025fc <I2C_WaitOnFlagUntilTimeout>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e0bf      	b.n	8002350 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	691a      	ldr	r2, [r3, #16]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f2:	1c5a      	adds	r2, r3, #1
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021fc:	3b01      	subs	r3, #1
 80021fe:	b29a      	uxth	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002208:	b29b      	uxth	r3, r3
 800220a:	3b01      	subs	r3, #1
 800220c:	b29a      	uxth	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002218:	2200      	movs	r2, #0
 800221a:	494f      	ldr	r1, [pc, #316]	; (8002358 <HAL_I2C_Master_Receive+0x448>)
 800221c:	68f8      	ldr	r0, [r7, #12]
 800221e:	f000 f9ed 	bl	80025fc <I2C_WaitOnFlagUntilTimeout>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e091      	b.n	8002350 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800223a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	691a      	ldr	r2, [r3, #16]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224e:	1c5a      	adds	r2, r3, #1
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002258:	3b01      	subs	r3, #1
 800225a:	b29a      	uxth	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002264:	b29b      	uxth	r3, r3
 8002266:	3b01      	subs	r3, #1
 8002268:	b29a      	uxth	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	691a      	ldr	r2, [r3, #16]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002278:	b2d2      	uxtb	r2, r2
 800227a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002280:	1c5a      	adds	r2, r3, #1
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800228a:	3b01      	subs	r3, #1
 800228c:	b29a      	uxth	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002296:	b29b      	uxth	r3, r3
 8002298:	3b01      	subs	r3, #1
 800229a:	b29a      	uxth	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022a0:	e042      	b.n	8002328 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 fb00 	bl	80028ac <I2C_WaitOnRXNEFlagUntilTimeout>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e04c      	b.n	8002350 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	691a      	ldr	r2, [r3, #16]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	b2d2      	uxtb	r2, r2
 80022c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	1c5a      	adds	r2, r3, #1
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d2:	3b01      	subs	r3, #1
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022de:	b29b      	uxth	r3, r3
 80022e0:	3b01      	subs	r3, #1
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	f003 0304 	and.w	r3, r3, #4
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	d118      	bne.n	8002328 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	691a      	ldr	r2, [r3, #16]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	1c5a      	adds	r2, r3, #1
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002312:	3b01      	subs	r3, #1
 8002314:	b29a      	uxth	r2, r3
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800231e:	b29b      	uxth	r3, r3
 8002320:	3b01      	subs	r3, #1
 8002322:	b29a      	uxth	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800232c:	2b00      	cmp	r3, #0
 800232e:	f47f aec2 	bne.w	80020b6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2220      	movs	r2, #32
 8002336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800234a:	2300      	movs	r3, #0
 800234c:	e000      	b.n	8002350 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800234e:	2302      	movs	r3, #2
  }
}
 8002350:	4618      	mov	r0, r3
 8002352:	3728      	adds	r7, #40	; 0x28
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	00010004 	.word	0x00010004

0800235c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b088      	sub	sp, #32
 8002360:	af02      	add	r7, sp, #8
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	607a      	str	r2, [r7, #4]
 8002366:	603b      	str	r3, [r7, #0]
 8002368:	460b      	mov	r3, r1
 800236a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002370:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	2b08      	cmp	r3, #8
 8002376:	d006      	beq.n	8002386 <I2C_MasterRequestWrite+0x2a>
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d003      	beq.n	8002386 <I2C_MasterRequestWrite+0x2a>
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002384:	d108      	bne.n	8002398 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	e00b      	b.n	80023b0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239c:	2b12      	cmp	r3, #18
 800239e:	d107      	bne.n	80023b0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	f000 f91d 	bl	80025fc <I2C_WaitOnFlagUntilTimeout>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00d      	beq.n	80023e4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023d6:	d103      	bne.n	80023e0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e035      	b.n	8002450 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023ec:	d108      	bne.n	8002400 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023ee:	897b      	ldrh	r3, [r7, #10]
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	461a      	mov	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023fc:	611a      	str	r2, [r3, #16]
 80023fe:	e01b      	b.n	8002438 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002400:	897b      	ldrh	r3, [r7, #10]
 8002402:	11db      	asrs	r3, r3, #7
 8002404:	b2db      	uxtb	r3, r3
 8002406:	f003 0306 	and.w	r3, r3, #6
 800240a:	b2db      	uxtb	r3, r3
 800240c:	f063 030f 	orn	r3, r3, #15
 8002410:	b2da      	uxtb	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	490e      	ldr	r1, [pc, #56]	; (8002458 <I2C_MasterRequestWrite+0xfc>)
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f000 f943 	bl	80026aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e010      	b.n	8002450 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800242e:	897b      	ldrh	r3, [r7, #10]
 8002430:	b2da      	uxtb	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	4907      	ldr	r1, [pc, #28]	; (800245c <I2C_MasterRequestWrite+0x100>)
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f000 f933 	bl	80026aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	00010008 	.word	0x00010008
 800245c:	00010002 	.word	0x00010002

08002460 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b088      	sub	sp, #32
 8002464:	af02      	add	r7, sp, #8
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	607a      	str	r2, [r7, #4]
 800246a:	603b      	str	r3, [r7, #0]
 800246c:	460b      	mov	r3, r1
 800246e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002474:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002484:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	2b08      	cmp	r3, #8
 800248a:	d006      	beq.n	800249a <I2C_MasterRequestRead+0x3a>
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d003      	beq.n	800249a <I2C_MasterRequestRead+0x3a>
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002498:	d108      	bne.n	80024ac <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	e00b      	b.n	80024c4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b0:	2b11      	cmp	r3, #17
 80024b2:	d107      	bne.n	80024c4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f000 f893 	bl	80025fc <I2C_WaitOnFlagUntilTimeout>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00d      	beq.n	80024f8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024ea:	d103      	bne.n	80024f4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e079      	b.n	80025ec <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002500:	d108      	bne.n	8002514 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002502:	897b      	ldrh	r3, [r7, #10]
 8002504:	b2db      	uxtb	r3, r3
 8002506:	f043 0301 	orr.w	r3, r3, #1
 800250a:	b2da      	uxtb	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	611a      	str	r2, [r3, #16]
 8002512:	e05f      	b.n	80025d4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002514:	897b      	ldrh	r3, [r7, #10]
 8002516:	11db      	asrs	r3, r3, #7
 8002518:	b2db      	uxtb	r3, r3
 800251a:	f003 0306 	and.w	r3, r3, #6
 800251e:	b2db      	uxtb	r3, r3
 8002520:	f063 030f 	orn	r3, r3, #15
 8002524:	b2da      	uxtb	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	4930      	ldr	r1, [pc, #192]	; (80025f4 <I2C_MasterRequestRead+0x194>)
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f000 f8b9 	bl	80026aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e054      	b.n	80025ec <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002542:	897b      	ldrh	r3, [r7, #10]
 8002544:	b2da      	uxtb	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	4929      	ldr	r1, [pc, #164]	; (80025f8 <I2C_MasterRequestRead+0x198>)
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 f8a9 	bl	80026aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e044      	b.n	80025ec <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002562:	2300      	movs	r3, #0
 8002564:	613b      	str	r3, [r7, #16]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	613b      	str	r3, [r7, #16]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002586:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f000 f831 	bl	80025fc <I2C_WaitOnFlagUntilTimeout>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00d      	beq.n	80025bc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025ae:	d103      	bne.n	80025b8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025b6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e017      	b.n	80025ec <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80025bc:	897b      	ldrh	r3, [r7, #10]
 80025be:	11db      	asrs	r3, r3, #7
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	f003 0306 	and.w	r3, r3, #6
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	f063 030e 	orn	r3, r3, #14
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	4907      	ldr	r1, [pc, #28]	; (80025f8 <I2C_MasterRequestRead+0x198>)
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f000 f865 	bl	80026aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	00010008 	.word	0x00010008
 80025f8:	00010002 	.word	0x00010002

080025fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	603b      	str	r3, [r7, #0]
 8002608:	4613      	mov	r3, r2
 800260a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800260c:	e025      	b.n	800265a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002614:	d021      	beq.n	800265a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002616:	f7fe ffbb 	bl	8001590 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	429a      	cmp	r2, r3
 8002624:	d302      	bcc.n	800262c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d116      	bne.n	800265a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2220      	movs	r2, #32
 8002636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	f043 0220 	orr.w	r2, r3, #32
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e023      	b.n	80026a2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	0c1b      	lsrs	r3, r3, #16
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b01      	cmp	r3, #1
 8002662:	d10d      	bne.n	8002680 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	43da      	mvns	r2, r3
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	4013      	ands	r3, r2
 8002670:	b29b      	uxth	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	bf0c      	ite	eq
 8002676:	2301      	moveq	r3, #1
 8002678:	2300      	movne	r3, #0
 800267a:	b2db      	uxtb	r3, r3
 800267c:	461a      	mov	r2, r3
 800267e:	e00c      	b.n	800269a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	43da      	mvns	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	4013      	ands	r3, r2
 800268c:	b29b      	uxth	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	bf0c      	ite	eq
 8002692:	2301      	moveq	r3, #1
 8002694:	2300      	movne	r3, #0
 8002696:	b2db      	uxtb	r3, r3
 8002698:	461a      	mov	r2, r3
 800269a:	79fb      	ldrb	r3, [r7, #7]
 800269c:	429a      	cmp	r2, r3
 800269e:	d0b6      	beq.n	800260e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b084      	sub	sp, #16
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	60f8      	str	r0, [r7, #12]
 80026b2:	60b9      	str	r1, [r7, #8]
 80026b4:	607a      	str	r2, [r7, #4]
 80026b6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026b8:	e051      	b.n	800275e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026c8:	d123      	bne.n	8002712 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026d8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026e2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2220      	movs	r2, #32
 80026ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	f043 0204 	orr.w	r2, r3, #4
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e046      	b.n	80027a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002718:	d021      	beq.n	800275e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800271a:	f7fe ff39 	bl	8001590 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	429a      	cmp	r2, r3
 8002728:	d302      	bcc.n	8002730 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d116      	bne.n	800275e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2220      	movs	r2, #32
 800273a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	f043 0220 	orr.w	r2, r3, #32
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e020      	b.n	80027a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	0c1b      	lsrs	r3, r3, #16
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b01      	cmp	r3, #1
 8002766:	d10c      	bne.n	8002782 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	43da      	mvns	r2, r3
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	4013      	ands	r3, r2
 8002774:	b29b      	uxth	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	bf14      	ite	ne
 800277a:	2301      	movne	r3, #1
 800277c:	2300      	moveq	r3, #0
 800277e:	b2db      	uxtb	r3, r3
 8002780:	e00b      	b.n	800279a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	43da      	mvns	r2, r3
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	4013      	ands	r3, r2
 800278e:	b29b      	uxth	r3, r3
 8002790:	2b00      	cmp	r3, #0
 8002792:	bf14      	ite	ne
 8002794:	2301      	movne	r3, #1
 8002796:	2300      	moveq	r3, #0
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d18d      	bne.n	80026ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027b4:	e02d      	b.n	8002812 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f000 f8ce 	bl	8002958 <I2C_IsAcknowledgeFailed>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e02d      	b.n	8002822 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027cc:	d021      	beq.n	8002812 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ce:	f7fe fedf 	bl	8001590 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	68ba      	ldr	r2, [r7, #8]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d302      	bcc.n	80027e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d116      	bne.n	8002812 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2220      	movs	r2, #32
 80027ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	f043 0220 	orr.w	r2, r3, #32
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e007      	b.n	8002822 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800281c:	2b80      	cmp	r3, #128	; 0x80
 800281e:	d1ca      	bne.n	80027b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b084      	sub	sp, #16
 800282e:	af00      	add	r7, sp, #0
 8002830:	60f8      	str	r0, [r7, #12]
 8002832:	60b9      	str	r1, [r7, #8]
 8002834:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002836:	e02d      	b.n	8002894 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f000 f88d 	bl	8002958 <I2C_IsAcknowledgeFailed>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e02d      	b.n	80028a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800284e:	d021      	beq.n	8002894 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002850:	f7fe fe9e 	bl	8001590 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	429a      	cmp	r2, r3
 800285e:	d302      	bcc.n	8002866 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d116      	bne.n	8002894 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2220      	movs	r2, #32
 8002870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002880:	f043 0220 	orr.w	r2, r3, #32
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e007      	b.n	80028a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	f003 0304 	and.w	r3, r3, #4
 800289e:	2b04      	cmp	r3, #4
 80028a0:	d1ca      	bne.n	8002838 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80028b8:	e042      	b.n	8002940 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	f003 0310 	and.w	r3, r3, #16
 80028c4:	2b10      	cmp	r3, #16
 80028c6:	d119      	bne.n	80028fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f06f 0210 	mvn.w	r2, #16
 80028d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2220      	movs	r2, #32
 80028dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e029      	b.n	8002950 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028fc:	f7fe fe48 	bl	8001590 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	429a      	cmp	r2, r3
 800290a:	d302      	bcc.n	8002912 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d116      	bne.n	8002940 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2220      	movs	r2, #32
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292c:	f043 0220 	orr.w	r2, r3, #32
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e007      	b.n	8002950 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294a:	2b40      	cmp	r3, #64	; 0x40
 800294c:	d1b5      	bne.n	80028ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800296a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800296e:	d11b      	bne.n	80029a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002978:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2220      	movs	r2, #32
 8002984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002994:	f043 0204 	orr.w	r2, r3, #4
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e000      	b.n	80029aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
	...

080029b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e25b      	b.n	8002e82 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d075      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029d6:	4ba3      	ldr	r3, [pc, #652]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 030c 	and.w	r3, r3, #12
 80029de:	2b04      	cmp	r3, #4
 80029e0:	d00c      	beq.n	80029fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029e2:	4ba0      	ldr	r3, [pc, #640]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029ea:	2b08      	cmp	r3, #8
 80029ec:	d112      	bne.n	8002a14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ee:	4b9d      	ldr	r3, [pc, #628]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029fa:	d10b      	bne.n	8002a14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029fc:	4b99      	ldr	r3, [pc, #612]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d05b      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x108>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d157      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e236      	b.n	8002e82 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a1c:	d106      	bne.n	8002a2c <HAL_RCC_OscConfig+0x74>
 8002a1e:	4b91      	ldr	r3, [pc, #580]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a90      	ldr	r2, [pc, #576]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a28:	6013      	str	r3, [r2, #0]
 8002a2a:	e01d      	b.n	8002a68 <HAL_RCC_OscConfig+0xb0>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a34:	d10c      	bne.n	8002a50 <HAL_RCC_OscConfig+0x98>
 8002a36:	4b8b      	ldr	r3, [pc, #556]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a8a      	ldr	r2, [pc, #552]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002a3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a40:	6013      	str	r3, [r2, #0]
 8002a42:	4b88      	ldr	r3, [pc, #544]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a87      	ldr	r2, [pc, #540]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a4c:	6013      	str	r3, [r2, #0]
 8002a4e:	e00b      	b.n	8002a68 <HAL_RCC_OscConfig+0xb0>
 8002a50:	4b84      	ldr	r3, [pc, #528]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a83      	ldr	r2, [pc, #524]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a5a:	6013      	str	r3, [r2, #0]
 8002a5c:	4b81      	ldr	r3, [pc, #516]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a80      	ldr	r2, [pc, #512]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002a62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d013      	beq.n	8002a98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a70:	f7fe fd8e 	bl	8001590 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a78:	f7fe fd8a 	bl	8001590 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b64      	cmp	r3, #100	; 0x64
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e1fb      	b.n	8002e82 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8a:	4b76      	ldr	r3, [pc, #472]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0f0      	beq.n	8002a78 <HAL_RCC_OscConfig+0xc0>
 8002a96:	e014      	b.n	8002ac2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a98:	f7fe fd7a 	bl	8001590 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aa0:	f7fe fd76 	bl	8001590 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b64      	cmp	r3, #100	; 0x64
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e1e7      	b.n	8002e82 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ab2:	4b6c      	ldr	r3, [pc, #432]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1f0      	bne.n	8002aa0 <HAL_RCC_OscConfig+0xe8>
 8002abe:	e000      	b.n	8002ac2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d063      	beq.n	8002b96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ace:	4b65      	ldr	r3, [pc, #404]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 030c 	and.w	r3, r3, #12
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00b      	beq.n	8002af2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ada:	4b62      	ldr	r3, [pc, #392]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ae2:	2b08      	cmp	r3, #8
 8002ae4:	d11c      	bne.n	8002b20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ae6:	4b5f      	ldr	r3, [pc, #380]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d116      	bne.n	8002b20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af2:	4b5c      	ldr	r3, [pc, #368]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d005      	beq.n	8002b0a <HAL_RCC_OscConfig+0x152>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d001      	beq.n	8002b0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e1bb      	b.n	8002e82 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b0a:	4b56      	ldr	r3, [pc, #344]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4952      	ldr	r1, [pc, #328]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b1e:	e03a      	b.n	8002b96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d020      	beq.n	8002b6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b28:	4b4f      	ldr	r3, [pc, #316]	; (8002c68 <HAL_RCC_OscConfig+0x2b0>)
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2e:	f7fe fd2f 	bl	8001590 <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b36:	f7fe fd2b 	bl	8001590 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e19c      	b.n	8002e82 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b48:	4b46      	ldr	r3, [pc, #280]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d0f0      	beq.n	8002b36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b54:	4b43      	ldr	r3, [pc, #268]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	4940      	ldr	r1, [pc, #256]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	600b      	str	r3, [r1, #0]
 8002b68:	e015      	b.n	8002b96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b6a:	4b3f      	ldr	r3, [pc, #252]	; (8002c68 <HAL_RCC_OscConfig+0x2b0>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b70:	f7fe fd0e 	bl	8001590 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b78:	f7fe fd0a 	bl	8001590 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e17b      	b.n	8002e82 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b8a:	4b36      	ldr	r3, [pc, #216]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f0      	bne.n	8002b78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0308 	and.w	r3, r3, #8
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d030      	beq.n	8002c04 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d016      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002baa:	4b30      	ldr	r3, [pc, #192]	; (8002c6c <HAL_RCC_OscConfig+0x2b4>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb0:	f7fe fcee 	bl	8001590 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bb8:	f7fe fcea 	bl	8001590 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e15b      	b.n	8002e82 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bca:	4b26      	ldr	r3, [pc, #152]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002bcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0f0      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x200>
 8002bd6:	e015      	b.n	8002c04 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bd8:	4b24      	ldr	r3, [pc, #144]	; (8002c6c <HAL_RCC_OscConfig+0x2b4>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bde:	f7fe fcd7 	bl	8001590 <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002be6:	f7fe fcd3 	bl	8001590 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e144      	b.n	8002e82 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bf8:	4b1a      	ldr	r3, [pc, #104]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002bfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1f0      	bne.n	8002be6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 80a0 	beq.w	8002d52 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c12:	2300      	movs	r3, #0
 8002c14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c16:	4b13      	ldr	r3, [pc, #76]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10f      	bne.n	8002c42 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	60bb      	str	r3, [r7, #8]
 8002c26:	4b0f      	ldr	r3, [pc, #60]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	4a0e      	ldr	r2, [pc, #56]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c30:	6413      	str	r3, [r2, #64]	; 0x40
 8002c32:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <HAL_RCC_OscConfig+0x2ac>)
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c3a:	60bb      	str	r3, [r7, #8]
 8002c3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c42:	4b0b      	ldr	r3, [pc, #44]	; (8002c70 <HAL_RCC_OscConfig+0x2b8>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d121      	bne.n	8002c92 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c4e:	4b08      	ldr	r3, [pc, #32]	; (8002c70 <HAL_RCC_OscConfig+0x2b8>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a07      	ldr	r2, [pc, #28]	; (8002c70 <HAL_RCC_OscConfig+0x2b8>)
 8002c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c5a:	f7fe fc99 	bl	8001590 <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c60:	e011      	b.n	8002c86 <HAL_RCC_OscConfig+0x2ce>
 8002c62:	bf00      	nop
 8002c64:	40023800 	.word	0x40023800
 8002c68:	42470000 	.word	0x42470000
 8002c6c:	42470e80 	.word	0x42470e80
 8002c70:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c74:	f7fe fc8c 	bl	8001590 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e0fd      	b.n	8002e82 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c86:	4b81      	ldr	r3, [pc, #516]	; (8002e8c <HAL_RCC_OscConfig+0x4d4>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d0f0      	beq.n	8002c74 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d106      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x2f0>
 8002c9a:	4b7d      	ldr	r3, [pc, #500]	; (8002e90 <HAL_RCC_OscConfig+0x4d8>)
 8002c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9e:	4a7c      	ldr	r2, [pc, #496]	; (8002e90 <HAL_RCC_OscConfig+0x4d8>)
 8002ca0:	f043 0301 	orr.w	r3, r3, #1
 8002ca4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ca6:	e01c      	b.n	8002ce2 <HAL_RCC_OscConfig+0x32a>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	2b05      	cmp	r3, #5
 8002cae:	d10c      	bne.n	8002cca <HAL_RCC_OscConfig+0x312>
 8002cb0:	4b77      	ldr	r3, [pc, #476]	; (8002e90 <HAL_RCC_OscConfig+0x4d8>)
 8002cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb4:	4a76      	ldr	r2, [pc, #472]	; (8002e90 <HAL_RCC_OscConfig+0x4d8>)
 8002cb6:	f043 0304 	orr.w	r3, r3, #4
 8002cba:	6713      	str	r3, [r2, #112]	; 0x70
 8002cbc:	4b74      	ldr	r3, [pc, #464]	; (8002e90 <HAL_RCC_OscConfig+0x4d8>)
 8002cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc0:	4a73      	ldr	r2, [pc, #460]	; (8002e90 <HAL_RCC_OscConfig+0x4d8>)
 8002cc2:	f043 0301 	orr.w	r3, r3, #1
 8002cc6:	6713      	str	r3, [r2, #112]	; 0x70
 8002cc8:	e00b      	b.n	8002ce2 <HAL_RCC_OscConfig+0x32a>
 8002cca:	4b71      	ldr	r3, [pc, #452]	; (8002e90 <HAL_RCC_OscConfig+0x4d8>)
 8002ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cce:	4a70      	ldr	r2, [pc, #448]	; (8002e90 <HAL_RCC_OscConfig+0x4d8>)
 8002cd0:	f023 0301 	bic.w	r3, r3, #1
 8002cd4:	6713      	str	r3, [r2, #112]	; 0x70
 8002cd6:	4b6e      	ldr	r3, [pc, #440]	; (8002e90 <HAL_RCC_OscConfig+0x4d8>)
 8002cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cda:	4a6d      	ldr	r2, [pc, #436]	; (8002e90 <HAL_RCC_OscConfig+0x4d8>)
 8002cdc:	f023 0304 	bic.w	r3, r3, #4
 8002ce0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d015      	beq.n	8002d16 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cea:	f7fe fc51 	bl	8001590 <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf0:	e00a      	b.n	8002d08 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cf2:	f7fe fc4d 	bl	8001590 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e0bc      	b.n	8002e82 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d08:	4b61      	ldr	r3, [pc, #388]	; (8002e90 <HAL_RCC_OscConfig+0x4d8>)
 8002d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d0ee      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x33a>
 8002d14:	e014      	b.n	8002d40 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d16:	f7fe fc3b 	bl	8001590 <HAL_GetTick>
 8002d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d1c:	e00a      	b.n	8002d34 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d1e:	f7fe fc37 	bl	8001590 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e0a6      	b.n	8002e82 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d34:	4b56      	ldr	r3, [pc, #344]	; (8002e90 <HAL_RCC_OscConfig+0x4d8>)
 8002d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1ee      	bne.n	8002d1e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d40:	7dfb      	ldrb	r3, [r7, #23]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d105      	bne.n	8002d52 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d46:	4b52      	ldr	r3, [pc, #328]	; (8002e90 <HAL_RCC_OscConfig+0x4d8>)
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	4a51      	ldr	r2, [pc, #324]	; (8002e90 <HAL_RCC_OscConfig+0x4d8>)
 8002d4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d50:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f000 8092 	beq.w	8002e80 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d5c:	4b4c      	ldr	r3, [pc, #304]	; (8002e90 <HAL_RCC_OscConfig+0x4d8>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f003 030c 	and.w	r3, r3, #12
 8002d64:	2b08      	cmp	r3, #8
 8002d66:	d05c      	beq.n	8002e22 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d141      	bne.n	8002df4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d70:	4b48      	ldr	r3, [pc, #288]	; (8002e94 <HAL_RCC_OscConfig+0x4dc>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d76:	f7fe fc0b 	bl	8001590 <HAL_GetTick>
 8002d7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d7c:	e008      	b.n	8002d90 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d7e:	f7fe fc07 	bl	8001590 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e078      	b.n	8002e82 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d90:	4b3f      	ldr	r3, [pc, #252]	; (8002e90 <HAL_RCC_OscConfig+0x4d8>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1f0      	bne.n	8002d7e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	69da      	ldr	r2, [r3, #28]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	431a      	orrs	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002daa:	019b      	lsls	r3, r3, #6
 8002dac:	431a      	orrs	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db2:	085b      	lsrs	r3, r3, #1
 8002db4:	3b01      	subs	r3, #1
 8002db6:	041b      	lsls	r3, r3, #16
 8002db8:	431a      	orrs	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbe:	061b      	lsls	r3, r3, #24
 8002dc0:	4933      	ldr	r1, [pc, #204]	; (8002e90 <HAL_RCC_OscConfig+0x4d8>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dc6:	4b33      	ldr	r3, [pc, #204]	; (8002e94 <HAL_RCC_OscConfig+0x4dc>)
 8002dc8:	2201      	movs	r2, #1
 8002dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dcc:	f7fe fbe0 	bl	8001590 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dd4:	f7fe fbdc 	bl	8001590 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e04d      	b.n	8002e82 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002de6:	4b2a      	ldr	r3, [pc, #168]	; (8002e90 <HAL_RCC_OscConfig+0x4d8>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d0f0      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x41c>
 8002df2:	e045      	b.n	8002e80 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002df4:	4b27      	ldr	r3, [pc, #156]	; (8002e94 <HAL_RCC_OscConfig+0x4dc>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfa:	f7fe fbc9 	bl	8001590 <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e00:	e008      	b.n	8002e14 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e02:	f7fe fbc5 	bl	8001590 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e036      	b.n	8002e82 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e14:	4b1e      	ldr	r3, [pc, #120]	; (8002e90 <HAL_RCC_OscConfig+0x4d8>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1f0      	bne.n	8002e02 <HAL_RCC_OscConfig+0x44a>
 8002e20:	e02e      	b.n	8002e80 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d101      	bne.n	8002e2e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e029      	b.n	8002e82 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e2e:	4b18      	ldr	r3, [pc, #96]	; (8002e90 <HAL_RCC_OscConfig+0x4d8>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d11c      	bne.n	8002e7c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d115      	bne.n	8002e7c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e56:	4013      	ands	r3, r2
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d10d      	bne.n	8002e7c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d106      	bne.n	8002e7c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d001      	beq.n	8002e80 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e000      	b.n	8002e82 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3718      	adds	r7, #24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40007000 	.word	0x40007000
 8002e90:	40023800 	.word	0x40023800
 8002e94:	42470060 	.word	0x42470060

08002e98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e0cc      	b.n	8003046 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002eac:	4b68      	ldr	r3, [pc, #416]	; (8003050 <HAL_RCC_ClockConfig+0x1b8>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 030f 	and.w	r3, r3, #15
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d90c      	bls.n	8002ed4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eba:	4b65      	ldr	r3, [pc, #404]	; (8003050 <HAL_RCC_ClockConfig+0x1b8>)
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	b2d2      	uxtb	r2, r2
 8002ec0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ec2:	4b63      	ldr	r3, [pc, #396]	; (8003050 <HAL_RCC_ClockConfig+0x1b8>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d001      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e0b8      	b.n	8003046 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d020      	beq.n	8002f22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d005      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002eec:	4b59      	ldr	r3, [pc, #356]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	4a58      	ldr	r2, [pc, #352]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ef6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0308 	and.w	r3, r3, #8
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d005      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f04:	4b53      	ldr	r3, [pc, #332]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	4a52      	ldr	r2, [pc, #328]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f10:	4b50      	ldr	r3, [pc, #320]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	494d      	ldr	r1, [pc, #308]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d044      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d107      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f36:	4b47      	ldr	r3, [pc, #284]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d119      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e07f      	b.n	8003046 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d003      	beq.n	8002f56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f52:	2b03      	cmp	r3, #3
 8002f54:	d107      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f56:	4b3f      	ldr	r3, [pc, #252]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d109      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e06f      	b.n	8003046 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f66:	4b3b      	ldr	r3, [pc, #236]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e067      	b.n	8003046 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f76:	4b37      	ldr	r3, [pc, #220]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f023 0203 	bic.w	r2, r3, #3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	4934      	ldr	r1, [pc, #208]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f88:	f7fe fb02 	bl	8001590 <HAL_GetTick>
 8002f8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8e:	e00a      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f90:	f7fe fafe 	bl	8001590 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e04f      	b.n	8003046 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa6:	4b2b      	ldr	r3, [pc, #172]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 020c 	and.w	r2, r3, #12
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d1eb      	bne.n	8002f90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fb8:	4b25      	ldr	r3, [pc, #148]	; (8003050 <HAL_RCC_ClockConfig+0x1b8>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 030f 	and.w	r3, r3, #15
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d20c      	bcs.n	8002fe0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc6:	4b22      	ldr	r3, [pc, #136]	; (8003050 <HAL_RCC_ClockConfig+0x1b8>)
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fce:	4b20      	ldr	r3, [pc, #128]	; (8003050 <HAL_RCC_ClockConfig+0x1b8>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d001      	beq.n	8002fe0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e032      	b.n	8003046 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d008      	beq.n	8002ffe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fec:	4b19      	ldr	r3, [pc, #100]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	4916      	ldr	r1, [pc, #88]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	2b00      	cmp	r3, #0
 8003008:	d009      	beq.n	800301e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800300a:	4b12      	ldr	r3, [pc, #72]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	490e      	ldr	r1, [pc, #56]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 800301a:	4313      	orrs	r3, r2
 800301c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800301e:	f000 f821 	bl	8003064 <HAL_RCC_GetSysClockFreq>
 8003022:	4601      	mov	r1, r0
 8003024:	4b0b      	ldr	r3, [pc, #44]	; (8003054 <HAL_RCC_ClockConfig+0x1bc>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	091b      	lsrs	r3, r3, #4
 800302a:	f003 030f 	and.w	r3, r3, #15
 800302e:	4a0a      	ldr	r2, [pc, #40]	; (8003058 <HAL_RCC_ClockConfig+0x1c0>)
 8003030:	5cd3      	ldrb	r3, [r2, r3]
 8003032:	fa21 f303 	lsr.w	r3, r1, r3
 8003036:	4a09      	ldr	r2, [pc, #36]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8003038:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800303a:	4b09      	ldr	r3, [pc, #36]	; (8003060 <HAL_RCC_ClockConfig+0x1c8>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4618      	mov	r0, r3
 8003040:	f7fe f9b2 	bl	80013a8 <HAL_InitTick>

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40023c00 	.word	0x40023c00
 8003054:	40023800 	.word	0x40023800
 8003058:	0800681c 	.word	0x0800681c
 800305c:	20000000 	.word	0x20000000
 8003060:	20000004 	.word	0x20000004

08003064 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800306a:	2300      	movs	r3, #0
 800306c:	607b      	str	r3, [r7, #4]
 800306e:	2300      	movs	r3, #0
 8003070:	60fb      	str	r3, [r7, #12]
 8003072:	2300      	movs	r3, #0
 8003074:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003076:	2300      	movs	r3, #0
 8003078:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800307a:	4b63      	ldr	r3, [pc, #396]	; (8003208 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 030c 	and.w	r3, r3, #12
 8003082:	2b04      	cmp	r3, #4
 8003084:	d007      	beq.n	8003096 <HAL_RCC_GetSysClockFreq+0x32>
 8003086:	2b08      	cmp	r3, #8
 8003088:	d008      	beq.n	800309c <HAL_RCC_GetSysClockFreq+0x38>
 800308a:	2b00      	cmp	r3, #0
 800308c:	f040 80b4 	bne.w	80031f8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003090:	4b5e      	ldr	r3, [pc, #376]	; (800320c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003092:	60bb      	str	r3, [r7, #8]
       break;
 8003094:	e0b3      	b.n	80031fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003096:	4b5e      	ldr	r3, [pc, #376]	; (8003210 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003098:	60bb      	str	r3, [r7, #8]
      break;
 800309a:	e0b0      	b.n	80031fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800309c:	4b5a      	ldr	r3, [pc, #360]	; (8003208 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030a6:	4b58      	ldr	r3, [pc, #352]	; (8003208 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d04a      	beq.n	8003148 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030b2:	4b55      	ldr	r3, [pc, #340]	; (8003208 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	099b      	lsrs	r3, r3, #6
 80030b8:	f04f 0400 	mov.w	r4, #0
 80030bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80030c0:	f04f 0200 	mov.w	r2, #0
 80030c4:	ea03 0501 	and.w	r5, r3, r1
 80030c8:	ea04 0602 	and.w	r6, r4, r2
 80030cc:	4629      	mov	r1, r5
 80030ce:	4632      	mov	r2, r6
 80030d0:	f04f 0300 	mov.w	r3, #0
 80030d4:	f04f 0400 	mov.w	r4, #0
 80030d8:	0154      	lsls	r4, r2, #5
 80030da:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80030de:	014b      	lsls	r3, r1, #5
 80030e0:	4619      	mov	r1, r3
 80030e2:	4622      	mov	r2, r4
 80030e4:	1b49      	subs	r1, r1, r5
 80030e6:	eb62 0206 	sbc.w	r2, r2, r6
 80030ea:	f04f 0300 	mov.w	r3, #0
 80030ee:	f04f 0400 	mov.w	r4, #0
 80030f2:	0194      	lsls	r4, r2, #6
 80030f4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80030f8:	018b      	lsls	r3, r1, #6
 80030fa:	1a5b      	subs	r3, r3, r1
 80030fc:	eb64 0402 	sbc.w	r4, r4, r2
 8003100:	f04f 0100 	mov.w	r1, #0
 8003104:	f04f 0200 	mov.w	r2, #0
 8003108:	00e2      	lsls	r2, r4, #3
 800310a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800310e:	00d9      	lsls	r1, r3, #3
 8003110:	460b      	mov	r3, r1
 8003112:	4614      	mov	r4, r2
 8003114:	195b      	adds	r3, r3, r5
 8003116:	eb44 0406 	adc.w	r4, r4, r6
 800311a:	f04f 0100 	mov.w	r1, #0
 800311e:	f04f 0200 	mov.w	r2, #0
 8003122:	0262      	lsls	r2, r4, #9
 8003124:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003128:	0259      	lsls	r1, r3, #9
 800312a:	460b      	mov	r3, r1
 800312c:	4614      	mov	r4, r2
 800312e:	4618      	mov	r0, r3
 8003130:	4621      	mov	r1, r4
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f04f 0400 	mov.w	r4, #0
 8003138:	461a      	mov	r2, r3
 800313a:	4623      	mov	r3, r4
 800313c:	f7fd fc1e 	bl	800097c <__aeabi_uldivmod>
 8003140:	4603      	mov	r3, r0
 8003142:	460c      	mov	r4, r1
 8003144:	60fb      	str	r3, [r7, #12]
 8003146:	e049      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003148:	4b2f      	ldr	r3, [pc, #188]	; (8003208 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	099b      	lsrs	r3, r3, #6
 800314e:	f04f 0400 	mov.w	r4, #0
 8003152:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003156:	f04f 0200 	mov.w	r2, #0
 800315a:	ea03 0501 	and.w	r5, r3, r1
 800315e:	ea04 0602 	and.w	r6, r4, r2
 8003162:	4629      	mov	r1, r5
 8003164:	4632      	mov	r2, r6
 8003166:	f04f 0300 	mov.w	r3, #0
 800316a:	f04f 0400 	mov.w	r4, #0
 800316e:	0154      	lsls	r4, r2, #5
 8003170:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003174:	014b      	lsls	r3, r1, #5
 8003176:	4619      	mov	r1, r3
 8003178:	4622      	mov	r2, r4
 800317a:	1b49      	subs	r1, r1, r5
 800317c:	eb62 0206 	sbc.w	r2, r2, r6
 8003180:	f04f 0300 	mov.w	r3, #0
 8003184:	f04f 0400 	mov.w	r4, #0
 8003188:	0194      	lsls	r4, r2, #6
 800318a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800318e:	018b      	lsls	r3, r1, #6
 8003190:	1a5b      	subs	r3, r3, r1
 8003192:	eb64 0402 	sbc.w	r4, r4, r2
 8003196:	f04f 0100 	mov.w	r1, #0
 800319a:	f04f 0200 	mov.w	r2, #0
 800319e:	00e2      	lsls	r2, r4, #3
 80031a0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80031a4:	00d9      	lsls	r1, r3, #3
 80031a6:	460b      	mov	r3, r1
 80031a8:	4614      	mov	r4, r2
 80031aa:	195b      	adds	r3, r3, r5
 80031ac:	eb44 0406 	adc.w	r4, r4, r6
 80031b0:	f04f 0100 	mov.w	r1, #0
 80031b4:	f04f 0200 	mov.w	r2, #0
 80031b8:	02a2      	lsls	r2, r4, #10
 80031ba:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80031be:	0299      	lsls	r1, r3, #10
 80031c0:	460b      	mov	r3, r1
 80031c2:	4614      	mov	r4, r2
 80031c4:	4618      	mov	r0, r3
 80031c6:	4621      	mov	r1, r4
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f04f 0400 	mov.w	r4, #0
 80031ce:	461a      	mov	r2, r3
 80031d0:	4623      	mov	r3, r4
 80031d2:	f7fd fbd3 	bl	800097c <__aeabi_uldivmod>
 80031d6:	4603      	mov	r3, r0
 80031d8:	460c      	mov	r4, r1
 80031da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031dc:	4b0a      	ldr	r3, [pc, #40]	; (8003208 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	0c1b      	lsrs	r3, r3, #16
 80031e2:	f003 0303 	and.w	r3, r3, #3
 80031e6:	3301      	adds	r3, #1
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f4:	60bb      	str	r3, [r7, #8]
      break;
 80031f6:	e002      	b.n	80031fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031f8:	4b04      	ldr	r3, [pc, #16]	; (800320c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80031fa:	60bb      	str	r3, [r7, #8]
      break;
 80031fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031fe:	68bb      	ldr	r3, [r7, #8]
}
 8003200:	4618      	mov	r0, r3
 8003202:	3714      	adds	r7, #20
 8003204:	46bd      	mov	sp, r7
 8003206:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003208:	40023800 	.word	0x40023800
 800320c:	00f42400 	.word	0x00f42400
 8003210:	007a1200 	.word	0x007a1200

08003214 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003218:	4b03      	ldr	r3, [pc, #12]	; (8003228 <HAL_RCC_GetHCLKFreq+0x14>)
 800321a:	681b      	ldr	r3, [r3, #0]
}
 800321c:	4618      	mov	r0, r3
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	20000000 	.word	0x20000000

0800322c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003230:	f7ff fff0 	bl	8003214 <HAL_RCC_GetHCLKFreq>
 8003234:	4601      	mov	r1, r0
 8003236:	4b05      	ldr	r3, [pc, #20]	; (800324c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	0a9b      	lsrs	r3, r3, #10
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	4a03      	ldr	r2, [pc, #12]	; (8003250 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003242:	5cd3      	ldrb	r3, [r2, r3]
 8003244:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003248:	4618      	mov	r0, r3
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40023800 	.word	0x40023800
 8003250:	0800682c 	.word	0x0800682c

08003254 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003258:	f7ff ffdc 	bl	8003214 <HAL_RCC_GetHCLKFreq>
 800325c:	4601      	mov	r1, r0
 800325e:	4b05      	ldr	r3, [pc, #20]	; (8003274 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	0b5b      	lsrs	r3, r3, #13
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	4a03      	ldr	r2, [pc, #12]	; (8003278 <HAL_RCC_GetPCLK2Freq+0x24>)
 800326a:	5cd3      	ldrb	r3, [r2, r3]
 800326c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003270:	4618      	mov	r0, r3
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40023800 	.word	0x40023800
 8003278:	0800682c 	.word	0x0800682c

0800327c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	220f      	movs	r2, #15
 800328a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800328c:	4b12      	ldr	r3, [pc, #72]	; (80032d8 <HAL_RCC_GetClockConfig+0x5c>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f003 0203 	and.w	r2, r3, #3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003298:	4b0f      	ldr	r3, [pc, #60]	; (80032d8 <HAL_RCC_GetClockConfig+0x5c>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80032a4:	4b0c      	ldr	r3, [pc, #48]	; (80032d8 <HAL_RCC_GetClockConfig+0x5c>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80032b0:	4b09      	ldr	r3, [pc, #36]	; (80032d8 <HAL_RCC_GetClockConfig+0x5c>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	08db      	lsrs	r3, r3, #3
 80032b6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80032be:	4b07      	ldr	r3, [pc, #28]	; (80032dc <HAL_RCC_GetClockConfig+0x60>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 020f 	and.w	r2, r3, #15
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	601a      	str	r2, [r3, #0]
}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	40023800 	.word	0x40023800
 80032dc:	40023c00 	.word	0x40023c00

080032e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e01d      	b.n	800332e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d106      	bne.n	800330c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f815 	bl	8003336 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2202      	movs	r2, #2
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3304      	adds	r3, #4
 800331c:	4619      	mov	r1, r3
 800331e:	4610      	mov	r0, r2
 8003320:	f000 f968 	bl	80035f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr

0800334a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800334a:	b480      	push	{r7}
 800334c:	b085      	sub	sp, #20
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f042 0201 	orr.w	r2, r2, #1
 8003360:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2b06      	cmp	r3, #6
 8003372:	d007      	beq.n	8003384 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f042 0201 	orr.w	r2, r2, #1
 8003382:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b082      	sub	sp, #8
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d122      	bne.n	80033ee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d11b      	bne.n	80033ee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f06f 0202 	mvn.w	r2, #2
 80033be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	f003 0303 	and.w	r3, r3, #3
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d003      	beq.n	80033dc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 f8ee 	bl	80035b6 <HAL_TIM_IC_CaptureCallback>
 80033da:	e005      	b.n	80033e8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 f8e0 	bl	80035a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f8f1 	bl	80035ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	f003 0304 	and.w	r3, r3, #4
 80033f8:	2b04      	cmp	r3, #4
 80033fa:	d122      	bne.n	8003442 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	f003 0304 	and.w	r3, r3, #4
 8003406:	2b04      	cmp	r3, #4
 8003408:	d11b      	bne.n	8003442 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f06f 0204 	mvn.w	r2, #4
 8003412:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2202      	movs	r2, #2
 8003418:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 f8c4 	bl	80035b6 <HAL_TIM_IC_CaptureCallback>
 800342e:	e005      	b.n	800343c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 f8b6 	bl	80035a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f8c7 	bl	80035ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	f003 0308 	and.w	r3, r3, #8
 800344c:	2b08      	cmp	r3, #8
 800344e:	d122      	bne.n	8003496 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	f003 0308 	and.w	r3, r3, #8
 800345a:	2b08      	cmp	r3, #8
 800345c:	d11b      	bne.n	8003496 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f06f 0208 	mvn.w	r2, #8
 8003466:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2204      	movs	r2, #4
 800346c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	69db      	ldr	r3, [r3, #28]
 8003474:	f003 0303 	and.w	r3, r3, #3
 8003478:	2b00      	cmp	r3, #0
 800347a:	d003      	beq.n	8003484 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f89a 	bl	80035b6 <HAL_TIM_IC_CaptureCallback>
 8003482:	e005      	b.n	8003490 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 f88c 	bl	80035a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 f89d 	bl	80035ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	f003 0310 	and.w	r3, r3, #16
 80034a0:	2b10      	cmp	r3, #16
 80034a2:	d122      	bne.n	80034ea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	f003 0310 	and.w	r3, r3, #16
 80034ae:	2b10      	cmp	r3, #16
 80034b0:	d11b      	bne.n	80034ea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f06f 0210 	mvn.w	r2, #16
 80034ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2208      	movs	r2, #8
 80034c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d003      	beq.n	80034d8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 f870 	bl	80035b6 <HAL_TIM_IC_CaptureCallback>
 80034d6:	e005      	b.n	80034e4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 f862 	bl	80035a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f873 	bl	80035ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d10e      	bne.n	8003516 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b01      	cmp	r3, #1
 8003504:	d107      	bne.n	8003516 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f06f 0201 	mvn.w	r2, #1
 800350e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f7fd fe45 	bl	80011a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003520:	2b80      	cmp	r3, #128	; 0x80
 8003522:	d10e      	bne.n	8003542 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800352e:	2b80      	cmp	r3, #128	; 0x80
 8003530:	d107      	bne.n	8003542 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800353a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 f8e3 	bl	8003708 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800354c:	2b40      	cmp	r3, #64	; 0x40
 800354e:	d10e      	bne.n	800356e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355a:	2b40      	cmp	r3, #64	; 0x40
 800355c:	d107      	bne.n	800356e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003566:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 f838 	bl	80035de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	f003 0320 	and.w	r3, r3, #32
 8003578:	2b20      	cmp	r3, #32
 800357a:	d10e      	bne.n	800359a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	f003 0320 	and.w	r3, r3, #32
 8003586:	2b20      	cmp	r3, #32
 8003588:	d107      	bne.n	800359a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f06f 0220 	mvn.w	r2, #32
 8003592:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 f8ad 	bl	80036f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800359a:	bf00      	nop
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b083      	sub	sp, #12
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035aa:	bf00      	nop
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b083      	sub	sp, #12
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035be:	bf00      	nop
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035ca:	b480      	push	{r7}
 80035cc:	b083      	sub	sp, #12
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035d2:	bf00      	nop
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr

080035de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035de:	b480      	push	{r7}
 80035e0:	b083      	sub	sp, #12
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
	...

080035f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a34      	ldr	r2, [pc, #208]	; (80036d8 <TIM_Base_SetConfig+0xe4>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d00f      	beq.n	800362c <TIM_Base_SetConfig+0x38>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003612:	d00b      	beq.n	800362c <TIM_Base_SetConfig+0x38>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a31      	ldr	r2, [pc, #196]	; (80036dc <TIM_Base_SetConfig+0xe8>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d007      	beq.n	800362c <TIM_Base_SetConfig+0x38>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a30      	ldr	r2, [pc, #192]	; (80036e0 <TIM_Base_SetConfig+0xec>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d003      	beq.n	800362c <TIM_Base_SetConfig+0x38>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a2f      	ldr	r2, [pc, #188]	; (80036e4 <TIM_Base_SetConfig+0xf0>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d108      	bne.n	800363e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003632:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	4313      	orrs	r3, r2
 800363c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a25      	ldr	r2, [pc, #148]	; (80036d8 <TIM_Base_SetConfig+0xe4>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d01b      	beq.n	800367e <TIM_Base_SetConfig+0x8a>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800364c:	d017      	beq.n	800367e <TIM_Base_SetConfig+0x8a>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a22      	ldr	r2, [pc, #136]	; (80036dc <TIM_Base_SetConfig+0xe8>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d013      	beq.n	800367e <TIM_Base_SetConfig+0x8a>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a21      	ldr	r2, [pc, #132]	; (80036e0 <TIM_Base_SetConfig+0xec>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d00f      	beq.n	800367e <TIM_Base_SetConfig+0x8a>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a20      	ldr	r2, [pc, #128]	; (80036e4 <TIM_Base_SetConfig+0xf0>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d00b      	beq.n	800367e <TIM_Base_SetConfig+0x8a>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a1f      	ldr	r2, [pc, #124]	; (80036e8 <TIM_Base_SetConfig+0xf4>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d007      	beq.n	800367e <TIM_Base_SetConfig+0x8a>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a1e      	ldr	r2, [pc, #120]	; (80036ec <TIM_Base_SetConfig+0xf8>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d003      	beq.n	800367e <TIM_Base_SetConfig+0x8a>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a1d      	ldr	r2, [pc, #116]	; (80036f0 <TIM_Base_SetConfig+0xfc>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d108      	bne.n	8003690 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003684:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	4313      	orrs	r3, r2
 800368e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	4313      	orrs	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a08      	ldr	r2, [pc, #32]	; (80036d8 <TIM_Base_SetConfig+0xe4>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d103      	bne.n	80036c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	691a      	ldr	r2, [r3, #16]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	615a      	str	r2, [r3, #20]
}
 80036ca:	bf00      	nop
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	40010000 	.word	0x40010000
 80036dc:	40000400 	.word	0x40000400
 80036e0:	40000800 	.word	0x40000800
 80036e4:	40000c00 	.word	0x40000c00
 80036e8:	40014000 	.word	0x40014000
 80036ec:	40014400 	.word	0x40014400
 80036f0:	40014800 	.word	0x40014800

080036f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e03f      	b.n	80037ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d106      	bne.n	8003748 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7fd fde8 	bl	8001318 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2224      	movs	r2, #36	; 0x24
 800374c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68da      	ldr	r2, [r3, #12]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800375e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 f829 	bl	80037b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	691a      	ldr	r2, [r3, #16]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003774:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	695a      	ldr	r2, [r3, #20]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003784:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68da      	ldr	r2, [r3, #12]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003794:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2220      	movs	r2, #32
 80037a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2220      	movs	r2, #32
 80037a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
	...

080037b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037bc:	b085      	sub	sp, #20
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	68da      	ldr	r2, [r3, #12]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	431a      	orrs	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	431a      	orrs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80037fa:	f023 030c 	bic.w	r3, r3, #12
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	6812      	ldr	r2, [r2, #0]
 8003802:	68f9      	ldr	r1, [r7, #12]
 8003804:	430b      	orrs	r3, r1
 8003806:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	699a      	ldr	r2, [r3, #24]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003826:	f040 818b 	bne.w	8003b40 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4ac1      	ldr	r2, [pc, #772]	; (8003b34 <UART_SetConfig+0x37c>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d005      	beq.n	8003840 <UART_SetConfig+0x88>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4abf      	ldr	r2, [pc, #764]	; (8003b38 <UART_SetConfig+0x380>)
 800383a:	4293      	cmp	r3, r2
 800383c:	f040 80bd 	bne.w	80039ba <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003840:	f7ff fd08 	bl	8003254 <HAL_RCC_GetPCLK2Freq>
 8003844:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	461d      	mov	r5, r3
 800384a:	f04f 0600 	mov.w	r6, #0
 800384e:	46a8      	mov	r8, r5
 8003850:	46b1      	mov	r9, r6
 8003852:	eb18 0308 	adds.w	r3, r8, r8
 8003856:	eb49 0409 	adc.w	r4, r9, r9
 800385a:	4698      	mov	r8, r3
 800385c:	46a1      	mov	r9, r4
 800385e:	eb18 0805 	adds.w	r8, r8, r5
 8003862:	eb49 0906 	adc.w	r9, r9, r6
 8003866:	f04f 0100 	mov.w	r1, #0
 800386a:	f04f 0200 	mov.w	r2, #0
 800386e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003872:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003876:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800387a:	4688      	mov	r8, r1
 800387c:	4691      	mov	r9, r2
 800387e:	eb18 0005 	adds.w	r0, r8, r5
 8003882:	eb49 0106 	adc.w	r1, r9, r6
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	461d      	mov	r5, r3
 800388c:	f04f 0600 	mov.w	r6, #0
 8003890:	196b      	adds	r3, r5, r5
 8003892:	eb46 0406 	adc.w	r4, r6, r6
 8003896:	461a      	mov	r2, r3
 8003898:	4623      	mov	r3, r4
 800389a:	f7fd f86f 	bl	800097c <__aeabi_uldivmod>
 800389e:	4603      	mov	r3, r0
 80038a0:	460c      	mov	r4, r1
 80038a2:	461a      	mov	r2, r3
 80038a4:	4ba5      	ldr	r3, [pc, #660]	; (8003b3c <UART_SetConfig+0x384>)
 80038a6:	fba3 2302 	umull	r2, r3, r3, r2
 80038aa:	095b      	lsrs	r3, r3, #5
 80038ac:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	461d      	mov	r5, r3
 80038b4:	f04f 0600 	mov.w	r6, #0
 80038b8:	46a9      	mov	r9, r5
 80038ba:	46b2      	mov	sl, r6
 80038bc:	eb19 0309 	adds.w	r3, r9, r9
 80038c0:	eb4a 040a 	adc.w	r4, sl, sl
 80038c4:	4699      	mov	r9, r3
 80038c6:	46a2      	mov	sl, r4
 80038c8:	eb19 0905 	adds.w	r9, r9, r5
 80038cc:	eb4a 0a06 	adc.w	sl, sl, r6
 80038d0:	f04f 0100 	mov.w	r1, #0
 80038d4:	f04f 0200 	mov.w	r2, #0
 80038d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038e4:	4689      	mov	r9, r1
 80038e6:	4692      	mov	sl, r2
 80038e8:	eb19 0005 	adds.w	r0, r9, r5
 80038ec:	eb4a 0106 	adc.w	r1, sl, r6
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	461d      	mov	r5, r3
 80038f6:	f04f 0600 	mov.w	r6, #0
 80038fa:	196b      	adds	r3, r5, r5
 80038fc:	eb46 0406 	adc.w	r4, r6, r6
 8003900:	461a      	mov	r2, r3
 8003902:	4623      	mov	r3, r4
 8003904:	f7fd f83a 	bl	800097c <__aeabi_uldivmod>
 8003908:	4603      	mov	r3, r0
 800390a:	460c      	mov	r4, r1
 800390c:	461a      	mov	r2, r3
 800390e:	4b8b      	ldr	r3, [pc, #556]	; (8003b3c <UART_SetConfig+0x384>)
 8003910:	fba3 1302 	umull	r1, r3, r3, r2
 8003914:	095b      	lsrs	r3, r3, #5
 8003916:	2164      	movs	r1, #100	; 0x64
 8003918:	fb01 f303 	mul.w	r3, r1, r3
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	3332      	adds	r3, #50	; 0x32
 8003922:	4a86      	ldr	r2, [pc, #536]	; (8003b3c <UART_SetConfig+0x384>)
 8003924:	fba2 2303 	umull	r2, r3, r2, r3
 8003928:	095b      	lsrs	r3, r3, #5
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003930:	4498      	add	r8, r3
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	461d      	mov	r5, r3
 8003936:	f04f 0600 	mov.w	r6, #0
 800393a:	46a9      	mov	r9, r5
 800393c:	46b2      	mov	sl, r6
 800393e:	eb19 0309 	adds.w	r3, r9, r9
 8003942:	eb4a 040a 	adc.w	r4, sl, sl
 8003946:	4699      	mov	r9, r3
 8003948:	46a2      	mov	sl, r4
 800394a:	eb19 0905 	adds.w	r9, r9, r5
 800394e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003952:	f04f 0100 	mov.w	r1, #0
 8003956:	f04f 0200 	mov.w	r2, #0
 800395a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800395e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003962:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003966:	4689      	mov	r9, r1
 8003968:	4692      	mov	sl, r2
 800396a:	eb19 0005 	adds.w	r0, r9, r5
 800396e:	eb4a 0106 	adc.w	r1, sl, r6
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	461d      	mov	r5, r3
 8003978:	f04f 0600 	mov.w	r6, #0
 800397c:	196b      	adds	r3, r5, r5
 800397e:	eb46 0406 	adc.w	r4, r6, r6
 8003982:	461a      	mov	r2, r3
 8003984:	4623      	mov	r3, r4
 8003986:	f7fc fff9 	bl	800097c <__aeabi_uldivmod>
 800398a:	4603      	mov	r3, r0
 800398c:	460c      	mov	r4, r1
 800398e:	461a      	mov	r2, r3
 8003990:	4b6a      	ldr	r3, [pc, #424]	; (8003b3c <UART_SetConfig+0x384>)
 8003992:	fba3 1302 	umull	r1, r3, r3, r2
 8003996:	095b      	lsrs	r3, r3, #5
 8003998:	2164      	movs	r1, #100	; 0x64
 800399a:	fb01 f303 	mul.w	r3, r1, r3
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	00db      	lsls	r3, r3, #3
 80039a2:	3332      	adds	r3, #50	; 0x32
 80039a4:	4a65      	ldr	r2, [pc, #404]	; (8003b3c <UART_SetConfig+0x384>)
 80039a6:	fba2 2303 	umull	r2, r3, r2, r3
 80039aa:	095b      	lsrs	r3, r3, #5
 80039ac:	f003 0207 	and.w	r2, r3, #7
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4442      	add	r2, r8
 80039b6:	609a      	str	r2, [r3, #8]
 80039b8:	e26f      	b.n	8003e9a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039ba:	f7ff fc37 	bl	800322c <HAL_RCC_GetPCLK1Freq>
 80039be:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	461d      	mov	r5, r3
 80039c4:	f04f 0600 	mov.w	r6, #0
 80039c8:	46a8      	mov	r8, r5
 80039ca:	46b1      	mov	r9, r6
 80039cc:	eb18 0308 	adds.w	r3, r8, r8
 80039d0:	eb49 0409 	adc.w	r4, r9, r9
 80039d4:	4698      	mov	r8, r3
 80039d6:	46a1      	mov	r9, r4
 80039d8:	eb18 0805 	adds.w	r8, r8, r5
 80039dc:	eb49 0906 	adc.w	r9, r9, r6
 80039e0:	f04f 0100 	mov.w	r1, #0
 80039e4:	f04f 0200 	mov.w	r2, #0
 80039e8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80039ec:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80039f0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80039f4:	4688      	mov	r8, r1
 80039f6:	4691      	mov	r9, r2
 80039f8:	eb18 0005 	adds.w	r0, r8, r5
 80039fc:	eb49 0106 	adc.w	r1, r9, r6
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	461d      	mov	r5, r3
 8003a06:	f04f 0600 	mov.w	r6, #0
 8003a0a:	196b      	adds	r3, r5, r5
 8003a0c:	eb46 0406 	adc.w	r4, r6, r6
 8003a10:	461a      	mov	r2, r3
 8003a12:	4623      	mov	r3, r4
 8003a14:	f7fc ffb2 	bl	800097c <__aeabi_uldivmod>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	460c      	mov	r4, r1
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	4b47      	ldr	r3, [pc, #284]	; (8003b3c <UART_SetConfig+0x384>)
 8003a20:	fba3 2302 	umull	r2, r3, r3, r2
 8003a24:	095b      	lsrs	r3, r3, #5
 8003a26:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	461d      	mov	r5, r3
 8003a2e:	f04f 0600 	mov.w	r6, #0
 8003a32:	46a9      	mov	r9, r5
 8003a34:	46b2      	mov	sl, r6
 8003a36:	eb19 0309 	adds.w	r3, r9, r9
 8003a3a:	eb4a 040a 	adc.w	r4, sl, sl
 8003a3e:	4699      	mov	r9, r3
 8003a40:	46a2      	mov	sl, r4
 8003a42:	eb19 0905 	adds.w	r9, r9, r5
 8003a46:	eb4a 0a06 	adc.w	sl, sl, r6
 8003a4a:	f04f 0100 	mov.w	r1, #0
 8003a4e:	f04f 0200 	mov.w	r2, #0
 8003a52:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a56:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a5a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a5e:	4689      	mov	r9, r1
 8003a60:	4692      	mov	sl, r2
 8003a62:	eb19 0005 	adds.w	r0, r9, r5
 8003a66:	eb4a 0106 	adc.w	r1, sl, r6
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	461d      	mov	r5, r3
 8003a70:	f04f 0600 	mov.w	r6, #0
 8003a74:	196b      	adds	r3, r5, r5
 8003a76:	eb46 0406 	adc.w	r4, r6, r6
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	4623      	mov	r3, r4
 8003a7e:	f7fc ff7d 	bl	800097c <__aeabi_uldivmod>
 8003a82:	4603      	mov	r3, r0
 8003a84:	460c      	mov	r4, r1
 8003a86:	461a      	mov	r2, r3
 8003a88:	4b2c      	ldr	r3, [pc, #176]	; (8003b3c <UART_SetConfig+0x384>)
 8003a8a:	fba3 1302 	umull	r1, r3, r3, r2
 8003a8e:	095b      	lsrs	r3, r3, #5
 8003a90:	2164      	movs	r1, #100	; 0x64
 8003a92:	fb01 f303 	mul.w	r3, r1, r3
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	3332      	adds	r3, #50	; 0x32
 8003a9c:	4a27      	ldr	r2, [pc, #156]	; (8003b3c <UART_SetConfig+0x384>)
 8003a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa2:	095b      	lsrs	r3, r3, #5
 8003aa4:	005b      	lsls	r3, r3, #1
 8003aa6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003aaa:	4498      	add	r8, r3
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	461d      	mov	r5, r3
 8003ab0:	f04f 0600 	mov.w	r6, #0
 8003ab4:	46a9      	mov	r9, r5
 8003ab6:	46b2      	mov	sl, r6
 8003ab8:	eb19 0309 	adds.w	r3, r9, r9
 8003abc:	eb4a 040a 	adc.w	r4, sl, sl
 8003ac0:	4699      	mov	r9, r3
 8003ac2:	46a2      	mov	sl, r4
 8003ac4:	eb19 0905 	adds.w	r9, r9, r5
 8003ac8:	eb4a 0a06 	adc.w	sl, sl, r6
 8003acc:	f04f 0100 	mov.w	r1, #0
 8003ad0:	f04f 0200 	mov.w	r2, #0
 8003ad4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ad8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003adc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ae0:	4689      	mov	r9, r1
 8003ae2:	4692      	mov	sl, r2
 8003ae4:	eb19 0005 	adds.w	r0, r9, r5
 8003ae8:	eb4a 0106 	adc.w	r1, sl, r6
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	461d      	mov	r5, r3
 8003af2:	f04f 0600 	mov.w	r6, #0
 8003af6:	196b      	adds	r3, r5, r5
 8003af8:	eb46 0406 	adc.w	r4, r6, r6
 8003afc:	461a      	mov	r2, r3
 8003afe:	4623      	mov	r3, r4
 8003b00:	f7fc ff3c 	bl	800097c <__aeabi_uldivmod>
 8003b04:	4603      	mov	r3, r0
 8003b06:	460c      	mov	r4, r1
 8003b08:	461a      	mov	r2, r3
 8003b0a:	4b0c      	ldr	r3, [pc, #48]	; (8003b3c <UART_SetConfig+0x384>)
 8003b0c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b10:	095b      	lsrs	r3, r3, #5
 8003b12:	2164      	movs	r1, #100	; 0x64
 8003b14:	fb01 f303 	mul.w	r3, r1, r3
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	3332      	adds	r3, #50	; 0x32
 8003b1e:	4a07      	ldr	r2, [pc, #28]	; (8003b3c <UART_SetConfig+0x384>)
 8003b20:	fba2 2303 	umull	r2, r3, r2, r3
 8003b24:	095b      	lsrs	r3, r3, #5
 8003b26:	f003 0207 	and.w	r2, r3, #7
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4442      	add	r2, r8
 8003b30:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003b32:	e1b2      	b.n	8003e9a <UART_SetConfig+0x6e2>
 8003b34:	40011000 	.word	0x40011000
 8003b38:	40011400 	.word	0x40011400
 8003b3c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4ad7      	ldr	r2, [pc, #860]	; (8003ea4 <UART_SetConfig+0x6ec>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d005      	beq.n	8003b56 <UART_SetConfig+0x39e>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4ad6      	ldr	r2, [pc, #856]	; (8003ea8 <UART_SetConfig+0x6f0>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	f040 80d1 	bne.w	8003cf8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b56:	f7ff fb7d 	bl	8003254 <HAL_RCC_GetPCLK2Freq>
 8003b5a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	469a      	mov	sl, r3
 8003b60:	f04f 0b00 	mov.w	fp, #0
 8003b64:	46d0      	mov	r8, sl
 8003b66:	46d9      	mov	r9, fp
 8003b68:	eb18 0308 	adds.w	r3, r8, r8
 8003b6c:	eb49 0409 	adc.w	r4, r9, r9
 8003b70:	4698      	mov	r8, r3
 8003b72:	46a1      	mov	r9, r4
 8003b74:	eb18 080a 	adds.w	r8, r8, sl
 8003b78:	eb49 090b 	adc.w	r9, r9, fp
 8003b7c:	f04f 0100 	mov.w	r1, #0
 8003b80:	f04f 0200 	mov.w	r2, #0
 8003b84:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b88:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003b8c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003b90:	4688      	mov	r8, r1
 8003b92:	4691      	mov	r9, r2
 8003b94:	eb1a 0508 	adds.w	r5, sl, r8
 8003b98:	eb4b 0609 	adc.w	r6, fp, r9
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	f04f 0200 	mov.w	r2, #0
 8003ba6:	f04f 0300 	mov.w	r3, #0
 8003baa:	f04f 0400 	mov.w	r4, #0
 8003bae:	0094      	lsls	r4, r2, #2
 8003bb0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003bb4:	008b      	lsls	r3, r1, #2
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	4623      	mov	r3, r4
 8003bba:	4628      	mov	r0, r5
 8003bbc:	4631      	mov	r1, r6
 8003bbe:	f7fc fedd 	bl	800097c <__aeabi_uldivmod>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	460c      	mov	r4, r1
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	4bb8      	ldr	r3, [pc, #736]	; (8003eac <UART_SetConfig+0x6f4>)
 8003bca:	fba3 2302 	umull	r2, r3, r3, r2
 8003bce:	095b      	lsrs	r3, r3, #5
 8003bd0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	469b      	mov	fp, r3
 8003bd8:	f04f 0c00 	mov.w	ip, #0
 8003bdc:	46d9      	mov	r9, fp
 8003bde:	46e2      	mov	sl, ip
 8003be0:	eb19 0309 	adds.w	r3, r9, r9
 8003be4:	eb4a 040a 	adc.w	r4, sl, sl
 8003be8:	4699      	mov	r9, r3
 8003bea:	46a2      	mov	sl, r4
 8003bec:	eb19 090b 	adds.w	r9, r9, fp
 8003bf0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003bf4:	f04f 0100 	mov.w	r1, #0
 8003bf8:	f04f 0200 	mov.w	r2, #0
 8003bfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c08:	4689      	mov	r9, r1
 8003c0a:	4692      	mov	sl, r2
 8003c0c:	eb1b 0509 	adds.w	r5, fp, r9
 8003c10:	eb4c 060a 	adc.w	r6, ip, sl
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	4619      	mov	r1, r3
 8003c1a:	f04f 0200 	mov.w	r2, #0
 8003c1e:	f04f 0300 	mov.w	r3, #0
 8003c22:	f04f 0400 	mov.w	r4, #0
 8003c26:	0094      	lsls	r4, r2, #2
 8003c28:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c2c:	008b      	lsls	r3, r1, #2
 8003c2e:	461a      	mov	r2, r3
 8003c30:	4623      	mov	r3, r4
 8003c32:	4628      	mov	r0, r5
 8003c34:	4631      	mov	r1, r6
 8003c36:	f7fc fea1 	bl	800097c <__aeabi_uldivmod>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	460c      	mov	r4, r1
 8003c3e:	461a      	mov	r2, r3
 8003c40:	4b9a      	ldr	r3, [pc, #616]	; (8003eac <UART_SetConfig+0x6f4>)
 8003c42:	fba3 1302 	umull	r1, r3, r3, r2
 8003c46:	095b      	lsrs	r3, r3, #5
 8003c48:	2164      	movs	r1, #100	; 0x64
 8003c4a:	fb01 f303 	mul.w	r3, r1, r3
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	011b      	lsls	r3, r3, #4
 8003c52:	3332      	adds	r3, #50	; 0x32
 8003c54:	4a95      	ldr	r2, [pc, #596]	; (8003eac <UART_SetConfig+0x6f4>)
 8003c56:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5a:	095b      	lsrs	r3, r3, #5
 8003c5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c60:	4498      	add	r8, r3
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	469b      	mov	fp, r3
 8003c66:	f04f 0c00 	mov.w	ip, #0
 8003c6a:	46d9      	mov	r9, fp
 8003c6c:	46e2      	mov	sl, ip
 8003c6e:	eb19 0309 	adds.w	r3, r9, r9
 8003c72:	eb4a 040a 	adc.w	r4, sl, sl
 8003c76:	4699      	mov	r9, r3
 8003c78:	46a2      	mov	sl, r4
 8003c7a:	eb19 090b 	adds.w	r9, r9, fp
 8003c7e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003c82:	f04f 0100 	mov.w	r1, #0
 8003c86:	f04f 0200 	mov.w	r2, #0
 8003c8a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c8e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c92:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c96:	4689      	mov	r9, r1
 8003c98:	4692      	mov	sl, r2
 8003c9a:	eb1b 0509 	adds.w	r5, fp, r9
 8003c9e:	eb4c 060a 	adc.w	r6, ip, sl
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	f04f 0200 	mov.w	r2, #0
 8003cac:	f04f 0300 	mov.w	r3, #0
 8003cb0:	f04f 0400 	mov.w	r4, #0
 8003cb4:	0094      	lsls	r4, r2, #2
 8003cb6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003cba:	008b      	lsls	r3, r1, #2
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	4623      	mov	r3, r4
 8003cc0:	4628      	mov	r0, r5
 8003cc2:	4631      	mov	r1, r6
 8003cc4:	f7fc fe5a 	bl	800097c <__aeabi_uldivmod>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	460c      	mov	r4, r1
 8003ccc:	461a      	mov	r2, r3
 8003cce:	4b77      	ldr	r3, [pc, #476]	; (8003eac <UART_SetConfig+0x6f4>)
 8003cd0:	fba3 1302 	umull	r1, r3, r3, r2
 8003cd4:	095b      	lsrs	r3, r3, #5
 8003cd6:	2164      	movs	r1, #100	; 0x64
 8003cd8:	fb01 f303 	mul.w	r3, r1, r3
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	011b      	lsls	r3, r3, #4
 8003ce0:	3332      	adds	r3, #50	; 0x32
 8003ce2:	4a72      	ldr	r2, [pc, #456]	; (8003eac <UART_SetConfig+0x6f4>)
 8003ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce8:	095b      	lsrs	r3, r3, #5
 8003cea:	f003 020f 	and.w	r2, r3, #15
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4442      	add	r2, r8
 8003cf4:	609a      	str	r2, [r3, #8]
 8003cf6:	e0d0      	b.n	8003e9a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cf8:	f7ff fa98 	bl	800322c <HAL_RCC_GetPCLK1Freq>
 8003cfc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	469a      	mov	sl, r3
 8003d02:	f04f 0b00 	mov.w	fp, #0
 8003d06:	46d0      	mov	r8, sl
 8003d08:	46d9      	mov	r9, fp
 8003d0a:	eb18 0308 	adds.w	r3, r8, r8
 8003d0e:	eb49 0409 	adc.w	r4, r9, r9
 8003d12:	4698      	mov	r8, r3
 8003d14:	46a1      	mov	r9, r4
 8003d16:	eb18 080a 	adds.w	r8, r8, sl
 8003d1a:	eb49 090b 	adc.w	r9, r9, fp
 8003d1e:	f04f 0100 	mov.w	r1, #0
 8003d22:	f04f 0200 	mov.w	r2, #0
 8003d26:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d2a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d2e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d32:	4688      	mov	r8, r1
 8003d34:	4691      	mov	r9, r2
 8003d36:	eb1a 0508 	adds.w	r5, sl, r8
 8003d3a:	eb4b 0609 	adc.w	r6, fp, r9
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	4619      	mov	r1, r3
 8003d44:	f04f 0200 	mov.w	r2, #0
 8003d48:	f04f 0300 	mov.w	r3, #0
 8003d4c:	f04f 0400 	mov.w	r4, #0
 8003d50:	0094      	lsls	r4, r2, #2
 8003d52:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d56:	008b      	lsls	r3, r1, #2
 8003d58:	461a      	mov	r2, r3
 8003d5a:	4623      	mov	r3, r4
 8003d5c:	4628      	mov	r0, r5
 8003d5e:	4631      	mov	r1, r6
 8003d60:	f7fc fe0c 	bl	800097c <__aeabi_uldivmod>
 8003d64:	4603      	mov	r3, r0
 8003d66:	460c      	mov	r4, r1
 8003d68:	461a      	mov	r2, r3
 8003d6a:	4b50      	ldr	r3, [pc, #320]	; (8003eac <UART_SetConfig+0x6f4>)
 8003d6c:	fba3 2302 	umull	r2, r3, r3, r2
 8003d70:	095b      	lsrs	r3, r3, #5
 8003d72:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	469b      	mov	fp, r3
 8003d7a:	f04f 0c00 	mov.w	ip, #0
 8003d7e:	46d9      	mov	r9, fp
 8003d80:	46e2      	mov	sl, ip
 8003d82:	eb19 0309 	adds.w	r3, r9, r9
 8003d86:	eb4a 040a 	adc.w	r4, sl, sl
 8003d8a:	4699      	mov	r9, r3
 8003d8c:	46a2      	mov	sl, r4
 8003d8e:	eb19 090b 	adds.w	r9, r9, fp
 8003d92:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003d96:	f04f 0100 	mov.w	r1, #0
 8003d9a:	f04f 0200 	mov.w	r2, #0
 8003d9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003da2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003da6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003daa:	4689      	mov	r9, r1
 8003dac:	4692      	mov	sl, r2
 8003dae:	eb1b 0509 	adds.w	r5, fp, r9
 8003db2:	eb4c 060a 	adc.w	r6, ip, sl
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	4619      	mov	r1, r3
 8003dbc:	f04f 0200 	mov.w	r2, #0
 8003dc0:	f04f 0300 	mov.w	r3, #0
 8003dc4:	f04f 0400 	mov.w	r4, #0
 8003dc8:	0094      	lsls	r4, r2, #2
 8003dca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003dce:	008b      	lsls	r3, r1, #2
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	4623      	mov	r3, r4
 8003dd4:	4628      	mov	r0, r5
 8003dd6:	4631      	mov	r1, r6
 8003dd8:	f7fc fdd0 	bl	800097c <__aeabi_uldivmod>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	460c      	mov	r4, r1
 8003de0:	461a      	mov	r2, r3
 8003de2:	4b32      	ldr	r3, [pc, #200]	; (8003eac <UART_SetConfig+0x6f4>)
 8003de4:	fba3 1302 	umull	r1, r3, r3, r2
 8003de8:	095b      	lsrs	r3, r3, #5
 8003dea:	2164      	movs	r1, #100	; 0x64
 8003dec:	fb01 f303 	mul.w	r3, r1, r3
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	011b      	lsls	r3, r3, #4
 8003df4:	3332      	adds	r3, #50	; 0x32
 8003df6:	4a2d      	ldr	r2, [pc, #180]	; (8003eac <UART_SetConfig+0x6f4>)
 8003df8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfc:	095b      	lsrs	r3, r3, #5
 8003dfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e02:	4498      	add	r8, r3
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	469b      	mov	fp, r3
 8003e08:	f04f 0c00 	mov.w	ip, #0
 8003e0c:	46d9      	mov	r9, fp
 8003e0e:	46e2      	mov	sl, ip
 8003e10:	eb19 0309 	adds.w	r3, r9, r9
 8003e14:	eb4a 040a 	adc.w	r4, sl, sl
 8003e18:	4699      	mov	r9, r3
 8003e1a:	46a2      	mov	sl, r4
 8003e1c:	eb19 090b 	adds.w	r9, r9, fp
 8003e20:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003e24:	f04f 0100 	mov.w	r1, #0
 8003e28:	f04f 0200 	mov.w	r2, #0
 8003e2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e30:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e34:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e38:	4689      	mov	r9, r1
 8003e3a:	4692      	mov	sl, r2
 8003e3c:	eb1b 0509 	adds.w	r5, fp, r9
 8003e40:	eb4c 060a 	adc.w	r6, ip, sl
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	4619      	mov	r1, r3
 8003e4a:	f04f 0200 	mov.w	r2, #0
 8003e4e:	f04f 0300 	mov.w	r3, #0
 8003e52:	f04f 0400 	mov.w	r4, #0
 8003e56:	0094      	lsls	r4, r2, #2
 8003e58:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e5c:	008b      	lsls	r3, r1, #2
 8003e5e:	461a      	mov	r2, r3
 8003e60:	4623      	mov	r3, r4
 8003e62:	4628      	mov	r0, r5
 8003e64:	4631      	mov	r1, r6
 8003e66:	f7fc fd89 	bl	800097c <__aeabi_uldivmod>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	460c      	mov	r4, r1
 8003e6e:	461a      	mov	r2, r3
 8003e70:	4b0e      	ldr	r3, [pc, #56]	; (8003eac <UART_SetConfig+0x6f4>)
 8003e72:	fba3 1302 	umull	r1, r3, r3, r2
 8003e76:	095b      	lsrs	r3, r3, #5
 8003e78:	2164      	movs	r1, #100	; 0x64
 8003e7a:	fb01 f303 	mul.w	r3, r1, r3
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	011b      	lsls	r3, r3, #4
 8003e82:	3332      	adds	r3, #50	; 0x32
 8003e84:	4a09      	ldr	r2, [pc, #36]	; (8003eac <UART_SetConfig+0x6f4>)
 8003e86:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8a:	095b      	lsrs	r3, r3, #5
 8003e8c:	f003 020f 	and.w	r2, r3, #15
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4442      	add	r2, r8
 8003e96:	609a      	str	r2, [r3, #8]
}
 8003e98:	e7ff      	b.n	8003e9a <UART_SetConfig+0x6e2>
 8003e9a:	bf00      	nop
 8003e9c:	3714      	adds	r7, #20
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ea4:	40011000 	.word	0x40011000
 8003ea8:	40011400 	.word	0x40011400
 8003eac:	51eb851f 	.word	0x51eb851f

08003eb0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4a07      	ldr	r2, [pc, #28]	; (8003edc <vApplicationGetIdleTaskMemory+0x2c>)
 8003ec0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	4a06      	ldr	r2, [pc, #24]	; (8003ee0 <vApplicationGetIdleTaskMemory+0x30>)
 8003ec6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2280      	movs	r2, #128	; 0x80
 8003ecc:	601a      	str	r2, [r3, #0]
}
 8003ece:	bf00      	nop
 8003ed0:	3714      	adds	r7, #20
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	20000138 	.word	0x20000138
 8003ee0:	20000194 	.word	0x20000194

08003ee4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4a07      	ldr	r2, [pc, #28]	; (8003f10 <vApplicationGetTimerTaskMemory+0x2c>)
 8003ef4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	4a06      	ldr	r2, [pc, #24]	; (8003f14 <vApplicationGetTimerTaskMemory+0x30>)
 8003efa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f02:	601a      	str	r2, [r3, #0]
}
 8003f04:	bf00      	nop
 8003f06:	3714      	adds	r7, #20
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	20000394 	.word	0x20000394
 8003f14:	200003f0 	.word	0x200003f0

08003f18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f103 0208 	add.w	r2, r3, #8
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f103 0208 	add.w	r2, r3, #8
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f103 0208 	add.w	r2, r3, #8
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f66:	bf00      	nop
 8003f68:	370c      	adds	r7, #12
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr

08003f72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f72:	b480      	push	{r7}
 8003f74:	b085      	sub	sp, #20
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
 8003f7a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	689a      	ldr	r2, [r3, #8]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	1c5a      	adds	r2, r3, #1
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	601a      	str	r2, [r3, #0]
}
 8003fae:	bf00      	nop
 8003fb0:	3714      	adds	r7, #20
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b085      	sub	sp, #20
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
 8003fc2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fd0:	d103      	bne.n	8003fda <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	60fb      	str	r3, [r7, #12]
 8003fd8:	e00c      	b.n	8003ff4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	3308      	adds	r3, #8
 8003fde:	60fb      	str	r3, [r7, #12]
 8003fe0:	e002      	b.n	8003fe8 <vListInsert+0x2e>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	60fb      	str	r3, [r7, #12]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d2f6      	bcs.n	8003fe2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	683a      	ldr	r2, [r7, #0]
 8004002:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	1c5a      	adds	r2, r3, #1
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	601a      	str	r2, [r3, #0]
}
 8004020:	bf00      	nop
 8004022:	3714      	adds	r7, #20
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	6892      	ldr	r2, [r2, #8]
 8004042:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	6852      	ldr	r2, [r2, #4]
 800404c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	429a      	cmp	r2, r3
 8004056:	d103      	bne.n	8004060 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689a      	ldr	r2, [r3, #8]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	1e5a      	subs	r2, r3, #1
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
}
 8004074:	4618      	mov	r0, r3
 8004076:	3714      	adds	r7, #20
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d109      	bne.n	80040a8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004098:	f383 8811 	msr	BASEPRI, r3
 800409c:	f3bf 8f6f 	isb	sy
 80040a0:	f3bf 8f4f 	dsb	sy
 80040a4:	60bb      	str	r3, [r7, #8]
 80040a6:	e7fe      	b.n	80040a6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80040a8:	f002 f810 	bl	80060cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b4:	68f9      	ldr	r1, [r7, #12]
 80040b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80040b8:	fb01 f303 	mul.w	r3, r1, r3
 80040bc:	441a      	add	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d8:	3b01      	subs	r3, #1
 80040da:	68f9      	ldr	r1, [r7, #12]
 80040dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80040de:	fb01 f303 	mul.w	r3, r1, r3
 80040e2:	441a      	add	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	22ff      	movs	r2, #255	; 0xff
 80040ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	22ff      	movs	r2, #255	; 0xff
 80040f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d114      	bne.n	8004128 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d01a      	beq.n	800413c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	3310      	adds	r3, #16
 800410a:	4618      	mov	r0, r3
 800410c:	f001 f8de 	bl	80052cc <xTaskRemoveFromEventList>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d012      	beq.n	800413c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004116:	4b0d      	ldr	r3, [pc, #52]	; (800414c <xQueueGenericReset+0xcc>)
 8004118:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800411c:	601a      	str	r2, [r3, #0]
 800411e:	f3bf 8f4f 	dsb	sy
 8004122:	f3bf 8f6f 	isb	sy
 8004126:	e009      	b.n	800413c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	3310      	adds	r3, #16
 800412c:	4618      	mov	r0, r3
 800412e:	f7ff fef3 	bl	8003f18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	3324      	adds	r3, #36	; 0x24
 8004136:	4618      	mov	r0, r3
 8004138:	f7ff feee 	bl	8003f18 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800413c:	f001 fff4 	bl	8006128 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004140:	2301      	movs	r3, #1
}
 8004142:	4618      	mov	r0, r3
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	e000ed04 	.word	0xe000ed04

08004150 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004150:	b580      	push	{r7, lr}
 8004152:	b08e      	sub	sp, #56	; 0x38
 8004154:	af02      	add	r7, sp, #8
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
 800415c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d109      	bne.n	8004178 <xQueueGenericCreateStatic+0x28>
 8004164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004168:	f383 8811 	msr	BASEPRI, r3
 800416c:	f3bf 8f6f 	isb	sy
 8004170:	f3bf 8f4f 	dsb	sy
 8004174:	62bb      	str	r3, [r7, #40]	; 0x28
 8004176:	e7fe      	b.n	8004176 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d109      	bne.n	8004192 <xQueueGenericCreateStatic+0x42>
 800417e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004182:	f383 8811 	msr	BASEPRI, r3
 8004186:	f3bf 8f6f 	isb	sy
 800418a:	f3bf 8f4f 	dsb	sy
 800418e:	627b      	str	r3, [r7, #36]	; 0x24
 8004190:	e7fe      	b.n	8004190 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d002      	beq.n	800419e <xQueueGenericCreateStatic+0x4e>
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <xQueueGenericCreateStatic+0x52>
 800419e:	2301      	movs	r3, #1
 80041a0:	e000      	b.n	80041a4 <xQueueGenericCreateStatic+0x54>
 80041a2:	2300      	movs	r3, #0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d109      	bne.n	80041bc <xQueueGenericCreateStatic+0x6c>
 80041a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ac:	f383 8811 	msr	BASEPRI, r3
 80041b0:	f3bf 8f6f 	isb	sy
 80041b4:	f3bf 8f4f 	dsb	sy
 80041b8:	623b      	str	r3, [r7, #32]
 80041ba:	e7fe      	b.n	80041ba <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d102      	bne.n	80041c8 <xQueueGenericCreateStatic+0x78>
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d101      	bne.n	80041cc <xQueueGenericCreateStatic+0x7c>
 80041c8:	2301      	movs	r3, #1
 80041ca:	e000      	b.n	80041ce <xQueueGenericCreateStatic+0x7e>
 80041cc:	2300      	movs	r3, #0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d109      	bne.n	80041e6 <xQueueGenericCreateStatic+0x96>
 80041d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d6:	f383 8811 	msr	BASEPRI, r3
 80041da:	f3bf 8f6f 	isb	sy
 80041de:	f3bf 8f4f 	dsb	sy
 80041e2:	61fb      	str	r3, [r7, #28]
 80041e4:	e7fe      	b.n	80041e4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80041e6:	2350      	movs	r3, #80	; 0x50
 80041e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	2b50      	cmp	r3, #80	; 0x50
 80041ee:	d009      	beq.n	8004204 <xQueueGenericCreateStatic+0xb4>
 80041f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f4:	f383 8811 	msr	BASEPRI, r3
 80041f8:	f3bf 8f6f 	isb	sy
 80041fc:	f3bf 8f4f 	dsb	sy
 8004200:	61bb      	str	r3, [r7, #24]
 8004202:	e7fe      	b.n	8004202 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004204:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800420a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00d      	beq.n	800422c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004218:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800421c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	4613      	mov	r3, r2
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	68b9      	ldr	r1, [r7, #8]
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f000 f805 	bl	8004236 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800422c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800422e:	4618      	mov	r0, r3
 8004230:	3730      	adds	r7, #48	; 0x30
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004236:	b580      	push	{r7, lr}
 8004238:	b084      	sub	sp, #16
 800423a:	af00      	add	r7, sp, #0
 800423c:	60f8      	str	r0, [r7, #12]
 800423e:	60b9      	str	r1, [r7, #8]
 8004240:	607a      	str	r2, [r7, #4]
 8004242:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d103      	bne.n	8004252 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	601a      	str	r2, [r3, #0]
 8004250:	e002      	b.n	8004258 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004264:	2101      	movs	r1, #1
 8004266:	69b8      	ldr	r0, [r7, #24]
 8004268:	f7ff ff0a 	bl	8004080 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	78fa      	ldrb	r2, [r7, #3]
 8004270:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004274:	bf00      	nop
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b08e      	sub	sp, #56	; 0x38
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
 8004288:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800428a:	2300      	movs	r3, #0
 800428c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004294:	2b00      	cmp	r3, #0
 8004296:	d109      	bne.n	80042ac <xQueueGenericSend+0x30>
 8004298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429c:	f383 8811 	msr	BASEPRI, r3
 80042a0:	f3bf 8f6f 	isb	sy
 80042a4:	f3bf 8f4f 	dsb	sy
 80042a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80042aa:	e7fe      	b.n	80042aa <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d103      	bne.n	80042ba <xQueueGenericSend+0x3e>
 80042b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <xQueueGenericSend+0x42>
 80042ba:	2301      	movs	r3, #1
 80042bc:	e000      	b.n	80042c0 <xQueueGenericSend+0x44>
 80042be:	2300      	movs	r3, #0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d109      	bne.n	80042d8 <xQueueGenericSend+0x5c>
 80042c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c8:	f383 8811 	msr	BASEPRI, r3
 80042cc:	f3bf 8f6f 	isb	sy
 80042d0:	f3bf 8f4f 	dsb	sy
 80042d4:	627b      	str	r3, [r7, #36]	; 0x24
 80042d6:	e7fe      	b.n	80042d6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d103      	bne.n	80042e6 <xQueueGenericSend+0x6a>
 80042de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d101      	bne.n	80042ea <xQueueGenericSend+0x6e>
 80042e6:	2301      	movs	r3, #1
 80042e8:	e000      	b.n	80042ec <xQueueGenericSend+0x70>
 80042ea:	2300      	movs	r3, #0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d109      	bne.n	8004304 <xQueueGenericSend+0x88>
 80042f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f4:	f383 8811 	msr	BASEPRI, r3
 80042f8:	f3bf 8f6f 	isb	sy
 80042fc:	f3bf 8f4f 	dsb	sy
 8004300:	623b      	str	r3, [r7, #32]
 8004302:	e7fe      	b.n	8004302 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004304:	f001 f998 	bl	8005638 <xTaskGetSchedulerState>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d102      	bne.n	8004314 <xQueueGenericSend+0x98>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d101      	bne.n	8004318 <xQueueGenericSend+0x9c>
 8004314:	2301      	movs	r3, #1
 8004316:	e000      	b.n	800431a <xQueueGenericSend+0x9e>
 8004318:	2300      	movs	r3, #0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d109      	bne.n	8004332 <xQueueGenericSend+0xb6>
 800431e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004322:	f383 8811 	msr	BASEPRI, r3
 8004326:	f3bf 8f6f 	isb	sy
 800432a:	f3bf 8f4f 	dsb	sy
 800432e:	61fb      	str	r3, [r7, #28]
 8004330:	e7fe      	b.n	8004330 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004332:	f001 fecb 	bl	80060cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004338:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800433a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800433e:	429a      	cmp	r2, r3
 8004340:	d302      	bcc.n	8004348 <xQueueGenericSend+0xcc>
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	2b02      	cmp	r3, #2
 8004346:	d129      	bne.n	800439c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	68b9      	ldr	r1, [r7, #8]
 800434c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800434e:	f000 f9ff 	bl	8004750 <prvCopyDataToQueue>
 8004352:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004358:	2b00      	cmp	r3, #0
 800435a:	d010      	beq.n	800437e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800435c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435e:	3324      	adds	r3, #36	; 0x24
 8004360:	4618      	mov	r0, r3
 8004362:	f000 ffb3 	bl	80052cc <xTaskRemoveFromEventList>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d013      	beq.n	8004394 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800436c:	4b3f      	ldr	r3, [pc, #252]	; (800446c <xQueueGenericSend+0x1f0>)
 800436e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004372:	601a      	str	r2, [r3, #0]
 8004374:	f3bf 8f4f 	dsb	sy
 8004378:	f3bf 8f6f 	isb	sy
 800437c:	e00a      	b.n	8004394 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800437e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004380:	2b00      	cmp	r3, #0
 8004382:	d007      	beq.n	8004394 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004384:	4b39      	ldr	r3, [pc, #228]	; (800446c <xQueueGenericSend+0x1f0>)
 8004386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800438a:	601a      	str	r2, [r3, #0]
 800438c:	f3bf 8f4f 	dsb	sy
 8004390:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004394:	f001 fec8 	bl	8006128 <vPortExitCritical>
				return pdPASS;
 8004398:	2301      	movs	r3, #1
 800439a:	e063      	b.n	8004464 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d103      	bne.n	80043aa <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80043a2:	f001 fec1 	bl	8006128 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80043a6:	2300      	movs	r3, #0
 80043a8:	e05c      	b.n	8004464 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80043aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d106      	bne.n	80043be <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043b0:	f107 0314 	add.w	r3, r7, #20
 80043b4:	4618      	mov	r0, r3
 80043b6:	f000 ffeb 	bl	8005390 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80043ba:	2301      	movs	r3, #1
 80043bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80043be:	f001 feb3 	bl	8006128 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80043c2:	f000 fd67 	bl	8004e94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043c6:	f001 fe81 	bl	80060cc <vPortEnterCritical>
 80043ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043d0:	b25b      	sxtb	r3, r3
 80043d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043d6:	d103      	bne.n	80043e0 <xQueueGenericSend+0x164>
 80043d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043e6:	b25b      	sxtb	r3, r3
 80043e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043ec:	d103      	bne.n	80043f6 <xQueueGenericSend+0x17a>
 80043ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043f6:	f001 fe97 	bl	8006128 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043fa:	1d3a      	adds	r2, r7, #4
 80043fc:	f107 0314 	add.w	r3, r7, #20
 8004400:	4611      	mov	r1, r2
 8004402:	4618      	mov	r0, r3
 8004404:	f000 ffda 	bl	80053bc <xTaskCheckForTimeOut>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d124      	bne.n	8004458 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800440e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004410:	f000 fa96 	bl	8004940 <prvIsQueueFull>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d018      	beq.n	800444c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800441a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441c:	3310      	adds	r3, #16
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	4611      	mov	r1, r2
 8004422:	4618      	mov	r0, r3
 8004424:	f000 ff04 	bl	8005230 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004428:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800442a:	f000 fa21 	bl	8004870 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800442e:	f000 fd3f 	bl	8004eb0 <xTaskResumeAll>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	f47f af7c 	bne.w	8004332 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800443a:	4b0c      	ldr	r3, [pc, #48]	; (800446c <xQueueGenericSend+0x1f0>)
 800443c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004440:	601a      	str	r2, [r3, #0]
 8004442:	f3bf 8f4f 	dsb	sy
 8004446:	f3bf 8f6f 	isb	sy
 800444a:	e772      	b.n	8004332 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800444c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800444e:	f000 fa0f 	bl	8004870 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004452:	f000 fd2d 	bl	8004eb0 <xTaskResumeAll>
 8004456:	e76c      	b.n	8004332 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004458:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800445a:	f000 fa09 	bl	8004870 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800445e:	f000 fd27 	bl	8004eb0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004462:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004464:	4618      	mov	r0, r3
 8004466:	3738      	adds	r7, #56	; 0x38
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	e000ed04 	.word	0xe000ed04

08004470 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b08e      	sub	sp, #56	; 0x38
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
 800447c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004484:	2b00      	cmp	r3, #0
 8004486:	d109      	bne.n	800449c <xQueueGenericSendFromISR+0x2c>
 8004488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448c:	f383 8811 	msr	BASEPRI, r3
 8004490:	f3bf 8f6f 	isb	sy
 8004494:	f3bf 8f4f 	dsb	sy
 8004498:	627b      	str	r3, [r7, #36]	; 0x24
 800449a:	e7fe      	b.n	800449a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d103      	bne.n	80044aa <xQueueGenericSendFromISR+0x3a>
 80044a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <xQueueGenericSendFromISR+0x3e>
 80044aa:	2301      	movs	r3, #1
 80044ac:	e000      	b.n	80044b0 <xQueueGenericSendFromISR+0x40>
 80044ae:	2300      	movs	r3, #0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d109      	bne.n	80044c8 <xQueueGenericSendFromISR+0x58>
 80044b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b8:	f383 8811 	msr	BASEPRI, r3
 80044bc:	f3bf 8f6f 	isb	sy
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	623b      	str	r3, [r7, #32]
 80044c6:	e7fe      	b.n	80044c6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d103      	bne.n	80044d6 <xQueueGenericSendFromISR+0x66>
 80044ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d101      	bne.n	80044da <xQueueGenericSendFromISR+0x6a>
 80044d6:	2301      	movs	r3, #1
 80044d8:	e000      	b.n	80044dc <xQueueGenericSendFromISR+0x6c>
 80044da:	2300      	movs	r3, #0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d109      	bne.n	80044f4 <xQueueGenericSendFromISR+0x84>
 80044e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e4:	f383 8811 	msr	BASEPRI, r3
 80044e8:	f3bf 8f6f 	isb	sy
 80044ec:	f3bf 8f4f 	dsb	sy
 80044f0:	61fb      	str	r3, [r7, #28]
 80044f2:	e7fe      	b.n	80044f2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80044f4:	f001 fec6 	bl	8006284 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80044f8:	f3ef 8211 	mrs	r2, BASEPRI
 80044fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004500:	f383 8811 	msr	BASEPRI, r3
 8004504:	f3bf 8f6f 	isb	sy
 8004508:	f3bf 8f4f 	dsb	sy
 800450c:	61ba      	str	r2, [r7, #24]
 800450e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004510:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004512:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004516:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800451c:	429a      	cmp	r2, r3
 800451e:	d302      	bcc.n	8004526 <xQueueGenericSendFromISR+0xb6>
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	2b02      	cmp	r3, #2
 8004524:	d12c      	bne.n	8004580 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004528:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800452c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004530:	683a      	ldr	r2, [r7, #0]
 8004532:	68b9      	ldr	r1, [r7, #8]
 8004534:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004536:	f000 f90b 	bl	8004750 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800453a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800453e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004542:	d112      	bne.n	800456a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004548:	2b00      	cmp	r3, #0
 800454a:	d016      	beq.n	800457a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800454c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454e:	3324      	adds	r3, #36	; 0x24
 8004550:	4618      	mov	r0, r3
 8004552:	f000 febb 	bl	80052cc <xTaskRemoveFromEventList>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00e      	beq.n	800457a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00b      	beq.n	800457a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	601a      	str	r2, [r3, #0]
 8004568:	e007      	b.n	800457a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800456a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800456e:	3301      	adds	r3, #1
 8004570:	b2db      	uxtb	r3, r3
 8004572:	b25a      	sxtb	r2, r3
 8004574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004576:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800457a:	2301      	movs	r3, #1
 800457c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800457e:	e001      	b.n	8004584 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004580:	2300      	movs	r3, #0
 8004582:	637b      	str	r3, [r7, #52]	; 0x34
 8004584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004586:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800458e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004590:	4618      	mov	r0, r3
 8004592:	3738      	adds	r7, #56	; 0x38
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b08c      	sub	sp, #48	; 0x30
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80045a4:	2300      	movs	r3, #0
 80045a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80045ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d109      	bne.n	80045c6 <xQueueReceive+0x2e>
	__asm volatile
 80045b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b6:	f383 8811 	msr	BASEPRI, r3
 80045ba:	f3bf 8f6f 	isb	sy
 80045be:	f3bf 8f4f 	dsb	sy
 80045c2:	623b      	str	r3, [r7, #32]
 80045c4:	e7fe      	b.n	80045c4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d103      	bne.n	80045d4 <xQueueReceive+0x3c>
 80045cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d101      	bne.n	80045d8 <xQueueReceive+0x40>
 80045d4:	2301      	movs	r3, #1
 80045d6:	e000      	b.n	80045da <xQueueReceive+0x42>
 80045d8:	2300      	movs	r3, #0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d109      	bne.n	80045f2 <xQueueReceive+0x5a>
 80045de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e2:	f383 8811 	msr	BASEPRI, r3
 80045e6:	f3bf 8f6f 	isb	sy
 80045ea:	f3bf 8f4f 	dsb	sy
 80045ee:	61fb      	str	r3, [r7, #28]
 80045f0:	e7fe      	b.n	80045f0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045f2:	f001 f821 	bl	8005638 <xTaskGetSchedulerState>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d102      	bne.n	8004602 <xQueueReceive+0x6a>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <xQueueReceive+0x6e>
 8004602:	2301      	movs	r3, #1
 8004604:	e000      	b.n	8004608 <xQueueReceive+0x70>
 8004606:	2300      	movs	r3, #0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d109      	bne.n	8004620 <xQueueReceive+0x88>
 800460c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004610:	f383 8811 	msr	BASEPRI, r3
 8004614:	f3bf 8f6f 	isb	sy
 8004618:	f3bf 8f4f 	dsb	sy
 800461c:	61bb      	str	r3, [r7, #24]
 800461e:	e7fe      	b.n	800461e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004620:	f001 fd54 	bl	80060cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004628:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	2b00      	cmp	r3, #0
 800462e:	d01f      	beq.n	8004670 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004630:	68b9      	ldr	r1, [r7, #8]
 8004632:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004634:	f000 f8f6 	bl	8004824 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463a:	1e5a      	subs	r2, r3, #1
 800463c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00f      	beq.n	8004668 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464a:	3310      	adds	r3, #16
 800464c:	4618      	mov	r0, r3
 800464e:	f000 fe3d 	bl	80052cc <xTaskRemoveFromEventList>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d007      	beq.n	8004668 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004658:	4b3c      	ldr	r3, [pc, #240]	; (800474c <xQueueReceive+0x1b4>)
 800465a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800465e:	601a      	str	r2, [r3, #0]
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004668:	f001 fd5e 	bl	8006128 <vPortExitCritical>
				return pdPASS;
 800466c:	2301      	movs	r3, #1
 800466e:	e069      	b.n	8004744 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d103      	bne.n	800467e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004676:	f001 fd57 	bl	8006128 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800467a:	2300      	movs	r3, #0
 800467c:	e062      	b.n	8004744 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800467e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004680:	2b00      	cmp	r3, #0
 8004682:	d106      	bne.n	8004692 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004684:	f107 0310 	add.w	r3, r7, #16
 8004688:	4618      	mov	r0, r3
 800468a:	f000 fe81 	bl	8005390 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800468e:	2301      	movs	r3, #1
 8004690:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004692:	f001 fd49 	bl	8006128 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004696:	f000 fbfd 	bl	8004e94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800469a:	f001 fd17 	bl	80060cc <vPortEnterCritical>
 800469e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046a4:	b25b      	sxtb	r3, r3
 80046a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046aa:	d103      	bne.n	80046b4 <xQueueReceive+0x11c>
 80046ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046ba:	b25b      	sxtb	r3, r3
 80046bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046c0:	d103      	bne.n	80046ca <xQueueReceive+0x132>
 80046c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046ca:	f001 fd2d 	bl	8006128 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046ce:	1d3a      	adds	r2, r7, #4
 80046d0:	f107 0310 	add.w	r3, r7, #16
 80046d4:	4611      	mov	r1, r2
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 fe70 	bl	80053bc <xTaskCheckForTimeOut>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d123      	bne.n	800472a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046e4:	f000 f916 	bl	8004914 <prvIsQueueEmpty>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d017      	beq.n	800471e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80046ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f0:	3324      	adds	r3, #36	; 0x24
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	4611      	mov	r1, r2
 80046f6:	4618      	mov	r0, r3
 80046f8:	f000 fd9a 	bl	8005230 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80046fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046fe:	f000 f8b7 	bl	8004870 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004702:	f000 fbd5 	bl	8004eb0 <xTaskResumeAll>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d189      	bne.n	8004620 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800470c:	4b0f      	ldr	r3, [pc, #60]	; (800474c <xQueueReceive+0x1b4>)
 800470e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	f3bf 8f4f 	dsb	sy
 8004718:	f3bf 8f6f 	isb	sy
 800471c:	e780      	b.n	8004620 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800471e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004720:	f000 f8a6 	bl	8004870 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004724:	f000 fbc4 	bl	8004eb0 <xTaskResumeAll>
 8004728:	e77a      	b.n	8004620 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800472a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800472c:	f000 f8a0 	bl	8004870 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004730:	f000 fbbe 	bl	8004eb0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004734:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004736:	f000 f8ed 	bl	8004914 <prvIsQueueEmpty>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	f43f af6f 	beq.w	8004620 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004742:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004744:	4618      	mov	r0, r3
 8004746:	3730      	adds	r7, #48	; 0x30
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	e000ed04 	.word	0xe000ed04

08004750 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800475c:	2300      	movs	r3, #0
 800475e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004764:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10d      	bne.n	800478a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d14d      	bne.n	8004812 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	4618      	mov	r0, r3
 800477c:	f000 ff7a 	bl	8005674 <xTaskPriorityDisinherit>
 8004780:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	609a      	str	r2, [r3, #8]
 8004788:	e043      	b.n	8004812 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d119      	bne.n	80047c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6858      	ldr	r0, [r3, #4]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004798:	461a      	mov	r2, r3
 800479a:	68b9      	ldr	r1, [r7, #8]
 800479c:	f001 ffb6 	bl	800670c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a8:	441a      	add	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	685a      	ldr	r2, [r3, #4]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d32b      	bcc.n	8004812 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	605a      	str	r2, [r3, #4]
 80047c2:	e026      	b.n	8004812 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	68d8      	ldr	r0, [r3, #12]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047cc:	461a      	mov	r2, r3
 80047ce:	68b9      	ldr	r1, [r7, #8]
 80047d0:	f001 ff9c 	bl	800670c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	68da      	ldr	r2, [r3, #12]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047dc:	425b      	negs	r3, r3
 80047de:	441a      	add	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	68da      	ldr	r2, [r3, #12]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d207      	bcs.n	8004800 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	689a      	ldr	r2, [r3, #8]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f8:	425b      	negs	r3, r3
 80047fa:	441a      	add	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b02      	cmp	r3, #2
 8004804:	d105      	bne.n	8004812 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d002      	beq.n	8004812 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	3b01      	subs	r3, #1
 8004810:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1c5a      	adds	r2, r3, #1
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800481a:	697b      	ldr	r3, [r7, #20]
}
 800481c:	4618      	mov	r0, r3
 800481e:	3718      	adds	r7, #24
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004832:	2b00      	cmp	r3, #0
 8004834:	d018      	beq.n	8004868 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68da      	ldr	r2, [r3, #12]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	441a      	add	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	68da      	ldr	r2, [r3, #12]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	429a      	cmp	r2, r3
 800484e:	d303      	bcc.n	8004858 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	68d9      	ldr	r1, [r3, #12]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004860:	461a      	mov	r2, r3
 8004862:	6838      	ldr	r0, [r7, #0]
 8004864:	f001 ff52 	bl	800670c <memcpy>
	}
}
 8004868:	bf00      	nop
 800486a:	3708      	adds	r7, #8
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004878:	f001 fc28 	bl	80060cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004882:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004884:	e011      	b.n	80048aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488a:	2b00      	cmp	r3, #0
 800488c:	d012      	beq.n	80048b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	3324      	adds	r3, #36	; 0x24
 8004892:	4618      	mov	r0, r3
 8004894:	f000 fd1a 	bl	80052cc <xTaskRemoveFromEventList>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d001      	beq.n	80048a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800489e:	f000 fded 	bl	800547c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80048a2:	7bfb      	ldrb	r3, [r7, #15]
 80048a4:	3b01      	subs	r3, #1
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80048aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	dce9      	bgt.n	8004886 <prvUnlockQueue+0x16>
 80048b2:	e000      	b.n	80048b6 <prvUnlockQueue+0x46>
					break;
 80048b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	22ff      	movs	r2, #255	; 0xff
 80048ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80048be:	f001 fc33 	bl	8006128 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80048c2:	f001 fc03 	bl	80060cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80048ce:	e011      	b.n	80048f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d012      	beq.n	80048fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	3310      	adds	r3, #16
 80048dc:	4618      	mov	r0, r3
 80048de:	f000 fcf5 	bl	80052cc <xTaskRemoveFromEventList>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d001      	beq.n	80048ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80048e8:	f000 fdc8 	bl	800547c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80048ec:	7bbb      	ldrb	r3, [r7, #14]
 80048ee:	3b01      	subs	r3, #1
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80048f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	dce9      	bgt.n	80048d0 <prvUnlockQueue+0x60>
 80048fc:	e000      	b.n	8004900 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80048fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	22ff      	movs	r2, #255	; 0xff
 8004904:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004908:	f001 fc0e 	bl	8006128 <vPortExitCritical>
}
 800490c:	bf00      	nop
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800491c:	f001 fbd6 	bl	80060cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004924:	2b00      	cmp	r3, #0
 8004926:	d102      	bne.n	800492e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004928:	2301      	movs	r3, #1
 800492a:	60fb      	str	r3, [r7, #12]
 800492c:	e001      	b.n	8004932 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800492e:	2300      	movs	r3, #0
 8004930:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004932:	f001 fbf9 	bl	8006128 <vPortExitCritical>

	return xReturn;
 8004936:	68fb      	ldr	r3, [r7, #12]
}
 8004938:	4618      	mov	r0, r3
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004948:	f001 fbc0 	bl	80060cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004954:	429a      	cmp	r2, r3
 8004956:	d102      	bne.n	800495e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004958:	2301      	movs	r3, #1
 800495a:	60fb      	str	r3, [r7, #12]
 800495c:	e001      	b.n	8004962 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800495e:	2300      	movs	r3, #0
 8004960:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004962:	f001 fbe1 	bl	8006128 <vPortExitCritical>

	return xReturn;
 8004966:	68fb      	ldr	r3, [r7, #12]
}
 8004968:	4618      	mov	r0, r3
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800497a:	2300      	movs	r3, #0
 800497c:	60fb      	str	r3, [r7, #12]
 800497e:	e014      	b.n	80049aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004980:	4a0e      	ldr	r2, [pc, #56]	; (80049bc <vQueueAddToRegistry+0x4c>)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d10b      	bne.n	80049a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800498c:	490b      	ldr	r1, [pc, #44]	; (80049bc <vQueueAddToRegistry+0x4c>)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004996:	4a09      	ldr	r2, [pc, #36]	; (80049bc <vQueueAddToRegistry+0x4c>)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	00db      	lsls	r3, r3, #3
 800499c:	4413      	add	r3, r2
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80049a2:	e005      	b.n	80049b0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	3301      	adds	r3, #1
 80049a8:	60fb      	str	r3, [r7, #12]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2b07      	cmp	r3, #7
 80049ae:	d9e7      	bls.n	8004980 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80049b0:	bf00      	nop
 80049b2:	3714      	adds	r7, #20
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	20004a84 	.word	0x20004a84

080049c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80049d0:	f001 fb7c 	bl	80060cc <vPortEnterCritical>
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049da:	b25b      	sxtb	r3, r3
 80049dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049e0:	d103      	bne.n	80049ea <vQueueWaitForMessageRestricted+0x2a>
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049f0:	b25b      	sxtb	r3, r3
 80049f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049f6:	d103      	bne.n	8004a00 <vQueueWaitForMessageRestricted+0x40>
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a00:	f001 fb92 	bl	8006128 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d106      	bne.n	8004a1a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	3324      	adds	r3, #36	; 0x24
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	68b9      	ldr	r1, [r7, #8]
 8004a14:	4618      	mov	r0, r3
 8004a16:	f000 fc2f 	bl	8005278 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004a1a:	6978      	ldr	r0, [r7, #20]
 8004a1c:	f7ff ff28 	bl	8004870 <prvUnlockQueue>
	}
 8004a20:	bf00      	nop
 8004a22:	3718      	adds	r7, #24
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b08e      	sub	sp, #56	; 0x38
 8004a2c:	af04      	add	r7, sp, #16
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
 8004a34:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d109      	bne.n	8004a50 <xTaskCreateStatic+0x28>
 8004a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a40:	f383 8811 	msr	BASEPRI, r3
 8004a44:	f3bf 8f6f 	isb	sy
 8004a48:	f3bf 8f4f 	dsb	sy
 8004a4c:	623b      	str	r3, [r7, #32]
 8004a4e:	e7fe      	b.n	8004a4e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d109      	bne.n	8004a6a <xTaskCreateStatic+0x42>
 8004a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5a:	f383 8811 	msr	BASEPRI, r3
 8004a5e:	f3bf 8f6f 	isb	sy
 8004a62:	f3bf 8f4f 	dsb	sy
 8004a66:	61fb      	str	r3, [r7, #28]
 8004a68:	e7fe      	b.n	8004a68 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004a6a:	235c      	movs	r3, #92	; 0x5c
 8004a6c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	2b5c      	cmp	r3, #92	; 0x5c
 8004a72:	d009      	beq.n	8004a88 <xTaskCreateStatic+0x60>
 8004a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a78:	f383 8811 	msr	BASEPRI, r3
 8004a7c:	f3bf 8f6f 	isb	sy
 8004a80:	f3bf 8f4f 	dsb	sy
 8004a84:	61bb      	str	r3, [r7, #24]
 8004a86:	e7fe      	b.n	8004a86 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004a88:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d01e      	beq.n	8004ace <xTaskCreateStatic+0xa6>
 8004a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d01b      	beq.n	8004ace <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a98:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a9e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	9303      	str	r3, [sp, #12]
 8004aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aae:	9302      	str	r3, [sp, #8]
 8004ab0:	f107 0314 	add.w	r3, r7, #20
 8004ab4:	9301      	str	r3, [sp, #4]
 8004ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	68b9      	ldr	r1, [r7, #8]
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 f850 	bl	8004b66 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ac6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ac8:	f000 f8dc 	bl	8004c84 <prvAddNewTaskToReadyList>
 8004acc:	e001      	b.n	8004ad2 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004ad2:	697b      	ldr	r3, [r7, #20]
	}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3728      	adds	r7, #40	; 0x28
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b08c      	sub	sp, #48	; 0x30
 8004ae0:	af04      	add	r7, sp, #16
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	603b      	str	r3, [r7, #0]
 8004ae8:	4613      	mov	r3, r2
 8004aea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004aec:	88fb      	ldrh	r3, [r7, #6]
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4618      	mov	r0, r3
 8004af2:	f001 fc05 	bl	8006300 <pvPortMalloc>
 8004af6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00e      	beq.n	8004b1c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004afe:	205c      	movs	r0, #92	; 0x5c
 8004b00:	f001 fbfe 	bl	8006300 <pvPortMalloc>
 8004b04:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d003      	beq.n	8004b14 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	697a      	ldr	r2, [r7, #20]
 8004b10:	631a      	str	r2, [r3, #48]	; 0x30
 8004b12:	e005      	b.n	8004b20 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004b14:	6978      	ldr	r0, [r7, #20]
 8004b16:	f001 fcb5 	bl	8006484 <vPortFree>
 8004b1a:	e001      	b.n	8004b20 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d017      	beq.n	8004b56 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004b2e:	88fa      	ldrh	r2, [r7, #6]
 8004b30:	2300      	movs	r3, #0
 8004b32:	9303      	str	r3, [sp, #12]
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	9302      	str	r3, [sp, #8]
 8004b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3a:	9301      	str	r3, [sp, #4]
 8004b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3e:	9300      	str	r3, [sp, #0]
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	68b9      	ldr	r1, [r7, #8]
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f000 f80e 	bl	8004b66 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b4a:	69f8      	ldr	r0, [r7, #28]
 8004b4c:	f000 f89a 	bl	8004c84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004b50:	2301      	movs	r3, #1
 8004b52:	61bb      	str	r3, [r7, #24]
 8004b54:	e002      	b.n	8004b5c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004b56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b5a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004b5c:	69bb      	ldr	r3, [r7, #24]
	}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3720      	adds	r7, #32
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b088      	sub	sp, #32
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	60f8      	str	r0, [r7, #12]
 8004b6e:	60b9      	str	r1, [r7, #8]
 8004b70:	607a      	str	r2, [r7, #4]
 8004b72:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b76:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	21a5      	movs	r1, #165	; 0xa5
 8004b80:	f001 fdcf 	bl	8006722 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	f023 0307 	bic.w	r3, r3, #7
 8004b9c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	f003 0307 	and.w	r3, r3, #7
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d009      	beq.n	8004bbc <prvInitialiseNewTask+0x56>
 8004ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bac:	f383 8811 	msr	BASEPRI, r3
 8004bb0:	f3bf 8f6f 	isb	sy
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	617b      	str	r3, [r7, #20]
 8004bba:	e7fe      	b.n	8004bba <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d01f      	beq.n	8004c02 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	61fb      	str	r3, [r7, #28]
 8004bc6:	e012      	b.n	8004bee <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	4413      	add	r3, r2
 8004bce:	7819      	ldrb	r1, [r3, #0]
 8004bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	3334      	adds	r3, #52	; 0x34
 8004bd8:	460a      	mov	r2, r1
 8004bda:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	4413      	add	r3, r2
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d006      	beq.n	8004bf6 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	3301      	adds	r3, #1
 8004bec:	61fb      	str	r3, [r7, #28]
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	2b0f      	cmp	r3, #15
 8004bf2:	d9e9      	bls.n	8004bc8 <prvInitialiseNewTask+0x62>
 8004bf4:	e000      	b.n	8004bf8 <prvInitialiseNewTask+0x92>
			{
				break;
 8004bf6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c00:	e003      	b.n	8004c0a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0c:	2b37      	cmp	r3, #55	; 0x37
 8004c0e:	d901      	bls.n	8004c14 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004c10:	2337      	movs	r3, #55	; 0x37
 8004c12:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c18:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c1e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c22:	2200      	movs	r2, #0
 8004c24:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c28:	3304      	adds	r3, #4
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7ff f994 	bl	8003f58 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c32:	3318      	adds	r3, #24
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7ff f98f 	bl	8003f58 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c3e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c42:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c48:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c4e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c52:	2200      	movs	r2, #0
 8004c54:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	68f9      	ldr	r1, [r7, #12]
 8004c62:	69b8      	ldr	r0, [r7, #24]
 8004c64:	f001 f90c 	bl	8005e80 <pxPortInitialiseStack>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d002      	beq.n	8004c7a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c7a:	bf00      	nop
 8004c7c:	3720      	adds	r7, #32
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
	...

08004c84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004c8c:	f001 fa1e 	bl	80060cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004c90:	4b2d      	ldr	r3, [pc, #180]	; (8004d48 <prvAddNewTaskToReadyList+0xc4>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	3301      	adds	r3, #1
 8004c96:	4a2c      	ldr	r2, [pc, #176]	; (8004d48 <prvAddNewTaskToReadyList+0xc4>)
 8004c98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004c9a:	4b2c      	ldr	r3, [pc, #176]	; (8004d4c <prvAddNewTaskToReadyList+0xc8>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d109      	bne.n	8004cb6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004ca2:	4a2a      	ldr	r2, [pc, #168]	; (8004d4c <prvAddNewTaskToReadyList+0xc8>)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ca8:	4b27      	ldr	r3, [pc, #156]	; (8004d48 <prvAddNewTaskToReadyList+0xc4>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d110      	bne.n	8004cd2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004cb0:	f000 fc08 	bl	80054c4 <prvInitialiseTaskLists>
 8004cb4:	e00d      	b.n	8004cd2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004cb6:	4b26      	ldr	r3, [pc, #152]	; (8004d50 <prvAddNewTaskToReadyList+0xcc>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d109      	bne.n	8004cd2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004cbe:	4b23      	ldr	r3, [pc, #140]	; (8004d4c <prvAddNewTaskToReadyList+0xc8>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d802      	bhi.n	8004cd2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004ccc:	4a1f      	ldr	r2, [pc, #124]	; (8004d4c <prvAddNewTaskToReadyList+0xc8>)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004cd2:	4b20      	ldr	r3, [pc, #128]	; (8004d54 <prvAddNewTaskToReadyList+0xd0>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	4a1e      	ldr	r2, [pc, #120]	; (8004d54 <prvAddNewTaskToReadyList+0xd0>)
 8004cda:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004cdc:	4b1d      	ldr	r3, [pc, #116]	; (8004d54 <prvAddNewTaskToReadyList+0xd0>)
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ce8:	4b1b      	ldr	r3, [pc, #108]	; (8004d58 <prvAddNewTaskToReadyList+0xd4>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d903      	bls.n	8004cf8 <prvAddNewTaskToReadyList+0x74>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf4:	4a18      	ldr	r2, [pc, #96]	; (8004d58 <prvAddNewTaskToReadyList+0xd4>)
 8004cf6:	6013      	str	r3, [r2, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	4413      	add	r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4a15      	ldr	r2, [pc, #84]	; (8004d5c <prvAddNewTaskToReadyList+0xd8>)
 8004d06:	441a      	add	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	3304      	adds	r3, #4
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	4610      	mov	r0, r2
 8004d10:	f7ff f92f 	bl	8003f72 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004d14:	f001 fa08 	bl	8006128 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004d18:	4b0d      	ldr	r3, [pc, #52]	; (8004d50 <prvAddNewTaskToReadyList+0xcc>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00e      	beq.n	8004d3e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004d20:	4b0a      	ldr	r3, [pc, #40]	; (8004d4c <prvAddNewTaskToReadyList+0xc8>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d207      	bcs.n	8004d3e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004d2e:	4b0c      	ldr	r3, [pc, #48]	; (8004d60 <prvAddNewTaskToReadyList+0xdc>)
 8004d30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	f3bf 8f4f 	dsb	sy
 8004d3a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d3e:	bf00      	nop
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	20000cc4 	.word	0x20000cc4
 8004d4c:	200007f0 	.word	0x200007f0
 8004d50:	20000cd0 	.word	0x20000cd0
 8004d54:	20000ce0 	.word	0x20000ce0
 8004d58:	20000ccc 	.word	0x20000ccc
 8004d5c:	200007f4 	.word	0x200007f4
 8004d60:	e000ed04 	.word	0xe000ed04

08004d64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d016      	beq.n	8004da4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004d76:	4b13      	ldr	r3, [pc, #76]	; (8004dc4 <vTaskDelay+0x60>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d009      	beq.n	8004d92 <vTaskDelay+0x2e>
 8004d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d82:	f383 8811 	msr	BASEPRI, r3
 8004d86:	f3bf 8f6f 	isb	sy
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	60bb      	str	r3, [r7, #8]
 8004d90:	e7fe      	b.n	8004d90 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004d92:	f000 f87f 	bl	8004e94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004d96:	2100      	movs	r1, #0
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 fcd7 	bl	800574c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004d9e:	f000 f887 	bl	8004eb0 <xTaskResumeAll>
 8004da2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d107      	bne.n	8004dba <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004daa:	4b07      	ldr	r3, [pc, #28]	; (8004dc8 <vTaskDelay+0x64>)
 8004dac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004db0:	601a      	str	r2, [r3, #0]
 8004db2:	f3bf 8f4f 	dsb	sy
 8004db6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004dba:	bf00      	nop
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	20000cec 	.word	0x20000cec
 8004dc8:	e000ed04 	.word	0xe000ed04

08004dcc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b08a      	sub	sp, #40	; 0x28
 8004dd0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004dda:	463a      	mov	r2, r7
 8004ddc:	1d39      	adds	r1, r7, #4
 8004dde:	f107 0308 	add.w	r3, r7, #8
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7ff f864 	bl	8003eb0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004de8:	6839      	ldr	r1, [r7, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	68ba      	ldr	r2, [r7, #8]
 8004dee:	9202      	str	r2, [sp, #8]
 8004df0:	9301      	str	r3, [sp, #4]
 8004df2:	2300      	movs	r3, #0
 8004df4:	9300      	str	r3, [sp, #0]
 8004df6:	2300      	movs	r3, #0
 8004df8:	460a      	mov	r2, r1
 8004dfa:	4920      	ldr	r1, [pc, #128]	; (8004e7c <vTaskStartScheduler+0xb0>)
 8004dfc:	4820      	ldr	r0, [pc, #128]	; (8004e80 <vTaskStartScheduler+0xb4>)
 8004dfe:	f7ff fe13 	bl	8004a28 <xTaskCreateStatic>
 8004e02:	4602      	mov	r2, r0
 8004e04:	4b1f      	ldr	r3, [pc, #124]	; (8004e84 <vTaskStartScheduler+0xb8>)
 8004e06:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004e08:	4b1e      	ldr	r3, [pc, #120]	; (8004e84 <vTaskStartScheduler+0xb8>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d002      	beq.n	8004e16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004e10:	2301      	movs	r3, #1
 8004e12:	617b      	str	r3, [r7, #20]
 8004e14:	e001      	b.n	8004e1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004e16:	2300      	movs	r3, #0
 8004e18:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d102      	bne.n	8004e26 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004e20:	f000 fce8 	bl	80057f4 <xTimerCreateTimerTask>
 8004e24:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d115      	bne.n	8004e58 <vTaskStartScheduler+0x8c>
 8004e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e30:	f383 8811 	msr	BASEPRI, r3
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004e3e:	4b12      	ldr	r3, [pc, #72]	; (8004e88 <vTaskStartScheduler+0xbc>)
 8004e40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e44:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004e46:	4b11      	ldr	r3, [pc, #68]	; (8004e8c <vTaskStartScheduler+0xc0>)
 8004e48:	2201      	movs	r2, #1
 8004e4a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004e4c:	4b10      	ldr	r3, [pc, #64]	; (8004e90 <vTaskStartScheduler+0xc4>)
 8004e4e:	2200      	movs	r2, #0
 8004e50:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004e52:	f001 f89d 	bl	8005f90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004e56:	e00d      	b.n	8004e74 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e5e:	d109      	bne.n	8004e74 <vTaskStartScheduler+0xa8>
 8004e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e64:	f383 8811 	msr	BASEPRI, r3
 8004e68:	f3bf 8f6f 	isb	sy
 8004e6c:	f3bf 8f4f 	dsb	sy
 8004e70:	60fb      	str	r3, [r7, #12]
 8004e72:	e7fe      	b.n	8004e72 <vTaskStartScheduler+0xa6>
}
 8004e74:	bf00      	nop
 8004e76:	3718      	adds	r7, #24
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	080067f4 	.word	0x080067f4
 8004e80:	08005495 	.word	0x08005495
 8004e84:	20000ce8 	.word	0x20000ce8
 8004e88:	20000ce4 	.word	0x20000ce4
 8004e8c:	20000cd0 	.word	0x20000cd0
 8004e90:	20000cc8 	.word	0x20000cc8

08004e94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004e94:	b480      	push	{r7}
 8004e96:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004e98:	4b04      	ldr	r3, [pc, #16]	; (8004eac <vTaskSuspendAll+0x18>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	4a03      	ldr	r2, [pc, #12]	; (8004eac <vTaskSuspendAll+0x18>)
 8004ea0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004ea2:	bf00      	nop
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr
 8004eac:	20000cec 	.word	0x20000cec

08004eb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004ebe:	4b41      	ldr	r3, [pc, #260]	; (8004fc4 <xTaskResumeAll+0x114>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d109      	bne.n	8004eda <xTaskResumeAll+0x2a>
 8004ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eca:	f383 8811 	msr	BASEPRI, r3
 8004ece:	f3bf 8f6f 	isb	sy
 8004ed2:	f3bf 8f4f 	dsb	sy
 8004ed6:	603b      	str	r3, [r7, #0]
 8004ed8:	e7fe      	b.n	8004ed8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004eda:	f001 f8f7 	bl	80060cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004ede:	4b39      	ldr	r3, [pc, #228]	; (8004fc4 <xTaskResumeAll+0x114>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	4a37      	ldr	r2, [pc, #220]	; (8004fc4 <xTaskResumeAll+0x114>)
 8004ee6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ee8:	4b36      	ldr	r3, [pc, #216]	; (8004fc4 <xTaskResumeAll+0x114>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d162      	bne.n	8004fb6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004ef0:	4b35      	ldr	r3, [pc, #212]	; (8004fc8 <xTaskResumeAll+0x118>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d05e      	beq.n	8004fb6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ef8:	e02f      	b.n	8004f5a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004efa:	4b34      	ldr	r3, [pc, #208]	; (8004fcc <xTaskResumeAll+0x11c>)
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	3318      	adds	r3, #24
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7ff f890 	bl	800402c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	3304      	adds	r3, #4
 8004f10:	4618      	mov	r0, r3
 8004f12:	f7ff f88b 	bl	800402c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f1a:	4b2d      	ldr	r3, [pc, #180]	; (8004fd0 <xTaskResumeAll+0x120>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d903      	bls.n	8004f2a <xTaskResumeAll+0x7a>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f26:	4a2a      	ldr	r2, [pc, #168]	; (8004fd0 <xTaskResumeAll+0x120>)
 8004f28:	6013      	str	r3, [r2, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f2e:	4613      	mov	r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4413      	add	r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	4a27      	ldr	r2, [pc, #156]	; (8004fd4 <xTaskResumeAll+0x124>)
 8004f38:	441a      	add	r2, r3
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	3304      	adds	r3, #4
 8004f3e:	4619      	mov	r1, r3
 8004f40:	4610      	mov	r0, r2
 8004f42:	f7ff f816 	bl	8003f72 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f4a:	4b23      	ldr	r3, [pc, #140]	; (8004fd8 <xTaskResumeAll+0x128>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d302      	bcc.n	8004f5a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004f54:	4b21      	ldr	r3, [pc, #132]	; (8004fdc <xTaskResumeAll+0x12c>)
 8004f56:	2201      	movs	r2, #1
 8004f58:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f5a:	4b1c      	ldr	r3, [pc, #112]	; (8004fcc <xTaskResumeAll+0x11c>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1cb      	bne.n	8004efa <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d001      	beq.n	8004f6c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004f68:	f000 fb46 	bl	80055f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004f6c:	4b1c      	ldr	r3, [pc, #112]	; (8004fe0 <xTaskResumeAll+0x130>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d010      	beq.n	8004f9a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004f78:	f000 f846 	bl	8005008 <xTaskIncrementTick>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d002      	beq.n	8004f88 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004f82:	4b16      	ldr	r3, [pc, #88]	; (8004fdc <xTaskResumeAll+0x12c>)
 8004f84:	2201      	movs	r2, #1
 8004f86:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1f1      	bne.n	8004f78 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004f94:	4b12      	ldr	r3, [pc, #72]	; (8004fe0 <xTaskResumeAll+0x130>)
 8004f96:	2200      	movs	r2, #0
 8004f98:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004f9a:	4b10      	ldr	r3, [pc, #64]	; (8004fdc <xTaskResumeAll+0x12c>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d009      	beq.n	8004fb6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004fa6:	4b0f      	ldr	r3, [pc, #60]	; (8004fe4 <xTaskResumeAll+0x134>)
 8004fa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fac:	601a      	str	r2, [r3, #0]
 8004fae:	f3bf 8f4f 	dsb	sy
 8004fb2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004fb6:	f001 f8b7 	bl	8006128 <vPortExitCritical>

	return xAlreadyYielded;
 8004fba:	68bb      	ldr	r3, [r7, #8]
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3710      	adds	r7, #16
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	20000cec 	.word	0x20000cec
 8004fc8:	20000cc4 	.word	0x20000cc4
 8004fcc:	20000c84 	.word	0x20000c84
 8004fd0:	20000ccc 	.word	0x20000ccc
 8004fd4:	200007f4 	.word	0x200007f4
 8004fd8:	200007f0 	.word	0x200007f0
 8004fdc:	20000cd8 	.word	0x20000cd8
 8004fe0:	20000cd4 	.word	0x20000cd4
 8004fe4:	e000ed04 	.word	0xe000ed04

08004fe8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004fee:	4b05      	ldr	r3, [pc, #20]	; (8005004 <xTaskGetTickCount+0x1c>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004ff4:	687b      	ldr	r3, [r7, #4]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	20000cc8 	.word	0x20000cc8

08005008 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b086      	sub	sp, #24
 800500c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800500e:	2300      	movs	r3, #0
 8005010:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005012:	4b4e      	ldr	r3, [pc, #312]	; (800514c <xTaskIncrementTick+0x144>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	f040 8088 	bne.w	800512c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800501c:	4b4c      	ldr	r3, [pc, #304]	; (8005150 <xTaskIncrementTick+0x148>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	3301      	adds	r3, #1
 8005022:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005024:	4a4a      	ldr	r2, [pc, #296]	; (8005150 <xTaskIncrementTick+0x148>)
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d11f      	bne.n	8005070 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005030:	4b48      	ldr	r3, [pc, #288]	; (8005154 <xTaskIncrementTick+0x14c>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d009      	beq.n	800504e <xTaskIncrementTick+0x46>
 800503a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503e:	f383 8811 	msr	BASEPRI, r3
 8005042:	f3bf 8f6f 	isb	sy
 8005046:	f3bf 8f4f 	dsb	sy
 800504a:	603b      	str	r3, [r7, #0]
 800504c:	e7fe      	b.n	800504c <xTaskIncrementTick+0x44>
 800504e:	4b41      	ldr	r3, [pc, #260]	; (8005154 <xTaskIncrementTick+0x14c>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	60fb      	str	r3, [r7, #12]
 8005054:	4b40      	ldr	r3, [pc, #256]	; (8005158 <xTaskIncrementTick+0x150>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a3e      	ldr	r2, [pc, #248]	; (8005154 <xTaskIncrementTick+0x14c>)
 800505a:	6013      	str	r3, [r2, #0]
 800505c:	4a3e      	ldr	r2, [pc, #248]	; (8005158 <xTaskIncrementTick+0x150>)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6013      	str	r3, [r2, #0]
 8005062:	4b3e      	ldr	r3, [pc, #248]	; (800515c <xTaskIncrementTick+0x154>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	3301      	adds	r3, #1
 8005068:	4a3c      	ldr	r2, [pc, #240]	; (800515c <xTaskIncrementTick+0x154>)
 800506a:	6013      	str	r3, [r2, #0]
 800506c:	f000 fac4 	bl	80055f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005070:	4b3b      	ldr	r3, [pc, #236]	; (8005160 <xTaskIncrementTick+0x158>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	429a      	cmp	r2, r3
 8005078:	d349      	bcc.n	800510e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800507a:	4b36      	ldr	r3, [pc, #216]	; (8005154 <xTaskIncrementTick+0x14c>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d104      	bne.n	800508e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005084:	4b36      	ldr	r3, [pc, #216]	; (8005160 <xTaskIncrementTick+0x158>)
 8005086:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800508a:	601a      	str	r2, [r3, #0]
					break;
 800508c:	e03f      	b.n	800510e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800508e:	4b31      	ldr	r3, [pc, #196]	; (8005154 <xTaskIncrementTick+0x14c>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d203      	bcs.n	80050ae <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80050a6:	4a2e      	ldr	r2, [pc, #184]	; (8005160 <xTaskIncrementTick+0x158>)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80050ac:	e02f      	b.n	800510e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	3304      	adds	r3, #4
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7fe ffba 	bl	800402c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d004      	beq.n	80050ca <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	3318      	adds	r3, #24
 80050c4:	4618      	mov	r0, r3
 80050c6:	f7fe ffb1 	bl	800402c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ce:	4b25      	ldr	r3, [pc, #148]	; (8005164 <xTaskIncrementTick+0x15c>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d903      	bls.n	80050de <xTaskIncrementTick+0xd6>
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050da:	4a22      	ldr	r2, [pc, #136]	; (8005164 <xTaskIncrementTick+0x15c>)
 80050dc:	6013      	str	r3, [r2, #0]
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e2:	4613      	mov	r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4413      	add	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4a1f      	ldr	r2, [pc, #124]	; (8005168 <xTaskIncrementTick+0x160>)
 80050ec:	441a      	add	r2, r3
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	3304      	adds	r3, #4
 80050f2:	4619      	mov	r1, r3
 80050f4:	4610      	mov	r0, r2
 80050f6:	f7fe ff3c 	bl	8003f72 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050fe:	4b1b      	ldr	r3, [pc, #108]	; (800516c <xTaskIncrementTick+0x164>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005104:	429a      	cmp	r2, r3
 8005106:	d3b8      	bcc.n	800507a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005108:	2301      	movs	r3, #1
 800510a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800510c:	e7b5      	b.n	800507a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800510e:	4b17      	ldr	r3, [pc, #92]	; (800516c <xTaskIncrementTick+0x164>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005114:	4914      	ldr	r1, [pc, #80]	; (8005168 <xTaskIncrementTick+0x160>)
 8005116:	4613      	mov	r3, r2
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	4413      	add	r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	440b      	add	r3, r1
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d907      	bls.n	8005136 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8005126:	2301      	movs	r3, #1
 8005128:	617b      	str	r3, [r7, #20]
 800512a:	e004      	b.n	8005136 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800512c:	4b10      	ldr	r3, [pc, #64]	; (8005170 <xTaskIncrementTick+0x168>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3301      	adds	r3, #1
 8005132:	4a0f      	ldr	r2, [pc, #60]	; (8005170 <xTaskIncrementTick+0x168>)
 8005134:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005136:	4b0f      	ldr	r3, [pc, #60]	; (8005174 <xTaskIncrementTick+0x16c>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d001      	beq.n	8005142 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800513e:	2301      	movs	r3, #1
 8005140:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005142:	697b      	ldr	r3, [r7, #20]
}
 8005144:	4618      	mov	r0, r3
 8005146:	3718      	adds	r7, #24
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}
 800514c:	20000cec 	.word	0x20000cec
 8005150:	20000cc8 	.word	0x20000cc8
 8005154:	20000c7c 	.word	0x20000c7c
 8005158:	20000c80 	.word	0x20000c80
 800515c:	20000cdc 	.word	0x20000cdc
 8005160:	20000ce4 	.word	0x20000ce4
 8005164:	20000ccc 	.word	0x20000ccc
 8005168:	200007f4 	.word	0x200007f4
 800516c:	200007f0 	.word	0x200007f0
 8005170:	20000cd4 	.word	0x20000cd4
 8005174:	20000cd8 	.word	0x20000cd8

08005178 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005178:	b480      	push	{r7}
 800517a:	b085      	sub	sp, #20
 800517c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800517e:	4b27      	ldr	r3, [pc, #156]	; (800521c <vTaskSwitchContext+0xa4>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d003      	beq.n	800518e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005186:	4b26      	ldr	r3, [pc, #152]	; (8005220 <vTaskSwitchContext+0xa8>)
 8005188:	2201      	movs	r2, #1
 800518a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800518c:	e040      	b.n	8005210 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800518e:	4b24      	ldr	r3, [pc, #144]	; (8005220 <vTaskSwitchContext+0xa8>)
 8005190:	2200      	movs	r2, #0
 8005192:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005194:	4b23      	ldr	r3, [pc, #140]	; (8005224 <vTaskSwitchContext+0xac>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	60fb      	str	r3, [r7, #12]
 800519a:	e00f      	b.n	80051bc <vTaskSwitchContext+0x44>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d109      	bne.n	80051b6 <vTaskSwitchContext+0x3e>
 80051a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a6:	f383 8811 	msr	BASEPRI, r3
 80051aa:	f3bf 8f6f 	isb	sy
 80051ae:	f3bf 8f4f 	dsb	sy
 80051b2:	607b      	str	r3, [r7, #4]
 80051b4:	e7fe      	b.n	80051b4 <vTaskSwitchContext+0x3c>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	3b01      	subs	r3, #1
 80051ba:	60fb      	str	r3, [r7, #12]
 80051bc:	491a      	ldr	r1, [pc, #104]	; (8005228 <vTaskSwitchContext+0xb0>)
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	4613      	mov	r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	4413      	add	r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	440b      	add	r3, r1
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d0e5      	beq.n	800519c <vTaskSwitchContext+0x24>
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	4613      	mov	r3, r2
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	4413      	add	r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4a13      	ldr	r2, [pc, #76]	; (8005228 <vTaskSwitchContext+0xb0>)
 80051dc:	4413      	add	r3, r2
 80051de:	60bb      	str	r3, [r7, #8]
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	605a      	str	r2, [r3, #4]
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	685a      	ldr	r2, [r3, #4]
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	3308      	adds	r3, #8
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d104      	bne.n	8005200 <vTaskSwitchContext+0x88>
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	685a      	ldr	r2, [r3, #4]
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	605a      	str	r2, [r3, #4]
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	4a09      	ldr	r2, [pc, #36]	; (800522c <vTaskSwitchContext+0xb4>)
 8005208:	6013      	str	r3, [r2, #0]
 800520a:	4a06      	ldr	r2, [pc, #24]	; (8005224 <vTaskSwitchContext+0xac>)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6013      	str	r3, [r2, #0]
}
 8005210:	bf00      	nop
 8005212:	3714      	adds	r7, #20
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr
 800521c:	20000cec 	.word	0x20000cec
 8005220:	20000cd8 	.word	0x20000cd8
 8005224:	20000ccc 	.word	0x20000ccc
 8005228:	200007f4 	.word	0x200007f4
 800522c:	200007f0 	.word	0x200007f0

08005230 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d109      	bne.n	8005254 <vTaskPlaceOnEventList+0x24>
 8005240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005244:	f383 8811 	msr	BASEPRI, r3
 8005248:	f3bf 8f6f 	isb	sy
 800524c:	f3bf 8f4f 	dsb	sy
 8005250:	60fb      	str	r3, [r7, #12]
 8005252:	e7fe      	b.n	8005252 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005254:	4b07      	ldr	r3, [pc, #28]	; (8005274 <vTaskPlaceOnEventList+0x44>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	3318      	adds	r3, #24
 800525a:	4619      	mov	r1, r3
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f7fe feac 	bl	8003fba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005262:	2101      	movs	r1, #1
 8005264:	6838      	ldr	r0, [r7, #0]
 8005266:	f000 fa71 	bl	800574c <prvAddCurrentTaskToDelayedList>
}
 800526a:	bf00      	nop
 800526c:	3710      	adds	r7, #16
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	200007f0 	.word	0x200007f0

08005278 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005278:	b580      	push	{r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d109      	bne.n	800529e <vTaskPlaceOnEventListRestricted+0x26>
 800528a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528e:	f383 8811 	msr	BASEPRI, r3
 8005292:	f3bf 8f6f 	isb	sy
 8005296:	f3bf 8f4f 	dsb	sy
 800529a:	617b      	str	r3, [r7, #20]
 800529c:	e7fe      	b.n	800529c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800529e:	4b0a      	ldr	r3, [pc, #40]	; (80052c8 <vTaskPlaceOnEventListRestricted+0x50>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	3318      	adds	r3, #24
 80052a4:	4619      	mov	r1, r3
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f7fe fe63 	bl	8003f72 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d002      	beq.n	80052b8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80052b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052b6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80052b8:	6879      	ldr	r1, [r7, #4]
 80052ba:	68b8      	ldr	r0, [r7, #8]
 80052bc:	f000 fa46 	bl	800574c <prvAddCurrentTaskToDelayedList>
	}
 80052c0:	bf00      	nop
 80052c2:	3718      	adds	r7, #24
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	200007f0 	.word	0x200007f0

080052cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d109      	bne.n	80052f6 <xTaskRemoveFromEventList+0x2a>
 80052e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e6:	f383 8811 	msr	BASEPRI, r3
 80052ea:	f3bf 8f6f 	isb	sy
 80052ee:	f3bf 8f4f 	dsb	sy
 80052f2:	60fb      	str	r3, [r7, #12]
 80052f4:	e7fe      	b.n	80052f4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	3318      	adds	r3, #24
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7fe fe96 	bl	800402c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005300:	4b1d      	ldr	r3, [pc, #116]	; (8005378 <xTaskRemoveFromEventList+0xac>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d11d      	bne.n	8005344 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	3304      	adds	r3, #4
 800530c:	4618      	mov	r0, r3
 800530e:	f7fe fe8d 	bl	800402c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005316:	4b19      	ldr	r3, [pc, #100]	; (800537c <xTaskRemoveFromEventList+0xb0>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	429a      	cmp	r2, r3
 800531c:	d903      	bls.n	8005326 <xTaskRemoveFromEventList+0x5a>
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005322:	4a16      	ldr	r2, [pc, #88]	; (800537c <xTaskRemoveFromEventList+0xb0>)
 8005324:	6013      	str	r3, [r2, #0]
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800532a:	4613      	mov	r3, r2
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	4413      	add	r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	4a13      	ldr	r2, [pc, #76]	; (8005380 <xTaskRemoveFromEventList+0xb4>)
 8005334:	441a      	add	r2, r3
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	3304      	adds	r3, #4
 800533a:	4619      	mov	r1, r3
 800533c:	4610      	mov	r0, r2
 800533e:	f7fe fe18 	bl	8003f72 <vListInsertEnd>
 8005342:	e005      	b.n	8005350 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	3318      	adds	r3, #24
 8005348:	4619      	mov	r1, r3
 800534a:	480e      	ldr	r0, [pc, #56]	; (8005384 <xTaskRemoveFromEventList+0xb8>)
 800534c:	f7fe fe11 	bl	8003f72 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005354:	4b0c      	ldr	r3, [pc, #48]	; (8005388 <xTaskRemoveFromEventList+0xbc>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535a:	429a      	cmp	r2, r3
 800535c:	d905      	bls.n	800536a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800535e:	2301      	movs	r3, #1
 8005360:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005362:	4b0a      	ldr	r3, [pc, #40]	; (800538c <xTaskRemoveFromEventList+0xc0>)
 8005364:	2201      	movs	r2, #1
 8005366:	601a      	str	r2, [r3, #0]
 8005368:	e001      	b.n	800536e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800536a:	2300      	movs	r3, #0
 800536c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800536e:	697b      	ldr	r3, [r7, #20]
}
 8005370:	4618      	mov	r0, r3
 8005372:	3718      	adds	r7, #24
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	20000cec 	.word	0x20000cec
 800537c:	20000ccc 	.word	0x20000ccc
 8005380:	200007f4 	.word	0x200007f4
 8005384:	20000c84 	.word	0x20000c84
 8005388:	200007f0 	.word	0x200007f0
 800538c:	20000cd8 	.word	0x20000cd8

08005390 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005398:	4b06      	ldr	r3, [pc, #24]	; (80053b4 <vTaskInternalSetTimeOutState+0x24>)
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80053a0:	4b05      	ldr	r3, [pc, #20]	; (80053b8 <vTaskInternalSetTimeOutState+0x28>)
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	605a      	str	r2, [r3, #4]
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr
 80053b4:	20000cdc 	.word	0x20000cdc
 80053b8:	20000cc8 	.word	0x20000cc8

080053bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b088      	sub	sp, #32
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d109      	bne.n	80053e0 <xTaskCheckForTimeOut+0x24>
 80053cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d0:	f383 8811 	msr	BASEPRI, r3
 80053d4:	f3bf 8f6f 	isb	sy
 80053d8:	f3bf 8f4f 	dsb	sy
 80053dc:	613b      	str	r3, [r7, #16]
 80053de:	e7fe      	b.n	80053de <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d109      	bne.n	80053fa <xTaskCheckForTimeOut+0x3e>
 80053e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ea:	f383 8811 	msr	BASEPRI, r3
 80053ee:	f3bf 8f6f 	isb	sy
 80053f2:	f3bf 8f4f 	dsb	sy
 80053f6:	60fb      	str	r3, [r7, #12]
 80053f8:	e7fe      	b.n	80053f8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80053fa:	f000 fe67 	bl	80060cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80053fe:	4b1d      	ldr	r3, [pc, #116]	; (8005474 <xTaskCheckForTimeOut+0xb8>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	69ba      	ldr	r2, [r7, #24]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005416:	d102      	bne.n	800541e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005418:	2300      	movs	r3, #0
 800541a:	61fb      	str	r3, [r7, #28]
 800541c:	e023      	b.n	8005466 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	4b15      	ldr	r3, [pc, #84]	; (8005478 <xTaskCheckForTimeOut+0xbc>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	429a      	cmp	r2, r3
 8005428:	d007      	beq.n	800543a <xTaskCheckForTimeOut+0x7e>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	69ba      	ldr	r2, [r7, #24]
 8005430:	429a      	cmp	r2, r3
 8005432:	d302      	bcc.n	800543a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005434:	2301      	movs	r3, #1
 8005436:	61fb      	str	r3, [r7, #28]
 8005438:	e015      	b.n	8005466 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	429a      	cmp	r2, r3
 8005442:	d20b      	bcs.n	800545c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	1ad2      	subs	r2, r2, r3
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f7ff ff9d 	bl	8005390 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005456:	2300      	movs	r3, #0
 8005458:	61fb      	str	r3, [r7, #28]
 800545a:	e004      	b.n	8005466 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	2200      	movs	r2, #0
 8005460:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005462:	2301      	movs	r3, #1
 8005464:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005466:	f000 fe5f 	bl	8006128 <vPortExitCritical>

	return xReturn;
 800546a:	69fb      	ldr	r3, [r7, #28]
}
 800546c:	4618      	mov	r0, r3
 800546e:	3720      	adds	r7, #32
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	20000cc8 	.word	0x20000cc8
 8005478:	20000cdc 	.word	0x20000cdc

0800547c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800547c:	b480      	push	{r7}
 800547e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005480:	4b03      	ldr	r3, [pc, #12]	; (8005490 <vTaskMissedYield+0x14>)
 8005482:	2201      	movs	r2, #1
 8005484:	601a      	str	r2, [r3, #0]
}
 8005486:	bf00      	nop
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr
 8005490:	20000cd8 	.word	0x20000cd8

08005494 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800549c:	f000 f852 	bl	8005544 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80054a0:	4b06      	ldr	r3, [pc, #24]	; (80054bc <prvIdleTask+0x28>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d9f9      	bls.n	800549c <prvIdleTask+0x8>
			{
				taskYIELD();
 80054a8:	4b05      	ldr	r3, [pc, #20]	; (80054c0 <prvIdleTask+0x2c>)
 80054aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054ae:	601a      	str	r2, [r3, #0]
 80054b0:	f3bf 8f4f 	dsb	sy
 80054b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80054b8:	e7f0      	b.n	800549c <prvIdleTask+0x8>
 80054ba:	bf00      	nop
 80054bc:	200007f4 	.word	0x200007f4
 80054c0:	e000ed04 	.word	0xe000ed04

080054c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054ca:	2300      	movs	r3, #0
 80054cc:	607b      	str	r3, [r7, #4]
 80054ce:	e00c      	b.n	80054ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	4613      	mov	r3, r2
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	4413      	add	r3, r2
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	4a12      	ldr	r2, [pc, #72]	; (8005524 <prvInitialiseTaskLists+0x60>)
 80054dc:	4413      	add	r3, r2
 80054de:	4618      	mov	r0, r3
 80054e0:	f7fe fd1a 	bl	8003f18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	3301      	adds	r3, #1
 80054e8:	607b      	str	r3, [r7, #4]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2b37      	cmp	r3, #55	; 0x37
 80054ee:	d9ef      	bls.n	80054d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80054f0:	480d      	ldr	r0, [pc, #52]	; (8005528 <prvInitialiseTaskLists+0x64>)
 80054f2:	f7fe fd11 	bl	8003f18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80054f6:	480d      	ldr	r0, [pc, #52]	; (800552c <prvInitialiseTaskLists+0x68>)
 80054f8:	f7fe fd0e 	bl	8003f18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80054fc:	480c      	ldr	r0, [pc, #48]	; (8005530 <prvInitialiseTaskLists+0x6c>)
 80054fe:	f7fe fd0b 	bl	8003f18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005502:	480c      	ldr	r0, [pc, #48]	; (8005534 <prvInitialiseTaskLists+0x70>)
 8005504:	f7fe fd08 	bl	8003f18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005508:	480b      	ldr	r0, [pc, #44]	; (8005538 <prvInitialiseTaskLists+0x74>)
 800550a:	f7fe fd05 	bl	8003f18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800550e:	4b0b      	ldr	r3, [pc, #44]	; (800553c <prvInitialiseTaskLists+0x78>)
 8005510:	4a05      	ldr	r2, [pc, #20]	; (8005528 <prvInitialiseTaskLists+0x64>)
 8005512:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005514:	4b0a      	ldr	r3, [pc, #40]	; (8005540 <prvInitialiseTaskLists+0x7c>)
 8005516:	4a05      	ldr	r2, [pc, #20]	; (800552c <prvInitialiseTaskLists+0x68>)
 8005518:	601a      	str	r2, [r3, #0]
}
 800551a:	bf00      	nop
 800551c:	3708      	adds	r7, #8
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	200007f4 	.word	0x200007f4
 8005528:	20000c54 	.word	0x20000c54
 800552c:	20000c68 	.word	0x20000c68
 8005530:	20000c84 	.word	0x20000c84
 8005534:	20000c98 	.word	0x20000c98
 8005538:	20000cb0 	.word	0x20000cb0
 800553c:	20000c7c 	.word	0x20000c7c
 8005540:	20000c80 	.word	0x20000c80

08005544 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800554a:	e019      	b.n	8005580 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800554c:	f000 fdbe 	bl	80060cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005550:	4b0f      	ldr	r3, [pc, #60]	; (8005590 <prvCheckTasksWaitingTermination+0x4c>)
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	3304      	adds	r3, #4
 800555c:	4618      	mov	r0, r3
 800555e:	f7fe fd65 	bl	800402c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005562:	4b0c      	ldr	r3, [pc, #48]	; (8005594 <prvCheckTasksWaitingTermination+0x50>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	3b01      	subs	r3, #1
 8005568:	4a0a      	ldr	r2, [pc, #40]	; (8005594 <prvCheckTasksWaitingTermination+0x50>)
 800556a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800556c:	4b0a      	ldr	r3, [pc, #40]	; (8005598 <prvCheckTasksWaitingTermination+0x54>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	3b01      	subs	r3, #1
 8005572:	4a09      	ldr	r2, [pc, #36]	; (8005598 <prvCheckTasksWaitingTermination+0x54>)
 8005574:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005576:	f000 fdd7 	bl	8006128 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f80e 	bl	800559c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005580:	4b05      	ldr	r3, [pc, #20]	; (8005598 <prvCheckTasksWaitingTermination+0x54>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1e1      	bne.n	800554c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005588:	bf00      	nop
 800558a:	3708      	adds	r7, #8
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	20000c98 	.word	0x20000c98
 8005594:	20000cc4 	.word	0x20000cc4
 8005598:	20000cac 	.word	0x20000cac

0800559c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d108      	bne.n	80055c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 ff66 	bl	8006484 <vPortFree>
				vPortFree( pxTCB );
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 ff63 	bl	8006484 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80055be:	e017      	b.n	80055f0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d103      	bne.n	80055d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 ff5a 	bl	8006484 <vPortFree>
	}
 80055d0:	e00e      	b.n	80055f0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d009      	beq.n	80055f0 <prvDeleteTCB+0x54>
 80055dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e0:	f383 8811 	msr	BASEPRI, r3
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	60fb      	str	r3, [r7, #12]
 80055ee:	e7fe      	b.n	80055ee <prvDeleteTCB+0x52>
	}
 80055f0:	bf00      	nop
 80055f2:	3710      	adds	r7, #16
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055fe:	4b0c      	ldr	r3, [pc, #48]	; (8005630 <prvResetNextTaskUnblockTime+0x38>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d104      	bne.n	8005612 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005608:	4b0a      	ldr	r3, [pc, #40]	; (8005634 <prvResetNextTaskUnblockTime+0x3c>)
 800560a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800560e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005610:	e008      	b.n	8005624 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005612:	4b07      	ldr	r3, [pc, #28]	; (8005630 <prvResetNextTaskUnblockTime+0x38>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	4a04      	ldr	r2, [pc, #16]	; (8005634 <prvResetNextTaskUnblockTime+0x3c>)
 8005622:	6013      	str	r3, [r2, #0]
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr
 8005630:	20000c7c 	.word	0x20000c7c
 8005634:	20000ce4 	.word	0x20000ce4

08005638 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800563e:	4b0b      	ldr	r3, [pc, #44]	; (800566c <xTaskGetSchedulerState+0x34>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d102      	bne.n	800564c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005646:	2301      	movs	r3, #1
 8005648:	607b      	str	r3, [r7, #4]
 800564a:	e008      	b.n	800565e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800564c:	4b08      	ldr	r3, [pc, #32]	; (8005670 <xTaskGetSchedulerState+0x38>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d102      	bne.n	800565a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005654:	2302      	movs	r3, #2
 8005656:	607b      	str	r3, [r7, #4]
 8005658:	e001      	b.n	800565e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800565a:	2300      	movs	r3, #0
 800565c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800565e:	687b      	ldr	r3, [r7, #4]
	}
 8005660:	4618      	mov	r0, r3
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	20000cd0 	.word	0x20000cd0
 8005670:	20000cec 	.word	0x20000cec

08005674 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005674:	b580      	push	{r7, lr}
 8005676:	b086      	sub	sp, #24
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005680:	2300      	movs	r3, #0
 8005682:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d054      	beq.n	8005734 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800568a:	4b2d      	ldr	r3, [pc, #180]	; (8005740 <xTaskPriorityDisinherit+0xcc>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	429a      	cmp	r2, r3
 8005692:	d009      	beq.n	80056a8 <xTaskPriorityDisinherit+0x34>
 8005694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005698:	f383 8811 	msr	BASEPRI, r3
 800569c:	f3bf 8f6f 	isb	sy
 80056a0:	f3bf 8f4f 	dsb	sy
 80056a4:	60fb      	str	r3, [r7, #12]
 80056a6:	e7fe      	b.n	80056a6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d109      	bne.n	80056c4 <xTaskPriorityDisinherit+0x50>
 80056b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b4:	f383 8811 	msr	BASEPRI, r3
 80056b8:	f3bf 8f6f 	isb	sy
 80056bc:	f3bf 8f4f 	dsb	sy
 80056c0:	60bb      	str	r3, [r7, #8]
 80056c2:	e7fe      	b.n	80056c2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056c8:	1e5a      	subs	r2, r3, #1
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d02c      	beq.n	8005734 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d128      	bne.n	8005734 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	3304      	adds	r3, #4
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7fe fca0 	bl	800402c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005704:	4b0f      	ldr	r3, [pc, #60]	; (8005744 <xTaskPriorityDisinherit+0xd0>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	429a      	cmp	r2, r3
 800570a:	d903      	bls.n	8005714 <xTaskPriorityDisinherit+0xa0>
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005710:	4a0c      	ldr	r2, [pc, #48]	; (8005744 <xTaskPriorityDisinherit+0xd0>)
 8005712:	6013      	str	r3, [r2, #0]
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005718:	4613      	mov	r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4413      	add	r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4a09      	ldr	r2, [pc, #36]	; (8005748 <xTaskPriorityDisinherit+0xd4>)
 8005722:	441a      	add	r2, r3
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	3304      	adds	r3, #4
 8005728:	4619      	mov	r1, r3
 800572a:	4610      	mov	r0, r2
 800572c:	f7fe fc21 	bl	8003f72 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005730:	2301      	movs	r3, #1
 8005732:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005734:	697b      	ldr	r3, [r7, #20]
	}
 8005736:	4618      	mov	r0, r3
 8005738:	3718      	adds	r7, #24
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	200007f0 	.word	0x200007f0
 8005744:	20000ccc 	.word	0x20000ccc
 8005748:	200007f4 	.word	0x200007f4

0800574c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005756:	4b21      	ldr	r3, [pc, #132]	; (80057dc <prvAddCurrentTaskToDelayedList+0x90>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800575c:	4b20      	ldr	r3, [pc, #128]	; (80057e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	3304      	adds	r3, #4
 8005762:	4618      	mov	r0, r3
 8005764:	f7fe fc62 	bl	800402c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800576e:	d10a      	bne.n	8005786 <prvAddCurrentTaskToDelayedList+0x3a>
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d007      	beq.n	8005786 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005776:	4b1a      	ldr	r3, [pc, #104]	; (80057e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	3304      	adds	r3, #4
 800577c:	4619      	mov	r1, r3
 800577e:	4819      	ldr	r0, [pc, #100]	; (80057e4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005780:	f7fe fbf7 	bl	8003f72 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005784:	e026      	b.n	80057d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4413      	add	r3, r2
 800578c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800578e:	4b14      	ldr	r3, [pc, #80]	; (80057e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	429a      	cmp	r2, r3
 800579c:	d209      	bcs.n	80057b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800579e:	4b12      	ldr	r3, [pc, #72]	; (80057e8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	4b0f      	ldr	r3, [pc, #60]	; (80057e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	3304      	adds	r3, #4
 80057a8:	4619      	mov	r1, r3
 80057aa:	4610      	mov	r0, r2
 80057ac:	f7fe fc05 	bl	8003fba <vListInsert>
}
 80057b0:	e010      	b.n	80057d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057b2:	4b0e      	ldr	r3, [pc, #56]	; (80057ec <prvAddCurrentTaskToDelayedList+0xa0>)
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	4b0a      	ldr	r3, [pc, #40]	; (80057e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	3304      	adds	r3, #4
 80057bc:	4619      	mov	r1, r3
 80057be:	4610      	mov	r0, r2
 80057c0:	f7fe fbfb 	bl	8003fba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80057c4:	4b0a      	ldr	r3, [pc, #40]	; (80057f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d202      	bcs.n	80057d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80057ce:	4a08      	ldr	r2, [pc, #32]	; (80057f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	6013      	str	r3, [r2, #0]
}
 80057d4:	bf00      	nop
 80057d6:	3710      	adds	r7, #16
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	20000cc8 	.word	0x20000cc8
 80057e0:	200007f0 	.word	0x200007f0
 80057e4:	20000cb0 	.word	0x20000cb0
 80057e8:	20000c80 	.word	0x20000c80
 80057ec:	20000c7c 	.word	0x20000c7c
 80057f0:	20000ce4 	.word	0x20000ce4

080057f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b08a      	sub	sp, #40	; 0x28
 80057f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80057fa:	2300      	movs	r3, #0
 80057fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80057fe:	f000 faff 	bl	8005e00 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005802:	4b1c      	ldr	r3, [pc, #112]	; (8005874 <xTimerCreateTimerTask+0x80>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d021      	beq.n	800584e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800580a:	2300      	movs	r3, #0
 800580c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800580e:	2300      	movs	r3, #0
 8005810:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005812:	1d3a      	adds	r2, r7, #4
 8005814:	f107 0108 	add.w	r1, r7, #8
 8005818:	f107 030c 	add.w	r3, r7, #12
 800581c:	4618      	mov	r0, r3
 800581e:	f7fe fb61 	bl	8003ee4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005822:	6879      	ldr	r1, [r7, #4]
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	9202      	str	r2, [sp, #8]
 800582a:	9301      	str	r3, [sp, #4]
 800582c:	2302      	movs	r3, #2
 800582e:	9300      	str	r3, [sp, #0]
 8005830:	2300      	movs	r3, #0
 8005832:	460a      	mov	r2, r1
 8005834:	4910      	ldr	r1, [pc, #64]	; (8005878 <xTimerCreateTimerTask+0x84>)
 8005836:	4811      	ldr	r0, [pc, #68]	; (800587c <xTimerCreateTimerTask+0x88>)
 8005838:	f7ff f8f6 	bl	8004a28 <xTaskCreateStatic>
 800583c:	4602      	mov	r2, r0
 800583e:	4b10      	ldr	r3, [pc, #64]	; (8005880 <xTimerCreateTimerTask+0x8c>)
 8005840:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005842:	4b0f      	ldr	r3, [pc, #60]	; (8005880 <xTimerCreateTimerTask+0x8c>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d001      	beq.n	800584e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800584a:	2301      	movs	r3, #1
 800584c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d109      	bne.n	8005868 <xTimerCreateTimerTask+0x74>
 8005854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005858:	f383 8811 	msr	BASEPRI, r3
 800585c:	f3bf 8f6f 	isb	sy
 8005860:	f3bf 8f4f 	dsb	sy
 8005864:	613b      	str	r3, [r7, #16]
 8005866:	e7fe      	b.n	8005866 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005868:	697b      	ldr	r3, [r7, #20]
}
 800586a:	4618      	mov	r0, r3
 800586c:	3718      	adds	r7, #24
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	20000d20 	.word	0x20000d20
 8005878:	080067fc 	.word	0x080067fc
 800587c:	080059b5 	.word	0x080059b5
 8005880:	20000d24 	.word	0x20000d24

08005884 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b08a      	sub	sp, #40	; 0x28
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
 8005890:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005892:	2300      	movs	r3, #0
 8005894:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d109      	bne.n	80058b0 <xTimerGenericCommand+0x2c>
 800589c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a0:	f383 8811 	msr	BASEPRI, r3
 80058a4:	f3bf 8f6f 	isb	sy
 80058a8:	f3bf 8f4f 	dsb	sy
 80058ac:	623b      	str	r3, [r7, #32]
 80058ae:	e7fe      	b.n	80058ae <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80058b0:	4b19      	ldr	r3, [pc, #100]	; (8005918 <xTimerGenericCommand+0x94>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d02a      	beq.n	800590e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	2b05      	cmp	r3, #5
 80058c8:	dc18      	bgt.n	80058fc <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80058ca:	f7ff feb5 	bl	8005638 <xTaskGetSchedulerState>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	d109      	bne.n	80058e8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80058d4:	4b10      	ldr	r3, [pc, #64]	; (8005918 <xTimerGenericCommand+0x94>)
 80058d6:	6818      	ldr	r0, [r3, #0]
 80058d8:	f107 0110 	add.w	r1, r7, #16
 80058dc:	2300      	movs	r3, #0
 80058de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058e0:	f7fe fccc 	bl	800427c <xQueueGenericSend>
 80058e4:	6278      	str	r0, [r7, #36]	; 0x24
 80058e6:	e012      	b.n	800590e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80058e8:	4b0b      	ldr	r3, [pc, #44]	; (8005918 <xTimerGenericCommand+0x94>)
 80058ea:	6818      	ldr	r0, [r3, #0]
 80058ec:	f107 0110 	add.w	r1, r7, #16
 80058f0:	2300      	movs	r3, #0
 80058f2:	2200      	movs	r2, #0
 80058f4:	f7fe fcc2 	bl	800427c <xQueueGenericSend>
 80058f8:	6278      	str	r0, [r7, #36]	; 0x24
 80058fa:	e008      	b.n	800590e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80058fc:	4b06      	ldr	r3, [pc, #24]	; (8005918 <xTimerGenericCommand+0x94>)
 80058fe:	6818      	ldr	r0, [r3, #0]
 8005900:	f107 0110 	add.w	r1, r7, #16
 8005904:	2300      	movs	r3, #0
 8005906:	683a      	ldr	r2, [r7, #0]
 8005908:	f7fe fdb2 	bl	8004470 <xQueueGenericSendFromISR>
 800590c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800590e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005910:	4618      	mov	r0, r3
 8005912:	3728      	adds	r7, #40	; 0x28
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	20000d20 	.word	0x20000d20

0800591c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b088      	sub	sp, #32
 8005920:	af02      	add	r7, sp, #8
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005926:	4b22      	ldr	r3, [pc, #136]	; (80059b0 <prvProcessExpiredTimer+0x94>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	3304      	adds	r3, #4
 8005934:	4618      	mov	r0, r3
 8005936:	f7fe fb79 	bl	800402c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005940:	f003 0304 	and.w	r3, r3, #4
 8005944:	2b00      	cmp	r3, #0
 8005946:	d021      	beq.n	800598c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	699a      	ldr	r2, [r3, #24]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	18d1      	adds	r1, r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	683a      	ldr	r2, [r7, #0]
 8005954:	6978      	ldr	r0, [r7, #20]
 8005956:	f000 f8d1 	bl	8005afc <prvInsertTimerInActiveList>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d01e      	beq.n	800599e <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005960:	2300      	movs	r3, #0
 8005962:	9300      	str	r3, [sp, #0]
 8005964:	2300      	movs	r3, #0
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	2100      	movs	r1, #0
 800596a:	6978      	ldr	r0, [r7, #20]
 800596c:	f7ff ff8a 	bl	8005884 <xTimerGenericCommand>
 8005970:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d112      	bne.n	800599e <prvProcessExpiredTimer+0x82>
 8005978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800597c:	f383 8811 	msr	BASEPRI, r3
 8005980:	f3bf 8f6f 	isb	sy
 8005984:	f3bf 8f4f 	dsb	sy
 8005988:	60fb      	str	r3, [r7, #12]
 800598a:	e7fe      	b.n	800598a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005992:	f023 0301 	bic.w	r3, r3, #1
 8005996:	b2da      	uxtb	r2, r3
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	6a1b      	ldr	r3, [r3, #32]
 80059a2:	6978      	ldr	r0, [r7, #20]
 80059a4:	4798      	blx	r3
}
 80059a6:	bf00      	nop
 80059a8:	3718      	adds	r7, #24
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	20000d18 	.word	0x20000d18

080059b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80059bc:	f107 0308 	add.w	r3, r7, #8
 80059c0:	4618      	mov	r0, r3
 80059c2:	f000 f857 	bl	8005a74 <prvGetNextExpireTime>
 80059c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	4619      	mov	r1, r3
 80059cc:	68f8      	ldr	r0, [r7, #12]
 80059ce:	f000 f803 	bl	80059d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80059d2:	f000 f8d5 	bl	8005b80 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80059d6:	e7f1      	b.n	80059bc <prvTimerTask+0x8>

080059d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80059e2:	f7ff fa57 	bl	8004e94 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80059e6:	f107 0308 	add.w	r3, r7, #8
 80059ea:	4618      	mov	r0, r3
 80059ec:	f000 f866 	bl	8005abc <prvSampleTimeNow>
 80059f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d130      	bne.n	8005a5a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10a      	bne.n	8005a14 <prvProcessTimerOrBlockTask+0x3c>
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d806      	bhi.n	8005a14 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005a06:	f7ff fa53 	bl	8004eb0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005a0a:	68f9      	ldr	r1, [r7, #12]
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f7ff ff85 	bl	800591c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005a12:	e024      	b.n	8005a5e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d008      	beq.n	8005a2c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005a1a:	4b13      	ldr	r3, [pc, #76]	; (8005a68 <prvProcessTimerOrBlockTask+0x90>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d101      	bne.n	8005a28 <prvProcessTimerOrBlockTask+0x50>
 8005a24:	2301      	movs	r3, #1
 8005a26:	e000      	b.n	8005a2a <prvProcessTimerOrBlockTask+0x52>
 8005a28:	2300      	movs	r3, #0
 8005a2a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005a2c:	4b0f      	ldr	r3, [pc, #60]	; (8005a6c <prvProcessTimerOrBlockTask+0x94>)
 8005a2e:	6818      	ldr	r0, [r3, #0]
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	683a      	ldr	r2, [r7, #0]
 8005a38:	4619      	mov	r1, r3
 8005a3a:	f7fe ffc1 	bl	80049c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005a3e:	f7ff fa37 	bl	8004eb0 <xTaskResumeAll>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d10a      	bne.n	8005a5e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005a48:	4b09      	ldr	r3, [pc, #36]	; (8005a70 <prvProcessTimerOrBlockTask+0x98>)
 8005a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a4e:	601a      	str	r2, [r3, #0]
 8005a50:	f3bf 8f4f 	dsb	sy
 8005a54:	f3bf 8f6f 	isb	sy
}
 8005a58:	e001      	b.n	8005a5e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005a5a:	f7ff fa29 	bl	8004eb0 <xTaskResumeAll>
}
 8005a5e:	bf00      	nop
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	20000d1c 	.word	0x20000d1c
 8005a6c:	20000d20 	.word	0x20000d20
 8005a70:	e000ed04 	.word	0xe000ed04

08005a74 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005a7c:	4b0e      	ldr	r3, [pc, #56]	; (8005ab8 <prvGetNextExpireTime+0x44>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d101      	bne.n	8005a8a <prvGetNextExpireTime+0x16>
 8005a86:	2201      	movs	r2, #1
 8005a88:	e000      	b.n	8005a8c <prvGetNextExpireTime+0x18>
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d105      	bne.n	8005aa4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a98:	4b07      	ldr	r3, [pc, #28]	; (8005ab8 <prvGetNextExpireTime+0x44>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	60fb      	str	r3, [r7, #12]
 8005aa2:	e001      	b.n	8005aa8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	20000d18 	.word	0x20000d18

08005abc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005ac4:	f7ff fa90 	bl	8004fe8 <xTaskGetTickCount>
 8005ac8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005aca:	4b0b      	ldr	r3, [pc, #44]	; (8005af8 <prvSampleTimeNow+0x3c>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d205      	bcs.n	8005ae0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005ad4:	f000 f930 	bl	8005d38 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	601a      	str	r2, [r3, #0]
 8005ade:	e002      	b.n	8005ae6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005ae6:	4a04      	ldr	r2, [pc, #16]	; (8005af8 <prvSampleTimeNow+0x3c>)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005aec:	68fb      	ldr	r3, [r7, #12]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	20000d28 	.word	0x20000d28

08005afc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b086      	sub	sp, #24
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
 8005b08:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	68ba      	ldr	r2, [r7, #8]
 8005b12:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d812      	bhi.n	8005b48 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	1ad2      	subs	r2, r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	699b      	ldr	r3, [r3, #24]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d302      	bcc.n	8005b36 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005b30:	2301      	movs	r3, #1
 8005b32:	617b      	str	r3, [r7, #20]
 8005b34:	e01b      	b.n	8005b6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005b36:	4b10      	ldr	r3, [pc, #64]	; (8005b78 <prvInsertTimerInActiveList+0x7c>)
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	3304      	adds	r3, #4
 8005b3e:	4619      	mov	r1, r3
 8005b40:	4610      	mov	r0, r2
 8005b42:	f7fe fa3a 	bl	8003fba <vListInsert>
 8005b46:	e012      	b.n	8005b6e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d206      	bcs.n	8005b5e <prvInsertTimerInActiveList+0x62>
 8005b50:	68ba      	ldr	r2, [r7, #8]
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d302      	bcc.n	8005b5e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	617b      	str	r3, [r7, #20]
 8005b5c:	e007      	b.n	8005b6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b5e:	4b07      	ldr	r3, [pc, #28]	; (8005b7c <prvInsertTimerInActiveList+0x80>)
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	3304      	adds	r3, #4
 8005b66:	4619      	mov	r1, r3
 8005b68:	4610      	mov	r0, r2
 8005b6a:	f7fe fa26 	bl	8003fba <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005b6e:	697b      	ldr	r3, [r7, #20]
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3718      	adds	r7, #24
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	20000d1c 	.word	0x20000d1c
 8005b7c:	20000d18 	.word	0x20000d18

08005b80 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b08e      	sub	sp, #56	; 0x38
 8005b84:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b86:	e0c6      	b.n	8005d16 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	da17      	bge.n	8005bbe <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005b8e:	1d3b      	adds	r3, r7, #4
 8005b90:	3304      	adds	r3, #4
 8005b92:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d109      	bne.n	8005bae <prvProcessReceivedCommands+0x2e>
 8005b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9e:	f383 8811 	msr	BASEPRI, r3
 8005ba2:	f3bf 8f6f 	isb	sy
 8005ba6:	f3bf 8f4f 	dsb	sy
 8005baa:	61fb      	str	r3, [r7, #28]
 8005bac:	e7fe      	b.n	8005bac <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bb4:	6850      	ldr	r0, [r2, #4]
 8005bb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bb8:	6892      	ldr	r2, [r2, #8]
 8005bba:	4611      	mov	r1, r2
 8005bbc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f2c0 80a7 	blt.w	8005d14 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d004      	beq.n	8005bdc <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd4:	3304      	adds	r3, #4
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7fe fa28 	bl	800402c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005bdc:	463b      	mov	r3, r7
 8005bde:	4618      	mov	r0, r3
 8005be0:	f7ff ff6c 	bl	8005abc <prvSampleTimeNow>
 8005be4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2b09      	cmp	r3, #9
 8005bea:	f200 8094 	bhi.w	8005d16 <prvProcessReceivedCommands+0x196>
 8005bee:	a201      	add	r2, pc, #4	; (adr r2, 8005bf4 <prvProcessReceivedCommands+0x74>)
 8005bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf4:	08005c1d 	.word	0x08005c1d
 8005bf8:	08005c1d 	.word	0x08005c1d
 8005bfc:	08005c1d 	.word	0x08005c1d
 8005c00:	08005c8f 	.word	0x08005c8f
 8005c04:	08005ca3 	.word	0x08005ca3
 8005c08:	08005ceb 	.word	0x08005ceb
 8005c0c:	08005c1d 	.word	0x08005c1d
 8005c10:	08005c1d 	.word	0x08005c1d
 8005c14:	08005c8f 	.word	0x08005c8f
 8005c18:	08005ca3 	.word	0x08005ca3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c22:	f043 0301 	orr.w	r3, r3, #1
 8005c26:	b2da      	uxtb	r2, r3
 8005c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	18d1      	adds	r1, r2, r3
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c3c:	f7ff ff5e 	bl	8005afc <prvInsertTimerInActiveList>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d067      	beq.n	8005d16 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c4c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c54:	f003 0304 	and.w	r3, r3, #4
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d05c      	beq.n	8005d16 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	441a      	add	r2, r3
 8005c64:	2300      	movs	r3, #0
 8005c66:	9300      	str	r3, [sp, #0]
 8005c68:	2300      	movs	r3, #0
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c6e:	f7ff fe09 	bl	8005884 <xTimerGenericCommand>
 8005c72:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005c74:	6a3b      	ldr	r3, [r7, #32]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d14d      	bne.n	8005d16 <prvProcessReceivedCommands+0x196>
 8005c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7e:	f383 8811 	msr	BASEPRI, r3
 8005c82:	f3bf 8f6f 	isb	sy
 8005c86:	f3bf 8f4f 	dsb	sy
 8005c8a:	61bb      	str	r3, [r7, #24]
 8005c8c:	e7fe      	b.n	8005c8c <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c94:	f023 0301 	bic.w	r3, r3, #1
 8005c98:	b2da      	uxtb	r2, r3
 8005c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005ca0:	e039      	b.n	8005d16 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ca8:	f043 0301 	orr.w	r3, r3, #1
 8005cac:	b2da      	uxtb	r2, r3
 8005cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005cb4:	68ba      	ldr	r2, [r7, #8]
 8005cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d109      	bne.n	8005cd6 <prvProcessReceivedCommands+0x156>
 8005cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc6:	f383 8811 	msr	BASEPRI, r3
 8005cca:	f3bf 8f6f 	isb	sy
 8005cce:	f3bf 8f4f 	dsb	sy
 8005cd2:	617b      	str	r3, [r7, #20]
 8005cd4:	e7fe      	b.n	8005cd4 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd8:	699a      	ldr	r2, [r3, #24]
 8005cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cdc:	18d1      	adds	r1, r2, r3
 8005cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ce2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ce4:	f7ff ff0a 	bl	8005afc <prvInsertTimerInActiveList>
					break;
 8005ce8:	e015      	b.n	8005d16 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cf0:	f003 0302 	and.w	r3, r3, #2
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d103      	bne.n	8005d00 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8005cf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cfa:	f000 fbc3 	bl	8006484 <vPortFree>
 8005cfe:	e00a      	b.n	8005d16 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d06:	f023 0301 	bic.w	r3, r3, #1
 8005d0a:	b2da      	uxtb	r2, r3
 8005d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005d12:	e000      	b.n	8005d16 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005d14:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d16:	4b07      	ldr	r3, [pc, #28]	; (8005d34 <prvProcessReceivedCommands+0x1b4>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	1d39      	adds	r1, r7, #4
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7fe fc3a 	bl	8004598 <xQueueReceive>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	f47f af2e 	bne.w	8005b88 <prvProcessReceivedCommands+0x8>
	}
}
 8005d2c:	bf00      	nop
 8005d2e:	3730      	adds	r7, #48	; 0x30
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	20000d20 	.word	0x20000d20

08005d38 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b088      	sub	sp, #32
 8005d3c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d3e:	e047      	b.n	8005dd0 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d40:	4b2d      	ldr	r3, [pc, #180]	; (8005df8 <prvSwitchTimerLists+0xc0>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d4a:	4b2b      	ldr	r3, [pc, #172]	; (8005df8 <prvSwitchTimerLists+0xc0>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	3304      	adds	r3, #4
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f7fe f967 	bl	800402c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d6c:	f003 0304 	and.w	r3, r3, #4
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d02d      	beq.n	8005dd0 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005d7e:	68ba      	ldr	r2, [r7, #8]
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d90e      	bls.n	8005da4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005d92:	4b19      	ldr	r3, [pc, #100]	; (8005df8 <prvSwitchTimerLists+0xc0>)
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	3304      	adds	r3, #4
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	4610      	mov	r0, r2
 8005d9e:	f7fe f90c 	bl	8003fba <vListInsert>
 8005da2:	e015      	b.n	8005dd0 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005da4:	2300      	movs	r3, #0
 8005da6:	9300      	str	r3, [sp, #0]
 8005da8:	2300      	movs	r3, #0
 8005daa:	693a      	ldr	r2, [r7, #16]
 8005dac:	2100      	movs	r1, #0
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f7ff fd68 	bl	8005884 <xTimerGenericCommand>
 8005db4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d109      	bne.n	8005dd0 <prvSwitchTimerLists+0x98>
 8005dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc0:	f383 8811 	msr	BASEPRI, r3
 8005dc4:	f3bf 8f6f 	isb	sy
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	603b      	str	r3, [r7, #0]
 8005dce:	e7fe      	b.n	8005dce <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005dd0:	4b09      	ldr	r3, [pc, #36]	; (8005df8 <prvSwitchTimerLists+0xc0>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1b2      	bne.n	8005d40 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005dda:	4b07      	ldr	r3, [pc, #28]	; (8005df8 <prvSwitchTimerLists+0xc0>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005de0:	4b06      	ldr	r3, [pc, #24]	; (8005dfc <prvSwitchTimerLists+0xc4>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a04      	ldr	r2, [pc, #16]	; (8005df8 <prvSwitchTimerLists+0xc0>)
 8005de6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005de8:	4a04      	ldr	r2, [pc, #16]	; (8005dfc <prvSwitchTimerLists+0xc4>)
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	6013      	str	r3, [r2, #0]
}
 8005dee:	bf00      	nop
 8005df0:	3718      	adds	r7, #24
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	20000d18 	.word	0x20000d18
 8005dfc:	20000d1c 	.word	0x20000d1c

08005e00 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005e06:	f000 f961 	bl	80060cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005e0a:	4b15      	ldr	r3, [pc, #84]	; (8005e60 <prvCheckForValidListAndQueue+0x60>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d120      	bne.n	8005e54 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005e12:	4814      	ldr	r0, [pc, #80]	; (8005e64 <prvCheckForValidListAndQueue+0x64>)
 8005e14:	f7fe f880 	bl	8003f18 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005e18:	4813      	ldr	r0, [pc, #76]	; (8005e68 <prvCheckForValidListAndQueue+0x68>)
 8005e1a:	f7fe f87d 	bl	8003f18 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005e1e:	4b13      	ldr	r3, [pc, #76]	; (8005e6c <prvCheckForValidListAndQueue+0x6c>)
 8005e20:	4a10      	ldr	r2, [pc, #64]	; (8005e64 <prvCheckForValidListAndQueue+0x64>)
 8005e22:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005e24:	4b12      	ldr	r3, [pc, #72]	; (8005e70 <prvCheckForValidListAndQueue+0x70>)
 8005e26:	4a10      	ldr	r2, [pc, #64]	; (8005e68 <prvCheckForValidListAndQueue+0x68>)
 8005e28:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	9300      	str	r3, [sp, #0]
 8005e2e:	4b11      	ldr	r3, [pc, #68]	; (8005e74 <prvCheckForValidListAndQueue+0x74>)
 8005e30:	4a11      	ldr	r2, [pc, #68]	; (8005e78 <prvCheckForValidListAndQueue+0x78>)
 8005e32:	2110      	movs	r1, #16
 8005e34:	200a      	movs	r0, #10
 8005e36:	f7fe f98b 	bl	8004150 <xQueueGenericCreateStatic>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	4b08      	ldr	r3, [pc, #32]	; (8005e60 <prvCheckForValidListAndQueue+0x60>)
 8005e3e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005e40:	4b07      	ldr	r3, [pc, #28]	; (8005e60 <prvCheckForValidListAndQueue+0x60>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d005      	beq.n	8005e54 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005e48:	4b05      	ldr	r3, [pc, #20]	; (8005e60 <prvCheckForValidListAndQueue+0x60>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	490b      	ldr	r1, [pc, #44]	; (8005e7c <prvCheckForValidListAndQueue+0x7c>)
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7fe fd8e 	bl	8004970 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e54:	f000 f968 	bl	8006128 <vPortExitCritical>
}
 8005e58:	bf00      	nop
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	20000d20 	.word	0x20000d20
 8005e64:	20000cf0 	.word	0x20000cf0
 8005e68:	20000d04 	.word	0x20000d04
 8005e6c:	20000d18 	.word	0x20000d18
 8005e70:	20000d1c 	.word	0x20000d1c
 8005e74:	20000dcc 	.word	0x20000dcc
 8005e78:	20000d2c 	.word	0x20000d2c
 8005e7c:	08006804 	.word	0x08006804

08005e80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	3b04      	subs	r3, #4
 8005e90:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005e98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	3b04      	subs	r3, #4
 8005e9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	f023 0201 	bic.w	r2, r3, #1
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	3b04      	subs	r3, #4
 8005eae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005eb0:	4a0c      	ldr	r2, [pc, #48]	; (8005ee4 <pxPortInitialiseStack+0x64>)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	3b14      	subs	r3, #20
 8005eba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	3b04      	subs	r3, #4
 8005ec6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f06f 0202 	mvn.w	r2, #2
 8005ece:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	3b20      	subs	r3, #32
 8005ed4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3714      	adds	r7, #20
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr
 8005ee4:	08005ee9 	.word	0x08005ee9

08005ee8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005ef2:	4b11      	ldr	r3, [pc, #68]	; (8005f38 <prvTaskExitError+0x50>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005efa:	d009      	beq.n	8005f10 <prvTaskExitError+0x28>
 8005efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f00:	f383 8811 	msr	BASEPRI, r3
 8005f04:	f3bf 8f6f 	isb	sy
 8005f08:	f3bf 8f4f 	dsb	sy
 8005f0c:	60fb      	str	r3, [r7, #12]
 8005f0e:	e7fe      	b.n	8005f0e <prvTaskExitError+0x26>
 8005f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f14:	f383 8811 	msr	BASEPRI, r3
 8005f18:	f3bf 8f6f 	isb	sy
 8005f1c:	f3bf 8f4f 	dsb	sy
 8005f20:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005f22:	bf00      	nop
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d0fc      	beq.n	8005f24 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005f2a:	bf00      	nop
 8005f2c:	3714      	adds	r7, #20
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	2000000c 	.word	0x2000000c
 8005f3c:	00000000 	.word	0x00000000

08005f40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005f40:	4b07      	ldr	r3, [pc, #28]	; (8005f60 <pxCurrentTCBConst2>)
 8005f42:	6819      	ldr	r1, [r3, #0]
 8005f44:	6808      	ldr	r0, [r1, #0]
 8005f46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f4a:	f380 8809 	msr	PSP, r0
 8005f4e:	f3bf 8f6f 	isb	sy
 8005f52:	f04f 0000 	mov.w	r0, #0
 8005f56:	f380 8811 	msr	BASEPRI, r0
 8005f5a:	4770      	bx	lr
 8005f5c:	f3af 8000 	nop.w

08005f60 <pxCurrentTCBConst2>:
 8005f60:	200007f0 	.word	0x200007f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005f64:	bf00      	nop
 8005f66:	bf00      	nop

08005f68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005f68:	4808      	ldr	r0, [pc, #32]	; (8005f8c <prvPortStartFirstTask+0x24>)
 8005f6a:	6800      	ldr	r0, [r0, #0]
 8005f6c:	6800      	ldr	r0, [r0, #0]
 8005f6e:	f380 8808 	msr	MSP, r0
 8005f72:	f04f 0000 	mov.w	r0, #0
 8005f76:	f380 8814 	msr	CONTROL, r0
 8005f7a:	b662      	cpsie	i
 8005f7c:	b661      	cpsie	f
 8005f7e:	f3bf 8f4f 	dsb	sy
 8005f82:	f3bf 8f6f 	isb	sy
 8005f86:	df00      	svc	0
 8005f88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005f8a:	bf00      	nop
 8005f8c:	e000ed08 	.word	0xe000ed08

08005f90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b086      	sub	sp, #24
 8005f94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005f96:	4b44      	ldr	r3, [pc, #272]	; (80060a8 <xPortStartScheduler+0x118>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a44      	ldr	r2, [pc, #272]	; (80060ac <xPortStartScheduler+0x11c>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d109      	bne.n	8005fb4 <xPortStartScheduler+0x24>
 8005fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa4:	f383 8811 	msr	BASEPRI, r3
 8005fa8:	f3bf 8f6f 	isb	sy
 8005fac:	f3bf 8f4f 	dsb	sy
 8005fb0:	613b      	str	r3, [r7, #16]
 8005fb2:	e7fe      	b.n	8005fb2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005fb4:	4b3c      	ldr	r3, [pc, #240]	; (80060a8 <xPortStartScheduler+0x118>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a3d      	ldr	r2, [pc, #244]	; (80060b0 <xPortStartScheduler+0x120>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d109      	bne.n	8005fd2 <xPortStartScheduler+0x42>
 8005fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	60fb      	str	r3, [r7, #12]
 8005fd0:	e7fe      	b.n	8005fd0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005fd2:	4b38      	ldr	r3, [pc, #224]	; (80060b4 <xPortStartScheduler+0x124>)
 8005fd4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	22ff      	movs	r2, #255	; 0xff
 8005fe2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005fec:	78fb      	ldrb	r3, [r7, #3]
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005ff4:	b2da      	uxtb	r2, r3
 8005ff6:	4b30      	ldr	r3, [pc, #192]	; (80060b8 <xPortStartScheduler+0x128>)
 8005ff8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005ffa:	4b30      	ldr	r3, [pc, #192]	; (80060bc <xPortStartScheduler+0x12c>)
 8005ffc:	2207      	movs	r2, #7
 8005ffe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006000:	e009      	b.n	8006016 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006002:	4b2e      	ldr	r3, [pc, #184]	; (80060bc <xPortStartScheduler+0x12c>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	3b01      	subs	r3, #1
 8006008:	4a2c      	ldr	r2, [pc, #176]	; (80060bc <xPortStartScheduler+0x12c>)
 800600a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800600c:	78fb      	ldrb	r3, [r7, #3]
 800600e:	b2db      	uxtb	r3, r3
 8006010:	005b      	lsls	r3, r3, #1
 8006012:	b2db      	uxtb	r3, r3
 8006014:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006016:	78fb      	ldrb	r3, [r7, #3]
 8006018:	b2db      	uxtb	r3, r3
 800601a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800601e:	2b80      	cmp	r3, #128	; 0x80
 8006020:	d0ef      	beq.n	8006002 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006022:	4b26      	ldr	r3, [pc, #152]	; (80060bc <xPortStartScheduler+0x12c>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f1c3 0307 	rsb	r3, r3, #7
 800602a:	2b04      	cmp	r3, #4
 800602c:	d009      	beq.n	8006042 <xPortStartScheduler+0xb2>
 800602e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006032:	f383 8811 	msr	BASEPRI, r3
 8006036:	f3bf 8f6f 	isb	sy
 800603a:	f3bf 8f4f 	dsb	sy
 800603e:	60bb      	str	r3, [r7, #8]
 8006040:	e7fe      	b.n	8006040 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006042:	4b1e      	ldr	r3, [pc, #120]	; (80060bc <xPortStartScheduler+0x12c>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	021b      	lsls	r3, r3, #8
 8006048:	4a1c      	ldr	r2, [pc, #112]	; (80060bc <xPortStartScheduler+0x12c>)
 800604a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800604c:	4b1b      	ldr	r3, [pc, #108]	; (80060bc <xPortStartScheduler+0x12c>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006054:	4a19      	ldr	r2, [pc, #100]	; (80060bc <xPortStartScheduler+0x12c>)
 8006056:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	b2da      	uxtb	r2, r3
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006060:	4b17      	ldr	r3, [pc, #92]	; (80060c0 <xPortStartScheduler+0x130>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a16      	ldr	r2, [pc, #88]	; (80060c0 <xPortStartScheduler+0x130>)
 8006066:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800606a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800606c:	4b14      	ldr	r3, [pc, #80]	; (80060c0 <xPortStartScheduler+0x130>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a13      	ldr	r2, [pc, #76]	; (80060c0 <xPortStartScheduler+0x130>)
 8006072:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006076:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006078:	f000 f8d6 	bl	8006228 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800607c:	4b11      	ldr	r3, [pc, #68]	; (80060c4 <xPortStartScheduler+0x134>)
 800607e:	2200      	movs	r2, #0
 8006080:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006082:	f000 f8f5 	bl	8006270 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006086:	4b10      	ldr	r3, [pc, #64]	; (80060c8 <xPortStartScheduler+0x138>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a0f      	ldr	r2, [pc, #60]	; (80060c8 <xPortStartScheduler+0x138>)
 800608c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006090:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006092:	f7ff ff69 	bl	8005f68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006096:	f7ff f86f 	bl	8005178 <vTaskSwitchContext>
	prvTaskExitError();
 800609a:	f7ff ff25 	bl	8005ee8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3718      	adds	r7, #24
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	e000ed00 	.word	0xe000ed00
 80060ac:	410fc271 	.word	0x410fc271
 80060b0:	410fc270 	.word	0x410fc270
 80060b4:	e000e400 	.word	0xe000e400
 80060b8:	20000e1c 	.word	0x20000e1c
 80060bc:	20000e20 	.word	0x20000e20
 80060c0:	e000ed20 	.word	0xe000ed20
 80060c4:	2000000c 	.word	0x2000000c
 80060c8:	e000ef34 	.word	0xe000ef34

080060cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d6:	f383 8811 	msr	BASEPRI, r3
 80060da:	f3bf 8f6f 	isb	sy
 80060de:	f3bf 8f4f 	dsb	sy
 80060e2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80060e4:	4b0e      	ldr	r3, [pc, #56]	; (8006120 <vPortEnterCritical+0x54>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	3301      	adds	r3, #1
 80060ea:	4a0d      	ldr	r2, [pc, #52]	; (8006120 <vPortEnterCritical+0x54>)
 80060ec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80060ee:	4b0c      	ldr	r3, [pc, #48]	; (8006120 <vPortEnterCritical+0x54>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d10e      	bne.n	8006114 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80060f6:	4b0b      	ldr	r3, [pc, #44]	; (8006124 <vPortEnterCritical+0x58>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d009      	beq.n	8006114 <vPortEnterCritical+0x48>
 8006100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006104:	f383 8811 	msr	BASEPRI, r3
 8006108:	f3bf 8f6f 	isb	sy
 800610c:	f3bf 8f4f 	dsb	sy
 8006110:	603b      	str	r3, [r7, #0]
 8006112:	e7fe      	b.n	8006112 <vPortEnterCritical+0x46>
	}
}
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr
 8006120:	2000000c 	.word	0x2000000c
 8006124:	e000ed04 	.word	0xe000ed04

08006128 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800612e:	4b11      	ldr	r3, [pc, #68]	; (8006174 <vPortExitCritical+0x4c>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d109      	bne.n	800614a <vPortExitCritical+0x22>
 8006136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800613a:	f383 8811 	msr	BASEPRI, r3
 800613e:	f3bf 8f6f 	isb	sy
 8006142:	f3bf 8f4f 	dsb	sy
 8006146:	607b      	str	r3, [r7, #4]
 8006148:	e7fe      	b.n	8006148 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800614a:	4b0a      	ldr	r3, [pc, #40]	; (8006174 <vPortExitCritical+0x4c>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	3b01      	subs	r3, #1
 8006150:	4a08      	ldr	r2, [pc, #32]	; (8006174 <vPortExitCritical+0x4c>)
 8006152:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006154:	4b07      	ldr	r3, [pc, #28]	; (8006174 <vPortExitCritical+0x4c>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d104      	bne.n	8006166 <vPortExitCritical+0x3e>
 800615c:	2300      	movs	r3, #0
 800615e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006166:	bf00      	nop
 8006168:	370c      	adds	r7, #12
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	2000000c 	.word	0x2000000c
	...

08006180 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006180:	f3ef 8009 	mrs	r0, PSP
 8006184:	f3bf 8f6f 	isb	sy
 8006188:	4b15      	ldr	r3, [pc, #84]	; (80061e0 <pxCurrentTCBConst>)
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	f01e 0f10 	tst.w	lr, #16
 8006190:	bf08      	it	eq
 8006192:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006196:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800619a:	6010      	str	r0, [r2, #0]
 800619c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80061a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80061a4:	f380 8811 	msr	BASEPRI, r0
 80061a8:	f3bf 8f4f 	dsb	sy
 80061ac:	f3bf 8f6f 	isb	sy
 80061b0:	f7fe ffe2 	bl	8005178 <vTaskSwitchContext>
 80061b4:	f04f 0000 	mov.w	r0, #0
 80061b8:	f380 8811 	msr	BASEPRI, r0
 80061bc:	bc09      	pop	{r0, r3}
 80061be:	6819      	ldr	r1, [r3, #0]
 80061c0:	6808      	ldr	r0, [r1, #0]
 80061c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061c6:	f01e 0f10 	tst.w	lr, #16
 80061ca:	bf08      	it	eq
 80061cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80061d0:	f380 8809 	msr	PSP, r0
 80061d4:	f3bf 8f6f 	isb	sy
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	f3af 8000 	nop.w

080061e0 <pxCurrentTCBConst>:
 80061e0:	200007f0 	.word	0x200007f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80061e4:	bf00      	nop
 80061e6:	bf00      	nop

080061e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
	__asm volatile
 80061ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f2:	f383 8811 	msr	BASEPRI, r3
 80061f6:	f3bf 8f6f 	isb	sy
 80061fa:	f3bf 8f4f 	dsb	sy
 80061fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006200:	f7fe ff02 	bl	8005008 <xTaskIncrementTick>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d003      	beq.n	8006212 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800620a:	4b06      	ldr	r3, [pc, #24]	; (8006224 <SysTick_Handler+0x3c>)
 800620c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006210:	601a      	str	r2, [r3, #0]
 8006212:	2300      	movs	r3, #0
 8006214:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800621c:	bf00      	nop
 800621e:	3708      	adds	r7, #8
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	e000ed04 	.word	0xe000ed04

08006228 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006228:	b480      	push	{r7}
 800622a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800622c:	4b0b      	ldr	r3, [pc, #44]	; (800625c <vPortSetupTimerInterrupt+0x34>)
 800622e:	2200      	movs	r2, #0
 8006230:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006232:	4b0b      	ldr	r3, [pc, #44]	; (8006260 <vPortSetupTimerInterrupt+0x38>)
 8006234:	2200      	movs	r2, #0
 8006236:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006238:	4b0a      	ldr	r3, [pc, #40]	; (8006264 <vPortSetupTimerInterrupt+0x3c>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a0a      	ldr	r2, [pc, #40]	; (8006268 <vPortSetupTimerInterrupt+0x40>)
 800623e:	fba2 2303 	umull	r2, r3, r2, r3
 8006242:	099b      	lsrs	r3, r3, #6
 8006244:	4a09      	ldr	r2, [pc, #36]	; (800626c <vPortSetupTimerInterrupt+0x44>)
 8006246:	3b01      	subs	r3, #1
 8006248:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800624a:	4b04      	ldr	r3, [pc, #16]	; (800625c <vPortSetupTimerInterrupt+0x34>)
 800624c:	2207      	movs	r2, #7
 800624e:	601a      	str	r2, [r3, #0]
}
 8006250:	bf00      	nop
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	e000e010 	.word	0xe000e010
 8006260:	e000e018 	.word	0xe000e018
 8006264:	20000000 	.word	0x20000000
 8006268:	10624dd3 	.word	0x10624dd3
 800626c:	e000e014 	.word	0xe000e014

08006270 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006270:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006280 <vPortEnableVFP+0x10>
 8006274:	6801      	ldr	r1, [r0, #0]
 8006276:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800627a:	6001      	str	r1, [r0, #0]
 800627c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800627e:	bf00      	nop
 8006280:	e000ed88 	.word	0xe000ed88

08006284 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800628a:	f3ef 8305 	mrs	r3, IPSR
 800628e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2b0f      	cmp	r3, #15
 8006294:	d913      	bls.n	80062be <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006296:	4a16      	ldr	r2, [pc, #88]	; (80062f0 <vPortValidateInterruptPriority+0x6c>)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	4413      	add	r3, r2
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80062a0:	4b14      	ldr	r3, [pc, #80]	; (80062f4 <vPortValidateInterruptPriority+0x70>)
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	7afa      	ldrb	r2, [r7, #11]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d209      	bcs.n	80062be <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80062aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ae:	f383 8811 	msr	BASEPRI, r3
 80062b2:	f3bf 8f6f 	isb	sy
 80062b6:	f3bf 8f4f 	dsb	sy
 80062ba:	607b      	str	r3, [r7, #4]
 80062bc:	e7fe      	b.n	80062bc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80062be:	4b0e      	ldr	r3, [pc, #56]	; (80062f8 <vPortValidateInterruptPriority+0x74>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80062c6:	4b0d      	ldr	r3, [pc, #52]	; (80062fc <vPortValidateInterruptPriority+0x78>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d909      	bls.n	80062e2 <vPortValidateInterruptPriority+0x5e>
 80062ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d2:	f383 8811 	msr	BASEPRI, r3
 80062d6:	f3bf 8f6f 	isb	sy
 80062da:	f3bf 8f4f 	dsb	sy
 80062de:	603b      	str	r3, [r7, #0]
 80062e0:	e7fe      	b.n	80062e0 <vPortValidateInterruptPriority+0x5c>
	}
 80062e2:	bf00      	nop
 80062e4:	3714      	adds	r7, #20
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	e000e3f0 	.word	0xe000e3f0
 80062f4:	20000e1c 	.word	0x20000e1c
 80062f8:	e000ed0c 	.word	0xe000ed0c
 80062fc:	20000e20 	.word	0x20000e20

08006300 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b08a      	sub	sp, #40	; 0x28
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006308:	2300      	movs	r3, #0
 800630a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800630c:	f7fe fdc2 	bl	8004e94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006310:	4b57      	ldr	r3, [pc, #348]	; (8006470 <pvPortMalloc+0x170>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d101      	bne.n	800631c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006318:	f000 f90c 	bl	8006534 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800631c:	4b55      	ldr	r3, [pc, #340]	; (8006474 <pvPortMalloc+0x174>)
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4013      	ands	r3, r2
 8006324:	2b00      	cmp	r3, #0
 8006326:	f040 808c 	bne.w	8006442 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d01c      	beq.n	800636a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006330:	2208      	movs	r2, #8
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4413      	add	r3, r2
 8006336:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f003 0307 	and.w	r3, r3, #7
 800633e:	2b00      	cmp	r3, #0
 8006340:	d013      	beq.n	800636a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f023 0307 	bic.w	r3, r3, #7
 8006348:	3308      	adds	r3, #8
 800634a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f003 0307 	and.w	r3, r3, #7
 8006352:	2b00      	cmp	r3, #0
 8006354:	d009      	beq.n	800636a <pvPortMalloc+0x6a>
 8006356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635a:	f383 8811 	msr	BASEPRI, r3
 800635e:	f3bf 8f6f 	isb	sy
 8006362:	f3bf 8f4f 	dsb	sy
 8006366:	617b      	str	r3, [r7, #20]
 8006368:	e7fe      	b.n	8006368 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d068      	beq.n	8006442 <pvPortMalloc+0x142>
 8006370:	4b41      	ldr	r3, [pc, #260]	; (8006478 <pvPortMalloc+0x178>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	429a      	cmp	r2, r3
 8006378:	d863      	bhi.n	8006442 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800637a:	4b40      	ldr	r3, [pc, #256]	; (800647c <pvPortMalloc+0x17c>)
 800637c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800637e:	4b3f      	ldr	r3, [pc, #252]	; (800647c <pvPortMalloc+0x17c>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006384:	e004      	b.n	8006390 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006388:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800638a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	429a      	cmp	r2, r3
 8006398:	d903      	bls.n	80063a2 <pvPortMalloc+0xa2>
 800639a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1f1      	bne.n	8006386 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80063a2:	4b33      	ldr	r3, [pc, #204]	; (8006470 <pvPortMalloc+0x170>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d04a      	beq.n	8006442 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80063ac:	6a3b      	ldr	r3, [r7, #32]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2208      	movs	r2, #8
 80063b2:	4413      	add	r3, r2
 80063b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80063b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	6a3b      	ldr	r3, [r7, #32]
 80063bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80063be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c0:	685a      	ldr	r2, [r3, #4]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	1ad2      	subs	r2, r2, r3
 80063c6:	2308      	movs	r3, #8
 80063c8:	005b      	lsls	r3, r3, #1
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d91e      	bls.n	800640c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80063ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4413      	add	r3, r2
 80063d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	f003 0307 	and.w	r3, r3, #7
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d009      	beq.n	80063f4 <pvPortMalloc+0xf4>
 80063e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e4:	f383 8811 	msr	BASEPRI, r3
 80063e8:	f3bf 8f6f 	isb	sy
 80063ec:	f3bf 8f4f 	dsb	sy
 80063f0:	613b      	str	r3, [r7, #16]
 80063f2:	e7fe      	b.n	80063f2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80063f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f6:	685a      	ldr	r2, [r3, #4]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	1ad2      	subs	r2, r2, r3
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006406:	69b8      	ldr	r0, [r7, #24]
 8006408:	f000 f8f6 	bl	80065f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800640c:	4b1a      	ldr	r3, [pc, #104]	; (8006478 <pvPortMalloc+0x178>)
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	4a18      	ldr	r2, [pc, #96]	; (8006478 <pvPortMalloc+0x178>)
 8006418:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800641a:	4b17      	ldr	r3, [pc, #92]	; (8006478 <pvPortMalloc+0x178>)
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	4b18      	ldr	r3, [pc, #96]	; (8006480 <pvPortMalloc+0x180>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	429a      	cmp	r2, r3
 8006424:	d203      	bcs.n	800642e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006426:	4b14      	ldr	r3, [pc, #80]	; (8006478 <pvPortMalloc+0x178>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a15      	ldr	r2, [pc, #84]	; (8006480 <pvPortMalloc+0x180>)
 800642c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800642e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006430:	685a      	ldr	r2, [r3, #4]
 8006432:	4b10      	ldr	r3, [pc, #64]	; (8006474 <pvPortMalloc+0x174>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	431a      	orrs	r2, r3
 8006438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800643c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643e:	2200      	movs	r2, #0
 8006440:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006442:	f7fe fd35 	bl	8004eb0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	f003 0307 	and.w	r3, r3, #7
 800644c:	2b00      	cmp	r3, #0
 800644e:	d009      	beq.n	8006464 <pvPortMalloc+0x164>
 8006450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006454:	f383 8811 	msr	BASEPRI, r3
 8006458:	f3bf 8f6f 	isb	sy
 800645c:	f3bf 8f4f 	dsb	sy
 8006460:	60fb      	str	r3, [r7, #12]
 8006462:	e7fe      	b.n	8006462 <pvPortMalloc+0x162>
	return pvReturn;
 8006464:	69fb      	ldr	r3, [r7, #28]
}
 8006466:	4618      	mov	r0, r3
 8006468:	3728      	adds	r7, #40	; 0x28
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	20004a2c 	.word	0x20004a2c
 8006474:	20004a38 	.word	0x20004a38
 8006478:	20004a30 	.word	0x20004a30
 800647c:	20004a24 	.word	0x20004a24
 8006480:	20004a34 	.word	0x20004a34

08006484 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b086      	sub	sp, #24
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d046      	beq.n	8006524 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006496:	2308      	movs	r3, #8
 8006498:	425b      	negs	r3, r3
 800649a:	697a      	ldr	r2, [r7, #20]
 800649c:	4413      	add	r3, r2
 800649e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	685a      	ldr	r2, [r3, #4]
 80064a8:	4b20      	ldr	r3, [pc, #128]	; (800652c <vPortFree+0xa8>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4013      	ands	r3, r2
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d109      	bne.n	80064c6 <vPortFree+0x42>
 80064b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b6:	f383 8811 	msr	BASEPRI, r3
 80064ba:	f3bf 8f6f 	isb	sy
 80064be:	f3bf 8f4f 	dsb	sy
 80064c2:	60fb      	str	r3, [r7, #12]
 80064c4:	e7fe      	b.n	80064c4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d009      	beq.n	80064e2 <vPortFree+0x5e>
 80064ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d2:	f383 8811 	msr	BASEPRI, r3
 80064d6:	f3bf 8f6f 	isb	sy
 80064da:	f3bf 8f4f 	dsb	sy
 80064de:	60bb      	str	r3, [r7, #8]
 80064e0:	e7fe      	b.n	80064e0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	685a      	ldr	r2, [r3, #4]
 80064e6:	4b11      	ldr	r3, [pc, #68]	; (800652c <vPortFree+0xa8>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4013      	ands	r3, r2
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d019      	beq.n	8006524 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d115      	bne.n	8006524 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	685a      	ldr	r2, [r3, #4]
 80064fc:	4b0b      	ldr	r3, [pc, #44]	; (800652c <vPortFree+0xa8>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	43db      	mvns	r3, r3
 8006502:	401a      	ands	r2, r3
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006508:	f7fe fcc4 	bl	8004e94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	685a      	ldr	r2, [r3, #4]
 8006510:	4b07      	ldr	r3, [pc, #28]	; (8006530 <vPortFree+0xac>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4413      	add	r3, r2
 8006516:	4a06      	ldr	r2, [pc, #24]	; (8006530 <vPortFree+0xac>)
 8006518:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800651a:	6938      	ldr	r0, [r7, #16]
 800651c:	f000 f86c 	bl	80065f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006520:	f7fe fcc6 	bl	8004eb0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006524:	bf00      	nop
 8006526:	3718      	adds	r7, #24
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}
 800652c:	20004a38 	.word	0x20004a38
 8006530:	20004a30 	.word	0x20004a30

08006534 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800653a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800653e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006540:	4b27      	ldr	r3, [pc, #156]	; (80065e0 <prvHeapInit+0xac>)
 8006542:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f003 0307 	and.w	r3, r3, #7
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00c      	beq.n	8006568 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	3307      	adds	r3, #7
 8006552:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f023 0307 	bic.w	r3, r3, #7
 800655a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800655c:	68ba      	ldr	r2, [r7, #8]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	4a1f      	ldr	r2, [pc, #124]	; (80065e0 <prvHeapInit+0xac>)
 8006564:	4413      	add	r3, r2
 8006566:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800656c:	4a1d      	ldr	r2, [pc, #116]	; (80065e4 <prvHeapInit+0xb0>)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006572:	4b1c      	ldr	r3, [pc, #112]	; (80065e4 <prvHeapInit+0xb0>)
 8006574:	2200      	movs	r2, #0
 8006576:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	4413      	add	r3, r2
 800657e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006580:	2208      	movs	r2, #8
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	1a9b      	subs	r3, r3, r2
 8006586:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f023 0307 	bic.w	r3, r3, #7
 800658e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	4a15      	ldr	r2, [pc, #84]	; (80065e8 <prvHeapInit+0xb4>)
 8006594:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006596:	4b14      	ldr	r3, [pc, #80]	; (80065e8 <prvHeapInit+0xb4>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2200      	movs	r2, #0
 800659c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800659e:	4b12      	ldr	r3, [pc, #72]	; (80065e8 <prvHeapInit+0xb4>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2200      	movs	r2, #0
 80065a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	1ad2      	subs	r2, r2, r3
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80065b4:	4b0c      	ldr	r3, [pc, #48]	; (80065e8 <prvHeapInit+0xb4>)
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	4a0a      	ldr	r2, [pc, #40]	; (80065ec <prvHeapInit+0xb8>)
 80065c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	4a09      	ldr	r2, [pc, #36]	; (80065f0 <prvHeapInit+0xbc>)
 80065ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80065cc:	4b09      	ldr	r3, [pc, #36]	; (80065f4 <prvHeapInit+0xc0>)
 80065ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80065d2:	601a      	str	r2, [r3, #0]
}
 80065d4:	bf00      	nop
 80065d6:	3714      	adds	r7, #20
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr
 80065e0:	20000e24 	.word	0x20000e24
 80065e4:	20004a24 	.word	0x20004a24
 80065e8:	20004a2c 	.word	0x20004a2c
 80065ec:	20004a34 	.word	0x20004a34
 80065f0:	20004a30 	.word	0x20004a30
 80065f4:	20004a38 	.word	0x20004a38

080065f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006600:	4b28      	ldr	r3, [pc, #160]	; (80066a4 <prvInsertBlockIntoFreeList+0xac>)
 8006602:	60fb      	str	r3, [r7, #12]
 8006604:	e002      	b.n	800660c <prvInsertBlockIntoFreeList+0x14>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	60fb      	str	r3, [r7, #12]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	429a      	cmp	r2, r3
 8006614:	d8f7      	bhi.n	8006606 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	68ba      	ldr	r2, [r7, #8]
 8006620:	4413      	add	r3, r2
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	429a      	cmp	r2, r3
 8006626:	d108      	bne.n	800663a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	685a      	ldr	r2, [r3, #4]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	441a      	add	r2, r3
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	68ba      	ldr	r2, [r7, #8]
 8006644:	441a      	add	r2, r3
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	429a      	cmp	r2, r3
 800664c:	d118      	bne.n	8006680 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	4b15      	ldr	r3, [pc, #84]	; (80066a8 <prvInsertBlockIntoFreeList+0xb0>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	429a      	cmp	r2, r3
 8006658:	d00d      	beq.n	8006676 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	685a      	ldr	r2, [r3, #4]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	441a      	add	r2, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	601a      	str	r2, [r3, #0]
 8006674:	e008      	b.n	8006688 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006676:	4b0c      	ldr	r3, [pc, #48]	; (80066a8 <prvInsertBlockIntoFreeList+0xb0>)
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	601a      	str	r2, [r3, #0]
 800667e:	e003      	b.n	8006688 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	429a      	cmp	r2, r3
 800668e:	d002      	beq.n	8006696 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006696:	bf00      	nop
 8006698:	3714      	adds	r7, #20
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	20004a24 	.word	0x20004a24
 80066a8:	20004a2c 	.word	0x20004a2c

080066ac <_ZdlPvj>:
 80066ac:	f000 b800 	b.w	80066b0 <_ZdlPv>

080066b0 <_ZdlPv>:
 80066b0:	f000 b824 	b.w	80066fc <free>

080066b4 <__libc_init_array>:
 80066b4:	b570      	push	{r4, r5, r6, lr}
 80066b6:	4e0d      	ldr	r6, [pc, #52]	; (80066ec <__libc_init_array+0x38>)
 80066b8:	4c0d      	ldr	r4, [pc, #52]	; (80066f0 <__libc_init_array+0x3c>)
 80066ba:	1ba4      	subs	r4, r4, r6
 80066bc:	10a4      	asrs	r4, r4, #2
 80066be:	2500      	movs	r5, #0
 80066c0:	42a5      	cmp	r5, r4
 80066c2:	d109      	bne.n	80066d8 <__libc_init_array+0x24>
 80066c4:	4e0b      	ldr	r6, [pc, #44]	; (80066f4 <__libc_init_array+0x40>)
 80066c6:	4c0c      	ldr	r4, [pc, #48]	; (80066f8 <__libc_init_array+0x44>)
 80066c8:	f000 f884 	bl	80067d4 <_init>
 80066cc:	1ba4      	subs	r4, r4, r6
 80066ce:	10a4      	asrs	r4, r4, #2
 80066d0:	2500      	movs	r5, #0
 80066d2:	42a5      	cmp	r5, r4
 80066d4:	d105      	bne.n	80066e2 <__libc_init_array+0x2e>
 80066d6:	bd70      	pop	{r4, r5, r6, pc}
 80066d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80066dc:	4798      	blx	r3
 80066de:	3501      	adds	r5, #1
 80066e0:	e7ee      	b.n	80066c0 <__libc_init_array+0xc>
 80066e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80066e6:	4798      	blx	r3
 80066e8:	3501      	adds	r5, #1
 80066ea:	e7f2      	b.n	80066d2 <__libc_init_array+0x1e>
 80066ec:	0800683c 	.word	0x0800683c
 80066f0:	0800683c 	.word	0x0800683c
 80066f4:	0800683c 	.word	0x0800683c
 80066f8:	08006844 	.word	0x08006844

080066fc <free>:
 80066fc:	4b02      	ldr	r3, [pc, #8]	; (8006708 <free+0xc>)
 80066fe:	4601      	mov	r1, r0
 8006700:	6818      	ldr	r0, [r3, #0]
 8006702:	f000 b817 	b.w	8006734 <_free_r>
 8006706:	bf00      	nop
 8006708:	20000010 	.word	0x20000010

0800670c <memcpy>:
 800670c:	b510      	push	{r4, lr}
 800670e:	1e43      	subs	r3, r0, #1
 8006710:	440a      	add	r2, r1
 8006712:	4291      	cmp	r1, r2
 8006714:	d100      	bne.n	8006718 <memcpy+0xc>
 8006716:	bd10      	pop	{r4, pc}
 8006718:	f811 4b01 	ldrb.w	r4, [r1], #1
 800671c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006720:	e7f7      	b.n	8006712 <memcpy+0x6>

08006722 <memset>:
 8006722:	4402      	add	r2, r0
 8006724:	4603      	mov	r3, r0
 8006726:	4293      	cmp	r3, r2
 8006728:	d100      	bne.n	800672c <memset+0xa>
 800672a:	4770      	bx	lr
 800672c:	f803 1b01 	strb.w	r1, [r3], #1
 8006730:	e7f9      	b.n	8006726 <memset+0x4>
	...

08006734 <_free_r>:
 8006734:	b538      	push	{r3, r4, r5, lr}
 8006736:	4605      	mov	r5, r0
 8006738:	2900      	cmp	r1, #0
 800673a:	d045      	beq.n	80067c8 <_free_r+0x94>
 800673c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006740:	1f0c      	subs	r4, r1, #4
 8006742:	2b00      	cmp	r3, #0
 8006744:	bfb8      	it	lt
 8006746:	18e4      	addlt	r4, r4, r3
 8006748:	f000 f842 	bl	80067d0 <__malloc_lock>
 800674c:	4a1f      	ldr	r2, [pc, #124]	; (80067cc <_free_r+0x98>)
 800674e:	6813      	ldr	r3, [r2, #0]
 8006750:	4610      	mov	r0, r2
 8006752:	b933      	cbnz	r3, 8006762 <_free_r+0x2e>
 8006754:	6063      	str	r3, [r4, #4]
 8006756:	6014      	str	r4, [r2, #0]
 8006758:	4628      	mov	r0, r5
 800675a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800675e:	f000 b838 	b.w	80067d2 <__malloc_unlock>
 8006762:	42a3      	cmp	r3, r4
 8006764:	d90c      	bls.n	8006780 <_free_r+0x4c>
 8006766:	6821      	ldr	r1, [r4, #0]
 8006768:	1862      	adds	r2, r4, r1
 800676a:	4293      	cmp	r3, r2
 800676c:	bf04      	itt	eq
 800676e:	681a      	ldreq	r2, [r3, #0]
 8006770:	685b      	ldreq	r3, [r3, #4]
 8006772:	6063      	str	r3, [r4, #4]
 8006774:	bf04      	itt	eq
 8006776:	1852      	addeq	r2, r2, r1
 8006778:	6022      	streq	r2, [r4, #0]
 800677a:	6004      	str	r4, [r0, #0]
 800677c:	e7ec      	b.n	8006758 <_free_r+0x24>
 800677e:	4613      	mov	r3, r2
 8006780:	685a      	ldr	r2, [r3, #4]
 8006782:	b10a      	cbz	r2, 8006788 <_free_r+0x54>
 8006784:	42a2      	cmp	r2, r4
 8006786:	d9fa      	bls.n	800677e <_free_r+0x4a>
 8006788:	6819      	ldr	r1, [r3, #0]
 800678a:	1858      	adds	r0, r3, r1
 800678c:	42a0      	cmp	r0, r4
 800678e:	d10b      	bne.n	80067a8 <_free_r+0x74>
 8006790:	6820      	ldr	r0, [r4, #0]
 8006792:	4401      	add	r1, r0
 8006794:	1858      	adds	r0, r3, r1
 8006796:	4282      	cmp	r2, r0
 8006798:	6019      	str	r1, [r3, #0]
 800679a:	d1dd      	bne.n	8006758 <_free_r+0x24>
 800679c:	6810      	ldr	r0, [r2, #0]
 800679e:	6852      	ldr	r2, [r2, #4]
 80067a0:	605a      	str	r2, [r3, #4]
 80067a2:	4401      	add	r1, r0
 80067a4:	6019      	str	r1, [r3, #0]
 80067a6:	e7d7      	b.n	8006758 <_free_r+0x24>
 80067a8:	d902      	bls.n	80067b0 <_free_r+0x7c>
 80067aa:	230c      	movs	r3, #12
 80067ac:	602b      	str	r3, [r5, #0]
 80067ae:	e7d3      	b.n	8006758 <_free_r+0x24>
 80067b0:	6820      	ldr	r0, [r4, #0]
 80067b2:	1821      	adds	r1, r4, r0
 80067b4:	428a      	cmp	r2, r1
 80067b6:	bf04      	itt	eq
 80067b8:	6811      	ldreq	r1, [r2, #0]
 80067ba:	6852      	ldreq	r2, [r2, #4]
 80067bc:	6062      	str	r2, [r4, #4]
 80067be:	bf04      	itt	eq
 80067c0:	1809      	addeq	r1, r1, r0
 80067c2:	6021      	streq	r1, [r4, #0]
 80067c4:	605c      	str	r4, [r3, #4]
 80067c6:	e7c7      	b.n	8006758 <_free_r+0x24>
 80067c8:	bd38      	pop	{r3, r4, r5, pc}
 80067ca:	bf00      	nop
 80067cc:	20004a3c 	.word	0x20004a3c

080067d0 <__malloc_lock>:
 80067d0:	4770      	bx	lr

080067d2 <__malloc_unlock>:
 80067d2:	4770      	bx	lr

080067d4 <_init>:
 80067d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067d6:	bf00      	nop
 80067d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067da:	bc08      	pop	{r3}
 80067dc:	469e      	mov	lr, r3
 80067de:	4770      	bx	lr

080067e0 <_fini>:
 80067e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067e2:	bf00      	nop
 80067e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067e6:	bc08      	pop	{r3}
 80067e8:	469e      	mov	lr, r3
 80067ea:	4770      	bx	lr
