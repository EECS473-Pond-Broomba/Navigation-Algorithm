
actual_imu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         00006f10  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080070b0  080070b0  000170b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007110  08007110  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007110  08007110  00017110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007118  08007118  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007118  08007118  00017118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08007120  08007120  00017120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007128  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004aa4  20000078  080071a0  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20004b1c  080071a0  00024b1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c90c  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003647  00000000  00000000  0003c9b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001630  00000000  00000000  00040000  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014f0  00000000  00000000  00041630  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001926f  00000000  00000000  00042b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011673  00000000  00000000  0005bd8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009b2be  00000000  00000000  0006d402  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001086c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061f4  00000000  00000000  0010873c  2**2
=======
  1 .text         00007978  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08007b18  08007b18  00017b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bb8  08007bb8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007bb8  08007bb8  00017bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bc0  08007bc0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007bc0  08007bc0  00017bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08007bc8  08007bc8  00017bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007bd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004aa8  20000078  08007c48  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004b20  08007c48  00024b20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cce0  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003545  00000000  00000000  0003cd88  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001630  00000000  00000000  000402d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014f0  00000000  00000000  00041900  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019888  00000000  00000000  00042df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001152a  00000000  00000000  0005c678  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009c807  00000000  00000000  0006dba2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010a3a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000643c  00000000  00000000  0010a424  2**2
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
<<<<<<< HEAD
 80001c0:	08007098 	.word	0x08007098
=======
 80001c0:	08007b00 	.word	0x08007b00
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
<<<<<<< HEAD
 80001dc:	08007098 	.word	0x08007098

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800031e:	f1a4 0401 	sub.w	r4, r4, #1
 8000322:	d1e9      	bne.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
=======
 80001dc:	08007b00 	.word	0x08007b00

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

<<<<<<< HEAD
08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_uldivmod>:
 8000ab8:	b953      	cbnz	r3, 8000ad0 <__aeabi_uldivmod+0x18>
 8000aba:	b94a      	cbnz	r2, 8000ad0 <__aeabi_uldivmod+0x18>
 8000abc:	2900      	cmp	r1, #0
 8000abe:	bf08      	it	eq
 8000ac0:	2800      	cmpeq	r0, #0
 8000ac2:	bf1c      	itt	ne
 8000ac4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ac8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000acc:	f000 b972 	b.w	8000db4 <__aeabi_idiv0>
 8000ad0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ad8:	f000 f806 	bl	8000ae8 <__udivmoddi4>
 8000adc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae4:	b004      	add	sp, #16
 8000ae6:	4770      	bx	lr

08000ae8 <__udivmoddi4>:
 8000ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aec:	9e08      	ldr	r6, [sp, #32]
 8000aee:	4604      	mov	r4, r0
 8000af0:	4688      	mov	r8, r1
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d14b      	bne.n	8000b8e <__udivmoddi4+0xa6>
 8000af6:	428a      	cmp	r2, r1
 8000af8:	4615      	mov	r5, r2
 8000afa:	d967      	bls.n	8000bcc <__udivmoddi4+0xe4>
 8000afc:	fab2 f282 	clz	r2, r2
 8000b00:	b14a      	cbz	r2, 8000b16 <__udivmoddi4+0x2e>
 8000b02:	f1c2 0720 	rsb	r7, r2, #32
 8000b06:	fa01 f302 	lsl.w	r3, r1, r2
 8000b0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000b0e:	4095      	lsls	r5, r2
 8000b10:	ea47 0803 	orr.w	r8, r7, r3
 8000b14:	4094      	lsls	r4, r2
 8000b16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b1a:	0c23      	lsrs	r3, r4, #16
 8000b1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b20:	fa1f fc85 	uxth.w	ip, r5
 8000b24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000b30:	4299      	cmp	r1, r3
 8000b32:	d909      	bls.n	8000b48 <__udivmoddi4+0x60>
 8000b34:	18eb      	adds	r3, r5, r3
 8000b36:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000b3a:	f080 811b 	bcs.w	8000d74 <__udivmoddi4+0x28c>
 8000b3e:	4299      	cmp	r1, r3
 8000b40:	f240 8118 	bls.w	8000d74 <__udivmoddi4+0x28c>
 8000b44:	3f02      	subs	r7, #2
 8000b46:	442b      	add	r3, r5
 8000b48:	1a5b      	subs	r3, r3, r1
 8000b4a:	b2a4      	uxth	r4, r4
 8000b4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b5c:	45a4      	cmp	ip, r4
 8000b5e:	d909      	bls.n	8000b74 <__udivmoddi4+0x8c>
 8000b60:	192c      	adds	r4, r5, r4
 8000b62:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b66:	f080 8107 	bcs.w	8000d78 <__udivmoddi4+0x290>
 8000b6a:	45a4      	cmp	ip, r4
 8000b6c:	f240 8104 	bls.w	8000d78 <__udivmoddi4+0x290>
 8000b70:	3802      	subs	r0, #2
 8000b72:	442c      	add	r4, r5
 8000b74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b78:	eba4 040c 	sub.w	r4, r4, ip
 8000b7c:	2700      	movs	r7, #0
 8000b7e:	b11e      	cbz	r6, 8000b88 <__udivmoddi4+0xa0>
 8000b80:	40d4      	lsrs	r4, r2
 8000b82:	2300      	movs	r3, #0
 8000b84:	e9c6 4300 	strd	r4, r3, [r6]
 8000b88:	4639      	mov	r1, r7
 8000b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8e:	428b      	cmp	r3, r1
 8000b90:	d909      	bls.n	8000ba6 <__udivmoddi4+0xbe>
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	f000 80eb 	beq.w	8000d6e <__udivmoddi4+0x286>
 8000b98:	2700      	movs	r7, #0
 8000b9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000b9e:	4638      	mov	r0, r7
 8000ba0:	4639      	mov	r1, r7
 8000ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba6:	fab3 f783 	clz	r7, r3
 8000baa:	2f00      	cmp	r7, #0
 8000bac:	d147      	bne.n	8000c3e <__udivmoddi4+0x156>
 8000bae:	428b      	cmp	r3, r1
 8000bb0:	d302      	bcc.n	8000bb8 <__udivmoddi4+0xd0>
 8000bb2:	4282      	cmp	r2, r0
 8000bb4:	f200 80fa 	bhi.w	8000dac <__udivmoddi4+0x2c4>
 8000bb8:	1a84      	subs	r4, r0, r2
 8000bba:	eb61 0303 	sbc.w	r3, r1, r3
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	4698      	mov	r8, r3
 8000bc2:	2e00      	cmp	r6, #0
 8000bc4:	d0e0      	beq.n	8000b88 <__udivmoddi4+0xa0>
 8000bc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000bca:	e7dd      	b.n	8000b88 <__udivmoddi4+0xa0>
 8000bcc:	b902      	cbnz	r2, 8000bd0 <__udivmoddi4+0xe8>
 8000bce:	deff      	udf	#255	; 0xff
 8000bd0:	fab2 f282 	clz	r2, r2
 8000bd4:	2a00      	cmp	r2, #0
 8000bd6:	f040 808f 	bne.w	8000cf8 <__udivmoddi4+0x210>
 8000bda:	1b49      	subs	r1, r1, r5
 8000bdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000be0:	fa1f f885 	uxth.w	r8, r5
 8000be4:	2701      	movs	r7, #1
 8000be6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bea:	0c23      	lsrs	r3, r4, #16
 8000bec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf4:	fb08 f10c 	mul.w	r1, r8, ip
 8000bf8:	4299      	cmp	r1, r3
 8000bfa:	d907      	bls.n	8000c0c <__udivmoddi4+0x124>
 8000bfc:	18eb      	adds	r3, r5, r3
 8000bfe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c02:	d202      	bcs.n	8000c0a <__udivmoddi4+0x122>
 8000c04:	4299      	cmp	r1, r3
 8000c06:	f200 80cd 	bhi.w	8000da4 <__udivmoddi4+0x2bc>
 8000c0a:	4684      	mov	ip, r0
 8000c0c:	1a59      	subs	r1, r3, r1
 8000c0e:	b2a3      	uxth	r3, r4
 8000c10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c1c:	fb08 f800 	mul.w	r8, r8, r0
 8000c20:	45a0      	cmp	r8, r4
 8000c22:	d907      	bls.n	8000c34 <__udivmoddi4+0x14c>
 8000c24:	192c      	adds	r4, r5, r4
 8000c26:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c2a:	d202      	bcs.n	8000c32 <__udivmoddi4+0x14a>
 8000c2c:	45a0      	cmp	r8, r4
 8000c2e:	f200 80b6 	bhi.w	8000d9e <__udivmoddi4+0x2b6>
 8000c32:	4618      	mov	r0, r3
 8000c34:	eba4 0408 	sub.w	r4, r4, r8
 8000c38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c3c:	e79f      	b.n	8000b7e <__udivmoddi4+0x96>
 8000c3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000c42:	40bb      	lsls	r3, r7
 8000c44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000c50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c5c:	4325      	orrs	r5, r4
 8000c5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c62:	0c2c      	lsrs	r4, r5, #16
 8000c64:	fb08 3319 	mls	r3, r8, r9, r3
 8000c68:	fa1f fa8e 	uxth.w	sl, lr
 8000c6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c70:	fb09 f40a 	mul.w	r4, r9, sl
 8000c74:	429c      	cmp	r4, r3
 8000c76:	fa02 f207 	lsl.w	r2, r2, r7
 8000c7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000c7e:	d90b      	bls.n	8000c98 <__udivmoddi4+0x1b0>
 8000c80:	eb1e 0303 	adds.w	r3, lr, r3
 8000c84:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000c88:	f080 8087 	bcs.w	8000d9a <__udivmoddi4+0x2b2>
 8000c8c:	429c      	cmp	r4, r3
 8000c8e:	f240 8084 	bls.w	8000d9a <__udivmoddi4+0x2b2>
 8000c92:	f1a9 0902 	sub.w	r9, r9, #2
 8000c96:	4473      	add	r3, lr
 8000c98:	1b1b      	subs	r3, r3, r4
 8000c9a:	b2ad      	uxth	r5, r5
 8000c9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ca8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cac:	45a2      	cmp	sl, r4
 8000cae:	d908      	bls.n	8000cc2 <__udivmoddi4+0x1da>
 8000cb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000cb4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cb8:	d26b      	bcs.n	8000d92 <__udivmoddi4+0x2aa>
 8000cba:	45a2      	cmp	sl, r4
 8000cbc:	d969      	bls.n	8000d92 <__udivmoddi4+0x2aa>
 8000cbe:	3802      	subs	r0, #2
 8000cc0:	4474      	add	r4, lr
 8000cc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000cca:	eba4 040a 	sub.w	r4, r4, sl
 8000cce:	454c      	cmp	r4, r9
 8000cd0:	46c2      	mov	sl, r8
 8000cd2:	464b      	mov	r3, r9
 8000cd4:	d354      	bcc.n	8000d80 <__udivmoddi4+0x298>
 8000cd6:	d051      	beq.n	8000d7c <__udivmoddi4+0x294>
 8000cd8:	2e00      	cmp	r6, #0
 8000cda:	d069      	beq.n	8000db0 <__udivmoddi4+0x2c8>
 8000cdc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ce0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ce4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ce8:	40fd      	lsrs	r5, r7
 8000cea:	40fc      	lsrs	r4, r7
 8000cec:	ea4c 0505 	orr.w	r5, ip, r5
 8000cf0:	e9c6 5400 	strd	r5, r4, [r6]
 8000cf4:	2700      	movs	r7, #0
 8000cf6:	e747      	b.n	8000b88 <__udivmoddi4+0xa0>
 8000cf8:	f1c2 0320 	rsb	r3, r2, #32
 8000cfc:	fa20 f703 	lsr.w	r7, r0, r3
 8000d00:	4095      	lsls	r5, r2
 8000d02:	fa01 f002 	lsl.w	r0, r1, r2
 8000d06:	fa21 f303 	lsr.w	r3, r1, r3
 8000d0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d0e:	4338      	orrs	r0, r7
 8000d10:	0c01      	lsrs	r1, r0, #16
 8000d12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d16:	fa1f f885 	uxth.w	r8, r5
 8000d1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d22:	fb07 f308 	mul.w	r3, r7, r8
 8000d26:	428b      	cmp	r3, r1
 8000d28:	fa04 f402 	lsl.w	r4, r4, r2
 8000d2c:	d907      	bls.n	8000d3e <__udivmoddi4+0x256>
 8000d2e:	1869      	adds	r1, r5, r1
 8000d30:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000d34:	d22f      	bcs.n	8000d96 <__udivmoddi4+0x2ae>
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d92d      	bls.n	8000d96 <__udivmoddi4+0x2ae>
 8000d3a:	3f02      	subs	r7, #2
 8000d3c:	4429      	add	r1, r5
 8000d3e:	1acb      	subs	r3, r1, r3
 8000d40:	b281      	uxth	r1, r0
 8000d42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d4e:	fb00 f308 	mul.w	r3, r0, r8
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d907      	bls.n	8000d66 <__udivmoddi4+0x27e>
 8000d56:	1869      	adds	r1, r5, r1
 8000d58:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d5c:	d217      	bcs.n	8000d8e <__udivmoddi4+0x2a6>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d915      	bls.n	8000d8e <__udivmoddi4+0x2a6>
 8000d62:	3802      	subs	r0, #2
 8000d64:	4429      	add	r1, r5
 8000d66:	1ac9      	subs	r1, r1, r3
 8000d68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d6c:	e73b      	b.n	8000be6 <__udivmoddi4+0xfe>
 8000d6e:	4637      	mov	r7, r6
 8000d70:	4630      	mov	r0, r6
 8000d72:	e709      	b.n	8000b88 <__udivmoddi4+0xa0>
 8000d74:	4607      	mov	r7, r0
 8000d76:	e6e7      	b.n	8000b48 <__udivmoddi4+0x60>
 8000d78:	4618      	mov	r0, r3
 8000d7a:	e6fb      	b.n	8000b74 <__udivmoddi4+0x8c>
 8000d7c:	4541      	cmp	r1, r8
 8000d7e:	d2ab      	bcs.n	8000cd8 <__udivmoddi4+0x1f0>
 8000d80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d84:	eb69 020e 	sbc.w	r2, r9, lr
 8000d88:	3801      	subs	r0, #1
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	e7a4      	b.n	8000cd8 <__udivmoddi4+0x1f0>
 8000d8e:	4660      	mov	r0, ip
 8000d90:	e7e9      	b.n	8000d66 <__udivmoddi4+0x27e>
 8000d92:	4618      	mov	r0, r3
 8000d94:	e795      	b.n	8000cc2 <__udivmoddi4+0x1da>
 8000d96:	4667      	mov	r7, ip
 8000d98:	e7d1      	b.n	8000d3e <__udivmoddi4+0x256>
 8000d9a:	4681      	mov	r9, r0
 8000d9c:	e77c      	b.n	8000c98 <__udivmoddi4+0x1b0>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	442c      	add	r4, r5
 8000da2:	e747      	b.n	8000c34 <__udivmoddi4+0x14c>
 8000da4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000da8:	442b      	add	r3, r5
 8000daa:	e72f      	b.n	8000c0c <__udivmoddi4+0x124>
 8000dac:	4638      	mov	r0, r7
 8000dae:	e708      	b.n	8000bc2 <__udivmoddi4+0xda>
 8000db0:	4637      	mov	r7, r6
 8000db2:	e6e9      	b.n	8000b88 <__udivmoddi4+0xa0>

08000db4 <__aeabi_idiv0>:
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop

08000db8 <_ZN3I2CC1Ev>:
 *      Author: rishgoel
=======
08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_uldivmod>:
 8000b68:	b953      	cbnz	r3, 8000b80 <__aeabi_uldivmod+0x18>
 8000b6a:	b94a      	cbnz	r2, 8000b80 <__aeabi_uldivmod+0x18>
 8000b6c:	2900      	cmp	r1, #0
 8000b6e:	bf08      	it	eq
 8000b70:	2800      	cmpeq	r0, #0
 8000b72:	bf1c      	itt	ne
 8000b74:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b78:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b7c:	f000 b972 	b.w	8000e64 <__aeabi_idiv0>
 8000b80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b88:	f000 f806 	bl	8000b98 <__udivmoddi4>
 8000b8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b94:	b004      	add	sp, #16
 8000b96:	4770      	bx	lr

08000b98 <__udivmoddi4>:
 8000b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b9c:	9e08      	ldr	r6, [sp, #32]
 8000b9e:	4604      	mov	r4, r0
 8000ba0:	4688      	mov	r8, r1
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d14b      	bne.n	8000c3e <__udivmoddi4+0xa6>
 8000ba6:	428a      	cmp	r2, r1
 8000ba8:	4615      	mov	r5, r2
 8000baa:	d967      	bls.n	8000c7c <__udivmoddi4+0xe4>
 8000bac:	fab2 f282 	clz	r2, r2
 8000bb0:	b14a      	cbz	r2, 8000bc6 <__udivmoddi4+0x2e>
 8000bb2:	f1c2 0720 	rsb	r7, r2, #32
 8000bb6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bba:	fa20 f707 	lsr.w	r7, r0, r7
 8000bbe:	4095      	lsls	r5, r2
 8000bc0:	ea47 0803 	orr.w	r8, r7, r3
 8000bc4:	4094      	lsls	r4, r2
 8000bc6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bca:	0c23      	lsrs	r3, r4, #16
 8000bcc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bd0:	fa1f fc85 	uxth.w	ip, r5
 8000bd4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bd8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bdc:	fb07 f10c 	mul.w	r1, r7, ip
 8000be0:	4299      	cmp	r1, r3
 8000be2:	d909      	bls.n	8000bf8 <__udivmoddi4+0x60>
 8000be4:	18eb      	adds	r3, r5, r3
 8000be6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000bea:	f080 811b 	bcs.w	8000e24 <__udivmoddi4+0x28c>
 8000bee:	4299      	cmp	r1, r3
 8000bf0:	f240 8118 	bls.w	8000e24 <__udivmoddi4+0x28c>
 8000bf4:	3f02      	subs	r7, #2
 8000bf6:	442b      	add	r3, r5
 8000bf8:	1a5b      	subs	r3, r3, r1
 8000bfa:	b2a4      	uxth	r4, r4
 8000bfc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c00:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c08:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c0c:	45a4      	cmp	ip, r4
 8000c0e:	d909      	bls.n	8000c24 <__udivmoddi4+0x8c>
 8000c10:	192c      	adds	r4, r5, r4
 8000c12:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c16:	f080 8107 	bcs.w	8000e28 <__udivmoddi4+0x290>
 8000c1a:	45a4      	cmp	ip, r4
 8000c1c:	f240 8104 	bls.w	8000e28 <__udivmoddi4+0x290>
 8000c20:	3802      	subs	r0, #2
 8000c22:	442c      	add	r4, r5
 8000c24:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c28:	eba4 040c 	sub.w	r4, r4, ip
 8000c2c:	2700      	movs	r7, #0
 8000c2e:	b11e      	cbz	r6, 8000c38 <__udivmoddi4+0xa0>
 8000c30:	40d4      	lsrs	r4, r2
 8000c32:	2300      	movs	r3, #0
 8000c34:	e9c6 4300 	strd	r4, r3, [r6]
 8000c38:	4639      	mov	r1, r7
 8000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d909      	bls.n	8000c56 <__udivmoddi4+0xbe>
 8000c42:	2e00      	cmp	r6, #0
 8000c44:	f000 80eb 	beq.w	8000e1e <__udivmoddi4+0x286>
 8000c48:	2700      	movs	r7, #0
 8000c4a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c4e:	4638      	mov	r0, r7
 8000c50:	4639      	mov	r1, r7
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	fab3 f783 	clz	r7, r3
 8000c5a:	2f00      	cmp	r7, #0
 8000c5c:	d147      	bne.n	8000cee <__udivmoddi4+0x156>
 8000c5e:	428b      	cmp	r3, r1
 8000c60:	d302      	bcc.n	8000c68 <__udivmoddi4+0xd0>
 8000c62:	4282      	cmp	r2, r0
 8000c64:	f200 80fa 	bhi.w	8000e5c <__udivmoddi4+0x2c4>
 8000c68:	1a84      	subs	r4, r0, r2
 8000c6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c6e:	2001      	movs	r0, #1
 8000c70:	4698      	mov	r8, r3
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d0e0      	beq.n	8000c38 <__udivmoddi4+0xa0>
 8000c76:	e9c6 4800 	strd	r4, r8, [r6]
 8000c7a:	e7dd      	b.n	8000c38 <__udivmoddi4+0xa0>
 8000c7c:	b902      	cbnz	r2, 8000c80 <__udivmoddi4+0xe8>
 8000c7e:	deff      	udf	#255	; 0xff
 8000c80:	fab2 f282 	clz	r2, r2
 8000c84:	2a00      	cmp	r2, #0
 8000c86:	f040 808f 	bne.w	8000da8 <__udivmoddi4+0x210>
 8000c8a:	1b49      	subs	r1, r1, r5
 8000c8c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c90:	fa1f f885 	uxth.w	r8, r5
 8000c94:	2701      	movs	r7, #1
 8000c96:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c9a:	0c23      	lsrs	r3, r4, #16
 8000c9c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ca0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ca8:	4299      	cmp	r1, r3
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0x124>
 8000cac:	18eb      	adds	r3, r5, r3
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0x122>
 8000cb4:	4299      	cmp	r1, r3
 8000cb6:	f200 80cd 	bhi.w	8000e54 <__udivmoddi4+0x2bc>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1a59      	subs	r1, r3, r1
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cc8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x14c>
 8000cd4:	192c      	adds	r4, r5, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x14a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80b6 	bhi.w	8000e4e <__udivmoddi4+0x2b6>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e79f      	b.n	8000c2e <__udivmoddi4+0x96>
 8000cee:	f1c7 0c20 	rsb	ip, r7, #32
 8000cf2:	40bb      	lsls	r3, r7
 8000cf4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cf8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cfc:	fa01 f407 	lsl.w	r4, r1, r7
 8000d00:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d04:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d08:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d0c:	4325      	orrs	r5, r4
 8000d0e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d12:	0c2c      	lsrs	r4, r5, #16
 8000d14:	fb08 3319 	mls	r3, r8, r9, r3
 8000d18:	fa1f fa8e 	uxth.w	sl, lr
 8000d1c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d20:	fb09 f40a 	mul.w	r4, r9, sl
 8000d24:	429c      	cmp	r4, r3
 8000d26:	fa02 f207 	lsl.w	r2, r2, r7
 8000d2a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d2e:	d90b      	bls.n	8000d48 <__udivmoddi4+0x1b0>
 8000d30:	eb1e 0303 	adds.w	r3, lr, r3
 8000d34:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d38:	f080 8087 	bcs.w	8000e4a <__udivmoddi4+0x2b2>
 8000d3c:	429c      	cmp	r4, r3
 8000d3e:	f240 8084 	bls.w	8000e4a <__udivmoddi4+0x2b2>
 8000d42:	f1a9 0902 	sub.w	r9, r9, #2
 8000d46:	4473      	add	r3, lr
 8000d48:	1b1b      	subs	r3, r3, r4
 8000d4a:	b2ad      	uxth	r5, r5
 8000d4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d50:	fb08 3310 	mls	r3, r8, r0, r3
 8000d54:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d58:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d5c:	45a2      	cmp	sl, r4
 8000d5e:	d908      	bls.n	8000d72 <__udivmoddi4+0x1da>
 8000d60:	eb1e 0404 	adds.w	r4, lr, r4
 8000d64:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d68:	d26b      	bcs.n	8000e42 <__udivmoddi4+0x2aa>
 8000d6a:	45a2      	cmp	sl, r4
 8000d6c:	d969      	bls.n	8000e42 <__udivmoddi4+0x2aa>
 8000d6e:	3802      	subs	r0, #2
 8000d70:	4474      	add	r4, lr
 8000d72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d76:	fba0 8902 	umull	r8, r9, r0, r2
 8000d7a:	eba4 040a 	sub.w	r4, r4, sl
 8000d7e:	454c      	cmp	r4, r9
 8000d80:	46c2      	mov	sl, r8
 8000d82:	464b      	mov	r3, r9
 8000d84:	d354      	bcc.n	8000e30 <__udivmoddi4+0x298>
 8000d86:	d051      	beq.n	8000e2c <__udivmoddi4+0x294>
 8000d88:	2e00      	cmp	r6, #0
 8000d8a:	d069      	beq.n	8000e60 <__udivmoddi4+0x2c8>
 8000d8c:	ebb1 050a 	subs.w	r5, r1, sl
 8000d90:	eb64 0403 	sbc.w	r4, r4, r3
 8000d94:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d98:	40fd      	lsrs	r5, r7
 8000d9a:	40fc      	lsrs	r4, r7
 8000d9c:	ea4c 0505 	orr.w	r5, ip, r5
 8000da0:	e9c6 5400 	strd	r5, r4, [r6]
 8000da4:	2700      	movs	r7, #0
 8000da6:	e747      	b.n	8000c38 <__udivmoddi4+0xa0>
 8000da8:	f1c2 0320 	rsb	r3, r2, #32
 8000dac:	fa20 f703 	lsr.w	r7, r0, r3
 8000db0:	4095      	lsls	r5, r2
 8000db2:	fa01 f002 	lsl.w	r0, r1, r2
 8000db6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dbe:	4338      	orrs	r0, r7
 8000dc0:	0c01      	lsrs	r1, r0, #16
 8000dc2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dc6:	fa1f f885 	uxth.w	r8, r5
 8000dca:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dce:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd2:	fb07 f308 	mul.w	r3, r7, r8
 8000dd6:	428b      	cmp	r3, r1
 8000dd8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ddc:	d907      	bls.n	8000dee <__udivmoddi4+0x256>
 8000dde:	1869      	adds	r1, r5, r1
 8000de0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000de4:	d22f      	bcs.n	8000e46 <__udivmoddi4+0x2ae>
 8000de6:	428b      	cmp	r3, r1
 8000de8:	d92d      	bls.n	8000e46 <__udivmoddi4+0x2ae>
 8000dea:	3f02      	subs	r7, #2
 8000dec:	4429      	add	r1, r5
 8000dee:	1acb      	subs	r3, r1, r3
 8000df0:	b281      	uxth	r1, r0
 8000df2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000df6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dfa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dfe:	fb00 f308 	mul.w	r3, r0, r8
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d907      	bls.n	8000e16 <__udivmoddi4+0x27e>
 8000e06:	1869      	adds	r1, r5, r1
 8000e08:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e0c:	d217      	bcs.n	8000e3e <__udivmoddi4+0x2a6>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d915      	bls.n	8000e3e <__udivmoddi4+0x2a6>
 8000e12:	3802      	subs	r0, #2
 8000e14:	4429      	add	r1, r5
 8000e16:	1ac9      	subs	r1, r1, r3
 8000e18:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e1c:	e73b      	b.n	8000c96 <__udivmoddi4+0xfe>
 8000e1e:	4637      	mov	r7, r6
 8000e20:	4630      	mov	r0, r6
 8000e22:	e709      	b.n	8000c38 <__udivmoddi4+0xa0>
 8000e24:	4607      	mov	r7, r0
 8000e26:	e6e7      	b.n	8000bf8 <__udivmoddi4+0x60>
 8000e28:	4618      	mov	r0, r3
 8000e2a:	e6fb      	b.n	8000c24 <__udivmoddi4+0x8c>
 8000e2c:	4541      	cmp	r1, r8
 8000e2e:	d2ab      	bcs.n	8000d88 <__udivmoddi4+0x1f0>
 8000e30:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e34:	eb69 020e 	sbc.w	r2, r9, lr
 8000e38:	3801      	subs	r0, #1
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	e7a4      	b.n	8000d88 <__udivmoddi4+0x1f0>
 8000e3e:	4660      	mov	r0, ip
 8000e40:	e7e9      	b.n	8000e16 <__udivmoddi4+0x27e>
 8000e42:	4618      	mov	r0, r3
 8000e44:	e795      	b.n	8000d72 <__udivmoddi4+0x1da>
 8000e46:	4667      	mov	r7, ip
 8000e48:	e7d1      	b.n	8000dee <__udivmoddi4+0x256>
 8000e4a:	4681      	mov	r9, r0
 8000e4c:	e77c      	b.n	8000d48 <__udivmoddi4+0x1b0>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	442c      	add	r4, r5
 8000e52:	e747      	b.n	8000ce4 <__udivmoddi4+0x14c>
 8000e54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e58:	442b      	add	r3, r5
 8000e5a:	e72f      	b.n	8000cbc <__udivmoddi4+0x124>
 8000e5c:	4638      	mov	r0, r7
 8000e5e:	e708      	b.n	8000c72 <__udivmoddi4+0xda>
 8000e60:	4637      	mov	r7, r6
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0xa0>

08000e64 <__aeabi_idiv0>:
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop

08000e68 <_ZN3IMUC1Ev>:
 *      Author: cy
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
 */

#include <I2C/I2C.h>

<<<<<<< HEAD
I2C::I2C() {
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	4a04      	ldr	r2, [pc, #16]	; (8000dd4 <_ZN3I2CC1Ev+0x1c>)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	080070d8 	.word	0x080070d8

08000dd8 <_ZN3I2CD1Ev>:

I2C::~I2C() {
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	4a04      	ldr	r2, [pc, #16]	; (8000df4 <_ZN3I2CD1Ev+0x1c>)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4618      	mov	r0, r3
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	080070d8 	.word	0x080070d8

08000df8 <_ZN3I2CD0Ev>:
I2C::~I2C() {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
}
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff ffe9 	bl	8000dd8 <_ZN3I2CD1Ev>
 8000e06:	210c      	movs	r1, #12
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f005 ff9f 	bl	8006d4c <_ZdlPvj>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4618      	mov	r0, r3
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <_ZN3I2C6write8Ehh>:

HAL_StatusTypeDef I2C::write8(uint8_t reg, uint8_t value) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af02      	add	r7, sp, #8
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	460b      	mov	r3, r1
 8000e22:	70fb      	strb	r3, [r7, #3]
 8000e24:	4613      	mov	r3, r2
 8000e26:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef ret;
	// Combine reg and value into a buffer
	uint8_t buffer[2];
	buffer[0] = reg;
 8000e28:	78fb      	ldrb	r3, [r7, #3]
 8000e2a:	733b      	strb	r3, [r7, #12]
	buffer[1] = value;
 8000e2c:	78bb      	ldrb	r3, [r7, #2]
 8000e2e:	737b      	strb	r3, [r7, #13]
	// Send buffer over
	ret = HAL_I2C_Master_Transmit(hi2c, addr << 1, buffer, 2, 2);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6858      	ldr	r0, [r3, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	7a1b      	ldrb	r3, [r3, #8]
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	b299      	uxth	r1, r3
 8000e3e:	f107 020c 	add.w	r2, r7, #12
 8000e42:	2302      	movs	r3, #2
 8000e44:	9300      	str	r3, [sp, #0]
 8000e46:	2302      	movs	r3, #2
 8000e48:	f001 fa38 	bl	80022bc <HAL_I2C_Master_Transmit>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	73fb      	strb	r3, [r7, #15]
	return ret;
 8000e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <_ZN3I2C6read16Eh>:
		return 0xFF;
	}
	return (int8_t)value;
}

int16_t I2C::read16(uint8_t reg) {
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b086      	sub	sp, #24
 8000e5e:	af02      	add	r7, sp, #8
 8000e60:	6078      	str	r0, [r7, #4]
 8000e62:	460b      	mov	r3, r1
 8000e64:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef ret;
	uint8_t buffer[2];
	// Tell sensor that we want to read from reg
	ret = HAL_I2C_Master_Transmit(hi2c, addr << 1, &reg, 1, I2C_TIMEOUT);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6858      	ldr	r0, [r3, #4]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	7a1b      	ldrb	r3, [r3, #8]
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	b299      	uxth	r1, r3
 8000e74:	1cfa      	adds	r2, r7, #3
 8000e76:	2302      	movs	r3, #2
 8000e78:	9300      	str	r3, [sp, #0]
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	f001 fa1e 	bl	80022bc <HAL_I2C_Master_Transmit>
 8000e80:	4603      	mov	r3, r0
 8000e82:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) {
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d002      	beq.n	8000e90 <_ZN3I2C6read16Eh+0x36>
		return 0xFFFF;
 8000e8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e8e:	e01e      	b.n	8000ece <_ZN3I2C6read16Eh+0x74>
	}
	// Read 1 byte from reg
	ret = HAL_I2C_Master_Receive(hi2c, addr << 1, buffer, 2, I2C_TIMEOUT);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6858      	ldr	r0, [r3, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	7a1b      	ldrb	r3, [r3, #8]
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	b299      	uxth	r1, r3
 8000e9e:	f107 0208 	add.w	r2, r7, #8
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	9300      	str	r3, [sp, #0]
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	f001 fb06 	bl	80024b8 <HAL_I2C_Master_Receive>
 8000eac:	4603      	mov	r3, r0
 8000eae:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) {
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d002      	beq.n	8000ebc <_ZN3I2C6read16Eh+0x62>
		return 0xFFFF;
 8000eb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000eba:	e008      	b.n	8000ece <_ZN3I2C6read16Eh+0x74>
	}
	// The LSB is always at the lower register address, so cast buffer[0] into 16 bits and shift it left by 8
	// And then OR with MSB to combine into 2 bytes
	int16_t value = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8000ebc:	7a7b      	ldrb	r3, [r7, #9]
 8000ebe:	021b      	lsls	r3, r3, #8
 8000ec0:	b21a      	sxth	r2, r3
 8000ec2:	7a3b      	ldrb	r3, [r7, #8]
 8000ec4:	b21b      	sxth	r3, r3
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	81bb      	strh	r3, [r7, #12]
	return value;
 8000eca:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <_ZN3I2C4initEP17I2C_HandleTypeDefh>:
class I2C {
public:
	I2C();
	virtual ~I2C();

	void init(I2C_HandleTypeDef* handle, uint8_t address)
 8000ed6:	b480      	push	{r7}
 8000ed8:	b085      	sub	sp, #20
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	60f8      	str	r0, [r7, #12]
 8000ede:	60b9      	str	r1, [r7, #8]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	71fb      	strb	r3, [r7, #7]
	{
		hi2c = handle;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	68ba      	ldr	r2, [r7, #8]
 8000ee8:	605a      	str	r2, [r3, #4]
		addr = address;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	79fa      	ldrb	r2, [r7, #7]
 8000eee:	721a      	strb	r2, [r3, #8]
	}
 8000ef0:	bf00      	nop
 8000ef2:	3714      	adds	r7, #20
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <_ZN3IMUC1Ev>:
 *      Author: cy
 */

#include <IMU/IMU.h>

IMU::IMU() {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	4a06      	ldr	r2, [pc, #24]	; (8000f20 <_ZN3IMUC1Ev+0x24>)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff ff52 	bl	8000db8 <_ZN3I2CC1Ev>
	// Auto-generated constructor stub
}
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4618      	mov	r0, r3
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	080070e8 	.word	0x080070e8

08000f24 <_ZN3IMUD1Ev>:

IMU::~IMU() {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	4a06      	ldr	r2, [pc, #24]	; (8000f48 <_ZN3IMUD1Ev+0x24>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	3304      	adds	r3, #4
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff ff4e 	bl	8000dd8 <_ZN3I2CD1Ev>
	// Auto-generated destructor stub
}
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	080070e8 	.word	0x080070e8

08000f4c <_ZN3IMUD0Ev>:
IMU::~IMU() {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
}
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f7ff ffe5 	bl	8000f24 <_ZN3IMUD1Ev>
 8000f5a:	2168      	movs	r1, #104	; 0x68
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f005 fef5 	bl	8006d4c <_ZdlPvj>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4618      	mov	r0, r3
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <_ZN3IMU13initializeIMUEP17I2C_HandleTypeDef>:

void IMU::initializeIMU(I2C_HandleTypeDef* handle) {
 8000f6c:	b590      	push	{r4, r7, lr}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
	i2c.init(handle, IMU_I2C_ADDR);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	3304      	adds	r3, #4
 8000f7a:	2228      	movs	r2, #40	; 0x28
 8000f7c:	6839      	ldr	r1, [r7, #0]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff ffa9 	bl	8000ed6 <_ZN3I2C4initEP17I2C_HandleTypeDefh>
	// Set mode to NDOF
	setMode(IMU_Mode::OPR_MODE_NDOF);
 8000f84:	210c      	movs	r1, #12
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f000 fa2e 	bl	80013e8 <_ZN3IMU7setModeENS_8IMU_ModeE>
	// Set acceleration samples to 0 and time step to 0
	accelTimeSteps = 0;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	661a      	str	r2, [r3, #96]	; 0x60
	accelerationSamples[0][0] = 0.0;
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	f04f 0300 	mov.w	r3, #0
 8000f98:	f04f 0400 	mov.w	r4, #0
 8000f9c:	e9c2 3406 	strd	r3, r4, [r2, #24]
	accelerationSamples[0][1] = 0.0;
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	f04f 0300 	mov.w	r3, #0
 8000fa6:	f04f 0400 	mov.w	r4, #0
 8000faa:	e9c2 3408 	strd	r3, r4, [r2, #32]
	accelerationSamples[1][0] = 0.0;
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	f04f 0300 	mov.w	r3, #0
 8000fb4:	f04f 0400 	mov.w	r4, #0
 8000fb8:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	accelerationSamples[1][1] = 0.0;
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	f04f 0300 	mov.w	r3, #0
 8000fc2:	f04f 0400 	mov.w	r4, #0
 8000fc6:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	accelerationSamples[2][0] = 0.0;
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	f04f 0300 	mov.w	r3, #0
 8000fd0:	f04f 0400 	mov.w	r4, #0
 8000fd4:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	accelerationSamples[2][1] = 0.0;
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	f04f 0300 	mov.w	r3, #0
 8000fde:	f04f 0400 	mov.w	r4, #0
 8000fe2:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	// Set Euler Angles units to degrees
	eulerAngleUnits = false;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	// Set Angular Rate units to Dps
	gyroscopeUnits = false;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	// Set Acceleration units to m/s^2
	totalAccelerationUnits = false;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	// Set Temperature units to C
	tempUnits = false;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2200      	movs	r2, #0
 8001002:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	// Set data output format to Windows format
	i2c.write8(Registers::BNO055_UNIT_SEL_ADDR, 0x00);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3304      	adds	r3, #4
 800100a:	2200      	movs	r2, #0
 800100c:	213b      	movs	r1, #59	; 0x3b
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff ff02 	bl	8000e18 <_ZN3I2C6write8Ehh>
	vTaskDelay(20);
 8001014:	2014      	movs	r0, #20
 8001016:	f004 f9f3 	bl	8005400 <vTaskDelay>
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	bd90      	pop	{r4, r7, pc}
	...

08001024 <_ZN3IMU14getOrientationENS_4AxesE>:

double IMU::getOrientation(Axes axis) {
 8001024:	b590      	push	{r4, r7, lr}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	460b      	mov	r3, r1
 800102e:	70fb      	strb	r3, [r7, #3]
	// Set register we need to read depending on the axis passed in
	uint8_t registerToRead = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	73fb      	strb	r3, [r7, #15]
	switch(axis) {
 8001034:	78fb      	ldrb	r3, [r7, #3]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d007      	beq.n	800104a <_ZN3IMU14getOrientationENS_4AxesE+0x26>
 800103a:	2b02      	cmp	r3, #2
 800103c:	d008      	beq.n	8001050 <_ZN3IMU14getOrientationENS_4AxesE+0x2c>
 800103e:	2b00      	cmp	r3, #0
 8001040:	d000      	beq.n	8001044 <_ZN3IMU14getOrientationENS_4AxesE+0x20>
=======
IMU::IMU() {
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	4a04      	ldr	r2, [pc, #16]	; (8000e84 <_ZN3IMUC1Ev+0x1c>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	601a      	str	r2, [r3, #0]
	// Auto-generated constructor stub
}
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	08007b60 	.word	0x08007b60

08000e88 <_ZN3IMUD1Ev>:

IMU::~IMU() {
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <_ZN3IMUD1Ev+0x1c>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	601a      	str	r2, [r3, #0]
	// Auto-generated destructor stub
}
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	08007b60 	.word	0x08007b60

08000ea8 <_ZN3IMUD0Ev>:
IMU::~IMU() {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
}
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f7ff ffe9 	bl	8000e88 <_ZN3IMUD1Ev>
 8000eb6:	2160      	movs	r1, #96	; 0x60
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f006 f8cf 	bl	800705c <_ZdlPvj>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <_ZN3IMU13initializeIMUEP17I2C_HandleTypeDef>:

void IMU::initializeIMU(I2C_HandleTypeDef* handle) {
 8000ec8:	b590      	push	{r4, r7, lr}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
	hi2c = handle;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	683a      	ldr	r2, [r7, #0]
 8000ed6:	605a      	str	r2, [r3, #4]
	// Set mode to NDOF
	setMode(IMU_Mode::OPR_MODE_NDOF);
 8000ed8:	210c      	movs	r1, #12
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f000 fa28 	bl	8001330 <_ZN3IMU7setModeENS_8IMU_ModeE>
	// Set acceleration samples to 0 and time step to 0
	accelTimeSteps = 0;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	659a      	str	r2, [r3, #88]	; 0x58
	accelerationSamples[0][0] = 0.0;
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	f04f 0400 	mov.w	r4, #0
 8000ef0:	e9c2 3404 	strd	r3, r4, [r2, #16]
	accelerationSamples[0][1] = 0.0;
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	f04f 0300 	mov.w	r3, #0
 8000efa:	f04f 0400 	mov.w	r4, #0
 8000efe:	e9c2 3406 	strd	r3, r4, [r2, #24]
	accelerationSamples[1][0] = 0.0;
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	f04f 0300 	mov.w	r3, #0
 8000f08:	f04f 0400 	mov.w	r4, #0
 8000f0c:	e9c2 3408 	strd	r3, r4, [r2, #32]
	accelerationSamples[1][1] = 0.0;
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	f04f 0300 	mov.w	r3, #0
 8000f16:	f04f 0400 	mov.w	r4, #0
 8000f1a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	accelerationSamples[2][0] = 0.0;
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	f04f 0300 	mov.w	r3, #0
 8000f24:	f04f 0400 	mov.w	r4, #0
 8000f28:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	accelerationSamples[2][1] = 0.0;
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	f04f 0300 	mov.w	r3, #0
 8000f32:	f04f 0400 	mov.w	r4, #0
 8000f36:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	// Set Euler Angles units to degrees
	eulerAngleUnits = false;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	// Set Angular Rate units to Dps
	gyroscopeUnits = false;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2200      	movs	r2, #0
 8000f46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	// Set Acceleration units to m/s^2
	totalAccelerationUnits = false;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	// Set Temperature units to C
	tempUnits = false;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	// Set data output format to Windows format
	write8(Registers::BNO055_UNIT_SEL_ADDR, 0x00);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	213b      	movs	r1, #59	; 0x3b
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f000 fa03 	bl	800136a <_ZN3IMU6write8Ehh>
	vTaskDelay(20);
 8000f64:	2014      	movs	r0, #20
 8000f66:	f004 fbd1 	bl	800570c <vTaskDelay>
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd90      	pop	{r4, r7, pc}
	...

08000f74 <_ZN3IMU14getOrientationENS_4AxesE>:

double IMU::getOrientation(Axes axis) {
 8000f74:	b590      	push	{r4, r7, lr}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	70fb      	strb	r3, [r7, #3]
	// Set register we need to read depending on the axis passed in
	uint8_t registerToRead = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	73fb      	strb	r3, [r7, #15]
	switch(axis) {
 8000f84:	78fb      	ldrb	r3, [r7, #3]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d007      	beq.n	8000f9a <_ZN3IMU14getOrientationENS_4AxesE+0x26>
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d008      	beq.n	8000fa0 <_ZN3IMU14getOrientationENS_4AxesE+0x2c>
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d000      	beq.n	8000f94 <_ZN3IMU14getOrientationENS_4AxesE+0x20>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		break;
	case Axes::z:
		registerToRead = Registers::BNO055_EULER_H_LSB_ADDR;
		break;
	default:
		break;
<<<<<<< HEAD
 8001042:	e008      	b.n	8001056 <_ZN3IMU14getOrientationENS_4AxesE+0x32>
		registerToRead = Registers::BNO055_EULER_P_LSB_ADDR;
 8001044:	231e      	movs	r3, #30
 8001046:	73fb      	strb	r3, [r7, #15]
		break;
 8001048:	e005      	b.n	8001056 <_ZN3IMU14getOrientationENS_4AxesE+0x32>
		registerToRead = Registers::BNO055_EULER_R_LSB_ADDR;
 800104a:	231c      	movs	r3, #28
 800104c:	73fb      	strb	r3, [r7, #15]
		break;
 800104e:	e002      	b.n	8001056 <_ZN3IMU14getOrientationENS_4AxesE+0x32>
		registerToRead = Registers::BNO055_EULER_H_LSB_ADDR;
 8001050:	231a      	movs	r3, #26
 8001052:	73fb      	strb	r3, [r7, #15]
		break;
 8001054:	bf00      	nop
	}

	// Read the data registers
	int16_t data = i2c.read16(registerToRead);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	3304      	adds	r3, #4
 800105a:	7bfa      	ldrb	r2, [r7, #15]
 800105c:	4611      	mov	r1, r2
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fefb 	bl	8000e5a <_ZN3I2C6read16Eh>
 8001064:	4603      	mov	r3, r0
 8001066:	81bb      	strh	r3, [r7, #12]
	// Section 3.6.5.4 of datasheet for conversion from LSBs to deg/rad
	return eulerAngleUnits ? (double)data / 900.0 : (double)data / 16.0;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800106e:	2b00      	cmp	r3, #0
 8001070:	d00c      	beq.n	800108c <_ZN3IMU14getOrientationENS_4AxesE+0x68>
 8001072:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fa04 	bl	8000484 <__aeabi_i2d>
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <_ZN3IMU14getOrientationENS_4AxesE+0x94>)
 8001082:	f7ff fb93 	bl	80007ac <__aeabi_ddiv>
 8001086:	4603      	mov	r3, r0
 8001088:	460c      	mov	r4, r1
 800108a:	e00b      	b.n	80010a4 <_ZN3IMU14getOrientationENS_4AxesE+0x80>
 800108c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff f9f7 	bl	8000484 <__aeabi_i2d>
 8001096:	f04f 0200 	mov.w	r2, #0
 800109a:	4b08      	ldr	r3, [pc, #32]	; (80010bc <_ZN3IMU14getOrientationENS_4AxesE+0x98>)
 800109c:	f7ff fb86 	bl	80007ac <__aeabi_ddiv>
 80010a0:	4603      	mov	r3, r0
 80010a2:	460c      	mov	r4, r1
 80010a4:	ec44 3b17 	vmov	d7, r3, r4
}
 80010a8:	eeb0 0a47 	vmov.f32	s0, s14
 80010ac:	eef0 0a67 	vmov.f32	s1, s15
 80010b0:	3714      	adds	r7, #20
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd90      	pop	{r4, r7, pc}
 80010b6:	bf00      	nop
 80010b8:	408c2000 	.word	0x408c2000
 80010bc:	40300000 	.word	0x40300000

080010c0 <_ZN3IMU21getLinearAccelerationENS_4AxesE>:
	int16_t data = i2c.read16(registerToRead);
=======
 8000f92:	e008      	b.n	8000fa6 <_ZN3IMU14getOrientationENS_4AxesE+0x32>
		registerToRead = Registers::BNO055_EULER_P_LSB_ADDR;
 8000f94:	231e      	movs	r3, #30
 8000f96:	73fb      	strb	r3, [r7, #15]
		break;
 8000f98:	e005      	b.n	8000fa6 <_ZN3IMU14getOrientationENS_4AxesE+0x32>
		registerToRead = Registers::BNO055_EULER_R_LSB_ADDR;
 8000f9a:	231c      	movs	r3, #28
 8000f9c:	73fb      	strb	r3, [r7, #15]
		break;
 8000f9e:	e002      	b.n	8000fa6 <_ZN3IMU14getOrientationENS_4AxesE+0x32>
		registerToRead = Registers::BNO055_EULER_H_LSB_ADDR;
 8000fa0:	231a      	movs	r3, #26
 8000fa2:	73fb      	strb	r3, [r7, #15]
		break;
 8000fa4:	bf00      	nop
	}

	// Read the data registers
	int16_t data = read16(registerToRead);
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f000 f9fa 	bl	80013a4 <_ZN3IMU6read16Eh>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	81bb      	strh	r3, [r7, #12]
	// Section 3.6.5.4 of datasheet for conversion from LSBs to deg/rad
	return eulerAngleUnits ? (double)data / 900.0 : (double)data / 16.0;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d00c      	beq.n	8000fd8 <_ZN3IMU14getOrientationENS_4AxesE+0x64>
 8000fbe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fab6 	bl	8000534 <__aeabi_i2d>
 8000fc8:	f04f 0200 	mov.w	r2, #0
 8000fcc:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <_ZN3IMU14getOrientationENS_4AxesE+0x90>)
 8000fce:	f7ff fc45 	bl	800085c <__aeabi_ddiv>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	460c      	mov	r4, r1
 8000fd6:	e00b      	b.n	8000ff0 <_ZN3IMU14getOrientationENS_4AxesE+0x7c>
 8000fd8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff faa9 	bl	8000534 <__aeabi_i2d>
 8000fe2:	f04f 0200 	mov.w	r2, #0
 8000fe6:	4b08      	ldr	r3, [pc, #32]	; (8001008 <_ZN3IMU14getOrientationENS_4AxesE+0x94>)
 8000fe8:	f7ff fc38 	bl	800085c <__aeabi_ddiv>
 8000fec:	4603      	mov	r3, r0
 8000fee:	460c      	mov	r4, r1
 8000ff0:	ec44 3b17 	vmov	d7, r3, r4
}
 8000ff4:	eeb0 0a47 	vmov.f32	s0, s14
 8000ff8:	eef0 0a67 	vmov.f32	s1, s15
 8000ffc:	3714      	adds	r7, #20
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd90      	pop	{r4, r7, pc}
 8001002:	bf00      	nop
 8001004:	408c2000 	.word	0x408c2000
 8001008:	40300000 	.word	0x40300000

0800100c <_ZN3IMU21getLinearAccelerationENS_4AxesE>:
	int16_t data = read16(registerToRead);
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	// Section 3.6.4.1 of datasheet for conversion from LSBs to m/s^2
	return totalAccelerationUnits ? (double)data : (double)data / 100.0;
}

double IMU::getLinearAcceleration(Axes axis) {
<<<<<<< HEAD
 80010c0:	b590      	push	{r4, r7, lr}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	460b      	mov	r3, r1
 80010ca:	70fb      	strb	r3, [r7, #3]
	// Set register we need to read depending on the axis passed in
	uint8_t registerToRead = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	73fb      	strb	r3, [r7, #15]
	switch(axis) {
 80010d0:	78fb      	ldrb	r3, [r7, #3]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d007      	beq.n	80010e6 <_ZN3IMU21getLinearAccelerationENS_4AxesE+0x26>
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d008      	beq.n	80010ec <_ZN3IMU21getLinearAccelerationENS_4AxesE+0x2c>
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d000      	beq.n	80010e0 <_ZN3IMU21getLinearAccelerationENS_4AxesE+0x20>
=======
 800100c:	b590      	push	{r4, r7, lr}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	460b      	mov	r3, r1
 8001016:	70fb      	strb	r3, [r7, #3]
	// Set register we need to read depending on the axis passed in
	uint8_t registerToRead = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	73fb      	strb	r3, [r7, #15]
	switch(axis) {
 800101c:	78fb      	ldrb	r3, [r7, #3]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d007      	beq.n	8001032 <_ZN3IMU21getLinearAccelerationENS_4AxesE+0x26>
 8001022:	2b02      	cmp	r3, #2
 8001024:	d008      	beq.n	8001038 <_ZN3IMU21getLinearAccelerationENS_4AxesE+0x2c>
 8001026:	2b00      	cmp	r3, #0
 8001028:	d000      	beq.n	800102c <_ZN3IMU21getLinearAccelerationENS_4AxesE+0x20>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		break;
	case Axes::z:
		registerToRead = Registers::BNO055_LINEAR_ACCEL_DATA_Z_LSB_ADDR;
		break;
	default:
		break;
<<<<<<< HEAD
 80010de:	e008      	b.n	80010f2 <_ZN3IMU21getLinearAccelerationENS_4AxesE+0x32>
		registerToRead = Registers::BNO055_LINEAR_ACCEL_DATA_X_LSB_ADDR;
 80010e0:	2328      	movs	r3, #40	; 0x28
 80010e2:	73fb      	strb	r3, [r7, #15]
		break;
 80010e4:	e005      	b.n	80010f2 <_ZN3IMU21getLinearAccelerationENS_4AxesE+0x32>
		registerToRead = Registers::BNO055_LINEAR_ACCEL_DATA_Y_LSB_ADDR;
 80010e6:	232a      	movs	r3, #42	; 0x2a
 80010e8:	73fb      	strb	r3, [r7, #15]
		break;
 80010ea:	e002      	b.n	80010f2 <_ZN3IMU21getLinearAccelerationENS_4AxesE+0x32>
		registerToRead = Registers::BNO055_LINEAR_ACCEL_DATA_Z_LSB_ADDR;
 80010ec:	232c      	movs	r3, #44	; 0x2c
 80010ee:	73fb      	strb	r3, [r7, #15]
		break;
 80010f0:	bf00      	nop
	}

	// Read the data registers
	int16_t data = i2c.read16(registerToRead);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	3304      	adds	r3, #4
 80010f6:	7bfa      	ldrb	r2, [r7, #15]
 80010f8:	4611      	mov	r1, r2
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fead 	bl	8000e5a <_ZN3I2C6read16Eh>
 8001100:	4603      	mov	r3, r0
 8001102:	81bb      	strh	r3, [r7, #12]
	// Section 3.6.5.6 of datasheet for conversion from LSBs to m/s^2
	return (double)data / 100.0;
 8001104:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff f9bb 	bl	8000484 <__aeabi_i2d>
 800110e:	f04f 0200 	mov.w	r2, #0
 8001112:	4b07      	ldr	r3, [pc, #28]	; (8001130 <_ZN3IMU21getLinearAccelerationENS_4AxesE+0x70>)
 8001114:	f7ff fb4a 	bl	80007ac <__aeabi_ddiv>
 8001118:	4603      	mov	r3, r0
 800111a:	460c      	mov	r4, r1
 800111c:	ec44 3b17 	vmov	d7, r3, r4
}
 8001120:	eeb0 0a47 	vmov.f32	s0, s14
 8001124:	eef0 0a67 	vmov.f32	s1, s15
 8001128:	3714      	adds	r7, #20
 800112a:	46bd      	mov	sp, r7
 800112c:	bd90      	pop	{r4, r7, pc}
 800112e:	bf00      	nop
 8001130:	40590000 	.word	0x40590000

08001134 <_ZN3IMU23storeLinearAccelerationEv>:

// Shifts elements in column 1 into column 0 and new readings into column 1
void IMU::storeLinearAcceleration() {
 8001134:	b590      	push	{r4, r7, lr}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
	accelerationSamples[0][0] = accelerationSamples[0][1];
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	e9c2 3406 	strd	r3, r4, [r2, #24]
	accelerationSamples[0][1] = getLinearAcceleration(Axes::x);
 8001148:	2100      	movs	r1, #0
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff ffb8 	bl	80010c0 <_ZN3IMU21getLinearAccelerationENS_4AxesE>
 8001150:	eeb0 7a40 	vmov.f32	s14, s0
 8001154:	eef0 7a60 	vmov.f32	s15, s1
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	ed83 7b08 	vstr	d7, [r3, #32]
	accelerationSamples[1][0] = accelerationSamples[1][1];
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	accelerationSamples[1][1] = getLinearAcceleration(Axes::y);
 800116a:	2101      	movs	r1, #1
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff ffa7 	bl	80010c0 <_ZN3IMU21getLinearAccelerationENS_4AxesE>
 8001172:	eeb0 7a40 	vmov.f32	s14, s0
 8001176:	eef0 7a60 	vmov.f32	s15, s1
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	accelerationSamples[2][0] = accelerationSamples[2][1];
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	accelerationSamples[2][1] = getLinearAcceleration(Axes::z);
 800118c:	2102      	movs	r1, #2
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f7ff ff96 	bl	80010c0 <_ZN3IMU21getLinearAccelerationENS_4AxesE>
 8001194:	eeb0 7a40 	vmov.f32	s14, s0
 8001198:	eef0 7a60 	vmov.f32	s15, s1
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
	accelTimeSteps++;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011a6:	1c5a      	adds	r2, r3, #1
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	661a      	str	r2, [r3, #96]	; 0x60
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd90      	pop	{r4, r7, pc}

080011b4 <_ZN3IMU23calculateLinearVelocityEv>:

void IMU::calculateLinearVelocity() {
 80011b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
	// If no acceleration time steps taken, return to avoid divide by zero
	if(accelTimeSteps == 0) {
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	f000 80a6 	beq.w	8001314 <_ZN3IMU23calculateLinearVelocityEv+0x160>
		return;
	}
	velocity[0] += accelerationSamples[0][0] + accelerationSamples[0][1] * 0.5 * (accelTimeSteps * ACCELERATION_TIME_STEP / 1000.0);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80011da:	f04f 0200 	mov.w	r2, #0
 80011de:	4b50      	ldr	r3, [pc, #320]	; (8001320 <_ZN3IMU23calculateLinearVelocityEv+0x16c>)
 80011e0:	f7ff f9ba 	bl	8000558 <__aeabi_dmul>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4692      	mov	sl, r2
 80011ea:	469b      	mov	fp, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011f0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80011f4:	fb02 f303 	mul.w	r3, r2, r3
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff f943 	bl	8000484 <__aeabi_i2d>
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	4b48      	ldr	r3, [pc, #288]	; (8001324 <_ZN3IMU23calculateLinearVelocityEv+0x170>)
 8001204:	f7ff fad2 	bl	80007ac <__aeabi_ddiv>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	4650      	mov	r0, sl
 800120e:	4659      	mov	r1, fp
 8001210:	f7ff f9a2 	bl	8000558 <__aeabi_dmul>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4640      	mov	r0, r8
 800121a:	4649      	mov	r1, r9
 800121c:	f7fe ffe6 	bl	80001ec <__adddf3>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4620      	mov	r0, r4
 8001226:	4629      	mov	r1, r5
 8001228:	f7fe ffe0 	bl	80001ec <__adddf3>
 800122c:	4603      	mov	r3, r0
 800122e:	460c      	mov	r4, r1
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	velocity[1] += accelerationSamples[1][0] + accelerationSamples[1][1] * 0.5 * (accelTimeSteps * ACCELERATION_TIME_STEP / 1000.0);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	e9d3 890a 	ldrd	r8, r9, [r3, #40]	; 0x28
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	4b34      	ldr	r3, [pc, #208]	; (8001320 <_ZN3IMU23calculateLinearVelocityEv+0x16c>)
 800124e:	f7ff f983 	bl	8000558 <__aeabi_dmul>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4692      	mov	sl, r2
 8001258:	469b      	mov	fp, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800125e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001262:	fb02 f303 	mul.w	r3, r2, r3
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff f90c 	bl	8000484 <__aeabi_i2d>
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	4b2c      	ldr	r3, [pc, #176]	; (8001324 <_ZN3IMU23calculateLinearVelocityEv+0x170>)
 8001272:	f7ff fa9b 	bl	80007ac <__aeabi_ddiv>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4650      	mov	r0, sl
 800127c:	4659      	mov	r1, fp
 800127e:	f7ff f96b 	bl	8000558 <__aeabi_dmul>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	4640      	mov	r0, r8
 8001288:	4649      	mov	r1, r9
 800128a:	f7fe ffaf 	bl	80001ec <__adddf3>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	4620      	mov	r0, r4
 8001294:	4629      	mov	r1, r5
 8001296:	f7fe ffa9 	bl	80001ec <__adddf3>
 800129a:	4603      	mov	r3, r0
 800129c:	460c      	mov	r4, r1
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	velocity[2] += accelerationSamples[2][0] + accelerationSamples[2][1] * 0.5 * (accelTimeSteps * ACCELERATION_TIME_STEP / 1000.0);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	e9d3 890e 	ldrd	r8, r9, [r3, #56]	; 0x38
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80012b6:	f04f 0200 	mov.w	r2, #0
 80012ba:	4b19      	ldr	r3, [pc, #100]	; (8001320 <_ZN3IMU23calculateLinearVelocityEv+0x16c>)
 80012bc:	f7ff f94c 	bl	8000558 <__aeabi_dmul>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4692      	mov	sl, r2
 80012c6:	469b      	mov	fp, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012cc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80012d0:	fb02 f303 	mul.w	r3, r2, r3
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff f8d5 	bl	8000484 <__aeabi_i2d>
 80012da:	f04f 0200 	mov.w	r2, #0
 80012de:	4b11      	ldr	r3, [pc, #68]	; (8001324 <_ZN3IMU23calculateLinearVelocityEv+0x170>)
 80012e0:	f7ff fa64 	bl	80007ac <__aeabi_ddiv>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	4650      	mov	r0, sl
 80012ea:	4659      	mov	r1, fp
 80012ec:	f7ff f934 	bl	8000558 <__aeabi_dmul>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4640      	mov	r0, r8
 80012f6:	4649      	mov	r1, r9
 80012f8:	f7fe ff78 	bl	80001ec <__adddf3>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	4620      	mov	r0, r4
 8001302:	4629      	mov	r1, r5
 8001304:	f7fe ff72 	bl	80001ec <__adddf3>
 8001308:	4603      	mov	r3, r0
 800130a:	460c      	mov	r4, r1
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
 8001312:	e000      	b.n	8001316 <_ZN3IMU23calculateLinearVelocityEv+0x162>
		return;
 8001314:	bf00      	nop
}
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800131e:	bf00      	nop
 8001320:	3fe00000 	.word	0x3fe00000
 8001324:	408f4000 	.word	0x408f4000

08001328 <_ZN3IMU17getLinearVelocityENS_4AxesE>:

double IMU::getLinearVelocity(Axes axis) {
 8001328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	70fb      	strb	r3, [r7, #3]
	switch(axis) {
 8001334:	78fb      	ldrb	r3, [r7, #3]
 8001336:	2b03      	cmp	r3, #3
 8001338:	d845      	bhi.n	80013c6 <_ZN3IMU17getLinearVelocityENS_4AxesE+0x9e>
 800133a:	a201      	add	r2, pc, #4	; (adr r2, 8001340 <_ZN3IMU17getLinearVelocityENS_4AxesE+0x18>)
 800133c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001340:	08001351 	.word	0x08001351
 8001344:	08001359 	.word	0x08001359
 8001348:	08001361 	.word	0x08001361
 800134c:	08001369 	.word	0x08001369
	case Axes::x:
		return velocity[0];
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8001356:	e039      	b.n	80013cc <_ZN3IMU17getLinearVelocityENS_4AxesE+0xa4>
		break;
	case Axes::y:
		return velocity[1];
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 800135e:	e035      	b.n	80013cc <_ZN3IMU17getLinearVelocityENS_4AxesE+0xa4>
		break;
	case Axes::z:
		return velocity[2];
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8001366:	e031      	b.n	80013cc <_ZN3IMU17getLinearVelocityENS_4AxesE+0xa4>
		break;
	case Axes::xy:
		return sqrt(velocity[0] * velocity[0] + velocity[1] * velocity[1]);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	e9d3 3412 	ldrd	r3, r4, [r3, #72]	; 0x48
 8001374:	461a      	mov	r2, r3
 8001376:	4623      	mov	r3, r4
 8001378:	f7ff f8ee 	bl	8000558 <__aeabi_dmul>
 800137c:	4603      	mov	r3, r0
 800137e:	460c      	mov	r4, r1
 8001380:	461d      	mov	r5, r3
 8001382:	4626      	mov	r6, r4
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8001390:	461a      	mov	r2, r3
 8001392:	4623      	mov	r3, r4
 8001394:	f7ff f8e0 	bl	8000558 <__aeabi_dmul>
 8001398:	4603      	mov	r3, r0
 800139a:	460c      	mov	r4, r1
 800139c:	461a      	mov	r2, r3
 800139e:	4623      	mov	r3, r4
 80013a0:	4628      	mov	r0, r5
 80013a2:	4631      	mov	r1, r6
 80013a4:	f7fe ff22 	bl	80001ec <__adddf3>
 80013a8:	4603      	mov	r3, r0
 80013aa:	460c      	mov	r4, r1
 80013ac:	ec44 3b17 	vmov	d7, r3, r4
 80013b0:	eeb0 0a47 	vmov.f32	s0, s14
 80013b4:	eef0 0a67 	vmov.f32	s1, s15
 80013b8:	f005 fccc 	bl	8006d54 <sqrt>
 80013bc:	eeb0 7a40 	vmov.f32	s14, s0
 80013c0:	eef0 7a60 	vmov.f32	s15, s1
 80013c4:	e002      	b.n	80013cc <_ZN3IMU17getLinearVelocityENS_4AxesE+0xa4>
		break;
	default:
		break;
 80013c6:	bf00      	nop
	}
	return 0.0;
 80013c8:	ed9f 7b05 	vldr	d7, [pc, #20]	; 80013e0 <_ZN3IMU17getLinearVelocityENS_4AxesE+0xb8>
}
 80013cc:	eeb0 0a47 	vmov.f32	s0, s14
 80013d0:	eef0 0a67 	vmov.f32	s1, s15
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013da:	bf00      	nop
 80013dc:	f3af 8000 	nop.w
	...

080013e8 <_ZN3IMU7setModeENS_8IMU_ModeE>:

void IMU::setMode(IMU_Mode mode) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	70fb      	strb	r3, [r7, #3]
	i2c.write8(Registers::BNO055_OPR_MODE_ADDR, mode);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3304      	adds	r3, #4
 80013f8:	78fa      	ldrb	r2, [r7, #3]
 80013fa:	213d      	movs	r1, #61	; 0x3d
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff fd0b 	bl	8000e18 <_ZN3I2C6write8Ehh>
	currentMode = mode;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	78fa      	ldrb	r2, [r7, #3]
 8001406:	741a      	strb	r2, [r3, #16]
	// Time required to switch between operating modes (Datasheet Table 3-6)
	mode == IMU_Mode::OPR_MODE_CONFIGMODE ? vTaskDelay(pdMS_TO_TICKS(19)) : vTaskDelay(pdMS_TO_TICKS(7));
 8001408:	78fb      	ldrb	r3, [r7, #3]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d103      	bne.n	8001416 <_ZN3IMU7setModeENS_8IMU_ModeE+0x2e>
 800140e:	2013      	movs	r0, #19
 8001410:	f003 fff6 	bl	8005400 <vTaskDelay>
	return;
 8001414:	e003      	b.n	800141e <_ZN3IMU7setModeENS_8IMU_ModeE+0x36>
	mode == IMU_Mode::OPR_MODE_CONFIGMODE ? vTaskDelay(pdMS_TO_TICKS(19)) : vTaskDelay(pdMS_TO_TICKS(7));
 8001416:	2007      	movs	r0, #7
 8001418:	f003 fff2 	bl	8005400 <vTaskDelay>
	return;
 800141c:	bf00      	nop
}
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <_Z11CollectDataPv>:
=======
 800102a:	e008      	b.n	800103e <_ZN3IMU21getLinearAccelerationENS_4AxesE+0x32>
		registerToRead = Registers::BNO055_LINEAR_ACCEL_DATA_X_LSB_ADDR;
 800102c:	2328      	movs	r3, #40	; 0x28
 800102e:	73fb      	strb	r3, [r7, #15]
		break;
 8001030:	e005      	b.n	800103e <_ZN3IMU21getLinearAccelerationENS_4AxesE+0x32>
		registerToRead = Registers::BNO055_LINEAR_ACCEL_DATA_Y_LSB_ADDR;
 8001032:	232a      	movs	r3, #42	; 0x2a
 8001034:	73fb      	strb	r3, [r7, #15]
		break;
 8001036:	e002      	b.n	800103e <_ZN3IMU21getLinearAccelerationENS_4AxesE+0x32>
		registerToRead = Registers::BNO055_LINEAR_ACCEL_DATA_Z_LSB_ADDR;
 8001038:	232c      	movs	r3, #44	; 0x2c
 800103a:	73fb      	strb	r3, [r7, #15]
		break;
 800103c:	bf00      	nop
	}

	// Read the data registers
	int16_t data = read16(registerToRead);
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	4619      	mov	r1, r3
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f000 f9ae 	bl	80013a4 <_ZN3IMU6read16Eh>
 8001048:	4603      	mov	r3, r0
 800104a:	81bb      	strh	r3, [r7, #12]
	// Section 3.6.5.6 of datasheet for conversion from LSBs to m/s^2
	return (double)data / 100.0;
 800104c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fa6f 	bl	8000534 <__aeabi_i2d>
 8001056:	f04f 0200 	mov.w	r2, #0
 800105a:	4b07      	ldr	r3, [pc, #28]	; (8001078 <_ZN3IMU21getLinearAccelerationENS_4AxesE+0x6c>)
 800105c:	f7ff fbfe 	bl	800085c <__aeabi_ddiv>
 8001060:	4603      	mov	r3, r0
 8001062:	460c      	mov	r4, r1
 8001064:	ec44 3b17 	vmov	d7, r3, r4
}
 8001068:	eeb0 0a47 	vmov.f32	s0, s14
 800106c:	eef0 0a67 	vmov.f32	s1, s15
 8001070:	3714      	adds	r7, #20
 8001072:	46bd      	mov	sp, r7
 8001074:	bd90      	pop	{r4, r7, pc}
 8001076:	bf00      	nop
 8001078:	40590000 	.word	0x40590000

0800107c <_ZN3IMU23storeLinearAccelerationEv>:

// Shifts elements in column 1 into column 0 and new readings into column 1
void IMU::storeLinearAcceleration() {
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
	accelerationSamples[0][0] = accelerationSamples[0][1];
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	e9c2 3404 	strd	r3, r4, [r2, #16]
	accelerationSamples[0][1] = getLinearAcceleration(Axes::x);
 8001090:	2100      	movs	r1, #0
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff ffba 	bl	800100c <_ZN3IMU21getLinearAccelerationENS_4AxesE>
 8001098:	eeb0 7a40 	vmov.f32	s14, s0
 800109c:	eef0 7a60 	vmov.f32	s15, s1
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	ed83 7b06 	vstr	d7, [r3, #24]
	accelerationSamples[1][0] = accelerationSamples[1][1];
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	e9c2 3408 	strd	r3, r4, [r2, #32]
	accelerationSamples[1][1] = getLinearAcceleration(Axes::y);
 80010b2:	2101      	movs	r1, #1
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff ffa9 	bl	800100c <_ZN3IMU21getLinearAccelerationENS_4AxesE>
 80010ba:	eeb0 7a40 	vmov.f32	s14, s0
 80010be:	eef0 7a60 	vmov.f32	s15, s1
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	accelerationSamples[2][0] = accelerationSamples[2][1];
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	accelerationSamples[2][1] = getLinearAcceleration(Axes::z);
 80010d4:	2102      	movs	r1, #2
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff ff98 	bl	800100c <_ZN3IMU21getLinearAccelerationENS_4AxesE>
 80010dc:	eeb0 7a40 	vmov.f32	s14, s0
 80010e0:	eef0 7a60 	vmov.f32	s15, s1
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	accelTimeSteps++;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ee:	1c5a      	adds	r2, r3, #1
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	659a      	str	r2, [r3, #88]	; 0x58
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd90      	pop	{r4, r7, pc}

080010fc <_ZN3IMU23calculateLinearVelocityEv>:

void IMU::calculateLinearVelocity() {
 80010fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001100:	b082      	sub	sp, #8
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
	// If no acceleration time steps taken, return to avoid divide by zero
	if(accelTimeSteps == 0) {
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110a:	2b00      	cmp	r3, #0
 800110c:	f000 80a6 	beq.w	800125c <_ZN3IMU23calculateLinearVelocityEv+0x160>
		return;
	}
	velocity[0] += accelerationSamples[0][0] + accelerationSamples[0][1] * 0.5 * (accelTimeSteps * ACCELERATION_TIME_STEP / 1000.0);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001122:	f04f 0200 	mov.w	r2, #0
 8001126:	4b50      	ldr	r3, [pc, #320]	; (8001268 <_ZN3IMU23calculateLinearVelocityEv+0x16c>)
 8001128:	f7ff fa6e 	bl	8000608 <__aeabi_dmul>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	4692      	mov	sl, r2
 8001132:	469b      	mov	fp, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001138:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800113c:	fb02 f303 	mul.w	r3, r2, r3
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff f9f7 	bl	8000534 <__aeabi_i2d>
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	4b48      	ldr	r3, [pc, #288]	; (800126c <_ZN3IMU23calculateLinearVelocityEv+0x170>)
 800114c:	f7ff fb86 	bl	800085c <__aeabi_ddiv>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4650      	mov	r0, sl
 8001156:	4659      	mov	r1, fp
 8001158:	f7ff fa56 	bl	8000608 <__aeabi_dmul>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4640      	mov	r0, r8
 8001162:	4649      	mov	r1, r9
 8001164:	f7ff f89a 	bl	800029c <__adddf3>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	4620      	mov	r0, r4
 800116e:	4629      	mov	r1, r5
 8001170:	f7ff f894 	bl	800029c <__adddf3>
 8001174:	4603      	mov	r3, r0
 8001176:	460c      	mov	r4, r1
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	velocity[1] += accelerationSamples[1][0] + accelerationSamples[1][1] * 0.5 * (accelTimeSteps * ACCELERATION_TIME_STEP / 1000.0);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001190:	f04f 0200 	mov.w	r2, #0
 8001194:	4b34      	ldr	r3, [pc, #208]	; (8001268 <_ZN3IMU23calculateLinearVelocityEv+0x16c>)
 8001196:	f7ff fa37 	bl	8000608 <__aeabi_dmul>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	4692      	mov	sl, r2
 80011a0:	469b      	mov	fp, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80011aa:	fb02 f303 	mul.w	r3, r2, r3
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff f9c0 	bl	8000534 <__aeabi_i2d>
 80011b4:	f04f 0200 	mov.w	r2, #0
 80011b8:	4b2c      	ldr	r3, [pc, #176]	; (800126c <_ZN3IMU23calculateLinearVelocityEv+0x170>)
 80011ba:	f7ff fb4f 	bl	800085c <__aeabi_ddiv>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	4650      	mov	r0, sl
 80011c4:	4659      	mov	r1, fp
 80011c6:	f7ff fa1f 	bl	8000608 <__aeabi_dmul>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	4640      	mov	r0, r8
 80011d0:	4649      	mov	r1, r9
 80011d2:	f7ff f863 	bl	800029c <__adddf3>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	4620      	mov	r0, r4
 80011dc:	4629      	mov	r1, r5
 80011de:	f7ff f85d 	bl	800029c <__adddf3>
 80011e2:	4603      	mov	r3, r0
 80011e4:	460c      	mov	r4, r1
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	velocity[2] += accelerationSamples[2][0] + accelerationSamples[2][1] * 0.5 * (accelTimeSteps * ACCELERATION_TIME_STEP / 1000.0);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	e9d3 890c 	ldrd	r8, r9, [r3, #48]	; 0x30
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	4b19      	ldr	r3, [pc, #100]	; (8001268 <_ZN3IMU23calculateLinearVelocityEv+0x16c>)
 8001204:	f7ff fa00 	bl	8000608 <__aeabi_dmul>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	4692      	mov	sl, r2
 800120e:	469b      	mov	fp, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001214:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001218:	fb02 f303 	mul.w	r3, r2, r3
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff f989 	bl	8000534 <__aeabi_i2d>
 8001222:	f04f 0200 	mov.w	r2, #0
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <_ZN3IMU23calculateLinearVelocityEv+0x170>)
 8001228:	f7ff fb18 	bl	800085c <__aeabi_ddiv>
 800122c:	4602      	mov	r2, r0
 800122e:	460b      	mov	r3, r1
 8001230:	4650      	mov	r0, sl
 8001232:	4659      	mov	r1, fp
 8001234:	f7ff f9e8 	bl	8000608 <__aeabi_dmul>
 8001238:	4602      	mov	r2, r0
 800123a:	460b      	mov	r3, r1
 800123c:	4640      	mov	r0, r8
 800123e:	4649      	mov	r1, r9
 8001240:	f7ff f82c 	bl	800029c <__adddf3>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	4620      	mov	r0, r4
 800124a:	4629      	mov	r1, r5
 800124c:	f7ff f826 	bl	800029c <__adddf3>
 8001250:	4603      	mov	r3, r0
 8001252:	460c      	mov	r4, r1
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
 800125a:	e000      	b.n	800125e <_ZN3IMU23calculateLinearVelocityEv+0x162>
		return;
 800125c:	bf00      	nop
}
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001266:	bf00      	nop
 8001268:	3fe00000 	.word	0x3fe00000
 800126c:	408f4000 	.word	0x408f4000

08001270 <_ZN3IMU17getLinearVelocityENS_4AxesE>:

double IMU::getLinearVelocity(Axes axis) {
 8001270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	70fb      	strb	r3, [r7, #3]
	switch(axis) {
 800127c:	78fb      	ldrb	r3, [r7, #3]
 800127e:	2b03      	cmp	r3, #3
 8001280:	d845      	bhi.n	800130e <_ZN3IMU17getLinearVelocityENS_4AxesE+0x9e>
 8001282:	a201      	add	r2, pc, #4	; (adr r2, 8001288 <_ZN3IMU17getLinearVelocityENS_4AxesE+0x18>)
 8001284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001288:	08001299 	.word	0x08001299
 800128c:	080012a1 	.word	0x080012a1
 8001290:	080012a9 	.word	0x080012a9
 8001294:	080012b1 	.word	0x080012b1
	case Axes::x:
		return velocity[0];
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800129e:	e039      	b.n	8001314 <_ZN3IMU17getLinearVelocityENS_4AxesE+0xa4>
		break;
	case Axes::y:
		return velocity[1];
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 80012a6:	e035      	b.n	8001314 <_ZN3IMU17getLinearVelocityENS_4AxesE+0xa4>
		break;
	case Axes::z:
		return velocity[2];
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 80012ae:	e031      	b.n	8001314 <_ZN3IMU17getLinearVelocityENS_4AxesE+0xa4>
		break;
	case Axes::xy:
		return sqrt(velocity[0] * velocity[0] + velocity[1] * velocity[1]);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 80012bc:	461a      	mov	r2, r3
 80012be:	4623      	mov	r3, r4
 80012c0:	f7ff f9a2 	bl	8000608 <__aeabi_dmul>
 80012c4:	4603      	mov	r3, r0
 80012c6:	460c      	mov	r4, r1
 80012c8:	461d      	mov	r5, r3
 80012ca:	4626      	mov	r6, r4
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	e9d3 3412 	ldrd	r3, r4, [r3, #72]	; 0x48
 80012d8:	461a      	mov	r2, r3
 80012da:	4623      	mov	r3, r4
 80012dc:	f7ff f994 	bl	8000608 <__aeabi_dmul>
 80012e0:	4603      	mov	r3, r0
 80012e2:	460c      	mov	r4, r1
 80012e4:	461a      	mov	r2, r3
 80012e6:	4623      	mov	r3, r4
 80012e8:	4628      	mov	r0, r5
 80012ea:	4631      	mov	r1, r6
 80012ec:	f7fe ffd6 	bl	800029c <__adddf3>
 80012f0:	4603      	mov	r3, r0
 80012f2:	460c      	mov	r4, r1
 80012f4:	ec44 3b17 	vmov	d7, r3, r4
 80012f8:	eeb0 0a47 	vmov.f32	s0, s14
 80012fc:	eef0 0a67 	vmov.f32	s1, s15
 8001300:	f005 feb0 	bl	8007064 <sqrt>
 8001304:	eeb0 7a40 	vmov.f32	s14, s0
 8001308:	eef0 7a60 	vmov.f32	s15, s1
 800130c:	e002      	b.n	8001314 <_ZN3IMU17getLinearVelocityENS_4AxesE+0xa4>
		break;
	default:
		break;
 800130e:	bf00      	nop
	}
	return 0.0;
 8001310:	ed9f 7b05 	vldr	d7, [pc, #20]	; 8001328 <_ZN3IMU17getLinearVelocityENS_4AxesE+0xb8>
}
 8001314:	eeb0 0a47 	vmov.f32	s0, s14
 8001318:	eef0 0a67 	vmov.f32	s1, s15
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001322:	bf00      	nop
 8001324:	f3af 8000 	nop.w
	...

08001330 <_ZN3IMU7setModeENS_8IMU_ModeE>:

void IMU::setMode(IMU_Mode mode) {
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	460b      	mov	r3, r1
 800133a:	70fb      	strb	r3, [r7, #3]
	write8(Registers::BNO055_OPR_MODE_ADDR, mode);
 800133c:	78fb      	ldrb	r3, [r7, #3]
 800133e:	461a      	mov	r2, r3
 8001340:	213d      	movs	r1, #61	; 0x3d
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f000 f811 	bl	800136a <_ZN3IMU6write8Ehh>
	currentMode = mode;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	78fa      	ldrb	r2, [r7, #3]
 800134c:	721a      	strb	r2, [r3, #8]
	// Time required to switch between operating modes (Datasheet Table 3-6)
	mode == IMU_Mode::OPR_MODE_CONFIGMODE ? vTaskDelay(pdMS_TO_TICKS(19)) : vTaskDelay(pdMS_TO_TICKS(7));
 800134e:	78fb      	ldrb	r3, [r7, #3]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d103      	bne.n	800135c <_ZN3IMU7setModeENS_8IMU_ModeE+0x2c>
 8001354:	2013      	movs	r0, #19
 8001356:	f004 f9d9 	bl	800570c <vTaskDelay>
	return;
 800135a:	e003      	b.n	8001364 <_ZN3IMU7setModeENS_8IMU_ModeE+0x34>
	mode == IMU_Mode::OPR_MODE_CONFIGMODE ? vTaskDelay(pdMS_TO_TICKS(19)) : vTaskDelay(pdMS_TO_TICKS(7));
 800135c:	2007      	movs	r0, #7
 800135e:	f004 f9d5 	bl	800570c <vTaskDelay>
	return;
 8001362:	bf00      	nop
}
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <_ZN3IMU6write8Ehh>:

uint8_t IMU::getSysError() {
	return (uint8_t)read8(Registers::BNO055_SYS_ERR_ADDR);
}

HAL_StatusTypeDef IMU::write8(uint8_t reg, uint8_t value) {
 800136a:	b580      	push	{r7, lr}
 800136c:	b086      	sub	sp, #24
 800136e:	af02      	add	r7, sp, #8
 8001370:	6078      	str	r0, [r7, #4]
 8001372:	460b      	mov	r3, r1
 8001374:	70fb      	strb	r3, [r7, #3]
 8001376:	4613      	mov	r3, r2
 8001378:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef ret;
	// Combine reg and value into a buffer
	uint8_t buffer[2];
	buffer[0] = reg;
 800137a:	78fb      	ldrb	r3, [r7, #3]
 800137c:	733b      	strb	r3, [r7, #12]
	buffer[1] = value;
 800137e:	78bb      	ldrb	r3, [r7, #2]
 8001380:	737b      	strb	r3, [r7, #13]
	// Send buffer over
	ret = HAL_I2C_Master_Transmit(hi2c, IMU_I2C_ADDR << 1, buffer, 2, 2);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6858      	ldr	r0, [r3, #4]
 8001386:	f107 020c 	add.w	r2, r7, #12
 800138a:	2302      	movs	r3, #2
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	2302      	movs	r3, #2
 8001390:	2150      	movs	r1, #80	; 0x50
 8001392:	f001 f837 	bl	8002404 <HAL_I2C_Master_Transmit>
 8001396:	4603      	mov	r3, r0
 8001398:	73fb      	strb	r3, [r7, #15]
	return ret;
 800139a:	7bfb      	ldrb	r3, [r7, #15]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <_ZN3IMU6read16Eh>:
		return 0xFF;
	}
	return (int8_t)value;
}

int16_t IMU::read16(uint8_t reg) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af02      	add	r7, sp, #8
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	460b      	mov	r3, r1
 80013ae:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef ret;
	uint8_t buffer[2];
	// Tell sensor that we want to read from reg
	ret = HAL_I2C_Master_Transmit(hi2c, IMU_I2C_ADDR << 1, &reg, 1, I2C_TIMEOUT);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6858      	ldr	r0, [r3, #4]
 80013b4:	1cfa      	adds	r2, r7, #3
 80013b6:	2302      	movs	r3, #2
 80013b8:	9300      	str	r3, [sp, #0]
 80013ba:	2301      	movs	r3, #1
 80013bc:	2150      	movs	r1, #80	; 0x50
 80013be:	f001 f821 	bl	8002404 <HAL_I2C_Master_Transmit>
 80013c2:	4603      	mov	r3, r0
 80013c4:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) {
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d002      	beq.n	80013d2 <_ZN3IMU6read16Eh+0x2e>
		return 0xFFFF;
 80013cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013d0:	e01a      	b.n	8001408 <_ZN3IMU6read16Eh+0x64>
	}
	// Read 1 byte from reg
	ret = HAL_I2C_Master_Receive(hi2c, IMU_I2C_ADDR << 1, buffer, 2, I2C_TIMEOUT);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6858      	ldr	r0, [r3, #4]
 80013d6:	f107 0208 	add.w	r2, r7, #8
 80013da:	2302      	movs	r3, #2
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	2302      	movs	r3, #2
 80013e0:	2150      	movs	r1, #80	; 0x50
 80013e2:	f001 f90d 	bl	8002600 <HAL_I2C_Master_Receive>
 80013e6:	4603      	mov	r3, r0
 80013e8:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) {
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d002      	beq.n	80013f6 <_ZN3IMU6read16Eh+0x52>
		return 0xFFFF;
 80013f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013f4:	e008      	b.n	8001408 <_ZN3IMU6read16Eh+0x64>
	}
	// The LSB is always at the lower register address, so cast buffer[0] into 16 bits and shift it left by 8
	// And then OR with MSB to combine into 2 bytes
	int16_t value = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80013f6:	7a7b      	ldrb	r3, [r7, #9]
 80013f8:	021b      	lsls	r3, r3, #8
 80013fa:	b21a      	sxth	r2, r3
 80013fc:	7a3b      	ldrb	r3, [r7, #8]
 80013fe:	b21b      	sxth	r3, r3
 8001400:	4313      	orrs	r3, r2
 8001402:	81bb      	strh	r3, [r7, #12]
	return value;
 8001404:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <_Z6vprintPKcSt9__va_list>:
#include <string.h>
//#include "stm32f4xx_hal.h"
#include "main.h"

void vprint(const char *fmt, va_list argp)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b0b4      	sub	sp, #208	; 0xd0
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
	char temp[200];
	if(vsprintf(temp, fmt, argp))
 800141a:	f107 0308 	add.w	r3, r7, #8
 800141e:	683a      	ldr	r2, [r7, #0]
 8001420:	6879      	ldr	r1, [r7, #4]
 8001422:	4618      	mov	r0, r3
 8001424:	f006 f83e 	bl	80074a4 <vsiprintf>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	bf14      	ite	ne
 800142e:	2301      	movne	r3, #1
 8001430:	2300      	moveq	r3, #0
 8001432:	b2db      	uxtb	r3, r3
 8001434:	2b00      	cmp	r3, #0
 8001436:	d00d      	beq.n	8001454 <_Z6vprintPKcSt9__va_list+0x44>
	{
		HAL_UART_Transmit(&huart2, (uint8_t*) temp, strlen(temp), 1000);
 8001438:	f107 0308 	add.w	r3, r7, #8
 800143c:	4618      	mov	r0, r3
 800143e:	f7fe fecf 	bl	80001e0 <strlen>
 8001442:	4603      	mov	r3, r0
 8001444:	b29a      	uxth	r2, r3
 8001446:	f107 0108 	add.w	r1, r7, #8
 800144a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800144e:	4803      	ldr	r0, [pc, #12]	; (800145c <_Z6vprintPKcSt9__va_list+0x4c>)
 8001450:	f002 fd29 	bl	8003ea6 <HAL_UART_Transmit>
	}
}
 8001454:	bf00      	nop
 8001456:	37d0      	adds	r7, #208	; 0xd0
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000094 	.word	0x20000094

08001460 <_Z11uart_printfPKcz>:

void uart_printf(const char *fmt, ...)
{
 8001460:	b40f      	push	{r0, r1, r2, r3}
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
	va_list argp;
	va_start(argp, fmt);
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	607b      	str	r3, [r7, #4]
	vprint(fmt, argp);
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	6938      	ldr	r0, [r7, #16]
 8001472:	f7ff ffcd 	bl	8001410 <_Z6vprintPKcSt9__va_list>
	va_end(argp);
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001480:	b004      	add	sp, #16
 8001482:	4770      	bx	lr

08001484 <_Z11CollectDataPv>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
void StartDefaultTask(void *argument);

// --------------Our tasks-----------------
// Collects data, task that initializes the IMU, do not remove this task without initializing IMU elsewhere
// Add anymore data collection functions in this task
void CollectData(void* arg) {
<<<<<<< HEAD
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	; 0x28
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	imu.initializeIMU(&hi2c1);
 800142c:	4912      	ldr	r1, [pc, #72]	; (8001478 <_Z11CollectDataPv+0x54>)
 800142e:	4813      	ldr	r0, [pc, #76]	; (800147c <_Z11CollectDataPv+0x58>)
 8001430:	f7ff fd9c 	bl	8000f6c <_ZN3IMU13initializeIMUEP17I2C_HandleTypeDef>
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(SAMPLING_PERIOD);
 8001434:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
	xLastWakeTime = xTaskGetTickCount();
 800143a:	f004 f923 	bl	8005684 <xTaskGetTickCount>
 800143e:	4603      	mov	r3, r0
 8001440:	60fb      	str	r3, [r7, #12]
	while(1) {
		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8001442:	f107 030c 	add.w	r3, r7, #12
 8001446:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800144a:	4618      	mov	r0, r3
 800144c:	f003 ff5e 	bl	800530c <vTaskDelayUntil>
		double zOrientation = imu.getOrientation(imu.Axes::z);
 8001450:	2102      	movs	r1, #2
 8001452:	480a      	ldr	r0, [pc, #40]	; (800147c <_Z11CollectDataPv+0x58>)
 8001454:	f7ff fde6 	bl	8001024 <_ZN3IMU14getOrientationENS_4AxesE>
 8001458:	ed87 0b06 	vstr	d0, [r7, #24]
		// Collect linear acceleration samples with other data, could be sampled at
		// different period in another task with the ACCELERATION_TIME_STEP macro
		imu.storeLinearAcceleration();
 800145c:	4807      	ldr	r0, [pc, #28]	; (800147c <_Z11CollectDataPv+0x58>)
 800145e:	f7ff fe69 	bl	8001134 <_ZN3IMU23storeLinearAccelerationEv>
		// Calculate linear velocity, storing of linear acceleration must be followed
		// by calculation of linear velocity
		imu.calculateLinearVelocity();
 8001462:	4806      	ldr	r0, [pc, #24]	; (800147c <_Z11CollectDataPv+0x58>)
 8001464:	f7ff fea6 	bl	80011b4 <_ZN3IMU23calculateLinearVelocityEv>
		double xyVelocity = imu.getLinearVelocity(imu.Axes::xy);
 8001468:	2103      	movs	r1, #3
 800146a:	4804      	ldr	r0, [pc, #16]	; (800147c <_Z11CollectDataPv+0x58>)
 800146c:	f7ff ff5c 	bl	8001328 <_ZN3IMU17getLinearVelocityENS_4AxesE>
 8001470:	ed87 0b04 	vstr	d0, [r7, #16]
	}
 8001474:	e7e5      	b.n	8001442 <_Z11CollectDataPv+0x1e>
 8001476:	bf00      	nop
 8001478:	20000094 	.word	0x20000094
 800147c:	20000128 	.word	0x20000128

08001480 <main>:
		int8_t status = imu.getCalibStatus();
=======
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	; 0x28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
	imu.initializeIMU(&hi2c1);
 800148c:	4914      	ldr	r1, [pc, #80]	; (80014e0 <_Z11CollectDataPv+0x5c>)
 800148e:	4815      	ldr	r0, [pc, #84]	; (80014e4 <_Z11CollectDataPv+0x60>)
 8001490:	f7ff fd1a 	bl	8000ec8 <_ZN3IMU13initializeIMUEP17I2C_HandleTypeDef>
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(SAMPLING_PERIOD);
 8001494:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
	xLastWakeTime = xTaskGetTickCount();
 800149a:	f004 fa79 	bl	8005990 <xTaskGetTickCount>
 800149e:	4603      	mov	r3, r0
 80014a0:	60fb      	str	r3, [r7, #12]
	while(1) {
		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 80014a2:	f107 030c 	add.w	r3, r7, #12
 80014a6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80014aa:	4618      	mov	r0, r3
 80014ac:	f004 f8b4 	bl	8005618 <vTaskDelayUntil>
		double zOrientation = imu.getOrientation(imu.Axes::z);
 80014b0:	2102      	movs	r1, #2
 80014b2:	480c      	ldr	r0, [pc, #48]	; (80014e4 <_Z11CollectDataPv+0x60>)
 80014b4:	f7ff fd5e 	bl	8000f74 <_ZN3IMU14getOrientationENS_4AxesE>
 80014b8:	ed87 0b06 	vstr	d0, [r7, #24]
		uart_printf("shit = %f\r\n", zOrientation);
 80014bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014c0:	4809      	ldr	r0, [pc, #36]	; (80014e8 <_Z11CollectDataPv+0x64>)
 80014c2:	f7ff ffcd 	bl	8001460 <_Z11uart_printfPKcz>
		// Collect linear acceleration samples with other data, could be sampled at
		// different period in another task with the ACCELERATION_TIME_STEP macro
		imu.storeLinearAcceleration();
 80014c6:	4807      	ldr	r0, [pc, #28]	; (80014e4 <_Z11CollectDataPv+0x60>)
 80014c8:	f7ff fdd8 	bl	800107c <_ZN3IMU23storeLinearAccelerationEv>
		// Calculate linear velocity, storing of linear acceleration must be followed
		// by calculation of linear velocity
		imu.calculateLinearVelocity();
 80014cc:	4805      	ldr	r0, [pc, #20]	; (80014e4 <_Z11CollectDataPv+0x60>)
 80014ce:	f7ff fe15 	bl	80010fc <_ZN3IMU23calculateLinearVelocityEv>
		double xyVelocity = imu.getLinearVelocity(imu.Axes::xy);
 80014d2:	2103      	movs	r1, #3
 80014d4:	4803      	ldr	r0, [pc, #12]	; (80014e4 <_Z11CollectDataPv+0x60>)
 80014d6:	f7ff fecb 	bl	8001270 <_ZN3IMU17getLinearVelocityENS_4AxesE>
 80014da:	ed87 0b04 	vstr	d0, [r7, #16]
	}
 80014de:	e7e0      	b.n	80014a2 <_Z11CollectDataPv+0x1e>
 80014e0:	200000d4 	.word	0x200000d4
 80014e4:	20000128 	.word	0x20000128
 80014e8:	08007b18 	.word	0x08007b18

080014ec <_Z5blinkPv>:
		uart_printf("fuck = %f\r\n", status);
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	}
}

void blink(void *argument)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80014f4:	2120      	movs	r1, #32
 80014f6:	4804      	ldr	r0, [pc, #16]	; (8001508 <_Z5blinkPv+0x1c>)
 80014f8:	f000 fe31 	bl	800215e <HAL_GPIO_TogglePin>
    vTaskDelay(500);
 80014fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001500:	f004 f904 	bl	800570c <vTaskDelay>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001504:	e7f6      	b.n	80014f4 <_Z5blinkPv+0x8>
 8001506:	bf00      	nop
 8001508:	40020000 	.word	0x40020000

0800150c <main>:
  }
  /* USER CODE END StartDefaultTask */
}

int main(void)
{
<<<<<<< HEAD
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af02      	add	r7, sp, #8
  HAL_Init();
 8001486:	f000 fb21 	bl	8001acc <HAL_Init>

  SystemClock_Config();
 800148a:	f000 f817 	bl	80014bc <_Z18SystemClock_Configv>

  MX_GPIO_Init();
 800148e:	f000 f8ed 	bl	800166c <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8001492:	f000 f8bd 	bl	8001610 <_ZL19MX_USART2_UART_Initv>
  MX_I2C1_Init();
 8001496:	f000 f887 	bl	80015a8 <_ZL12MX_I2C1_Initv>
  // Start FreeRTOS
  xTaskCreate(CollectData, "data", 128, NULL, 1, NULL);
 800149a:	2300      	movs	r3, #0
 800149c:	9301      	str	r3, [sp, #4]
 800149e:	2301      	movs	r3, #1
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	2300      	movs	r3, #0
 80014a4:	2280      	movs	r2, #128	; 0x80
 80014a6:	4903      	ldr	r1, [pc, #12]	; (80014b4 <main+0x34>)
 80014a8:	4803      	ldr	r0, [pc, #12]	; (80014b8 <main+0x38>)
 80014aa:	f003 fdeb 	bl	8005084 <xTaskCreate>
//  xTaskCreate(CheckCalibStatus, "calstat", 128, NULL, 1, NULL);
  vTaskStartScheduler();
 80014ae:	f003 ffdb 	bl	8005468 <vTaskStartScheduler>

  while (1)
 80014b2:	e7fe      	b.n	80014b2 <main+0x32>
 80014b4:	080070b0 	.word	0x080070b0
 80014b8:	08001425 	.word	0x08001425

080014bc <_Z18SystemClock_Configv>:
=======
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af02      	add	r7, sp, #8
  HAL_Init();
 8001512:	f000 fb65 	bl	8001be0 <HAL_Init>

  SystemClock_Config();
 8001516:	f000 f825 	bl	8001564 <_Z18SystemClock_Configv>

  MX_GPIO_Init();
 800151a:	f000 f8fb 	bl	8001714 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 800151e:	f000 f8cb 	bl	80016b8 <_ZL19MX_USART2_UART_Initv>
  MX_I2C1_Init();
 8001522:	f000 f895 	bl	8001650 <_ZL12MX_I2C1_Initv>
  // Start FreeRTOS
  xTaskCreate(CollectData, "data", 128, NULL, 1, NULL);
 8001526:	2300      	movs	r3, #0
 8001528:	9301      	str	r3, [sp, #4]
 800152a:	2301      	movs	r3, #1
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	2300      	movs	r3, #0
 8001530:	2280      	movs	r2, #128	; 0x80
 8001532:	4908      	ldr	r1, [pc, #32]	; (8001554 <main+0x48>)
 8001534:	4808      	ldr	r0, [pc, #32]	; (8001558 <main+0x4c>)
 8001536:	f003 ff2b 	bl	8005390 <xTaskCreate>
  xTaskCreate(blink, "Blink", configMINIMAL_STACK_SIZE, NULL, 0, NULL);
 800153a:	2300      	movs	r3, #0
 800153c:	9301      	str	r3, [sp, #4]
 800153e:	2300      	movs	r3, #0
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	2300      	movs	r3, #0
 8001544:	2280      	movs	r2, #128	; 0x80
 8001546:	4905      	ldr	r1, [pc, #20]	; (800155c <main+0x50>)
 8001548:	4805      	ldr	r0, [pc, #20]	; (8001560 <main+0x54>)
 800154a:	f003 ff21 	bl	8005390 <xTaskCreate>
  //xTaskCreate(CheckCalibStatus, "calstat", 128, NULL, 1, NULL);
  vTaskStartScheduler();
 800154e:	f004 f911 	bl	8005774 <vTaskStartScheduler>

  while (1)
 8001552:	e7fe      	b.n	8001552 <main+0x46>
 8001554:	08007b30 	.word	0x08007b30
 8001558:	08001485 	.word	0x08001485
 800155c:	08007b38 	.word	0x08007b38
 8001560:	080014ed 	.word	0x080014ed

08001564 <_Z18SystemClock_Configv>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< HEAD
 80014bc:	b580      	push	{r7, lr}
 80014be:	b094      	sub	sp, #80	; 0x50
 80014c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014c2:	f107 0320 	add.w	r3, r7, #32
 80014c6:	2230      	movs	r2, #48	; 0x30
 80014c8:	2100      	movs	r1, #0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f005 fd8b 	bl	8006fe6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d0:	f107 030c 	add.w	r3, r7, #12
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
=======
 8001564:	b580      	push	{r7, lr}
 8001566:	b094      	sub	sp, #80	; 0x50
 8001568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800156a:	f107 0320 	add.w	r3, r7, #32
 800156e:	2230      	movs	r2, #48	; 0x30
 8001570:	2100      	movs	r1, #0
 8001572:	4618      	mov	r0, r3
 8001574:	f005 febf 	bl	80072f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001578:	f107 030c 	add.w	r3, r7, #12
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< HEAD
 80014e0:	2300      	movs	r3, #0
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	4b2e      	ldr	r3, [pc, #184]	; (80015a0 <_Z18SystemClock_Configv+0xe4>)
 80014e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e8:	4a2d      	ldr	r2, [pc, #180]	; (80015a0 <_Z18SystemClock_Configv+0xe4>)
 80014ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ee:	6413      	str	r3, [r2, #64]	; 0x40
 80014f0:	4b2b      	ldr	r3, [pc, #172]	; (80015a0 <_Z18SystemClock_Configv+0xe4>)
 80014f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80014fc:	2300      	movs	r3, #0
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	4b28      	ldr	r3, [pc, #160]	; (80015a4 <_Z18SystemClock_Configv+0xe8>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001508:	4a26      	ldr	r2, [pc, #152]	; (80015a4 <_Z18SystemClock_Configv+0xe8>)
 800150a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800150e:	6013      	str	r3, [r2, #0]
 8001510:	4b24      	ldr	r3, [pc, #144]	; (80015a4 <_Z18SystemClock_Configv+0xe8>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001518:	607b      	str	r3, [r7, #4]
 800151a:	687b      	ldr	r3, [r7, #4]
=======
 8001588:	2300      	movs	r3, #0
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	4b2e      	ldr	r3, [pc, #184]	; (8001648 <_Z18SystemClock_Configv+0xe4>)
 800158e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001590:	4a2d      	ldr	r2, [pc, #180]	; (8001648 <_Z18SystemClock_Configv+0xe4>)
 8001592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001596:	6413      	str	r3, [r2, #64]	; 0x40
 8001598:	4b2b      	ldr	r3, [pc, #172]	; (8001648 <_Z18SystemClock_Configv+0xe4>)
 800159a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a0:	60bb      	str	r3, [r7, #8]
 80015a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80015a4:	2300      	movs	r3, #0
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	4b28      	ldr	r3, [pc, #160]	; (800164c <_Z18SystemClock_Configv+0xe8>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015b0:	4a26      	ldr	r2, [pc, #152]	; (800164c <_Z18SystemClock_Configv+0xe8>)
 80015b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015b6:	6013      	str	r3, [r2, #0]
 80015b8:	4b24      	ldr	r3, [pc, #144]	; (800164c <_Z18SystemClock_Configv+0xe8>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015c0:	607b      	str	r3, [r7, #4]
 80015c2:	687b      	ldr	r3, [r7, #4]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
<<<<<<< HEAD
 800151c:	2302      	movs	r3, #2
 800151e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001520:	2301      	movs	r3, #1
 8001522:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001524:	2310      	movs	r3, #16
 8001526:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001528:	2302      	movs	r3, #2
 800152a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800152c:	2300      	movs	r3, #0
 800152e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001530:	2310      	movs	r3, #16
 8001532:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001534:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001538:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800153a:	2304      	movs	r3, #4
 800153c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800153e:	2307      	movs	r3, #7
 8001540:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001542:	f107 0320 	add.w	r3, r7, #32
 8001546:	4618      	mov	r0, r3
 8001548:	f001 fd0a 	bl	8002f60 <HAL_RCC_OscConfig>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	bf14      	ite	ne
 8001552:	2301      	movne	r3, #1
 8001554:	2300      	moveq	r3, #0
 8001556:	b2db      	uxtb	r3, r3
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
 800155c:	f000 f908 	bl	8001770 <Error_Handler>
=======
 80015c4:	2302      	movs	r3, #2
 80015c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015c8:	2301      	movs	r3, #1
 80015ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015cc:	2310      	movs	r3, #16
 80015ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015d0:	2302      	movs	r3, #2
 80015d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015d4:	2300      	movs	r3, #0
 80015d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80015d8:	2310      	movs	r3, #16
 80015da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80015dc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80015e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80015e2:	2304      	movs	r3, #4
 80015e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015e6:	2307      	movs	r3, #7
 80015e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ea:	f107 0320 	add.w	r3, r7, #32
 80015ee:	4618      	mov	r0, r3
 80015f0:	f001 fd5a 	bl	80030a8 <HAL_RCC_OscConfig>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	bf14      	ite	ne
 80015fa:	2301      	movne	r3, #1
 80015fc:	2300      	moveq	r3, #0
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
 8001604:	f000 f908 	bl	8001818 <Error_Handler>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< HEAD
 8001560:	230f      	movs	r3, #15
 8001562:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001564:	2302      	movs	r3, #2
 8001566:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800156c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001570:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001572:	2300      	movs	r3, #0
 8001574:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001576:	f107 030c 	add.w	r3, r7, #12
 800157a:	2102      	movs	r1, #2
 800157c:	4618      	mov	r0, r3
 800157e:	f001 ff5f 	bl	8003440 <HAL_RCC_ClockConfig>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	bf14      	ite	ne
 8001588:	2301      	movne	r3, #1
 800158a:	2300      	moveq	r3, #0
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 8001592:	f000 f8ed 	bl	8001770 <Error_Handler>
  }
}
 8001596:	bf00      	nop
 8001598:	3750      	adds	r7, #80	; 0x50
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40007000 	.word	0x40007000

080015a8 <_ZL12MX_I2C1_Initv>:
=======
 8001608:	230f      	movs	r3, #15
 800160a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800160c:	2302      	movs	r3, #2
 800160e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001618:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800161a:	2300      	movs	r3, #0
 800161c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800161e:	f107 030c 	add.w	r3, r7, #12
 8001622:	2102      	movs	r1, #2
 8001624:	4618      	mov	r0, r3
 8001626:	f001 ffaf 	bl	8003588 <HAL_RCC_ClockConfig>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	bf14      	ite	ne
 8001630:	2301      	movne	r3, #1
 8001632:	2300      	moveq	r3, #0
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 800163a:	f000 f8ed 	bl	8001818 <Error_Handler>
  }
}
 800163e:	bf00      	nop
 8001640:	3750      	adds	r7, #80	; 0x50
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40023800 	.word	0x40023800
 800164c:	40007000 	.word	0x40007000

08001650 <_ZL12MX_I2C1_Initv>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
<<<<<<< HEAD
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
=======
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
<<<<<<< HEAD
 80015ac:	4b15      	ldr	r3, [pc, #84]	; (8001604 <_ZL12MX_I2C1_Initv+0x5c>)
 80015ae:	4a16      	ldr	r2, [pc, #88]	; (8001608 <_ZL12MX_I2C1_Initv+0x60>)
 80015b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015b2:	4b14      	ldr	r3, [pc, #80]	; (8001604 <_ZL12MX_I2C1_Initv+0x5c>)
 80015b4:	4a15      	ldr	r2, [pc, #84]	; (800160c <_ZL12MX_I2C1_Initv+0x64>)
 80015b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015b8:	4b12      	ldr	r3, [pc, #72]	; (8001604 <_ZL12MX_I2C1_Initv+0x5c>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015be:	4b11      	ldr	r3, [pc, #68]	; (8001604 <_ZL12MX_I2C1_Initv+0x5c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015c4:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <_ZL12MX_I2C1_Initv+0x5c>)
 80015c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015cc:	4b0d      	ldr	r3, [pc, #52]	; (8001604 <_ZL12MX_I2C1_Initv+0x5c>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015d2:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <_ZL12MX_I2C1_Initv+0x5c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015d8:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <_ZL12MX_I2C1_Initv+0x5c>)
 80015da:	2200      	movs	r2, #0
 80015dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015de:	4b09      	ldr	r3, [pc, #36]	; (8001604 <_ZL12MX_I2C1_Initv+0x5c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015e4:	4807      	ldr	r0, [pc, #28]	; (8001604 <_ZL12MX_I2C1_Initv+0x5c>)
 80015e6:	f000 fd31 	bl	800204c <HAL_I2C_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	bf14      	ite	ne
 80015f0:	2301      	movne	r3, #1
 80015f2:	2300      	moveq	r3, #0
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80015fa:	f000 f8b9 	bl	8001770 <Error_Handler>
=======
 8001654:	4b15      	ldr	r3, [pc, #84]	; (80016ac <_ZL12MX_I2C1_Initv+0x5c>)
 8001656:	4a16      	ldr	r2, [pc, #88]	; (80016b0 <_ZL12MX_I2C1_Initv+0x60>)
 8001658:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800165a:	4b14      	ldr	r3, [pc, #80]	; (80016ac <_ZL12MX_I2C1_Initv+0x5c>)
 800165c:	4a15      	ldr	r2, [pc, #84]	; (80016b4 <_ZL12MX_I2C1_Initv+0x64>)
 800165e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001660:	4b12      	ldr	r3, [pc, #72]	; (80016ac <_ZL12MX_I2C1_Initv+0x5c>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001666:	4b11      	ldr	r3, [pc, #68]	; (80016ac <_ZL12MX_I2C1_Initv+0x5c>)
 8001668:	2200      	movs	r2, #0
 800166a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800166c:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <_ZL12MX_I2C1_Initv+0x5c>)
 800166e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001672:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001674:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <_ZL12MX_I2C1_Initv+0x5c>)
 8001676:	2200      	movs	r2, #0
 8001678:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800167a:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <_ZL12MX_I2C1_Initv+0x5c>)
 800167c:	2200      	movs	r2, #0
 800167e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001680:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <_ZL12MX_I2C1_Initv+0x5c>)
 8001682:	2200      	movs	r2, #0
 8001684:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <_ZL12MX_I2C1_Initv+0x5c>)
 8001688:	2200      	movs	r2, #0
 800168a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800168c:	4807      	ldr	r0, [pc, #28]	; (80016ac <_ZL12MX_I2C1_Initv+0x5c>)
 800168e:	f000 fd81 	bl	8002194 <HAL_I2C_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	bf14      	ite	ne
 8001698:	2301      	movne	r3, #1
 800169a:	2300      	moveq	r3, #0
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80016a2:	f000 f8b9 	bl	8001818 <Error_Handler>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
<<<<<<< HEAD
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000094 	.word	0x20000094
 8001608:	40005400 	.word	0x40005400
 800160c:	000186a0 	.word	0x000186a0

08001610 <_ZL19MX_USART2_UART_Initv>:
=======
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	200000d4 	.word	0x200000d4
 80016b0:	40005400 	.word	0x40005400
 80016b4:	000186a0 	.word	0x000186a0

080016b8 <_ZL19MX_USART2_UART_Initv>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
<<<<<<< HEAD
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
=======
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
<<<<<<< HEAD
 8001614:	4b13      	ldr	r3, [pc, #76]	; (8001664 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001616:	4a14      	ldr	r2, [pc, #80]	; (8001668 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001618:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800161a:	4b12      	ldr	r3, [pc, #72]	; (8001664 <_ZL19MX_USART2_UART_Initv+0x54>)
 800161c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001620:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001622:	4b10      	ldr	r3, [pc, #64]	; (8001664 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001628:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <_ZL19MX_USART2_UART_Initv+0x54>)
 800162a:	2200      	movs	r2, #0
 800162c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800162e:	4b0d      	ldr	r3, [pc, #52]	; (8001664 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001630:	2200      	movs	r2, #0
 8001632:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001634:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001636:	220c      	movs	r2, #12
 8001638:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800163a:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <_ZL19MX_USART2_UART_Initv+0x54>)
 800163c:	2200      	movs	r2, #0
 800163e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001640:	4b08      	ldr	r3, [pc, #32]	; (8001664 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001642:	2200      	movs	r2, #0
 8001644:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001646:	4807      	ldr	r0, [pc, #28]	; (8001664 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001648:	f002 fb3c 	bl	8003cc4 <HAL_UART_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	bf14      	ite	ne
 8001652:	2301      	movne	r3, #1
 8001654:	2300      	moveq	r3, #0
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 800165c:	f000 f888 	bl	8001770 <Error_Handler>
=======
 80016bc:	4b13      	ldr	r3, [pc, #76]	; (800170c <_ZL19MX_USART2_UART_Initv+0x54>)
 80016be:	4a14      	ldr	r2, [pc, #80]	; (8001710 <_ZL19MX_USART2_UART_Initv+0x58>)
 80016c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016c2:	4b12      	ldr	r3, [pc, #72]	; (800170c <_ZL19MX_USART2_UART_Initv+0x54>)
 80016c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016ca:	4b10      	ldr	r3, [pc, #64]	; (800170c <_ZL19MX_USART2_UART_Initv+0x54>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016d0:	4b0e      	ldr	r3, [pc, #56]	; (800170c <_ZL19MX_USART2_UART_Initv+0x54>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016d6:	4b0d      	ldr	r3, [pc, #52]	; (800170c <_ZL19MX_USART2_UART_Initv+0x54>)
 80016d8:	2200      	movs	r2, #0
 80016da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016dc:	4b0b      	ldr	r3, [pc, #44]	; (800170c <_ZL19MX_USART2_UART_Initv+0x54>)
 80016de:	220c      	movs	r2, #12
 80016e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016e2:	4b0a      	ldr	r3, [pc, #40]	; (800170c <_ZL19MX_USART2_UART_Initv+0x54>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e8:	4b08      	ldr	r3, [pc, #32]	; (800170c <_ZL19MX_USART2_UART_Initv+0x54>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016ee:	4807      	ldr	r0, [pc, #28]	; (800170c <_ZL19MX_USART2_UART_Initv+0x54>)
 80016f0:	f002 fb8c 	bl	8003e0c <HAL_UART_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	bf14      	ite	ne
 80016fa:	2301      	movne	r3, #1
 80016fc:	2300      	moveq	r3, #0
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001704:	f000 f888 	bl	8001818 <Error_Handler>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
<<<<<<< HEAD
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}
 8001664:	200000e8 	.word	0x200000e8
 8001668:	40004400 	.word	0x40004400

0800166c <_ZL12MX_GPIO_Initv>:
=======
 8001708:	bf00      	nop
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20000094 	.word	0x20000094
 8001710:	40004400 	.word	0x40004400

08001714 <_ZL12MX_GPIO_Initv>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
<<<<<<< HEAD
 800166c:	b580      	push	{r7, lr}
 800166e:	b08a      	sub	sp, #40	; 0x28
 8001670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	60da      	str	r2, [r3, #12]
 8001680:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	4b2d      	ldr	r3, [pc, #180]	; (800173c <_ZL12MX_GPIO_Initv+0xd0>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	4a2c      	ldr	r2, [pc, #176]	; (800173c <_ZL12MX_GPIO_Initv+0xd0>)
 800168c:	f043 0304 	orr.w	r3, r3, #4
 8001690:	6313      	str	r3, [r2, #48]	; 0x30
 8001692:	4b2a      	ldr	r3, [pc, #168]	; (800173c <_ZL12MX_GPIO_Initv+0xd0>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f003 0304 	and.w	r3, r3, #4
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	4b26      	ldr	r3, [pc, #152]	; (800173c <_ZL12MX_GPIO_Initv+0xd0>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a25      	ldr	r2, [pc, #148]	; (800173c <_ZL12MX_GPIO_Initv+0xd0>)
 80016a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b23      	ldr	r3, [pc, #140]	; (800173c <_ZL12MX_GPIO_Initv+0xd0>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	4b1f      	ldr	r3, [pc, #124]	; (800173c <_ZL12MX_GPIO_Initv+0xd0>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a1e      	ldr	r2, [pc, #120]	; (800173c <_ZL12MX_GPIO_Initv+0xd0>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b1c      	ldr	r3, [pc, #112]	; (800173c <_ZL12MX_GPIO_Initv+0xd0>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	607b      	str	r3, [r7, #4]
 80016da:	4b18      	ldr	r3, [pc, #96]	; (800173c <_ZL12MX_GPIO_Initv+0xd0>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a17      	ldr	r2, [pc, #92]	; (800173c <_ZL12MX_GPIO_Initv+0xd0>)
 80016e0:	f043 0302 	orr.w	r3, r3, #2
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b15      	ldr	r3, [pc, #84]	; (800173c <_ZL12MX_GPIO_Initv+0xd0>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	607b      	str	r3, [r7, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2120      	movs	r1, #32
 80016f6:	4812      	ldr	r0, [pc, #72]	; (8001740 <_ZL12MX_GPIO_Initv+0xd4>)
 80016f8:	f000 fc8e 	bl	8002018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001702:	4b10      	ldr	r3, [pc, #64]	; (8001744 <_ZL12MX_GPIO_Initv+0xd8>)
 8001704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800170a:	f107 0314 	add.w	r3, r7, #20
 800170e:	4619      	mov	r1, r3
 8001710:	480d      	ldr	r0, [pc, #52]	; (8001748 <_ZL12MX_GPIO_Initv+0xdc>)
 8001712:	f000 faff 	bl	8001d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001716:	2320      	movs	r3, #32
 8001718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171a:	2301      	movs	r3, #1
 800171c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001722:	2300      	movs	r3, #0
 8001724:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	4619      	mov	r1, r3
 800172c:	4804      	ldr	r0, [pc, #16]	; (8001740 <_ZL12MX_GPIO_Initv+0xd4>)
 800172e:	f000 faf1 	bl	8001d14 <HAL_GPIO_Init>

}
 8001732:	bf00      	nop
 8001734:	3728      	adds	r7, #40	; 0x28
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40023800 	.word	0x40023800
 8001740:	40020000 	.word	0x40020000
 8001744:	10210000 	.word	0x10210000
 8001748:	40020800 	.word	0x40020800

0800174c <HAL_TIM_PeriodElapsedCallback>:
=======
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	; 0x28
 8001718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171a:	f107 0314 	add.w	r3, r7, #20
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	60da      	str	r2, [r3, #12]
 8001728:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	613b      	str	r3, [r7, #16]
 800172e:	4b2d      	ldr	r3, [pc, #180]	; (80017e4 <_ZL12MX_GPIO_Initv+0xd0>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	4a2c      	ldr	r2, [pc, #176]	; (80017e4 <_ZL12MX_GPIO_Initv+0xd0>)
 8001734:	f043 0304 	orr.w	r3, r3, #4
 8001738:	6313      	str	r3, [r2, #48]	; 0x30
 800173a:	4b2a      	ldr	r3, [pc, #168]	; (80017e4 <_ZL12MX_GPIO_Initv+0xd0>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	f003 0304 	and.w	r3, r3, #4
 8001742:	613b      	str	r3, [r7, #16]
 8001744:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	4b26      	ldr	r3, [pc, #152]	; (80017e4 <_ZL12MX_GPIO_Initv+0xd0>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	4a25      	ldr	r2, [pc, #148]	; (80017e4 <_ZL12MX_GPIO_Initv+0xd0>)
 8001750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001754:	6313      	str	r3, [r2, #48]	; 0x30
 8001756:	4b23      	ldr	r3, [pc, #140]	; (80017e4 <_ZL12MX_GPIO_Initv+0xd0>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	4b1f      	ldr	r3, [pc, #124]	; (80017e4 <_ZL12MX_GPIO_Initv+0xd0>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	4a1e      	ldr	r2, [pc, #120]	; (80017e4 <_ZL12MX_GPIO_Initv+0xd0>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	6313      	str	r3, [r2, #48]	; 0x30
 8001772:	4b1c      	ldr	r3, [pc, #112]	; (80017e4 <_ZL12MX_GPIO_Initv+0xd0>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	607b      	str	r3, [r7, #4]
 8001782:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <_ZL12MX_GPIO_Initv+0xd0>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	4a17      	ldr	r2, [pc, #92]	; (80017e4 <_ZL12MX_GPIO_Initv+0xd0>)
 8001788:	f043 0302 	orr.w	r3, r3, #2
 800178c:	6313      	str	r3, [r2, #48]	; 0x30
 800178e:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <_ZL12MX_GPIO_Initv+0xd0>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	607b      	str	r3, [r7, #4]
 8001798:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800179a:	2200      	movs	r2, #0
 800179c:	2120      	movs	r1, #32
 800179e:	4812      	ldr	r0, [pc, #72]	; (80017e8 <_ZL12MX_GPIO_Initv+0xd4>)
 80017a0:	f000 fcc4 	bl	800212c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017aa:	4b10      	ldr	r3, [pc, #64]	; (80017ec <_ZL12MX_GPIO_Initv+0xd8>)
 80017ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017b2:	f107 0314 	add.w	r3, r7, #20
 80017b6:	4619      	mov	r1, r3
 80017b8:	480d      	ldr	r0, [pc, #52]	; (80017f0 <_ZL12MX_GPIO_Initv+0xdc>)
 80017ba:	f000 fb35 	bl	8001e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80017be:	2320      	movs	r3, #32
 80017c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c2:	2301      	movs	r3, #1
 80017c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ca:	2300      	movs	r3, #0
 80017cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017ce:	f107 0314 	add.w	r3, r7, #20
 80017d2:	4619      	mov	r1, r3
 80017d4:	4804      	ldr	r0, [pc, #16]	; (80017e8 <_ZL12MX_GPIO_Initv+0xd4>)
 80017d6:	f000 fb27 	bl	8001e28 <HAL_GPIO_Init>

}
 80017da:	bf00      	nop
 80017dc:	3728      	adds	r7, #40	; 0x28
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40020000 	.word	0x40020000
 80017ec:	10210000 	.word	0x10210000
 80017f0:	40020800 	.word	0x40020800

080017f4 <HAL_TIM_PeriodElapsedCallback>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
=======
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
<<<<<<< HEAD
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a04      	ldr	r2, [pc, #16]	; (800176c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d101      	bne.n	8001762 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800175e:	f000 f9d7 	bl	8001b10 <HAL_IncTick>
=======
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a04      	ldr	r2, [pc, #16]	; (8001814 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d101      	bne.n	800180a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001806:	f000 fa0d 	bl	8001c24 <HAL_IncTick>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
<<<<<<< HEAD
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40014800 	.word	0x40014800

08001770 <Error_Handler>:
=======
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40014800 	.word	0x40014800

08001818 <Error_Handler>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
=======
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
<<<<<<< HEAD
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
	...

08001780 <_Z41__static_initialization_and_destruction_0ii>:
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d107      	bne.n	80017a0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001796:	4293      	cmp	r3, r2
 8001798:	d102      	bne.n	80017a0 <_Z41__static_initialization_and_destruction_0ii+0x20>
IMU imu;
 800179a:	4809      	ldr	r0, [pc, #36]	; (80017c0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800179c:	f7ff fbae 	bl	8000efc <_ZN3IMUC1Ev>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d107      	bne.n	80017b6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d102      	bne.n	80017b6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80017b0:	4803      	ldr	r0, [pc, #12]	; (80017c0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80017b2:	f7ff fbb7 	bl	8000f24 <_ZN3IMUD1Ev>
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000128 	.word	0x20000128

080017c4 <_GLOBAL__sub_I_hi2c1>:
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80017cc:	2001      	movs	r0, #1
 80017ce:	f7ff ffd7 	bl	8001780 <_Z41__static_initialization_and_destruction_0ii>
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <_GLOBAL__sub_D_hi2c1>:
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80017dc:	2000      	movs	r0, #0
 80017de:	f7ff ffcf 	bl	8001780 <_Z41__static_initialization_and_destruction_0ii>
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <HAL_MspInit>:
=======
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
	...

08001828 <_Z41__static_initialization_and_destruction_0ii>:
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d107      	bne.n	8001848 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800183e:	4293      	cmp	r3, r2
 8001840:	d102      	bne.n	8001848 <_Z41__static_initialization_and_destruction_0ii+0x20>
IMU imu;
 8001842:	4809      	ldr	r0, [pc, #36]	; (8001868 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001844:	f7ff fb10 	bl	8000e68 <_ZN3IMUC1Ev>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d107      	bne.n	800185e <_Z41__static_initialization_and_destruction_0ii+0x36>
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001854:	4293      	cmp	r3, r2
 8001856:	d102      	bne.n	800185e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001858:	4803      	ldr	r0, [pc, #12]	; (8001868 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800185a:	f7ff fb15 	bl	8000e88 <_ZN3IMUD1Ev>
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20000128 	.word	0x20000128

0800186c <_GLOBAL__sub_I_huart2>:
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
 8001870:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001874:	2001      	movs	r0, #1
 8001876:	f7ff ffd7 	bl	8001828 <_Z41__static_initialization_and_destruction_0ii>
 800187a:	bd80      	pop	{r7, pc}

0800187c <_GLOBAL__sub_D_huart2>:
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
 8001880:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001884:	2000      	movs	r0, #0
 8001886:	f7ff ffcf 	bl	8001828 <_Z41__static_initialization_and_destruction_0ii>
 800188a:	bd80      	pop	{r7, pc}

0800188c <HAL_MspInit>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
=======
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< HEAD
 80017ea:	2300      	movs	r3, #0
 80017ec:	607b      	str	r3, [r7, #4]
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <HAL_MspInit+0x4c>)
 80017f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f2:	4a0f      	ldr	r2, [pc, #60]	; (8001830 <HAL_MspInit+0x4c>)
 80017f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f8:	6453      	str	r3, [r2, #68]	; 0x44
 80017fa:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <HAL_MspInit+0x4c>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	603b      	str	r3, [r7, #0]
 800180a:	4b09      	ldr	r3, [pc, #36]	; (8001830 <HAL_MspInit+0x4c>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	4a08      	ldr	r2, [pc, #32]	; (8001830 <HAL_MspInit+0x4c>)
 8001810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001814:	6413      	str	r3, [r2, #64]	; 0x40
 8001816:	4b06      	ldr	r3, [pc, #24]	; (8001830 <HAL_MspInit+0x4c>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181e:	603b      	str	r3, [r7, #0]
 8001820:	683b      	ldr	r3, [r7, #0]
=======
 8001892:	2300      	movs	r3, #0
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <HAL_MspInit+0x4c>)
 8001898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189a:	4a0f      	ldr	r2, [pc, #60]	; (80018d8 <HAL_MspInit+0x4c>)
 800189c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a0:	6453      	str	r3, [r2, #68]	; 0x44
 80018a2:	4b0d      	ldr	r3, [pc, #52]	; (80018d8 <HAL_MspInit+0x4c>)
 80018a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	603b      	str	r3, [r7, #0]
 80018b2:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <HAL_MspInit+0x4c>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	4a08      	ldr	r2, [pc, #32]	; (80018d8 <HAL_MspInit+0x4c>)
 80018b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018bc:	6413      	str	r3, [r2, #64]	; 0x40
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <HAL_MspInit+0x4c>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c6:	603b      	str	r3, [r7, #0]
 80018c8:	683b      	ldr	r3, [r7, #0]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40023800 	.word	0x40023800

08001834 <HAL_I2C_MspInit>:
=======
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	40023800 	.word	0x40023800

080018dc <HAL_I2C_MspInit>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
<<<<<<< HEAD
 8001834:	b580      	push	{r7, lr}
 8001836:	b08a      	sub	sp, #40	; 0x28
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a19      	ldr	r2, [pc, #100]	; (80018b8 <HAL_I2C_MspInit+0x84>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d12c      	bne.n	80018b0 <HAL_I2C_MspInit+0x7c>
=======
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08a      	sub	sp, #40	; 0x28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a19      	ldr	r2, [pc, #100]	; (8001960 <HAL_I2C_MspInit+0x84>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d12c      	bne.n	8001958 <HAL_I2C_MspInit+0x7c>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
<<<<<<< HEAD
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	4b18      	ldr	r3, [pc, #96]	; (80018bc <HAL_I2C_MspInit+0x88>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	4a17      	ldr	r2, [pc, #92]	; (80018bc <HAL_I2C_MspInit+0x88>)
 8001860:	f043 0302 	orr.w	r3, r3, #2
 8001864:	6313      	str	r3, [r2, #48]	; 0x30
 8001866:	4b15      	ldr	r3, [pc, #84]	; (80018bc <HAL_I2C_MspInit+0x88>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	693b      	ldr	r3, [r7, #16]
=======
 80018fe:	2300      	movs	r3, #0
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	4b18      	ldr	r3, [pc, #96]	; (8001964 <HAL_I2C_MspInit+0x88>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	4a17      	ldr	r2, [pc, #92]	; (8001964 <HAL_I2C_MspInit+0x88>)
 8001908:	f043 0302 	orr.w	r3, r3, #2
 800190c:	6313      	str	r3, [r2, #48]	; 0x30
 800190e:	4b15      	ldr	r3, [pc, #84]	; (8001964 <HAL_I2C_MspInit+0x88>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	693b      	ldr	r3, [r7, #16]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
<<<<<<< HEAD
 8001872:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001878:	2312      	movs	r3, #18
 800187a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800187c:	2301      	movs	r3, #1
 800187e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001880:	2303      	movs	r3, #3
 8001882:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001884:	2304      	movs	r3, #4
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001888:	f107 0314 	add.w	r3, r7, #20
 800188c:	4619      	mov	r1, r3
 800188e:	480c      	ldr	r0, [pc, #48]	; (80018c0 <HAL_I2C_MspInit+0x8c>)
 8001890:	f000 fa40 	bl	8001d14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001894:	2300      	movs	r3, #0
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	4b08      	ldr	r3, [pc, #32]	; (80018bc <HAL_I2C_MspInit+0x88>)
 800189a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189c:	4a07      	ldr	r2, [pc, #28]	; (80018bc <HAL_I2C_MspInit+0x88>)
 800189e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018a2:	6413      	str	r3, [r2, #64]	; 0x40
 80018a4:	4b05      	ldr	r3, [pc, #20]	; (80018bc <HAL_I2C_MspInit+0x88>)
 80018a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	68fb      	ldr	r3, [r7, #12]
=======
 800191a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800191e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001920:	2312      	movs	r3, #18
 8001922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001924:	2301      	movs	r3, #1
 8001926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001928:	2303      	movs	r3, #3
 800192a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800192c:	2304      	movs	r3, #4
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	4619      	mov	r1, r3
 8001936:	480c      	ldr	r0, [pc, #48]	; (8001968 <HAL_I2C_MspInit+0x8c>)
 8001938:	f000 fa76 	bl	8001e28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800193c:	2300      	movs	r3, #0
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	4b08      	ldr	r3, [pc, #32]	; (8001964 <HAL_I2C_MspInit+0x88>)
 8001942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001944:	4a07      	ldr	r2, [pc, #28]	; (8001964 <HAL_I2C_MspInit+0x88>)
 8001946:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800194a:	6413      	str	r3, [r2, #64]	; 0x40
 800194c:	4b05      	ldr	r3, [pc, #20]	; (8001964 <HAL_I2C_MspInit+0x88>)
 800194e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001950:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	68fb      	ldr	r3, [r7, #12]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
<<<<<<< HEAD
 80018b0:	bf00      	nop
 80018b2:	3728      	adds	r7, #40	; 0x28
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40005400 	.word	0x40005400
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40020400 	.word	0x40020400

080018c4 <HAL_UART_MspInit>:
=======
 8001958:	bf00      	nop
 800195a:	3728      	adds	r7, #40	; 0x28
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40005400 	.word	0x40005400
 8001964:	40023800 	.word	0x40023800
 8001968:	40020400 	.word	0x40020400

0800196c <HAL_UART_MspInit>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
<<<<<<< HEAD
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b08a      	sub	sp, #40	; 0x28
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018cc:	f107 0314 	add.w	r3, r7, #20
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a19      	ldr	r2, [pc, #100]	; (8001948 <HAL_UART_MspInit+0x84>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d12b      	bne.n	800193e <HAL_UART_MspInit+0x7a>
=======
 800196c:	b580      	push	{r7, lr}
 800196e:	b08a      	sub	sp, #40	; 0x28
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a19      	ldr	r2, [pc, #100]	; (80019f0 <HAL_UART_MspInit+0x84>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d12b      	bne.n	80019e6 <HAL_UART_MspInit+0x7a>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
<<<<<<< HEAD
 80018e6:	2300      	movs	r3, #0
 80018e8:	613b      	str	r3, [r7, #16]
 80018ea:	4b18      	ldr	r3, [pc, #96]	; (800194c <HAL_UART_MspInit+0x88>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	4a17      	ldr	r2, [pc, #92]	; (800194c <HAL_UART_MspInit+0x88>)
 80018f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f4:	6413      	str	r3, [r2, #64]	; 0x40
 80018f6:	4b15      	ldr	r3, [pc, #84]	; (800194c <HAL_UART_MspInit+0x88>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	4b11      	ldr	r3, [pc, #68]	; (800194c <HAL_UART_MspInit+0x88>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4a10      	ldr	r2, [pc, #64]	; (800194c <HAL_UART_MspInit+0x88>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4b0e      	ldr	r3, [pc, #56]	; (800194c <HAL_UART_MspInit+0x88>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
=======
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	4b18      	ldr	r3, [pc, #96]	; (80019f4 <HAL_UART_MspInit+0x88>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	4a17      	ldr	r2, [pc, #92]	; (80019f4 <HAL_UART_MspInit+0x88>)
 8001998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800199c:	6413      	str	r3, [r2, #64]	; 0x40
 800199e:	4b15      	ldr	r3, [pc, #84]	; (80019f4 <HAL_UART_MspInit+0x88>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <HAL_UART_MspInit+0x88>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	4a10      	ldr	r2, [pc, #64]	; (80019f4 <HAL_UART_MspInit+0x88>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ba:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <HAL_UART_MspInit+0x88>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
<<<<<<< HEAD
 800191e:	230c      	movs	r3, #12
 8001920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001922:	2302      	movs	r3, #2
 8001924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192a:	2300      	movs	r3, #0
 800192c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800192e:	2307      	movs	r3, #7
 8001930:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001932:	f107 0314 	add.w	r3, r7, #20
 8001936:	4619      	mov	r1, r3
 8001938:	4805      	ldr	r0, [pc, #20]	; (8001950 <HAL_UART_MspInit+0x8c>)
 800193a:	f000 f9eb 	bl	8001d14 <HAL_GPIO_Init>
=======
 80019c6:	230c      	movs	r3, #12
 80019c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ca:	2302      	movs	r3, #2
 80019cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d2:	2300      	movs	r3, #0
 80019d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019d6:	2307      	movs	r3, #7
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019da:	f107 0314 	add.w	r3, r7, #20
 80019de:	4619      	mov	r1, r3
 80019e0:	4805      	ldr	r0, [pc, #20]	; (80019f8 <HAL_UART_MspInit+0x8c>)
 80019e2:	f000 fa21 	bl	8001e28 <HAL_GPIO_Init>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
<<<<<<< HEAD
 800193e:	bf00      	nop
 8001940:	3728      	adds	r7, #40	; 0x28
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40004400 	.word	0x40004400
 800194c:	40023800 	.word	0x40023800
 8001950:	40020000 	.word	0x40020000

08001954 <HAL_InitTick>:
=======
 80019e6:	bf00      	nop
 80019e8:	3728      	adds	r7, #40	; 0x28
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40004400 	.word	0x40004400
 80019f4:	40023800 	.word	0x40023800
 80019f8:	40020000 	.word	0x40020000

080019fc <HAL_InitTick>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 8001954:	b580      	push	{r7, lr}
 8001956:	b08c      	sub	sp, #48	; 0x30
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001960:	2300      	movs	r3, #0
 8001962:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 8001964:	2200      	movs	r2, #0
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	201a      	movs	r0, #26
 800196a:	f000 f9a9 	bl	8001cc0 <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800196e:	201a      	movs	r0, #26
 8001970:	f000 f9c2 	bl	8001cf8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8001974:	2300      	movs	r3, #0
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	4b1e      	ldr	r3, [pc, #120]	; (80019f4 <HAL_InitTick+0xa0>)
 800197a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197c:	4a1d      	ldr	r2, [pc, #116]	; (80019f4 <HAL_InitTick+0xa0>)
 800197e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001982:	6453      	str	r3, [r2, #68]	; 0x44
 8001984:	4b1b      	ldr	r3, [pc, #108]	; (80019f4 <HAL_InitTick+0xa0>)
 8001986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001988:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001990:	f107 0210 	add.w	r2, r7, #16
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	4611      	mov	r1, r2
 800199a:	4618      	mov	r0, r3
 800199c:	f001 ff42 	bl	8003824 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80019a0:	f001 ff2c 	bl	80037fc <HAL_RCC_GetPCLK2Freq>
 80019a4:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80019a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a8:	4a13      	ldr	r2, [pc, #76]	; (80019f8 <HAL_InitTick+0xa4>)
 80019aa:	fba2 2303 	umull	r2, r3, r2, r3
 80019ae:	0c9b      	lsrs	r3, r3, #18
 80019b0:	3b01      	subs	r3, #1
 80019b2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 80019b4:	4b11      	ldr	r3, [pc, #68]	; (80019fc <HAL_InitTick+0xa8>)
 80019b6:	4a12      	ldr	r2, [pc, #72]	; (8001a00 <HAL_InitTick+0xac>)
 80019b8:	601a      	str	r2, [r3, #0]
=======
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08c      	sub	sp, #48	; 0x30
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	201a      	movs	r0, #26
 8001a12:	f000 f9df 	bl	8001dd4 <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001a16:	201a      	movs	r0, #26
 8001a18:	f000 f9f8 	bl	8001e0c <HAL_NVIC_EnableIRQ>
  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	4b1e      	ldr	r3, [pc, #120]	; (8001a9c <HAL_InitTick+0xa0>)
 8001a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a24:	4a1d      	ldr	r2, [pc, #116]	; (8001a9c <HAL_InitTick+0xa0>)
 8001a26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a2a:	6453      	str	r3, [r2, #68]	; 0x44
 8001a2c:	4b1b      	ldr	r3, [pc, #108]	; (8001a9c <HAL_InitTick+0xa0>)
 8001a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a38:	f107 0210 	add.w	r2, r7, #16
 8001a3c:	f107 0314 	add.w	r3, r7, #20
 8001a40:	4611      	mov	r1, r2
 8001a42:	4618      	mov	r0, r3
 8001a44:	f001 ff92 	bl	800396c <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001a48:	f001 ff7c 	bl	8003944 <HAL_RCC_GetPCLK2Freq>
 8001a4c:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a50:	4a13      	ldr	r2, [pc, #76]	; (8001aa0 <HAL_InitTick+0xa4>)
 8001a52:	fba2 2303 	umull	r2, r3, r2, r3
 8001a56:	0c9b      	lsrs	r3, r3, #18
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8001a5c:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <HAL_InitTick+0xa8>)
 8001a5e:	4a12      	ldr	r2, [pc, #72]	; (8001aa8 <HAL_InitTick+0xac>)
 8001a60:	601a      	str	r2, [r3, #0]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000 / 1000) - 1;
<<<<<<< HEAD
 80019ba:	4b10      	ldr	r3, [pc, #64]	; (80019fc <HAL_InitTick+0xa8>)
 80019bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019c0:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 80019c2:	4a0e      	ldr	r2, [pc, #56]	; (80019fc <HAL_InitTick+0xa8>)
 80019c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c6:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 80019c8:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <HAL_InitTick+0xa8>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ce:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <HAL_InitTick+0xa8>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 80019d4:	4809      	ldr	r0, [pc, #36]	; (80019fc <HAL_InitTick+0xa8>)
 80019d6:	f001 ff57 	bl	8003888 <HAL_TIM_Base_Init>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d104      	bne.n	80019ea <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 80019e0:	4806      	ldr	r0, [pc, #24]	; (80019fc <HAL_InitTick+0xa8>)
 80019e2:	f001 ff86 	bl	80038f2 <HAL_TIM_Base_Start_IT>
 80019e6:	4603      	mov	r3, r0
 80019e8:	e000      	b.n	80019ec <HAL_InitTick+0x98>
=======
 8001a62:	4b10      	ldr	r3, [pc, #64]	; (8001aa4 <HAL_InitTick+0xa8>)
 8001a64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a68:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8001a6a:	4a0e      	ldr	r2, [pc, #56]	; (8001aa4 <HAL_InitTick+0xa8>)
 8001a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a6e:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <HAL_InitTick+0xa8>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a76:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <HAL_InitTick+0xa8>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 8001a7c:	4809      	ldr	r0, [pc, #36]	; (8001aa4 <HAL_InitTick+0xa8>)
 8001a7e:	f001 ffa7 	bl	80039d0 <HAL_TIM_Base_Init>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d104      	bne.n	8001a92 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 8001a88:	4806      	ldr	r0, [pc, #24]	; (8001aa4 <HAL_InitTick+0xa8>)
 8001a8a:	f001 ffd6 	bl	8003a3a <HAL_TIM_Base_Start_IT>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	e000      	b.n	8001a94 <HAL_InitTick+0x98>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  }

  /* Return function status */
  return HAL_ERROR;
<<<<<<< HEAD
 80019ea:	2301      	movs	r3, #1
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3730      	adds	r7, #48	; 0x30
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40023800 	.word	0x40023800
 80019f8:	431bde83 	.word	0x431bde83
 80019fc:	20004a98 	.word	0x20004a98
 8001a00:	40014800 	.word	0x40014800

08001a04 <NMI_Handler>:
=======
 8001a92:	2301      	movs	r3, #1
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3730      	adds	r7, #48	; 0x30
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	431bde83 	.word	0x431bde83
 8001aa4:	20004a98 	.word	0x20004a98
 8001aa8:	40014800 	.word	0x40014800

08001aac <NMI_Handler>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
=======
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
<<<<<<< HEAD
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <HardFault_Handler>:
=======
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <HardFault_Handler>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0
=======
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8001a16:	e7fe      	b.n	8001a16 <HardFault_Handler+0x4>

08001a18 <MemManage_Handler>:
=======
 8001abe:	e7fe      	b.n	8001abe <HardFault_Handler+0x4>

08001ac0 <MemManage_Handler>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
=======
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8001a1c:	e7fe      	b.n	8001a1c <MemManage_Handler+0x4>

08001a1e <BusFault_Handler>:
=======
 8001ac4:	e7fe      	b.n	8001ac4 <MemManage_Handler+0x4>

08001ac6 <BusFault_Handler>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0
=======
 8001ac6:	b480      	push	{r7}
 8001ac8:	af00      	add	r7, sp, #0
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8001a22:	e7fe      	b.n	8001a22 <BusFault_Handler+0x4>

08001a24 <UsageFault_Handler>:
=======
 8001aca:	e7fe      	b.n	8001aca <BusFault_Handler+0x4>

08001acc <UsageFault_Handler>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
=======
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8001a28:	e7fe      	b.n	8001a28 <UsageFault_Handler+0x4>

08001a2a <DebugMon_Handler>:
=======
 8001ad0:	e7fe      	b.n	8001ad0 <UsageFault_Handler+0x4>

08001ad2 <DebugMon_Handler>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0
=======
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 8001a2e:	bf00      	nop
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <TIM1_TRG_COM_TIM11_IRQHandler>:
=======
 8001ad6:	bf00      	nop
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <TIM1_TRG_COM_TIM11_IRQHandler>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
<<<<<<< HEAD
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
=======
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
<<<<<<< HEAD
 8001a3c:	4802      	ldr	r0, [pc, #8]	; (8001a48 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001a3e:	f001 ff7c 	bl	800393a <HAL_TIM_IRQHandler>
=======
 8001ae4:	4802      	ldr	r0, [pc, #8]	; (8001af0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001ae6:	f001 ffcc 	bl	8003a82 <HAL_TIM_IRQHandler>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
<<<<<<< HEAD
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20004a98 	.word	0x20004a98

08001a4c <SystemInit>:
=======
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20004a98 	.word	0x20004a98

08001af4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001afc:	4a14      	ldr	r2, [pc, #80]	; (8001b50 <_sbrk+0x5c>)
 8001afe:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <_sbrk+0x60>)
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b08:	4b13      	ldr	r3, [pc, #76]	; (8001b58 <_sbrk+0x64>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d102      	bne.n	8001b16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b10:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <_sbrk+0x64>)
 8001b12:	4a12      	ldr	r2, [pc, #72]	; (8001b5c <_sbrk+0x68>)
 8001b14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b16:	4b10      	ldr	r3, [pc, #64]	; (8001b58 <_sbrk+0x64>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d207      	bcs.n	8001b34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b24:	f005 fbaa 	bl	800727c <__errno>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	230c      	movs	r3, #12
 8001b2c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001b2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b32:	e009      	b.n	8001b48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b34:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <_sbrk+0x64>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b3a:	4b07      	ldr	r3, [pc, #28]	; (8001b58 <_sbrk+0x64>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4413      	add	r3, r2
 8001b42:	4a05      	ldr	r2, [pc, #20]	; (8001b58 <_sbrk+0x64>)
 8001b44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b46:	68fb      	ldr	r3, [r7, #12]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	20018000 	.word	0x20018000
 8001b54:	00000400 	.word	0x00000400
 8001b58:	20000188 	.word	0x20000188
 8001b5c:	20004b20 	.word	0x20004b20

08001b60 <SystemInit>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< HEAD
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a50:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <SystemInit+0x28>)
 8001a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a56:	4a07      	ldr	r2, [pc, #28]	; (8001a74 <SystemInit+0x28>)
 8001a58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b64:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <SystemInit+0x28>)
 8001b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b6a:	4a07      	ldr	r2, [pc, #28]	; (8001b88 <SystemInit+0x28>)
 8001b6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
<<<<<<< HEAD
 8001a60:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <SystemInit+0x28>)
 8001a62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a66:	609a      	str	r2, [r3, #8]
#endif
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <Reset_Handler>:
=======
 8001b74:	4b04      	ldr	r3, [pc, #16]	; (8001b88 <SystemInit+0x28>)
 8001b76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b7a:	609a      	str	r2, [r3, #8]
#endif
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <Reset_Handler>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
<<<<<<< HEAD
 8001a78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ab0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a7c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a7e:	e003      	b.n	8001a88 <LoopCopyDataInit>

08001a80 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a80:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001a82:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a84:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a86:	3104      	adds	r1, #4

08001a88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a88:	480b      	ldr	r0, [pc, #44]	; (8001ab8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001a8a:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001a8c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a8e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a90:	d3f6      	bcc.n	8001a80 <CopyDataInit>
  ldr  r2, =_sbss
 8001a92:	4a0b      	ldr	r2, [pc, #44]	; (8001ac0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001a94:	e002      	b.n	8001a9c <LoopFillZerobss>

08001a96 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a96:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a98:	f842 3b04 	str.w	r3, [r2], #4

08001a9c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a9c:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001a9e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001aa0:	d3f9      	bcc.n	8001a96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001aa2:	f7ff ffd3 	bl	8001a4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aa6:	f005 fa67 	bl	8006f78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aaa:	f7ff fce9 	bl	8001480 <main>
  bx  lr    
 8001aae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ab0:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001ab4:	08007128 	.word	0x08007128
  ldr  r0, =_sdata
 8001ab8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001abc:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8001ac0:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8001ac4:	20004b1c 	.word	0x20004b1c

08001ac8 <ADC_IRQHandler>:
=======
 8001b8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bc4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b90:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b92:	e003      	b.n	8001b9c <LoopCopyDataInit>

08001b94 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b94:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b96:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b98:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b9a:	3104      	adds	r1, #4

08001b9c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b9c:	480b      	ldr	r0, [pc, #44]	; (8001bcc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b9e:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ba0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ba2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ba4:	d3f6      	bcc.n	8001b94 <CopyDataInit>
  ldr  r2, =_sbss
 8001ba6:	4a0b      	ldr	r2, [pc, #44]	; (8001bd4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ba8:	e002      	b.n	8001bb0 <LoopFillZerobss>

08001baa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001baa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001bac:	f842 3b04 	str.w	r3, [r2], #4

08001bb0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001bb0:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001bb2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001bb4:	d3f9      	bcc.n	8001baa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bb6:	f7ff ffd3 	bl	8001b60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bba:	f005 fb65 	bl	8007288 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bbe:	f7ff fca5 	bl	800150c <main>
  bx  lr    
 8001bc2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bc4:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001bc8:	08007bd0 	.word	0x08007bd0
  ldr  r0, =_sdata
 8001bcc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001bd0:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8001bd4:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8001bd8:	20004b20 	.word	0x20004b20

08001bdc <ADC_IRQHandler>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
<<<<<<< HEAD
 8001ac8:	e7fe      	b.n	8001ac8 <ADC_IRQHandler>
	...

08001acc <HAL_Init>:
=======
 8001bdc:	e7fe      	b.n	8001bdc <ADC_IRQHandler>
	...

08001be0 <HAL_Init>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ad0:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <HAL_Init+0x40>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a0d      	ldr	r2, [pc, #52]	; (8001b0c <HAL_Init+0x40>)
 8001ad6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ada:	6013      	str	r3, [r2, #0]
=======
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001be4:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <HAL_Init+0x40>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a0d      	ldr	r2, [pc, #52]	; (8001c20 <HAL_Init+0x40>)
 8001bea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bee:	6013      	str	r3, [r2, #0]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
<<<<<<< HEAD
 8001adc:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <HAL_Init+0x40>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a0a      	ldr	r2, [pc, #40]	; (8001b0c <HAL_Init+0x40>)
 8001ae2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ae6:	6013      	str	r3, [r2, #0]
=======
 8001bf0:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <HAL_Init+0x40>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a0a      	ldr	r2, [pc, #40]	; (8001c20 <HAL_Init+0x40>)
 8001bf6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bfa:	6013      	str	r3, [r2, #0]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
 8001ae8:	4b08      	ldr	r3, [pc, #32]	; (8001b0c <HAL_Init+0x40>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a07      	ldr	r2, [pc, #28]	; (8001b0c <HAL_Init+0x40>)
 8001aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af2:	6013      	str	r3, [r2, #0]
=======
 8001bfc:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <HAL_Init+0x40>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a07      	ldr	r2, [pc, #28]	; (8001c20 <HAL_Init+0x40>)
 8001c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c06:	6013      	str	r3, [r2, #0]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 8001af4:	2003      	movs	r0, #3
 8001af6:	f000 f8d8 	bl	8001caa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001afa:	2000      	movs	r0, #0
 8001afc:	f7ff ff2a 	bl	8001954 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b00:	f7ff fe70 	bl	80017e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40023c00 	.word	0x40023c00

08001b10 <HAL_IncTick>:
=======
 8001c08:	2003      	movs	r0, #3
 8001c0a:	f000 f8d8 	bl	8001dbe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c0e:	2000      	movs	r0, #0
 8001c10:	f7ff fef4 	bl	80019fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c14:	f7ff fe3a 	bl	800188c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40023c00 	.word	0x40023c00

08001c24 <HAL_IncTick>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b14:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <HAL_IncTick+0x20>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <HAL_IncTick+0x24>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4413      	add	r3, r2
 8001b20:	4a04      	ldr	r2, [pc, #16]	; (8001b34 <HAL_IncTick+0x24>)
 8001b22:	6013      	str	r3, [r2, #0]
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	20000008 	.word	0x20000008
 8001b34:	20004ad8 	.word	0x20004ad8

08001b38 <HAL_GetTick>:
=======
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c28:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <HAL_IncTick+0x20>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <HAL_IncTick+0x24>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4413      	add	r3, r2
 8001c34:	4a04      	ldr	r2, [pc, #16]	; (8001c48 <HAL_IncTick+0x24>)
 8001c36:	6013      	str	r3, [r2, #0]
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	20000008 	.word	0x20000008
 8001c48:	20004ad8 	.word	0x20004ad8

08001c4c <HAL_GetTick>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b3c:	4b03      	ldr	r3, [pc, #12]	; (8001b4c <HAL_GetTick+0x14>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	20004ad8 	.word	0x20004ad8

08001b50 <__NVIC_SetPriorityGrouping>:
=======
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c50:	4b03      	ldr	r3, [pc, #12]	; (8001c60 <HAL_GetTick+0x14>)
 8001c52:	681b      	ldr	r3, [r3, #0]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	20004ad8 	.word	0x20004ad8

08001c64 <__NVIC_SetPriorityGrouping>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b60:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <__NVIC_SetPriorityGrouping+0x44>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b66:	68ba      	ldr	r2, [r7, #8]
 8001b68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b82:	4a04      	ldr	r2, [pc, #16]	; (8001b94 <__NVIC_SetPriorityGrouping+0x44>)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	60d3      	str	r3, [r2, #12]
}
 8001b88:	bf00      	nop
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <__NVIC_GetPriorityGrouping>:
=======
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c74:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c7a:	68ba      	ldr	r2, [r7, #8]
 8001c7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c80:	4013      	ands	r3, r2
 8001c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c96:	4a04      	ldr	r2, [pc, #16]	; (8001ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	60d3      	str	r3, [r2, #12]
}
 8001c9c:	bf00      	nop
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <__NVIC_GetPriorityGrouping>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b9c:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	0a1b      	lsrs	r3, r3, #8
 8001ba2:	f003 0307 	and.w	r3, r3, #7
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <__NVIC_EnableIRQ>:
=======
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cb0:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	0a1b      	lsrs	r3, r3, #8
 8001cb6:	f003 0307 	and.w	r3, r3, #7
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <__NVIC_EnableIRQ>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	db0b      	blt.n	8001bde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	f003 021f 	and.w	r2, r3, #31
 8001bcc:	4907      	ldr	r1, [pc, #28]	; (8001bec <__NVIC_EnableIRQ+0x38>)
 8001bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd2:	095b      	lsrs	r3, r3, #5
 8001bd4:	2001      	movs	r0, #1
 8001bd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	e000e100 	.word	0xe000e100

08001bf0 <__NVIC_SetPriority>:
=======
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	db0b      	blt.n	8001cf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	f003 021f 	and.w	r2, r3, #31
 8001ce0:	4907      	ldr	r1, [pc, #28]	; (8001d00 <__NVIC_EnableIRQ+0x38>)
 8001ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce6:	095b      	lsrs	r3, r3, #5
 8001ce8:	2001      	movs	r0, #1
 8001cea:	fa00 f202 	lsl.w	r2, r0, r2
 8001cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	e000e100 	.word	0xe000e100

08001d04 <__NVIC_SetPriority>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	6039      	str	r1, [r7, #0]
 8001bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	db0a      	blt.n	8001c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	490c      	ldr	r1, [pc, #48]	; (8001c3c <__NVIC_SetPriority+0x4c>)
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	0112      	lsls	r2, r2, #4
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	440b      	add	r3, r1
 8001c14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	6039      	str	r1, [r7, #0]
 8001d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	db0a      	blt.n	8001d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	490c      	ldr	r1, [pc, #48]	; (8001d50 <__NVIC_SetPriority+0x4c>)
 8001d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d22:	0112      	lsls	r2, r2, #4
 8001d24:	b2d2      	uxtb	r2, r2
 8001d26:	440b      	add	r3, r1
 8001d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 8001c18:	e00a      	b.n	8001c30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	4908      	ldr	r1, [pc, #32]	; (8001c40 <__NVIC_SetPriority+0x50>)
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	3b04      	subs	r3, #4
 8001c28:	0112      	lsls	r2, r2, #4
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	440b      	add	r3, r1
 8001c2e:	761a      	strb	r2, [r3, #24]
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	e000e100 	.word	0xe000e100
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <NVIC_EncodePriority>:
=======
 8001d2c:	e00a      	b.n	8001d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	4908      	ldr	r1, [pc, #32]	; (8001d54 <__NVIC_SetPriority+0x50>)
 8001d34:	79fb      	ldrb	r3, [r7, #7]
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	3b04      	subs	r3, #4
 8001d3c:	0112      	lsls	r2, r2, #4
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	440b      	add	r3, r1
 8001d42:	761a      	strb	r2, [r3, #24]
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	e000e100 	.word	0xe000e100
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <NVIC_EncodePriority>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8001c44:	b480      	push	{r7}
 8001c46:	b089      	sub	sp, #36	; 0x24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	61fb      	str	r3, [r7, #28]
=======
 8001d58:	b480      	push	{r7}
 8001d5a:	b089      	sub	sp, #36	; 0x24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	61fb      	str	r3, [r7, #28]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f1c3 0307 	rsb	r3, r3, #7
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	bf28      	it	cs
 8001c62:	2304      	movcs	r3, #4
 8001c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	3304      	adds	r3, #4
 8001c6a:	2b06      	cmp	r3, #6
 8001c6c:	d902      	bls.n	8001c74 <NVIC_EncodePriority+0x30>
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3b03      	subs	r3, #3
 8001c72:	e000      	b.n	8001c76 <NVIC_EncodePriority+0x32>
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43da      	mvns	r2, r3
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	401a      	ands	r2, r3
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	fa01 f303 	lsl.w	r3, r1, r3
 8001c96:	43d9      	mvns	r1, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c9c:	4313      	orrs	r3, r2
         );
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3724      	adds	r7, #36	; 0x24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <HAL_NVIC_SetPriorityGrouping>:
=======
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f1c3 0307 	rsb	r3, r3, #7
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	bf28      	it	cs
 8001d76:	2304      	movcs	r3, #4
 8001d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	2b06      	cmp	r3, #6
 8001d80:	d902      	bls.n	8001d88 <NVIC_EncodePriority+0x30>
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	3b03      	subs	r3, #3
 8001d86:	e000      	b.n	8001d8a <NVIC_EncodePriority+0x32>
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43da      	mvns	r2, r3
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	401a      	ands	r2, r3
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001da0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	fa01 f303 	lsl.w	r3, r1, r3
 8001daa:	43d9      	mvns	r1, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db0:	4313      	orrs	r3, r2
         );
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3724      	adds	r7, #36	; 0x24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
=======
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7ff ff4c 	bl	8001b50 <__NVIC_SetPriorityGrouping>
}
 8001cb8:	bf00      	nop
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <HAL_NVIC_SetPriority>:
=======
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7ff ff4c 	bl	8001c64 <__NVIC_SetPriorityGrouping>
}
 8001dcc:	bf00      	nop
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <HAL_NVIC_SetPriority>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
 8001ccc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	617b      	str	r3, [r7, #20]
=======
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
 8001de0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 8001cd2:	f7ff ff61 	bl	8001b98 <__NVIC_GetPriorityGrouping>
 8001cd6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	68b9      	ldr	r1, [r7, #8]
 8001cdc:	6978      	ldr	r0, [r7, #20]
 8001cde:	f7ff ffb1 	bl	8001c44 <NVIC_EncodePriority>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ce8:	4611      	mov	r1, r2
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff ff80 	bl	8001bf0 <__NVIC_SetPriority>
}
 8001cf0:	bf00      	nop
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <HAL_NVIC_EnableIRQ>:
=======
 8001de6:	f7ff ff61 	bl	8001cac <__NVIC_GetPriorityGrouping>
 8001dea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	68b9      	ldr	r1, [r7, #8]
 8001df0:	6978      	ldr	r0, [r7, #20]
 8001df2:	f7ff ffb1 	bl	8001d58 <NVIC_EncodePriority>
 8001df6:	4602      	mov	r2, r0
 8001df8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dfc:	4611      	mov	r1, r2
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff ff80 	bl	8001d04 <__NVIC_SetPriority>
}
 8001e04:	bf00      	nop
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <HAL_NVIC_EnableIRQ>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	71fb      	strb	r3, [r7, #7]
=======
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	71fb      	strb	r3, [r7, #7]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 8001d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff ff54 	bl	8001bb4 <__NVIC_EnableIRQ>
}
 8001d0c:	bf00      	nop
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <HAL_GPIO_Init>:
=======
 8001e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff ff54 	bl	8001cc8 <__NVIC_EnableIRQ>
}
 8001e20:	bf00      	nop
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <HAL_GPIO_Init>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 8001d14:	b480      	push	{r7}
 8001d16:	b089      	sub	sp, #36	; 0x24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d22:	2300      	movs	r3, #0
 8001d24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61bb      	str	r3, [r7, #24]
=======
 8001e28:	b480      	push	{r7}
 8001e2a:	b089      	sub	sp, #36	; 0x24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e32:	2300      	movs	r3, #0
 8001e34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61bb      	str	r3, [r7, #24]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
<<<<<<< HEAD
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61fb      	str	r3, [r7, #28]
 8001d2e:	e159      	b.n	8001fe4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d30:	2201      	movs	r2, #1
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	697a      	ldr	r2, [r7, #20]
 8001d40:	4013      	ands	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	f040 8148 	bne.w	8001fde <HAL_GPIO_Init+0x2ca>
=======
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61fb      	str	r3, [r7, #28]
 8001e42:	e159      	b.n	80020f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e44:	2201      	movs	r2, #1
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	4013      	ands	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	f040 8148 	bne.w	80020f2 <HAL_GPIO_Init+0x2ca>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
<<<<<<< HEAD
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d00b      	beq.n	8001d6e <HAL_GPIO_Init+0x5a>
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d007      	beq.n	8001d6e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d62:	2b11      	cmp	r3, #17
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b12      	cmp	r3, #18
 8001d6c:	d130      	bne.n	8001dd0 <HAL_GPIO_Init+0xbc>
=======
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d00b      	beq.n	8001e82 <HAL_GPIO_Init+0x5a>
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d007      	beq.n	8001e82 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e76:	2b11      	cmp	r3, #17
 8001e78:	d003      	beq.n	8001e82 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b12      	cmp	r3, #18
 8001e80:	d130      	bne.n	8001ee4 <HAL_GPIO_Init+0xbc>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
<<<<<<< HEAD
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	2203      	movs	r2, #3
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4013      	ands	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001da4:	2201      	movs	r2, #1
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	091b      	lsrs	r3, r3, #4
 8001dba:	f003 0201 	and.w	r2, r3, #1
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	605a      	str	r2, [r3, #4]
=======
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	2203      	movs	r2, #3
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43db      	mvns	r3, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4013      	ands	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	68da      	ldr	r2, [r3, #12]
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001eb8:	2201      	movs	r2, #1
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	091b      	lsrs	r3, r3, #4
 8001ece:	f003 0201 	and.w	r2, r3, #1
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	605a      	str	r2, [r3, #4]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
<<<<<<< HEAD
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	2203      	movs	r2, #3
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4013      	ands	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d003      	beq.n	8001e10 <HAL_GPIO_Init+0xfc>
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b12      	cmp	r3, #18
 8001e0e:	d123      	bne.n	8001e58 <HAL_GPIO_Init+0x144>
=======
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	2203      	movs	r2, #3
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d003      	beq.n	8001f24 <HAL_GPIO_Init+0xfc>
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2b12      	cmp	r3, #18
 8001f22:	d123      	bne.n	8001f6c <HAL_GPIO_Init+0x144>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
<<<<<<< HEAD
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	08da      	lsrs	r2, r3, #3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3208      	adds	r2, #8
 8001e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	f003 0307 	and.w	r3, r3, #7
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	220f      	movs	r2, #15
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	691a      	ldr	r2, [r3, #16]
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	08da      	lsrs	r2, r3, #3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	3208      	adds	r2, #8
 8001e52:	69b9      	ldr	r1, [r7, #24]
 8001e54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	08da      	lsrs	r2, r3, #3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3208      	adds	r2, #8
 8001f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	220f      	movs	r2, #15
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43db      	mvns	r3, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4013      	ands	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	691a      	ldr	r2, [r3, #16]
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	08da      	lsrs	r2, r3, #3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	3208      	adds	r2, #8
 8001f66:	69b9      	ldr	r1, [r7, #24]
 8001f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< HEAD
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	2203      	movs	r2, #3
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f003 0203 	and.w	r2, r3, #3
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	601a      	str	r2, [r3, #0]
=======
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	2203      	movs	r2, #3
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4013      	ands	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 0203 	and.w	r2, r3, #3
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	601a      	str	r2, [r3, #0]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
<<<<<<< HEAD
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f000 80a2 	beq.w	8001fde <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	4b56      	ldr	r3, [pc, #344]	; (8001ff8 <HAL_GPIO_Init+0x2e4>)
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea2:	4a55      	ldr	r2, [pc, #340]	; (8001ff8 <HAL_GPIO_Init+0x2e4>)
 8001ea4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eaa:	4b53      	ldr	r3, [pc, #332]	; (8001ff8 <HAL_GPIO_Init+0x2e4>)
 8001eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eb6:	4a51      	ldr	r2, [pc, #324]	; (8001ffc <HAL_GPIO_Init+0x2e8>)
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	089b      	lsrs	r3, r3, #2
 8001ebc:	3302      	adds	r3, #2
 8001ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	f003 0303 	and.w	r3, r3, #3
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	220f      	movs	r2, #15
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a48      	ldr	r2, [pc, #288]	; (8002000 <HAL_GPIO_Init+0x2ec>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d019      	beq.n	8001f16 <HAL_GPIO_Init+0x202>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a47      	ldr	r2, [pc, #284]	; (8002004 <HAL_GPIO_Init+0x2f0>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d013      	beq.n	8001f12 <HAL_GPIO_Init+0x1fe>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a46      	ldr	r2, [pc, #280]	; (8002008 <HAL_GPIO_Init+0x2f4>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d00d      	beq.n	8001f0e <HAL_GPIO_Init+0x1fa>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a45      	ldr	r2, [pc, #276]	; (800200c <HAL_GPIO_Init+0x2f8>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d007      	beq.n	8001f0a <HAL_GPIO_Init+0x1f6>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a44      	ldr	r2, [pc, #272]	; (8002010 <HAL_GPIO_Init+0x2fc>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d101      	bne.n	8001f06 <HAL_GPIO_Init+0x1f2>
 8001f02:	2304      	movs	r3, #4
 8001f04:	e008      	b.n	8001f18 <HAL_GPIO_Init+0x204>
 8001f06:	2307      	movs	r3, #7
 8001f08:	e006      	b.n	8001f18 <HAL_GPIO_Init+0x204>
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e004      	b.n	8001f18 <HAL_GPIO_Init+0x204>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e002      	b.n	8001f18 <HAL_GPIO_Init+0x204>
 8001f12:	2301      	movs	r3, #1
 8001f14:	e000      	b.n	8001f18 <HAL_GPIO_Init+0x204>
 8001f16:	2300      	movs	r3, #0
 8001f18:	69fa      	ldr	r2, [r7, #28]
 8001f1a:	f002 0203 	and.w	r2, r2, #3
 8001f1e:	0092      	lsls	r2, r2, #2
 8001f20:	4093      	lsls	r3, r2
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f28:	4934      	ldr	r1, [pc, #208]	; (8001ffc <HAL_GPIO_Init+0x2e8>)
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	089b      	lsrs	r3, r3, #2
 8001f2e:	3302      	adds	r3, #2
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f36:	4b37      	ldr	r3, [pc, #220]	; (8002014 <HAL_GPIO_Init+0x300>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	4013      	ands	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d003      	beq.n	8001f5a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f5a:	4a2e      	ldr	r2, [pc, #184]	; (8002014 <HAL_GPIO_Init+0x300>)
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f60:	4b2c      	ldr	r3, [pc, #176]	; (8002014 <HAL_GPIO_Init+0x300>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d003      	beq.n	8001f84 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f84:	4a23      	ldr	r2, [pc, #140]	; (8002014 <HAL_GPIO_Init+0x300>)
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f8a:	4b22      	ldr	r3, [pc, #136]	; (8002014 <HAL_GPIO_Init+0x300>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	43db      	mvns	r3, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4013      	ands	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fae:	4a19      	ldr	r2, [pc, #100]	; (8002014 <HAL_GPIO_Init+0x300>)
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fb4:	4b17      	ldr	r3, [pc, #92]	; (8002014 <HAL_GPIO_Init+0x300>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d003      	beq.n	8001fd8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fd8:	4a0e      	ldr	r2, [pc, #56]	; (8002014 <HAL_GPIO_Init+0x300>)
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	61fb      	str	r3, [r7, #28]
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	2b0f      	cmp	r3, #15
 8001fe8:	f67f aea2 	bls.w	8001d30 <HAL_GPIO_Init+0x1c>
=======
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f000 80a2 	beq.w	80020f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	4b56      	ldr	r3, [pc, #344]	; (800210c <HAL_GPIO_Init+0x2e4>)
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb6:	4a55      	ldr	r2, [pc, #340]	; (800210c <HAL_GPIO_Init+0x2e4>)
 8001fb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001fbe:	4b53      	ldr	r3, [pc, #332]	; (800210c <HAL_GPIO_Init+0x2e4>)
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fca:	4a51      	ldr	r2, [pc, #324]	; (8002110 <HAL_GPIO_Init+0x2e8>)
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	089b      	lsrs	r3, r3, #2
 8001fd0:	3302      	adds	r3, #2
 8001fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	220f      	movs	r2, #15
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4013      	ands	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a48      	ldr	r2, [pc, #288]	; (8002114 <HAL_GPIO_Init+0x2ec>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d019      	beq.n	800202a <HAL_GPIO_Init+0x202>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a47      	ldr	r2, [pc, #284]	; (8002118 <HAL_GPIO_Init+0x2f0>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d013      	beq.n	8002026 <HAL_GPIO_Init+0x1fe>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a46      	ldr	r2, [pc, #280]	; (800211c <HAL_GPIO_Init+0x2f4>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d00d      	beq.n	8002022 <HAL_GPIO_Init+0x1fa>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a45      	ldr	r2, [pc, #276]	; (8002120 <HAL_GPIO_Init+0x2f8>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d007      	beq.n	800201e <HAL_GPIO_Init+0x1f6>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a44      	ldr	r2, [pc, #272]	; (8002124 <HAL_GPIO_Init+0x2fc>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d101      	bne.n	800201a <HAL_GPIO_Init+0x1f2>
 8002016:	2304      	movs	r3, #4
 8002018:	e008      	b.n	800202c <HAL_GPIO_Init+0x204>
 800201a:	2307      	movs	r3, #7
 800201c:	e006      	b.n	800202c <HAL_GPIO_Init+0x204>
 800201e:	2303      	movs	r3, #3
 8002020:	e004      	b.n	800202c <HAL_GPIO_Init+0x204>
 8002022:	2302      	movs	r3, #2
 8002024:	e002      	b.n	800202c <HAL_GPIO_Init+0x204>
 8002026:	2301      	movs	r3, #1
 8002028:	e000      	b.n	800202c <HAL_GPIO_Init+0x204>
 800202a:	2300      	movs	r3, #0
 800202c:	69fa      	ldr	r2, [r7, #28]
 800202e:	f002 0203 	and.w	r2, r2, #3
 8002032:	0092      	lsls	r2, r2, #2
 8002034:	4093      	lsls	r3, r2
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4313      	orrs	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800203c:	4934      	ldr	r1, [pc, #208]	; (8002110 <HAL_GPIO_Init+0x2e8>)
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	089b      	lsrs	r3, r3, #2
 8002042:	3302      	adds	r3, #2
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800204a:	4b37      	ldr	r3, [pc, #220]	; (8002128 <HAL_GPIO_Init+0x300>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	43db      	mvns	r3, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4013      	ands	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	4313      	orrs	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800206e:	4a2e      	ldr	r2, [pc, #184]	; (8002128 <HAL_GPIO_Init+0x300>)
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002074:	4b2c      	ldr	r3, [pc, #176]	; (8002128 <HAL_GPIO_Init+0x300>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	43db      	mvns	r3, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4013      	ands	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d003      	beq.n	8002098 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	4313      	orrs	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002098:	4a23      	ldr	r2, [pc, #140]	; (8002128 <HAL_GPIO_Init+0x300>)
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800209e:	4b22      	ldr	r3, [pc, #136]	; (8002128 <HAL_GPIO_Init+0x300>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	43db      	mvns	r3, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4013      	ands	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	4313      	orrs	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020c2:	4a19      	ldr	r2, [pc, #100]	; (8002128 <HAL_GPIO_Init+0x300>)
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020c8:	4b17      	ldr	r3, [pc, #92]	; (8002128 <HAL_GPIO_Init+0x300>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d003      	beq.n	80020ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020ec:	4a0e      	ldr	r2, [pc, #56]	; (8002128 <HAL_GPIO_Init+0x300>)
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	3301      	adds	r3, #1
 80020f6:	61fb      	str	r3, [r7, #28]
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	2b0f      	cmp	r3, #15
 80020fc:	f67f aea2 	bls.w	8001e44 <HAL_GPIO_Init+0x1c>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
      }
    }
  }
}
<<<<<<< HEAD
 8001fec:	bf00      	nop
 8001fee:	3724      	adds	r7, #36	; 0x24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	40013800 	.word	0x40013800
 8002000:	40020000 	.word	0x40020000
 8002004:	40020400 	.word	0x40020400
 8002008:	40020800 	.word	0x40020800
 800200c:	40020c00 	.word	0x40020c00
 8002010:	40021000 	.word	0x40021000
 8002014:	40013c00 	.word	0x40013c00

08002018 <HAL_GPIO_WritePin>:
=======
 8002100:	bf00      	nop
 8002102:	3724      	adds	r7, #36	; 0x24
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	40023800 	.word	0x40023800
 8002110:	40013800 	.word	0x40013800
 8002114:	40020000 	.word	0x40020000
 8002118:	40020400 	.word	0x40020400
 800211c:	40020800 	.word	0x40020800
 8002120:	40020c00 	.word	0x40020c00
 8002124:	40021000 	.word	0x40021000
 8002128:	40013c00 	.word	0x40013c00

0800212c <HAL_GPIO_WritePin>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	460b      	mov	r3, r1
 8002022:	807b      	strh	r3, [r7, #2]
 8002024:	4613      	mov	r3, r2
 8002026:	707b      	strb	r3, [r7, #1]
=======
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	460b      	mov	r3, r1
 8002136:	807b      	strh	r3, [r7, #2]
 8002138:	4613      	mov	r3, r2
 800213a:	707b      	strb	r3, [r7, #1]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 8002028:	787b      	ldrb	r3, [r7, #1]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800202e:	887a      	ldrh	r2, [r7, #2]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	619a      	str	r2, [r3, #24]
=======
 800213c:	787b      	ldrb	r3, [r7, #1]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002142:	887a      	ldrh	r2, [r7, #2]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	619a      	str	r2, [r3, #24]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
<<<<<<< HEAD
 8002034:	e003      	b.n	800203e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002036:	887b      	ldrh	r3, [r7, #2]
 8002038:	041a      	lsls	r2, r3, #16
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	619a      	str	r2, [r3, #24]
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
	...

0800204c <HAL_I2C_Init>:
=======
 8002148:	e003      	b.n	8002152 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800214a:	887b      	ldrh	r3, [r7, #2]
 800214c:	041a      	lsls	r2, r3, #16
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	619a      	str	r2, [r3, #24]
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
 8002166:	460b      	mov	r3, r1
 8002168:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	695a      	ldr	r2, [r3, #20]
 800216e:	887b      	ldrh	r3, [r7, #2]
 8002170:	401a      	ands	r2, r3
 8002172:	887b      	ldrh	r3, [r7, #2]
 8002174:	429a      	cmp	r2, r3
 8002176:	d104      	bne.n	8002182 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002178:	887b      	ldrh	r3, [r7, #2]
 800217a:	041a      	lsls	r2, r3, #16
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002180:	e002      	b.n	8002188 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002182:	887a      	ldrh	r2, [r7, #2]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	619a      	str	r2, [r3, #24]
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <HAL_I2C_Init>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
=======
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
<<<<<<< HEAD
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e11f      	b.n	800229e <HAL_I2C_Init+0x252>
=======
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e11f      	b.n	80023e6 <HAL_I2C_Init+0x252>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
<<<<<<< HEAD
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d106      	bne.n	8002078 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d106      	bne.n	80021c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
<<<<<<< HEAD
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7ff fbde 	bl	8001834 <HAL_I2C_MspInit>
=======
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7ff fb8e 	bl	80018dc <HAL_I2C_MspInit>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
<<<<<<< HEAD
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2224      	movs	r2, #36	; 0x24
 800207c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0201 	bic.w	r2, r2, #1
 800208e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800209e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020b0:	f001 fb90 	bl	80037d4 <HAL_RCC_GetPCLK1Freq>
 80020b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	4a7b      	ldr	r2, [pc, #492]	; (80022a8 <HAL_I2C_Init+0x25c>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d807      	bhi.n	80020d0 <HAL_I2C_Init+0x84>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4a7a      	ldr	r2, [pc, #488]	; (80022ac <HAL_I2C_Init+0x260>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	bf94      	ite	ls
 80020c8:	2301      	movls	r3, #1
 80020ca:	2300      	movhi	r3, #0
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	e006      	b.n	80020de <HAL_I2C_Init+0x92>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4a77      	ldr	r2, [pc, #476]	; (80022b0 <HAL_I2C_Init+0x264>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	bf94      	ite	ls
 80020d8:	2301      	movls	r3, #1
 80020da:	2300      	movhi	r3, #0
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e0db      	b.n	800229e <HAL_I2C_Init+0x252>
=======
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2224      	movs	r2, #36	; 0x24
 80021c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 0201 	bic.w	r2, r2, #1
 80021d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021f8:	f001 fb90 	bl	800391c <HAL_RCC_GetPCLK1Freq>
 80021fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	4a7b      	ldr	r2, [pc, #492]	; (80023f0 <HAL_I2C_Init+0x25c>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d807      	bhi.n	8002218 <HAL_I2C_Init+0x84>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4a7a      	ldr	r2, [pc, #488]	; (80023f4 <HAL_I2C_Init+0x260>)
 800220c:	4293      	cmp	r3, r2
 800220e:	bf94      	ite	ls
 8002210:	2301      	movls	r3, #1
 8002212:	2300      	movhi	r3, #0
 8002214:	b2db      	uxtb	r3, r3
 8002216:	e006      	b.n	8002226 <HAL_I2C_Init+0x92>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	4a77      	ldr	r2, [pc, #476]	; (80023f8 <HAL_I2C_Init+0x264>)
 800221c:	4293      	cmp	r3, r2
 800221e:	bf94      	ite	ls
 8002220:	2301      	movls	r3, #1
 8002222:	2300      	movhi	r3, #0
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e0db      	b.n	80023e6 <HAL_I2C_Init+0x252>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
<<<<<<< HEAD
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	4a72      	ldr	r2, [pc, #456]	; (80022b4 <HAL_I2C_Init+0x268>)
 80020ea:	fba2 2303 	umull	r2, r3, r2, r3
 80020ee:	0c9b      	lsrs	r3, r3, #18
 80020f0:	60bb      	str	r3, [r7, #8]
=======
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	4a72      	ldr	r2, [pc, #456]	; (80023fc <HAL_I2C_Init+0x268>)
 8002232:	fba2 2303 	umull	r2, r3, r2, r3
 8002236:	0c9b      	lsrs	r3, r3, #18
 8002238:	60bb      	str	r3, [r7, #8]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
<<<<<<< HEAD
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68ba      	ldr	r2, [r7, #8]
 8002102:	430a      	orrs	r2, r1
 8002104:	605a      	str	r2, [r3, #4]
=======
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68ba      	ldr	r2, [r7, #8]
 800224a:	430a      	orrs	r2, r1
 800224c:	605a      	str	r2, [r3, #4]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
<<<<<<< HEAD
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	4a64      	ldr	r2, [pc, #400]	; (80022a8 <HAL_I2C_Init+0x25c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d802      	bhi.n	8002120 <HAL_I2C_Init+0xd4>
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	3301      	adds	r3, #1
 800211e:	e009      	b.n	8002134 <HAL_I2C_Init+0xe8>
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002126:	fb02 f303 	mul.w	r3, r2, r3
 800212a:	4a63      	ldr	r2, [pc, #396]	; (80022b8 <HAL_I2C_Init+0x26c>)
 800212c:	fba2 2303 	umull	r2, r3, r2, r3
 8002130:	099b      	lsrs	r3, r3, #6
 8002132:	3301      	adds	r3, #1
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	6812      	ldr	r2, [r2, #0]
 8002138:	430b      	orrs	r3, r1
 800213a:	6213      	str	r3, [r2, #32]
=======
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	4a64      	ldr	r2, [pc, #400]	; (80023f0 <HAL_I2C_Init+0x25c>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d802      	bhi.n	8002268 <HAL_I2C_Init+0xd4>
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	3301      	adds	r3, #1
 8002266:	e009      	b.n	800227c <HAL_I2C_Init+0xe8>
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800226e:	fb02 f303 	mul.w	r3, r2, r3
 8002272:	4a63      	ldr	r2, [pc, #396]	; (8002400 <HAL_I2C_Init+0x26c>)
 8002274:	fba2 2303 	umull	r2, r3, r2, r3
 8002278:	099b      	lsrs	r3, r3, #6
 800227a:	3301      	adds	r3, #1
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	6812      	ldr	r2, [r2, #0]
 8002280:	430b      	orrs	r3, r1
 8002282:	6213      	str	r3, [r2, #32]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
<<<<<<< HEAD
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002146:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	4956      	ldr	r1, [pc, #344]	; (80022a8 <HAL_I2C_Init+0x25c>)
 8002150:	428b      	cmp	r3, r1
 8002152:	d80d      	bhi.n	8002170 <HAL_I2C_Init+0x124>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	1e59      	subs	r1, r3, #1
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002162:	3301      	adds	r3, #1
 8002164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002168:	2b04      	cmp	r3, #4
 800216a:	bf38      	it	cc
 800216c:	2304      	movcc	r3, #4
 800216e:	e04f      	b.n	8002210 <HAL_I2C_Init+0x1c4>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d111      	bne.n	800219c <HAL_I2C_Init+0x150>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	1e58      	subs	r0, r3, #1
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6859      	ldr	r1, [r3, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	440b      	add	r3, r1
 8002186:	fbb0 f3f3 	udiv	r3, r0, r3
 800218a:	3301      	adds	r3, #1
 800218c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002190:	2b00      	cmp	r3, #0
 8002192:	bf0c      	ite	eq
 8002194:	2301      	moveq	r3, #1
 8002196:	2300      	movne	r3, #0
 8002198:	b2db      	uxtb	r3, r3
 800219a:	e012      	b.n	80021c2 <HAL_I2C_Init+0x176>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	1e58      	subs	r0, r3, #1
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6859      	ldr	r1, [r3, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	440b      	add	r3, r1
 80021aa:	0099      	lsls	r1, r3, #2
 80021ac:	440b      	add	r3, r1
 80021ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80021b2:	3301      	adds	r3, #1
 80021b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	bf0c      	ite	eq
 80021bc:	2301      	moveq	r3, #1
 80021be:	2300      	movne	r3, #0
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <HAL_I2C_Init+0x17e>
 80021c6:	2301      	movs	r3, #1
 80021c8:	e022      	b.n	8002210 <HAL_I2C_Init+0x1c4>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10e      	bne.n	80021f0 <HAL_I2C_Init+0x1a4>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	1e58      	subs	r0, r3, #1
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6859      	ldr	r1, [r3, #4]
 80021da:	460b      	mov	r3, r1
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	440b      	add	r3, r1
 80021e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80021e4:	3301      	adds	r3, #1
 80021e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021ee:	e00f      	b.n	8002210 <HAL_I2C_Init+0x1c4>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	1e58      	subs	r0, r3, #1
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6859      	ldr	r1, [r3, #4]
 80021f8:	460b      	mov	r3, r1
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	440b      	add	r3, r1
 80021fe:	0099      	lsls	r1, r3, #2
 8002200:	440b      	add	r3, r1
 8002202:	fbb0 f3f3 	udiv	r3, r0, r3
 8002206:	3301      	adds	r3, #1
 8002208:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800220c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	6809      	ldr	r1, [r1, #0]
 8002214:	4313      	orrs	r3, r2
 8002216:	61cb      	str	r3, [r1, #28]
=======
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800228e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	4956      	ldr	r1, [pc, #344]	; (80023f0 <HAL_I2C_Init+0x25c>)
 8002298:	428b      	cmp	r3, r1
 800229a:	d80d      	bhi.n	80022b8 <HAL_I2C_Init+0x124>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	1e59      	subs	r1, r3, #1
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80022aa:	3301      	adds	r3, #1
 80022ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022b0:	2b04      	cmp	r3, #4
 80022b2:	bf38      	it	cc
 80022b4:	2304      	movcc	r3, #4
 80022b6:	e04f      	b.n	8002358 <HAL_I2C_Init+0x1c4>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d111      	bne.n	80022e4 <HAL_I2C_Init+0x150>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	1e58      	subs	r0, r3, #1
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6859      	ldr	r1, [r3, #4]
 80022c8:	460b      	mov	r3, r1
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	440b      	add	r3, r1
 80022ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80022d2:	3301      	adds	r3, #1
 80022d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022d8:	2b00      	cmp	r3, #0
 80022da:	bf0c      	ite	eq
 80022dc:	2301      	moveq	r3, #1
 80022de:	2300      	movne	r3, #0
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	e012      	b.n	800230a <HAL_I2C_Init+0x176>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	1e58      	subs	r0, r3, #1
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6859      	ldr	r1, [r3, #4]
 80022ec:	460b      	mov	r3, r1
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	0099      	lsls	r1, r3, #2
 80022f4:	440b      	add	r3, r1
 80022f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022fa:	3301      	adds	r3, #1
 80022fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002300:	2b00      	cmp	r3, #0
 8002302:	bf0c      	ite	eq
 8002304:	2301      	moveq	r3, #1
 8002306:	2300      	movne	r3, #0
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <HAL_I2C_Init+0x17e>
 800230e:	2301      	movs	r3, #1
 8002310:	e022      	b.n	8002358 <HAL_I2C_Init+0x1c4>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d10e      	bne.n	8002338 <HAL_I2C_Init+0x1a4>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	1e58      	subs	r0, r3, #1
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6859      	ldr	r1, [r3, #4]
 8002322:	460b      	mov	r3, r1
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	440b      	add	r3, r1
 8002328:	fbb0 f3f3 	udiv	r3, r0, r3
 800232c:	3301      	adds	r3, #1
 800232e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002336:	e00f      	b.n	8002358 <HAL_I2C_Init+0x1c4>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	1e58      	subs	r0, r3, #1
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6859      	ldr	r1, [r3, #4]
 8002340:	460b      	mov	r3, r1
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	440b      	add	r3, r1
 8002346:	0099      	lsls	r1, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	fbb0 f3f3 	udiv	r3, r0, r3
 800234e:	3301      	adds	r3, #1
 8002350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002354:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002358:	6879      	ldr	r1, [r7, #4]
 800235a:	6809      	ldr	r1, [r1, #0]
 800235c:	4313      	orrs	r3, r2
 800235e:	61cb      	str	r3, [r1, #28]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
<<<<<<< HEAD
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69da      	ldr	r2, [r3, #28]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a1b      	ldr	r3, [r3, #32]
 800222a:	431a      	orrs	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	430a      	orrs	r2, r1
 8002232:	601a      	str	r2, [r3, #0]
=======
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69da      	ldr	r2, [r3, #28]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	431a      	orrs	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	430a      	orrs	r2, r1
 800237a:	601a      	str	r2, [r3, #0]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
<<<<<<< HEAD
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800223e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	6911      	ldr	r1, [r2, #16]
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	68d2      	ldr	r2, [r2, #12]
 800224a:	4311      	orrs	r1, r2
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	6812      	ldr	r2, [r2, #0]
 8002250:	430b      	orrs	r3, r1
 8002252:	6093      	str	r3, [r2, #8]
=======
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002386:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	6911      	ldr	r1, [r2, #16]
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	68d2      	ldr	r2, [r2, #12]
 8002392:	4311      	orrs	r1, r2
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	6812      	ldr	r2, [r2, #0]
 8002398:	430b      	orrs	r3, r1
 800239a:	6093      	str	r3, [r2, #8]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
<<<<<<< HEAD
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	695a      	ldr	r2, [r3, #20]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	431a      	orrs	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	430a      	orrs	r2, r1
 800226e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f042 0201 	orr.w	r2, r2, #1
 800227e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2220      	movs	r2, #32
 800228a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	000186a0 	.word	0x000186a0
 80022ac:	001e847f 	.word	0x001e847f
 80022b0:	003d08ff 	.word	0x003d08ff
 80022b4:	431bde83 	.word	0x431bde83
 80022b8:	10624dd3 	.word	0x10624dd3

080022bc <HAL_I2C_Master_Transmit>:
=======
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	695a      	ldr	r2, [r3, #20]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	431a      	orrs	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	430a      	orrs	r2, r1
 80023b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f042 0201 	orr.w	r2, r2, #1
 80023c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2220      	movs	r2, #32
 80023d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	000186a0 	.word	0x000186a0
 80023f4:	001e847f 	.word	0x001e847f
 80023f8:	003d08ff 	.word	0x003d08ff
 80023fc:	431bde83 	.word	0x431bde83
 8002400:	10624dd3 	.word	0x10624dd3

08002404 <HAL_I2C_Master_Transmit>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 80022bc:	b580      	push	{r7, lr}
 80022be:	b088      	sub	sp, #32
 80022c0:	af02      	add	r7, sp, #8
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	607a      	str	r2, [r7, #4]
 80022c6:	461a      	mov	r2, r3
 80022c8:	460b      	mov	r3, r1
 80022ca:	817b      	strh	r3, [r7, #10]
 80022cc:	4613      	mov	r3, r2
 80022ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022d0:	f7ff fc32 	bl	8001b38 <HAL_GetTick>
 80022d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b20      	cmp	r3, #32
 80022e0:	f040 80e0 	bne.w	80024a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	9300      	str	r3, [sp, #0]
 80022e8:	2319      	movs	r3, #25
 80022ea:	2201      	movs	r2, #1
 80022ec:	4970      	ldr	r1, [pc, #448]	; (80024b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f000 fc58 	bl	8002ba4 <I2C_WaitOnFlagUntilTimeout>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80022fa:	2302      	movs	r3, #2
 80022fc:	e0d3      	b.n	80024a6 <HAL_I2C_Master_Transmit+0x1ea>
=======
 8002404:	b580      	push	{r7, lr}
 8002406:	b088      	sub	sp, #32
 8002408:	af02      	add	r7, sp, #8
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	607a      	str	r2, [r7, #4]
 800240e:	461a      	mov	r2, r3
 8002410:	460b      	mov	r3, r1
 8002412:	817b      	strh	r3, [r7, #10]
 8002414:	4613      	mov	r3, r2
 8002416:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002418:	f7ff fc18 	bl	8001c4c <HAL_GetTick>
 800241c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b20      	cmp	r3, #32
 8002428:	f040 80e0 	bne.w	80025ec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	9300      	str	r3, [sp, #0]
 8002430:	2319      	movs	r3, #25
 8002432:	2201      	movs	r2, #1
 8002434:	4970      	ldr	r1, [pc, #448]	; (80025f8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f000 fc58 	bl	8002cec <I2C_WaitOnFlagUntilTimeout>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002442:	2302      	movs	r3, #2
 8002444:	e0d3      	b.n	80025ee <HAL_I2C_Master_Transmit+0x1ea>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
<<<<<<< HEAD
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002304:	2b01      	cmp	r3, #1
 8002306:	d101      	bne.n	800230c <HAL_I2C_Master_Transmit+0x50>
 8002308:	2302      	movs	r3, #2
 800230a:	e0cc      	b.n	80024a6 <HAL_I2C_Master_Transmit+0x1ea>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b01      	cmp	r3, #1
 8002320:	d007      	beq.n	8002332 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f042 0201 	orr.w	r2, r2, #1
 8002330:	601a      	str	r2, [r3, #0]
=======
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800244c:	2b01      	cmp	r3, #1
 800244e:	d101      	bne.n	8002454 <HAL_I2C_Master_Transmit+0x50>
 8002450:	2302      	movs	r3, #2
 8002452:	e0cc      	b.n	80025ee <HAL_I2C_Master_Transmit+0x1ea>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b01      	cmp	r3, #1
 8002468:	d007      	beq.n	800247a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f042 0201 	orr.w	r2, r2, #1
 8002478:	601a      	str	r2, [r3, #0]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
<<<<<<< HEAD
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002340:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2221      	movs	r2, #33	; 0x21
 8002346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2210      	movs	r2, #16
 800234e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	893a      	ldrh	r2, [r7, #8]
 8002362:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002368:	b29a      	uxth	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	4a50      	ldr	r2, [pc, #320]	; (80024b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002372:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002374:	8979      	ldrh	r1, [r7, #10]
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	6a3a      	ldr	r2, [r7, #32]
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	f000 fac2 	bl	8002904 <I2C_MasterRequestWrite>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e08d      	b.n	80024a6 <HAL_I2C_Master_Transmit+0x1ea>
=======
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002488:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2221      	movs	r2, #33	; 0x21
 800248e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2210      	movs	r2, #16
 8002496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	893a      	ldrh	r2, [r7, #8]
 80024aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	4a50      	ldr	r2, [pc, #320]	; (80025fc <HAL_I2C_Master_Transmit+0x1f8>)
 80024ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80024bc:	8979      	ldrh	r1, [r7, #10]
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	6a3a      	ldr	r2, [r7, #32]
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f000 fac2 	bl	8002a4c <I2C_MasterRequestWrite>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e08d      	b.n	80025ee <HAL_I2C_Master_Transmit+0x1ea>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
<<<<<<< HEAD
 800238a:	2300      	movs	r3, #0
 800238c:	613b      	str	r3, [r7, #16]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	695b      	ldr	r3, [r3, #20]
 8002394:	613b      	str	r3, [r7, #16]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	613b      	str	r3, [r7, #16]
 800239e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80023a0:	e066      	b.n	8002470 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	6a39      	ldr	r1, [r7, #32]
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f000 fcd2 	bl	8002d50 <I2C_WaitOnTXEFlagUntilTimeout>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00d      	beq.n	80023ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	d107      	bne.n	80023ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e06b      	b.n	80024a6 <HAL_I2C_Master_Transmit+0x1ea>
=======
 80024d2:	2300      	movs	r3, #0
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	613b      	str	r3, [r7, #16]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	613b      	str	r3, [r7, #16]
 80024e6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80024e8:	e066      	b.n	80025b8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	6a39      	ldr	r1, [r7, #32]
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f000 fcd2 	bl	8002e98 <I2C_WaitOnTXEFlagUntilTimeout>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00d      	beq.n	8002516 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	2b04      	cmp	r3, #4
 8002500:	d107      	bne.n	8002512 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002510:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e06b      	b.n	80025ee <HAL_I2C_Master_Transmit+0x1ea>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
<<<<<<< HEAD
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d2:	781a      	ldrb	r2, [r3, #0]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023de:	1c5a      	adds	r2, r3, #1
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	3b01      	subs	r3, #1
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f6:	3b01      	subs	r3, #1
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	695b      	ldr	r3, [r3, #20]
 8002404:	f003 0304 	and.w	r3, r3, #4
 8002408:	2b04      	cmp	r3, #4
 800240a:	d11b      	bne.n	8002444 <HAL_I2C_Master_Transmit+0x188>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002410:	2b00      	cmp	r3, #0
 8002412:	d017      	beq.n	8002444 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002418:	781a      	ldrb	r2, [r3, #0]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002424:	1c5a      	adds	r2, r3, #1
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800242e:	b29b      	uxth	r3, r3
 8002430:	3b01      	subs	r3, #1
 8002432:	b29a      	uxth	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243c:	3b01      	subs	r3, #1
 800243e:	b29a      	uxth	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	851a      	strh	r2, [r3, #40]	; 0x28
=======
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251a:	781a      	ldrb	r2, [r3, #0]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002526:	1c5a      	adds	r2, r3, #1
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002530:	b29b      	uxth	r3, r3
 8002532:	3b01      	subs	r3, #1
 8002534:	b29a      	uxth	r2, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800253e:	3b01      	subs	r3, #1
 8002540:	b29a      	uxth	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	f003 0304 	and.w	r3, r3, #4
 8002550:	2b04      	cmp	r3, #4
 8002552:	d11b      	bne.n	800258c <HAL_I2C_Master_Transmit+0x188>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002558:	2b00      	cmp	r3, #0
 800255a:	d017      	beq.n	800258c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002560:	781a      	ldrb	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256c:	1c5a      	adds	r2, r3, #1
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002576:	b29b      	uxth	r3, r3
 8002578:	3b01      	subs	r3, #1
 800257a:	b29a      	uxth	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002584:	3b01      	subs	r3, #1
 8002586:	b29a      	uxth	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	851a      	strh	r2, [r3, #40]	; 0x28
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	6a39      	ldr	r1, [r7, #32]
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f000 fcc2 	bl	8002dd2 <I2C_WaitOnBTFFlagUntilTimeout>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00d      	beq.n	8002470 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002458:	2b04      	cmp	r3, #4
 800245a:	d107      	bne.n	800246c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800246a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e01a      	b.n	80024a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002474:	2b00      	cmp	r3, #0
 8002476:	d194      	bne.n	80023a2 <HAL_I2C_Master_Transmit+0xe6>
=======
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	6a39      	ldr	r1, [r7, #32]
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f000 fcc2 	bl	8002f1a <I2C_WaitOnBTFFlagUntilTimeout>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00d      	beq.n	80025b8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a0:	2b04      	cmp	r3, #4
 80025a2:	d107      	bne.n	80025b4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025b2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e01a      	b.n	80025ee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d194      	bne.n	80024ea <HAL_I2C_Master_Transmit+0xe6>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
<<<<<<< HEAD
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002486:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2220      	movs	r2, #32
 800248c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024a0:	2300      	movs	r3, #0
 80024a2:	e000      	b.n	80024a6 <HAL_I2C_Master_Transmit+0x1ea>
=======
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2220      	movs	r2, #32
 80025d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025e8:	2300      	movs	r3, #0
 80025ea:	e000      	b.n	80025ee <HAL_I2C_Master_Transmit+0x1ea>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 80024a4:	2302      	movs	r3, #2
  }
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	00100002 	.word	0x00100002
 80024b4:	ffff0000 	.word	0xffff0000

080024b8 <HAL_I2C_Master_Receive>:
=======
 80025ec:	2302      	movs	r3, #2
  }
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3718      	adds	r7, #24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	00100002 	.word	0x00100002
 80025fc:	ffff0000 	.word	0xffff0000

08002600 <HAL_I2C_Master_Receive>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b08c      	sub	sp, #48	; 0x30
 80024bc:	af02      	add	r7, sp, #8
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	607a      	str	r2, [r7, #4]
 80024c2:	461a      	mov	r2, r3
 80024c4:	460b      	mov	r3, r1
 80024c6:	817b      	strh	r3, [r7, #10]
 80024c8:	4613      	mov	r3, r2
 80024ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024cc:	f7ff fb34 	bl	8001b38 <HAL_GetTick>
 80024d0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b20      	cmp	r3, #32
 80024dc:	f040 820b 	bne.w	80028f6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	2319      	movs	r3, #25
 80024e6:	2201      	movs	r2, #1
 80024e8:	497c      	ldr	r1, [pc, #496]	; (80026dc <HAL_I2C_Master_Receive+0x224>)
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f000 fb5a 	bl	8002ba4 <I2C_WaitOnFlagUntilTimeout>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80024f6:	2302      	movs	r3, #2
 80024f8:	e1fe      	b.n	80028f8 <HAL_I2C_Master_Receive+0x440>
=======
 8002600:	b580      	push	{r7, lr}
 8002602:	b08c      	sub	sp, #48	; 0x30
 8002604:	af02      	add	r7, sp, #8
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	607a      	str	r2, [r7, #4]
 800260a:	461a      	mov	r2, r3
 800260c:	460b      	mov	r3, r1
 800260e:	817b      	strh	r3, [r7, #10]
 8002610:	4613      	mov	r3, r2
 8002612:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002614:	f7ff fb1a 	bl	8001c4c <HAL_GetTick>
 8002618:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b20      	cmp	r3, #32
 8002624:	f040 820b 	bne.w	8002a3e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	2319      	movs	r3, #25
 800262e:	2201      	movs	r2, #1
 8002630:	497c      	ldr	r1, [pc, #496]	; (8002824 <HAL_I2C_Master_Receive+0x224>)
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 fb5a 	bl	8002cec <I2C_WaitOnFlagUntilTimeout>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800263e:	2302      	movs	r3, #2
 8002640:	e1fe      	b.n	8002a40 <HAL_I2C_Master_Receive+0x440>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
<<<<<<< HEAD
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002500:	2b01      	cmp	r3, #1
 8002502:	d101      	bne.n	8002508 <HAL_I2C_Master_Receive+0x50>
 8002504:	2302      	movs	r3, #2
 8002506:	e1f7      	b.n	80028f8 <HAL_I2C_Master_Receive+0x440>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b01      	cmp	r3, #1
 800251c:	d007      	beq.n	800252e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f042 0201 	orr.w	r2, r2, #1
 800252c:	601a      	str	r2, [r3, #0]
=======
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002648:	2b01      	cmp	r3, #1
 800264a:	d101      	bne.n	8002650 <HAL_I2C_Master_Receive+0x50>
 800264c:	2302      	movs	r3, #2
 800264e:	e1f7      	b.n	8002a40 <HAL_I2C_Master_Receive+0x440>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b01      	cmp	r3, #1
 8002664:	d007      	beq.n	8002676 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f042 0201 	orr.w	r2, r2, #1
 8002674:	601a      	str	r2, [r3, #0]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
<<<<<<< HEAD
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800253c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2222      	movs	r2, #34	; 0x22
 8002542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2210      	movs	r2, #16
 800254a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	893a      	ldrh	r2, [r7, #8]
 800255e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002564:	b29a      	uxth	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	4a5c      	ldr	r2, [pc, #368]	; (80026e0 <HAL_I2C_Master_Receive+0x228>)
 800256e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002570:	8979      	ldrh	r1, [r7, #10]
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f000 fa46 	bl	8002a08 <I2C_MasterRequestRead>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e1b8      	b.n	80028f8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258a:	2b00      	cmp	r3, #0
 800258c:	d113      	bne.n	80025b6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800258e:	2300      	movs	r3, #0
 8002590:	623b      	str	r3, [r7, #32]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	695b      	ldr	r3, [r3, #20]
 8002598:	623b      	str	r3, [r7, #32]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	623b      	str	r3, [r7, #32]
 80025a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	e18c      	b.n	80028d0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d11b      	bne.n	80025f6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025ce:	2300      	movs	r3, #0
 80025d0:	61fb      	str	r3, [r7, #28]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	695b      	ldr	r3, [r3, #20]
 80025d8:	61fb      	str	r3, [r7, #28]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	61fb      	str	r3, [r7, #28]
 80025e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	e16c      	b.n	80028d0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d11b      	bne.n	8002636 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800260c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800261c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800261e:	2300      	movs	r3, #0
 8002620:	61bb      	str	r3, [r7, #24]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	695b      	ldr	r3, [r3, #20]
 8002628:	61bb      	str	r3, [r7, #24]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	61bb      	str	r3, [r7, #24]
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	e14c      	b.n	80028d0 <HAL_I2C_Master_Receive+0x418>
=======
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002684:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2222      	movs	r2, #34	; 0x22
 800268a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2210      	movs	r2, #16
 8002692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	893a      	ldrh	r2, [r7, #8]
 80026a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	4a5c      	ldr	r2, [pc, #368]	; (8002828 <HAL_I2C_Master_Receive+0x228>)
 80026b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80026b8:	8979      	ldrh	r1, [r7, #10]
 80026ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 fa46 	bl	8002b50 <I2C_MasterRequestRead>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e1b8      	b.n	8002a40 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d113      	bne.n	80026fe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026d6:	2300      	movs	r3, #0
 80026d8:	623b      	str	r3, [r7, #32]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	623b      	str	r3, [r7, #32]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	623b      	str	r3, [r7, #32]
 80026ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	e18c      	b.n	8002a18 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002702:	2b01      	cmp	r3, #1
 8002704:	d11b      	bne.n	800273e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002714:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002716:	2300      	movs	r3, #0
 8002718:	61fb      	str	r3, [r7, #28]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	61fb      	str	r3, [r7, #28]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	61fb      	str	r3, [r7, #28]
 800272a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	e16c      	b.n	8002a18 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002742:	2b02      	cmp	r3, #2
 8002744:	d11b      	bne.n	800277e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002754:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002764:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002766:	2300      	movs	r3, #0
 8002768:	61bb      	str	r3, [r7, #24]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	61bb      	str	r3, [r7, #24]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	61bb      	str	r3, [r7, #24]
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	e14c      	b.n	8002a18 <HAL_I2C_Master_Receive+0x418>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
<<<<<<< HEAD
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002644:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002646:	2300      	movs	r3, #0
 8002648:	617b      	str	r3, [r7, #20]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	695b      	ldr	r3, [r3, #20]
 8002650:	617b      	str	r3, [r7, #20]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	617b      	str	r3, [r7, #20]
 800265a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800265c:	e138      	b.n	80028d0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002662:	2b03      	cmp	r3, #3
 8002664:	f200 80f1 	bhi.w	800284a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266c:	2b01      	cmp	r3, #1
 800266e:	d123      	bne.n	80026b8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002672:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f000 fbed 	bl	8002e54 <I2C_WaitOnRXNEFlagUntilTimeout>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e139      	b.n	80028f8 <HAL_I2C_Master_Receive+0x440>
=======
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800278c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800278e:	2300      	movs	r3, #0
 8002790:	617b      	str	r3, [r7, #20]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	617b      	str	r3, [r7, #20]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	617b      	str	r3, [r7, #20]
 80027a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80027a4:	e138      	b.n	8002a18 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027aa:	2b03      	cmp	r3, #3
 80027ac:	f200 80f1 	bhi.w	8002992 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d123      	bne.n	8002800 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f000 fbed 	bl	8002f9c <I2C_WaitOnRXNEFlagUntilTimeout>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e139      	b.n	8002a40 <HAL_I2C_Master_Receive+0x440>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
<<<<<<< HEAD
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	691a      	ldr	r2, [r3, #16]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002696:	1c5a      	adds	r2, r3, #1
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a0:	3b01      	subs	r3, #1
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	3b01      	subs	r3, #1
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026b6:	e10b      	b.n	80028d0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d14e      	bne.n	800275e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c2:	9300      	str	r3, [sp, #0]
 80026c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c6:	2200      	movs	r2, #0
 80026c8:	4906      	ldr	r1, [pc, #24]	; (80026e4 <HAL_I2C_Master_Receive+0x22c>)
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f000 fa6a 	bl	8002ba4 <I2C_WaitOnFlagUntilTimeout>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d008      	beq.n	80026e8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e10e      	b.n	80028f8 <HAL_I2C_Master_Receive+0x440>
 80026da:	bf00      	nop
 80026dc:	00100002 	.word	0x00100002
 80026e0:	ffff0000 	.word	0xffff0000
 80026e4:	00010004 	.word	0x00010004
=======
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	691a      	ldr	r2, [r3, #16]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	1c5a      	adds	r2, r3, #1
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e8:	3b01      	subs	r3, #1
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	3b01      	subs	r3, #1
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027fe:	e10b      	b.n	8002a18 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002804:	2b02      	cmp	r3, #2
 8002806:	d14e      	bne.n	80028a6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800280e:	2200      	movs	r2, #0
 8002810:	4906      	ldr	r1, [pc, #24]	; (800282c <HAL_I2C_Master_Receive+0x22c>)
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f000 fa6a 	bl	8002cec <I2C_WaitOnFlagUntilTimeout>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d008      	beq.n	8002830 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e10e      	b.n	8002a40 <HAL_I2C_Master_Receive+0x440>
 8002822:	bf00      	nop
 8002824:	00100002 	.word	0x00100002
 8002828:	ffff0000 	.word	0xffff0000
 800282c:	00010004 	.word	0x00010004
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
<<<<<<< HEAD
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	691a      	ldr	r2, [r3, #16]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270a:	1c5a      	adds	r2, r3, #1
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002714:	3b01      	subs	r3, #1
 8002716:	b29a      	uxth	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002720:	b29b      	uxth	r3, r3
 8002722:	3b01      	subs	r3, #1
 8002724:	b29a      	uxth	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	691a      	ldr	r2, [r3, #16]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002734:	b2d2      	uxtb	r2, r2
 8002736:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273c:	1c5a      	adds	r2, r3, #1
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002746:	3b01      	subs	r3, #1
 8002748:	b29a      	uxth	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002752:	b29b      	uxth	r3, r3
 8002754:	3b01      	subs	r3, #1
 8002756:	b29a      	uxth	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800275c:	e0b8      	b.n	80028d0 <HAL_I2C_Master_Receive+0x418>
=======
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800283e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	691a      	ldr	r2, [r3, #16]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002852:	1c5a      	adds	r2, r3, #1
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285c:	3b01      	subs	r3, #1
 800285e:	b29a      	uxth	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002868:	b29b      	uxth	r3, r3
 800286a:	3b01      	subs	r3, #1
 800286c:	b29a      	uxth	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	691a      	ldr	r2, [r3, #16]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	1c5a      	adds	r2, r3, #1
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288e:	3b01      	subs	r3, #1
 8002890:	b29a      	uxth	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289a:	b29b      	uxth	r3, r3
 800289c:	3b01      	subs	r3, #1
 800289e:	b29a      	uxth	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028a4:	e0b8      	b.n	8002a18 <HAL_I2C_Master_Receive+0x418>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	9300      	str	r3, [sp, #0]
 8002762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002764:	2200      	movs	r2, #0
 8002766:	4966      	ldr	r1, [pc, #408]	; (8002900 <HAL_I2C_Master_Receive+0x448>)
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f000 fa1b 	bl	8002ba4 <I2C_WaitOnFlagUntilTimeout>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e0bf      	b.n	80028f8 <HAL_I2C_Master_Receive+0x440>
=======
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ac:	2200      	movs	r2, #0
 80028ae:	4966      	ldr	r1, [pc, #408]	; (8002a48 <HAL_I2C_Master_Receive+0x448>)
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f000 fa1b 	bl	8002cec <I2C_WaitOnFlagUntilTimeout>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e0bf      	b.n	8002a40 <HAL_I2C_Master_Receive+0x440>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
<<<<<<< HEAD
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002786:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	691a      	ldr	r2, [r3, #16]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002792:	b2d2      	uxtb	r2, r2
 8002794:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279a:	1c5a      	adds	r2, r3, #1
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a4:	3b01      	subs	r3, #1
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	3b01      	subs	r3, #1
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	9300      	str	r3, [sp, #0]
 80027be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c0:	2200      	movs	r2, #0
 80027c2:	494f      	ldr	r1, [pc, #316]	; (8002900 <HAL_I2C_Master_Receive+0x448>)
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f000 f9ed 	bl	8002ba4 <I2C_WaitOnFlagUntilTimeout>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e091      	b.n	80028f8 <HAL_I2C_Master_Receive+0x440>
=======
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	691a      	ldr	r2, [r3, #16]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e2:	1c5a      	adds	r2, r3, #1
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ec:	3b01      	subs	r3, #1
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	3b01      	subs	r3, #1
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002908:	2200      	movs	r2, #0
 800290a:	494f      	ldr	r1, [pc, #316]	; (8002a48 <HAL_I2C_Master_Receive+0x448>)
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f000 f9ed 	bl	8002cec <I2C_WaitOnFlagUntilTimeout>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e091      	b.n	8002a40 <HAL_I2C_Master_Receive+0x440>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
<<<<<<< HEAD
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	691a      	ldr	r2, [r3, #16]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f6:	1c5a      	adds	r2, r3, #1
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002800:	3b01      	subs	r3, #1
 8002802:	b29a      	uxth	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280c:	b29b      	uxth	r3, r3
 800280e:	3b01      	subs	r3, #1
 8002810:	b29a      	uxth	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	691a      	ldr	r2, [r3, #16]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	1c5a      	adds	r2, r3, #1
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002832:	3b01      	subs	r3, #1
 8002834:	b29a      	uxth	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800283e:	b29b      	uxth	r3, r3
 8002840:	3b01      	subs	r3, #1
 8002842:	b29a      	uxth	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002848:	e042      	b.n	80028d0 <HAL_I2C_Master_Receive+0x418>
=======
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800292a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	691a      	ldr	r2, [r3, #16]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	1c5a      	adds	r2, r3, #1
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002948:	3b01      	subs	r3, #1
 800294a:	b29a      	uxth	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002954:	b29b      	uxth	r3, r3
 8002956:	3b01      	subs	r3, #1
 8002958:	b29a      	uxth	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	691a      	ldr	r2, [r3, #16]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002968:	b2d2      	uxtb	r2, r2
 800296a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002970:	1c5a      	adds	r2, r3, #1
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800297a:	3b01      	subs	r3, #1
 800297c:	b29a      	uxth	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002986:	b29b      	uxth	r3, r3
 8002988:	3b01      	subs	r3, #1
 800298a:	b29a      	uxth	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002990:	e042      	b.n	8002a18 <HAL_I2C_Master_Receive+0x418>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 800284a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800284c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 fb00 	bl	8002e54 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e04c      	b.n	80028f8 <HAL_I2C_Master_Receive+0x440>
=======
 8002992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002994:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 fb00 	bl	8002f9c <I2C_WaitOnRXNEFlagUntilTimeout>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e04c      	b.n	8002a40 <HAL_I2C_Master_Receive+0x440>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
<<<<<<< HEAD
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	691a      	ldr	r2, [r3, #16]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	1c5a      	adds	r2, r3, #1
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800287a:	3b01      	subs	r3, #1
 800287c:	b29a      	uxth	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002886:	b29b      	uxth	r3, r3
 8002888:	3b01      	subs	r3, #1
 800288a:	b29a      	uxth	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	f003 0304 	and.w	r3, r3, #4
 800289a:	2b04      	cmp	r3, #4
 800289c:	d118      	bne.n	80028d0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	691a      	ldr	r2, [r3, #16]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	b2d2      	uxtb	r2, r2
 80028aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b0:	1c5a      	adds	r2, r3, #1
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ba:	3b01      	subs	r3, #1
 80028bc:	b29a      	uxth	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	3b01      	subs	r3, #1
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f47f aec2 	bne.w	800265e <HAL_I2C_Master_Receive+0x1a6>
=======
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	691a      	ldr	r2, [r3, #16]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	b2d2      	uxtb	r2, r2
 80029b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b8:	1c5a      	adds	r2, r3, #1
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c2:	3b01      	subs	r3, #1
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	3b01      	subs	r3, #1
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	f003 0304 	and.w	r3, r3, #4
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	d118      	bne.n	8002a18 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	691a      	ldr	r2, [r3, #16]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	1c5a      	adds	r2, r3, #1
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a02:	3b01      	subs	r3, #1
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	3b01      	subs	r3, #1
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f47f aec2 	bne.w	80027a6 <HAL_I2C_Master_Receive+0x1a6>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
<<<<<<< HEAD
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2220      	movs	r2, #32
 80028de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028f2:	2300      	movs	r3, #0
 80028f4:	e000      	b.n	80028f8 <HAL_I2C_Master_Receive+0x440>
=======
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2220      	movs	r2, #32
 8002a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	e000      	b.n	8002a40 <HAL_I2C_Master_Receive+0x440>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 80028f6:	2302      	movs	r3, #2
  }
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3728      	adds	r7, #40	; 0x28
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	00010004 	.word	0x00010004

08002904 <I2C_MasterRequestWrite>:
=======
 8002a3e:	2302      	movs	r3, #2
  }
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3728      	adds	r7, #40	; 0x28
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	00010004 	.word	0x00010004

08002a4c <I2C_MasterRequestWrite>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8002904:	b580      	push	{r7, lr}
 8002906:	b088      	sub	sp, #32
 8002908:	af02      	add	r7, sp, #8
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	607a      	str	r2, [r7, #4]
 800290e:	603b      	str	r3, [r7, #0]
 8002910:	460b      	mov	r3, r1
 8002912:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002918:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	2b08      	cmp	r3, #8
 800291e:	d006      	beq.n	800292e <I2C_MasterRequestWrite+0x2a>
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d003      	beq.n	800292e <I2C_MasterRequestWrite+0x2a>
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800292c:	d108      	bne.n	8002940 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	e00b      	b.n	8002958 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002944:	2b12      	cmp	r3, #18
 8002946:	d107      	bne.n	8002958 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002956:	601a      	str	r2, [r3, #0]
=======
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b088      	sub	sp, #32
 8002a50:	af02      	add	r7, sp, #8
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	607a      	str	r2, [r7, #4]
 8002a56:	603b      	str	r3, [r7, #0]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a60:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	d006      	beq.n	8002a76 <I2C_MasterRequestWrite+0x2a>
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d003      	beq.n	8002a76 <I2C_MasterRequestWrite+0x2a>
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a74:	d108      	bne.n	8002a88 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	e00b      	b.n	8002aa0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8c:	2b12      	cmp	r3, #18
 8002a8e:	d107      	bne.n	8002aa0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a9e:	601a      	str	r2, [r3, #0]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f000 f91d 	bl	8002ba4 <I2C_WaitOnFlagUntilTimeout>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00d      	beq.n	800298c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800297e:	d103      	bne.n	8002988 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002986:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e035      	b.n	80029f8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002994:	d108      	bne.n	80029a8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002996:	897b      	ldrh	r3, [r7, #10]
 8002998:	b2db      	uxtb	r3, r3
 800299a:	461a      	mov	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029a4:	611a      	str	r2, [r3, #16]
 80029a6:	e01b      	b.n	80029e0 <I2C_MasterRequestWrite+0xdc>
=======
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f000 f91d 	bl	8002cec <I2C_WaitOnFlagUntilTimeout>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00d      	beq.n	8002ad4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ac6:	d103      	bne.n	8002ad0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ace:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e035      	b.n	8002b40 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002adc:	d108      	bne.n	8002af0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ade:	897b      	ldrh	r3, [r7, #10]
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002aec:	611a      	str	r2, [r3, #16]
 8002aee:	e01b      	b.n	8002b28 <I2C_MasterRequestWrite+0xdc>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
<<<<<<< HEAD
 80029a8:	897b      	ldrh	r3, [r7, #10]
 80029aa:	11db      	asrs	r3, r3, #7
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	f003 0306 	and.w	r3, r3, #6
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	f063 030f 	orn	r3, r3, #15
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	490e      	ldr	r1, [pc, #56]	; (8002a00 <I2C_MasterRequestWrite+0xfc>)
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f000 f943 	bl	8002c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e010      	b.n	80029f8 <I2C_MasterRequestWrite+0xf4>
=======
 8002af0:	897b      	ldrh	r3, [r7, #10]
 8002af2:	11db      	asrs	r3, r3, #7
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	f003 0306 	and.w	r3, r3, #6
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	f063 030f 	orn	r3, r3, #15
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	490e      	ldr	r1, [pc, #56]	; (8002b48 <I2C_MasterRequestWrite+0xfc>)
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f000 f943 	bl	8002d9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e010      	b.n	8002b40 <I2C_MasterRequestWrite+0xf4>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
<<<<<<< HEAD
 80029d6:	897b      	ldrh	r3, [r7, #10]
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	611a      	str	r2, [r3, #16]
=======
 8002b1e:	897b      	ldrh	r3, [r7, #10]
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	611a      	str	r2, [r3, #16]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	4907      	ldr	r1, [pc, #28]	; (8002a04 <I2C_MasterRequestWrite+0x100>)
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f000 f933 	bl	8002c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e000      	b.n	80029f8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3718      	adds	r7, #24
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	00010008 	.word	0x00010008
 8002a04:	00010002 	.word	0x00010002

08002a08 <I2C_MasterRequestRead>:
=======
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	4907      	ldr	r1, [pc, #28]	; (8002b4c <I2C_MasterRequestWrite+0x100>)
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 f933 	bl	8002d9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e000      	b.n	8002b40 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3718      	adds	r7, #24
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	00010008 	.word	0x00010008
 8002b4c:	00010002 	.word	0x00010002

08002b50 <I2C_MasterRequestRead>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b088      	sub	sp, #32
 8002a0c:	af02      	add	r7, sp, #8
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	607a      	str	r2, [r7, #4]
 8002a12:	603b      	str	r3, [r7, #0]
 8002a14:	460b      	mov	r3, r1
 8002a16:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a2c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2b08      	cmp	r3, #8
 8002a32:	d006      	beq.n	8002a42 <I2C_MasterRequestRead+0x3a>
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d003      	beq.n	8002a42 <I2C_MasterRequestRead+0x3a>
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a40:	d108      	bne.n	8002a54 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	e00b      	b.n	8002a6c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a58:	2b11      	cmp	r3, #17
 8002a5a:	d107      	bne.n	8002a6c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a6a:	601a      	str	r2, [r3, #0]
=======
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b088      	sub	sp, #32
 8002b54:	af02      	add	r7, sp, #8
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	607a      	str	r2, [r7, #4]
 8002b5a:	603b      	str	r3, [r7, #0]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b64:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b74:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	2b08      	cmp	r3, #8
 8002b7a:	d006      	beq.n	8002b8a <I2C_MasterRequestRead+0x3a>
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d003      	beq.n	8002b8a <I2C_MasterRequestRead+0x3a>
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b88:	d108      	bne.n	8002b9c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	e00b      	b.n	8002bb4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba0:	2b11      	cmp	r3, #17
 8002ba2:	d107      	bne.n	8002bb4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bb2:	601a      	str	r2, [r3, #0]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f000 f893 	bl	8002ba4 <I2C_WaitOnFlagUntilTimeout>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00d      	beq.n	8002aa0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a92:	d103      	bne.n	8002a9c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e079      	b.n	8002b94 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002aa8:	d108      	bne.n	8002abc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002aaa:	897b      	ldrh	r3, [r7, #10]
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	f043 0301 	orr.w	r3, r3, #1
 8002ab2:	b2da      	uxtb	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	611a      	str	r2, [r3, #16]
 8002aba:	e05f      	b.n	8002b7c <I2C_MasterRequestRead+0x174>
=======
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f000 f893 	bl	8002cec <I2C_WaitOnFlagUntilTimeout>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00d      	beq.n	8002be8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bda:	d103      	bne.n	8002be4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002be2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e079      	b.n	8002cdc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bf0:	d108      	bne.n	8002c04 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002bf2:	897b      	ldrh	r3, [r7, #10]
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	f043 0301 	orr.w	r3, r3, #1
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	611a      	str	r2, [r3, #16]
 8002c02:	e05f      	b.n	8002cc4 <I2C_MasterRequestRead+0x174>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
<<<<<<< HEAD
 8002abc:	897b      	ldrh	r3, [r7, #10]
 8002abe:	11db      	asrs	r3, r3, #7
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	f003 0306 	and.w	r3, r3, #6
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	f063 030f 	orn	r3, r3, #15
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	4930      	ldr	r1, [pc, #192]	; (8002b9c <I2C_MasterRequestRead+0x194>)
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 f8b9 	bl	8002c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e054      	b.n	8002b94 <I2C_MasterRequestRead+0x18c>
=======
 8002c04:	897b      	ldrh	r3, [r7, #10]
 8002c06:	11db      	asrs	r3, r3, #7
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	f003 0306 	and.w	r3, r3, #6
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	f063 030f 	orn	r3, r3, #15
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	4930      	ldr	r1, [pc, #192]	; (8002ce4 <I2C_MasterRequestRead+0x194>)
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 f8b9 	bl	8002d9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e054      	b.n	8002cdc <I2C_MasterRequestRead+0x18c>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
<<<<<<< HEAD
 8002aea:	897b      	ldrh	r3, [r7, #10]
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	4929      	ldr	r1, [pc, #164]	; (8002ba0 <I2C_MasterRequestRead+0x198>)
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f000 f8a9 	bl	8002c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e044      	b.n	8002b94 <I2C_MasterRequestRead+0x18c>
=======
 8002c32:	897b      	ldrh	r3, [r7, #10]
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	4929      	ldr	r1, [pc, #164]	; (8002ce8 <I2C_MasterRequestRead+0x198>)
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 f8a9 	bl	8002d9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e044      	b.n	8002cdc <I2C_MasterRequestRead+0x18c>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
<<<<<<< HEAD
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	613b      	str	r3, [r7, #16]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	613b      	str	r3, [r7, #16]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	613b      	str	r3, [r7, #16]
 8002b1e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b2e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	9300      	str	r3, [sp, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f000 f831 	bl	8002ba4 <I2C_WaitOnFlagUntilTimeout>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00d      	beq.n	8002b64 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b56:	d103      	bne.n	8002b60 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b5e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e017      	b.n	8002b94 <I2C_MasterRequestRead+0x18c>
=======
 8002c52:	2300      	movs	r3, #0
 8002c54:	613b      	str	r3, [r7, #16]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	613b      	str	r3, [r7, #16]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	613b      	str	r3, [r7, #16]
 8002c66:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c76:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f000 f831 	bl	8002cec <I2C_WaitOnFlagUntilTimeout>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00d      	beq.n	8002cac <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c9e:	d103      	bne.n	8002ca8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ca6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e017      	b.n	8002cdc <I2C_MasterRequestRead+0x18c>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
<<<<<<< HEAD
 8002b64:	897b      	ldrh	r3, [r7, #10]
 8002b66:	11db      	asrs	r3, r3, #7
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	f003 0306 	and.w	r3, r3, #6
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	f063 030e 	orn	r3, r3, #14
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	611a      	str	r2, [r3, #16]
=======
 8002cac:	897b      	ldrh	r3, [r7, #10]
 8002cae:	11db      	asrs	r3, r3, #7
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	f003 0306 	and.w	r3, r3, #6
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	f063 030e 	orn	r3, r3, #14
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	611a      	str	r2, [r3, #16]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	4907      	ldr	r1, [pc, #28]	; (8002ba0 <I2C_MasterRequestRead+0x198>)
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 f865 	bl	8002c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e000      	b.n	8002b94 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	00010008 	.word	0x00010008
 8002ba0:	00010002 	.word	0x00010002

08002ba4 <I2C_WaitOnFlagUntilTimeout>:
=======
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	4907      	ldr	r1, [pc, #28]	; (8002ce8 <I2C_MasterRequestRead+0x198>)
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 f865 	bl	8002d9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e000      	b.n	8002cdc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3718      	adds	r7, #24
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	00010008 	.word	0x00010008
 8002ce8:	00010002 	.word	0x00010002

08002cec <I2C_WaitOnFlagUntilTimeout>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	603b      	str	r3, [r7, #0]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bb4:	e025      	b.n	8002c02 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bbc:	d021      	beq.n	8002c02 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bbe:	f7fe ffbb 	bl	8001b38 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d302      	bcc.n	8002bd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d116      	bne.n	8002c02 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2220      	movs	r2, #32
 8002bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	f043 0220 	orr.w	r2, r3, #32
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e023      	b.n	8002c4a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	0c1b      	lsrs	r3, r3, #16
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d10d      	bne.n	8002c28 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	43da      	mvns	r2, r3
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	4013      	ands	r3, r2
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	bf0c      	ite	eq
 8002c1e:	2301      	moveq	r3, #1
 8002c20:	2300      	movne	r3, #0
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	461a      	mov	r2, r3
 8002c26:	e00c      	b.n	8002c42 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	43da      	mvns	r2, r3
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	4013      	ands	r3, r2
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	bf0c      	ite	eq
 8002c3a:	2301      	moveq	r3, #1
 8002c3c:	2300      	movne	r3, #0
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	461a      	mov	r2, r3
 8002c42:	79fb      	ldrb	r3, [r7, #7]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d0b6      	beq.n	8002bb6 <I2C_WaitOnFlagUntilTimeout+0x12>
=======
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	603b      	str	r3, [r7, #0]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cfc:	e025      	b.n	8002d4a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d04:	d021      	beq.n	8002d4a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d06:	f7fe ffa1 	bl	8001c4c <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d302      	bcc.n	8002d1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d116      	bne.n	8002d4a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2220      	movs	r2, #32
 8002d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	f043 0220 	orr.w	r2, r3, #32
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e023      	b.n	8002d92 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	0c1b      	lsrs	r3, r3, #16
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d10d      	bne.n	8002d70 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	43da      	mvns	r2, r3
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	bf0c      	ite	eq
 8002d66:	2301      	moveq	r3, #1
 8002d68:	2300      	movne	r3, #0
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	e00c      	b.n	8002d8a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	43da      	mvns	r2, r3
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	bf0c      	ite	eq
 8002d82:	2301      	moveq	r3, #1
 8002d84:	2300      	movne	r3, #0
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	461a      	mov	r2, r3
 8002d8a:	79fb      	ldrb	r3, [r7, #7]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d0b6      	beq.n	8002cfe <I2C_WaitOnFlagUntilTimeout+0x12>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
=======
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b084      	sub	sp, #16
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	60f8      	str	r0, [r7, #12]
 8002c5a:	60b9      	str	r1, [r7, #8]
 8002c5c:	607a      	str	r2, [r7, #4]
 8002c5e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c60:	e051      	b.n	8002d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c70:	d123      	bne.n	8002cba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c80:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c8a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2220      	movs	r2, #32
 8002c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	f043 0204 	orr.w	r2, r3, #4
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e046      	b.n	8002d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
=======
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b084      	sub	sp, #16
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	60f8      	str	r0, [r7, #12]
 8002da2:	60b9      	str	r1, [r7, #8]
 8002da4:	607a      	str	r2, [r7, #4]
 8002da6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002da8:	e051      	b.n	8002e4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002db8:	d123      	bne.n	8002e02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dc8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002dd2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	f043 0204 	orr.w	r2, r3, #4
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e046      	b.n	8002e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< HEAD
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cc0:	d021      	beq.n	8002d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cc2:	f7fe ff39 	bl	8001b38 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d302      	bcc.n	8002cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d116      	bne.n	8002d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	f043 0220 	orr.w	r2, r3, #32
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e020      	b.n	8002d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	0c1b      	lsrs	r3, r3, #16
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d10c      	bne.n	8002d2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	43da      	mvns	r2, r3
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	bf14      	ite	ne
 8002d22:	2301      	movne	r3, #1
 8002d24:	2300      	moveq	r3, #0
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	e00b      	b.n	8002d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	43da      	mvns	r2, r3
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	4013      	ands	r3, r2
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	bf14      	ite	ne
 8002d3c:	2301      	movne	r3, #1
 8002d3e:	2300      	moveq	r3, #0
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d18d      	bne.n	8002c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
=======
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e08:	d021      	beq.n	8002e4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e0a:	f7fe ff1f 	bl	8001c4c <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d302      	bcc.n	8002e20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d116      	bne.n	8002e4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2220      	movs	r2, #32
 8002e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	f043 0220 	orr.w	r2, r3, #32
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e020      	b.n	8002e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	0c1b      	lsrs	r3, r3, #16
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d10c      	bne.n	8002e72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	43da      	mvns	r2, r3
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	4013      	ands	r3, r2
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	bf14      	ite	ne
 8002e6a:	2301      	movne	r3, #1
 8002e6c:	2300      	moveq	r3, #0
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	e00b      	b.n	8002e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	43da      	mvns	r2, r3
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	bf14      	ite	ne
 8002e84:	2301      	movne	r3, #1
 8002e86:	2300      	moveq	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d18d      	bne.n	8002daa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <I2C_WaitOnTXEFlagUntilTimeout>:
=======
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <I2C_WaitOnTXEFlagUntilTimeout>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d5c:	e02d      	b.n	8002dba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f000 f8ce 	bl	8002f00 <I2C_IsAcknowledgeFailed>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e02d      	b.n	8002dca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
=======
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ea4:	e02d      	b.n	8002f02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f000 f8ce 	bl	8003048 <I2C_IsAcknowledgeFailed>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e02d      	b.n	8002f12 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< HEAD
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d74:	d021      	beq.n	8002dba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d76:	f7fe fedf 	bl	8001b38 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d302      	bcc.n	8002d8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d116      	bne.n	8002dba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2220      	movs	r2, #32
 8002d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	f043 0220 	orr.w	r2, r3, #32
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e007      	b.n	8002dca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dc4:	2b80      	cmp	r3, #128	; 0x80
 8002dc6:	d1ca      	bne.n	8002d5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
=======
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ebc:	d021      	beq.n	8002f02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ebe:	f7fe fec5 	bl	8001c4c <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d302      	bcc.n	8002ed4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d116      	bne.n	8002f02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2220      	movs	r2, #32
 8002ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	f043 0220 	orr.w	r2, r3, #32
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e007      	b.n	8002f12 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f0c:	2b80      	cmp	r3, #128	; 0x80
 8002f0e:	d1ca      	bne.n	8002ea6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <I2C_WaitOnBTFFlagUntilTimeout>:
=======
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <I2C_WaitOnBTFFlagUntilTimeout>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b084      	sub	sp, #16
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	60f8      	str	r0, [r7, #12]
 8002dda:	60b9      	str	r1, [r7, #8]
 8002ddc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dde:	e02d      	b.n	8002e3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f000 f88d 	bl	8002f00 <I2C_IsAcknowledgeFailed>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e02d      	b.n	8002e4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
=======
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b084      	sub	sp, #16
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	60f8      	str	r0, [r7, #12]
 8002f22:	60b9      	str	r1, [r7, #8]
 8002f24:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f26:	e02d      	b.n	8002f84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f000 f88d 	bl	8003048 <I2C_IsAcknowledgeFailed>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e02d      	b.n	8002f94 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
<<<<<<< HEAD
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002df6:	d021      	beq.n	8002e3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002df8:	f7fe fe9e 	bl	8001b38 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	68ba      	ldr	r2, [r7, #8]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d302      	bcc.n	8002e0e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d116      	bne.n	8002e3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2220      	movs	r2, #32
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e28:	f043 0220 	orr.w	r2, r3, #32
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e007      	b.n	8002e4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	f003 0304 	and.w	r3, r3, #4
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d1ca      	bne.n	8002de0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
=======
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f3e:	d021      	beq.n	8002f84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f40:	f7fe fe84 	bl	8001c4c <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	68ba      	ldr	r2, [r7, #8]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d302      	bcc.n	8002f56 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d116      	bne.n	8002f84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f70:	f043 0220 	orr.w	r2, r3, #32
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e007      	b.n	8002f94 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	f003 0304 	and.w	r3, r3, #4
 8002f8e:	2b04      	cmp	r3, #4
 8002f90:	d1ca      	bne.n	8002f28 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <I2C_WaitOnRXNEFlagUntilTimeout>:
=======
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <I2C_WaitOnRXNEFlagUntilTimeout>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e60:	e042      	b.n	8002ee8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	f003 0310 	and.w	r3, r3, #16
 8002e6c:	2b10      	cmp	r3, #16
 8002e6e:	d119      	bne.n	8002ea4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f06f 0210 	mvn.w	r2, #16
 8002e78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2220      	movs	r2, #32
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e029      	b.n	8002ef8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
=======
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fa8:	e042      	b.n	8003030 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	f003 0310 	and.w	r3, r3, #16
 8002fb4:	2b10      	cmp	r3, #16
 8002fb6:	d119      	bne.n	8002fec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f06f 0210 	mvn.w	r2, #16
 8002fc0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e029      	b.n	8003040 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
<<<<<<< HEAD
 8002ea4:	f7fe fe48 	bl	8001b38 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d302      	bcc.n	8002eba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d116      	bne.n	8002ee8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed4:	f043 0220 	orr.w	r2, r3, #32
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e007      	b.n	8002ef8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef2:	2b40      	cmp	r3, #64	; 0x40
 8002ef4:	d1b5      	bne.n	8002e62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <I2C_IsAcknowledgeFailed>:
=======
 8002fec:	f7fe fe2e 	bl	8001c4c <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d302      	bcc.n	8003002 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d116      	bne.n	8003030 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2220      	movs	r2, #32
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	f043 0220 	orr.w	r2, r3, #32
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e007      	b.n	8003040 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800303a:	2b40      	cmp	r3, #64	; 0x40
 800303c:	d1b5      	bne.n	8002faa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <I2C_IsAcknowledgeFailed>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f16:	d11b      	bne.n	8002f50 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f20:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3c:	f043 0204 	orr.w	r2, r3, #4
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e000      	b.n	8002f52 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
	...

08002f60 <HAL_RCC_OscConfig>:
=======
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800305a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800305e:	d11b      	bne.n	8003098 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003068:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2220      	movs	r2, #32
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003084:	f043 0204 	orr.w	r2, r3, #4
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e000      	b.n	800309a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
	...

080030a8 <HAL_RCC_OscConfig>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
=======
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e25b      	b.n	800342a <HAL_RCC_OscConfig+0x4ca>
=======
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e25b      	b.n	8003572 <HAL_RCC_OscConfig+0x4ca>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d075      	beq.n	800306a <HAL_RCC_OscConfig+0x10a>
=======
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d075      	beq.n	80031b2 <HAL_RCC_OscConfig+0x10a>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
<<<<<<< HEAD
 8002f7e:	4ba3      	ldr	r3, [pc, #652]	; (800320c <HAL_RCC_OscConfig+0x2ac>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 030c 	and.w	r3, r3, #12
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	d00c      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f8a:	4ba0      	ldr	r3, [pc, #640]	; (800320c <HAL_RCC_OscConfig+0x2ac>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f92:	2b08      	cmp	r3, #8
 8002f94:	d112      	bne.n	8002fbc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f96:	4b9d      	ldr	r3, [pc, #628]	; (800320c <HAL_RCC_OscConfig+0x2ac>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fa2:	d10b      	bne.n	8002fbc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa4:	4b99      	ldr	r3, [pc, #612]	; (800320c <HAL_RCC_OscConfig+0x2ac>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d05b      	beq.n	8003068 <HAL_RCC_OscConfig+0x108>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d157      	bne.n	8003068 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e236      	b.n	800342a <HAL_RCC_OscConfig+0x4ca>
=======
 80030c6:	4ba3      	ldr	r3, [pc, #652]	; (8003354 <HAL_RCC_OscConfig+0x2ac>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f003 030c 	and.w	r3, r3, #12
 80030ce:	2b04      	cmp	r3, #4
 80030d0:	d00c      	beq.n	80030ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030d2:	4ba0      	ldr	r3, [pc, #640]	; (8003354 <HAL_RCC_OscConfig+0x2ac>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030da:	2b08      	cmp	r3, #8
 80030dc:	d112      	bne.n	8003104 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030de:	4b9d      	ldr	r3, [pc, #628]	; (8003354 <HAL_RCC_OscConfig+0x2ac>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030ea:	d10b      	bne.n	8003104 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ec:	4b99      	ldr	r3, [pc, #612]	; (8003354 <HAL_RCC_OscConfig+0x2ac>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d05b      	beq.n	80031b0 <HAL_RCC_OscConfig+0x108>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d157      	bne.n	80031b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e236      	b.n	8003572 <HAL_RCC_OscConfig+0x4ca>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fc4:	d106      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x74>
 8002fc6:	4b91      	ldr	r3, [pc, #580]	; (800320c <HAL_RCC_OscConfig+0x2ac>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a90      	ldr	r2, [pc, #576]	; (800320c <HAL_RCC_OscConfig+0x2ac>)
 8002fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd0:	6013      	str	r3, [r2, #0]
 8002fd2:	e01d      	b.n	8003010 <HAL_RCC_OscConfig+0xb0>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fdc:	d10c      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x98>
 8002fde:	4b8b      	ldr	r3, [pc, #556]	; (800320c <HAL_RCC_OscConfig+0x2ac>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a8a      	ldr	r2, [pc, #552]	; (800320c <HAL_RCC_OscConfig+0x2ac>)
 8002fe4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fe8:	6013      	str	r3, [r2, #0]
 8002fea:	4b88      	ldr	r3, [pc, #544]	; (800320c <HAL_RCC_OscConfig+0x2ac>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a87      	ldr	r2, [pc, #540]	; (800320c <HAL_RCC_OscConfig+0x2ac>)
 8002ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff4:	6013      	str	r3, [r2, #0]
 8002ff6:	e00b      	b.n	8003010 <HAL_RCC_OscConfig+0xb0>
 8002ff8:	4b84      	ldr	r3, [pc, #528]	; (800320c <HAL_RCC_OscConfig+0x2ac>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a83      	ldr	r2, [pc, #524]	; (800320c <HAL_RCC_OscConfig+0x2ac>)
 8002ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003002:	6013      	str	r3, [r2, #0]
 8003004:	4b81      	ldr	r3, [pc, #516]	; (800320c <HAL_RCC_OscConfig+0x2ac>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a80      	ldr	r2, [pc, #512]	; (800320c <HAL_RCC_OscConfig+0x2ac>)
 800300a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800300e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d013      	beq.n	8003040 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003018:	f7fe fd8e 	bl	8001b38 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003020:	f7fe fd8a 	bl	8001b38 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b64      	cmp	r3, #100	; 0x64
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e1fb      	b.n	800342a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003032:	4b76      	ldr	r3, [pc, #472]	; (800320c <HAL_RCC_OscConfig+0x2ac>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d0f0      	beq.n	8003020 <HAL_RCC_OscConfig+0xc0>
 800303e:	e014      	b.n	800306a <HAL_RCC_OscConfig+0x10a>
=======
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800310c:	d106      	bne.n	800311c <HAL_RCC_OscConfig+0x74>
 800310e:	4b91      	ldr	r3, [pc, #580]	; (8003354 <HAL_RCC_OscConfig+0x2ac>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a90      	ldr	r2, [pc, #576]	; (8003354 <HAL_RCC_OscConfig+0x2ac>)
 8003114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003118:	6013      	str	r3, [r2, #0]
 800311a:	e01d      	b.n	8003158 <HAL_RCC_OscConfig+0xb0>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003124:	d10c      	bne.n	8003140 <HAL_RCC_OscConfig+0x98>
 8003126:	4b8b      	ldr	r3, [pc, #556]	; (8003354 <HAL_RCC_OscConfig+0x2ac>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a8a      	ldr	r2, [pc, #552]	; (8003354 <HAL_RCC_OscConfig+0x2ac>)
 800312c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003130:	6013      	str	r3, [r2, #0]
 8003132:	4b88      	ldr	r3, [pc, #544]	; (8003354 <HAL_RCC_OscConfig+0x2ac>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a87      	ldr	r2, [pc, #540]	; (8003354 <HAL_RCC_OscConfig+0x2ac>)
 8003138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800313c:	6013      	str	r3, [r2, #0]
 800313e:	e00b      	b.n	8003158 <HAL_RCC_OscConfig+0xb0>
 8003140:	4b84      	ldr	r3, [pc, #528]	; (8003354 <HAL_RCC_OscConfig+0x2ac>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a83      	ldr	r2, [pc, #524]	; (8003354 <HAL_RCC_OscConfig+0x2ac>)
 8003146:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800314a:	6013      	str	r3, [r2, #0]
 800314c:	4b81      	ldr	r3, [pc, #516]	; (8003354 <HAL_RCC_OscConfig+0x2ac>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a80      	ldr	r2, [pc, #512]	; (8003354 <HAL_RCC_OscConfig+0x2ac>)
 8003152:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003156:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d013      	beq.n	8003188 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003160:	f7fe fd74 	bl	8001c4c <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003168:	f7fe fd70 	bl	8001c4c <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b64      	cmp	r3, #100	; 0x64
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e1fb      	b.n	8003572 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800317a:	4b76      	ldr	r3, [pc, #472]	; (8003354 <HAL_RCC_OscConfig+0x2ac>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d0f0      	beq.n	8003168 <HAL_RCC_OscConfig+0xc0>
 8003186:	e014      	b.n	80031b2 <HAL_RCC_OscConfig+0x10a>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8003040:	f7fe fd7a 	bl	8001b38 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003048:	f7fe fd76 	bl	8001b38 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b64      	cmp	r3, #100	; 0x64
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e1e7      	b.n	800342a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800305a:	4b6c      	ldr	r3, [pc, #432]	; (800320c <HAL_RCC_OscConfig+0x2ac>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1f0      	bne.n	8003048 <HAL_RCC_OscConfig+0xe8>
 8003066:	e000      	b.n	800306a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003068:	bf00      	nop
=======
 8003188:	f7fe fd60 	bl	8001c4c <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003190:	f7fe fd5c 	bl	8001c4c <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b64      	cmp	r3, #100	; 0x64
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e1e7      	b.n	8003572 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031a2:	4b6c      	ldr	r3, [pc, #432]	; (8003354 <HAL_RCC_OscConfig+0x2ac>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1f0      	bne.n	8003190 <HAL_RCC_OscConfig+0xe8>
 80031ae:	e000      	b.n	80031b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031b0:	bf00      	nop
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d063      	beq.n	800313e <HAL_RCC_OscConfig+0x1de>
=======
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d063      	beq.n	8003286 <HAL_RCC_OscConfig+0x1de>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
<<<<<<< HEAD
 8003076:	4b65      	ldr	r3, [pc, #404]	; (800320c <HAL_RCC_OscConfig+0x2ac>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 030c 	and.w	r3, r3, #12
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00b      	beq.n	800309a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003082:	4b62      	ldr	r3, [pc, #392]	; (800320c <HAL_RCC_OscConfig+0x2ac>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800308a:	2b08      	cmp	r3, #8
 800308c:	d11c      	bne.n	80030c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800308e:	4b5f      	ldr	r3, [pc, #380]	; (800320c <HAL_RCC_OscConfig+0x2ac>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d116      	bne.n	80030c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800309a:	4b5c      	ldr	r3, [pc, #368]	; (800320c <HAL_RCC_OscConfig+0x2ac>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d005      	beq.n	80030b2 <HAL_RCC_OscConfig+0x152>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d001      	beq.n	80030b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e1bb      	b.n	800342a <HAL_RCC_OscConfig+0x4ca>
=======
 80031be:	4b65      	ldr	r3, [pc, #404]	; (8003354 <HAL_RCC_OscConfig+0x2ac>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 030c 	and.w	r3, r3, #12
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00b      	beq.n	80031e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ca:	4b62      	ldr	r3, [pc, #392]	; (8003354 <HAL_RCC_OscConfig+0x2ac>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031d2:	2b08      	cmp	r3, #8
 80031d4:	d11c      	bne.n	8003210 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031d6:	4b5f      	ldr	r3, [pc, #380]	; (8003354 <HAL_RCC_OscConfig+0x2ac>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d116      	bne.n	8003210 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031e2:	4b5c      	ldr	r3, [pc, #368]	; (8003354 <HAL_RCC_OscConfig+0x2ac>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d005      	beq.n	80031fa <HAL_RCC_OscConfig+0x152>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d001      	beq.n	80031fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e1bb      	b.n	8003572 <HAL_RCC_OscConfig+0x4ca>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 80030b2:	4b56      	ldr	r3, [pc, #344]	; (800320c <HAL_RCC_OscConfig+0x2ac>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	4952      	ldr	r1, [pc, #328]	; (800320c <HAL_RCC_OscConfig+0x2ac>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030c6:	e03a      	b.n	800313e <HAL_RCC_OscConfig+0x1de>
=======
 80031fa:	4b56      	ldr	r3, [pc, #344]	; (8003354 <HAL_RCC_OscConfig+0x2ac>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	4952      	ldr	r1, [pc, #328]	; (8003354 <HAL_RCC_OscConfig+0x2ac>)
 800320a:	4313      	orrs	r3, r2
 800320c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800320e:	e03a      	b.n	8003286 <HAL_RCC_OscConfig+0x1de>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
<<<<<<< HEAD
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d020      	beq.n	8003112 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030d0:	4b4f      	ldr	r3, [pc, #316]	; (8003210 <HAL_RCC_OscConfig+0x2b0>)
 80030d2:	2201      	movs	r2, #1
 80030d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d6:	f7fe fd2f 	bl	8001b38 <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030dc:	e008      	b.n	80030f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030de:	f7fe fd2b 	bl	8001b38 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e19c      	b.n	800342a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f0:	4b46      	ldr	r3, [pc, #280]	; (800320c <HAL_RCC_OscConfig+0x2ac>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d0f0      	beq.n	80030de <HAL_RCC_OscConfig+0x17e>
=======
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d020      	beq.n	800325a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003218:	4b4f      	ldr	r3, [pc, #316]	; (8003358 <HAL_RCC_OscConfig+0x2b0>)
 800321a:	2201      	movs	r2, #1
 800321c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321e:	f7fe fd15 	bl	8001c4c <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003224:	e008      	b.n	8003238 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003226:	f7fe fd11 	bl	8001c4c <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e19c      	b.n	8003572 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003238:	4b46      	ldr	r3, [pc, #280]	; (8003354 <HAL_RCC_OscConfig+0x2ac>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d0f0      	beq.n	8003226 <HAL_RCC_OscConfig+0x17e>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 80030fc:	4b43      	ldr	r3, [pc, #268]	; (800320c <HAL_RCC_OscConfig+0x2ac>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	4940      	ldr	r1, [pc, #256]	; (800320c <HAL_RCC_OscConfig+0x2ac>)
 800310c:	4313      	orrs	r3, r2
 800310e:	600b      	str	r3, [r1, #0]
 8003110:	e015      	b.n	800313e <HAL_RCC_OscConfig+0x1de>
=======
 8003244:	4b43      	ldr	r3, [pc, #268]	; (8003354 <HAL_RCC_OscConfig+0x2ac>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	4940      	ldr	r1, [pc, #256]	; (8003354 <HAL_RCC_OscConfig+0x2ac>)
 8003254:	4313      	orrs	r3, r2
 8003256:	600b      	str	r3, [r1, #0]
 8003258:	e015      	b.n	8003286 <HAL_RCC_OscConfig+0x1de>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 8003112:	4b3f      	ldr	r3, [pc, #252]	; (8003210 <HAL_RCC_OscConfig+0x2b0>)
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003118:	f7fe fd0e 	bl	8001b38 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003120:	f7fe fd0a 	bl	8001b38 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e17b      	b.n	800342a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003132:	4b36      	ldr	r3, [pc, #216]	; (800320c <HAL_RCC_OscConfig+0x2ac>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1f0      	bne.n	8003120 <HAL_RCC_OscConfig+0x1c0>
=======
 800325a:	4b3f      	ldr	r3, [pc, #252]	; (8003358 <HAL_RCC_OscConfig+0x2b0>)
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003260:	f7fe fcf4 	bl	8001c4c <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003268:	f7fe fcf0 	bl	8001c4c <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e17b      	b.n	8003572 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800327a:	4b36      	ldr	r3, [pc, #216]	; (8003354 <HAL_RCC_OscConfig+0x2ac>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1f0      	bne.n	8003268 <HAL_RCC_OscConfig+0x1c0>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0308 	and.w	r3, r3, #8
 8003146:	2b00      	cmp	r3, #0
 8003148:	d030      	beq.n	80031ac <HAL_RCC_OscConfig+0x24c>
=======
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0308 	and.w	r3, r3, #8
 800328e:	2b00      	cmp	r3, #0
 8003290:	d030      	beq.n	80032f4 <HAL_RCC_OscConfig+0x24c>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
<<<<<<< HEAD
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d016      	beq.n	8003180 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003152:	4b30      	ldr	r3, [pc, #192]	; (8003214 <HAL_RCC_OscConfig+0x2b4>)
 8003154:	2201      	movs	r2, #1
 8003156:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003158:	f7fe fcee 	bl	8001b38 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003160:	f7fe fcea 	bl	8001b38 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e15b      	b.n	800342a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003172:	4b26      	ldr	r3, [pc, #152]	; (800320c <HAL_RCC_OscConfig+0x2ac>)
 8003174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d0f0      	beq.n	8003160 <HAL_RCC_OscConfig+0x200>
 800317e:	e015      	b.n	80031ac <HAL_RCC_OscConfig+0x24c>
=======
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d016      	beq.n	80032c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800329a:	4b30      	ldr	r3, [pc, #192]	; (800335c <HAL_RCC_OscConfig+0x2b4>)
 800329c:	2201      	movs	r2, #1
 800329e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a0:	f7fe fcd4 	bl	8001c4c <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032a8:	f7fe fcd0 	bl	8001c4c <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e15b      	b.n	8003572 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ba:	4b26      	ldr	r3, [pc, #152]	; (8003354 <HAL_RCC_OscConfig+0x2ac>)
 80032bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d0f0      	beq.n	80032a8 <HAL_RCC_OscConfig+0x200>
 80032c6:	e015      	b.n	80032f4 <HAL_RCC_OscConfig+0x24c>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 8003180:	4b24      	ldr	r3, [pc, #144]	; (8003214 <HAL_RCC_OscConfig+0x2b4>)
 8003182:	2200      	movs	r2, #0
 8003184:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003186:	f7fe fcd7 	bl	8001b38 <HAL_GetTick>
 800318a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800318c:	e008      	b.n	80031a0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800318e:	f7fe fcd3 	bl	8001b38 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e144      	b.n	800342a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031a0:	4b1a      	ldr	r3, [pc, #104]	; (800320c <HAL_RCC_OscConfig+0x2ac>)
 80031a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1f0      	bne.n	800318e <HAL_RCC_OscConfig+0x22e>
=======
 80032c8:	4b24      	ldr	r3, [pc, #144]	; (800335c <HAL_RCC_OscConfig+0x2b4>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ce:	f7fe fcbd 	bl	8001c4c <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d4:	e008      	b.n	80032e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032d6:	f7fe fcb9 	bl	8001c4c <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e144      	b.n	8003572 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e8:	4b1a      	ldr	r3, [pc, #104]	; (8003354 <HAL_RCC_OscConfig+0x2ac>)
 80032ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1f0      	bne.n	80032d6 <HAL_RCC_OscConfig+0x22e>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0304 	and.w	r3, r3, #4
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f000 80a0 	beq.w	80032fa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031ba:	2300      	movs	r3, #0
 80031bc:	75fb      	strb	r3, [r7, #23]
=======
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 80a0 	beq.w	8003442 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003302:	2300      	movs	r3, #0
 8003304:	75fb      	strb	r3, [r7, #23]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 80031be:	4b13      	ldr	r3, [pc, #76]	; (800320c <HAL_RCC_OscConfig+0x2ac>)
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10f      	bne.n	80031ea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ca:	2300      	movs	r3, #0
 80031cc:	60bb      	str	r3, [r7, #8]
 80031ce:	4b0f      	ldr	r3, [pc, #60]	; (800320c <HAL_RCC_OscConfig+0x2ac>)
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	4a0e      	ldr	r2, [pc, #56]	; (800320c <HAL_RCC_OscConfig+0x2ac>)
 80031d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031d8:	6413      	str	r3, [r2, #64]	; 0x40
 80031da:	4b0c      	ldr	r3, [pc, #48]	; (800320c <HAL_RCC_OscConfig+0x2ac>)
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e2:	60bb      	str	r3, [r7, #8]
 80031e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031e6:	2301      	movs	r3, #1
 80031e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ea:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <HAL_RCC_OscConfig+0x2b8>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d121      	bne.n	800323a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031f6:	4b08      	ldr	r3, [pc, #32]	; (8003218 <HAL_RCC_OscConfig+0x2b8>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a07      	ldr	r2, [pc, #28]	; (8003218 <HAL_RCC_OscConfig+0x2b8>)
 80031fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003200:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003202:	f7fe fc99 	bl	8001b38 <HAL_GetTick>
 8003206:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003208:	e011      	b.n	800322e <HAL_RCC_OscConfig+0x2ce>
 800320a:	bf00      	nop
 800320c:	40023800 	.word	0x40023800
 8003210:	42470000 	.word	0x42470000
 8003214:	42470e80 	.word	0x42470e80
 8003218:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800321c:	f7fe fc8c 	bl	8001b38 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e0fd      	b.n	800342a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800322e:	4b81      	ldr	r3, [pc, #516]	; (8003434 <HAL_RCC_OscConfig+0x4d4>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003236:	2b00      	cmp	r3, #0
 8003238:	d0f0      	beq.n	800321c <HAL_RCC_OscConfig+0x2bc>
=======
 8003306:	4b13      	ldr	r3, [pc, #76]	; (8003354 <HAL_RCC_OscConfig+0x2ac>)
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10f      	bne.n	8003332 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003312:	2300      	movs	r3, #0
 8003314:	60bb      	str	r3, [r7, #8]
 8003316:	4b0f      	ldr	r3, [pc, #60]	; (8003354 <HAL_RCC_OscConfig+0x2ac>)
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	4a0e      	ldr	r2, [pc, #56]	; (8003354 <HAL_RCC_OscConfig+0x2ac>)
 800331c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003320:	6413      	str	r3, [r2, #64]	; 0x40
 8003322:	4b0c      	ldr	r3, [pc, #48]	; (8003354 <HAL_RCC_OscConfig+0x2ac>)
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800332a:	60bb      	str	r3, [r7, #8]
 800332c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800332e:	2301      	movs	r3, #1
 8003330:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003332:	4b0b      	ldr	r3, [pc, #44]	; (8003360 <HAL_RCC_OscConfig+0x2b8>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333a:	2b00      	cmp	r3, #0
 800333c:	d121      	bne.n	8003382 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800333e:	4b08      	ldr	r3, [pc, #32]	; (8003360 <HAL_RCC_OscConfig+0x2b8>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a07      	ldr	r2, [pc, #28]	; (8003360 <HAL_RCC_OscConfig+0x2b8>)
 8003344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003348:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800334a:	f7fe fc7f 	bl	8001c4c <HAL_GetTick>
 800334e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003350:	e011      	b.n	8003376 <HAL_RCC_OscConfig+0x2ce>
 8003352:	bf00      	nop
 8003354:	40023800 	.word	0x40023800
 8003358:	42470000 	.word	0x42470000
 800335c:	42470e80 	.word	0x42470e80
 8003360:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003364:	f7fe fc72 	bl	8001c4c <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e0fd      	b.n	8003572 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003376:	4b81      	ldr	r3, [pc, #516]	; (800357c <HAL_RCC_OscConfig+0x4d4>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337e:	2b00      	cmp	r3, #0
 8003380:	d0f0      	beq.n	8003364 <HAL_RCC_OscConfig+0x2bc>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d106      	bne.n	8003250 <HAL_RCC_OscConfig+0x2f0>
 8003242:	4b7d      	ldr	r3, [pc, #500]	; (8003438 <HAL_RCC_OscConfig+0x4d8>)
 8003244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003246:	4a7c      	ldr	r2, [pc, #496]	; (8003438 <HAL_RCC_OscConfig+0x4d8>)
 8003248:	f043 0301 	orr.w	r3, r3, #1
 800324c:	6713      	str	r3, [r2, #112]	; 0x70
 800324e:	e01c      	b.n	800328a <HAL_RCC_OscConfig+0x32a>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	2b05      	cmp	r3, #5
 8003256:	d10c      	bne.n	8003272 <HAL_RCC_OscConfig+0x312>
 8003258:	4b77      	ldr	r3, [pc, #476]	; (8003438 <HAL_RCC_OscConfig+0x4d8>)
 800325a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325c:	4a76      	ldr	r2, [pc, #472]	; (8003438 <HAL_RCC_OscConfig+0x4d8>)
 800325e:	f043 0304 	orr.w	r3, r3, #4
 8003262:	6713      	str	r3, [r2, #112]	; 0x70
 8003264:	4b74      	ldr	r3, [pc, #464]	; (8003438 <HAL_RCC_OscConfig+0x4d8>)
 8003266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003268:	4a73      	ldr	r2, [pc, #460]	; (8003438 <HAL_RCC_OscConfig+0x4d8>)
 800326a:	f043 0301 	orr.w	r3, r3, #1
 800326e:	6713      	str	r3, [r2, #112]	; 0x70
 8003270:	e00b      	b.n	800328a <HAL_RCC_OscConfig+0x32a>
 8003272:	4b71      	ldr	r3, [pc, #452]	; (8003438 <HAL_RCC_OscConfig+0x4d8>)
 8003274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003276:	4a70      	ldr	r2, [pc, #448]	; (8003438 <HAL_RCC_OscConfig+0x4d8>)
 8003278:	f023 0301 	bic.w	r3, r3, #1
 800327c:	6713      	str	r3, [r2, #112]	; 0x70
 800327e:	4b6e      	ldr	r3, [pc, #440]	; (8003438 <HAL_RCC_OscConfig+0x4d8>)
 8003280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003282:	4a6d      	ldr	r2, [pc, #436]	; (8003438 <HAL_RCC_OscConfig+0x4d8>)
 8003284:	f023 0304 	bic.w	r3, r3, #4
 8003288:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d015      	beq.n	80032be <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003292:	f7fe fc51 	bl	8001b38 <HAL_GetTick>
 8003296:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003298:	e00a      	b.n	80032b0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800329a:	f7fe fc4d 	bl	8001b38 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e0bc      	b.n	800342a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032b0:	4b61      	ldr	r3, [pc, #388]	; (8003438 <HAL_RCC_OscConfig+0x4d8>)
 80032b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d0ee      	beq.n	800329a <HAL_RCC_OscConfig+0x33a>
 80032bc:	e014      	b.n	80032e8 <HAL_RCC_OscConfig+0x388>
=======
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d106      	bne.n	8003398 <HAL_RCC_OscConfig+0x2f0>
 800338a:	4b7d      	ldr	r3, [pc, #500]	; (8003580 <HAL_RCC_OscConfig+0x4d8>)
 800338c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338e:	4a7c      	ldr	r2, [pc, #496]	; (8003580 <HAL_RCC_OscConfig+0x4d8>)
 8003390:	f043 0301 	orr.w	r3, r3, #1
 8003394:	6713      	str	r3, [r2, #112]	; 0x70
 8003396:	e01c      	b.n	80033d2 <HAL_RCC_OscConfig+0x32a>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	2b05      	cmp	r3, #5
 800339e:	d10c      	bne.n	80033ba <HAL_RCC_OscConfig+0x312>
 80033a0:	4b77      	ldr	r3, [pc, #476]	; (8003580 <HAL_RCC_OscConfig+0x4d8>)
 80033a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a4:	4a76      	ldr	r2, [pc, #472]	; (8003580 <HAL_RCC_OscConfig+0x4d8>)
 80033a6:	f043 0304 	orr.w	r3, r3, #4
 80033aa:	6713      	str	r3, [r2, #112]	; 0x70
 80033ac:	4b74      	ldr	r3, [pc, #464]	; (8003580 <HAL_RCC_OscConfig+0x4d8>)
 80033ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b0:	4a73      	ldr	r2, [pc, #460]	; (8003580 <HAL_RCC_OscConfig+0x4d8>)
 80033b2:	f043 0301 	orr.w	r3, r3, #1
 80033b6:	6713      	str	r3, [r2, #112]	; 0x70
 80033b8:	e00b      	b.n	80033d2 <HAL_RCC_OscConfig+0x32a>
 80033ba:	4b71      	ldr	r3, [pc, #452]	; (8003580 <HAL_RCC_OscConfig+0x4d8>)
 80033bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033be:	4a70      	ldr	r2, [pc, #448]	; (8003580 <HAL_RCC_OscConfig+0x4d8>)
 80033c0:	f023 0301 	bic.w	r3, r3, #1
 80033c4:	6713      	str	r3, [r2, #112]	; 0x70
 80033c6:	4b6e      	ldr	r3, [pc, #440]	; (8003580 <HAL_RCC_OscConfig+0x4d8>)
 80033c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ca:	4a6d      	ldr	r2, [pc, #436]	; (8003580 <HAL_RCC_OscConfig+0x4d8>)
 80033cc:	f023 0304 	bic.w	r3, r3, #4
 80033d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d015      	beq.n	8003406 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033da:	f7fe fc37 	bl	8001c4c <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e0:	e00a      	b.n	80033f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033e2:	f7fe fc33 	bl	8001c4c <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d901      	bls.n	80033f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e0bc      	b.n	8003572 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f8:	4b61      	ldr	r3, [pc, #388]	; (8003580 <HAL_RCC_OscConfig+0x4d8>)
 80033fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d0ee      	beq.n	80033e2 <HAL_RCC_OscConfig+0x33a>
 8003404:	e014      	b.n	8003430 <HAL_RCC_OscConfig+0x388>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 80032be:	f7fe fc3b 	bl	8001b38 <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032c4:	e00a      	b.n	80032dc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032c6:	f7fe fc37 	bl	8001b38 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e0a6      	b.n	800342a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032dc:	4b56      	ldr	r3, [pc, #344]	; (8003438 <HAL_RCC_OscConfig+0x4d8>)
 80032de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1ee      	bne.n	80032c6 <HAL_RCC_OscConfig+0x366>
=======
 8003406:	f7fe fc21 	bl	8001c4c <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800340c:	e00a      	b.n	8003424 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800340e:	f7fe fc1d 	bl	8001c4c <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	f241 3288 	movw	r2, #5000	; 0x1388
 800341c:	4293      	cmp	r3, r2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e0a6      	b.n	8003572 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003424:	4b56      	ldr	r3, [pc, #344]	; (8003580 <HAL_RCC_OscConfig+0x4d8>)
 8003426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1ee      	bne.n	800340e <HAL_RCC_OscConfig+0x366>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< HEAD
 80032e8:	7dfb      	ldrb	r3, [r7, #23]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d105      	bne.n	80032fa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032ee:	4b52      	ldr	r3, [pc, #328]	; (8003438 <HAL_RCC_OscConfig+0x4d8>)
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	4a51      	ldr	r2, [pc, #324]	; (8003438 <HAL_RCC_OscConfig+0x4d8>)
 80032f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032f8:	6413      	str	r3, [r2, #64]	; 0x40
=======
 8003430:	7dfb      	ldrb	r3, [r7, #23]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d105      	bne.n	8003442 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003436:	4b52      	ldr	r3, [pc, #328]	; (8003580 <HAL_RCC_OscConfig+0x4d8>)
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	4a51      	ldr	r2, [pc, #324]	; (8003580 <HAL_RCC_OscConfig+0x4d8>)
 800343c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003440:	6413      	str	r3, [r2, #64]	; 0x40
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f000 8092 	beq.w	8003428 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003304:	4b4c      	ldr	r3, [pc, #304]	; (8003438 <HAL_RCC_OscConfig+0x4d8>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f003 030c 	and.w	r3, r3, #12
 800330c:	2b08      	cmp	r3, #8
 800330e:	d05c      	beq.n	80033ca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	2b02      	cmp	r3, #2
 8003316:	d141      	bne.n	800339c <HAL_RCC_OscConfig+0x43c>
=======
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	2b00      	cmp	r3, #0
 8003448:	f000 8092 	beq.w	8003570 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800344c:	4b4c      	ldr	r3, [pc, #304]	; (8003580 <HAL_RCC_OscConfig+0x4d8>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f003 030c 	and.w	r3, r3, #12
 8003454:	2b08      	cmp	r3, #8
 8003456:	d05c      	beq.n	8003512 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	2b02      	cmp	r3, #2
 800345e:	d141      	bne.n	80034e4 <HAL_RCC_OscConfig+0x43c>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8003318:	4b48      	ldr	r3, [pc, #288]	; (800343c <HAL_RCC_OscConfig+0x4dc>)
 800331a:	2200      	movs	r2, #0
 800331c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800331e:	f7fe fc0b 	bl	8001b38 <HAL_GetTick>
 8003322:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003324:	e008      	b.n	8003338 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003326:	f7fe fc07 	bl	8001b38 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b02      	cmp	r3, #2
 8003332:	d901      	bls.n	8003338 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e078      	b.n	800342a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003338:	4b3f      	ldr	r3, [pc, #252]	; (8003438 <HAL_RCC_OscConfig+0x4d8>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1f0      	bne.n	8003326 <HAL_RCC_OscConfig+0x3c6>
=======
 8003460:	4b48      	ldr	r3, [pc, #288]	; (8003584 <HAL_RCC_OscConfig+0x4dc>)
 8003462:	2200      	movs	r2, #0
 8003464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003466:	f7fe fbf1 	bl	8001c4c <HAL_GetTick>
 800346a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800346c:	e008      	b.n	8003480 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800346e:	f7fe fbed 	bl	8001c4c <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b02      	cmp	r3, #2
 800347a:	d901      	bls.n	8003480 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e078      	b.n	8003572 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003480:	4b3f      	ldr	r3, [pc, #252]	; (8003580 <HAL_RCC_OscConfig+0x4d8>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1f0      	bne.n	800346e <HAL_RCC_OscConfig+0x3c6>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
<<<<<<< HEAD
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	69da      	ldr	r2, [r3, #28]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	431a      	orrs	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003352:	019b      	lsls	r3, r3, #6
 8003354:	431a      	orrs	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335a:	085b      	lsrs	r3, r3, #1
 800335c:	3b01      	subs	r3, #1
 800335e:	041b      	lsls	r3, r3, #16
 8003360:	431a      	orrs	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003366:	061b      	lsls	r3, r3, #24
 8003368:	4933      	ldr	r1, [pc, #204]	; (8003438 <HAL_RCC_OscConfig+0x4d8>)
 800336a:	4313      	orrs	r3, r2
 800336c:	604b      	str	r3, [r1, #4]
=======
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	69da      	ldr	r2, [r3, #28]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	431a      	orrs	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	019b      	lsls	r3, r3, #6
 800349c:	431a      	orrs	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a2:	085b      	lsrs	r3, r3, #1
 80034a4:	3b01      	subs	r3, #1
 80034a6:	041b      	lsls	r3, r3, #16
 80034a8:	431a      	orrs	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ae:	061b      	lsls	r3, r3, #24
 80034b0:	4933      	ldr	r1, [pc, #204]	; (8003580 <HAL_RCC_OscConfig+0x4d8>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	604b      	str	r3, [r1, #4]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< HEAD
 800336e:	4b33      	ldr	r3, [pc, #204]	; (800343c <HAL_RCC_OscConfig+0x4dc>)
 8003370:	2201      	movs	r2, #1
 8003372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003374:	f7fe fbe0 	bl	8001b38 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800337c:	f7fe fbdc 	bl	8001b38 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e04d      	b.n	800342a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800338e:	4b2a      	ldr	r3, [pc, #168]	; (8003438 <HAL_RCC_OscConfig+0x4d8>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d0f0      	beq.n	800337c <HAL_RCC_OscConfig+0x41c>
 800339a:	e045      	b.n	8003428 <HAL_RCC_OscConfig+0x4c8>
=======
 80034b6:	4b33      	ldr	r3, [pc, #204]	; (8003584 <HAL_RCC_OscConfig+0x4dc>)
 80034b8:	2201      	movs	r2, #1
 80034ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034bc:	f7fe fbc6 	bl	8001c4c <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034c4:	f7fe fbc2 	bl	8001c4c <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e04d      	b.n	8003572 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034d6:	4b2a      	ldr	r3, [pc, #168]	; (8003580 <HAL_RCC_OscConfig+0x4d8>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0f0      	beq.n	80034c4 <HAL_RCC_OscConfig+0x41c>
 80034e2:	e045      	b.n	8003570 <HAL_RCC_OscConfig+0x4c8>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 800339c:	4b27      	ldr	r3, [pc, #156]	; (800343c <HAL_RCC_OscConfig+0x4dc>)
 800339e:	2200      	movs	r2, #0
 80033a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a2:	f7fe fbc9 	bl	8001b38 <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033a8:	e008      	b.n	80033bc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033aa:	f7fe fbc5 	bl	8001b38 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e036      	b.n	800342a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033bc:	4b1e      	ldr	r3, [pc, #120]	; (8003438 <HAL_RCC_OscConfig+0x4d8>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1f0      	bne.n	80033aa <HAL_RCC_OscConfig+0x44a>
 80033c8:	e02e      	b.n	8003428 <HAL_RCC_OscConfig+0x4c8>
=======
 80034e4:	4b27      	ldr	r3, [pc, #156]	; (8003584 <HAL_RCC_OscConfig+0x4dc>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ea:	f7fe fbaf 	bl	8001c4c <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034f2:	f7fe fbab 	bl	8001c4c <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e036      	b.n	8003572 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003504:	4b1e      	ldr	r3, [pc, #120]	; (8003580 <HAL_RCC_OscConfig+0x4d8>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1f0      	bne.n	80034f2 <HAL_RCC_OscConfig+0x44a>
 8003510:	e02e      	b.n	8003570 <HAL_RCC_OscConfig+0x4c8>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< HEAD
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d101      	bne.n	80033d6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e029      	b.n	800342a <HAL_RCC_OscConfig+0x4ca>
=======
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d101      	bne.n	800351e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e029      	b.n	8003572 <HAL_RCC_OscConfig+0x4ca>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
<<<<<<< HEAD
 80033d6:	4b18      	ldr	r3, [pc, #96]	; (8003438 <HAL_RCC_OscConfig+0x4d8>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d11c      	bne.n	8003424 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d115      	bne.n	8003424 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033fe:	4013      	ands	r3, r2
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003404:	4293      	cmp	r3, r2
 8003406:	d10d      	bne.n	8003424 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003412:	429a      	cmp	r2, r3
 8003414:	d106      	bne.n	8003424 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003420:	429a      	cmp	r2, r3
 8003422:	d001      	beq.n	8003428 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e000      	b.n	800342a <HAL_RCC_OscConfig+0x4ca>
=======
 800351e:	4b18      	ldr	r3, [pc, #96]	; (8003580 <HAL_RCC_OscConfig+0x4d8>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	429a      	cmp	r2, r3
 8003530:	d11c      	bne.n	800356c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800353c:	429a      	cmp	r2, r3
 800353e:	d115      	bne.n	800356c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003546:	4013      	ands	r3, r2
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800354c:	4293      	cmp	r3, r2
 800354e:	d10d      	bne.n	800356c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800355a:	429a      	cmp	r2, r3
 800355c:	d106      	bne.n	800356c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003568:	429a      	cmp	r2, r3
 800356a:	d001      	beq.n	8003570 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e000      	b.n	8003572 <HAL_RCC_OscConfig+0x4ca>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3718      	adds	r7, #24
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	40007000 	.word	0x40007000
 8003438:	40023800 	.word	0x40023800
 800343c:	42470060 	.word	0x42470060

08003440 <HAL_RCC_ClockConfig>:
=======
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3718      	adds	r7, #24
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	40007000 	.word	0x40007000
 8003580:	40023800 	.word	0x40023800
 8003584:	42470060 	.word	0x42470060

08003588 <HAL_RCC_ClockConfig>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
=======
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e0cc      	b.n	80035ee <HAL_RCC_ClockConfig+0x1ae>
=======
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e0cc      	b.n	8003736 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8003454:	4b68      	ldr	r3, [pc, #416]	; (80035f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 030f 	and.w	r3, r3, #15
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	429a      	cmp	r2, r3
 8003460:	d90c      	bls.n	800347c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003462:	4b65      	ldr	r3, [pc, #404]	; (80035f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	b2d2      	uxtb	r2, r2
 8003468:	701a      	strb	r2, [r3, #0]
=======
 800359c:	4b68      	ldr	r3, [pc, #416]	; (8003740 <HAL_RCC_ClockConfig+0x1b8>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 030f 	and.w	r3, r3, #15
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d90c      	bls.n	80035c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035aa:	4b65      	ldr	r3, [pc, #404]	; (8003740 <HAL_RCC_ClockConfig+0x1b8>)
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	701a      	strb	r2, [r3, #0]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 800346a:	4b63      	ldr	r3, [pc, #396]	; (80035f8 <HAL_RCC_ClockConfig+0x1b8>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 030f 	and.w	r3, r3, #15
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	429a      	cmp	r2, r3
 8003476:	d001      	beq.n	800347c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e0b8      	b.n	80035ee <HAL_RCC_ClockConfig+0x1ae>
=======
 80035b2:	4b63      	ldr	r3, [pc, #396]	; (8003740 <HAL_RCC_ClockConfig+0x1b8>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 030f 	and.w	r3, r3, #15
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d001      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e0b8      	b.n	8003736 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d020      	beq.n	80034ca <HAL_RCC_ClockConfig+0x8a>
=======
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d020      	beq.n	8003612 <HAL_RCC_ClockConfig+0x8a>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	2b00      	cmp	r3, #0
 8003492:	d005      	beq.n	80034a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003494:	4b59      	ldr	r3, [pc, #356]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	4a58      	ldr	r2, [pc, #352]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 800349a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800349e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0308 	and.w	r3, r3, #8
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d005      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034ac:	4b53      	ldr	r3, [pc, #332]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	4a52      	ldr	r2, [pc, #328]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 80034b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034b6:	6093      	str	r3, [r2, #8]
=======
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d005      	beq.n	80035e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035dc:	4b59      	ldr	r3, [pc, #356]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	4a58      	ldr	r2, [pc, #352]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 80035e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0308 	and.w	r3, r3, #8
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d005      	beq.n	8003600 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035f4:	4b53      	ldr	r3, [pc, #332]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	4a52      	ldr	r2, [pc, #328]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 80035fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035fe:	6093      	str	r3, [r2, #8]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 80034b8:	4b50      	ldr	r3, [pc, #320]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	494d      	ldr	r1, [pc, #308]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	608b      	str	r3, [r1, #8]
=======
 8003600:	4b50      	ldr	r3, [pc, #320]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	494d      	ldr	r1, [pc, #308]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 800360e:	4313      	orrs	r3, r2
 8003610:	608b      	str	r3, [r1, #8]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d044      	beq.n	8003560 <HAL_RCC_ClockConfig+0x120>
=======
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b00      	cmp	r3, #0
 800361c:	d044      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x120>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d107      	bne.n	80034ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034de:	4b47      	ldr	r3, [pc, #284]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d119      	bne.n	800351e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e07f      	b.n	80035ee <HAL_RCC_ClockConfig+0x1ae>
=======
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d107      	bne.n	8003636 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003626:	4b47      	ldr	r3, [pc, #284]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d119      	bne.n	8003666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e07f      	b.n	8003736 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
<<<<<<< HEAD
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d003      	beq.n	80034fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034fa:	2b03      	cmp	r3, #3
 80034fc:	d107      	bne.n	800350e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034fe:	4b3f      	ldr	r3, [pc, #252]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d109      	bne.n	800351e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e06f      	b.n	80035ee <HAL_RCC_ClockConfig+0x1ae>
=======
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2b02      	cmp	r3, #2
 800363c:	d003      	beq.n	8003646 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003642:	2b03      	cmp	r3, #3
 8003644:	d107      	bne.n	8003656 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003646:	4b3f      	ldr	r3, [pc, #252]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d109      	bne.n	8003666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e06f      	b.n	8003736 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 800350e:	4b3b      	ldr	r3, [pc, #236]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e067      	b.n	80035ee <HAL_RCC_ClockConfig+0x1ae>
=======
 8003656:	4b3b      	ldr	r3, [pc, #236]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e067      	b.n	8003736 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< HEAD
 800351e:	4b37      	ldr	r3, [pc, #220]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f023 0203 	bic.w	r2, r3, #3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	4934      	ldr	r1, [pc, #208]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 800352c:	4313      	orrs	r3, r2
 800352e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003530:	f7fe fb02 	bl	8001b38 <HAL_GetTick>
 8003534:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003536:	e00a      	b.n	800354e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003538:	f7fe fafe 	bl	8001b38 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	f241 3288 	movw	r2, #5000	; 0x1388
 8003546:	4293      	cmp	r3, r2
 8003548:	d901      	bls.n	800354e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e04f      	b.n	80035ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800354e:	4b2b      	ldr	r3, [pc, #172]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 020c 	and.w	r2, r3, #12
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	429a      	cmp	r2, r3
 800355e:	d1eb      	bne.n	8003538 <HAL_RCC_ClockConfig+0xf8>
=======
 8003666:	4b37      	ldr	r3, [pc, #220]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f023 0203 	bic.w	r2, r3, #3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	4934      	ldr	r1, [pc, #208]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 8003674:	4313      	orrs	r3, r2
 8003676:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003678:	f7fe fae8 	bl	8001c4c <HAL_GetTick>
 800367c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800367e:	e00a      	b.n	8003696 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003680:	f7fe fae4 	bl	8001c4c <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	f241 3288 	movw	r2, #5000	; 0x1388
 800368e:	4293      	cmp	r3, r2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e04f      	b.n	8003736 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003696:	4b2b      	ldr	r3, [pc, #172]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f003 020c 	and.w	r2, r3, #12
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d1eb      	bne.n	8003680 <HAL_RCC_ClockConfig+0xf8>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8003560:	4b25      	ldr	r3, [pc, #148]	; (80035f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 030f 	and.w	r3, r3, #15
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	429a      	cmp	r2, r3
 800356c:	d20c      	bcs.n	8003588 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800356e:	4b22      	ldr	r3, [pc, #136]	; (80035f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	701a      	strb	r2, [r3, #0]
=======
 80036a8:	4b25      	ldr	r3, [pc, #148]	; (8003740 <HAL_RCC_ClockConfig+0x1b8>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 030f 	and.w	r3, r3, #15
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d20c      	bcs.n	80036d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b6:	4b22      	ldr	r3, [pc, #136]	; (8003740 <HAL_RCC_ClockConfig+0x1b8>)
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	b2d2      	uxtb	r2, r2
 80036bc:	701a      	strb	r2, [r3, #0]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8003576:	4b20      	ldr	r3, [pc, #128]	; (80035f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 030f 	and.w	r3, r3, #15
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	429a      	cmp	r2, r3
 8003582:	d001      	beq.n	8003588 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e032      	b.n	80035ee <HAL_RCC_ClockConfig+0x1ae>
=======
 80036be:	4b20      	ldr	r3, [pc, #128]	; (8003740 <HAL_RCC_ClockConfig+0x1b8>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 030f 	and.w	r3, r3, #15
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d001      	beq.n	80036d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e032      	b.n	8003736 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b00      	cmp	r3, #0
 8003592:	d008      	beq.n	80035a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003594:	4b19      	ldr	r3, [pc, #100]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	4916      	ldr	r1, [pc, #88]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	608b      	str	r3, [r1, #8]
=======
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0304 	and.w	r3, r3, #4
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d008      	beq.n	80036ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036dc:	4b19      	ldr	r3, [pc, #100]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	4916      	ldr	r1, [pc, #88]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	608b      	str	r3, [r1, #8]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0308 	and.w	r3, r3, #8
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d009      	beq.n	80035c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035b2:	4b12      	ldr	r3, [pc, #72]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	490e      	ldr	r1, [pc, #56]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	608b      	str	r3, [r1, #8]
=======
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0308 	and.w	r3, r3, #8
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d009      	beq.n	800370e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036fa:	4b12      	ldr	r3, [pc, #72]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	490e      	ldr	r1, [pc, #56]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 800370a:	4313      	orrs	r3, r2
 800370c:	608b      	str	r3, [r1, #8]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
<<<<<<< HEAD
 80035c6:	f000 f821 	bl	800360c <HAL_RCC_GetSysClockFreq>
 80035ca:	4601      	mov	r1, r0
 80035cc:	4b0b      	ldr	r3, [pc, #44]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	091b      	lsrs	r3, r3, #4
 80035d2:	f003 030f 	and.w	r3, r3, #15
 80035d6:	4a0a      	ldr	r2, [pc, #40]	; (8003600 <HAL_RCC_ClockConfig+0x1c0>)
 80035d8:	5cd3      	ldrb	r3, [r2, r3]
 80035da:	fa21 f303 	lsr.w	r3, r1, r3
 80035de:	4a09      	ldr	r2, [pc, #36]	; (8003604 <HAL_RCC_ClockConfig+0x1c4>)
 80035e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035e2:	4b09      	ldr	r3, [pc, #36]	; (8003608 <HAL_RCC_ClockConfig+0x1c8>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7fe f9b4 	bl	8001954 <HAL_InitTick>

  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3710      	adds	r7, #16
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	40023c00 	.word	0x40023c00
 80035fc:	40023800 	.word	0x40023800
 8003600:	080070f0 	.word	0x080070f0
 8003604:	20000000 	.word	0x20000000
 8003608:	20000004 	.word	0x20000004

0800360c <HAL_RCC_GetSysClockFreq>:
=======
 800370e:	f000 f821 	bl	8003754 <HAL_RCC_GetSysClockFreq>
 8003712:	4601      	mov	r1, r0
 8003714:	4b0b      	ldr	r3, [pc, #44]	; (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	091b      	lsrs	r3, r3, #4
 800371a:	f003 030f 	and.w	r3, r3, #15
 800371e:	4a0a      	ldr	r2, [pc, #40]	; (8003748 <HAL_RCC_ClockConfig+0x1c0>)
 8003720:	5cd3      	ldrb	r3, [r2, r3]
 8003722:	fa21 f303 	lsr.w	r3, r1, r3
 8003726:	4a09      	ldr	r2, [pc, #36]	; (800374c <HAL_RCC_ClockConfig+0x1c4>)
 8003728:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800372a:	4b09      	ldr	r3, [pc, #36]	; (8003750 <HAL_RCC_ClockConfig+0x1c8>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	f7fe f964 	bl	80019fc <HAL_InitTick>

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	40023c00 	.word	0x40023c00
 8003744:	40023800 	.word	0x40023800
 8003748:	08007b68 	.word	0x08007b68
 800374c:	20000000 	.word	0x20000000
 8003750:	20000004 	.word	0x20000004

08003754 <HAL_RCC_GetSysClockFreq>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 800360c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003612:	2300      	movs	r3, #0
 8003614:	607b      	str	r3, [r7, #4]
 8003616:	2300      	movs	r3, #0
 8003618:	60fb      	str	r3, [r7, #12]
 800361a:	2300      	movs	r3, #0
 800361c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800361e:	2300      	movs	r3, #0
 8003620:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003622:	4b63      	ldr	r3, [pc, #396]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f003 030c 	and.w	r3, r3, #12
 800362a:	2b04      	cmp	r3, #4
 800362c:	d007      	beq.n	800363e <HAL_RCC_GetSysClockFreq+0x32>
 800362e:	2b08      	cmp	r3, #8
 8003630:	d008      	beq.n	8003644 <HAL_RCC_GetSysClockFreq+0x38>
 8003632:	2b00      	cmp	r3, #0
 8003634:	f040 80b4 	bne.w	80037a0 <HAL_RCC_GetSysClockFreq+0x194>
=======
 8003754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800375a:	2300      	movs	r3, #0
 800375c:	607b      	str	r3, [r7, #4]
 800375e:	2300      	movs	r3, #0
 8003760:	60fb      	str	r3, [r7, #12]
 8003762:	2300      	movs	r3, #0
 8003764:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003766:	2300      	movs	r3, #0
 8003768:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800376a:	4b63      	ldr	r3, [pc, #396]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 030c 	and.w	r3, r3, #12
 8003772:	2b04      	cmp	r3, #4
 8003774:	d007      	beq.n	8003786 <HAL_RCC_GetSysClockFreq+0x32>
 8003776:	2b08      	cmp	r3, #8
 8003778:	d008      	beq.n	800378c <HAL_RCC_GetSysClockFreq+0x38>
 800377a:	2b00      	cmp	r3, #0
 800377c:	f040 80b4 	bne.w	80038e8 <HAL_RCC_GetSysClockFreq+0x194>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 8003638:	4b5e      	ldr	r3, [pc, #376]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800363a:	60bb      	str	r3, [r7, #8]
       break;
 800363c:	e0b3      	b.n	80037a6 <HAL_RCC_GetSysClockFreq+0x19a>
=======
 8003780:	4b5e      	ldr	r3, [pc, #376]	; (80038fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003782:	60bb      	str	r3, [r7, #8]
       break;
 8003784:	e0b3      	b.n	80038ee <HAL_RCC_GetSysClockFreq+0x19a>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 800363e:	4b5e      	ldr	r3, [pc, #376]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003640:	60bb      	str	r3, [r7, #8]
      break;
 8003642:	e0b0      	b.n	80037a6 <HAL_RCC_GetSysClockFreq+0x19a>
=======
 8003786:	4b5e      	ldr	r3, [pc, #376]	; (8003900 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003788:	60bb      	str	r3, [r7, #8]
      break;
 800378a:	e0b0      	b.n	80038ee <HAL_RCC_GetSysClockFreq+0x19a>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
<<<<<<< HEAD
 8003644:	4b5a      	ldr	r3, [pc, #360]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800364c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800364e:	4b58      	ldr	r3, [pc, #352]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d04a      	beq.n	80036f0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800365a:	4b55      	ldr	r3, [pc, #340]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	099b      	lsrs	r3, r3, #6
 8003660:	f04f 0400 	mov.w	r4, #0
 8003664:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003668:	f04f 0200 	mov.w	r2, #0
 800366c:	ea03 0501 	and.w	r5, r3, r1
 8003670:	ea04 0602 	and.w	r6, r4, r2
 8003674:	4629      	mov	r1, r5
 8003676:	4632      	mov	r2, r6
 8003678:	f04f 0300 	mov.w	r3, #0
 800367c:	f04f 0400 	mov.w	r4, #0
 8003680:	0154      	lsls	r4, r2, #5
 8003682:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003686:	014b      	lsls	r3, r1, #5
 8003688:	4619      	mov	r1, r3
 800368a:	4622      	mov	r2, r4
 800368c:	1b49      	subs	r1, r1, r5
 800368e:	eb62 0206 	sbc.w	r2, r2, r6
 8003692:	f04f 0300 	mov.w	r3, #0
 8003696:	f04f 0400 	mov.w	r4, #0
 800369a:	0194      	lsls	r4, r2, #6
 800369c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80036a0:	018b      	lsls	r3, r1, #6
 80036a2:	1a5b      	subs	r3, r3, r1
 80036a4:	eb64 0402 	sbc.w	r4, r4, r2
 80036a8:	f04f 0100 	mov.w	r1, #0
 80036ac:	f04f 0200 	mov.w	r2, #0
 80036b0:	00e2      	lsls	r2, r4, #3
 80036b2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80036b6:	00d9      	lsls	r1, r3, #3
 80036b8:	460b      	mov	r3, r1
 80036ba:	4614      	mov	r4, r2
 80036bc:	195b      	adds	r3, r3, r5
 80036be:	eb44 0406 	adc.w	r4, r4, r6
 80036c2:	f04f 0100 	mov.w	r1, #0
 80036c6:	f04f 0200 	mov.w	r2, #0
 80036ca:	0262      	lsls	r2, r4, #9
 80036cc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80036d0:	0259      	lsls	r1, r3, #9
 80036d2:	460b      	mov	r3, r1
 80036d4:	4614      	mov	r4, r2
 80036d6:	4618      	mov	r0, r3
 80036d8:	4621      	mov	r1, r4
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f04f 0400 	mov.w	r4, #0
 80036e0:	461a      	mov	r2, r3
 80036e2:	4623      	mov	r3, r4
 80036e4:	f7fd f9e8 	bl	8000ab8 <__aeabi_uldivmod>
 80036e8:	4603      	mov	r3, r0
 80036ea:	460c      	mov	r4, r1
 80036ec:	60fb      	str	r3, [r7, #12]
 80036ee:	e049      	b.n	8003784 <HAL_RCC_GetSysClockFreq+0x178>
=======
 800378c:	4b5a      	ldr	r3, [pc, #360]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003794:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003796:	4b58      	ldr	r3, [pc, #352]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d04a      	beq.n	8003838 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037a2:	4b55      	ldr	r3, [pc, #340]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	099b      	lsrs	r3, r3, #6
 80037a8:	f04f 0400 	mov.w	r4, #0
 80037ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 80037b0:	f04f 0200 	mov.w	r2, #0
 80037b4:	ea03 0501 	and.w	r5, r3, r1
 80037b8:	ea04 0602 	and.w	r6, r4, r2
 80037bc:	4629      	mov	r1, r5
 80037be:	4632      	mov	r2, r6
 80037c0:	f04f 0300 	mov.w	r3, #0
 80037c4:	f04f 0400 	mov.w	r4, #0
 80037c8:	0154      	lsls	r4, r2, #5
 80037ca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80037ce:	014b      	lsls	r3, r1, #5
 80037d0:	4619      	mov	r1, r3
 80037d2:	4622      	mov	r2, r4
 80037d4:	1b49      	subs	r1, r1, r5
 80037d6:	eb62 0206 	sbc.w	r2, r2, r6
 80037da:	f04f 0300 	mov.w	r3, #0
 80037de:	f04f 0400 	mov.w	r4, #0
 80037e2:	0194      	lsls	r4, r2, #6
 80037e4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80037e8:	018b      	lsls	r3, r1, #6
 80037ea:	1a5b      	subs	r3, r3, r1
 80037ec:	eb64 0402 	sbc.w	r4, r4, r2
 80037f0:	f04f 0100 	mov.w	r1, #0
 80037f4:	f04f 0200 	mov.w	r2, #0
 80037f8:	00e2      	lsls	r2, r4, #3
 80037fa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80037fe:	00d9      	lsls	r1, r3, #3
 8003800:	460b      	mov	r3, r1
 8003802:	4614      	mov	r4, r2
 8003804:	195b      	adds	r3, r3, r5
 8003806:	eb44 0406 	adc.w	r4, r4, r6
 800380a:	f04f 0100 	mov.w	r1, #0
 800380e:	f04f 0200 	mov.w	r2, #0
 8003812:	0262      	lsls	r2, r4, #9
 8003814:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003818:	0259      	lsls	r1, r3, #9
 800381a:	460b      	mov	r3, r1
 800381c:	4614      	mov	r4, r2
 800381e:	4618      	mov	r0, r3
 8003820:	4621      	mov	r1, r4
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f04f 0400 	mov.w	r4, #0
 8003828:	461a      	mov	r2, r3
 800382a:	4623      	mov	r3, r4
 800382c:	f7fd f99c 	bl	8000b68 <__aeabi_uldivmod>
 8003830:	4603      	mov	r3, r0
 8003832:	460c      	mov	r4, r1
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	e049      	b.n	80038cc <HAL_RCC_GetSysClockFreq+0x178>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< HEAD
 80036f0:	4b2f      	ldr	r3, [pc, #188]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	099b      	lsrs	r3, r3, #6
 80036f6:	f04f 0400 	mov.w	r4, #0
 80036fa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80036fe:	f04f 0200 	mov.w	r2, #0
 8003702:	ea03 0501 	and.w	r5, r3, r1
 8003706:	ea04 0602 	and.w	r6, r4, r2
 800370a:	4629      	mov	r1, r5
 800370c:	4632      	mov	r2, r6
 800370e:	f04f 0300 	mov.w	r3, #0
 8003712:	f04f 0400 	mov.w	r4, #0
 8003716:	0154      	lsls	r4, r2, #5
 8003718:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800371c:	014b      	lsls	r3, r1, #5
 800371e:	4619      	mov	r1, r3
 8003720:	4622      	mov	r2, r4
 8003722:	1b49      	subs	r1, r1, r5
 8003724:	eb62 0206 	sbc.w	r2, r2, r6
 8003728:	f04f 0300 	mov.w	r3, #0
 800372c:	f04f 0400 	mov.w	r4, #0
 8003730:	0194      	lsls	r4, r2, #6
 8003732:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003736:	018b      	lsls	r3, r1, #6
 8003738:	1a5b      	subs	r3, r3, r1
 800373a:	eb64 0402 	sbc.w	r4, r4, r2
 800373e:	f04f 0100 	mov.w	r1, #0
 8003742:	f04f 0200 	mov.w	r2, #0
 8003746:	00e2      	lsls	r2, r4, #3
 8003748:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800374c:	00d9      	lsls	r1, r3, #3
 800374e:	460b      	mov	r3, r1
 8003750:	4614      	mov	r4, r2
 8003752:	195b      	adds	r3, r3, r5
 8003754:	eb44 0406 	adc.w	r4, r4, r6
 8003758:	f04f 0100 	mov.w	r1, #0
 800375c:	f04f 0200 	mov.w	r2, #0
 8003760:	02a2      	lsls	r2, r4, #10
 8003762:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003766:	0299      	lsls	r1, r3, #10
 8003768:	460b      	mov	r3, r1
 800376a:	4614      	mov	r4, r2
 800376c:	4618      	mov	r0, r3
 800376e:	4621      	mov	r1, r4
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f04f 0400 	mov.w	r4, #0
 8003776:	461a      	mov	r2, r3
 8003778:	4623      	mov	r3, r4
 800377a:	f7fd f99d 	bl	8000ab8 <__aeabi_uldivmod>
 800377e:	4603      	mov	r3, r0
 8003780:	460c      	mov	r4, r1
 8003782:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003784:	4b0a      	ldr	r3, [pc, #40]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	0c1b      	lsrs	r3, r3, #16
 800378a:	f003 0303 	and.w	r3, r3, #3
 800378e:	3301      	adds	r3, #1
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	fbb2 f3f3 	udiv	r3, r2, r3
 800379c:	60bb      	str	r3, [r7, #8]
      break;
 800379e:	e002      	b.n	80037a6 <HAL_RCC_GetSysClockFreq+0x19a>
=======
 8003838:	4b2f      	ldr	r3, [pc, #188]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	099b      	lsrs	r3, r3, #6
 800383e:	f04f 0400 	mov.w	r4, #0
 8003842:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003846:	f04f 0200 	mov.w	r2, #0
 800384a:	ea03 0501 	and.w	r5, r3, r1
 800384e:	ea04 0602 	and.w	r6, r4, r2
 8003852:	4629      	mov	r1, r5
 8003854:	4632      	mov	r2, r6
 8003856:	f04f 0300 	mov.w	r3, #0
 800385a:	f04f 0400 	mov.w	r4, #0
 800385e:	0154      	lsls	r4, r2, #5
 8003860:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003864:	014b      	lsls	r3, r1, #5
 8003866:	4619      	mov	r1, r3
 8003868:	4622      	mov	r2, r4
 800386a:	1b49      	subs	r1, r1, r5
 800386c:	eb62 0206 	sbc.w	r2, r2, r6
 8003870:	f04f 0300 	mov.w	r3, #0
 8003874:	f04f 0400 	mov.w	r4, #0
 8003878:	0194      	lsls	r4, r2, #6
 800387a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800387e:	018b      	lsls	r3, r1, #6
 8003880:	1a5b      	subs	r3, r3, r1
 8003882:	eb64 0402 	sbc.w	r4, r4, r2
 8003886:	f04f 0100 	mov.w	r1, #0
 800388a:	f04f 0200 	mov.w	r2, #0
 800388e:	00e2      	lsls	r2, r4, #3
 8003890:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003894:	00d9      	lsls	r1, r3, #3
 8003896:	460b      	mov	r3, r1
 8003898:	4614      	mov	r4, r2
 800389a:	195b      	adds	r3, r3, r5
 800389c:	eb44 0406 	adc.w	r4, r4, r6
 80038a0:	f04f 0100 	mov.w	r1, #0
 80038a4:	f04f 0200 	mov.w	r2, #0
 80038a8:	02a2      	lsls	r2, r4, #10
 80038aa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80038ae:	0299      	lsls	r1, r3, #10
 80038b0:	460b      	mov	r3, r1
 80038b2:	4614      	mov	r4, r2
 80038b4:	4618      	mov	r0, r3
 80038b6:	4621      	mov	r1, r4
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f04f 0400 	mov.w	r4, #0
 80038be:	461a      	mov	r2, r3
 80038c0:	4623      	mov	r3, r4
 80038c2:	f7fd f951 	bl	8000b68 <__aeabi_uldivmod>
 80038c6:	4603      	mov	r3, r0
 80038c8:	460c      	mov	r4, r1
 80038ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038cc:	4b0a      	ldr	r3, [pc, #40]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	0c1b      	lsrs	r3, r3, #16
 80038d2:	f003 0303 	and.w	r3, r3, #3
 80038d6:	3301      	adds	r3, #1
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e4:	60bb      	str	r3, [r7, #8]
      break;
 80038e6:	e002      	b.n	80038ee <HAL_RCC_GetSysClockFreq+0x19a>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 80037a0:	4b04      	ldr	r3, [pc, #16]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80037a2:	60bb      	str	r3, [r7, #8]
      break;
 80037a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037a6:	68bb      	ldr	r3, [r7, #8]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3714      	adds	r7, #20
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037b0:	40023800 	.word	0x40023800
 80037b4:	00f42400 	.word	0x00f42400
 80037b8:	007a1200 	.word	0x007a1200

080037bc <HAL_RCC_GetHCLKFreq>:
=======
 80038e8:	4b04      	ldr	r3, [pc, #16]	; (80038fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80038ea:	60bb      	str	r3, [r7, #8]
      break;
 80038ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038ee:	68bb      	ldr	r3, [r7, #8]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3714      	adds	r7, #20
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038f8:	40023800 	.word	0x40023800
 80038fc:	00f42400 	.word	0x00f42400
 8003900:	007a1200 	.word	0x007a1200

08003904 <HAL_RCC_GetHCLKFreq>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037c0:	4b03      	ldr	r3, [pc, #12]	; (80037d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80037c2:	681b      	ldr	r3, [r3, #0]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	20000000 	.word	0x20000000

080037d4 <HAL_RCC_GetPCLK1Freq>:
=======
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003908:	4b03      	ldr	r3, [pc, #12]	; (8003918 <HAL_RCC_GetHCLKFreq+0x14>)
 800390a:	681b      	ldr	r3, [r3, #0]
}
 800390c:	4618      	mov	r0, r3
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	20000000 	.word	0x20000000

0800391c <HAL_RCC_GetPCLK1Freq>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037d8:	f7ff fff0 	bl	80037bc <HAL_RCC_GetHCLKFreq>
 80037dc:	4601      	mov	r1, r0
 80037de:	4b05      	ldr	r3, [pc, #20]	; (80037f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	0a9b      	lsrs	r3, r3, #10
 80037e4:	f003 0307 	and.w	r3, r3, #7
 80037e8:	4a03      	ldr	r2, [pc, #12]	; (80037f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037ea:	5cd3      	ldrb	r3, [r2, r3]
 80037ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	40023800 	.word	0x40023800
 80037f8:	08007100 	.word	0x08007100

080037fc <HAL_RCC_GetPCLK2Freq>:
=======
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003920:	f7ff fff0 	bl	8003904 <HAL_RCC_GetHCLKFreq>
 8003924:	4601      	mov	r1, r0
 8003926:	4b05      	ldr	r3, [pc, #20]	; (800393c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	0a9b      	lsrs	r3, r3, #10
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	4a03      	ldr	r2, [pc, #12]	; (8003940 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003932:	5cd3      	ldrb	r3, [r2, r3]
 8003934:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003938:	4618      	mov	r0, r3
 800393a:	bd80      	pop	{r7, pc}
 800393c:	40023800 	.word	0x40023800
 8003940:	08007b78 	.word	0x08007b78

08003944 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< HEAD
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003800:	f7ff ffdc 	bl	80037bc <HAL_RCC_GetHCLKFreq>
 8003804:	4601      	mov	r1, r0
 8003806:	4b05      	ldr	r3, [pc, #20]	; (800381c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	0b5b      	lsrs	r3, r3, #13
 800380c:	f003 0307 	and.w	r3, r3, #7
 8003810:	4a03      	ldr	r2, [pc, #12]	; (8003820 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003812:	5cd3      	ldrb	r3, [r2, r3]
 8003814:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003818:	4618      	mov	r0, r3
 800381a:	bd80      	pop	{r7, pc}
 800381c:	40023800 	.word	0x40023800
 8003820:	08007100 	.word	0x08007100

08003824 <HAL_RCC_GetClockConfig>:
=======
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003948:	f7ff ffdc 	bl	8003904 <HAL_RCC_GetHCLKFreq>
 800394c:	4601      	mov	r1, r0
 800394e:	4b05      	ldr	r3, [pc, #20]	; (8003964 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	0b5b      	lsrs	r3, r3, #13
 8003954:	f003 0307 	and.w	r3, r3, #7
 8003958:	4a03      	ldr	r2, [pc, #12]	; (8003968 <HAL_RCC_GetPCLK2Freq+0x24>)
 800395a:	5cd3      	ldrb	r3, [r2, r3]
 800395c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003960:	4618      	mov	r0, r3
 8003962:	bd80      	pop	{r7, pc}
 8003964:	40023800 	.word	0x40023800
 8003968:	08007b78 	.word	0x08007b78

0800396c <HAL_RCC_GetClockConfig>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
<<<<<<< HEAD
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	220f      	movs	r2, #15
 8003832:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003834:	4b12      	ldr	r3, [pc, #72]	; (8003880 <HAL_RCC_GetClockConfig+0x5c>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f003 0203 	and.w	r2, r3, #3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003840:	4b0f      	ldr	r3, [pc, #60]	; (8003880 <HAL_RCC_GetClockConfig+0x5c>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800384c:	4b0c      	ldr	r3, [pc, #48]	; (8003880 <HAL_RCC_GetClockConfig+0x5c>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003858:	4b09      	ldr	r3, [pc, #36]	; (8003880 <HAL_RCC_GetClockConfig+0x5c>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	08db      	lsrs	r3, r3, #3
 800385e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003866:	4b07      	ldr	r3, [pc, #28]	; (8003884 <HAL_RCC_GetClockConfig+0x60>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 020f 	and.w	r2, r3, #15
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	601a      	str	r2, [r3, #0]
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	40023800 	.word	0x40023800
 8003884:	40023c00 	.word	0x40023c00

08003888 <HAL_TIM_Base_Init>:
=======
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	220f      	movs	r2, #15
 800397a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800397c:	4b12      	ldr	r3, [pc, #72]	; (80039c8 <HAL_RCC_GetClockConfig+0x5c>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f003 0203 	and.w	r2, r3, #3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003988:	4b0f      	ldr	r3, [pc, #60]	; (80039c8 <HAL_RCC_GetClockConfig+0x5c>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003994:	4b0c      	ldr	r3, [pc, #48]	; (80039c8 <HAL_RCC_GetClockConfig+0x5c>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80039a0:	4b09      	ldr	r3, [pc, #36]	; (80039c8 <HAL_RCC_GetClockConfig+0x5c>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	08db      	lsrs	r3, r3, #3
 80039a6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80039ae:	4b07      	ldr	r3, [pc, #28]	; (80039cc <HAL_RCC_GetClockConfig+0x60>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 020f 	and.w	r2, r3, #15
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	601a      	str	r2, [r3, #0]
}
 80039ba:	bf00      	nop
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	40023800 	.word	0x40023800
 80039cc:	40023c00 	.word	0x40023c00

080039d0 <HAL_TIM_Base_Init>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e01d      	b.n	80038d6 <HAL_TIM_Base_Init+0x4e>
=======
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e01d      	b.n	8003a1e <HAL_TIM_Base_Init+0x4e>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d106      	bne.n	80038b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d106      	bne.n	80039fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< HEAD
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f815 	bl	80038de <HAL_TIM_Base_MspInit>
=======
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f815 	bl	8003a26 <HAL_TIM_Base_MspInit>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2202      	movs	r2, #2
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3304      	adds	r3, #4
 80038c4:	4619      	mov	r1, r3
 80038c6:	4610      	mov	r0, r2
 80038c8:	f000 f968 	bl	8003b9c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <HAL_TIM_Base_MspInit>:
=======
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2202      	movs	r2, #2
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3304      	adds	r3, #4
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	4610      	mov	r0, r2
 8003a10:	f000 f968 	bl	8003ce4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <HAL_TIM_Base_MspInit>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80038de:	b480      	push	{r7}
 80038e0:	b083      	sub	sp, #12
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
=======
 8003a26:	b480      	push	{r7}
 8003a28:	b083      	sub	sp, #12
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
<<<<<<< HEAD
 80038e6:	bf00      	nop
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr

080038f2 <HAL_TIM_Base_Start_IT>:
=======
 8003a2e:	bf00      	nop
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <HAL_TIM_Base_Start_IT>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80038f2:	b480      	push	{r7}
 80038f4:	b085      	sub	sp, #20
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
=======
 8003a3a:	b480      	push	{r7}
 8003a3c:	b085      	sub	sp, #20
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
<<<<<<< HEAD
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68da      	ldr	r2, [r3, #12]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f042 0201 	orr.w	r2, r2, #1
 8003908:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2b06      	cmp	r3, #6
 800391a:	d007      	beq.n	800392c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f042 0201 	orr.w	r2, r2, #1
 800392a:	601a      	str	r2, [r3, #0]
=======
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68da      	ldr	r2, [r3, #12]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f042 0201 	orr.w	r2, r2, #1
 8003a50:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2b06      	cmp	r3, #6
 8003a62:	d007      	beq.n	8003a74 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f042 0201 	orr.w	r2, r2, #1
 8003a72:	601a      	str	r2, [r3, #0]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <HAL_TIM_IRQHandler>:
=======
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3714      	adds	r7, #20
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr

08003a82 <HAL_TIM_IRQHandler>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800393a:	b580      	push	{r7, lr}
 800393c:	b082      	sub	sp, #8
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b02      	cmp	r3, #2
 800394e:	d122      	bne.n	8003996 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b02      	cmp	r3, #2
 800395c:	d11b      	bne.n	8003996 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f06f 0202 	mvn.w	r2, #2
 8003966:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	f003 0303 	and.w	r3, r3, #3
 8003978:	2b00      	cmp	r3, #0
 800397a:	d003      	beq.n	8003984 <HAL_TIM_IRQHandler+0x4a>
=======
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b082      	sub	sp, #8
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d122      	bne.n	8003ade <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d11b      	bne.n	8003ade <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f06f 0202 	mvn.w	r2, #2
 8003aae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	f003 0303 	and.w	r3, r3, #3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d003      	beq.n	8003acc <HAL_TIM_IRQHandler+0x4a>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 f8ee 	bl	8003b5e <HAL_TIM_IC_CaptureCallback>
 8003982:	e005      	b.n	8003990 <HAL_TIM_IRQHandler+0x56>
=======
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f8ee 	bl	8003ca6 <HAL_TIM_IC_CaptureCallback>
 8003aca:	e005      	b.n	8003ad8 <HAL_TIM_IRQHandler+0x56>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 f8e0 	bl	8003b4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f8f1 	bl	8003b72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	771a      	strb	r2, [r3, #28]
=======
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 f8e0 	bl	8003c92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f8f1 	bl	8003cba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	771a      	strb	r2, [r3, #28]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
<<<<<<< HEAD
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	f003 0304 	and.w	r3, r3, #4
 80039a0:	2b04      	cmp	r3, #4
 80039a2:	d122      	bne.n	80039ea <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	f003 0304 	and.w	r3, r3, #4
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	d11b      	bne.n	80039ea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f06f 0204 	mvn.w	r2, #4
 80039ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2202      	movs	r2, #2
 80039c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d003      	beq.n	80039d8 <HAL_TIM_IRQHandler+0x9e>
=======
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	f003 0304 	and.w	r3, r3, #4
 8003ae8:	2b04      	cmp	r3, #4
 8003aea:	d122      	bne.n	8003b32 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	f003 0304 	and.w	r3, r3, #4
 8003af6:	2b04      	cmp	r3, #4
 8003af8:	d11b      	bne.n	8003b32 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f06f 0204 	mvn.w	r2, #4
 8003b02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2202      	movs	r2, #2
 8003b08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d003      	beq.n	8003b20 <HAL_TIM_IRQHandler+0x9e>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 f8c4 	bl	8003b5e <HAL_TIM_IC_CaptureCallback>
 80039d6:	e005      	b.n	80039e4 <HAL_TIM_IRQHandler+0xaa>
=======
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 f8c4 	bl	8003ca6 <HAL_TIM_IC_CaptureCallback>
 8003b1e:	e005      	b.n	8003b2c <HAL_TIM_IRQHandler+0xaa>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 f8b6 	bl	8003b4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 f8c7 	bl	8003b72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	771a      	strb	r2, [r3, #28]
=======
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 f8b6 	bl	8003c92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f8c7 	bl	8003cba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	771a      	strb	r2, [r3, #28]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
<<<<<<< HEAD
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	f003 0308 	and.w	r3, r3, #8
 80039f4:	2b08      	cmp	r3, #8
 80039f6:	d122      	bne.n	8003a3e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	f003 0308 	and.w	r3, r3, #8
 8003a02:	2b08      	cmp	r3, #8
 8003a04:	d11b      	bne.n	8003a3e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f06f 0208 	mvn.w	r2, #8
 8003a0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2204      	movs	r2, #4
 8003a14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	f003 0303 	and.w	r3, r3, #3
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d003      	beq.n	8003a2c <HAL_TIM_IRQHandler+0xf2>
=======
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	f003 0308 	and.w	r3, r3, #8
 8003b3c:	2b08      	cmp	r3, #8
 8003b3e:	d122      	bne.n	8003b86 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	f003 0308 	and.w	r3, r3, #8
 8003b4a:	2b08      	cmp	r3, #8
 8003b4c:	d11b      	bne.n	8003b86 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f06f 0208 	mvn.w	r2, #8
 8003b56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2204      	movs	r2, #4
 8003b5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	69db      	ldr	r3, [r3, #28]
 8003b64:	f003 0303 	and.w	r3, r3, #3
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d003      	beq.n	8003b74 <HAL_TIM_IRQHandler+0xf2>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 f89a 	bl	8003b5e <HAL_TIM_IC_CaptureCallback>
 8003a2a:	e005      	b.n	8003a38 <HAL_TIM_IRQHandler+0xfe>
=======
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 f89a 	bl	8003ca6 <HAL_TIM_IC_CaptureCallback>
 8003b72:	e005      	b.n	8003b80 <HAL_TIM_IRQHandler+0xfe>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 f88c 	bl	8003b4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 f89d 	bl	8003b72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	771a      	strb	r2, [r3, #28]
=======
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f88c 	bl	8003c92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f89d 	bl	8003cba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	771a      	strb	r2, [r3, #28]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
<<<<<<< HEAD
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	f003 0310 	and.w	r3, r3, #16
 8003a48:	2b10      	cmp	r3, #16
 8003a4a:	d122      	bne.n	8003a92 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	f003 0310 	and.w	r3, r3, #16
 8003a56:	2b10      	cmp	r3, #16
 8003a58:	d11b      	bne.n	8003a92 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f06f 0210 	mvn.w	r2, #16
 8003a62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2208      	movs	r2, #8
 8003a68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d003      	beq.n	8003a80 <HAL_TIM_IRQHandler+0x146>
=======
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	f003 0310 	and.w	r3, r3, #16
 8003b90:	2b10      	cmp	r3, #16
 8003b92:	d122      	bne.n	8003bda <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	f003 0310 	and.w	r3, r3, #16
 8003b9e:	2b10      	cmp	r3, #16
 8003ba0:	d11b      	bne.n	8003bda <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f06f 0210 	mvn.w	r2, #16
 8003baa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2208      	movs	r2, #8
 8003bb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	69db      	ldr	r3, [r3, #28]
 8003bb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d003      	beq.n	8003bc8 <HAL_TIM_IRQHandler+0x146>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 f870 	bl	8003b5e <HAL_TIM_IC_CaptureCallback>
 8003a7e:	e005      	b.n	8003a8c <HAL_TIM_IRQHandler+0x152>
=======
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 f870 	bl	8003ca6 <HAL_TIM_IC_CaptureCallback>
 8003bc6:	e005      	b.n	8003bd4 <HAL_TIM_IRQHandler+0x152>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 f862 	bl	8003b4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f873 	bl	8003b72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	771a      	strb	r2, [r3, #28]
=======
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f862 	bl	8003c92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f873 	bl	8003cba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	771a      	strb	r2, [r3, #28]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
<<<<<<< HEAD
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d10e      	bne.n	8003abe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d107      	bne.n	8003abe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f06f 0201 	mvn.w	r2, #1
 8003ab6:	611a      	str	r2, [r3, #16]
=======
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d10e      	bne.n	8003c06 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d107      	bne.n	8003c06 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f06f 0201 	mvn.w	r2, #1
 8003bfe:	611a      	str	r2, [r3, #16]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< HEAD
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7fd fe47 	bl	800174c <HAL_TIM_PeriodElapsedCallback>
=======
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f7fd fdf7 	bl	80017f4 <HAL_TIM_PeriodElapsedCallback>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
<<<<<<< HEAD
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac8:	2b80      	cmp	r3, #128	; 0x80
 8003aca:	d10e      	bne.n	8003aea <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad6:	2b80      	cmp	r3, #128	; 0x80
 8003ad8:	d107      	bne.n	8003aea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ae2:	611a      	str	r2, [r3, #16]
=======
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c10:	2b80      	cmp	r3, #128	; 0x80
 8003c12:	d10e      	bne.n	8003c32 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c1e:	2b80      	cmp	r3, #128	; 0x80
 8003c20:	d107      	bne.n	8003c32 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c2a:	611a      	str	r2, [r3, #16]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< HEAD
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 f8e3 	bl	8003cb0 <HAL_TIMEx_BreakCallback>
=======
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 f8e3 	bl	8003df8 <HAL_TIMEx_BreakCallback>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
<<<<<<< HEAD
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af4:	2b40      	cmp	r3, #64	; 0x40
 8003af6:	d10e      	bne.n	8003b16 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b02:	2b40      	cmp	r3, #64	; 0x40
 8003b04:	d107      	bne.n	8003b16 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b0e:	611a      	str	r2, [r3, #16]
=======
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3c:	2b40      	cmp	r3, #64	; 0x40
 8003c3e:	d10e      	bne.n	8003c5e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4a:	2b40      	cmp	r3, #64	; 0x40
 8003c4c:	d107      	bne.n	8003c5e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c56:	611a      	str	r2, [r3, #16]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< HEAD
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f838 	bl	8003b86 <HAL_TIM_TriggerCallback>
=======
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 f838 	bl	8003cce <HAL_TIM_TriggerCallback>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
<<<<<<< HEAD
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	f003 0320 	and.w	r3, r3, #32
 8003b20:	2b20      	cmp	r3, #32
 8003b22:	d10e      	bne.n	8003b42 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	f003 0320 	and.w	r3, r3, #32
 8003b2e:	2b20      	cmp	r3, #32
 8003b30:	d107      	bne.n	8003b42 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f06f 0220 	mvn.w	r2, #32
 8003b3a:	611a      	str	r2, [r3, #16]
=======
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	f003 0320 	and.w	r3, r3, #32
 8003c68:	2b20      	cmp	r3, #32
 8003c6a:	d10e      	bne.n	8003c8a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	f003 0320 	and.w	r3, r3, #32
 8003c76:	2b20      	cmp	r3, #32
 8003c78:	d107      	bne.n	8003c8a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f06f 0220 	mvn.w	r2, #32
 8003c82:	611a      	str	r2, [r3, #16]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< HEAD
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 f8ad 	bl	8003c9c <HAL_TIMEx_CommutCallback>
=======
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 f8ad 	bl	8003de4 <HAL_TIMEx_CommutCallback>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
 8003b42:	bf00      	nop
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <HAL_TIM_OC_DelayElapsedCallback>:
=======
 8003c8a:	bf00      	nop
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003b4a:	b480      	push	{r7}
 8003b4c:	b083      	sub	sp, #12
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
=======
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003b52:	bf00      	nop
 8003b54:	370c      	adds	r7, #12
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <HAL_TIM_IC_CaptureCallback>:
=======
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <HAL_TIM_IC_CaptureCallback>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003b5e:	b480      	push	{r7}
 8003b60:	b083      	sub	sp, #12
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
=======
 8003ca6:	b480      	push	{r7}
 8003ca8:	b083      	sub	sp, #12
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003b66:	bf00      	nop
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 8003cae:	bf00      	nop
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003b72:	b480      	push	{r7}
 8003b74:	b083      	sub	sp, #12
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
=======
 8003cba:	b480      	push	{r7}
 8003cbc:	b083      	sub	sp, #12
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003b7a:	bf00      	nop
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <HAL_TIM_TriggerCallback>:
=======
 8003cc2:	bf00      	nop
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr

08003cce <HAL_TIM_TriggerCallback>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
=======
 8003cce:	b480      	push	{r7}
 8003cd0:	b083      	sub	sp, #12
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003b8e:	bf00      	nop
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
	...

08003b9c <TIM_Base_SetConfig>:
=======
 8003cd6:	bf00      	nop
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
	...

08003ce4 <TIM_Base_SetConfig>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a34      	ldr	r2, [pc, #208]	; (8003c80 <TIM_Base_SetConfig+0xe4>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d00f      	beq.n	8003bd4 <TIM_Base_SetConfig+0x38>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bba:	d00b      	beq.n	8003bd4 <TIM_Base_SetConfig+0x38>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a31      	ldr	r2, [pc, #196]	; (8003c84 <TIM_Base_SetConfig+0xe8>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d007      	beq.n	8003bd4 <TIM_Base_SetConfig+0x38>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a30      	ldr	r2, [pc, #192]	; (8003c88 <TIM_Base_SetConfig+0xec>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d003      	beq.n	8003bd4 <TIM_Base_SetConfig+0x38>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a2f      	ldr	r2, [pc, #188]	; (8003c8c <TIM_Base_SetConfig+0xf0>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d108      	bne.n	8003be6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a25      	ldr	r2, [pc, #148]	; (8003c80 <TIM_Base_SetConfig+0xe4>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d01b      	beq.n	8003c26 <TIM_Base_SetConfig+0x8a>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf4:	d017      	beq.n	8003c26 <TIM_Base_SetConfig+0x8a>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a22      	ldr	r2, [pc, #136]	; (8003c84 <TIM_Base_SetConfig+0xe8>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d013      	beq.n	8003c26 <TIM_Base_SetConfig+0x8a>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a21      	ldr	r2, [pc, #132]	; (8003c88 <TIM_Base_SetConfig+0xec>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d00f      	beq.n	8003c26 <TIM_Base_SetConfig+0x8a>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a20      	ldr	r2, [pc, #128]	; (8003c8c <TIM_Base_SetConfig+0xf0>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d00b      	beq.n	8003c26 <TIM_Base_SetConfig+0x8a>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a1f      	ldr	r2, [pc, #124]	; (8003c90 <TIM_Base_SetConfig+0xf4>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d007      	beq.n	8003c26 <TIM_Base_SetConfig+0x8a>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a1e      	ldr	r2, [pc, #120]	; (8003c94 <TIM_Base_SetConfig+0xf8>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d003      	beq.n	8003c26 <TIM_Base_SetConfig+0x8a>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a1d      	ldr	r2, [pc, #116]	; (8003c98 <TIM_Base_SetConfig+0xfc>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d108      	bne.n	8003c38 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	60fb      	str	r3, [r7, #12]
=======
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a34      	ldr	r2, [pc, #208]	; (8003dc8 <TIM_Base_SetConfig+0xe4>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d00f      	beq.n	8003d1c <TIM_Base_SetConfig+0x38>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d02:	d00b      	beq.n	8003d1c <TIM_Base_SetConfig+0x38>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a31      	ldr	r2, [pc, #196]	; (8003dcc <TIM_Base_SetConfig+0xe8>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d007      	beq.n	8003d1c <TIM_Base_SetConfig+0x38>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a30      	ldr	r2, [pc, #192]	; (8003dd0 <TIM_Base_SetConfig+0xec>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d003      	beq.n	8003d1c <TIM_Base_SetConfig+0x38>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a2f      	ldr	r2, [pc, #188]	; (8003dd4 <TIM_Base_SetConfig+0xf0>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d108      	bne.n	8003d2e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a25      	ldr	r2, [pc, #148]	; (8003dc8 <TIM_Base_SetConfig+0xe4>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d01b      	beq.n	8003d6e <TIM_Base_SetConfig+0x8a>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d3c:	d017      	beq.n	8003d6e <TIM_Base_SetConfig+0x8a>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a22      	ldr	r2, [pc, #136]	; (8003dcc <TIM_Base_SetConfig+0xe8>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d013      	beq.n	8003d6e <TIM_Base_SetConfig+0x8a>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a21      	ldr	r2, [pc, #132]	; (8003dd0 <TIM_Base_SetConfig+0xec>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d00f      	beq.n	8003d6e <TIM_Base_SetConfig+0x8a>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a20      	ldr	r2, [pc, #128]	; (8003dd4 <TIM_Base_SetConfig+0xf0>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d00b      	beq.n	8003d6e <TIM_Base_SetConfig+0x8a>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a1f      	ldr	r2, [pc, #124]	; (8003dd8 <TIM_Base_SetConfig+0xf4>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d007      	beq.n	8003d6e <TIM_Base_SetConfig+0x8a>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a1e      	ldr	r2, [pc, #120]	; (8003ddc <TIM_Base_SetConfig+0xf8>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d003      	beq.n	8003d6e <TIM_Base_SetConfig+0x8a>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a1d      	ldr	r2, [pc, #116]	; (8003de0 <TIM_Base_SetConfig+0xfc>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d108      	bne.n	8003d80 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	60fb      	str	r3, [r7, #12]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a08      	ldr	r2, [pc, #32]	; (8003c80 <TIM_Base_SetConfig+0xe4>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d103      	bne.n	8003c6c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	691a      	ldr	r2, [r3, #16]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	689a      	ldr	r2, [r3, #8]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a08      	ldr	r2, [pc, #32]	; (8003dc8 <TIM_Base_SetConfig+0xe4>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d103      	bne.n	8003db4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	691a      	ldr	r2, [r3, #16]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	615a      	str	r2, [r3, #20]
}
 8003c72:	bf00      	nop
 8003c74:	3714      	adds	r7, #20
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	40010000 	.word	0x40010000
 8003c84:	40000400 	.word	0x40000400
 8003c88:	40000800 	.word	0x40000800
 8003c8c:	40000c00 	.word	0x40000c00
 8003c90:	40014000 	.word	0x40014000
 8003c94:	40014400 	.word	0x40014400
 8003c98:	40014800 	.word	0x40014800

08003c9c <HAL_TIMEx_CommutCallback>:
=======
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	615a      	str	r2, [r3, #20]
}
 8003dba:	bf00      	nop
 8003dbc:	3714      	adds	r7, #20
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	40010000 	.word	0x40010000
 8003dcc:	40000400 	.word	0x40000400
 8003dd0:	40000800 	.word	0x40000800
 8003dd4:	40000c00 	.word	0x40000c00
 8003dd8:	40014000 	.word	0x40014000
 8003ddc:	40014400 	.word	0x40014400
 8003de0:	40014800 	.word	0x40014800

08003de4 <HAL_TIMEx_CommutCallback>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
=======
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <HAL_TIMEx_BreakCallback>:
=======
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <HAL_TIMEx_BreakCallback>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
=======
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_UART_Init>:
=======
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <HAL_UART_Init>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e03f      	b.n	8003d56 <HAL_UART_Init+0x92>
=======
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e03f      	b.n	8003e9e <HAL_UART_Init+0x92>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< HEAD
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d106      	bne.n	8003cf0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
=======
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d106      	bne.n	8003e38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< HEAD
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7fd fdea 	bl	80018c4 <HAL_UART_MspInit>
=======
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7fd fd9a 	bl	800196c <HAL_UART_MspInit>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2224      	movs	r2, #36	; 0x24
 8003cf4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68da      	ldr	r2, [r3, #12]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 f829 	bl	8003d60 <UART_SetConfig>
=======
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2224      	movs	r2, #36	; 0x24
 8003e3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68da      	ldr	r2, [r3, #12]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 f90b 	bl	800406c <UART_SetConfig>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< HEAD
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	691a      	ldr	r2, [r3, #16]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	695a      	ldr	r2, [r3, #20]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68da      	ldr	r2, [r3, #12]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2220      	movs	r2, #32
 8003d48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
	...

08003d60 <UART_SetConfig>:
=======
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	691a      	ldr	r2, [r3, #16]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	695a      	ldr	r2, [r3, #20]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68da      	ldr	r2, [r3, #12]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2220      	movs	r2, #32
 8003e98:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b088      	sub	sp, #32
 8003eaa:	af02      	add	r7, sp, #8
 8003eac:	60f8      	str	r0, [r7, #12]
 8003eae:	60b9      	str	r1, [r7, #8]
 8003eb0:	603b      	str	r3, [r7, #0]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b20      	cmp	r3, #32
 8003ec4:	f040 8083 	bne.w	8003fce <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d002      	beq.n	8003ed4 <HAL_UART_Transmit+0x2e>
 8003ece:	88fb      	ldrh	r3, [r7, #6]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e07b      	b.n	8003fd0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d101      	bne.n	8003ee6 <HAL_UART_Transmit+0x40>
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	e074      	b.n	8003fd0 <HAL_UART_Transmit+0x12a>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2221      	movs	r2, #33	; 0x21
 8003ef8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003efc:	f7fd fea6 	bl	8001c4c <HAL_GetTick>
 8003f00:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	88fa      	ldrh	r2, [r7, #6]
 8003f06:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	88fa      	ldrh	r2, [r7, #6]
 8003f0c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003f16:	e042      	b.n	8003f9e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f2e:	d122      	bne.n	8003f76 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	2200      	movs	r2, #0
 8003f38:	2180      	movs	r1, #128	; 0x80
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f000 f84c 	bl	8003fd8 <UART_WaitOnFlagUntilTimeout>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d001      	beq.n	8003f4a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e042      	b.n	8003fd0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	881b      	ldrh	r3, [r3, #0]
 8003f52:	461a      	mov	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f5c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d103      	bne.n	8003f6e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	3302      	adds	r3, #2
 8003f6a:	60bb      	str	r3, [r7, #8]
 8003f6c:	e017      	b.n	8003f9e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	3301      	adds	r3, #1
 8003f72:	60bb      	str	r3, [r7, #8]
 8003f74:	e013      	b.n	8003f9e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	9300      	str	r3, [sp, #0]
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	2180      	movs	r1, #128	; 0x80
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f000 f829 	bl	8003fd8 <UART_WaitOnFlagUntilTimeout>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e01f      	b.n	8003fd0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	1c5a      	adds	r2, r3, #1
 8003f94:	60ba      	str	r2, [r7, #8]
 8003f96:	781a      	ldrb	r2, [r3, #0]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1b7      	bne.n	8003f18 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	2140      	movs	r1, #64	; 0x40
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f000 f810 	bl	8003fd8 <UART_WaitOnFlagUntilTimeout>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e006      	b.n	8003fd0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2220      	movs	r2, #32
 8003fc6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	e000      	b.n	8003fd0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003fce:	2302      	movs	r3, #2
  }
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3718      	adds	r7, #24
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	603b      	str	r3, [r7, #0]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fe8:	e02c      	b.n	8004044 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ff0:	d028      	beq.n	8004044 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d007      	beq.n	8004008 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ff8:	f7fd fe28 	bl	8001c4c <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	69ba      	ldr	r2, [r7, #24]
 8004004:	429a      	cmp	r2, r3
 8004006:	d21d      	bcs.n	8004044 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68da      	ldr	r2, [r3, #12]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004016:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	695a      	ldr	r2, [r3, #20]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 0201 	bic.w	r2, r2, #1
 8004026:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2220      	movs	r2, #32
 800402c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2220      	movs	r2, #32
 8004034:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e00f      	b.n	8004064 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	4013      	ands	r3, r2
 800404e:	68ba      	ldr	r2, [r7, #8]
 8004050:	429a      	cmp	r2, r3
 8004052:	bf0c      	ite	eq
 8004054:	2301      	moveq	r3, #1
 8004056:	2300      	movne	r3, #0
 8004058:	b2db      	uxtb	r3, r3
 800405a:	461a      	mov	r2, r3
 800405c:	79fb      	ldrb	r3, [r7, #7]
 800405e:	429a      	cmp	r2, r3
 8004060:	d0c3      	beq.n	8003fea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <UART_SetConfig>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8003d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d64:	b085      	sub	sp, #20
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
=======
 800406c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004070:	b085      	sub	sp, #20
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< HEAD
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68da      	ldr	r2, [r3, #12]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	611a      	str	r2, [r3, #16]
=======
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68da      	ldr	r2, [r3, #12]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	611a      	str	r2, [r3, #16]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
<<<<<<< HEAD
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	689a      	ldr	r2, [r3, #8]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003da2:	f023 030c 	bic.w	r3, r3, #12
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	6812      	ldr	r2, [r2, #0]
 8003daa:	68f9      	ldr	r1, [r7, #12]
 8003dac:	430b      	orrs	r3, r1
 8003dae:	60d3      	str	r3, [r2, #12]
=======
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	431a      	orrs	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	69db      	ldr	r3, [r3, #28]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80040ae:	f023 030c 	bic.w	r3, r3, #12
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	6812      	ldr	r2, [r2, #0]
 80040b6:	68f9      	ldr	r1, [r7, #12]
 80040b8:	430b      	orrs	r3, r1
 80040ba:	60d3      	str	r3, [r2, #12]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
<<<<<<< HEAD
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	699a      	ldr	r2, [r3, #24]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dce:	f040 818b 	bne.w	80040e8 <UART_SetConfig+0x388>
=======
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	699a      	ldr	r2, [r3, #24]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040da:	f040 818b 	bne.w	80043f4 <UART_SetConfig+0x388>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
<<<<<<< HEAD
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4ac1      	ldr	r2, [pc, #772]	; (80040dc <UART_SetConfig+0x37c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d005      	beq.n	8003de8 <UART_SetConfig+0x88>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4abf      	ldr	r2, [pc, #764]	; (80040e0 <UART_SetConfig+0x380>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	f040 80bd 	bne.w	8003f62 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003de8:	f7ff fd08 	bl	80037fc <HAL_RCC_GetPCLK2Freq>
 8003dec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	461d      	mov	r5, r3
 8003df2:	f04f 0600 	mov.w	r6, #0
 8003df6:	46a8      	mov	r8, r5
 8003df8:	46b1      	mov	r9, r6
 8003dfa:	eb18 0308 	adds.w	r3, r8, r8
 8003dfe:	eb49 0409 	adc.w	r4, r9, r9
 8003e02:	4698      	mov	r8, r3
 8003e04:	46a1      	mov	r9, r4
 8003e06:	eb18 0805 	adds.w	r8, r8, r5
 8003e0a:	eb49 0906 	adc.w	r9, r9, r6
 8003e0e:	f04f 0100 	mov.w	r1, #0
 8003e12:	f04f 0200 	mov.w	r2, #0
 8003e16:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003e1a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003e1e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003e22:	4688      	mov	r8, r1
 8003e24:	4691      	mov	r9, r2
 8003e26:	eb18 0005 	adds.w	r0, r8, r5
 8003e2a:	eb49 0106 	adc.w	r1, r9, r6
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	461d      	mov	r5, r3
 8003e34:	f04f 0600 	mov.w	r6, #0
 8003e38:	196b      	adds	r3, r5, r5
 8003e3a:	eb46 0406 	adc.w	r4, r6, r6
 8003e3e:	461a      	mov	r2, r3
 8003e40:	4623      	mov	r3, r4
 8003e42:	f7fc fe39 	bl	8000ab8 <__aeabi_uldivmod>
 8003e46:	4603      	mov	r3, r0
 8003e48:	460c      	mov	r4, r1
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	4ba5      	ldr	r3, [pc, #660]	; (80040e4 <UART_SetConfig+0x384>)
 8003e4e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e52:	095b      	lsrs	r3, r3, #5
 8003e54:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	461d      	mov	r5, r3
 8003e5c:	f04f 0600 	mov.w	r6, #0
 8003e60:	46a9      	mov	r9, r5
 8003e62:	46b2      	mov	sl, r6
 8003e64:	eb19 0309 	adds.w	r3, r9, r9
 8003e68:	eb4a 040a 	adc.w	r4, sl, sl
 8003e6c:	4699      	mov	r9, r3
 8003e6e:	46a2      	mov	sl, r4
 8003e70:	eb19 0905 	adds.w	r9, r9, r5
 8003e74:	eb4a 0a06 	adc.w	sl, sl, r6
 8003e78:	f04f 0100 	mov.w	r1, #0
 8003e7c:	f04f 0200 	mov.w	r2, #0
 8003e80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e8c:	4689      	mov	r9, r1
 8003e8e:	4692      	mov	sl, r2
 8003e90:	eb19 0005 	adds.w	r0, r9, r5
 8003e94:	eb4a 0106 	adc.w	r1, sl, r6
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	461d      	mov	r5, r3
 8003e9e:	f04f 0600 	mov.w	r6, #0
 8003ea2:	196b      	adds	r3, r5, r5
 8003ea4:	eb46 0406 	adc.w	r4, r6, r6
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	4623      	mov	r3, r4
 8003eac:	f7fc fe04 	bl	8000ab8 <__aeabi_uldivmod>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	460c      	mov	r4, r1
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	4b8b      	ldr	r3, [pc, #556]	; (80040e4 <UART_SetConfig+0x384>)
 8003eb8:	fba3 1302 	umull	r1, r3, r3, r2
 8003ebc:	095b      	lsrs	r3, r3, #5
 8003ebe:	2164      	movs	r1, #100	; 0x64
 8003ec0:	fb01 f303 	mul.w	r3, r1, r3
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	3332      	adds	r3, #50	; 0x32
 8003eca:	4a86      	ldr	r2, [pc, #536]	; (80040e4 <UART_SetConfig+0x384>)
 8003ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed0:	095b      	lsrs	r3, r3, #5
 8003ed2:	005b      	lsls	r3, r3, #1
 8003ed4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ed8:	4498      	add	r8, r3
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	461d      	mov	r5, r3
 8003ede:	f04f 0600 	mov.w	r6, #0
 8003ee2:	46a9      	mov	r9, r5
 8003ee4:	46b2      	mov	sl, r6
 8003ee6:	eb19 0309 	adds.w	r3, r9, r9
 8003eea:	eb4a 040a 	adc.w	r4, sl, sl
 8003eee:	4699      	mov	r9, r3
 8003ef0:	46a2      	mov	sl, r4
 8003ef2:	eb19 0905 	adds.w	r9, r9, r5
 8003ef6:	eb4a 0a06 	adc.w	sl, sl, r6
 8003efa:	f04f 0100 	mov.w	r1, #0
 8003efe:	f04f 0200 	mov.w	r2, #0
 8003f02:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f06:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f0a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f0e:	4689      	mov	r9, r1
 8003f10:	4692      	mov	sl, r2
 8003f12:	eb19 0005 	adds.w	r0, r9, r5
 8003f16:	eb4a 0106 	adc.w	r1, sl, r6
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	461d      	mov	r5, r3
 8003f20:	f04f 0600 	mov.w	r6, #0
 8003f24:	196b      	adds	r3, r5, r5
 8003f26:	eb46 0406 	adc.w	r4, r6, r6
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	4623      	mov	r3, r4
 8003f2e:	f7fc fdc3 	bl	8000ab8 <__aeabi_uldivmod>
 8003f32:	4603      	mov	r3, r0
 8003f34:	460c      	mov	r4, r1
 8003f36:	461a      	mov	r2, r3
 8003f38:	4b6a      	ldr	r3, [pc, #424]	; (80040e4 <UART_SetConfig+0x384>)
 8003f3a:	fba3 1302 	umull	r1, r3, r3, r2
 8003f3e:	095b      	lsrs	r3, r3, #5
 8003f40:	2164      	movs	r1, #100	; 0x64
 8003f42:	fb01 f303 	mul.w	r3, r1, r3
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	00db      	lsls	r3, r3, #3
 8003f4a:	3332      	adds	r3, #50	; 0x32
 8003f4c:	4a65      	ldr	r2, [pc, #404]	; (80040e4 <UART_SetConfig+0x384>)
 8003f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f52:	095b      	lsrs	r3, r3, #5
 8003f54:	f003 0207 	and.w	r2, r3, #7
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4442      	add	r2, r8
 8003f5e:	609a      	str	r2, [r3, #8]
 8003f60:	e26f      	b.n	8004442 <UART_SetConfig+0x6e2>
=======
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4ac1      	ldr	r2, [pc, #772]	; (80043e8 <UART_SetConfig+0x37c>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d005      	beq.n	80040f4 <UART_SetConfig+0x88>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4abf      	ldr	r2, [pc, #764]	; (80043ec <UART_SetConfig+0x380>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	f040 80bd 	bne.w	800426e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040f4:	f7ff fc26 	bl	8003944 <HAL_RCC_GetPCLK2Freq>
 80040f8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	461d      	mov	r5, r3
 80040fe:	f04f 0600 	mov.w	r6, #0
 8004102:	46a8      	mov	r8, r5
 8004104:	46b1      	mov	r9, r6
 8004106:	eb18 0308 	adds.w	r3, r8, r8
 800410a:	eb49 0409 	adc.w	r4, r9, r9
 800410e:	4698      	mov	r8, r3
 8004110:	46a1      	mov	r9, r4
 8004112:	eb18 0805 	adds.w	r8, r8, r5
 8004116:	eb49 0906 	adc.w	r9, r9, r6
 800411a:	f04f 0100 	mov.w	r1, #0
 800411e:	f04f 0200 	mov.w	r2, #0
 8004122:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004126:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800412a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800412e:	4688      	mov	r8, r1
 8004130:	4691      	mov	r9, r2
 8004132:	eb18 0005 	adds.w	r0, r8, r5
 8004136:	eb49 0106 	adc.w	r1, r9, r6
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	461d      	mov	r5, r3
 8004140:	f04f 0600 	mov.w	r6, #0
 8004144:	196b      	adds	r3, r5, r5
 8004146:	eb46 0406 	adc.w	r4, r6, r6
 800414a:	461a      	mov	r2, r3
 800414c:	4623      	mov	r3, r4
 800414e:	f7fc fd0b 	bl	8000b68 <__aeabi_uldivmod>
 8004152:	4603      	mov	r3, r0
 8004154:	460c      	mov	r4, r1
 8004156:	461a      	mov	r2, r3
 8004158:	4ba5      	ldr	r3, [pc, #660]	; (80043f0 <UART_SetConfig+0x384>)
 800415a:	fba3 2302 	umull	r2, r3, r3, r2
 800415e:	095b      	lsrs	r3, r3, #5
 8004160:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	461d      	mov	r5, r3
 8004168:	f04f 0600 	mov.w	r6, #0
 800416c:	46a9      	mov	r9, r5
 800416e:	46b2      	mov	sl, r6
 8004170:	eb19 0309 	adds.w	r3, r9, r9
 8004174:	eb4a 040a 	adc.w	r4, sl, sl
 8004178:	4699      	mov	r9, r3
 800417a:	46a2      	mov	sl, r4
 800417c:	eb19 0905 	adds.w	r9, r9, r5
 8004180:	eb4a 0a06 	adc.w	sl, sl, r6
 8004184:	f04f 0100 	mov.w	r1, #0
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004190:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004194:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004198:	4689      	mov	r9, r1
 800419a:	4692      	mov	sl, r2
 800419c:	eb19 0005 	adds.w	r0, r9, r5
 80041a0:	eb4a 0106 	adc.w	r1, sl, r6
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	461d      	mov	r5, r3
 80041aa:	f04f 0600 	mov.w	r6, #0
 80041ae:	196b      	adds	r3, r5, r5
 80041b0:	eb46 0406 	adc.w	r4, r6, r6
 80041b4:	461a      	mov	r2, r3
 80041b6:	4623      	mov	r3, r4
 80041b8:	f7fc fcd6 	bl	8000b68 <__aeabi_uldivmod>
 80041bc:	4603      	mov	r3, r0
 80041be:	460c      	mov	r4, r1
 80041c0:	461a      	mov	r2, r3
 80041c2:	4b8b      	ldr	r3, [pc, #556]	; (80043f0 <UART_SetConfig+0x384>)
 80041c4:	fba3 1302 	umull	r1, r3, r3, r2
 80041c8:	095b      	lsrs	r3, r3, #5
 80041ca:	2164      	movs	r1, #100	; 0x64
 80041cc:	fb01 f303 	mul.w	r3, r1, r3
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	3332      	adds	r3, #50	; 0x32
 80041d6:	4a86      	ldr	r2, [pc, #536]	; (80043f0 <UART_SetConfig+0x384>)
 80041d8:	fba2 2303 	umull	r2, r3, r2, r3
 80041dc:	095b      	lsrs	r3, r3, #5
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041e4:	4498      	add	r8, r3
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	461d      	mov	r5, r3
 80041ea:	f04f 0600 	mov.w	r6, #0
 80041ee:	46a9      	mov	r9, r5
 80041f0:	46b2      	mov	sl, r6
 80041f2:	eb19 0309 	adds.w	r3, r9, r9
 80041f6:	eb4a 040a 	adc.w	r4, sl, sl
 80041fa:	4699      	mov	r9, r3
 80041fc:	46a2      	mov	sl, r4
 80041fe:	eb19 0905 	adds.w	r9, r9, r5
 8004202:	eb4a 0a06 	adc.w	sl, sl, r6
 8004206:	f04f 0100 	mov.w	r1, #0
 800420a:	f04f 0200 	mov.w	r2, #0
 800420e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004212:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004216:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800421a:	4689      	mov	r9, r1
 800421c:	4692      	mov	sl, r2
 800421e:	eb19 0005 	adds.w	r0, r9, r5
 8004222:	eb4a 0106 	adc.w	r1, sl, r6
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	461d      	mov	r5, r3
 800422c:	f04f 0600 	mov.w	r6, #0
 8004230:	196b      	adds	r3, r5, r5
 8004232:	eb46 0406 	adc.w	r4, r6, r6
 8004236:	461a      	mov	r2, r3
 8004238:	4623      	mov	r3, r4
 800423a:	f7fc fc95 	bl	8000b68 <__aeabi_uldivmod>
 800423e:	4603      	mov	r3, r0
 8004240:	460c      	mov	r4, r1
 8004242:	461a      	mov	r2, r3
 8004244:	4b6a      	ldr	r3, [pc, #424]	; (80043f0 <UART_SetConfig+0x384>)
 8004246:	fba3 1302 	umull	r1, r3, r3, r2
 800424a:	095b      	lsrs	r3, r3, #5
 800424c:	2164      	movs	r1, #100	; 0x64
 800424e:	fb01 f303 	mul.w	r3, r1, r3
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	00db      	lsls	r3, r3, #3
 8004256:	3332      	adds	r3, #50	; 0x32
 8004258:	4a65      	ldr	r2, [pc, #404]	; (80043f0 <UART_SetConfig+0x384>)
 800425a:	fba2 2303 	umull	r2, r3, r2, r3
 800425e:	095b      	lsrs	r3, r3, #5
 8004260:	f003 0207 	and.w	r2, r3, #7
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4442      	add	r2, r8
 800426a:	609a      	str	r2, [r3, #8]
 800426c:	e26f      	b.n	800474e <UART_SetConfig+0x6e2>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
<<<<<<< HEAD
 8003f62:	f7ff fc37 	bl	80037d4 <HAL_RCC_GetPCLK1Freq>
 8003f66:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	461d      	mov	r5, r3
 8003f6c:	f04f 0600 	mov.w	r6, #0
 8003f70:	46a8      	mov	r8, r5
 8003f72:	46b1      	mov	r9, r6
 8003f74:	eb18 0308 	adds.w	r3, r8, r8
 8003f78:	eb49 0409 	adc.w	r4, r9, r9
 8003f7c:	4698      	mov	r8, r3
 8003f7e:	46a1      	mov	r9, r4
 8003f80:	eb18 0805 	adds.w	r8, r8, r5
 8003f84:	eb49 0906 	adc.w	r9, r9, r6
 8003f88:	f04f 0100 	mov.w	r1, #0
 8003f8c:	f04f 0200 	mov.w	r2, #0
 8003f90:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f94:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f98:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f9c:	4688      	mov	r8, r1
 8003f9e:	4691      	mov	r9, r2
 8003fa0:	eb18 0005 	adds.w	r0, r8, r5
 8003fa4:	eb49 0106 	adc.w	r1, r9, r6
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	461d      	mov	r5, r3
 8003fae:	f04f 0600 	mov.w	r6, #0
 8003fb2:	196b      	adds	r3, r5, r5
 8003fb4:	eb46 0406 	adc.w	r4, r6, r6
 8003fb8:	461a      	mov	r2, r3
 8003fba:	4623      	mov	r3, r4
 8003fbc:	f7fc fd7c 	bl	8000ab8 <__aeabi_uldivmod>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	460c      	mov	r4, r1
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	4b47      	ldr	r3, [pc, #284]	; (80040e4 <UART_SetConfig+0x384>)
 8003fc8:	fba3 2302 	umull	r2, r3, r3, r2
 8003fcc:	095b      	lsrs	r3, r3, #5
 8003fce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	461d      	mov	r5, r3
 8003fd6:	f04f 0600 	mov.w	r6, #0
 8003fda:	46a9      	mov	r9, r5
 8003fdc:	46b2      	mov	sl, r6
 8003fde:	eb19 0309 	adds.w	r3, r9, r9
 8003fe2:	eb4a 040a 	adc.w	r4, sl, sl
 8003fe6:	4699      	mov	r9, r3
 8003fe8:	46a2      	mov	sl, r4
 8003fea:	eb19 0905 	adds.w	r9, r9, r5
 8003fee:	eb4a 0a06 	adc.w	sl, sl, r6
 8003ff2:	f04f 0100 	mov.w	r1, #0
 8003ff6:	f04f 0200 	mov.w	r2, #0
 8003ffa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ffe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004002:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004006:	4689      	mov	r9, r1
 8004008:	4692      	mov	sl, r2
 800400a:	eb19 0005 	adds.w	r0, r9, r5
 800400e:	eb4a 0106 	adc.w	r1, sl, r6
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	461d      	mov	r5, r3
 8004018:	f04f 0600 	mov.w	r6, #0
 800401c:	196b      	adds	r3, r5, r5
 800401e:	eb46 0406 	adc.w	r4, r6, r6
 8004022:	461a      	mov	r2, r3
 8004024:	4623      	mov	r3, r4
 8004026:	f7fc fd47 	bl	8000ab8 <__aeabi_uldivmod>
 800402a:	4603      	mov	r3, r0
 800402c:	460c      	mov	r4, r1
 800402e:	461a      	mov	r2, r3
 8004030:	4b2c      	ldr	r3, [pc, #176]	; (80040e4 <UART_SetConfig+0x384>)
 8004032:	fba3 1302 	umull	r1, r3, r3, r2
 8004036:	095b      	lsrs	r3, r3, #5
 8004038:	2164      	movs	r1, #100	; 0x64
 800403a:	fb01 f303 	mul.w	r3, r1, r3
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	3332      	adds	r3, #50	; 0x32
 8004044:	4a27      	ldr	r2, [pc, #156]	; (80040e4 <UART_SetConfig+0x384>)
 8004046:	fba2 2303 	umull	r2, r3, r2, r3
 800404a:	095b      	lsrs	r3, r3, #5
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004052:	4498      	add	r8, r3
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	461d      	mov	r5, r3
 8004058:	f04f 0600 	mov.w	r6, #0
 800405c:	46a9      	mov	r9, r5
 800405e:	46b2      	mov	sl, r6
 8004060:	eb19 0309 	adds.w	r3, r9, r9
 8004064:	eb4a 040a 	adc.w	r4, sl, sl
 8004068:	4699      	mov	r9, r3
 800406a:	46a2      	mov	sl, r4
 800406c:	eb19 0905 	adds.w	r9, r9, r5
 8004070:	eb4a 0a06 	adc.w	sl, sl, r6
 8004074:	f04f 0100 	mov.w	r1, #0
 8004078:	f04f 0200 	mov.w	r2, #0
 800407c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004080:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004084:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004088:	4689      	mov	r9, r1
 800408a:	4692      	mov	sl, r2
 800408c:	eb19 0005 	adds.w	r0, r9, r5
 8004090:	eb4a 0106 	adc.w	r1, sl, r6
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	461d      	mov	r5, r3
 800409a:	f04f 0600 	mov.w	r6, #0
 800409e:	196b      	adds	r3, r5, r5
 80040a0:	eb46 0406 	adc.w	r4, r6, r6
 80040a4:	461a      	mov	r2, r3
 80040a6:	4623      	mov	r3, r4
 80040a8:	f7fc fd06 	bl	8000ab8 <__aeabi_uldivmod>
 80040ac:	4603      	mov	r3, r0
 80040ae:	460c      	mov	r4, r1
 80040b0:	461a      	mov	r2, r3
 80040b2:	4b0c      	ldr	r3, [pc, #48]	; (80040e4 <UART_SetConfig+0x384>)
 80040b4:	fba3 1302 	umull	r1, r3, r3, r2
 80040b8:	095b      	lsrs	r3, r3, #5
 80040ba:	2164      	movs	r1, #100	; 0x64
 80040bc:	fb01 f303 	mul.w	r3, r1, r3
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	00db      	lsls	r3, r3, #3
 80040c4:	3332      	adds	r3, #50	; 0x32
 80040c6:	4a07      	ldr	r2, [pc, #28]	; (80040e4 <UART_SetConfig+0x384>)
 80040c8:	fba2 2303 	umull	r2, r3, r2, r3
 80040cc:	095b      	lsrs	r3, r3, #5
 80040ce:	f003 0207 	and.w	r2, r3, #7
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4442      	add	r2, r8
 80040d8:	609a      	str	r2, [r3, #8]
=======
 800426e:	f7ff fb55 	bl	800391c <HAL_RCC_GetPCLK1Freq>
 8004272:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	461d      	mov	r5, r3
 8004278:	f04f 0600 	mov.w	r6, #0
 800427c:	46a8      	mov	r8, r5
 800427e:	46b1      	mov	r9, r6
 8004280:	eb18 0308 	adds.w	r3, r8, r8
 8004284:	eb49 0409 	adc.w	r4, r9, r9
 8004288:	4698      	mov	r8, r3
 800428a:	46a1      	mov	r9, r4
 800428c:	eb18 0805 	adds.w	r8, r8, r5
 8004290:	eb49 0906 	adc.w	r9, r9, r6
 8004294:	f04f 0100 	mov.w	r1, #0
 8004298:	f04f 0200 	mov.w	r2, #0
 800429c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80042a0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80042a4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80042a8:	4688      	mov	r8, r1
 80042aa:	4691      	mov	r9, r2
 80042ac:	eb18 0005 	adds.w	r0, r8, r5
 80042b0:	eb49 0106 	adc.w	r1, r9, r6
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	461d      	mov	r5, r3
 80042ba:	f04f 0600 	mov.w	r6, #0
 80042be:	196b      	adds	r3, r5, r5
 80042c0:	eb46 0406 	adc.w	r4, r6, r6
 80042c4:	461a      	mov	r2, r3
 80042c6:	4623      	mov	r3, r4
 80042c8:	f7fc fc4e 	bl	8000b68 <__aeabi_uldivmod>
 80042cc:	4603      	mov	r3, r0
 80042ce:	460c      	mov	r4, r1
 80042d0:	461a      	mov	r2, r3
 80042d2:	4b47      	ldr	r3, [pc, #284]	; (80043f0 <UART_SetConfig+0x384>)
 80042d4:	fba3 2302 	umull	r2, r3, r3, r2
 80042d8:	095b      	lsrs	r3, r3, #5
 80042da:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	461d      	mov	r5, r3
 80042e2:	f04f 0600 	mov.w	r6, #0
 80042e6:	46a9      	mov	r9, r5
 80042e8:	46b2      	mov	sl, r6
 80042ea:	eb19 0309 	adds.w	r3, r9, r9
 80042ee:	eb4a 040a 	adc.w	r4, sl, sl
 80042f2:	4699      	mov	r9, r3
 80042f4:	46a2      	mov	sl, r4
 80042f6:	eb19 0905 	adds.w	r9, r9, r5
 80042fa:	eb4a 0a06 	adc.w	sl, sl, r6
 80042fe:	f04f 0100 	mov.w	r1, #0
 8004302:	f04f 0200 	mov.w	r2, #0
 8004306:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800430a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800430e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004312:	4689      	mov	r9, r1
 8004314:	4692      	mov	sl, r2
 8004316:	eb19 0005 	adds.w	r0, r9, r5
 800431a:	eb4a 0106 	adc.w	r1, sl, r6
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	461d      	mov	r5, r3
 8004324:	f04f 0600 	mov.w	r6, #0
 8004328:	196b      	adds	r3, r5, r5
 800432a:	eb46 0406 	adc.w	r4, r6, r6
 800432e:	461a      	mov	r2, r3
 8004330:	4623      	mov	r3, r4
 8004332:	f7fc fc19 	bl	8000b68 <__aeabi_uldivmod>
 8004336:	4603      	mov	r3, r0
 8004338:	460c      	mov	r4, r1
 800433a:	461a      	mov	r2, r3
 800433c:	4b2c      	ldr	r3, [pc, #176]	; (80043f0 <UART_SetConfig+0x384>)
 800433e:	fba3 1302 	umull	r1, r3, r3, r2
 8004342:	095b      	lsrs	r3, r3, #5
 8004344:	2164      	movs	r1, #100	; 0x64
 8004346:	fb01 f303 	mul.w	r3, r1, r3
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	00db      	lsls	r3, r3, #3
 800434e:	3332      	adds	r3, #50	; 0x32
 8004350:	4a27      	ldr	r2, [pc, #156]	; (80043f0 <UART_SetConfig+0x384>)
 8004352:	fba2 2303 	umull	r2, r3, r2, r3
 8004356:	095b      	lsrs	r3, r3, #5
 8004358:	005b      	lsls	r3, r3, #1
 800435a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800435e:	4498      	add	r8, r3
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	461d      	mov	r5, r3
 8004364:	f04f 0600 	mov.w	r6, #0
 8004368:	46a9      	mov	r9, r5
 800436a:	46b2      	mov	sl, r6
 800436c:	eb19 0309 	adds.w	r3, r9, r9
 8004370:	eb4a 040a 	adc.w	r4, sl, sl
 8004374:	4699      	mov	r9, r3
 8004376:	46a2      	mov	sl, r4
 8004378:	eb19 0905 	adds.w	r9, r9, r5
 800437c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004380:	f04f 0100 	mov.w	r1, #0
 8004384:	f04f 0200 	mov.w	r2, #0
 8004388:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800438c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004390:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004394:	4689      	mov	r9, r1
 8004396:	4692      	mov	sl, r2
 8004398:	eb19 0005 	adds.w	r0, r9, r5
 800439c:	eb4a 0106 	adc.w	r1, sl, r6
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	461d      	mov	r5, r3
 80043a6:	f04f 0600 	mov.w	r6, #0
 80043aa:	196b      	adds	r3, r5, r5
 80043ac:	eb46 0406 	adc.w	r4, r6, r6
 80043b0:	461a      	mov	r2, r3
 80043b2:	4623      	mov	r3, r4
 80043b4:	f7fc fbd8 	bl	8000b68 <__aeabi_uldivmod>
 80043b8:	4603      	mov	r3, r0
 80043ba:	460c      	mov	r4, r1
 80043bc:	461a      	mov	r2, r3
 80043be:	4b0c      	ldr	r3, [pc, #48]	; (80043f0 <UART_SetConfig+0x384>)
 80043c0:	fba3 1302 	umull	r1, r3, r3, r2
 80043c4:	095b      	lsrs	r3, r3, #5
 80043c6:	2164      	movs	r1, #100	; 0x64
 80043c8:	fb01 f303 	mul.w	r3, r1, r3
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	00db      	lsls	r3, r3, #3
 80043d0:	3332      	adds	r3, #50	; 0x32
 80043d2:	4a07      	ldr	r2, [pc, #28]	; (80043f0 <UART_SetConfig+0x384>)
 80043d4:	fba2 2303 	umull	r2, r3, r2, r3
 80043d8:	095b      	lsrs	r3, r3, #5
 80043da:	f003 0207 	and.w	r2, r3, #7
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4442      	add	r2, r8
 80043e4:	609a      	str	r2, [r3, #8]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
<<<<<<< HEAD
 80040da:	e1b2      	b.n	8004442 <UART_SetConfig+0x6e2>
 80040dc:	40011000 	.word	0x40011000
 80040e0:	40011400 	.word	0x40011400
 80040e4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4ad7      	ldr	r2, [pc, #860]	; (800444c <UART_SetConfig+0x6ec>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d005      	beq.n	80040fe <UART_SetConfig+0x39e>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4ad6      	ldr	r2, [pc, #856]	; (8004450 <UART_SetConfig+0x6f0>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	f040 80d1 	bne.w	80042a0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80040fe:	f7ff fb7d 	bl	80037fc <HAL_RCC_GetPCLK2Freq>
 8004102:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	469a      	mov	sl, r3
 8004108:	f04f 0b00 	mov.w	fp, #0
 800410c:	46d0      	mov	r8, sl
 800410e:	46d9      	mov	r9, fp
 8004110:	eb18 0308 	adds.w	r3, r8, r8
 8004114:	eb49 0409 	adc.w	r4, r9, r9
 8004118:	4698      	mov	r8, r3
 800411a:	46a1      	mov	r9, r4
 800411c:	eb18 080a 	adds.w	r8, r8, sl
 8004120:	eb49 090b 	adc.w	r9, r9, fp
 8004124:	f04f 0100 	mov.w	r1, #0
 8004128:	f04f 0200 	mov.w	r2, #0
 800412c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004130:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004134:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004138:	4688      	mov	r8, r1
 800413a:	4691      	mov	r9, r2
 800413c:	eb1a 0508 	adds.w	r5, sl, r8
 8004140:	eb4b 0609 	adc.w	r6, fp, r9
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	4619      	mov	r1, r3
 800414a:	f04f 0200 	mov.w	r2, #0
 800414e:	f04f 0300 	mov.w	r3, #0
 8004152:	f04f 0400 	mov.w	r4, #0
 8004156:	0094      	lsls	r4, r2, #2
 8004158:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800415c:	008b      	lsls	r3, r1, #2
 800415e:	461a      	mov	r2, r3
 8004160:	4623      	mov	r3, r4
 8004162:	4628      	mov	r0, r5
 8004164:	4631      	mov	r1, r6
 8004166:	f7fc fca7 	bl	8000ab8 <__aeabi_uldivmod>
 800416a:	4603      	mov	r3, r0
 800416c:	460c      	mov	r4, r1
 800416e:	461a      	mov	r2, r3
 8004170:	4bb8      	ldr	r3, [pc, #736]	; (8004454 <UART_SetConfig+0x6f4>)
 8004172:	fba3 2302 	umull	r2, r3, r3, r2
 8004176:	095b      	lsrs	r3, r3, #5
 8004178:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	469b      	mov	fp, r3
 8004180:	f04f 0c00 	mov.w	ip, #0
 8004184:	46d9      	mov	r9, fp
 8004186:	46e2      	mov	sl, ip
 8004188:	eb19 0309 	adds.w	r3, r9, r9
 800418c:	eb4a 040a 	adc.w	r4, sl, sl
 8004190:	4699      	mov	r9, r3
 8004192:	46a2      	mov	sl, r4
 8004194:	eb19 090b 	adds.w	r9, r9, fp
 8004198:	eb4a 0a0c 	adc.w	sl, sl, ip
 800419c:	f04f 0100 	mov.w	r1, #0
 80041a0:	f04f 0200 	mov.w	r2, #0
 80041a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041b0:	4689      	mov	r9, r1
 80041b2:	4692      	mov	sl, r2
 80041b4:	eb1b 0509 	adds.w	r5, fp, r9
 80041b8:	eb4c 060a 	adc.w	r6, ip, sl
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	4619      	mov	r1, r3
 80041c2:	f04f 0200 	mov.w	r2, #0
 80041c6:	f04f 0300 	mov.w	r3, #0
 80041ca:	f04f 0400 	mov.w	r4, #0
 80041ce:	0094      	lsls	r4, r2, #2
 80041d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80041d4:	008b      	lsls	r3, r1, #2
 80041d6:	461a      	mov	r2, r3
 80041d8:	4623      	mov	r3, r4
 80041da:	4628      	mov	r0, r5
 80041dc:	4631      	mov	r1, r6
 80041de:	f7fc fc6b 	bl	8000ab8 <__aeabi_uldivmod>
 80041e2:	4603      	mov	r3, r0
 80041e4:	460c      	mov	r4, r1
 80041e6:	461a      	mov	r2, r3
 80041e8:	4b9a      	ldr	r3, [pc, #616]	; (8004454 <UART_SetConfig+0x6f4>)
 80041ea:	fba3 1302 	umull	r1, r3, r3, r2
 80041ee:	095b      	lsrs	r3, r3, #5
 80041f0:	2164      	movs	r1, #100	; 0x64
 80041f2:	fb01 f303 	mul.w	r3, r1, r3
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	011b      	lsls	r3, r3, #4
 80041fa:	3332      	adds	r3, #50	; 0x32
 80041fc:	4a95      	ldr	r2, [pc, #596]	; (8004454 <UART_SetConfig+0x6f4>)
 80041fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004202:	095b      	lsrs	r3, r3, #5
 8004204:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004208:	4498      	add	r8, r3
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	469b      	mov	fp, r3
 800420e:	f04f 0c00 	mov.w	ip, #0
 8004212:	46d9      	mov	r9, fp
 8004214:	46e2      	mov	sl, ip
 8004216:	eb19 0309 	adds.w	r3, r9, r9
 800421a:	eb4a 040a 	adc.w	r4, sl, sl
 800421e:	4699      	mov	r9, r3
 8004220:	46a2      	mov	sl, r4
 8004222:	eb19 090b 	adds.w	r9, r9, fp
 8004226:	eb4a 0a0c 	adc.w	sl, sl, ip
 800422a:	f04f 0100 	mov.w	r1, #0
 800422e:	f04f 0200 	mov.w	r2, #0
 8004232:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004236:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800423a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800423e:	4689      	mov	r9, r1
 8004240:	4692      	mov	sl, r2
 8004242:	eb1b 0509 	adds.w	r5, fp, r9
 8004246:	eb4c 060a 	adc.w	r6, ip, sl
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	4619      	mov	r1, r3
 8004250:	f04f 0200 	mov.w	r2, #0
 8004254:	f04f 0300 	mov.w	r3, #0
 8004258:	f04f 0400 	mov.w	r4, #0
 800425c:	0094      	lsls	r4, r2, #2
 800425e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004262:	008b      	lsls	r3, r1, #2
 8004264:	461a      	mov	r2, r3
 8004266:	4623      	mov	r3, r4
 8004268:	4628      	mov	r0, r5
 800426a:	4631      	mov	r1, r6
 800426c:	f7fc fc24 	bl	8000ab8 <__aeabi_uldivmod>
 8004270:	4603      	mov	r3, r0
 8004272:	460c      	mov	r4, r1
 8004274:	461a      	mov	r2, r3
 8004276:	4b77      	ldr	r3, [pc, #476]	; (8004454 <UART_SetConfig+0x6f4>)
 8004278:	fba3 1302 	umull	r1, r3, r3, r2
 800427c:	095b      	lsrs	r3, r3, #5
 800427e:	2164      	movs	r1, #100	; 0x64
 8004280:	fb01 f303 	mul.w	r3, r1, r3
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	011b      	lsls	r3, r3, #4
 8004288:	3332      	adds	r3, #50	; 0x32
 800428a:	4a72      	ldr	r2, [pc, #456]	; (8004454 <UART_SetConfig+0x6f4>)
 800428c:	fba2 2303 	umull	r2, r3, r2, r3
 8004290:	095b      	lsrs	r3, r3, #5
 8004292:	f003 020f 	and.w	r2, r3, #15
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4442      	add	r2, r8
 800429c:	609a      	str	r2, [r3, #8]
 800429e:	e0d0      	b.n	8004442 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80042a0:	f7ff fa98 	bl	80037d4 <HAL_RCC_GetPCLK1Freq>
 80042a4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	469a      	mov	sl, r3
 80042aa:	f04f 0b00 	mov.w	fp, #0
 80042ae:	46d0      	mov	r8, sl
 80042b0:	46d9      	mov	r9, fp
 80042b2:	eb18 0308 	adds.w	r3, r8, r8
 80042b6:	eb49 0409 	adc.w	r4, r9, r9
 80042ba:	4698      	mov	r8, r3
 80042bc:	46a1      	mov	r9, r4
 80042be:	eb18 080a 	adds.w	r8, r8, sl
 80042c2:	eb49 090b 	adc.w	r9, r9, fp
 80042c6:	f04f 0100 	mov.w	r1, #0
 80042ca:	f04f 0200 	mov.w	r2, #0
 80042ce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80042d2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80042d6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80042da:	4688      	mov	r8, r1
 80042dc:	4691      	mov	r9, r2
 80042de:	eb1a 0508 	adds.w	r5, sl, r8
 80042e2:	eb4b 0609 	adc.w	r6, fp, r9
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	4619      	mov	r1, r3
 80042ec:	f04f 0200 	mov.w	r2, #0
 80042f0:	f04f 0300 	mov.w	r3, #0
 80042f4:	f04f 0400 	mov.w	r4, #0
 80042f8:	0094      	lsls	r4, r2, #2
 80042fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80042fe:	008b      	lsls	r3, r1, #2
 8004300:	461a      	mov	r2, r3
 8004302:	4623      	mov	r3, r4
 8004304:	4628      	mov	r0, r5
 8004306:	4631      	mov	r1, r6
 8004308:	f7fc fbd6 	bl	8000ab8 <__aeabi_uldivmod>
 800430c:	4603      	mov	r3, r0
 800430e:	460c      	mov	r4, r1
 8004310:	461a      	mov	r2, r3
 8004312:	4b50      	ldr	r3, [pc, #320]	; (8004454 <UART_SetConfig+0x6f4>)
 8004314:	fba3 2302 	umull	r2, r3, r3, r2
 8004318:	095b      	lsrs	r3, r3, #5
 800431a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	469b      	mov	fp, r3
 8004322:	f04f 0c00 	mov.w	ip, #0
 8004326:	46d9      	mov	r9, fp
 8004328:	46e2      	mov	sl, ip
 800432a:	eb19 0309 	adds.w	r3, r9, r9
 800432e:	eb4a 040a 	adc.w	r4, sl, sl
 8004332:	4699      	mov	r9, r3
 8004334:	46a2      	mov	sl, r4
 8004336:	eb19 090b 	adds.w	r9, r9, fp
 800433a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800433e:	f04f 0100 	mov.w	r1, #0
 8004342:	f04f 0200 	mov.w	r2, #0
 8004346:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800434a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800434e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004352:	4689      	mov	r9, r1
 8004354:	4692      	mov	sl, r2
 8004356:	eb1b 0509 	adds.w	r5, fp, r9
 800435a:	eb4c 060a 	adc.w	r6, ip, sl
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	4619      	mov	r1, r3
 8004364:	f04f 0200 	mov.w	r2, #0
 8004368:	f04f 0300 	mov.w	r3, #0
 800436c:	f04f 0400 	mov.w	r4, #0
 8004370:	0094      	lsls	r4, r2, #2
 8004372:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004376:	008b      	lsls	r3, r1, #2
 8004378:	461a      	mov	r2, r3
 800437a:	4623      	mov	r3, r4
 800437c:	4628      	mov	r0, r5
 800437e:	4631      	mov	r1, r6
 8004380:	f7fc fb9a 	bl	8000ab8 <__aeabi_uldivmod>
 8004384:	4603      	mov	r3, r0
 8004386:	460c      	mov	r4, r1
 8004388:	461a      	mov	r2, r3
 800438a:	4b32      	ldr	r3, [pc, #200]	; (8004454 <UART_SetConfig+0x6f4>)
 800438c:	fba3 1302 	umull	r1, r3, r3, r2
 8004390:	095b      	lsrs	r3, r3, #5
 8004392:	2164      	movs	r1, #100	; 0x64
 8004394:	fb01 f303 	mul.w	r3, r1, r3
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	011b      	lsls	r3, r3, #4
 800439c:	3332      	adds	r3, #50	; 0x32
 800439e:	4a2d      	ldr	r2, [pc, #180]	; (8004454 <UART_SetConfig+0x6f4>)
 80043a0:	fba2 2303 	umull	r2, r3, r2, r3
 80043a4:	095b      	lsrs	r3, r3, #5
 80043a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043aa:	4498      	add	r8, r3
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	469b      	mov	fp, r3
 80043b0:	f04f 0c00 	mov.w	ip, #0
 80043b4:	46d9      	mov	r9, fp
 80043b6:	46e2      	mov	sl, ip
 80043b8:	eb19 0309 	adds.w	r3, r9, r9
 80043bc:	eb4a 040a 	adc.w	r4, sl, sl
 80043c0:	4699      	mov	r9, r3
 80043c2:	46a2      	mov	sl, r4
 80043c4:	eb19 090b 	adds.w	r9, r9, fp
 80043c8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80043cc:	f04f 0100 	mov.w	r1, #0
 80043d0:	f04f 0200 	mov.w	r2, #0
 80043d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80043e0:	4689      	mov	r9, r1
 80043e2:	4692      	mov	sl, r2
 80043e4:	eb1b 0509 	adds.w	r5, fp, r9
 80043e8:	eb4c 060a 	adc.w	r6, ip, sl
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	4619      	mov	r1, r3
 80043f2:	f04f 0200 	mov.w	r2, #0
 80043f6:	f04f 0300 	mov.w	r3, #0
 80043fa:	f04f 0400 	mov.w	r4, #0
 80043fe:	0094      	lsls	r4, r2, #2
 8004400:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004404:	008b      	lsls	r3, r1, #2
 8004406:	461a      	mov	r2, r3
 8004408:	4623      	mov	r3, r4
 800440a:	4628      	mov	r0, r5
 800440c:	4631      	mov	r1, r6
 800440e:	f7fc fb53 	bl	8000ab8 <__aeabi_uldivmod>
 8004412:	4603      	mov	r3, r0
 8004414:	460c      	mov	r4, r1
 8004416:	461a      	mov	r2, r3
 8004418:	4b0e      	ldr	r3, [pc, #56]	; (8004454 <UART_SetConfig+0x6f4>)
 800441a:	fba3 1302 	umull	r1, r3, r3, r2
 800441e:	095b      	lsrs	r3, r3, #5
 8004420:	2164      	movs	r1, #100	; 0x64
 8004422:	fb01 f303 	mul.w	r3, r1, r3
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	011b      	lsls	r3, r3, #4
 800442a:	3332      	adds	r3, #50	; 0x32
 800442c:	4a09      	ldr	r2, [pc, #36]	; (8004454 <UART_SetConfig+0x6f4>)
 800442e:	fba2 2303 	umull	r2, r3, r2, r3
 8004432:	095b      	lsrs	r3, r3, #5
 8004434:	f003 020f 	and.w	r2, r3, #15
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4442      	add	r2, r8
 800443e:	609a      	str	r2, [r3, #8]
}
 8004440:	e7ff      	b.n	8004442 <UART_SetConfig+0x6e2>
 8004442:	bf00      	nop
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800444c:	40011000 	.word	0x40011000
 8004450:	40011400 	.word	0x40011400
 8004454:	51eb851f 	.word	0x51eb851f

08004458 <vApplicationGetIdleTaskMemory>:
=======
 80043e6:	e1b2      	b.n	800474e <UART_SetConfig+0x6e2>
 80043e8:	40011000 	.word	0x40011000
 80043ec:	40011400 	.word	0x40011400
 80043f0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4ad7      	ldr	r2, [pc, #860]	; (8004758 <UART_SetConfig+0x6ec>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d005      	beq.n	800440a <UART_SetConfig+0x39e>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4ad6      	ldr	r2, [pc, #856]	; (800475c <UART_SetConfig+0x6f0>)
 8004404:	4293      	cmp	r3, r2
 8004406:	f040 80d1 	bne.w	80045ac <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800440a:	f7ff fa9b 	bl	8003944 <HAL_RCC_GetPCLK2Freq>
 800440e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	469a      	mov	sl, r3
 8004414:	f04f 0b00 	mov.w	fp, #0
 8004418:	46d0      	mov	r8, sl
 800441a:	46d9      	mov	r9, fp
 800441c:	eb18 0308 	adds.w	r3, r8, r8
 8004420:	eb49 0409 	adc.w	r4, r9, r9
 8004424:	4698      	mov	r8, r3
 8004426:	46a1      	mov	r9, r4
 8004428:	eb18 080a 	adds.w	r8, r8, sl
 800442c:	eb49 090b 	adc.w	r9, r9, fp
 8004430:	f04f 0100 	mov.w	r1, #0
 8004434:	f04f 0200 	mov.w	r2, #0
 8004438:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800443c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004440:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004444:	4688      	mov	r8, r1
 8004446:	4691      	mov	r9, r2
 8004448:	eb1a 0508 	adds.w	r5, sl, r8
 800444c:	eb4b 0609 	adc.w	r6, fp, r9
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	4619      	mov	r1, r3
 8004456:	f04f 0200 	mov.w	r2, #0
 800445a:	f04f 0300 	mov.w	r3, #0
 800445e:	f04f 0400 	mov.w	r4, #0
 8004462:	0094      	lsls	r4, r2, #2
 8004464:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004468:	008b      	lsls	r3, r1, #2
 800446a:	461a      	mov	r2, r3
 800446c:	4623      	mov	r3, r4
 800446e:	4628      	mov	r0, r5
 8004470:	4631      	mov	r1, r6
 8004472:	f7fc fb79 	bl	8000b68 <__aeabi_uldivmod>
 8004476:	4603      	mov	r3, r0
 8004478:	460c      	mov	r4, r1
 800447a:	461a      	mov	r2, r3
 800447c:	4bb8      	ldr	r3, [pc, #736]	; (8004760 <UART_SetConfig+0x6f4>)
 800447e:	fba3 2302 	umull	r2, r3, r3, r2
 8004482:	095b      	lsrs	r3, r3, #5
 8004484:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	469b      	mov	fp, r3
 800448c:	f04f 0c00 	mov.w	ip, #0
 8004490:	46d9      	mov	r9, fp
 8004492:	46e2      	mov	sl, ip
 8004494:	eb19 0309 	adds.w	r3, r9, r9
 8004498:	eb4a 040a 	adc.w	r4, sl, sl
 800449c:	4699      	mov	r9, r3
 800449e:	46a2      	mov	sl, r4
 80044a0:	eb19 090b 	adds.w	r9, r9, fp
 80044a4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80044a8:	f04f 0100 	mov.w	r1, #0
 80044ac:	f04f 0200 	mov.w	r2, #0
 80044b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044bc:	4689      	mov	r9, r1
 80044be:	4692      	mov	sl, r2
 80044c0:	eb1b 0509 	adds.w	r5, fp, r9
 80044c4:	eb4c 060a 	adc.w	r6, ip, sl
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	4619      	mov	r1, r3
 80044ce:	f04f 0200 	mov.w	r2, #0
 80044d2:	f04f 0300 	mov.w	r3, #0
 80044d6:	f04f 0400 	mov.w	r4, #0
 80044da:	0094      	lsls	r4, r2, #2
 80044dc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80044e0:	008b      	lsls	r3, r1, #2
 80044e2:	461a      	mov	r2, r3
 80044e4:	4623      	mov	r3, r4
 80044e6:	4628      	mov	r0, r5
 80044e8:	4631      	mov	r1, r6
 80044ea:	f7fc fb3d 	bl	8000b68 <__aeabi_uldivmod>
 80044ee:	4603      	mov	r3, r0
 80044f0:	460c      	mov	r4, r1
 80044f2:	461a      	mov	r2, r3
 80044f4:	4b9a      	ldr	r3, [pc, #616]	; (8004760 <UART_SetConfig+0x6f4>)
 80044f6:	fba3 1302 	umull	r1, r3, r3, r2
 80044fa:	095b      	lsrs	r3, r3, #5
 80044fc:	2164      	movs	r1, #100	; 0x64
 80044fe:	fb01 f303 	mul.w	r3, r1, r3
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	011b      	lsls	r3, r3, #4
 8004506:	3332      	adds	r3, #50	; 0x32
 8004508:	4a95      	ldr	r2, [pc, #596]	; (8004760 <UART_SetConfig+0x6f4>)
 800450a:	fba2 2303 	umull	r2, r3, r2, r3
 800450e:	095b      	lsrs	r3, r3, #5
 8004510:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004514:	4498      	add	r8, r3
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	469b      	mov	fp, r3
 800451a:	f04f 0c00 	mov.w	ip, #0
 800451e:	46d9      	mov	r9, fp
 8004520:	46e2      	mov	sl, ip
 8004522:	eb19 0309 	adds.w	r3, r9, r9
 8004526:	eb4a 040a 	adc.w	r4, sl, sl
 800452a:	4699      	mov	r9, r3
 800452c:	46a2      	mov	sl, r4
 800452e:	eb19 090b 	adds.w	r9, r9, fp
 8004532:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004536:	f04f 0100 	mov.w	r1, #0
 800453a:	f04f 0200 	mov.w	r2, #0
 800453e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004542:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004546:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800454a:	4689      	mov	r9, r1
 800454c:	4692      	mov	sl, r2
 800454e:	eb1b 0509 	adds.w	r5, fp, r9
 8004552:	eb4c 060a 	adc.w	r6, ip, sl
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	4619      	mov	r1, r3
 800455c:	f04f 0200 	mov.w	r2, #0
 8004560:	f04f 0300 	mov.w	r3, #0
 8004564:	f04f 0400 	mov.w	r4, #0
 8004568:	0094      	lsls	r4, r2, #2
 800456a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800456e:	008b      	lsls	r3, r1, #2
 8004570:	461a      	mov	r2, r3
 8004572:	4623      	mov	r3, r4
 8004574:	4628      	mov	r0, r5
 8004576:	4631      	mov	r1, r6
 8004578:	f7fc faf6 	bl	8000b68 <__aeabi_uldivmod>
 800457c:	4603      	mov	r3, r0
 800457e:	460c      	mov	r4, r1
 8004580:	461a      	mov	r2, r3
 8004582:	4b77      	ldr	r3, [pc, #476]	; (8004760 <UART_SetConfig+0x6f4>)
 8004584:	fba3 1302 	umull	r1, r3, r3, r2
 8004588:	095b      	lsrs	r3, r3, #5
 800458a:	2164      	movs	r1, #100	; 0x64
 800458c:	fb01 f303 	mul.w	r3, r1, r3
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	011b      	lsls	r3, r3, #4
 8004594:	3332      	adds	r3, #50	; 0x32
 8004596:	4a72      	ldr	r2, [pc, #456]	; (8004760 <UART_SetConfig+0x6f4>)
 8004598:	fba2 2303 	umull	r2, r3, r2, r3
 800459c:	095b      	lsrs	r3, r3, #5
 800459e:	f003 020f 	and.w	r2, r3, #15
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4442      	add	r2, r8
 80045a8:	609a      	str	r2, [r3, #8]
 80045aa:	e0d0      	b.n	800474e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80045ac:	f7ff f9b6 	bl	800391c <HAL_RCC_GetPCLK1Freq>
 80045b0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	469a      	mov	sl, r3
 80045b6:	f04f 0b00 	mov.w	fp, #0
 80045ba:	46d0      	mov	r8, sl
 80045bc:	46d9      	mov	r9, fp
 80045be:	eb18 0308 	adds.w	r3, r8, r8
 80045c2:	eb49 0409 	adc.w	r4, r9, r9
 80045c6:	4698      	mov	r8, r3
 80045c8:	46a1      	mov	r9, r4
 80045ca:	eb18 080a 	adds.w	r8, r8, sl
 80045ce:	eb49 090b 	adc.w	r9, r9, fp
 80045d2:	f04f 0100 	mov.w	r1, #0
 80045d6:	f04f 0200 	mov.w	r2, #0
 80045da:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80045de:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80045e2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80045e6:	4688      	mov	r8, r1
 80045e8:	4691      	mov	r9, r2
 80045ea:	eb1a 0508 	adds.w	r5, sl, r8
 80045ee:	eb4b 0609 	adc.w	r6, fp, r9
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	4619      	mov	r1, r3
 80045f8:	f04f 0200 	mov.w	r2, #0
 80045fc:	f04f 0300 	mov.w	r3, #0
 8004600:	f04f 0400 	mov.w	r4, #0
 8004604:	0094      	lsls	r4, r2, #2
 8004606:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800460a:	008b      	lsls	r3, r1, #2
 800460c:	461a      	mov	r2, r3
 800460e:	4623      	mov	r3, r4
 8004610:	4628      	mov	r0, r5
 8004612:	4631      	mov	r1, r6
 8004614:	f7fc faa8 	bl	8000b68 <__aeabi_uldivmod>
 8004618:	4603      	mov	r3, r0
 800461a:	460c      	mov	r4, r1
 800461c:	461a      	mov	r2, r3
 800461e:	4b50      	ldr	r3, [pc, #320]	; (8004760 <UART_SetConfig+0x6f4>)
 8004620:	fba3 2302 	umull	r2, r3, r3, r2
 8004624:	095b      	lsrs	r3, r3, #5
 8004626:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	469b      	mov	fp, r3
 800462e:	f04f 0c00 	mov.w	ip, #0
 8004632:	46d9      	mov	r9, fp
 8004634:	46e2      	mov	sl, ip
 8004636:	eb19 0309 	adds.w	r3, r9, r9
 800463a:	eb4a 040a 	adc.w	r4, sl, sl
 800463e:	4699      	mov	r9, r3
 8004640:	46a2      	mov	sl, r4
 8004642:	eb19 090b 	adds.w	r9, r9, fp
 8004646:	eb4a 0a0c 	adc.w	sl, sl, ip
 800464a:	f04f 0100 	mov.w	r1, #0
 800464e:	f04f 0200 	mov.w	r2, #0
 8004652:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004656:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800465a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800465e:	4689      	mov	r9, r1
 8004660:	4692      	mov	sl, r2
 8004662:	eb1b 0509 	adds.w	r5, fp, r9
 8004666:	eb4c 060a 	adc.w	r6, ip, sl
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	4619      	mov	r1, r3
 8004670:	f04f 0200 	mov.w	r2, #0
 8004674:	f04f 0300 	mov.w	r3, #0
 8004678:	f04f 0400 	mov.w	r4, #0
 800467c:	0094      	lsls	r4, r2, #2
 800467e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004682:	008b      	lsls	r3, r1, #2
 8004684:	461a      	mov	r2, r3
 8004686:	4623      	mov	r3, r4
 8004688:	4628      	mov	r0, r5
 800468a:	4631      	mov	r1, r6
 800468c:	f7fc fa6c 	bl	8000b68 <__aeabi_uldivmod>
 8004690:	4603      	mov	r3, r0
 8004692:	460c      	mov	r4, r1
 8004694:	461a      	mov	r2, r3
 8004696:	4b32      	ldr	r3, [pc, #200]	; (8004760 <UART_SetConfig+0x6f4>)
 8004698:	fba3 1302 	umull	r1, r3, r3, r2
 800469c:	095b      	lsrs	r3, r3, #5
 800469e:	2164      	movs	r1, #100	; 0x64
 80046a0:	fb01 f303 	mul.w	r3, r1, r3
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	011b      	lsls	r3, r3, #4
 80046a8:	3332      	adds	r3, #50	; 0x32
 80046aa:	4a2d      	ldr	r2, [pc, #180]	; (8004760 <UART_SetConfig+0x6f4>)
 80046ac:	fba2 2303 	umull	r2, r3, r2, r3
 80046b0:	095b      	lsrs	r3, r3, #5
 80046b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046b6:	4498      	add	r8, r3
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	469b      	mov	fp, r3
 80046bc:	f04f 0c00 	mov.w	ip, #0
 80046c0:	46d9      	mov	r9, fp
 80046c2:	46e2      	mov	sl, ip
 80046c4:	eb19 0309 	adds.w	r3, r9, r9
 80046c8:	eb4a 040a 	adc.w	r4, sl, sl
 80046cc:	4699      	mov	r9, r3
 80046ce:	46a2      	mov	sl, r4
 80046d0:	eb19 090b 	adds.w	r9, r9, fp
 80046d4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80046d8:	f04f 0100 	mov.w	r1, #0
 80046dc:	f04f 0200 	mov.w	r2, #0
 80046e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80046e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80046ec:	4689      	mov	r9, r1
 80046ee:	4692      	mov	sl, r2
 80046f0:	eb1b 0509 	adds.w	r5, fp, r9
 80046f4:	eb4c 060a 	adc.w	r6, ip, sl
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	4619      	mov	r1, r3
 80046fe:	f04f 0200 	mov.w	r2, #0
 8004702:	f04f 0300 	mov.w	r3, #0
 8004706:	f04f 0400 	mov.w	r4, #0
 800470a:	0094      	lsls	r4, r2, #2
 800470c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004710:	008b      	lsls	r3, r1, #2
 8004712:	461a      	mov	r2, r3
 8004714:	4623      	mov	r3, r4
 8004716:	4628      	mov	r0, r5
 8004718:	4631      	mov	r1, r6
 800471a:	f7fc fa25 	bl	8000b68 <__aeabi_uldivmod>
 800471e:	4603      	mov	r3, r0
 8004720:	460c      	mov	r4, r1
 8004722:	461a      	mov	r2, r3
 8004724:	4b0e      	ldr	r3, [pc, #56]	; (8004760 <UART_SetConfig+0x6f4>)
 8004726:	fba3 1302 	umull	r1, r3, r3, r2
 800472a:	095b      	lsrs	r3, r3, #5
 800472c:	2164      	movs	r1, #100	; 0x64
 800472e:	fb01 f303 	mul.w	r3, r1, r3
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	011b      	lsls	r3, r3, #4
 8004736:	3332      	adds	r3, #50	; 0x32
 8004738:	4a09      	ldr	r2, [pc, #36]	; (8004760 <UART_SetConfig+0x6f4>)
 800473a:	fba2 2303 	umull	r2, r3, r2, r3
 800473e:	095b      	lsrs	r3, r3, #5
 8004740:	f003 020f 	and.w	r2, r3, #15
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4442      	add	r2, r8
 800474a:	609a      	str	r2, [r3, #8]
}
 800474c:	e7ff      	b.n	800474e <UART_SetConfig+0x6e2>
 800474e:	bf00      	nop
 8004750:	3714      	adds	r7, #20
 8004752:	46bd      	mov	sp, r7
 8004754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004758:	40011000 	.word	0x40011000
 800475c:	40011400 	.word	0x40011400
 8004760:	51eb851f 	.word	0x51eb851f

08004764 <vApplicationGetIdleTaskMemory>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
<<<<<<< HEAD
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	4a07      	ldr	r2, [pc, #28]	; (8004484 <vApplicationGetIdleTaskMemory+0x2c>)
 8004468:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	4a06      	ldr	r2, [pc, #24]	; (8004488 <vApplicationGetIdleTaskMemory+0x30>)
 800446e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2280      	movs	r2, #128	; 0x80
 8004474:	601a      	str	r2, [r3, #0]
}
 8004476:	bf00      	nop
 8004478:	3714      	adds	r7, #20
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	20000190 	.word	0x20000190
 8004488:	200001ec 	.word	0x200001ec

0800448c <vApplicationGetTimerTaskMemory>:
=======
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4a07      	ldr	r2, [pc, #28]	; (8004790 <vApplicationGetIdleTaskMemory+0x2c>)
 8004774:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	4a06      	ldr	r2, [pc, #24]	; (8004794 <vApplicationGetIdleTaskMemory+0x30>)
 800477a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2280      	movs	r2, #128	; 0x80
 8004780:	601a      	str	r2, [r3, #0]
}
 8004782:	bf00      	nop
 8004784:	3714      	adds	r7, #20
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	2000018c 	.word	0x2000018c
 8004794:	200001e8 	.word	0x200001e8

08004798 <vApplicationGetTimerTaskMemory>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
<<<<<<< HEAD
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	4a07      	ldr	r2, [pc, #28]	; (80044b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800449c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	4a06      	ldr	r2, [pc, #24]	; (80044bc <vApplicationGetTimerTaskMemory+0x30>)
 80044a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044aa:	601a      	str	r2, [r3, #0]
}
 80044ac:	bf00      	nop
 80044ae:	3714      	adds	r7, #20
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	200003ec 	.word	0x200003ec
 80044bc:	20000448 	.word	0x20000448

080044c0 <vListInitialise>:
=======
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4a07      	ldr	r2, [pc, #28]	; (80047c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80047a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	4a06      	ldr	r2, [pc, #24]	; (80047c8 <vApplicationGetTimerTaskMemory+0x30>)
 80047ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047b6:	601a      	str	r2, [r3, #0]
}
 80047b8:	bf00      	nop
 80047ba:	3714      	adds	r7, #20
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	200003e8 	.word	0x200003e8
 80047c8:	20000444 	.word	0x20000444

080047cc <vListInitialise>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
<<<<<<< HEAD
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
=======
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< HEAD
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f103 0208 	add.w	r2, r3, #8
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	605a      	str	r2, [r3, #4]
=======
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f103 0208 	add.w	r2, r3, #8
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	605a      	str	r2, [r3, #4]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
<<<<<<< HEAD
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044d8:	609a      	str	r2, [r3, #8]
=======
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80047e4:	609a      	str	r2, [r3, #8]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< HEAD
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f103 0208 	add.w	r2, r3, #8
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f103 0208 	add.w	r2, r3, #8
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	601a      	str	r2, [r3, #0]
=======
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f103 0208 	add.w	r2, r3, #8
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f103 0208 	add.w	r2, r3, #8
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	601a      	str	r2, [r3, #0]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
<<<<<<< HEAD
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <vListInitialiseItem>:
=======
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <vListInitialiseItem>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
<<<<<<< HEAD
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	611a      	str	r2, [r3, #16]
=======
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	611a      	str	r2, [r3, #16]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
<<<<<<< HEAD
 800450e:	bf00      	nop
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <vListInsertEnd>:
=======
 800481a:	bf00      	nop
 800481c:	370c      	adds	r7, #12
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr

08004826 <vListInsertEnd>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
<<<<<<< HEAD
 800451a:	b480      	push	{r7}
 800451c:	b085      	sub	sp, #20
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
 8004522:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	60fb      	str	r3, [r7, #12]
=======
 8004826:	b480      	push	{r7}
 8004828:	b085      	sub	sp, #20
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
 800482e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	60fb      	str	r3, [r7, #12]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
<<<<<<< HEAD
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	689a      	ldr	r2, [r3, #8]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	609a      	str	r2, [r3, #8]
=======
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	689a      	ldr	r2, [r3, #8]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	609a      	str	r2, [r3, #8]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
<<<<<<< HEAD
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	683a      	ldr	r2, [r7, #0]
 800453e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	1c5a      	adds	r2, r3, #1
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	601a      	str	r2, [r3, #0]
}
 8004556:	bf00      	nop
 8004558:	3714      	adds	r7, #20
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <vListInsert>:
=======
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	1c5a      	adds	r2, r3, #1
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	601a      	str	r2, [r3, #0]
}
 8004862:	bf00      	nop
 8004864:	3714      	adds	r7, #20
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <vListInsert>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
<<<<<<< HEAD
 8004562:	b480      	push	{r7}
 8004564:	b085      	sub	sp, #20
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
 800456a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	60bb      	str	r3, [r7, #8]
=======
 800486e:	b480      	push	{r7}
 8004870:	b085      	sub	sp, #20
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
 8004876:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	60bb      	str	r3, [r7, #8]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
<<<<<<< HEAD
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004578:	d103      	bne.n	8004582 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	60fb      	str	r3, [r7, #12]
 8004580:	e00c      	b.n	800459c <vListInsert+0x3a>
=======
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004884:	d103      	bne.n	800488e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	60fb      	str	r3, [r7, #12]
 800488c:	e00c      	b.n	80048a8 <vListInsert+0x3a>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
<<<<<<< HEAD
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	3308      	adds	r3, #8
 8004586:	60fb      	str	r3, [r7, #12]
 8004588:	e002      	b.n	8004590 <vListInsert+0x2e>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	60fb      	str	r3, [r7, #12]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68ba      	ldr	r2, [r7, #8]
 8004598:	429a      	cmp	r2, r3
 800459a:	d2f6      	bcs.n	800458a <vListInsert+0x28>
=======
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	3308      	adds	r3, #8
 8004892:	60fb      	str	r3, [r7, #12]
 8004894:	e002      	b.n	800489c <vListInsert+0x2e>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	60fb      	str	r3, [r7, #12]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d2f6      	bcs.n	8004896 <vListInsert+0x28>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
<<<<<<< HEAD
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	683a      	ldr	r2, [r7, #0]
 80045aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	605a      	str	r2, [r3, #4]
=======
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	683a      	ldr	r2, [r7, #0]
 80048b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	683a      	ldr	r2, [r7, #0]
 80048c2:	605a      	str	r2, [r3, #4]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
<<<<<<< HEAD
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	1c5a      	adds	r2, r3, #1
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	601a      	str	r2, [r3, #0]
}
 80045c8:	bf00      	nop
 80045ca:	3714      	adds	r7, #20
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <uxListRemove>:
=======
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	1c5a      	adds	r2, r3, #1
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	601a      	str	r2, [r3, #0]
}
 80048d4:	bf00      	nop
 80048d6:	3714      	adds	r7, #20
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <uxListRemove>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
<<<<<<< HEAD
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	6892      	ldr	r2, [r2, #8]
 80045ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	6852      	ldr	r2, [r2, #4]
 80045f4:	605a      	str	r2, [r3, #4]
=======
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	6892      	ldr	r2, [r2, #8]
 80048f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	6852      	ldr	r2, [r2, #4]
 8004900:	605a      	str	r2, [r3, #4]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
<<<<<<< HEAD
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d103      	bne.n	8004608 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689a      	ldr	r2, [r3, #8]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	605a      	str	r2, [r3, #4]
=======
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	429a      	cmp	r2, r3
 800490a:	d103      	bne.n	8004914 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	605a      	str	r2, [r3, #4]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
<<<<<<< HEAD
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	1e5a      	subs	r2, r3, #1
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
}
 800461c:	4618      	mov	r0, r3
 800461e:	3714      	adds	r7, #20
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <xQueueGenericReset>:
=======
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	1e5a      	subs	r2, r3, #1
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
}
 8004928:	4618      	mov	r0, r3
 800492a:	3714      	adds	r7, #20
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <xQueueGenericReset>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
<<<<<<< HEAD
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d109      	bne.n	8004650 <xQueueGenericReset+0x28>
=======
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d109      	bne.n	800495c <xQueueGenericReset+0x28>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
<<<<<<< HEAD
 800463c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004640:	f383 8811 	msr	BASEPRI, r3
 8004644:	f3bf 8f6f 	isb	sy
 8004648:	f3bf 8f4f 	dsb	sy
 800464c:	60bb      	str	r3, [r7, #8]
 800464e:	e7fe      	b.n	800464e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004650:	f002 f88c 	bl	800676c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800465c:	68f9      	ldr	r1, [r7, #12]
 800465e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004660:	fb01 f303 	mul.w	r3, r1, r3
 8004664:	441a      	add	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004680:	3b01      	subs	r3, #1
 8004682:	68f9      	ldr	r1, [r7, #12]
 8004684:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004686:	fb01 f303 	mul.w	r3, r1, r3
 800468a:	441a      	add	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	22ff      	movs	r2, #255	; 0xff
 8004694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	22ff      	movs	r2, #255	; 0xff
 800469c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d114      	bne.n	80046d0 <xQueueGenericReset+0xa8>
=======
 8004948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494c:	f383 8811 	msr	BASEPRI, r3
 8004950:	f3bf 8f6f 	isb	sy
 8004954:	f3bf 8f4f 	dsb	sy
 8004958:	60bb      	str	r3, [r7, #8]
 800495a:	e7fe      	b.n	800495a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800495c:	f002 f88e 	bl	8006a7c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004968:	68f9      	ldr	r1, [r7, #12]
 800496a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800496c:	fb01 f303 	mul.w	r3, r1, r3
 8004970:	441a      	add	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800498c:	3b01      	subs	r3, #1
 800498e:	68f9      	ldr	r1, [r7, #12]
 8004990:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004992:	fb01 f303 	mul.w	r3, r1, r3
 8004996:	441a      	add	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	22ff      	movs	r2, #255	; 0xff
 80049a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	22ff      	movs	r2, #255	; 0xff
 80049a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d114      	bne.n	80049dc <xQueueGenericReset+0xa8>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< HEAD
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d01a      	beq.n	80046e4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	3310      	adds	r3, #16
 80046b2:	4618      	mov	r0, r3
 80046b4:	f001 f958 	bl	8005968 <xTaskRemoveFromEventList>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d012      	beq.n	80046e4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80046be:	4b0d      	ldr	r3, [pc, #52]	; (80046f4 <xQueueGenericReset+0xcc>)
 80046c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046c4:	601a      	str	r2, [r3, #0]
 80046c6:	f3bf 8f4f 	dsb	sy
 80046ca:	f3bf 8f6f 	isb	sy
 80046ce:	e009      	b.n	80046e4 <xQueueGenericReset+0xbc>
=======
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d01a      	beq.n	80049f0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	3310      	adds	r3, #16
 80049be:	4618      	mov	r0, r3
 80049c0:	f001 f958 	bl	8005c74 <xTaskRemoveFromEventList>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d012      	beq.n	80049f0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80049ca:	4b0d      	ldr	r3, [pc, #52]	; (8004a00 <xQueueGenericReset+0xcc>)
 80049cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049d0:	601a      	str	r2, [r3, #0]
 80049d2:	f3bf 8f4f 	dsb	sy
 80049d6:	f3bf 8f6f 	isb	sy
 80049da:	e009      	b.n	80049f0 <xQueueGenericReset+0xbc>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
<<<<<<< HEAD
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	3310      	adds	r3, #16
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7ff fef3 	bl	80044c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	3324      	adds	r3, #36	; 0x24
 80046de:	4618      	mov	r0, r3
 80046e0:	f7ff feee 	bl	80044c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80046e4:	f002 f870 	bl	80067c8 <vPortExitCritical>
=======
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	3310      	adds	r3, #16
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff fef3 	bl	80047cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	3324      	adds	r3, #36	; 0x24
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7ff feee 	bl	80047cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80049f0:	f002 f872 	bl	8006ad8 <vPortExitCritical>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
<<<<<<< HEAD
 80046e8:	2301      	movs	r3, #1
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3710      	adds	r7, #16
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	e000ed04 	.word	0xe000ed04

080046f8 <xQueueGenericCreateStatic>:
=======
 80049f4:	2301      	movs	r3, #1
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	e000ed04 	.word	0xe000ed04

08004a04 <xQueueGenericCreateStatic>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
<<<<<<< HEAD
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b08e      	sub	sp, #56	; 0x38
 80046fc:	af02      	add	r7, sp, #8
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
 8004704:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d109      	bne.n	8004720 <xQueueGenericCreateStatic+0x28>
 800470c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004710:	f383 8811 	msr	BASEPRI, r3
 8004714:	f3bf 8f6f 	isb	sy
 8004718:	f3bf 8f4f 	dsb	sy
 800471c:	62bb      	str	r3, [r7, #40]	; 0x28
 800471e:	e7fe      	b.n	800471e <xQueueGenericCreateStatic+0x26>
=======
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b08e      	sub	sp, #56	; 0x38
 8004a08:	af02      	add	r7, sp, #8
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]
 8004a10:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d109      	bne.n	8004a2c <xQueueGenericCreateStatic+0x28>
 8004a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1c:	f383 8811 	msr	BASEPRI, r3
 8004a20:	f3bf 8f6f 	isb	sy
 8004a24:	f3bf 8f4f 	dsb	sy
 8004a28:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a2a:	e7fe      	b.n	8004a2a <xQueueGenericCreateStatic+0x26>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
<<<<<<< HEAD
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d109      	bne.n	800473a <xQueueGenericCreateStatic+0x42>
 8004726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472a:	f383 8811 	msr	BASEPRI, r3
 800472e:	f3bf 8f6f 	isb	sy
 8004732:	f3bf 8f4f 	dsb	sy
 8004736:	627b      	str	r3, [r7, #36]	; 0x24
 8004738:	e7fe      	b.n	8004738 <xQueueGenericCreateStatic+0x40>
=======
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d109      	bne.n	8004a46 <xQueueGenericCreateStatic+0x42>
 8004a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a36:	f383 8811 	msr	BASEPRI, r3
 8004a3a:	f3bf 8f6f 	isb	sy
 8004a3e:	f3bf 8f4f 	dsb	sy
 8004a42:	627b      	str	r3, [r7, #36]	; 0x24
 8004a44:	e7fe      	b.n	8004a44 <xQueueGenericCreateStatic+0x40>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
<<<<<<< HEAD
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d002      	beq.n	8004746 <xQueueGenericCreateStatic+0x4e>
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <xQueueGenericCreateStatic+0x52>
 8004746:	2301      	movs	r3, #1
 8004748:	e000      	b.n	800474c <xQueueGenericCreateStatic+0x54>
 800474a:	2300      	movs	r3, #0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d109      	bne.n	8004764 <xQueueGenericCreateStatic+0x6c>
 8004750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004754:	f383 8811 	msr	BASEPRI, r3
 8004758:	f3bf 8f6f 	isb	sy
 800475c:	f3bf 8f4f 	dsb	sy
 8004760:	623b      	str	r3, [r7, #32]
 8004762:	e7fe      	b.n	8004762 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d102      	bne.n	8004770 <xQueueGenericCreateStatic+0x78>
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d101      	bne.n	8004774 <xQueueGenericCreateStatic+0x7c>
 8004770:	2301      	movs	r3, #1
 8004772:	e000      	b.n	8004776 <xQueueGenericCreateStatic+0x7e>
 8004774:	2300      	movs	r3, #0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d109      	bne.n	800478e <xQueueGenericCreateStatic+0x96>
 800477a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800477e:	f383 8811 	msr	BASEPRI, r3
 8004782:	f3bf 8f6f 	isb	sy
 8004786:	f3bf 8f4f 	dsb	sy
 800478a:	61fb      	str	r3, [r7, #28]
 800478c:	e7fe      	b.n	800478c <xQueueGenericCreateStatic+0x94>
=======
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d002      	beq.n	8004a52 <xQueueGenericCreateStatic+0x4e>
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d001      	beq.n	8004a56 <xQueueGenericCreateStatic+0x52>
 8004a52:	2301      	movs	r3, #1
 8004a54:	e000      	b.n	8004a58 <xQueueGenericCreateStatic+0x54>
 8004a56:	2300      	movs	r3, #0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d109      	bne.n	8004a70 <xQueueGenericCreateStatic+0x6c>
 8004a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a60:	f383 8811 	msr	BASEPRI, r3
 8004a64:	f3bf 8f6f 	isb	sy
 8004a68:	f3bf 8f4f 	dsb	sy
 8004a6c:	623b      	str	r3, [r7, #32]
 8004a6e:	e7fe      	b.n	8004a6e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d102      	bne.n	8004a7c <xQueueGenericCreateStatic+0x78>
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d101      	bne.n	8004a80 <xQueueGenericCreateStatic+0x7c>
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e000      	b.n	8004a82 <xQueueGenericCreateStatic+0x7e>
 8004a80:	2300      	movs	r3, #0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d109      	bne.n	8004a9a <xQueueGenericCreateStatic+0x96>
 8004a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8a:	f383 8811 	msr	BASEPRI, r3
 8004a8e:	f3bf 8f6f 	isb	sy
 8004a92:	f3bf 8f4f 	dsb	sy
 8004a96:	61fb      	str	r3, [r7, #28]
 8004a98:	e7fe      	b.n	8004a98 <xQueueGenericCreateStatic+0x94>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
<<<<<<< HEAD
 800478e:	2350      	movs	r3, #80	; 0x50
 8004790:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	2b50      	cmp	r3, #80	; 0x50
 8004796:	d009      	beq.n	80047ac <xQueueGenericCreateStatic+0xb4>
 8004798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479c:	f383 8811 	msr	BASEPRI, r3
 80047a0:	f3bf 8f6f 	isb	sy
 80047a4:	f3bf 8f4f 	dsb	sy
 80047a8:	61bb      	str	r3, [r7, #24]
 80047aa:	e7fe      	b.n	80047aa <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80047ac:	697b      	ldr	r3, [r7, #20]
=======
 8004a9a:	2350      	movs	r3, #80	; 0x50
 8004a9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	2b50      	cmp	r3, #80	; 0x50
 8004aa2:	d009      	beq.n	8004ab8 <xQueueGenericCreateStatic+0xb4>
 8004aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa8:	f383 8811 	msr	BASEPRI, r3
 8004aac:	f3bf 8f6f 	isb	sy
 8004ab0:	f3bf 8f4f 	dsb	sy
 8004ab4:	61bb      	str	r3, [r7, #24]
 8004ab6:	e7fe      	b.n	8004ab6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004ab8:	697b      	ldr	r3, [r7, #20]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
<<<<<<< HEAD
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80047b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00d      	beq.n	80047d4 <xQueueGenericCreateStatic+0xdc>
=======
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00d      	beq.n	8004ae0 <xQueueGenericCreateStatic+0xdc>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
<<<<<<< HEAD
 80047b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
=======
 8004ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
<<<<<<< HEAD
 80047c0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80047c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	4613      	mov	r3, r2
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	68b9      	ldr	r1, [r7, #8]
 80047ce:	68f8      	ldr	r0, [r7, #12]
 80047d0:	f000 f805 	bl	80047de <prvInitialiseNewQueue>
=======
 8004acc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad2:	9300      	str	r3, [sp, #0]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	68b9      	ldr	r1, [r7, #8]
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f000 f805 	bl	8004aea <prvInitialiseNewQueue>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
<<<<<<< HEAD
 80047d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3730      	adds	r7, #48	; 0x30
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <prvInitialiseNewQueue>:
=======
 8004ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3730      	adds	r7, #48	; 0x30
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <prvInitialiseNewQueue>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
<<<<<<< HEAD
 80047de:	b580      	push	{r7, lr}
 80047e0:	b084      	sub	sp, #16
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	60f8      	str	r0, [r7, #12]
 80047e6:	60b9      	str	r1, [r7, #8]
 80047e8:	607a      	str	r2, [r7, #4]
 80047ea:	70fb      	strb	r3, [r7, #3]
=======
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b084      	sub	sp, #16
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	60f8      	str	r0, [r7, #12]
 8004af2:	60b9      	str	r1, [r7, #8]
 8004af4:	607a      	str	r2, [r7, #4]
 8004af6:	70fb      	strb	r3, [r7, #3]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d103      	bne.n	80047fa <prvInitialiseNewQueue+0x1c>
=======
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d103      	bne.n	8004b06 <prvInitialiseNewQueue+0x1c>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
<<<<<<< HEAD
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	e002      	b.n	8004800 <prvInitialiseNewQueue+0x22>
=======
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	69ba      	ldr	r2, [r7, #24]
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	e002      	b.n	8004b0c <prvInitialiseNewQueue+0x22>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
<<<<<<< HEAD
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	601a      	str	r2, [r3, #0]
=======
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	601a      	str	r2, [r3, #0]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
<<<<<<< HEAD
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800480c:	2101      	movs	r1, #1
 800480e:	69b8      	ldr	r0, [r7, #24]
 8004810:	f7ff ff0a 	bl	8004628 <xQueueGenericReset>
=======
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b18:	2101      	movs	r1, #1
 8004b1a:	69b8      	ldr	r0, [r7, #24]
 8004b1c:	f7ff ff0a 	bl	8004934 <xQueueGenericReset>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
<<<<<<< HEAD
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	78fa      	ldrb	r2, [r7, #3]
 8004818:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
=======
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	78fa      	ldrb	r2, [r7, #3]
 8004b24:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
<<<<<<< HEAD
 800481c:	bf00      	nop
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <xQueueGenericSend>:
=======
 8004b28:	bf00      	nop
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <xQueueGenericSend>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
<<<<<<< HEAD
 8004824:	b580      	push	{r7, lr}
 8004826:	b08e      	sub	sp, #56	; 0x38
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
 8004830:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004832:	2300      	movs	r3, #0
 8004834:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800483a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483c:	2b00      	cmp	r3, #0
 800483e:	d109      	bne.n	8004854 <xQueueGenericSend+0x30>
 8004840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004844:	f383 8811 	msr	BASEPRI, r3
 8004848:	f3bf 8f6f 	isb	sy
 800484c:	f3bf 8f4f 	dsb	sy
 8004850:	62bb      	str	r3, [r7, #40]	; 0x28
 8004852:	e7fe      	b.n	8004852 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d103      	bne.n	8004862 <xQueueGenericSend+0x3e>
 800485a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <xQueueGenericSend+0x42>
 8004862:	2301      	movs	r3, #1
 8004864:	e000      	b.n	8004868 <xQueueGenericSend+0x44>
 8004866:	2300      	movs	r3, #0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d109      	bne.n	8004880 <xQueueGenericSend+0x5c>
 800486c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004870:	f383 8811 	msr	BASEPRI, r3
 8004874:	f3bf 8f6f 	isb	sy
 8004878:	f3bf 8f4f 	dsb	sy
 800487c:	627b      	str	r3, [r7, #36]	; 0x24
 800487e:	e7fe      	b.n	800487e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	2b02      	cmp	r3, #2
 8004884:	d103      	bne.n	800488e <xQueueGenericSend+0x6a>
 8004886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488a:	2b01      	cmp	r3, #1
 800488c:	d101      	bne.n	8004892 <xQueueGenericSend+0x6e>
 800488e:	2301      	movs	r3, #1
 8004890:	e000      	b.n	8004894 <xQueueGenericSend+0x70>
 8004892:	2300      	movs	r3, #0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d109      	bne.n	80048ac <xQueueGenericSend+0x88>
 8004898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489c:	f383 8811 	msr	BASEPRI, r3
 80048a0:	f3bf 8f6f 	isb	sy
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	623b      	str	r3, [r7, #32]
 80048aa:	e7fe      	b.n	80048aa <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048ac:	f001 fa12 	bl	8005cd4 <xTaskGetSchedulerState>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d102      	bne.n	80048bc <xQueueGenericSend+0x98>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d101      	bne.n	80048c0 <xQueueGenericSend+0x9c>
 80048bc:	2301      	movs	r3, #1
 80048be:	e000      	b.n	80048c2 <xQueueGenericSend+0x9e>
 80048c0:	2300      	movs	r3, #0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d109      	bne.n	80048da <xQueueGenericSend+0xb6>
 80048c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ca:	f383 8811 	msr	BASEPRI, r3
 80048ce:	f3bf 8f6f 	isb	sy
 80048d2:	f3bf 8f4f 	dsb	sy
 80048d6:	61fb      	str	r3, [r7, #28]
 80048d8:	e7fe      	b.n	80048d8 <xQueueGenericSend+0xb4>
=======
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b08e      	sub	sp, #56	; 0x38
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
 8004b3c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d109      	bne.n	8004b60 <xQueueGenericSend+0x30>
 8004b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b50:	f383 8811 	msr	BASEPRI, r3
 8004b54:	f3bf 8f6f 	isb	sy
 8004b58:	f3bf 8f4f 	dsb	sy
 8004b5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b5e:	e7fe      	b.n	8004b5e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d103      	bne.n	8004b6e <xQueueGenericSend+0x3e>
 8004b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d101      	bne.n	8004b72 <xQueueGenericSend+0x42>
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e000      	b.n	8004b74 <xQueueGenericSend+0x44>
 8004b72:	2300      	movs	r3, #0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d109      	bne.n	8004b8c <xQueueGenericSend+0x5c>
 8004b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7c:	f383 8811 	msr	BASEPRI, r3
 8004b80:	f3bf 8f6f 	isb	sy
 8004b84:	f3bf 8f4f 	dsb	sy
 8004b88:	627b      	str	r3, [r7, #36]	; 0x24
 8004b8a:	e7fe      	b.n	8004b8a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d103      	bne.n	8004b9a <xQueueGenericSend+0x6a>
 8004b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d101      	bne.n	8004b9e <xQueueGenericSend+0x6e>
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e000      	b.n	8004ba0 <xQueueGenericSend+0x70>
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d109      	bne.n	8004bb8 <xQueueGenericSend+0x88>
 8004ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba8:	f383 8811 	msr	BASEPRI, r3
 8004bac:	f3bf 8f6f 	isb	sy
 8004bb0:	f3bf 8f4f 	dsb	sy
 8004bb4:	623b      	str	r3, [r7, #32]
 8004bb6:	e7fe      	b.n	8004bb6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004bb8:	f001 fa12 	bl	8005fe0 <xTaskGetSchedulerState>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d102      	bne.n	8004bc8 <xQueueGenericSend+0x98>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d101      	bne.n	8004bcc <xQueueGenericSend+0x9c>
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e000      	b.n	8004bce <xQueueGenericSend+0x9e>
 8004bcc:	2300      	movs	r3, #0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d109      	bne.n	8004be6 <xQueueGenericSend+0xb6>
 8004bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd6:	f383 8811 	msr	BASEPRI, r3
 8004bda:	f3bf 8f6f 	isb	sy
 8004bde:	f3bf 8f4f 	dsb	sy
 8004be2:	61fb      	str	r3, [r7, #28]
 8004be4:	e7fe      	b.n	8004be4 <xQueueGenericSend+0xb4>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
<<<<<<< HEAD
 80048da:	f001 ff47 	bl	800676c <vPortEnterCritical>
=======
 8004be6:	f001 ff49 	bl	8006a7c <vPortEnterCritical>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
<<<<<<< HEAD
 80048de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d302      	bcc.n	80048f0 <xQueueGenericSend+0xcc>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d129      	bne.n	8004944 <xQueueGenericSend+0x120>
=======
 8004bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d302      	bcc.n	8004bfc <xQueueGenericSend+0xcc>
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d129      	bne.n	8004c50 <xQueueGenericSend+0x120>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
<<<<<<< HEAD
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	68b9      	ldr	r1, [r7, #8]
 80048f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048f6:	f000 f9ff 	bl	8004cf8 <prvCopyDataToQueue>
 80048fa:	62f8      	str	r0, [r7, #44]	; 0x2c
=======
 8004bfc:	683a      	ldr	r2, [r7, #0]
 8004bfe:	68b9      	ldr	r1, [r7, #8]
 8004c00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c02:	f000 f9ff 	bl	8005004 <prvCopyDataToQueue>
 8004c06:	62f8      	str	r0, [r7, #44]	; 0x2c
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< HEAD
 80048fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004900:	2b00      	cmp	r3, #0
 8004902:	d010      	beq.n	8004926 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004906:	3324      	adds	r3, #36	; 0x24
 8004908:	4618      	mov	r0, r3
 800490a:	f001 f82d 	bl	8005968 <xTaskRemoveFromEventList>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d013      	beq.n	800493c <xQueueGenericSend+0x118>
=======
 8004c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d010      	beq.n	8004c32 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c12:	3324      	adds	r3, #36	; 0x24
 8004c14:	4618      	mov	r0, r3
 8004c16:	f001 f82d 	bl	8005c74 <xTaskRemoveFromEventList>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d013      	beq.n	8004c48 <xQueueGenericSend+0x118>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
<<<<<<< HEAD
 8004914:	4b3f      	ldr	r3, [pc, #252]	; (8004a14 <xQueueGenericSend+0x1f0>)
 8004916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800491a:	601a      	str	r2, [r3, #0]
 800491c:	f3bf 8f4f 	dsb	sy
 8004920:	f3bf 8f6f 	isb	sy
 8004924:	e00a      	b.n	800493c <xQueueGenericSend+0x118>
=======
 8004c20:	4b3f      	ldr	r3, [pc, #252]	; (8004d20 <xQueueGenericSend+0x1f0>)
 8004c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c26:	601a      	str	r2, [r3, #0]
 8004c28:	f3bf 8f4f 	dsb	sy
 8004c2c:	f3bf 8f6f 	isb	sy
 8004c30:	e00a      	b.n	8004c48 <xQueueGenericSend+0x118>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
<<<<<<< HEAD
 8004926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004928:	2b00      	cmp	r3, #0
 800492a:	d007      	beq.n	800493c <xQueueGenericSend+0x118>
=======
 8004c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d007      	beq.n	8004c48 <xQueueGenericSend+0x118>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
<<<<<<< HEAD
 800492c:	4b39      	ldr	r3, [pc, #228]	; (8004a14 <xQueueGenericSend+0x1f0>)
 800492e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004932:	601a      	str	r2, [r3, #0]
 8004934:	f3bf 8f4f 	dsb	sy
 8004938:	f3bf 8f6f 	isb	sy
=======
 8004c38:	4b39      	ldr	r3, [pc, #228]	; (8004d20 <xQueueGenericSend+0x1f0>)
 8004c3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c3e:	601a      	str	r2, [r3, #0]
 8004c40:	f3bf 8f4f 	dsb	sy
 8004c44:	f3bf 8f6f 	isb	sy
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
<<<<<<< HEAD
 800493c:	f001 ff44 	bl	80067c8 <vPortExitCritical>
				return pdPASS;
 8004940:	2301      	movs	r3, #1
 8004942:	e063      	b.n	8004a0c <xQueueGenericSend+0x1e8>
=======
 8004c48:	f001 ff46 	bl	8006ad8 <vPortExitCritical>
				return pdPASS;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e063      	b.n	8004d18 <xQueueGenericSend+0x1e8>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
<<<<<<< HEAD
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d103      	bne.n	8004952 <xQueueGenericSend+0x12e>
=======
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d103      	bne.n	8004c5e <xQueueGenericSend+0x12e>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
<<<<<<< HEAD
 800494a:	f001 ff3d 	bl	80067c8 <vPortExitCritical>
=======
 8004c56:	f001 ff3f 	bl	8006ad8 <vPortExitCritical>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
<<<<<<< HEAD
 800494e:	2300      	movs	r3, #0
 8004950:	e05c      	b.n	8004a0c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004954:	2b00      	cmp	r3, #0
 8004956:	d106      	bne.n	8004966 <xQueueGenericSend+0x142>
=======
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	e05c      	b.n	8004d18 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d106      	bne.n	8004c72 <xQueueGenericSend+0x142>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
<<<<<<< HEAD
 8004958:	f107 0314 	add.w	r3, r7, #20
 800495c:	4618      	mov	r0, r3
 800495e:	f001 f865 	bl	8005a2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004962:	2301      	movs	r3, #1
 8004964:	637b      	str	r3, [r7, #52]	; 0x34
=======
 8004c64:	f107 0314 	add.w	r3, r7, #20
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f001 f865 	bl	8005d38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	637b      	str	r3, [r7, #52]	; 0x34
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< HEAD
 8004966:	f001 ff2f 	bl	80067c8 <vPortExitCritical>
=======
 8004c72:	f001 ff31 	bl	8006ad8 <vPortExitCritical>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
<<<<<<< HEAD
 800496a:	f000 fde1 	bl	8005530 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800496e:	f001 fefd 	bl	800676c <vPortEnterCritical>
 8004972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004974:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004978:	b25b      	sxtb	r3, r3
 800497a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800497e:	d103      	bne.n	8004988 <xQueueGenericSend+0x164>
 8004980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004982:	2200      	movs	r2, #0
 8004984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800498e:	b25b      	sxtb	r3, r3
 8004990:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004994:	d103      	bne.n	800499e <xQueueGenericSend+0x17a>
 8004996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004998:	2200      	movs	r2, #0
 800499a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800499e:	f001 ff13 	bl	80067c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80049a2:	1d3a      	adds	r2, r7, #4
 80049a4:	f107 0314 	add.w	r3, r7, #20
 80049a8:	4611      	mov	r1, r2
 80049aa:	4618      	mov	r0, r3
 80049ac:	f001 f854 	bl	8005a58 <xTaskCheckForTimeOut>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d124      	bne.n	8004a00 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80049b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049b8:	f000 fa96 	bl	8004ee8 <prvIsQueueFull>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d018      	beq.n	80049f4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80049c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c4:	3310      	adds	r3, #16
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	4611      	mov	r1, r2
 80049ca:	4618      	mov	r0, r3
 80049cc:	f000 ff7e 	bl	80058cc <vTaskPlaceOnEventList>
=======
 8004c76:	f000 fde1 	bl	800583c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c7a:	f001 feff 	bl	8006a7c <vPortEnterCritical>
 8004c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c84:	b25b      	sxtb	r3, r3
 8004c86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c8a:	d103      	bne.n	8004c94 <xQueueGenericSend+0x164>
 8004c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c9a:	b25b      	sxtb	r3, r3
 8004c9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ca0:	d103      	bne.n	8004caa <xQueueGenericSend+0x17a>
 8004ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004caa:	f001 ff15 	bl	8006ad8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004cae:	1d3a      	adds	r2, r7, #4
 8004cb0:	f107 0314 	add.w	r3, r7, #20
 8004cb4:	4611      	mov	r1, r2
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f001 f854 	bl	8005d64 <xTaskCheckForTimeOut>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d124      	bne.n	8004d0c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004cc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cc4:	f000 fa96 	bl	80051f4 <prvIsQueueFull>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d018      	beq.n	8004d00 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd0:	3310      	adds	r3, #16
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	4611      	mov	r1, r2
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f000 ff7e 	bl	8005bd8 <vTaskPlaceOnEventList>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 80049d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049d2:	f000 fa21 	bl	8004e18 <prvUnlockQueue>
=======
 8004cdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cde:	f000 fa21 	bl	8005124 <prvUnlockQueue>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
<<<<<<< HEAD
 80049d6:	f000 fdb9 	bl	800554c <xTaskResumeAll>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f47f af7c 	bne.w	80048da <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80049e2:	4b0c      	ldr	r3, [pc, #48]	; (8004a14 <xQueueGenericSend+0x1f0>)
 80049e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049e8:	601a      	str	r2, [r3, #0]
 80049ea:	f3bf 8f4f 	dsb	sy
 80049ee:	f3bf 8f6f 	isb	sy
 80049f2:	e772      	b.n	80048da <xQueueGenericSend+0xb6>
=======
 8004ce2:	f000 fdb9 	bl	8005858 <xTaskResumeAll>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f47f af7c 	bne.w	8004be6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004cee:	4b0c      	ldr	r3, [pc, #48]	; (8004d20 <xQueueGenericSend+0x1f0>)
 8004cf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cf4:	601a      	str	r2, [r3, #0]
 8004cf6:	f3bf 8f4f 	dsb	sy
 8004cfa:	f3bf 8f6f 	isb	sy
 8004cfe:	e772      	b.n	8004be6 <xQueueGenericSend+0xb6>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 80049f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049f6:	f000 fa0f 	bl	8004e18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049fa:	f000 fda7 	bl	800554c <xTaskResumeAll>
 80049fe:	e76c      	b.n	80048da <xQueueGenericSend+0xb6>
=======
 8004d00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d02:	f000 fa0f 	bl	8005124 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d06:	f000 fda7 	bl	8005858 <xTaskResumeAll>
 8004d0a:	e76c      	b.n	8004be6 <xQueueGenericSend+0xb6>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 8004a00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a02:	f000 fa09 	bl	8004e18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a06:	f000 fda1 	bl	800554c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004a0a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3738      	adds	r7, #56	; 0x38
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	e000ed04 	.word	0xe000ed04

08004a18 <xQueueGenericSendFromISR>:
=======
 8004d0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d0e:	f000 fa09 	bl	8005124 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d12:	f000 fda1 	bl	8005858 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004d16:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3738      	adds	r7, #56	; 0x38
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	e000ed04 	.word	0xe000ed04

08004d24 <xQueueGenericSendFromISR>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
<<<<<<< HEAD
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b08e      	sub	sp, #56	; 0x38
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
 8004a24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d109      	bne.n	8004a44 <xQueueGenericSendFromISR+0x2c>
 8004a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a34:	f383 8811 	msr	BASEPRI, r3
 8004a38:	f3bf 8f6f 	isb	sy
 8004a3c:	f3bf 8f4f 	dsb	sy
 8004a40:	627b      	str	r3, [r7, #36]	; 0x24
 8004a42:	e7fe      	b.n	8004a42 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d103      	bne.n	8004a52 <xQueueGenericSendFromISR+0x3a>
 8004a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <xQueueGenericSendFromISR+0x3e>
 8004a52:	2301      	movs	r3, #1
 8004a54:	e000      	b.n	8004a58 <xQueueGenericSendFromISR+0x40>
 8004a56:	2300      	movs	r3, #0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d109      	bne.n	8004a70 <xQueueGenericSendFromISR+0x58>
 8004a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a60:	f383 8811 	msr	BASEPRI, r3
 8004a64:	f3bf 8f6f 	isb	sy
 8004a68:	f3bf 8f4f 	dsb	sy
 8004a6c:	623b      	str	r3, [r7, #32]
 8004a6e:	e7fe      	b.n	8004a6e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d103      	bne.n	8004a7e <xQueueGenericSendFromISR+0x66>
 8004a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d101      	bne.n	8004a82 <xQueueGenericSendFromISR+0x6a>
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e000      	b.n	8004a84 <xQueueGenericSendFromISR+0x6c>
 8004a82:	2300      	movs	r3, #0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d109      	bne.n	8004a9c <xQueueGenericSendFromISR+0x84>
 8004a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8c:	f383 8811 	msr	BASEPRI, r3
 8004a90:	f3bf 8f6f 	isb	sy
 8004a94:	f3bf 8f4f 	dsb	sy
 8004a98:	61fb      	str	r3, [r7, #28]
 8004a9a:	e7fe      	b.n	8004a9a <xQueueGenericSendFromISR+0x82>
=======
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b08e      	sub	sp, #56	; 0x38
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
 8004d30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d109      	bne.n	8004d50 <xQueueGenericSendFromISR+0x2c>
 8004d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d40:	f383 8811 	msr	BASEPRI, r3
 8004d44:	f3bf 8f6f 	isb	sy
 8004d48:	f3bf 8f4f 	dsb	sy
 8004d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d4e:	e7fe      	b.n	8004d4e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d103      	bne.n	8004d5e <xQueueGenericSendFromISR+0x3a>
 8004d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <xQueueGenericSendFromISR+0x3e>
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e000      	b.n	8004d64 <xQueueGenericSendFromISR+0x40>
 8004d62:	2300      	movs	r3, #0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d109      	bne.n	8004d7c <xQueueGenericSendFromISR+0x58>
 8004d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6c:	f383 8811 	msr	BASEPRI, r3
 8004d70:	f3bf 8f6f 	isb	sy
 8004d74:	f3bf 8f4f 	dsb	sy
 8004d78:	623b      	str	r3, [r7, #32]
 8004d7a:	e7fe      	b.n	8004d7a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d103      	bne.n	8004d8a <xQueueGenericSendFromISR+0x66>
 8004d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d101      	bne.n	8004d8e <xQueueGenericSendFromISR+0x6a>
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e000      	b.n	8004d90 <xQueueGenericSendFromISR+0x6c>
 8004d8e:	2300      	movs	r3, #0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d109      	bne.n	8004da8 <xQueueGenericSendFromISR+0x84>
 8004d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d98:	f383 8811 	msr	BASEPRI, r3
 8004d9c:	f3bf 8f6f 	isb	sy
 8004da0:	f3bf 8f4f 	dsb	sy
 8004da4:	61fb      	str	r3, [r7, #28]
 8004da6:	e7fe      	b.n	8004da6 <xQueueGenericSendFromISR+0x82>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
<<<<<<< HEAD
 8004a9c:	f001 ff42 	bl	8006924 <vPortValidateInterruptPriority>
=======
 8004da8:	f001 ff44 	bl	8006c34 <vPortValidateInterruptPriority>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
<<<<<<< HEAD
 8004aa0:	f3ef 8211 	mrs	r2, BASEPRI
 8004aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa8:	f383 8811 	msr	BASEPRI, r3
 8004aac:	f3bf 8f6f 	isb	sy
 8004ab0:	f3bf 8f4f 	dsb	sy
 8004ab4:	61ba      	str	r2, [r7, #24]
 8004ab6:	617b      	str	r3, [r7, #20]
=======
 8004dac:	f3ef 8211 	mrs	r2, BASEPRI
 8004db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db4:	f383 8811 	msr	BASEPRI, r3
 8004db8:	f3bf 8f6f 	isb	sy
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	61ba      	str	r2, [r7, #24]
 8004dc2:	617b      	str	r3, [r7, #20]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
<<<<<<< HEAD
 8004ab8:	69bb      	ldr	r3, [r7, #24]
=======
 8004dc4:	69bb      	ldr	r3, [r7, #24]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
<<<<<<< HEAD
 8004aba:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004abe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d302      	bcc.n	8004ace <xQueueGenericSendFromISR+0xb6>
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d12c      	bne.n	8004b28 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ad4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
=======
 8004dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d302      	bcc.n	8004dda <xQueueGenericSendFromISR+0xb6>
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d12c      	bne.n	8004e34 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ddc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004de0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
<<<<<<< HEAD
 8004ad8:	683a      	ldr	r2, [r7, #0]
 8004ada:	68b9      	ldr	r1, [r7, #8]
 8004adc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ade:	f000 f90b 	bl	8004cf8 <prvCopyDataToQueue>
=======
 8004de4:	683a      	ldr	r2, [r7, #0]
 8004de6:	68b9      	ldr	r1, [r7, #8]
 8004de8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dea:	f000 f90b 	bl	8005004 <prvCopyDataToQueue>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
<<<<<<< HEAD
 8004ae2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004ae6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004aea:	d112      	bne.n	8004b12 <xQueueGenericSendFromISR+0xfa>
=======
 8004dee:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004df2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004df6:	d112      	bne.n	8004e1e <xQueueGenericSendFromISR+0xfa>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< HEAD
 8004aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d016      	beq.n	8004b22 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af6:	3324      	adds	r3, #36	; 0x24
 8004af8:	4618      	mov	r0, r3
 8004afa:	f000 ff35 	bl	8005968 <xTaskRemoveFromEventList>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00e      	beq.n	8004b22 <xQueueGenericSendFromISR+0x10a>
=======
 8004df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d016      	beq.n	8004e2e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e02:	3324      	adds	r3, #36	; 0x24
 8004e04:	4618      	mov	r0, r3
 8004e06:	f000 ff35 	bl	8005c74 <xTaskRemoveFromEventList>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00e      	beq.n	8004e2e <xQueueGenericSendFromISR+0x10a>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
<<<<<<< HEAD
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00b      	beq.n	8004b22 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	601a      	str	r2, [r3, #0]
 8004b10:	e007      	b.n	8004b22 <xQueueGenericSendFromISR+0x10a>
=======
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00b      	beq.n	8004e2e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	601a      	str	r2, [r3, #0]
 8004e1c:	e007      	b.n	8004e2e <xQueueGenericSendFromISR+0x10a>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
<<<<<<< HEAD
 8004b12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b16:	3301      	adds	r3, #1
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	b25a      	sxtb	r2, r3
 8004b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004b22:	2301      	movs	r3, #1
 8004b24:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004b26:	e001      	b.n	8004b2c <xQueueGenericSendFromISR+0x114>
=======
 8004e1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e22:	3301      	adds	r3, #1
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	b25a      	sxtb	r2, r3
 8004e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004e32:	e001      	b.n	8004e38 <xQueueGenericSendFromISR+0x114>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
<<<<<<< HEAD
 8004b28:	2300      	movs	r3, #0
 8004b2a:	637b      	str	r3, [r7, #52]	; 0x34
 8004b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b2e:	613b      	str	r3, [r7, #16]
=======
 8004e34:	2300      	movs	r3, #0
 8004e36:	637b      	str	r3, [r7, #52]	; 0x34
 8004e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e3a:	613b      	str	r3, [r7, #16]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
<<<<<<< HEAD
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	f383 8811 	msr	BASEPRI, r3
=======
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	f383 8811 	msr	BASEPRI, r3
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
<<<<<<< HEAD
 8004b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3738      	adds	r7, #56	; 0x38
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <xQueueReceive>:
=======
 8004e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3738      	adds	r7, #56	; 0x38
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <xQueueReceive>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
<<<<<<< HEAD
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b08c      	sub	sp, #48	; 0x30
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d109      	bne.n	8004b6e <xQueueReceive+0x2e>
	__asm volatile
 8004b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5e:	f383 8811 	msr	BASEPRI, r3
 8004b62:	f3bf 8f6f 	isb	sy
 8004b66:	f3bf 8f4f 	dsb	sy
 8004b6a:	623b      	str	r3, [r7, #32]
 8004b6c:	e7fe      	b.n	8004b6c <xQueueReceive+0x2c>
=======
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b08c      	sub	sp, #48	; 0x30
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d109      	bne.n	8004e7a <xQueueReceive+0x2e>
	__asm volatile
 8004e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6a:	f383 8811 	msr	BASEPRI, r3
 8004e6e:	f3bf 8f6f 	isb	sy
 8004e72:	f3bf 8f4f 	dsb	sy
 8004e76:	623b      	str	r3, [r7, #32]
 8004e78:	e7fe      	b.n	8004e78 <xQueueReceive+0x2c>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
<<<<<<< HEAD
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d103      	bne.n	8004b7c <xQueueReceive+0x3c>
 8004b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d101      	bne.n	8004b80 <xQueueReceive+0x40>
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e000      	b.n	8004b82 <xQueueReceive+0x42>
 8004b80:	2300      	movs	r3, #0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d109      	bne.n	8004b9a <xQueueReceive+0x5a>
 8004b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8a:	f383 8811 	msr	BASEPRI, r3
 8004b8e:	f3bf 8f6f 	isb	sy
 8004b92:	f3bf 8f4f 	dsb	sy
 8004b96:	61fb      	str	r3, [r7, #28]
 8004b98:	e7fe      	b.n	8004b98 <xQueueReceive+0x58>
=======
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d103      	bne.n	8004e88 <xQueueReceive+0x3c>
 8004e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d101      	bne.n	8004e8c <xQueueReceive+0x40>
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e000      	b.n	8004e8e <xQueueReceive+0x42>
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d109      	bne.n	8004ea6 <xQueueReceive+0x5a>
 8004e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e96:	f383 8811 	msr	BASEPRI, r3
 8004e9a:	f3bf 8f6f 	isb	sy
 8004e9e:	f3bf 8f4f 	dsb	sy
 8004ea2:	61fb      	str	r3, [r7, #28]
 8004ea4:	e7fe      	b.n	8004ea4 <xQueueReceive+0x58>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
<<<<<<< HEAD
 8004b9a:	f001 f89b 	bl	8005cd4 <xTaskGetSchedulerState>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d102      	bne.n	8004baa <xQueueReceive+0x6a>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d101      	bne.n	8004bae <xQueueReceive+0x6e>
 8004baa:	2301      	movs	r3, #1
 8004bac:	e000      	b.n	8004bb0 <xQueueReceive+0x70>
 8004bae:	2300      	movs	r3, #0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d109      	bne.n	8004bc8 <xQueueReceive+0x88>
 8004bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb8:	f383 8811 	msr	BASEPRI, r3
 8004bbc:	f3bf 8f6f 	isb	sy
 8004bc0:	f3bf 8f4f 	dsb	sy
 8004bc4:	61bb      	str	r3, [r7, #24]
 8004bc6:	e7fe      	b.n	8004bc6 <xQueueReceive+0x86>
=======
 8004ea6:	f001 f89b 	bl	8005fe0 <xTaskGetSchedulerState>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d102      	bne.n	8004eb6 <xQueueReceive+0x6a>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <xQueueReceive+0x6e>
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e000      	b.n	8004ebc <xQueueReceive+0x70>
 8004eba:	2300      	movs	r3, #0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d109      	bne.n	8004ed4 <xQueueReceive+0x88>
 8004ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec4:	f383 8811 	msr	BASEPRI, r3
 8004ec8:	f3bf 8f6f 	isb	sy
 8004ecc:	f3bf 8f4f 	dsb	sy
 8004ed0:	61bb      	str	r3, [r7, #24]
 8004ed2:	e7fe      	b.n	8004ed2 <xQueueReceive+0x86>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
<<<<<<< HEAD
 8004bc8:	f001 fdd0 	bl	800676c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd0:	627b      	str	r3, [r7, #36]	; 0x24
=======
 8004ed4:	f001 fdd2 	bl	8006a7c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004edc:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
<<<<<<< HEAD
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d01f      	beq.n	8004c18 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004bd8:	68b9      	ldr	r1, [r7, #8]
 8004bda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bdc:	f000 f8f6 	bl	8004dcc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be2:	1e5a      	subs	r2, r3, #1
 8004be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be6:	639a      	str	r2, [r3, #56]	; 0x38
=======
 8004ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d01f      	beq.n	8004f24 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004ee4:	68b9      	ldr	r1, [r7, #8]
 8004ee6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ee8:	f000 f8f6 	bl	80050d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eee:	1e5a      	subs	r2, r3, #1
 8004ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef2:	639a      	str	r2, [r3, #56]	; 0x38
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< HEAD
 8004be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00f      	beq.n	8004c10 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf2:	3310      	adds	r3, #16
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f000 feb7 	bl	8005968 <xTaskRemoveFromEventList>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d007      	beq.n	8004c10 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004c00:	4b3c      	ldr	r3, [pc, #240]	; (8004cf4 <xQueueReceive+0x1b4>)
 8004c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c06:	601a      	str	r2, [r3, #0]
 8004c08:	f3bf 8f4f 	dsb	sy
 8004c0c:	f3bf 8f6f 	isb	sy
=======
 8004ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00f      	beq.n	8004f1c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efe:	3310      	adds	r3, #16
 8004f00:	4618      	mov	r0, r3
 8004f02:	f000 feb7 	bl	8005c74 <xTaskRemoveFromEventList>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d007      	beq.n	8004f1c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f0c:	4b3c      	ldr	r3, [pc, #240]	; (8005000 <xQueueReceive+0x1b4>)
 8004f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f12:	601a      	str	r2, [r3, #0]
 8004f14:	f3bf 8f4f 	dsb	sy
 8004f18:	f3bf 8f6f 	isb	sy
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
<<<<<<< HEAD
 8004c10:	f001 fdda 	bl	80067c8 <vPortExitCritical>
				return pdPASS;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e069      	b.n	8004cec <xQueueReceive+0x1ac>
=======
 8004f1c:	f001 fddc 	bl	8006ad8 <vPortExitCritical>
				return pdPASS;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e069      	b.n	8004ff8 <xQueueReceive+0x1ac>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
<<<<<<< HEAD
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d103      	bne.n	8004c26 <xQueueReceive+0xe6>
=======
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d103      	bne.n	8004f32 <xQueueReceive+0xe6>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
<<<<<<< HEAD
 8004c1e:	f001 fdd3 	bl	80067c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004c22:	2300      	movs	r3, #0
 8004c24:	e062      	b.n	8004cec <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d106      	bne.n	8004c3a <xQueueReceive+0xfa>
=======
 8004f2a:	f001 fdd5 	bl	8006ad8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	e062      	b.n	8004ff8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d106      	bne.n	8004f46 <xQueueReceive+0xfa>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
<<<<<<< HEAD
 8004c2c:	f107 0310 	add.w	r3, r7, #16
 8004c30:	4618      	mov	r0, r3
 8004c32:	f000 fefb 	bl	8005a2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c36:	2301      	movs	r3, #1
 8004c38:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 8004f38:	f107 0310 	add.w	r3, r7, #16
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f000 fefb 	bl	8005d38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f42:	2301      	movs	r3, #1
 8004f44:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< HEAD
 8004c3a:	f001 fdc5 	bl	80067c8 <vPortExitCritical>
=======
 8004f46:	f001 fdc7 	bl	8006ad8 <vPortExitCritical>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
<<<<<<< HEAD
 8004c3e:	f000 fc77 	bl	8005530 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c42:	f001 fd93 	bl	800676c <vPortEnterCritical>
 8004c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c4c:	b25b      	sxtb	r3, r3
 8004c4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c52:	d103      	bne.n	8004c5c <xQueueReceive+0x11c>
 8004c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c62:	b25b      	sxtb	r3, r3
 8004c64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c68:	d103      	bne.n	8004c72 <xQueueReceive+0x132>
 8004c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c72:	f001 fda9 	bl	80067c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c76:	1d3a      	adds	r2, r7, #4
 8004c78:	f107 0310 	add.w	r3, r7, #16
 8004c7c:	4611      	mov	r1, r2
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 feea 	bl	8005a58 <xTaskCheckForTimeOut>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d123      	bne.n	8004cd2 <xQueueReceive+0x192>
=======
 8004f4a:	f000 fc77 	bl	800583c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f4e:	f001 fd95 	bl	8006a7c <vPortEnterCritical>
 8004f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f58:	b25b      	sxtb	r3, r3
 8004f5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f5e:	d103      	bne.n	8004f68 <xQueueReceive+0x11c>
 8004f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f6e:	b25b      	sxtb	r3, r3
 8004f70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f74:	d103      	bne.n	8004f7e <xQueueReceive+0x132>
 8004f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f7e:	f001 fdab 	bl	8006ad8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f82:	1d3a      	adds	r2, r7, #4
 8004f84:	f107 0310 	add.w	r3, r7, #16
 8004f88:	4611      	mov	r1, r2
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 feea 	bl	8005d64 <xTaskCheckForTimeOut>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d123      	bne.n	8004fde <xQueueReceive+0x192>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
<<<<<<< HEAD
 8004c8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c8c:	f000 f916 	bl	8004ebc <prvIsQueueEmpty>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d017      	beq.n	8004cc6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c98:	3324      	adds	r3, #36	; 0x24
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	4611      	mov	r1, r2
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f000 fe14 	bl	80058cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ca4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ca6:	f000 f8b7 	bl	8004e18 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004caa:	f000 fc4f 	bl	800554c <xTaskResumeAll>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d189      	bne.n	8004bc8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004cb4:	4b0f      	ldr	r3, [pc, #60]	; (8004cf4 <xQueueReceive+0x1b4>)
 8004cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cba:	601a      	str	r2, [r3, #0]
 8004cbc:	f3bf 8f4f 	dsb	sy
 8004cc0:	f3bf 8f6f 	isb	sy
 8004cc4:	e780      	b.n	8004bc8 <xQueueReceive+0x88>
=======
 8004f96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f98:	f000 f916 	bl	80051c8 <prvIsQueueEmpty>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d017      	beq.n	8004fd2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa4:	3324      	adds	r3, #36	; 0x24
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	4611      	mov	r1, r2
 8004faa:	4618      	mov	r0, r3
 8004fac:	f000 fe14 	bl	8005bd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004fb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fb2:	f000 f8b7 	bl	8005124 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004fb6:	f000 fc4f 	bl	8005858 <xTaskResumeAll>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d189      	bne.n	8004ed4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004fc0:	4b0f      	ldr	r3, [pc, #60]	; (8005000 <xQueueReceive+0x1b4>)
 8004fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fc6:	601a      	str	r2, [r3, #0]
 8004fc8:	f3bf 8f4f 	dsb	sy
 8004fcc:	f3bf 8f6f 	isb	sy
 8004fd0:	e780      	b.n	8004ed4 <xQueueReceive+0x88>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 8004cc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cc8:	f000 f8a6 	bl	8004e18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ccc:	f000 fc3e 	bl	800554c <xTaskResumeAll>
 8004cd0:	e77a      	b.n	8004bc8 <xQueueReceive+0x88>
=======
 8004fd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fd4:	f000 f8a6 	bl	8005124 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004fd8:	f000 fc3e 	bl	8005858 <xTaskResumeAll>
 8004fdc:	e77a      	b.n	8004ed4 <xQueueReceive+0x88>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 8004cd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cd4:	f000 f8a0 	bl	8004e18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004cd8:	f000 fc38 	bl	800554c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004cdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cde:	f000 f8ed 	bl	8004ebc <prvIsQueueEmpty>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f43f af6f 	beq.w	8004bc8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004cea:	2300      	movs	r3, #0
=======
 8004fde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fe0:	f000 f8a0 	bl	8005124 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004fe4:	f000 fc38 	bl	8005858 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004fe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fea:	f000 f8ed 	bl	80051c8 <prvIsQueueEmpty>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f43f af6f 	beq.w	8004ed4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004ff6:	2300      	movs	r3, #0
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
<<<<<<< HEAD
 8004cec:	4618      	mov	r0, r3
 8004cee:	3730      	adds	r7, #48	; 0x30
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	e000ed04 	.word	0xe000ed04

08004cf8 <prvCopyDataToQueue>:
=======
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3730      	adds	r7, #48	; 0x30
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	e000ed04 	.word	0xe000ed04

08005004 <prvCopyDataToQueue>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
<<<<<<< HEAD
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004d04:	2300      	movs	r3, #0
 8004d06:	617b      	str	r3, [r7, #20]
=======
 8005004:	b580      	push	{r7, lr}
 8005006:	b086      	sub	sp, #24
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005010:	2300      	movs	r3, #0
 8005012:	617b      	str	r3, [r7, #20]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
<<<<<<< HEAD
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10d      	bne.n	8004d32 <prvCopyDataToQueue+0x3a>
=======
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005018:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10d      	bne.n	800503e <prvCopyDataToQueue+0x3a>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
<<<<<<< HEAD
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d14d      	bne.n	8004dba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	4618      	mov	r0, r3
 8004d24:	f000 fff4 	bl	8005d10 <xTaskPriorityDisinherit>
 8004d28:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	609a      	str	r2, [r3, #8]
 8004d30:	e043      	b.n	8004dba <prvCopyDataToQueue+0xc2>
=======
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d14d      	bne.n	80050c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	4618      	mov	r0, r3
 8005030:	f000 fff4 	bl	800601c <xTaskPriorityDisinherit>
 8005034:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	609a      	str	r2, [r3, #8]
 800503c:	e043      	b.n	80050c6 <prvCopyDataToQueue+0xc2>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
<<<<<<< HEAD
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d119      	bne.n	8004d6c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6858      	ldr	r0, [r3, #4]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d40:	461a      	mov	r2, r3
 8004d42:	68b9      	ldr	r1, [r7, #8]
 8004d44:	f002 f944 	bl	8006fd0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	685a      	ldr	r2, [r3, #4]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d50:	441a      	add	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	685a      	ldr	r2, [r3, #4]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d32b      	bcc.n	8004dba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	605a      	str	r2, [r3, #4]
 8004d6a:	e026      	b.n	8004dba <prvCopyDataToQueue+0xc2>
=======
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d119      	bne.n	8005078 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6858      	ldr	r0, [r3, #4]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504c:	461a      	mov	r2, r3
 800504e:	68b9      	ldr	r1, [r7, #8]
 8005050:	f002 f946 	bl	80072e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505c:	441a      	add	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	685a      	ldr	r2, [r3, #4]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	429a      	cmp	r2, r3
 800506c:	d32b      	bcc.n	80050c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	605a      	str	r2, [r3, #4]
 8005076:	e026      	b.n	80050c6 <prvCopyDataToQueue+0xc2>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
<<<<<<< HEAD
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	68d8      	ldr	r0, [r3, #12]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d74:	461a      	mov	r2, r3
 8004d76:	68b9      	ldr	r1, [r7, #8]
 8004d78:	f002 f92a 	bl	8006fd0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	68da      	ldr	r2, [r3, #12]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d84:	425b      	negs	r3, r3
 8004d86:	441a      	add	r2, r3
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	68da      	ldr	r2, [r3, #12]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d207      	bcs.n	8004da8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	689a      	ldr	r2, [r3, #8]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da0:	425b      	negs	r3, r3
 8004da2:	441a      	add	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	60da      	str	r2, [r3, #12]
=======
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	68d8      	ldr	r0, [r3, #12]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005080:	461a      	mov	r2, r3
 8005082:	68b9      	ldr	r1, [r7, #8]
 8005084:	f002 f92c 	bl	80072e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	68da      	ldr	r2, [r3, #12]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005090:	425b      	negs	r3, r3
 8005092:	441a      	add	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	68da      	ldr	r2, [r3, #12]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d207      	bcs.n	80050b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	689a      	ldr	r2, [r3, #8]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ac:	425b      	negs	r3, r3
 80050ae:	441a      	add	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	60da      	str	r2, [r3, #12]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
<<<<<<< HEAD
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d105      	bne.n	8004dba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d002      	beq.n	8004dba <prvCopyDataToQueue+0xc2>
=======
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d105      	bne.n	80050c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d002      	beq.n	80050c6 <prvCopyDataToQueue+0xc2>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
<<<<<<< HEAD
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	3b01      	subs	r3, #1
 8004db8:	613b      	str	r3, [r7, #16]
=======
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	3b01      	subs	r3, #1
 80050c4:	613b      	str	r3, [r7, #16]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
<<<<<<< HEAD
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	1c5a      	adds	r2, r3, #1
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004dc2:	697b      	ldr	r3, [r7, #20]
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3718      	adds	r7, #24
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <prvCopyDataFromQueue>:
=======
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	1c5a      	adds	r2, r3, #1
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80050ce:	697b      	ldr	r3, [r7, #20]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3718      	adds	r7, #24
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <prvCopyDataFromQueue>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
<<<<<<< HEAD
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d018      	beq.n	8004e10 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68da      	ldr	r2, [r3, #12]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de6:	441a      	add	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	68da      	ldr	r2, [r3, #12]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d303      	bcc.n	8004e00 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	60da      	str	r2, [r3, #12]
=======
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d018      	beq.n	800511c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	68da      	ldr	r2, [r3, #12]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f2:	441a      	add	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68da      	ldr	r2, [r3, #12]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	429a      	cmp	r2, r3
 8005102:	d303      	bcc.n	800510c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	60da      	str	r2, [r3, #12]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
<<<<<<< HEAD
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68d9      	ldr	r1, [r3, #12]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e08:	461a      	mov	r2, r3
 8004e0a:	6838      	ldr	r0, [r7, #0]
 8004e0c:	f002 f8e0 	bl	8006fd0 <memcpy>
	}
}
 8004e10:	bf00      	nop
 8004e12:	3708      	adds	r7, #8
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <prvUnlockQueue>:
=======
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	68d9      	ldr	r1, [r3, #12]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005114:	461a      	mov	r2, r3
 8005116:	6838      	ldr	r0, [r7, #0]
 8005118:	f002 f8e2 	bl	80072e0 <memcpy>
	}
}
 800511c:	bf00      	nop
 800511e:	3708      	adds	r7, #8
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <prvUnlockQueue>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
<<<<<<< HEAD
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
=======
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
<<<<<<< HEAD
 8004e20:	f001 fca4 	bl	800676c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e2a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e2c:	e011      	b.n	8004e52 <prvUnlockQueue+0x3a>
=======
 800512c:	f001 fca6 	bl	8006a7c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005136:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005138:	e011      	b.n	800515e <prvUnlockQueue+0x3a>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< HEAD
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d012      	beq.n	8004e5c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	3324      	adds	r3, #36	; 0x24
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f000 fd94 	bl	8005968 <xTaskRemoveFromEventList>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <prvUnlockQueue+0x32>
=======
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513e:	2b00      	cmp	r3, #0
 8005140:	d012      	beq.n	8005168 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	3324      	adds	r3, #36	; 0x24
 8005146:	4618      	mov	r0, r3
 8005148:	f000 fd94 	bl	8005c74 <xTaskRemoveFromEventList>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d001      	beq.n	8005156 <prvUnlockQueue+0x32>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
<<<<<<< HEAD
 8004e46:	f000 fe67 	bl	8005b18 <vTaskMissedYield>
=======
 8005152:	f000 fe67 	bl	8005e24 <vTaskMissedYield>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
<<<<<<< HEAD
 8004e4a:	7bfb      	ldrb	r3, [r7, #15]
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	dce9      	bgt.n	8004e2e <prvUnlockQueue+0x16>
 8004e5a:	e000      	b.n	8004e5e <prvUnlockQueue+0x46>
					break;
 8004e5c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	22ff      	movs	r2, #255	; 0xff
 8004e62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004e66:	f001 fcaf 	bl	80067c8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004e6a:	f001 fc7f 	bl	800676c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e74:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e76:	e011      	b.n	8004e9c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d012      	beq.n	8004ea6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	3310      	adds	r3, #16
 8004e84:	4618      	mov	r0, r3
 8004e86:	f000 fd6f 	bl	8005968 <xTaskRemoveFromEventList>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d001      	beq.n	8004e94 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004e90:	f000 fe42 	bl	8005b18 <vTaskMissedYield>
=======
 8005156:	7bfb      	ldrb	r3, [r7, #15]
 8005158:	3b01      	subs	r3, #1
 800515a:	b2db      	uxtb	r3, r3
 800515c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800515e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005162:	2b00      	cmp	r3, #0
 8005164:	dce9      	bgt.n	800513a <prvUnlockQueue+0x16>
 8005166:	e000      	b.n	800516a <prvUnlockQueue+0x46>
					break;
 8005168:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	22ff      	movs	r2, #255	; 0xff
 800516e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005172:	f001 fcb1 	bl	8006ad8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005176:	f001 fc81 	bl	8006a7c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005180:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005182:	e011      	b.n	80051a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d012      	beq.n	80051b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	3310      	adds	r3, #16
 8005190:	4618      	mov	r0, r3
 8005192:	f000 fd6f 	bl	8005c74 <xTaskRemoveFromEventList>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d001      	beq.n	80051a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800519c:	f000 fe42 	bl	8005e24 <vTaskMissedYield>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
<<<<<<< HEAD
 8004e94:	7bbb      	ldrb	r3, [r7, #14]
 8004e96:	3b01      	subs	r3, #1
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	dce9      	bgt.n	8004e78 <prvUnlockQueue+0x60>
 8004ea4:	e000      	b.n	8004ea8 <prvUnlockQueue+0x90>
=======
 80051a0:	7bbb      	ldrb	r3, [r7, #14]
 80051a2:	3b01      	subs	r3, #1
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80051a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	dce9      	bgt.n	8005184 <prvUnlockQueue+0x60>
 80051b0:	e000      	b.n	80051b4 <prvUnlockQueue+0x90>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			}
			else
			{
				break;
<<<<<<< HEAD
 8004ea6:	bf00      	nop
=======
 80051b2:	bf00      	nop
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
<<<<<<< HEAD
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	22ff      	movs	r2, #255	; 0xff
 8004eac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004eb0:	f001 fc8a 	bl	80067c8 <vPortExitCritical>
}
 8004eb4:	bf00      	nop
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <prvIsQueueEmpty>:
=======
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	22ff      	movs	r2, #255	; 0xff
 80051b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80051bc:	f001 fc8c 	bl	8006ad8 <vPortExitCritical>
}
 80051c0:	bf00      	nop
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <prvIsQueueEmpty>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
<<<<<<< HEAD
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ec4:	f001 fc52 	bl	800676c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d102      	bne.n	8004ed6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	60fb      	str	r3, [r7, #12]
 8004ed4:	e001      	b.n	8004eda <prvIsQueueEmpty+0x1e>
=======
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80051d0:	f001 fc54 	bl	8006a7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d102      	bne.n	80051e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80051dc:	2301      	movs	r3, #1
 80051de:	60fb      	str	r3, [r7, #12]
 80051e0:	e001      	b.n	80051e6 <prvIsQueueEmpty+0x1e>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		}
		else
		{
			xReturn = pdFALSE;
<<<<<<< HEAD
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004eda:	f001 fc75 	bl	80067c8 <vPortExitCritical>

	return xReturn;
 8004ede:	68fb      	ldr	r3, [r7, #12]
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <prvIsQueueFull>:
=======
 80051e2:	2300      	movs	r3, #0
 80051e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80051e6:	f001 fc77 	bl	8006ad8 <vPortExitCritical>

	return xReturn;
 80051ea:	68fb      	ldr	r3, [r7, #12]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3710      	adds	r7, #16
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <prvIsQueueFull>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
<<<<<<< HEAD
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ef0:	f001 fc3c 	bl	800676c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d102      	bne.n	8004f06 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004f00:	2301      	movs	r3, #1
 8004f02:	60fb      	str	r3, [r7, #12]
 8004f04:	e001      	b.n	8004f0a <prvIsQueueFull+0x22>
=======
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80051fc:	f001 fc3e 	bl	8006a7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005208:	429a      	cmp	r2, r3
 800520a:	d102      	bne.n	8005212 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800520c:	2301      	movs	r3, #1
 800520e:	60fb      	str	r3, [r7, #12]
 8005210:	e001      	b.n	8005216 <prvIsQueueFull+0x22>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		}
		else
		{
			xReturn = pdFALSE;
<<<<<<< HEAD
 8004f06:	2300      	movs	r3, #0
 8004f08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f0a:	f001 fc5d 	bl	80067c8 <vPortExitCritical>

	return xReturn;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3710      	adds	r7, #16
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <vQueueAddToRegistry>:
=======
 8005212:	2300      	movs	r3, #0
 8005214:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005216:	f001 fc5f 	bl	8006ad8 <vPortExitCritical>

	return xReturn;
 800521a:	68fb      	ldr	r3, [r7, #12]
}
 800521c:	4618      	mov	r0, r3
 800521e:	3710      	adds	r7, #16
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <vQueueAddToRegistry>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
<<<<<<< HEAD
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
=======
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
<<<<<<< HEAD
 8004f22:	2300      	movs	r3, #0
 8004f24:	60fb      	str	r3, [r7, #12]
 8004f26:	e014      	b.n	8004f52 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004f28:	4a0e      	ldr	r2, [pc, #56]	; (8004f64 <vQueueAddToRegistry+0x4c>)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d10b      	bne.n	8004f4c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004f34:	490b      	ldr	r1, [pc, #44]	; (8004f64 <vQueueAddToRegistry+0x4c>)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004f3e:	4a09      	ldr	r2, [pc, #36]	; (8004f64 <vQueueAddToRegistry+0x4c>)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	00db      	lsls	r3, r3, #3
 8004f44:	4413      	add	r3, r2
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004f4a:	e005      	b.n	8004f58 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	3301      	adds	r3, #1
 8004f50:	60fb      	str	r3, [r7, #12]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2b07      	cmp	r3, #7
 8004f56:	d9e7      	bls.n	8004f28 <vQueueAddToRegistry+0x10>
=======
 800522e:	2300      	movs	r3, #0
 8005230:	60fb      	str	r3, [r7, #12]
 8005232:	e014      	b.n	800525e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005234:	4a0e      	ldr	r2, [pc, #56]	; (8005270 <vQueueAddToRegistry+0x4c>)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d10b      	bne.n	8005258 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005240:	490b      	ldr	r1, [pc, #44]	; (8005270 <vQueueAddToRegistry+0x4c>)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800524a:	4a09      	ldr	r2, [pc, #36]	; (8005270 <vQueueAddToRegistry+0x4c>)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	00db      	lsls	r3, r3, #3
 8005250:	4413      	add	r3, r2
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005256:	e005      	b.n	8005264 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	3301      	adds	r3, #1
 800525c:	60fb      	str	r3, [r7, #12]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2b07      	cmp	r3, #7
 8005262:	d9e7      	bls.n	8005234 <vQueueAddToRegistry+0x10>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
<<<<<<< HEAD
 8004f58:	bf00      	nop
 8004f5a:	3714      	adds	r7, #20
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr
 8004f64:	20004adc 	.word	0x20004adc

08004f68 <vQueueWaitForMessageRestricted>:
=======
 8005264:	bf00      	nop
 8005266:	3714      	adds	r7, #20
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr
 8005270:	20004adc 	.word	0x20004adc

08005274 <vQueueWaitForMessageRestricted>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
<<<<<<< HEAD
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	617b      	str	r3, [r7, #20]
=======
 8005274:	b580      	push	{r7, lr}
 8005276:	b086      	sub	sp, #24
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	617b      	str	r3, [r7, #20]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
<<<<<<< HEAD
 8004f78:	f001 fbf8 	bl	800676c <vPortEnterCritical>
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f82:	b25b      	sxtb	r3, r3
 8004f84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f88:	d103      	bne.n	8004f92 <vQueueWaitForMessageRestricted+0x2a>
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f98:	b25b      	sxtb	r3, r3
 8004f9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f9e:	d103      	bne.n	8004fa8 <vQueueWaitForMessageRestricted+0x40>
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fa8:	f001 fc0e 	bl	80067c8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d106      	bne.n	8004fc2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	3324      	adds	r3, #36	; 0x24
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	68b9      	ldr	r1, [r7, #8]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f000 fca9 	bl	8005914 <vTaskPlaceOnEventListRestricted>
=======
 8005284:	f001 fbfa 	bl	8006a7c <vPortEnterCritical>
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800528e:	b25b      	sxtb	r3, r3
 8005290:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005294:	d103      	bne.n	800529e <vQueueWaitForMessageRestricted+0x2a>
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052a4:	b25b      	sxtb	r3, r3
 80052a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052aa:	d103      	bne.n	80052b4 <vQueueWaitForMessageRestricted+0x40>
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052b4:	f001 fc10 	bl	8006ad8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d106      	bne.n	80052ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	3324      	adds	r3, #36	; 0x24
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	68b9      	ldr	r1, [r7, #8]
 80052c8:	4618      	mov	r0, r3
 80052ca:	f000 fca9 	bl	8005c20 <vTaskPlaceOnEventListRestricted>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 8004fc2:	6978      	ldr	r0, [r7, #20]
 8004fc4:	f7ff ff28 	bl	8004e18 <prvUnlockQueue>
	}
 8004fc8:	bf00      	nop
 8004fca:	3718      	adds	r7, #24
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <xTaskCreateStatic>:
=======
 80052ce:	6978      	ldr	r0, [r7, #20]
 80052d0:	f7ff ff28 	bl	8005124 <prvUnlockQueue>
	}
 80052d4:	bf00      	nop
 80052d6:	3718      	adds	r7, #24
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <xTaskCreateStatic>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
<<<<<<< HEAD
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b08e      	sub	sp, #56	; 0x38
 8004fd4:	af04      	add	r7, sp, #16
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
 8004fdc:	603b      	str	r3, [r7, #0]
=======
 80052dc:	b580      	push	{r7, lr}
 80052de:	b08e      	sub	sp, #56	; 0x38
 80052e0:	af04      	add	r7, sp, #16
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	607a      	str	r2, [r7, #4]
 80052e8:	603b      	str	r3, [r7, #0]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
<<<<<<< HEAD
 8004fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d109      	bne.n	8004ff8 <xTaskCreateStatic+0x28>
 8004fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe8:	f383 8811 	msr	BASEPRI, r3
 8004fec:	f3bf 8f6f 	isb	sy
 8004ff0:	f3bf 8f4f 	dsb	sy
 8004ff4:	623b      	str	r3, [r7, #32]
 8004ff6:	e7fe      	b.n	8004ff6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d109      	bne.n	8005012 <xTaskCreateStatic+0x42>
 8004ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005002:	f383 8811 	msr	BASEPRI, r3
 8005006:	f3bf 8f6f 	isb	sy
 800500a:	f3bf 8f4f 	dsb	sy
 800500e:	61fb      	str	r3, [r7, #28]
 8005010:	e7fe      	b.n	8005010 <xTaskCreateStatic+0x40>
=======
 80052ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d109      	bne.n	8005304 <xTaskCreateStatic+0x28>
 80052f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f4:	f383 8811 	msr	BASEPRI, r3
 80052f8:	f3bf 8f6f 	isb	sy
 80052fc:	f3bf 8f4f 	dsb	sy
 8005300:	623b      	str	r3, [r7, #32]
 8005302:	e7fe      	b.n	8005302 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005306:	2b00      	cmp	r3, #0
 8005308:	d109      	bne.n	800531e <xTaskCreateStatic+0x42>
 800530a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530e:	f383 8811 	msr	BASEPRI, r3
 8005312:	f3bf 8f6f 	isb	sy
 8005316:	f3bf 8f4f 	dsb	sy
 800531a:	61fb      	str	r3, [r7, #28]
 800531c:	e7fe      	b.n	800531c <xTaskCreateStatic+0x40>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
<<<<<<< HEAD
 8005012:	235c      	movs	r3, #92	; 0x5c
 8005014:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	2b5c      	cmp	r3, #92	; 0x5c
 800501a:	d009      	beq.n	8005030 <xTaskCreateStatic+0x60>
 800501c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005020:	f383 8811 	msr	BASEPRI, r3
 8005024:	f3bf 8f6f 	isb	sy
 8005028:	f3bf 8f4f 	dsb	sy
 800502c:	61bb      	str	r3, [r7, #24]
 800502e:	e7fe      	b.n	800502e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005030:	693b      	ldr	r3, [r7, #16]
=======
 800531e:	235c      	movs	r3, #92	; 0x5c
 8005320:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	2b5c      	cmp	r3, #92	; 0x5c
 8005326:	d009      	beq.n	800533c <xTaskCreateStatic+0x60>
 8005328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532c:	f383 8811 	msr	BASEPRI, r3
 8005330:	f3bf 8f6f 	isb	sy
 8005334:	f3bf 8f4f 	dsb	sy
 8005338:	61bb      	str	r3, [r7, #24]
 800533a:	e7fe      	b.n	800533a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800533c:	693b      	ldr	r3, [r7, #16]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
<<<<<<< HEAD
 8005032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005034:	2b00      	cmp	r3, #0
 8005036:	d01e      	beq.n	8005076 <xTaskCreateStatic+0xa6>
 8005038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800503a:	2b00      	cmp	r3, #0
 800503c:	d01b      	beq.n	8005076 <xTaskCreateStatic+0xa6>
=======
 800533e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005340:	2b00      	cmp	r3, #0
 8005342:	d01e      	beq.n	8005382 <xTaskCreateStatic+0xa6>
 8005344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005346:	2b00      	cmp	r3, #0
 8005348:	d01b      	beq.n	8005382 <xTaskCreateStatic+0xa6>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
<<<<<<< HEAD
 800503e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005040:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005044:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005046:	631a      	str	r2, [r3, #48]	; 0x30
=======
 800534a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800534c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800534e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005350:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005352:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
<<<<<<< HEAD
 8005048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504a:	2202      	movs	r2, #2
 800504c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
=======
 8005354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005356:	2202      	movs	r2, #2
 8005358:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
<<<<<<< HEAD
 8005050:	2300      	movs	r3, #0
 8005052:	9303      	str	r3, [sp, #12]
 8005054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005056:	9302      	str	r3, [sp, #8]
 8005058:	f107 0314 	add.w	r3, r7, #20
 800505c:	9301      	str	r3, [sp, #4]
 800505e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005060:	9300      	str	r3, [sp, #0]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	68b9      	ldr	r1, [r7, #8]
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f000 f850 	bl	800510e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800506e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005070:	f000 f8dc 	bl	800522c <prvAddNewTaskToReadyList>
 8005074:	e001      	b.n	800507a <xTaskCreateStatic+0xaa>
=======
 800535c:	2300      	movs	r3, #0
 800535e:	9303      	str	r3, [sp, #12]
 8005360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005362:	9302      	str	r3, [sp, #8]
 8005364:	f107 0314 	add.w	r3, r7, #20
 8005368:	9301      	str	r3, [sp, #4]
 800536a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536c:	9300      	str	r3, [sp, #0]
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	68b9      	ldr	r1, [r7, #8]
 8005374:	68f8      	ldr	r0, [r7, #12]
 8005376:	f000 f850 	bl	800541a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800537a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800537c:	f000 f8dc 	bl	8005538 <prvAddNewTaskToReadyList>
 8005380:	e001      	b.n	8005386 <xTaskCreateStatic+0xaa>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		}
		else
		{
			xReturn = NULL;
<<<<<<< HEAD
 8005076:	2300      	movs	r3, #0
 8005078:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800507a:	697b      	ldr	r3, [r7, #20]
	}
 800507c:	4618      	mov	r0, r3
 800507e:	3728      	adds	r7, #40	; 0x28
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <xTaskCreate>:
=======
 8005382:	2300      	movs	r3, #0
 8005384:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005386:	697b      	ldr	r3, [r7, #20]
	}
 8005388:	4618      	mov	r0, r3
 800538a:	3728      	adds	r7, #40	; 0x28
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <xTaskCreate>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
<<<<<<< HEAD
 8005084:	b580      	push	{r7, lr}
 8005086:	b08c      	sub	sp, #48	; 0x30
 8005088:	af04      	add	r7, sp, #16
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	603b      	str	r3, [r7, #0]
 8005090:	4613      	mov	r3, r2
 8005092:	80fb      	strh	r3, [r7, #6]
=======
 8005390:	b580      	push	{r7, lr}
 8005392:	b08c      	sub	sp, #48	; 0x30
 8005394:	af04      	add	r7, sp, #16
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	603b      	str	r3, [r7, #0]
 800539c:	4613      	mov	r3, r2
 800539e:	80fb      	strh	r3, [r7, #6]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
<<<<<<< HEAD
 8005094:	88fb      	ldrh	r3, [r7, #6]
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4618      	mov	r0, r3
 800509a:	f001 fc81 	bl	80069a0 <pvPortMalloc>
 800509e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00e      	beq.n	80050c4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80050a6:	205c      	movs	r0, #92	; 0x5c
 80050a8:	f001 fc7a 	bl	80069a0 <pvPortMalloc>
 80050ac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d003      	beq.n	80050bc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	631a      	str	r2, [r3, #48]	; 0x30
 80050ba:	e005      	b.n	80050c8 <xTaskCreate+0x44>
=======
 80053a0:	88fb      	ldrh	r3, [r7, #6]
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	4618      	mov	r0, r3
 80053a6:	f001 fc83 	bl	8006cb0 <pvPortMalloc>
 80053aa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00e      	beq.n	80053d0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80053b2:	205c      	movs	r0, #92	; 0x5c
 80053b4:	f001 fc7c 	bl	8006cb0 <pvPortMalloc>
 80053b8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d003      	beq.n	80053c8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	631a      	str	r2, [r3, #48]	; 0x30
 80053c6:	e005      	b.n	80053d4 <xTaskCreate+0x44>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
<<<<<<< HEAD
 80050bc:	6978      	ldr	r0, [r7, #20]
 80050be:	f001 fd31 	bl	8006b24 <vPortFree>
 80050c2:	e001      	b.n	80050c8 <xTaskCreate+0x44>
=======
 80053c8:	6978      	ldr	r0, [r7, #20]
 80053ca:	f001 fd33 	bl	8006e34 <vPortFree>
 80053ce:	e001      	b.n	80053d4 <xTaskCreate+0x44>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
				}
			}
			else
			{
				pxNewTCB = NULL;
<<<<<<< HEAD
 80050c4:	2300      	movs	r3, #0
 80050c6:	61fb      	str	r3, [r7, #28]
=======
 80053d0:	2300      	movs	r3, #0
 80053d2:	61fb      	str	r3, [r7, #28]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
<<<<<<< HEAD
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d017      	beq.n	80050fe <xTaskCreate+0x7a>
=======
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d017      	beq.n	800540a <xTaskCreate+0x7a>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
<<<<<<< HEAD
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
=======
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
<<<<<<< HEAD
 80050d6:	88fa      	ldrh	r2, [r7, #6]
 80050d8:	2300      	movs	r3, #0
 80050da:	9303      	str	r3, [sp, #12]
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	9302      	str	r3, [sp, #8]
 80050e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e2:	9301      	str	r3, [sp, #4]
 80050e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	68b9      	ldr	r1, [r7, #8]
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f000 f80e 	bl	800510e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050f2:	69f8      	ldr	r0, [r7, #28]
 80050f4:	f000 f89a 	bl	800522c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80050f8:	2301      	movs	r3, #1
 80050fa:	61bb      	str	r3, [r7, #24]
 80050fc:	e002      	b.n	8005104 <xTaskCreate+0x80>
=======
 80053e2:	88fa      	ldrh	r2, [r7, #6]
 80053e4:	2300      	movs	r3, #0
 80053e6:	9303      	str	r3, [sp, #12]
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	9302      	str	r3, [sp, #8]
 80053ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ee:	9301      	str	r3, [sp, #4]
 80053f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f2:	9300      	str	r3, [sp, #0]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	68b9      	ldr	r1, [r7, #8]
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f000 f80e 	bl	800541a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80053fe:	69f8      	ldr	r0, [r7, #28]
 8005400:	f000 f89a 	bl	8005538 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005404:	2301      	movs	r3, #1
 8005406:	61bb      	str	r3, [r7, #24]
 8005408:	e002      	b.n	8005410 <xTaskCreate+0x80>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
<<<<<<< HEAD
 80050fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005102:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005104:	69bb      	ldr	r3, [r7, #24]
	}
 8005106:	4618      	mov	r0, r3
 8005108:	3720      	adds	r7, #32
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <prvInitialiseNewTask>:
=======
 800540a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800540e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005410:	69bb      	ldr	r3, [r7, #24]
	}
 8005412:	4618      	mov	r0, r3
 8005414:	3720      	adds	r7, #32
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <prvInitialiseNewTask>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
<<<<<<< HEAD
 800510e:	b580      	push	{r7, lr}
 8005110:	b088      	sub	sp, #32
 8005112:	af00      	add	r7, sp, #0
 8005114:	60f8      	str	r0, [r7, #12]
 8005116:	60b9      	str	r1, [r7, #8]
 8005118:	607a      	str	r2, [r7, #4]
 800511a:	603b      	str	r3, [r7, #0]
=======
 800541a:	b580      	push	{r7, lr}
 800541c:	b088      	sub	sp, #32
 800541e:	af00      	add	r7, sp, #0
 8005420:	60f8      	str	r0, [r7, #12]
 8005422:	60b9      	str	r1, [r7, #8]
 8005424:	607a      	str	r2, [r7, #4]
 8005426:	603b      	str	r3, [r7, #0]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
<<<<<<< HEAD
 800511c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	461a      	mov	r2, r3
 8005126:	21a5      	movs	r1, #165	; 0xa5
 8005128:	f001 ff5d 	bl	8006fe6 <memset>
=======
 8005428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	461a      	mov	r2, r3
 8005432:	21a5      	movs	r1, #165	; 0xa5
 8005434:	f001 ff5f 	bl	80072f6 <memset>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
<<<<<<< HEAD
 800512c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005136:	3b01      	subs	r3, #1
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	4413      	add	r3, r2
 800513c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	f023 0307 	bic.w	r3, r3, #7
 8005144:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	f003 0307 	and.w	r3, r3, #7
 800514c:	2b00      	cmp	r3, #0
 800514e:	d009      	beq.n	8005164 <prvInitialiseNewTask+0x56>
 8005150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005154:	f383 8811 	msr	BASEPRI, r3
 8005158:	f3bf 8f6f 	isb	sy
 800515c:	f3bf 8f4f 	dsb	sy
 8005160:	617b      	str	r3, [r7, #20]
 8005162:	e7fe      	b.n	8005162 <prvInitialiseNewTask+0x54>
=======
 8005438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005442:	3b01      	subs	r3, #1
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	4413      	add	r3, r2
 8005448:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	f023 0307 	bic.w	r3, r3, #7
 8005450:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	f003 0307 	and.w	r3, r3, #7
 8005458:	2b00      	cmp	r3, #0
 800545a:	d009      	beq.n	8005470 <prvInitialiseNewTask+0x56>
 800545c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005460:	f383 8811 	msr	BASEPRI, r3
 8005464:	f3bf 8f6f 	isb	sy
 8005468:	f3bf 8f4f 	dsb	sy
 800546c:	617b      	str	r3, [r7, #20]
 800546e:	e7fe      	b.n	800546e <prvInitialiseNewTask+0x54>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
<<<<<<< HEAD
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d01f      	beq.n	80051aa <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800516a:	2300      	movs	r3, #0
 800516c:	61fb      	str	r3, [r7, #28]
 800516e:	e012      	b.n	8005196 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	4413      	add	r3, r2
 8005176:	7819      	ldrb	r1, [r3, #0]
 8005178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	4413      	add	r3, r2
 800517e:	3334      	adds	r3, #52	; 0x34
 8005180:	460a      	mov	r2, r1
 8005182:	701a      	strb	r2, [r3, #0]
=======
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d01f      	beq.n	80054b6 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005476:	2300      	movs	r3, #0
 8005478:	61fb      	str	r3, [r7, #28]
 800547a:	e012      	b.n	80054a2 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	4413      	add	r3, r2
 8005482:	7819      	ldrb	r1, [r3, #0]
 8005484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	4413      	add	r3, r2
 800548a:	3334      	adds	r3, #52	; 0x34
 800548c:	460a      	mov	r2, r1
 800548e:	701a      	strb	r2, [r3, #0]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
<<<<<<< HEAD
 8005184:	68ba      	ldr	r2, [r7, #8]
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	4413      	add	r3, r2
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d006      	beq.n	800519e <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	3301      	adds	r3, #1
 8005194:	61fb      	str	r3, [r7, #28]
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	2b0f      	cmp	r3, #15
 800519a:	d9e9      	bls.n	8005170 <prvInitialiseNewTask+0x62>
 800519c:	e000      	b.n	80051a0 <prvInitialiseNewTask+0x92>
			{
				break;
 800519e:	bf00      	nop
=======
 8005490:	68ba      	ldr	r2, [r7, #8]
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	4413      	add	r3, r2
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d006      	beq.n	80054aa <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	3301      	adds	r3, #1
 80054a0:	61fb      	str	r3, [r7, #28]
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	2b0f      	cmp	r3, #15
 80054a6:	d9e9      	bls.n	800547c <prvInitialiseNewTask+0x62>
 80054a8:	e000      	b.n	80054ac <prvInitialiseNewTask+0x92>
			{
				break;
 80054aa:	bf00      	nop
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
<<<<<<< HEAD
 80051a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051a8:	e003      	b.n	80051b2 <prvInitialiseNewTask+0xa4>
=======
 80054ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054b4:	e003      	b.n	80054be <prvInitialiseNewTask+0xa4>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
<<<<<<< HEAD
 80051aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
=======
 80054b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
<<<<<<< HEAD
 80051b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b4:	2b37      	cmp	r3, #55	; 0x37
 80051b6:	d901      	bls.n	80051bc <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80051b8:	2337      	movs	r3, #55	; 0x37
 80051ba:	62bb      	str	r3, [r7, #40]	; 0x28
=======
 80054be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c0:	2b37      	cmp	r3, #55	; 0x37
 80054c2:	d901      	bls.n	80054c8 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80054c4:	2337      	movs	r3, #55	; 0x37
 80054c6:	62bb      	str	r3, [r7, #40]	; 0x28
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
<<<<<<< HEAD
 80051bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80051c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051c6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80051c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ca:	2200      	movs	r2, #0
 80051cc:	651a      	str	r2, [r3, #80]	; 0x50
=======
 80054c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80054ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054d2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80054d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d6:	2200      	movs	r2, #0
 80054d8:	651a      	str	r2, [r3, #80]	; 0x50
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
<<<<<<< HEAD
 80051ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d0:	3304      	adds	r3, #4
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7ff f994 	bl	8004500 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80051d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051da:	3318      	adds	r3, #24
 80051dc:	4618      	mov	r0, r3
 80051de:	f7ff f98f 	bl	8004500 <vListInitialiseItem>
=======
 80054da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054dc:	3304      	adds	r3, #4
 80054de:	4618      	mov	r0, r3
 80054e0:	f7ff f994 	bl	800480c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80054e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e6:	3318      	adds	r3, #24
 80054e8:	4618      	mov	r0, r3
 80054ea:	f7ff f98f 	bl	800480c <vListInitialiseItem>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
<<<<<<< HEAD
 80051e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80051ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80051f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051f6:	625a      	str	r2, [r3, #36]	; 0x24
=======
 80054ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80054fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80054fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005502:	625a      	str	r2, [r3, #36]	; 0x24
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
<<<<<<< HEAD
 80051f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fa:	2200      	movs	r2, #0
 80051fc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80051fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005200:	2200      	movs	r2, #0
 8005202:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
=======
 8005504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005506:	2200      	movs	r2, #0
 8005508:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800550a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550c:	2200      	movs	r2, #0
 800550e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
<<<<<<< HEAD
 8005206:	683a      	ldr	r2, [r7, #0]
 8005208:	68f9      	ldr	r1, [r7, #12]
 800520a:	69b8      	ldr	r0, [r7, #24]
 800520c:	f001 f986 	bl	800651c <pxPortInitialiseStack>
 8005210:	4602      	mov	r2, r0
 8005212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005214:	601a      	str	r2, [r3, #0]
=======
 8005512:	683a      	ldr	r2, [r7, #0]
 8005514:	68f9      	ldr	r1, [r7, #12]
 8005516:	69b8      	ldr	r0, [r7, #24]
 8005518:	f001 f986 	bl	8006828 <pxPortInitialiseStack>
 800551c:	4602      	mov	r2, r0
 800551e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005520:	601a      	str	r2, [r3, #0]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
<<<<<<< HEAD
 8005216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005218:	2b00      	cmp	r3, #0
 800521a:	d002      	beq.n	8005222 <prvInitialiseNewTask+0x114>
=======
 8005522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005524:	2b00      	cmp	r3, #0
 8005526:	d002      	beq.n	800552e <prvInitialiseNewTask+0x114>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
<<<<<<< HEAD
 800521c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800521e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005220:	601a      	str	r2, [r3, #0]
=======
 8005528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800552a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800552c:	601a      	str	r2, [r3, #0]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< HEAD
 8005222:	bf00      	nop
 8005224:	3720      	adds	r7, #32
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
	...

0800522c <prvAddNewTaskToReadyList>:
=======
 800552e:	bf00      	nop
 8005530:	3720      	adds	r7, #32
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
	...

08005538 <prvAddNewTaskToReadyList>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
<<<<<<< HEAD
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005234:	f001 fa9a 	bl	800676c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005238:	4b2d      	ldr	r3, [pc, #180]	; (80052f0 <prvAddNewTaskToReadyList+0xc4>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	3301      	adds	r3, #1
 800523e:	4a2c      	ldr	r2, [pc, #176]	; (80052f0 <prvAddNewTaskToReadyList+0xc4>)
 8005240:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005242:	4b2c      	ldr	r3, [pc, #176]	; (80052f4 <prvAddNewTaskToReadyList+0xc8>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d109      	bne.n	800525e <prvAddNewTaskToReadyList+0x32>
=======
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005540:	f001 fa9c 	bl	8006a7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005544:	4b2d      	ldr	r3, [pc, #180]	; (80055fc <prvAddNewTaskToReadyList+0xc4>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	3301      	adds	r3, #1
 800554a:	4a2c      	ldr	r2, [pc, #176]	; (80055fc <prvAddNewTaskToReadyList+0xc4>)
 800554c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800554e:	4b2c      	ldr	r3, [pc, #176]	; (8005600 <prvAddNewTaskToReadyList+0xc8>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d109      	bne.n	800556a <prvAddNewTaskToReadyList+0x32>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
<<<<<<< HEAD
 800524a:	4a2a      	ldr	r2, [pc, #168]	; (80052f4 <prvAddNewTaskToReadyList+0xc8>)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005250:	4b27      	ldr	r3, [pc, #156]	; (80052f0 <prvAddNewTaskToReadyList+0xc4>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d110      	bne.n	800527a <prvAddNewTaskToReadyList+0x4e>
=======
 8005556:	4a2a      	ldr	r2, [pc, #168]	; (8005600 <prvAddNewTaskToReadyList+0xc8>)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800555c:	4b27      	ldr	r3, [pc, #156]	; (80055fc <prvAddNewTaskToReadyList+0xc4>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d110      	bne.n	8005586 <prvAddNewTaskToReadyList+0x4e>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
<<<<<<< HEAD
 8005258:	f000 fc82 	bl	8005b60 <prvInitialiseTaskLists>
 800525c:	e00d      	b.n	800527a <prvAddNewTaskToReadyList+0x4e>
=======
 8005564:	f000 fc82 	bl	8005e6c <prvInitialiseTaskLists>
 8005568:	e00d      	b.n	8005586 <prvAddNewTaskToReadyList+0x4e>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
<<<<<<< HEAD
 800525e:	4b26      	ldr	r3, [pc, #152]	; (80052f8 <prvAddNewTaskToReadyList+0xcc>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d109      	bne.n	800527a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005266:	4b23      	ldr	r3, [pc, #140]	; (80052f4 <prvAddNewTaskToReadyList+0xc8>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005270:	429a      	cmp	r2, r3
 8005272:	d802      	bhi.n	800527a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005274:	4a1f      	ldr	r2, [pc, #124]	; (80052f4 <prvAddNewTaskToReadyList+0xc8>)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6013      	str	r3, [r2, #0]
=======
 800556a:	4b26      	ldr	r3, [pc, #152]	; (8005604 <prvAddNewTaskToReadyList+0xcc>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d109      	bne.n	8005586 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005572:	4b23      	ldr	r3, [pc, #140]	; (8005600 <prvAddNewTaskToReadyList+0xc8>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557c:	429a      	cmp	r2, r3
 800557e:	d802      	bhi.n	8005586 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005580:	4a1f      	ldr	r2, [pc, #124]	; (8005600 <prvAddNewTaskToReadyList+0xc8>)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6013      	str	r3, [r2, #0]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
<<<<<<< HEAD
 800527a:	4b20      	ldr	r3, [pc, #128]	; (80052fc <prvAddNewTaskToReadyList+0xd0>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	3301      	adds	r3, #1
 8005280:	4a1e      	ldr	r2, [pc, #120]	; (80052fc <prvAddNewTaskToReadyList+0xd0>)
 8005282:	6013      	str	r3, [r2, #0]
=======
 8005586:	4b20      	ldr	r3, [pc, #128]	; (8005608 <prvAddNewTaskToReadyList+0xd0>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	3301      	adds	r3, #1
 800558c:	4a1e      	ldr	r2, [pc, #120]	; (8005608 <prvAddNewTaskToReadyList+0xd0>)
 800558e:	6013      	str	r3, [r2, #0]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
<<<<<<< HEAD
 8005284:	4b1d      	ldr	r3, [pc, #116]	; (80052fc <prvAddNewTaskToReadyList+0xd0>)
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8005590:	4b1d      	ldr	r3, [pc, #116]	; (8005608 <prvAddNewTaskToReadyList+0xd0>)
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
<<<<<<< HEAD
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005290:	4b1b      	ldr	r3, [pc, #108]	; (8005300 <prvAddNewTaskToReadyList+0xd4>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	429a      	cmp	r2, r3
 8005296:	d903      	bls.n	80052a0 <prvAddNewTaskToReadyList+0x74>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529c:	4a18      	ldr	r2, [pc, #96]	; (8005300 <prvAddNewTaskToReadyList+0xd4>)
 800529e:	6013      	str	r3, [r2, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052a4:	4613      	mov	r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	4413      	add	r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	4a15      	ldr	r2, [pc, #84]	; (8005304 <prvAddNewTaskToReadyList+0xd8>)
 80052ae:	441a      	add	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	3304      	adds	r3, #4
 80052b4:	4619      	mov	r1, r3
 80052b6:	4610      	mov	r0, r2
 80052b8:	f7ff f92f 	bl	800451a <vListInsertEnd>
=======
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800559c:	4b1b      	ldr	r3, [pc, #108]	; (800560c <prvAddNewTaskToReadyList+0xd4>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d903      	bls.n	80055ac <prvAddNewTaskToReadyList+0x74>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a8:	4a18      	ldr	r2, [pc, #96]	; (800560c <prvAddNewTaskToReadyList+0xd4>)
 80055aa:	6013      	str	r3, [r2, #0]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055b0:	4613      	mov	r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	4413      	add	r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4a15      	ldr	r2, [pc, #84]	; (8005610 <prvAddNewTaskToReadyList+0xd8>)
 80055ba:	441a      	add	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	3304      	adds	r3, #4
 80055c0:	4619      	mov	r1, r3
 80055c2:	4610      	mov	r0, r2
 80055c4:	f7ff f92f 	bl	8004826 <vListInsertEnd>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 80052bc:	f001 fa84 	bl	80067c8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80052c0:	4b0d      	ldr	r3, [pc, #52]	; (80052f8 <prvAddNewTaskToReadyList+0xcc>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00e      	beq.n	80052e6 <prvAddNewTaskToReadyList+0xba>
=======
 80055c8:	f001 fa86 	bl	8006ad8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80055cc:	4b0d      	ldr	r3, [pc, #52]	; (8005604 <prvAddNewTaskToReadyList+0xcc>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00e      	beq.n	80055f2 <prvAddNewTaskToReadyList+0xba>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
<<<<<<< HEAD
 80052c8:	4b0a      	ldr	r3, [pc, #40]	; (80052f4 <prvAddNewTaskToReadyList+0xc8>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d207      	bcs.n	80052e6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80052d6:	4b0c      	ldr	r3, [pc, #48]	; (8005308 <prvAddNewTaskToReadyList+0xdc>)
 80052d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052dc:	601a      	str	r2, [r3, #0]
 80052de:	f3bf 8f4f 	dsb	sy
 80052e2:	f3bf 8f6f 	isb	sy
=======
 80055d4:	4b0a      	ldr	r3, [pc, #40]	; (8005600 <prvAddNewTaskToReadyList+0xc8>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055de:	429a      	cmp	r2, r3
 80055e0:	d207      	bcs.n	80055f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80055e2:	4b0c      	ldr	r3, [pc, #48]	; (8005614 <prvAddNewTaskToReadyList+0xdc>)
 80055e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055e8:	601a      	str	r2, [r3, #0]
 80055ea:	f3bf 8f4f 	dsb	sy
 80055ee:	f3bf 8f6f 	isb	sy
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< HEAD
 80052e6:	bf00      	nop
 80052e8:	3708      	adds	r7, #8
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	20000d1c 	.word	0x20000d1c
 80052f4:	20000848 	.word	0x20000848
 80052f8:	20000d28 	.word	0x20000d28
 80052fc:	20000d38 	.word	0x20000d38
 8005300:	20000d24 	.word	0x20000d24
 8005304:	2000084c 	.word	0x2000084c
 8005308:	e000ed04 	.word	0xe000ed04

0800530c <vTaskDelayUntil>:
=======
 80055f2:	bf00      	nop
 80055f4:	3708      	adds	r7, #8
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	20000d18 	.word	0x20000d18
 8005600:	20000844 	.word	0x20000844
 8005604:	20000d24 	.word	0x20000d24
 8005608:	20000d34 	.word	0x20000d34
 800560c:	20000d20 	.word	0x20000d20
 8005610:	20000848 	.word	0x20000848
 8005614:	e000ed04 	.word	0xe000ed04

08005618 <vTaskDelayUntil>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
<<<<<<< HEAD
 800530c:	b580      	push	{r7, lr}
 800530e:	b08a      	sub	sp, #40	; 0x28
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8005316:	2300      	movs	r3, #0
 8005318:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d109      	bne.n	8005334 <vTaskDelayUntil+0x28>
 8005320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005324:	f383 8811 	msr	BASEPRI, r3
 8005328:	f3bf 8f6f 	isb	sy
 800532c:	f3bf 8f4f 	dsb	sy
 8005330:	617b      	str	r3, [r7, #20]
 8005332:	e7fe      	b.n	8005332 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d109      	bne.n	800534e <vTaskDelayUntil+0x42>
 800533a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800533e:	f383 8811 	msr	BASEPRI, r3
 8005342:	f3bf 8f6f 	isb	sy
 8005346:	f3bf 8f4f 	dsb	sy
 800534a:	613b      	str	r3, [r7, #16]
 800534c:	e7fe      	b.n	800534c <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 800534e:	4b29      	ldr	r3, [pc, #164]	; (80053f4 <vTaskDelayUntil+0xe8>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d009      	beq.n	800536a <vTaskDelayUntil+0x5e>
 8005356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535a:	f383 8811 	msr	BASEPRI, r3
 800535e:	f3bf 8f6f 	isb	sy
 8005362:	f3bf 8f4f 	dsb	sy
 8005366:	60fb      	str	r3, [r7, #12]
 8005368:	e7fe      	b.n	8005368 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 800536a:	f000 f8e1 	bl	8005530 <vTaskSuspendAll>
=======
 8005618:	b580      	push	{r7, lr}
 800561a:	b08a      	sub	sp, #40	; 0x28
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8005622:	2300      	movs	r3, #0
 8005624:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d109      	bne.n	8005640 <vTaskDelayUntil+0x28>
 800562c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005630:	f383 8811 	msr	BASEPRI, r3
 8005634:	f3bf 8f6f 	isb	sy
 8005638:	f3bf 8f4f 	dsb	sy
 800563c:	617b      	str	r3, [r7, #20]
 800563e:	e7fe      	b.n	800563e <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d109      	bne.n	800565a <vTaskDelayUntil+0x42>
 8005646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564a:	f383 8811 	msr	BASEPRI, r3
 800564e:	f3bf 8f6f 	isb	sy
 8005652:	f3bf 8f4f 	dsb	sy
 8005656:	613b      	str	r3, [r7, #16]
 8005658:	e7fe      	b.n	8005658 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 800565a:	4b29      	ldr	r3, [pc, #164]	; (8005700 <vTaskDelayUntil+0xe8>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d009      	beq.n	8005676 <vTaskDelayUntil+0x5e>
 8005662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005666:	f383 8811 	msr	BASEPRI, r3
 800566a:	f3bf 8f6f 	isb	sy
 800566e:	f3bf 8f4f 	dsb	sy
 8005672:	60fb      	str	r3, [r7, #12]
 8005674:	e7fe      	b.n	8005674 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8005676:	f000 f8e1 	bl	800583c <vTaskSuspendAll>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
<<<<<<< HEAD
 800536e:	4b22      	ldr	r3, [pc, #136]	; (80053f8 <vTaskDelayUntil+0xec>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	683a      	ldr	r2, [r7, #0]
 800537a:	4413      	add	r3, r2
 800537c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	6a3a      	ldr	r2, [r7, #32]
 8005384:	429a      	cmp	r2, r3
 8005386:	d20b      	bcs.n	80053a0 <vTaskDelayUntil+0x94>
=======
 800567a:	4b22      	ldr	r3, [pc, #136]	; (8005704 <vTaskDelayUntil+0xec>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	683a      	ldr	r2, [r7, #0]
 8005686:	4413      	add	r3, r2
 8005688:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	6a3a      	ldr	r2, [r7, #32]
 8005690:	429a      	cmp	r2, r3
 8005692:	d20b      	bcs.n	80056ac <vTaskDelayUntil+0x94>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
<<<<<<< HEAD
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	69fa      	ldr	r2, [r7, #28]
 800538e:	429a      	cmp	r2, r3
 8005390:	d211      	bcs.n	80053b6 <vTaskDelayUntil+0xaa>
 8005392:	69fa      	ldr	r2, [r7, #28]
 8005394:	6a3b      	ldr	r3, [r7, #32]
 8005396:	429a      	cmp	r2, r3
 8005398:	d90d      	bls.n	80053b6 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800539a:	2301      	movs	r3, #1
 800539c:	627b      	str	r3, [r7, #36]	; 0x24
 800539e:	e00a      	b.n	80053b6 <vTaskDelayUntil+0xaa>
=======
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	69fa      	ldr	r2, [r7, #28]
 800569a:	429a      	cmp	r2, r3
 800569c:	d211      	bcs.n	80056c2 <vTaskDelayUntil+0xaa>
 800569e:	69fa      	ldr	r2, [r7, #28]
 80056a0:	6a3b      	ldr	r3, [r7, #32]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d90d      	bls.n	80056c2 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 80056a6:	2301      	movs	r3, #1
 80056a8:	627b      	str	r3, [r7, #36]	; 0x24
 80056aa:	e00a      	b.n	80056c2 <vTaskDelayUntil+0xaa>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
<<<<<<< HEAD
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	69fa      	ldr	r2, [r7, #28]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d303      	bcc.n	80053b2 <vTaskDelayUntil+0xa6>
 80053aa:	69fa      	ldr	r2, [r7, #28]
 80053ac:	6a3b      	ldr	r3, [r7, #32]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d901      	bls.n	80053b6 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 80053b2:	2301      	movs	r3, #1
 80053b4:	627b      	str	r3, [r7, #36]	; 0x24
=======
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	69fa      	ldr	r2, [r7, #28]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d303      	bcc.n	80056be <vTaskDelayUntil+0xa6>
 80056b6:	69fa      	ldr	r2, [r7, #28]
 80056b8:	6a3b      	ldr	r3, [r7, #32]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d901      	bls.n	80056c2 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 80056be:	2301      	movs	r3, #1
 80056c0:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
<<<<<<< HEAD
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	69fa      	ldr	r2, [r7, #28]
 80053ba:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80053bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d006      	beq.n	80053d0 <vTaskDelayUntil+0xc4>
=======
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	69fa      	ldr	r2, [r7, #28]
 80056c6:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80056c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d006      	beq.n	80056dc <vTaskDelayUntil+0xc4>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
<<<<<<< HEAD
 80053c2:	69fa      	ldr	r2, [r7, #28]
 80053c4:	6a3b      	ldr	r3, [r7, #32]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	2100      	movs	r1, #0
 80053ca:	4618      	mov	r0, r3
 80053cc:	f000 fd0c 	bl	8005de8 <prvAddCurrentTaskToDelayedList>
=======
 80056ce:	69fa      	ldr	r2, [r7, #28]
 80056d0:	6a3b      	ldr	r3, [r7, #32]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	2100      	movs	r1, #0
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 fd0c 	bl	80060f4 <prvAddCurrentTaskToDelayedList>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
<<<<<<< HEAD
 80053d0:	f000 f8bc 	bl	800554c <xTaskResumeAll>
 80053d4:	61b8      	str	r0, [r7, #24]
=======
 80056dc:	f000 f8bc 	bl	8005858 <xTaskResumeAll>
 80056e0:	61b8      	str	r0, [r7, #24]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
<<<<<<< HEAD
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d107      	bne.n	80053ec <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 80053dc:	4b07      	ldr	r3, [pc, #28]	; (80053fc <vTaskDelayUntil+0xf0>)
 80053de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053e2:	601a      	str	r2, [r3, #0]
 80053e4:	f3bf 8f4f 	dsb	sy
 80053e8:	f3bf 8f6f 	isb	sy
=======
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d107      	bne.n	80056f8 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 80056e8:	4b07      	ldr	r3, [pc, #28]	; (8005708 <vTaskDelayUntil+0xf0>)
 80056ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ee:	601a      	str	r2, [r3, #0]
 80056f0:	f3bf 8f4f 	dsb	sy
 80056f4:	f3bf 8f6f 	isb	sy
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
<<<<<<< HEAD
 80053ec:	bf00      	nop
 80053ee:	3728      	adds	r7, #40	; 0x28
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	20000d44 	.word	0x20000d44
 80053f8:	20000d20 	.word	0x20000d20
 80053fc:	e000ed04 	.word	0xe000ed04

08005400 <vTaskDelay>:
=======
 80056f8:	bf00      	nop
 80056fa:	3728      	adds	r7, #40	; 0x28
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	20000d40 	.word	0x20000d40
 8005704:	20000d1c 	.word	0x20000d1c
 8005708:	e000ed04 	.word	0xe000ed04

0800570c <vTaskDelay>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
<<<<<<< HEAD
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005408:	2300      	movs	r3, #0
 800540a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d016      	beq.n	8005440 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005412:	4b13      	ldr	r3, [pc, #76]	; (8005460 <vTaskDelay+0x60>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d009      	beq.n	800542e <vTaskDelay+0x2e>
 800541a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800541e:	f383 8811 	msr	BASEPRI, r3
 8005422:	f3bf 8f6f 	isb	sy
 8005426:	f3bf 8f4f 	dsb	sy
 800542a:	60bb      	str	r3, [r7, #8]
 800542c:	e7fe      	b.n	800542c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800542e:	f000 f87f 	bl	8005530 <vTaskSuspendAll>
=======
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005714:	2300      	movs	r3, #0
 8005716:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d016      	beq.n	800574c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800571e:	4b13      	ldr	r3, [pc, #76]	; (800576c <vTaskDelay+0x60>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d009      	beq.n	800573a <vTaskDelay+0x2e>
 8005726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572a:	f383 8811 	msr	BASEPRI, r3
 800572e:	f3bf 8f6f 	isb	sy
 8005732:	f3bf 8f4f 	dsb	sy
 8005736:	60bb      	str	r3, [r7, #8]
 8005738:	e7fe      	b.n	8005738 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800573a:	f000 f87f 	bl	800583c <vTaskSuspendAll>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
<<<<<<< HEAD
 8005432:	2100      	movs	r1, #0
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 fcd7 	bl	8005de8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800543a:	f000 f887 	bl	800554c <xTaskResumeAll>
 800543e:	60f8      	str	r0, [r7, #12]
=======
 800573e:	2100      	movs	r1, #0
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 fcd7 	bl	80060f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005746:	f000 f887 	bl	8005858 <xTaskResumeAll>
 800574a:	60f8      	str	r0, [r7, #12]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
<<<<<<< HEAD
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d107      	bne.n	8005456 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005446:	4b07      	ldr	r3, [pc, #28]	; (8005464 <vTaskDelay+0x64>)
 8005448:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800544c:	601a      	str	r2, [r3, #0]
 800544e:	f3bf 8f4f 	dsb	sy
 8005452:	f3bf 8f6f 	isb	sy
=======
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d107      	bne.n	8005762 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005752:	4b07      	ldr	r3, [pc, #28]	; (8005770 <vTaskDelay+0x64>)
 8005754:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005758:	601a      	str	r2, [r3, #0]
 800575a:	f3bf 8f4f 	dsb	sy
 800575e:	f3bf 8f6f 	isb	sy
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
<<<<<<< HEAD
 8005456:	bf00      	nop
 8005458:	3710      	adds	r7, #16
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	20000d44 	.word	0x20000d44
 8005464:	e000ed04 	.word	0xe000ed04

08005468 <vTaskStartScheduler>:
=======
 8005762:	bf00      	nop
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	20000d40 	.word	0x20000d40
 8005770:	e000ed04 	.word	0xe000ed04

08005774 <vTaskStartScheduler>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
<<<<<<< HEAD
 8005468:	b580      	push	{r7, lr}
 800546a:	b08a      	sub	sp, #40	; 0x28
 800546c:	af04      	add	r7, sp, #16
=======
 8005774:	b580      	push	{r7, lr}
 8005776:	b08a      	sub	sp, #40	; 0x28
 8005778:	af04      	add	r7, sp, #16
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
<<<<<<< HEAD
 800546e:	2300      	movs	r3, #0
 8005470:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005472:	2300      	movs	r3, #0
 8005474:	607b      	str	r3, [r7, #4]
=======
 800577a:	2300      	movs	r3, #0
 800577c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800577e:	2300      	movs	r3, #0
 8005780:	607b      	str	r3, [r7, #4]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
<<<<<<< HEAD
 8005476:	463a      	mov	r2, r7
 8005478:	1d39      	adds	r1, r7, #4
 800547a:	f107 0308 	add.w	r3, r7, #8
 800547e:	4618      	mov	r0, r3
 8005480:	f7fe ffea 	bl	8004458 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005484:	6839      	ldr	r1, [r7, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	9202      	str	r2, [sp, #8]
 800548c:	9301      	str	r3, [sp, #4]
 800548e:	2300      	movs	r3, #0
 8005490:	9300      	str	r3, [sp, #0]
 8005492:	2300      	movs	r3, #0
 8005494:	460a      	mov	r2, r1
 8005496:	4920      	ldr	r1, [pc, #128]	; (8005518 <vTaskStartScheduler+0xb0>)
 8005498:	4820      	ldr	r0, [pc, #128]	; (800551c <vTaskStartScheduler+0xb4>)
 800549a:	f7ff fd99 	bl	8004fd0 <xTaskCreateStatic>
 800549e:	4602      	mov	r2, r0
 80054a0:	4b1f      	ldr	r3, [pc, #124]	; (8005520 <vTaskStartScheduler+0xb8>)
 80054a2:	601a      	str	r2, [r3, #0]
=======
 8005782:	463a      	mov	r2, r7
 8005784:	1d39      	adds	r1, r7, #4
 8005786:	f107 0308 	add.w	r3, r7, #8
 800578a:	4618      	mov	r0, r3
 800578c:	f7fe ffea 	bl	8004764 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005790:	6839      	ldr	r1, [r7, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68ba      	ldr	r2, [r7, #8]
 8005796:	9202      	str	r2, [sp, #8]
 8005798:	9301      	str	r3, [sp, #4]
 800579a:	2300      	movs	r3, #0
 800579c:	9300      	str	r3, [sp, #0]
 800579e:	2300      	movs	r3, #0
 80057a0:	460a      	mov	r2, r1
 80057a2:	4920      	ldr	r1, [pc, #128]	; (8005824 <vTaskStartScheduler+0xb0>)
 80057a4:	4820      	ldr	r0, [pc, #128]	; (8005828 <vTaskStartScheduler+0xb4>)
 80057a6:	f7ff fd99 	bl	80052dc <xTaskCreateStatic>
 80057aa:	4602      	mov	r2, r0
 80057ac:	4b1f      	ldr	r3, [pc, #124]	; (800582c <vTaskStartScheduler+0xb8>)
 80057ae:	601a      	str	r2, [r3, #0]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
<<<<<<< HEAD
 80054a4:	4b1e      	ldr	r3, [pc, #120]	; (8005520 <vTaskStartScheduler+0xb8>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d002      	beq.n	80054b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80054ac:	2301      	movs	r3, #1
 80054ae:	617b      	str	r3, [r7, #20]
 80054b0:	e001      	b.n	80054b6 <vTaskStartScheduler+0x4e>
=======
 80057b0:	4b1e      	ldr	r3, [pc, #120]	; (800582c <vTaskStartScheduler+0xb8>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d002      	beq.n	80057be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80057b8:	2301      	movs	r3, #1
 80057ba:	617b      	str	r3, [r7, #20]
 80057bc:	e001      	b.n	80057c2 <vTaskStartScheduler+0x4e>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		}
		else
		{
			xReturn = pdFAIL;
<<<<<<< HEAD
 80054b2:	2300      	movs	r3, #0
 80054b4:	617b      	str	r3, [r7, #20]
=======
 80057be:	2300      	movs	r3, #0
 80057c0:	617b      	str	r3, [r7, #20]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
<<<<<<< HEAD
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d102      	bne.n	80054c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80054bc:	f000 fce8 	bl	8005e90 <xTimerCreateTimerTask>
 80054c0:	6178      	str	r0, [r7, #20]
=======
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d102      	bne.n	80057ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80057c8:	f000 fce8 	bl	800619c <xTimerCreateTimerTask>
 80057cc:	6178      	str	r0, [r7, #20]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
<<<<<<< HEAD
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d115      	bne.n	80054f4 <vTaskStartScheduler+0x8c>
 80054c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054cc:	f383 8811 	msr	BASEPRI, r3
 80054d0:	f3bf 8f6f 	isb	sy
 80054d4:	f3bf 8f4f 	dsb	sy
 80054d8:	613b      	str	r3, [r7, #16]
=======
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d115      	bne.n	8005800 <vTaskStartScheduler+0x8c>
 80057d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d8:	f383 8811 	msr	BASEPRI, r3
 80057dc:	f3bf 8f6f 	isb	sy
 80057e0:	f3bf 8f4f 	dsb	sy
 80057e4:	613b      	str	r3, [r7, #16]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
<<<<<<< HEAD
 80054da:	4b12      	ldr	r3, [pc, #72]	; (8005524 <vTaskStartScheduler+0xbc>)
 80054dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80054e2:	4b11      	ldr	r3, [pc, #68]	; (8005528 <vTaskStartScheduler+0xc0>)
 80054e4:	2201      	movs	r2, #1
 80054e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80054e8:	4b10      	ldr	r3, [pc, #64]	; (800552c <vTaskStartScheduler+0xc4>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	601a      	str	r2, [r3, #0]
=======
 80057e6:	4b12      	ldr	r3, [pc, #72]	; (8005830 <vTaskStartScheduler+0xbc>)
 80057e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80057ee:	4b11      	ldr	r3, [pc, #68]	; (8005834 <vTaskStartScheduler+0xc0>)
 80057f0:	2201      	movs	r2, #1
 80057f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80057f4:	4b10      	ldr	r3, [pc, #64]	; (8005838 <vTaskStartScheduler+0xc4>)
 80057f6:	2200      	movs	r2, #0
 80057f8:	601a      	str	r2, [r3, #0]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
<<<<<<< HEAD
 80054ee:	f001 f89f 	bl	8006630 <xPortStartScheduler>
=======
 80057fa:	f001 f8a1 	bl	8006940 <xPortStartScheduler>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
<<<<<<< HEAD
 80054f2:	e00d      	b.n	8005510 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054fa:	d109      	bne.n	8005510 <vTaskStartScheduler+0xa8>
 80054fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005500:	f383 8811 	msr	BASEPRI, r3
 8005504:	f3bf 8f6f 	isb	sy
 8005508:	f3bf 8f4f 	dsb	sy
 800550c:	60fb      	str	r3, [r7, #12]
 800550e:	e7fe      	b.n	800550e <vTaskStartScheduler+0xa6>
}
 8005510:	bf00      	nop
 8005512:	3718      	adds	r7, #24
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	080070b8 	.word	0x080070b8
 800551c:	08005b31 	.word	0x08005b31
 8005520:	20000d40 	.word	0x20000d40
 8005524:	20000d3c 	.word	0x20000d3c
 8005528:	20000d28 	.word	0x20000d28
 800552c:	20000d20 	.word	0x20000d20

08005530 <vTaskSuspendAll>:
=======
 80057fe:	e00d      	b.n	800581c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005806:	d109      	bne.n	800581c <vTaskStartScheduler+0xa8>
 8005808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580c:	f383 8811 	msr	BASEPRI, r3
 8005810:	f3bf 8f6f 	isb	sy
 8005814:	f3bf 8f4f 	dsb	sy
 8005818:	60fb      	str	r3, [r7, #12]
 800581a:	e7fe      	b.n	800581a <vTaskStartScheduler+0xa6>
}
 800581c:	bf00      	nop
 800581e:	3718      	adds	r7, #24
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}
 8005824:	08007b40 	.word	0x08007b40
 8005828:	08005e3d 	.word	0x08005e3d
 800582c:	20000d3c 	.word	0x20000d3c
 8005830:	20000d38 	.word	0x20000d38
 8005834:	20000d24 	.word	0x20000d24
 8005838:	20000d1c 	.word	0x20000d1c

0800583c <vTaskSuspendAll>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
<<<<<<< HEAD
 8005530:	b480      	push	{r7}
 8005532:	af00      	add	r7, sp, #0
=======
 800583c:	b480      	push	{r7}
 800583e:	af00      	add	r7, sp, #0
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
<<<<<<< HEAD
 8005534:	4b04      	ldr	r3, [pc, #16]	; (8005548 <vTaskSuspendAll+0x18>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	3301      	adds	r3, #1
 800553a:	4a03      	ldr	r2, [pc, #12]	; (8005548 <vTaskSuspendAll+0x18>)
 800553c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800553e:	bf00      	nop
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr
 8005548:	20000d44 	.word	0x20000d44

0800554c <xTaskResumeAll>:
=======
 8005840:	4b04      	ldr	r3, [pc, #16]	; (8005854 <vTaskSuspendAll+0x18>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	3301      	adds	r3, #1
 8005846:	4a03      	ldr	r2, [pc, #12]	; (8005854 <vTaskSuspendAll+0x18>)
 8005848:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800584a:	bf00      	nop
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr
 8005854:	20000d40 	.word	0x20000d40

08005858 <xTaskResumeAll>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
<<<<<<< HEAD
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005552:	2300      	movs	r3, #0
 8005554:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005556:	2300      	movs	r3, #0
 8005558:	60bb      	str	r3, [r7, #8]
=======
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800585e:	2300      	movs	r3, #0
 8005860:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005862:	2300      	movs	r3, #0
 8005864:	60bb      	str	r3, [r7, #8]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
<<<<<<< HEAD
 800555a:	4b41      	ldr	r3, [pc, #260]	; (8005660 <xTaskResumeAll+0x114>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d109      	bne.n	8005576 <xTaskResumeAll+0x2a>
 8005562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005566:	f383 8811 	msr	BASEPRI, r3
 800556a:	f3bf 8f6f 	isb	sy
 800556e:	f3bf 8f4f 	dsb	sy
 8005572:	603b      	str	r3, [r7, #0]
 8005574:	e7fe      	b.n	8005574 <xTaskResumeAll+0x28>
=======
 8005866:	4b41      	ldr	r3, [pc, #260]	; (800596c <xTaskResumeAll+0x114>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d109      	bne.n	8005882 <xTaskResumeAll+0x2a>
 800586e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005872:	f383 8811 	msr	BASEPRI, r3
 8005876:	f3bf 8f6f 	isb	sy
 800587a:	f3bf 8f4f 	dsb	sy
 800587e:	603b      	str	r3, [r7, #0]
 8005880:	e7fe      	b.n	8005880 <xTaskResumeAll+0x28>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
<<<<<<< HEAD
 8005576:	f001 f8f9 	bl	800676c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800557a:	4b39      	ldr	r3, [pc, #228]	; (8005660 <xTaskResumeAll+0x114>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	3b01      	subs	r3, #1
 8005580:	4a37      	ldr	r2, [pc, #220]	; (8005660 <xTaskResumeAll+0x114>)
 8005582:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005584:	4b36      	ldr	r3, [pc, #216]	; (8005660 <xTaskResumeAll+0x114>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d162      	bne.n	8005652 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800558c:	4b35      	ldr	r3, [pc, #212]	; (8005664 <xTaskResumeAll+0x118>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d05e      	beq.n	8005652 <xTaskResumeAll+0x106>
=======
 8005882:	f001 f8fb 	bl	8006a7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005886:	4b39      	ldr	r3, [pc, #228]	; (800596c <xTaskResumeAll+0x114>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	3b01      	subs	r3, #1
 800588c:	4a37      	ldr	r2, [pc, #220]	; (800596c <xTaskResumeAll+0x114>)
 800588e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005890:	4b36      	ldr	r3, [pc, #216]	; (800596c <xTaskResumeAll+0x114>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d162      	bne.n	800595e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005898:	4b35      	ldr	r3, [pc, #212]	; (8005970 <xTaskResumeAll+0x118>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d05e      	beq.n	800595e <xTaskResumeAll+0x106>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
<<<<<<< HEAD
 8005594:	e02f      	b.n	80055f6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005596:	4b34      	ldr	r3, [pc, #208]	; (8005668 <xTaskResumeAll+0x11c>)
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	3318      	adds	r3, #24
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7ff f816 	bl	80045d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	3304      	adds	r3, #4
 80055ac:	4618      	mov	r0, r3
 80055ae:	f7ff f811 	bl	80045d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055b6:	4b2d      	ldr	r3, [pc, #180]	; (800566c <xTaskResumeAll+0x120>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d903      	bls.n	80055c6 <xTaskResumeAll+0x7a>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c2:	4a2a      	ldr	r2, [pc, #168]	; (800566c <xTaskResumeAll+0x120>)
 80055c4:	6013      	str	r3, [r2, #0]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ca:	4613      	mov	r3, r2
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	4413      	add	r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4a27      	ldr	r2, [pc, #156]	; (8005670 <xTaskResumeAll+0x124>)
 80055d4:	441a      	add	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	3304      	adds	r3, #4
 80055da:	4619      	mov	r1, r3
 80055dc:	4610      	mov	r0, r2
 80055de:	f7fe ff9c 	bl	800451a <vListInsertEnd>
=======
 80058a0:	e02f      	b.n	8005902 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058a2:	4b34      	ldr	r3, [pc, #208]	; (8005974 <xTaskResumeAll+0x11c>)
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	3318      	adds	r3, #24
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7ff f816 	bl	80048e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	3304      	adds	r3, #4
 80058b8:	4618      	mov	r0, r3
 80058ba:	f7ff f811 	bl	80048e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058c2:	4b2d      	ldr	r3, [pc, #180]	; (8005978 <xTaskResumeAll+0x120>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d903      	bls.n	80058d2 <xTaskResumeAll+0x7a>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ce:	4a2a      	ldr	r2, [pc, #168]	; (8005978 <xTaskResumeAll+0x120>)
 80058d0:	6013      	str	r3, [r2, #0]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058d6:	4613      	mov	r3, r2
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	4413      	add	r3, r2
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4a27      	ldr	r2, [pc, #156]	; (800597c <xTaskResumeAll+0x124>)
 80058e0:	441a      	add	r2, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	3304      	adds	r3, #4
 80058e6:	4619      	mov	r1, r3
 80058e8:	4610      	mov	r0, r2
 80058ea:	f7fe ff9c 	bl	8004826 <vListInsertEnd>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
<<<<<<< HEAD
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e6:	4b23      	ldr	r3, [pc, #140]	; (8005674 <xTaskResumeAll+0x128>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d302      	bcc.n	80055f6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80055f0:	4b21      	ldr	r3, [pc, #132]	; (8005678 <xTaskResumeAll+0x12c>)
 80055f2:	2201      	movs	r2, #1
 80055f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055f6:	4b1c      	ldr	r3, [pc, #112]	; (8005668 <xTaskResumeAll+0x11c>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1cb      	bne.n	8005596 <xTaskResumeAll+0x4a>
=======
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058f2:	4b23      	ldr	r3, [pc, #140]	; (8005980 <xTaskResumeAll+0x128>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d302      	bcc.n	8005902 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80058fc:	4b21      	ldr	r3, [pc, #132]	; (8005984 <xTaskResumeAll+0x12c>)
 80058fe:	2201      	movs	r2, #1
 8005900:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005902:	4b1c      	ldr	r3, [pc, #112]	; (8005974 <xTaskResumeAll+0x11c>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1cb      	bne.n	80058a2 <xTaskResumeAll+0x4a>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
<<<<<<< HEAD
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d001      	beq.n	8005608 <xTaskResumeAll+0xbc>
=======
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d001      	beq.n	8005914 <xTaskResumeAll+0xbc>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
<<<<<<< HEAD
 8005604:	f000 fb46 	bl	8005c94 <prvResetNextTaskUnblockTime>
=======
 8005910:	f000 fb46 	bl	8005fa0 <prvResetNextTaskUnblockTime>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
<<<<<<< HEAD
 8005608:	4b1c      	ldr	r3, [pc, #112]	; (800567c <xTaskResumeAll+0x130>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d010      	beq.n	8005636 <xTaskResumeAll+0xea>
=======
 8005914:	4b1c      	ldr	r3, [pc, #112]	; (8005988 <xTaskResumeAll+0x130>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d010      	beq.n	8005942 <xTaskResumeAll+0xea>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
<<<<<<< HEAD
 8005614:	f000 f846 	bl	80056a4 <xTaskIncrementTick>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d002      	beq.n	8005624 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800561e:	4b16      	ldr	r3, [pc, #88]	; (8005678 <xTaskResumeAll+0x12c>)
 8005620:	2201      	movs	r2, #1
 8005622:	601a      	str	r2, [r3, #0]
=======
 8005920:	f000 f846 	bl	80059b0 <xTaskIncrementTick>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d002      	beq.n	8005930 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800592a:	4b16      	ldr	r3, [pc, #88]	; (8005984 <xTaskResumeAll+0x12c>)
 800592c:	2201      	movs	r2, #1
 800592e:	601a      	str	r2, [r3, #0]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
<<<<<<< HEAD
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	3b01      	subs	r3, #1
 8005628:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1f1      	bne.n	8005614 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005630:	4b12      	ldr	r3, [pc, #72]	; (800567c <xTaskResumeAll+0x130>)
 8005632:	2200      	movs	r2, #0
 8005634:	601a      	str	r2, [r3, #0]
=======
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	3b01      	subs	r3, #1
 8005934:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1f1      	bne.n	8005920 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800593c:	4b12      	ldr	r3, [pc, #72]	; (8005988 <xTaskResumeAll+0x130>)
 800593e:	2200      	movs	r2, #0
 8005940:	601a      	str	r2, [r3, #0]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
<<<<<<< HEAD
 8005636:	4b10      	ldr	r3, [pc, #64]	; (8005678 <xTaskResumeAll+0x12c>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d009      	beq.n	8005652 <xTaskResumeAll+0x106>
=======
 8005942:	4b10      	ldr	r3, [pc, #64]	; (8005984 <xTaskResumeAll+0x12c>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d009      	beq.n	800595e <xTaskResumeAll+0x106>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
<<<<<<< HEAD
 800563e:	2301      	movs	r3, #1
 8005640:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005642:	4b0f      	ldr	r3, [pc, #60]	; (8005680 <xTaskResumeAll+0x134>)
 8005644:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005648:	601a      	str	r2, [r3, #0]
 800564a:	f3bf 8f4f 	dsb	sy
 800564e:	f3bf 8f6f 	isb	sy
=======
 800594a:	2301      	movs	r3, #1
 800594c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800594e:	4b0f      	ldr	r3, [pc, #60]	; (800598c <xTaskResumeAll+0x134>)
 8005950:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005954:	601a      	str	r2, [r3, #0]
 8005956:	f3bf 8f4f 	dsb	sy
 800595a:	f3bf 8f6f 	isb	sy
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 8005652:	f001 f8b9 	bl	80067c8 <vPortExitCritical>

	return xAlreadyYielded;
 8005656:	68bb      	ldr	r3, [r7, #8]
}
 8005658:	4618      	mov	r0, r3
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	20000d44 	.word	0x20000d44
 8005664:	20000d1c 	.word	0x20000d1c
 8005668:	20000cdc 	.word	0x20000cdc
 800566c:	20000d24 	.word	0x20000d24
 8005670:	2000084c 	.word	0x2000084c
 8005674:	20000848 	.word	0x20000848
 8005678:	20000d30 	.word	0x20000d30
 800567c:	20000d2c 	.word	0x20000d2c
 8005680:	e000ed04 	.word	0xe000ed04

08005684 <xTaskGetTickCount>:
=======
 800595e:	f001 f8bb 	bl	8006ad8 <vPortExitCritical>

	return xAlreadyYielded;
 8005962:	68bb      	ldr	r3, [r7, #8]
}
 8005964:	4618      	mov	r0, r3
 8005966:	3710      	adds	r7, #16
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	20000d40 	.word	0x20000d40
 8005970:	20000d18 	.word	0x20000d18
 8005974:	20000cd8 	.word	0x20000cd8
 8005978:	20000d20 	.word	0x20000d20
 800597c:	20000848 	.word	0x20000848
 8005980:	20000844 	.word	0x20000844
 8005984:	20000d2c 	.word	0x20000d2c
 8005988:	20000d28 	.word	0x20000d28
 800598c:	e000ed04 	.word	0xe000ed04

08005990 <xTaskGetTickCount>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
<<<<<<< HEAD
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
=======
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
<<<<<<< HEAD
 800568a:	4b05      	ldr	r3, [pc, #20]	; (80056a0 <xTaskGetTickCount+0x1c>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	607b      	str	r3, [r7, #4]
=======
 8005996:	4b05      	ldr	r3, [pc, #20]	; (80059ac <xTaskGetTickCount+0x1c>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	607b      	str	r3, [r7, #4]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
<<<<<<< HEAD
 8005690:	687b      	ldr	r3, [r7, #4]
}
 8005692:	4618      	mov	r0, r3
 8005694:	370c      	adds	r7, #12
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	20000d20 	.word	0x20000d20

080056a4 <xTaskIncrementTick>:
=======
 800599c:	687b      	ldr	r3, [r7, #4]
}
 800599e:	4618      	mov	r0, r3
 80059a0:	370c      	adds	r7, #12
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr
 80059aa:	bf00      	nop
 80059ac:	20000d1c 	.word	0x20000d1c

080059b0 <xTaskIncrementTick>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
<<<<<<< HEAD
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b086      	sub	sp, #24
 80056a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80056aa:	2300      	movs	r3, #0
 80056ac:	617b      	str	r3, [r7, #20]
=======
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b086      	sub	sp, #24
 80059b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80059b6:	2300      	movs	r3, #0
 80059b8:	617b      	str	r3, [r7, #20]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
<<<<<<< HEAD
 80056ae:	4b4e      	ldr	r3, [pc, #312]	; (80057e8 <xTaskIncrementTick+0x144>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f040 8088 	bne.w	80057c8 <xTaskIncrementTick+0x124>
=======
 80059ba:	4b4e      	ldr	r3, [pc, #312]	; (8005af4 <xTaskIncrementTick+0x144>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	f040 8088 	bne.w	8005ad4 <xTaskIncrementTick+0x124>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
<<<<<<< HEAD
 80056b8:	4b4c      	ldr	r3, [pc, #304]	; (80057ec <xTaskIncrementTick+0x148>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	3301      	adds	r3, #1
 80056be:	613b      	str	r3, [r7, #16]
=======
 80059c4:	4b4c      	ldr	r3, [pc, #304]	; (8005af8 <xTaskIncrementTick+0x148>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	3301      	adds	r3, #1
 80059ca:	613b      	str	r3, [r7, #16]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
<<<<<<< HEAD
 80056c0:	4a4a      	ldr	r2, [pc, #296]	; (80057ec <xTaskIncrementTick+0x148>)
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d11f      	bne.n	800570c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80056cc:	4b48      	ldr	r3, [pc, #288]	; (80057f0 <xTaskIncrementTick+0x14c>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d009      	beq.n	80056ea <xTaskIncrementTick+0x46>
 80056d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056da:	f383 8811 	msr	BASEPRI, r3
 80056de:	f3bf 8f6f 	isb	sy
 80056e2:	f3bf 8f4f 	dsb	sy
 80056e6:	603b      	str	r3, [r7, #0]
 80056e8:	e7fe      	b.n	80056e8 <xTaskIncrementTick+0x44>
 80056ea:	4b41      	ldr	r3, [pc, #260]	; (80057f0 <xTaskIncrementTick+0x14c>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	60fb      	str	r3, [r7, #12]
 80056f0:	4b40      	ldr	r3, [pc, #256]	; (80057f4 <xTaskIncrementTick+0x150>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a3e      	ldr	r2, [pc, #248]	; (80057f0 <xTaskIncrementTick+0x14c>)
 80056f6:	6013      	str	r3, [r2, #0]
 80056f8:	4a3e      	ldr	r2, [pc, #248]	; (80057f4 <xTaskIncrementTick+0x150>)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6013      	str	r3, [r2, #0]
 80056fe:	4b3e      	ldr	r3, [pc, #248]	; (80057f8 <xTaskIncrementTick+0x154>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	3301      	adds	r3, #1
 8005704:	4a3c      	ldr	r2, [pc, #240]	; (80057f8 <xTaskIncrementTick+0x154>)
 8005706:	6013      	str	r3, [r2, #0]
 8005708:	f000 fac4 	bl	8005c94 <prvResetNextTaskUnblockTime>
=======
 80059cc:	4a4a      	ldr	r2, [pc, #296]	; (8005af8 <xTaskIncrementTick+0x148>)
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d11f      	bne.n	8005a18 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80059d8:	4b48      	ldr	r3, [pc, #288]	; (8005afc <xTaskIncrementTick+0x14c>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d009      	beq.n	80059f6 <xTaskIncrementTick+0x46>
 80059e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e6:	f383 8811 	msr	BASEPRI, r3
 80059ea:	f3bf 8f6f 	isb	sy
 80059ee:	f3bf 8f4f 	dsb	sy
 80059f2:	603b      	str	r3, [r7, #0]
 80059f4:	e7fe      	b.n	80059f4 <xTaskIncrementTick+0x44>
 80059f6:	4b41      	ldr	r3, [pc, #260]	; (8005afc <xTaskIncrementTick+0x14c>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	60fb      	str	r3, [r7, #12]
 80059fc:	4b40      	ldr	r3, [pc, #256]	; (8005b00 <xTaskIncrementTick+0x150>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a3e      	ldr	r2, [pc, #248]	; (8005afc <xTaskIncrementTick+0x14c>)
 8005a02:	6013      	str	r3, [r2, #0]
 8005a04:	4a3e      	ldr	r2, [pc, #248]	; (8005b00 <xTaskIncrementTick+0x150>)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6013      	str	r3, [r2, #0]
 8005a0a:	4b3e      	ldr	r3, [pc, #248]	; (8005b04 <xTaskIncrementTick+0x154>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	3301      	adds	r3, #1
 8005a10:	4a3c      	ldr	r2, [pc, #240]	; (8005b04 <xTaskIncrementTick+0x154>)
 8005a12:	6013      	str	r3, [r2, #0]
 8005a14:	f000 fac4 	bl	8005fa0 <prvResetNextTaskUnblockTime>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
<<<<<<< HEAD
 800570c:	4b3b      	ldr	r3, [pc, #236]	; (80057fc <xTaskIncrementTick+0x158>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	429a      	cmp	r2, r3
 8005714:	d349      	bcc.n	80057aa <xTaskIncrementTick+0x106>
=======
 8005a18:	4b3b      	ldr	r3, [pc, #236]	; (8005b08 <xTaskIncrementTick+0x158>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d349      	bcc.n	8005ab6 <xTaskIncrementTick+0x106>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
<<<<<<< HEAD
 8005716:	4b36      	ldr	r3, [pc, #216]	; (80057f0 <xTaskIncrementTick+0x14c>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d104      	bne.n	800572a <xTaskIncrementTick+0x86>
=======
 8005a22:	4b36      	ldr	r3, [pc, #216]	; (8005afc <xTaskIncrementTick+0x14c>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d104      	bne.n	8005a36 <xTaskIncrementTick+0x86>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 8005720:	4b36      	ldr	r3, [pc, #216]	; (80057fc <xTaskIncrementTick+0x158>)
 8005722:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005726:	601a      	str	r2, [r3, #0]
					break;
 8005728:	e03f      	b.n	80057aa <xTaskIncrementTick+0x106>
=======
 8005a2c:	4b36      	ldr	r3, [pc, #216]	; (8005b08 <xTaskIncrementTick+0x158>)
 8005a2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a32:	601a      	str	r2, [r3, #0]
					break;
 8005a34:	e03f      	b.n	8005ab6 <xTaskIncrementTick+0x106>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
<<<<<<< HEAD
 800572a:	4b31      	ldr	r3, [pc, #196]	; (80057f0 <xTaskIncrementTick+0x14c>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	429a      	cmp	r2, r3
 8005740:	d203      	bcs.n	800574a <xTaskIncrementTick+0xa6>
=======
 8005a36:	4b31      	ldr	r3, [pc, #196]	; (8005afc <xTaskIncrementTick+0x14c>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d203      	bcs.n	8005a56 <xTaskIncrementTick+0xa6>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
<<<<<<< HEAD
 8005742:	4a2e      	ldr	r2, [pc, #184]	; (80057fc <xTaskIncrementTick+0x158>)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005748:	e02f      	b.n	80057aa <xTaskIncrementTick+0x106>
=======
 8005a4e:	4a2e      	ldr	r2, [pc, #184]	; (8005b08 <xTaskIncrementTick+0x158>)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005a54:	e02f      	b.n	8005ab6 <xTaskIncrementTick+0x106>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
<<<<<<< HEAD
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	3304      	adds	r3, #4
 800574e:	4618      	mov	r0, r3
 8005750:	f7fe ff40 	bl	80045d4 <uxListRemove>
=======
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	3304      	adds	r3, #4
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fe ff40 	bl	80048e0 <uxListRemove>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
<<<<<<< HEAD
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005758:	2b00      	cmp	r3, #0
 800575a:	d004      	beq.n	8005766 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	3318      	adds	r3, #24
 8005760:	4618      	mov	r0, r3
 8005762:	f7fe ff37 	bl	80045d4 <uxListRemove>
=======
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d004      	beq.n	8005a72 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	3318      	adds	r3, #24
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f7fe ff37 	bl	80048e0 <uxListRemove>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
<<<<<<< HEAD
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800576a:	4b25      	ldr	r3, [pc, #148]	; (8005800 <xTaskIncrementTick+0x15c>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	429a      	cmp	r2, r3
 8005770:	d903      	bls.n	800577a <xTaskIncrementTick+0xd6>
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005776:	4a22      	ldr	r2, [pc, #136]	; (8005800 <xTaskIncrementTick+0x15c>)
 8005778:	6013      	str	r3, [r2, #0]
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800577e:	4613      	mov	r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	4413      	add	r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	4a1f      	ldr	r2, [pc, #124]	; (8005804 <xTaskIncrementTick+0x160>)
 8005788:	441a      	add	r2, r3
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	3304      	adds	r3, #4
 800578e:	4619      	mov	r1, r3
 8005790:	4610      	mov	r0, r2
 8005792:	f7fe fec2 	bl	800451a <vListInsertEnd>
=======
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a76:	4b25      	ldr	r3, [pc, #148]	; (8005b0c <xTaskIncrementTick+0x15c>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d903      	bls.n	8005a86 <xTaskIncrementTick+0xd6>
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a82:	4a22      	ldr	r2, [pc, #136]	; (8005b0c <xTaskIncrementTick+0x15c>)
 8005a84:	6013      	str	r3, [r2, #0]
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	4413      	add	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4a1f      	ldr	r2, [pc, #124]	; (8005b10 <xTaskIncrementTick+0x160>)
 8005a94:	441a      	add	r2, r3
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	3304      	adds	r3, #4
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	4610      	mov	r0, r2
 8005a9e:	f7fe fec2 	bl	8004826 <vListInsertEnd>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
<<<<<<< HEAD
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800579a:	4b1b      	ldr	r3, [pc, #108]	; (8005808 <xTaskIncrementTick+0x164>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d3b8      	bcc.n	8005716 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80057a4:	2301      	movs	r3, #1
 80057a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057a8:	e7b5      	b.n	8005716 <xTaskIncrementTick+0x72>
=======
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aa6:	4b1b      	ldr	r3, [pc, #108]	; (8005b14 <xTaskIncrementTick+0x164>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d3b8      	bcc.n	8005a22 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ab4:	e7b5      	b.n	8005a22 <xTaskIncrementTick+0x72>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
<<<<<<< HEAD
 80057aa:	4b17      	ldr	r3, [pc, #92]	; (8005808 <xTaskIncrementTick+0x164>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057b0:	4914      	ldr	r1, [pc, #80]	; (8005804 <xTaskIncrementTick+0x160>)
 80057b2:	4613      	mov	r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	4413      	add	r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	440b      	add	r3, r1
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d907      	bls.n	80057d2 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80057c2:	2301      	movs	r3, #1
 80057c4:	617b      	str	r3, [r7, #20]
 80057c6:	e004      	b.n	80057d2 <xTaskIncrementTick+0x12e>
=======
 8005ab6:	4b17      	ldr	r3, [pc, #92]	; (8005b14 <xTaskIncrementTick+0x164>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005abc:	4914      	ldr	r1, [pc, #80]	; (8005b10 <xTaskIncrementTick+0x160>)
 8005abe:	4613      	mov	r3, r2
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	4413      	add	r3, r2
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	440b      	add	r3, r1
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d907      	bls.n	8005ade <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	617b      	str	r3, [r7, #20]
 8005ad2:	e004      	b.n	8005ade <xTaskIncrementTick+0x12e>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
<<<<<<< HEAD
 80057c8:	4b10      	ldr	r3, [pc, #64]	; (800580c <xTaskIncrementTick+0x168>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	3301      	adds	r3, #1
 80057ce:	4a0f      	ldr	r2, [pc, #60]	; (800580c <xTaskIncrementTick+0x168>)
 80057d0:	6013      	str	r3, [r2, #0]
=======
 8005ad4:	4b10      	ldr	r3, [pc, #64]	; (8005b18 <xTaskIncrementTick+0x168>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	3301      	adds	r3, #1
 8005ada:	4a0f      	ldr	r2, [pc, #60]	; (8005b18 <xTaskIncrementTick+0x168>)
 8005adc:	6013      	str	r3, [r2, #0]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
<<<<<<< HEAD
 80057d2:	4b0f      	ldr	r3, [pc, #60]	; (8005810 <xTaskIncrementTick+0x16c>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d001      	beq.n	80057de <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80057da:	2301      	movs	r3, #1
 80057dc:	617b      	str	r3, [r7, #20]
=======
 8005ade:	4b0f      	ldr	r3, [pc, #60]	; (8005b1c <xTaskIncrementTick+0x16c>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d001      	beq.n	8005aea <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	617b      	str	r3, [r7, #20]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
<<<<<<< HEAD
 80057de:	697b      	ldr	r3, [r7, #20]
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3718      	adds	r7, #24
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	20000d44 	.word	0x20000d44
 80057ec:	20000d20 	.word	0x20000d20
 80057f0:	20000cd4 	.word	0x20000cd4
 80057f4:	20000cd8 	.word	0x20000cd8
 80057f8:	20000d34 	.word	0x20000d34
 80057fc:	20000d3c 	.word	0x20000d3c
 8005800:	20000d24 	.word	0x20000d24
 8005804:	2000084c 	.word	0x2000084c
 8005808:	20000848 	.word	0x20000848
 800580c:	20000d2c 	.word	0x20000d2c
 8005810:	20000d30 	.word	0x20000d30

08005814 <vTaskSwitchContext>:
=======
 8005aea:	697b      	ldr	r3, [r7, #20]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3718      	adds	r7, #24
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	20000d40 	.word	0x20000d40
 8005af8:	20000d1c 	.word	0x20000d1c
 8005afc:	20000cd0 	.word	0x20000cd0
 8005b00:	20000cd4 	.word	0x20000cd4
 8005b04:	20000d30 	.word	0x20000d30
 8005b08:	20000d38 	.word	0x20000d38
 8005b0c:	20000d20 	.word	0x20000d20
 8005b10:	20000848 	.word	0x20000848
 8005b14:	20000844 	.word	0x20000844
 8005b18:	20000d28 	.word	0x20000d28
 8005b1c:	20000d2c 	.word	0x20000d2c

08005b20 <vTaskSwitchContext>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
<<<<<<< HEAD
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800581a:	4b27      	ldr	r3, [pc, #156]	; (80058b8 <vTaskSwitchContext+0xa4>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <vTaskSwitchContext+0x16>
=======
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005b26:	4b27      	ldr	r3, [pc, #156]	; (8005bc4 <vTaskSwitchContext+0xa4>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d003      	beq.n	8005b36 <vTaskSwitchContext+0x16>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
<<<<<<< HEAD
 8005822:	4b26      	ldr	r3, [pc, #152]	; (80058bc <vTaskSwitchContext+0xa8>)
 8005824:	2201      	movs	r2, #1
 8005826:	601a      	str	r2, [r3, #0]
=======
 8005b2e:	4b26      	ldr	r3, [pc, #152]	; (8005bc8 <vTaskSwitchContext+0xa8>)
 8005b30:	2201      	movs	r2, #1
 8005b32:	601a      	str	r2, [r3, #0]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
<<<<<<< HEAD
 8005828:	e040      	b.n	80058ac <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800582a:	4b24      	ldr	r3, [pc, #144]	; (80058bc <vTaskSwitchContext+0xa8>)
 800582c:	2200      	movs	r2, #0
 800582e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005830:	4b23      	ldr	r3, [pc, #140]	; (80058c0 <vTaskSwitchContext+0xac>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	60fb      	str	r3, [r7, #12]
 8005836:	e00f      	b.n	8005858 <vTaskSwitchContext+0x44>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d109      	bne.n	8005852 <vTaskSwitchContext+0x3e>
 800583e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005842:	f383 8811 	msr	BASEPRI, r3
 8005846:	f3bf 8f6f 	isb	sy
 800584a:	f3bf 8f4f 	dsb	sy
 800584e:	607b      	str	r3, [r7, #4]
 8005850:	e7fe      	b.n	8005850 <vTaskSwitchContext+0x3c>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	3b01      	subs	r3, #1
 8005856:	60fb      	str	r3, [r7, #12]
 8005858:	491a      	ldr	r1, [pc, #104]	; (80058c4 <vTaskSwitchContext+0xb0>)
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	4613      	mov	r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4413      	add	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	440b      	add	r3, r1
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d0e5      	beq.n	8005838 <vTaskSwitchContext+0x24>
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	4613      	mov	r3, r2
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	4413      	add	r3, r2
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	4a13      	ldr	r2, [pc, #76]	; (80058c4 <vTaskSwitchContext+0xb0>)
 8005878:	4413      	add	r3, r2
 800587a:	60bb      	str	r3, [r7, #8]
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	685a      	ldr	r2, [r3, #4]
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	605a      	str	r2, [r3, #4]
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	685a      	ldr	r2, [r3, #4]
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	3308      	adds	r3, #8
 800588e:	429a      	cmp	r2, r3
 8005890:	d104      	bne.n	800589c <vTaskSwitchContext+0x88>
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	685a      	ldr	r2, [r3, #4]
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	605a      	str	r2, [r3, #4]
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	4a09      	ldr	r2, [pc, #36]	; (80058c8 <vTaskSwitchContext+0xb4>)
 80058a4:	6013      	str	r3, [r2, #0]
 80058a6:	4a06      	ldr	r2, [pc, #24]	; (80058c0 <vTaskSwitchContext+0xac>)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6013      	str	r3, [r2, #0]
}
 80058ac:	bf00      	nop
 80058ae:	3714      	adds	r7, #20
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr
 80058b8:	20000d44 	.word	0x20000d44
 80058bc:	20000d30 	.word	0x20000d30
 80058c0:	20000d24 	.word	0x20000d24
 80058c4:	2000084c 	.word	0x2000084c
 80058c8:	20000848 	.word	0x20000848

080058cc <vTaskPlaceOnEventList>:
=======
 8005b34:	e040      	b.n	8005bb8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005b36:	4b24      	ldr	r3, [pc, #144]	; (8005bc8 <vTaskSwitchContext+0xa8>)
 8005b38:	2200      	movs	r2, #0
 8005b3a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b3c:	4b23      	ldr	r3, [pc, #140]	; (8005bcc <vTaskSwitchContext+0xac>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	60fb      	str	r3, [r7, #12]
 8005b42:	e00f      	b.n	8005b64 <vTaskSwitchContext+0x44>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d109      	bne.n	8005b5e <vTaskSwitchContext+0x3e>
 8005b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b4e:	f383 8811 	msr	BASEPRI, r3
 8005b52:	f3bf 8f6f 	isb	sy
 8005b56:	f3bf 8f4f 	dsb	sy
 8005b5a:	607b      	str	r3, [r7, #4]
 8005b5c:	e7fe      	b.n	8005b5c <vTaskSwitchContext+0x3c>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	3b01      	subs	r3, #1
 8005b62:	60fb      	str	r3, [r7, #12]
 8005b64:	491a      	ldr	r1, [pc, #104]	; (8005bd0 <vTaskSwitchContext+0xb0>)
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	4613      	mov	r3, r2
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	4413      	add	r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	440b      	add	r3, r1
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d0e5      	beq.n	8005b44 <vTaskSwitchContext+0x24>
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	4413      	add	r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	4a13      	ldr	r2, [pc, #76]	; (8005bd0 <vTaskSwitchContext+0xb0>)
 8005b84:	4413      	add	r3, r2
 8005b86:	60bb      	str	r3, [r7, #8]
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	685a      	ldr	r2, [r3, #4]
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	605a      	str	r2, [r3, #4]
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	3308      	adds	r3, #8
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d104      	bne.n	8005ba8 <vTaskSwitchContext+0x88>
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	685a      	ldr	r2, [r3, #4]
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	605a      	str	r2, [r3, #4]
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	4a09      	ldr	r2, [pc, #36]	; (8005bd4 <vTaskSwitchContext+0xb4>)
 8005bb0:	6013      	str	r3, [r2, #0]
 8005bb2:	4a06      	ldr	r2, [pc, #24]	; (8005bcc <vTaskSwitchContext+0xac>)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6013      	str	r3, [r2, #0]
}
 8005bb8:	bf00      	nop
 8005bba:	3714      	adds	r7, #20
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr
 8005bc4:	20000d40 	.word	0x20000d40
 8005bc8:	20000d2c 	.word	0x20000d2c
 8005bcc:	20000d20 	.word	0x20000d20
 8005bd0:	20000848 	.word	0x20000848
 8005bd4:	20000844 	.word	0x20000844

08005bd8 <vTaskPlaceOnEventList>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
<<<<<<< HEAD
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d109      	bne.n	80058f0 <vTaskPlaceOnEventList+0x24>
 80058dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e0:	f383 8811 	msr	BASEPRI, r3
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	f3bf 8f4f 	dsb	sy
 80058ec:	60fb      	str	r3, [r7, #12]
 80058ee:	e7fe      	b.n	80058ee <vTaskPlaceOnEventList+0x22>
=======
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d109      	bne.n	8005bfc <vTaskPlaceOnEventList+0x24>
 8005be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bec:	f383 8811 	msr	BASEPRI, r3
 8005bf0:	f3bf 8f6f 	isb	sy
 8005bf4:	f3bf 8f4f 	dsb	sy
 8005bf8:	60fb      	str	r3, [r7, #12]
 8005bfa:	e7fe      	b.n	8005bfa <vTaskPlaceOnEventList+0x22>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
<<<<<<< HEAD
 80058f0:	4b07      	ldr	r3, [pc, #28]	; (8005910 <vTaskPlaceOnEventList+0x44>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	3318      	adds	r3, #24
 80058f6:	4619      	mov	r1, r3
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f7fe fe32 	bl	8004562 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80058fe:	2101      	movs	r1, #1
 8005900:	6838      	ldr	r0, [r7, #0]
 8005902:	f000 fa71 	bl	8005de8 <prvAddCurrentTaskToDelayedList>
}
 8005906:	bf00      	nop
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	20000848 	.word	0x20000848

08005914 <vTaskPlaceOnEventListRestricted>:
=======
 8005bfc:	4b07      	ldr	r3, [pc, #28]	; (8005c1c <vTaskPlaceOnEventList+0x44>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	3318      	adds	r3, #24
 8005c02:	4619      	mov	r1, r3
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f7fe fe32 	bl	800486e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c0a:	2101      	movs	r1, #1
 8005c0c:	6838      	ldr	r0, [r7, #0]
 8005c0e:	f000 fa71 	bl	80060f4 <prvAddCurrentTaskToDelayedList>
}
 8005c12:	bf00      	nop
 8005c14:	3710      	adds	r7, #16
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	20000844 	.word	0x20000844

08005c20 <vTaskPlaceOnEventListRestricted>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
<<<<<<< HEAD
 8005914:	b580      	push	{r7, lr}
 8005916:	b086      	sub	sp, #24
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d109      	bne.n	800593a <vTaskPlaceOnEventListRestricted+0x26>
 8005926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592a:	f383 8811 	msr	BASEPRI, r3
 800592e:	f3bf 8f6f 	isb	sy
 8005932:	f3bf 8f4f 	dsb	sy
 8005936:	617b      	str	r3, [r7, #20]
 8005938:	e7fe      	b.n	8005938 <vTaskPlaceOnEventListRestricted+0x24>
=======
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b086      	sub	sp, #24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d109      	bne.n	8005c46 <vTaskPlaceOnEventListRestricted+0x26>
 8005c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c36:	f383 8811 	msr	BASEPRI, r3
 8005c3a:	f3bf 8f6f 	isb	sy
 8005c3e:	f3bf 8f4f 	dsb	sy
 8005c42:	617b      	str	r3, [r7, #20]
 8005c44:	e7fe      	b.n	8005c44 <vTaskPlaceOnEventListRestricted+0x24>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
<<<<<<< HEAD
 800593a:	4b0a      	ldr	r3, [pc, #40]	; (8005964 <vTaskPlaceOnEventListRestricted+0x50>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	3318      	adds	r3, #24
 8005940:	4619      	mov	r1, r3
 8005942:	68f8      	ldr	r0, [r7, #12]
 8005944:	f7fe fde9 	bl	800451a <vListInsertEnd>
=======
 8005c46:	4b0a      	ldr	r3, [pc, #40]	; (8005c70 <vTaskPlaceOnEventListRestricted+0x50>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	3318      	adds	r3, #24
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f7fe fde9 	bl	8004826 <vListInsertEnd>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
<<<<<<< HEAD
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d002      	beq.n	8005954 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800594e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005952:	60bb      	str	r3, [r7, #8]
=======
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d002      	beq.n	8005c60 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005c5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c5e:	60bb      	str	r3, [r7, #8]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
<<<<<<< HEAD
 8005954:	6879      	ldr	r1, [r7, #4]
 8005956:	68b8      	ldr	r0, [r7, #8]
 8005958:	f000 fa46 	bl	8005de8 <prvAddCurrentTaskToDelayedList>
	}
 800595c:	bf00      	nop
 800595e:	3718      	adds	r7, #24
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	20000848 	.word	0x20000848

08005968 <xTaskRemoveFromEventList>:
=======
 8005c60:	6879      	ldr	r1, [r7, #4]
 8005c62:	68b8      	ldr	r0, [r7, #8]
 8005c64:	f000 fa46 	bl	80060f4 <prvAddCurrentTaskToDelayedList>
	}
 8005c68:	bf00      	nop
 8005c6a:	3718      	adds	r7, #24
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	20000844 	.word	0x20000844

08005c74 <xTaskRemoveFromEventList>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
<<<<<<< HEAD
 8005968:	b580      	push	{r7, lr}
 800596a:	b086      	sub	sp, #24
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
=======
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b086      	sub	sp, #24
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
<<<<<<< HEAD
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d109      	bne.n	8005992 <xTaskRemoveFromEventList+0x2a>
 800597e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005982:	f383 8811 	msr	BASEPRI, r3
 8005986:	f3bf 8f6f 	isb	sy
 800598a:	f3bf 8f4f 	dsb	sy
 800598e:	60fb      	str	r3, [r7, #12]
 8005990:	e7fe      	b.n	8005990 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	3318      	adds	r3, #24
 8005996:	4618      	mov	r0, r3
 8005998:	f7fe fe1c 	bl	80045d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800599c:	4b1d      	ldr	r3, [pc, #116]	; (8005a14 <xTaskRemoveFromEventList+0xac>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d11d      	bne.n	80059e0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	3304      	adds	r3, #4
 80059a8:	4618      	mov	r0, r3
 80059aa:	f7fe fe13 	bl	80045d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b2:	4b19      	ldr	r3, [pc, #100]	; (8005a18 <xTaskRemoveFromEventList+0xb0>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d903      	bls.n	80059c2 <xTaskRemoveFromEventList+0x5a>
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059be:	4a16      	ldr	r2, [pc, #88]	; (8005a18 <xTaskRemoveFromEventList+0xb0>)
 80059c0:	6013      	str	r3, [r2, #0]
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c6:	4613      	mov	r3, r2
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	4413      	add	r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4a13      	ldr	r2, [pc, #76]	; (8005a1c <xTaskRemoveFromEventList+0xb4>)
 80059d0:	441a      	add	r2, r3
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	3304      	adds	r3, #4
 80059d6:	4619      	mov	r1, r3
 80059d8:	4610      	mov	r0, r2
 80059da:	f7fe fd9e 	bl	800451a <vListInsertEnd>
 80059de:	e005      	b.n	80059ec <xTaskRemoveFromEventList+0x84>
=======
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d109      	bne.n	8005c9e <xTaskRemoveFromEventList+0x2a>
 8005c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8e:	f383 8811 	msr	BASEPRI, r3
 8005c92:	f3bf 8f6f 	isb	sy
 8005c96:	f3bf 8f4f 	dsb	sy
 8005c9a:	60fb      	str	r3, [r7, #12]
 8005c9c:	e7fe      	b.n	8005c9c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	3318      	adds	r3, #24
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7fe fe1c 	bl	80048e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ca8:	4b1d      	ldr	r3, [pc, #116]	; (8005d20 <xTaskRemoveFromEventList+0xac>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d11d      	bne.n	8005cec <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	3304      	adds	r3, #4
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7fe fe13 	bl	80048e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cbe:	4b19      	ldr	r3, [pc, #100]	; (8005d24 <xTaskRemoveFromEventList+0xb0>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d903      	bls.n	8005cce <xTaskRemoveFromEventList+0x5a>
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cca:	4a16      	ldr	r2, [pc, #88]	; (8005d24 <xTaskRemoveFromEventList+0xb0>)
 8005ccc:	6013      	str	r3, [r2, #0]
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4413      	add	r3, r2
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	4a13      	ldr	r2, [pc, #76]	; (8005d28 <xTaskRemoveFromEventList+0xb4>)
 8005cdc:	441a      	add	r2, r3
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	3304      	adds	r3, #4
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	4610      	mov	r0, r2
 8005ce6:	f7fe fd9e 	bl	8004826 <vListInsertEnd>
 8005cea:	e005      	b.n	8005cf8 <xTaskRemoveFromEventList+0x84>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
<<<<<<< HEAD
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	3318      	adds	r3, #24
 80059e4:	4619      	mov	r1, r3
 80059e6:	480e      	ldr	r0, [pc, #56]	; (8005a20 <xTaskRemoveFromEventList+0xb8>)
 80059e8:	f7fe fd97 	bl	800451a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f0:	4b0c      	ldr	r3, [pc, #48]	; (8005a24 <xTaskRemoveFromEventList+0xbc>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d905      	bls.n	8005a06 <xTaskRemoveFromEventList+0x9e>
=======
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	3318      	adds	r3, #24
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	480e      	ldr	r0, [pc, #56]	; (8005d2c <xTaskRemoveFromEventList+0xb8>)
 8005cf4:	f7fe fd97 	bl	8004826 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cfc:	4b0c      	ldr	r3, [pc, #48]	; (8005d30 <xTaskRemoveFromEventList+0xbc>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d905      	bls.n	8005d12 <xTaskRemoveFromEventList+0x9e>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
<<<<<<< HEAD
 80059fa:	2301      	movs	r3, #1
 80059fc:	617b      	str	r3, [r7, #20]
=======
 8005d06:	2301      	movs	r3, #1
 8005d08:	617b      	str	r3, [r7, #20]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
<<<<<<< HEAD
 80059fe:	4b0a      	ldr	r3, [pc, #40]	; (8005a28 <xTaskRemoveFromEventList+0xc0>)
 8005a00:	2201      	movs	r2, #1
 8005a02:	601a      	str	r2, [r3, #0]
 8005a04:	e001      	b.n	8005a0a <xTaskRemoveFromEventList+0xa2>
=======
 8005d0a:	4b0a      	ldr	r3, [pc, #40]	; (8005d34 <xTaskRemoveFromEventList+0xc0>)
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	601a      	str	r2, [r3, #0]
 8005d10:	e001      	b.n	8005d16 <xTaskRemoveFromEventList+0xa2>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	}
	else
	{
		xReturn = pdFALSE;
<<<<<<< HEAD
 8005a06:	2300      	movs	r3, #0
 8005a08:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005a0a:	697b      	ldr	r3, [r7, #20]
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3718      	adds	r7, #24
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	20000d44 	.word	0x20000d44
 8005a18:	20000d24 	.word	0x20000d24
 8005a1c:	2000084c 	.word	0x2000084c
 8005a20:	20000cdc 	.word	0x20000cdc
 8005a24:	20000848 	.word	0x20000848
 8005a28:	20000d30 	.word	0x20000d30

08005a2c <vTaskInternalSetTimeOutState>:
=======
 8005d12:	2300      	movs	r3, #0
 8005d14:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005d16:	697b      	ldr	r3, [r7, #20]
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3718      	adds	r7, #24
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	20000d40 	.word	0x20000d40
 8005d24:	20000d20 	.word	0x20000d20
 8005d28:	20000848 	.word	0x20000848
 8005d2c:	20000cd8 	.word	0x20000cd8
 8005d30:	20000844 	.word	0x20000844
 8005d34:	20000d2c 	.word	0x20000d2c

08005d38 <vTaskInternalSetTimeOutState>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
<<<<<<< HEAD
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a34:	4b06      	ldr	r3, [pc, #24]	; (8005a50 <vTaskInternalSetTimeOutState+0x24>)
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005a3c:	4b05      	ldr	r3, [pc, #20]	; (8005a54 <vTaskInternalSetTimeOutState+0x28>)
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	605a      	str	r2, [r3, #4]
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr
 8005a50:	20000d34 	.word	0x20000d34
 8005a54:	20000d20 	.word	0x20000d20

08005a58 <xTaskCheckForTimeOut>:
=======
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d40:	4b06      	ldr	r3, [pc, #24]	; (8005d5c <vTaskInternalSetTimeOutState+0x24>)
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d48:	4b05      	ldr	r3, [pc, #20]	; (8005d60 <vTaskInternalSetTimeOutState+0x28>)
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	605a      	str	r2, [r3, #4]
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr
 8005d5c:	20000d30 	.word	0x20000d30
 8005d60:	20000d1c 	.word	0x20000d1c

08005d64 <xTaskCheckForTimeOut>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
<<<<<<< HEAD
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b088      	sub	sp, #32
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d109      	bne.n	8005a7c <xTaskCheckForTimeOut+0x24>
 8005a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6c:	f383 8811 	msr	BASEPRI, r3
 8005a70:	f3bf 8f6f 	isb	sy
 8005a74:	f3bf 8f4f 	dsb	sy
 8005a78:	613b      	str	r3, [r7, #16]
 8005a7a:	e7fe      	b.n	8005a7a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d109      	bne.n	8005a96 <xTaskCheckForTimeOut+0x3e>
 8005a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a86:	f383 8811 	msr	BASEPRI, r3
 8005a8a:	f3bf 8f6f 	isb	sy
 8005a8e:	f3bf 8f4f 	dsb	sy
 8005a92:	60fb      	str	r3, [r7, #12]
 8005a94:	e7fe      	b.n	8005a94 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005a96:	f000 fe69 	bl	800676c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005a9a:	4b1d      	ldr	r3, [pc, #116]	; (8005b10 <xTaskCheckForTimeOut+0xb8>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	69ba      	ldr	r2, [r7, #24]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	617b      	str	r3, [r7, #20]
=======
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b088      	sub	sp, #32
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d109      	bne.n	8005d88 <xTaskCheckForTimeOut+0x24>
 8005d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d78:	f383 8811 	msr	BASEPRI, r3
 8005d7c:	f3bf 8f6f 	isb	sy
 8005d80:	f3bf 8f4f 	dsb	sy
 8005d84:	613b      	str	r3, [r7, #16]
 8005d86:	e7fe      	b.n	8005d86 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d109      	bne.n	8005da2 <xTaskCheckForTimeOut+0x3e>
 8005d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	60fb      	str	r3, [r7, #12]
 8005da0:	e7fe      	b.n	8005da0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005da2:	f000 fe6b 	bl	8006a7c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005da6:	4b1d      	ldr	r3, [pc, #116]	; (8005e1c <xTaskCheckForTimeOut+0xb8>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	69ba      	ldr	r2, [r7, #24]
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	617b      	str	r3, [r7, #20]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
<<<<<<< HEAD
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ab2:	d102      	bne.n	8005aba <xTaskCheckForTimeOut+0x62>
=======
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dbe:	d102      	bne.n	8005dc6 <xTaskCheckForTimeOut+0x62>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
<<<<<<< HEAD
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	61fb      	str	r3, [r7, #28]
 8005ab8:	e023      	b.n	8005b02 <xTaskCheckForTimeOut+0xaa>
=======
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	61fb      	str	r3, [r7, #28]
 8005dc4:	e023      	b.n	8005e0e <xTaskCheckForTimeOut+0xaa>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
<<<<<<< HEAD
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	4b15      	ldr	r3, [pc, #84]	; (8005b14 <xTaskCheckForTimeOut+0xbc>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d007      	beq.n	8005ad6 <xTaskCheckForTimeOut+0x7e>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	69ba      	ldr	r2, [r7, #24]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d302      	bcc.n	8005ad6 <xTaskCheckForTimeOut+0x7e>
=======
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	4b15      	ldr	r3, [pc, #84]	; (8005e20 <xTaskCheckForTimeOut+0xbc>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d007      	beq.n	8005de2 <xTaskCheckForTimeOut+0x7e>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	69ba      	ldr	r2, [r7, #24]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d302      	bcc.n	8005de2 <xTaskCheckForTimeOut+0x7e>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
<<<<<<< HEAD
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	61fb      	str	r3, [r7, #28]
 8005ad4:	e015      	b.n	8005b02 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d20b      	bcs.n	8005af8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	1ad2      	subs	r2, r2, r3
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f7ff ff9d 	bl	8005a2c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005af2:	2300      	movs	r3, #0
 8005af4:	61fb      	str	r3, [r7, #28]
 8005af6:	e004      	b.n	8005b02 <xTaskCheckForTimeOut+0xaa>
=======
 8005ddc:	2301      	movs	r3, #1
 8005dde:	61fb      	str	r3, [r7, #28]
 8005de0:	e015      	b.n	8005e0e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d20b      	bcs.n	8005e04 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	1ad2      	subs	r2, r2, r3
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f7ff ff9d 	bl	8005d38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	61fb      	str	r3, [r7, #28]
 8005e02:	e004      	b.n	8005e0e <xTaskCheckForTimeOut+0xaa>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		}
		else
		{
			*pxTicksToWait = 0;
<<<<<<< HEAD
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	2200      	movs	r2, #0
 8005afc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005afe:	2301      	movs	r3, #1
 8005b00:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005b02:	f000 fe61 	bl	80067c8 <vPortExitCritical>

	return xReturn;
 8005b06:	69fb      	ldr	r3, [r7, #28]
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3720      	adds	r7, #32
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	20000d20 	.word	0x20000d20
 8005b14:	20000d34 	.word	0x20000d34

08005b18 <vTaskMissedYield>:
=======
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	2200      	movs	r2, #0
 8005e08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005e0e:	f000 fe63 	bl	8006ad8 <vPortExitCritical>

	return xReturn;
 8005e12:	69fb      	ldr	r3, [r7, #28]
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3720      	adds	r7, #32
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	20000d1c 	.word	0x20000d1c
 8005e20:	20000d30 	.word	0x20000d30

08005e24 <vTaskMissedYield>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
<<<<<<< HEAD
 8005b18:	b480      	push	{r7}
 8005b1a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005b1c:	4b03      	ldr	r3, [pc, #12]	; (8005b2c <vTaskMissedYield+0x14>)
 8005b1e:	2201      	movs	r2, #1
 8005b20:	601a      	str	r2, [r3, #0]
}
 8005b22:	bf00      	nop
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr
 8005b2c:	20000d30 	.word	0x20000d30

08005b30 <prvIdleTask>:
=======
 8005e24:	b480      	push	{r7}
 8005e26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005e28:	4b03      	ldr	r3, [pc, #12]	; (8005e38 <vTaskMissedYield+0x14>)
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	601a      	str	r2, [r3, #0]
}
 8005e2e:	bf00      	nop
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr
 8005e38:	20000d2c 	.word	0x20000d2c

08005e3c <prvIdleTask>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
<<<<<<< HEAD
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
=======
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
<<<<<<< HEAD
 8005b38:	f000 f852 	bl	8005be0 <prvCheckTasksWaitingTermination>
=======
 8005e44:	f000 f852 	bl	8005eec <prvCheckTasksWaitingTermination>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
<<<<<<< HEAD
 8005b3c:	4b06      	ldr	r3, [pc, #24]	; (8005b58 <prvIdleTask+0x28>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d9f9      	bls.n	8005b38 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b44:	4b05      	ldr	r3, [pc, #20]	; (8005b5c <prvIdleTask+0x2c>)
 8005b46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b4a:	601a      	str	r2, [r3, #0]
 8005b4c:	f3bf 8f4f 	dsb	sy
 8005b50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b54:	e7f0      	b.n	8005b38 <prvIdleTask+0x8>
 8005b56:	bf00      	nop
 8005b58:	2000084c 	.word	0x2000084c
 8005b5c:	e000ed04 	.word	0xe000ed04

08005b60 <prvInitialiseTaskLists>:
=======
 8005e48:	4b06      	ldr	r3, [pc, #24]	; (8005e64 <prvIdleTask+0x28>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d9f9      	bls.n	8005e44 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005e50:	4b05      	ldr	r3, [pc, #20]	; (8005e68 <prvIdleTask+0x2c>)
 8005e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e56:	601a      	str	r2, [r3, #0]
 8005e58:	f3bf 8f4f 	dsb	sy
 8005e5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005e60:	e7f0      	b.n	8005e44 <prvIdleTask+0x8>
 8005e62:	bf00      	nop
 8005e64:	20000848 	.word	0x20000848
 8005e68:	e000ed04 	.word	0xe000ed04

08005e6c <prvInitialiseTaskLists>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
<<<<<<< HEAD
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b66:	2300      	movs	r3, #0
 8005b68:	607b      	str	r3, [r7, #4]
 8005b6a:	e00c      	b.n	8005b86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	4413      	add	r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	4a12      	ldr	r2, [pc, #72]	; (8005bc0 <prvInitialiseTaskLists+0x60>)
 8005b78:	4413      	add	r3, r2
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7fe fca0 	bl	80044c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	3301      	adds	r3, #1
 8005b84:	607b      	str	r3, [r7, #4]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2b37      	cmp	r3, #55	; 0x37
 8005b8a:	d9ef      	bls.n	8005b6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b8c:	480d      	ldr	r0, [pc, #52]	; (8005bc4 <prvInitialiseTaskLists+0x64>)
 8005b8e:	f7fe fc97 	bl	80044c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b92:	480d      	ldr	r0, [pc, #52]	; (8005bc8 <prvInitialiseTaskLists+0x68>)
 8005b94:	f7fe fc94 	bl	80044c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b98:	480c      	ldr	r0, [pc, #48]	; (8005bcc <prvInitialiseTaskLists+0x6c>)
 8005b9a:	f7fe fc91 	bl	80044c0 <vListInitialise>
=======
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e72:	2300      	movs	r3, #0
 8005e74:	607b      	str	r3, [r7, #4]
 8005e76:	e00c      	b.n	8005e92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4413      	add	r3, r2
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	4a12      	ldr	r2, [pc, #72]	; (8005ecc <prvInitialiseTaskLists+0x60>)
 8005e84:	4413      	add	r3, r2
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7fe fca0 	bl	80047cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	3301      	adds	r3, #1
 8005e90:	607b      	str	r3, [r7, #4]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2b37      	cmp	r3, #55	; 0x37
 8005e96:	d9ef      	bls.n	8005e78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005e98:	480d      	ldr	r0, [pc, #52]	; (8005ed0 <prvInitialiseTaskLists+0x64>)
 8005e9a:	f7fe fc97 	bl	80047cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005e9e:	480d      	ldr	r0, [pc, #52]	; (8005ed4 <prvInitialiseTaskLists+0x68>)
 8005ea0:	f7fe fc94 	bl	80047cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005ea4:	480c      	ldr	r0, [pc, #48]	; (8005ed8 <prvInitialiseTaskLists+0x6c>)
 8005ea6:	f7fe fc91 	bl	80047cc <vListInitialise>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
<<<<<<< HEAD
 8005b9e:	480c      	ldr	r0, [pc, #48]	; (8005bd0 <prvInitialiseTaskLists+0x70>)
 8005ba0:	f7fe fc8e 	bl	80044c0 <vListInitialise>
=======
 8005eaa:	480c      	ldr	r0, [pc, #48]	; (8005edc <prvInitialiseTaskLists+0x70>)
 8005eac:	f7fe fc8e 	bl	80047cc <vListInitialise>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
<<<<<<< HEAD
 8005ba4:	480b      	ldr	r0, [pc, #44]	; (8005bd4 <prvInitialiseTaskLists+0x74>)
 8005ba6:	f7fe fc8b 	bl	80044c0 <vListInitialise>
=======
 8005eb0:	480b      	ldr	r0, [pc, #44]	; (8005ee0 <prvInitialiseTaskLists+0x74>)
 8005eb2:	f7fe fc8b 	bl	80047cc <vListInitialise>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
<<<<<<< HEAD
 8005baa:	4b0b      	ldr	r3, [pc, #44]	; (8005bd8 <prvInitialiseTaskLists+0x78>)
 8005bac:	4a05      	ldr	r2, [pc, #20]	; (8005bc4 <prvInitialiseTaskLists+0x64>)
 8005bae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005bb0:	4b0a      	ldr	r3, [pc, #40]	; (8005bdc <prvInitialiseTaskLists+0x7c>)
 8005bb2:	4a05      	ldr	r2, [pc, #20]	; (8005bc8 <prvInitialiseTaskLists+0x68>)
 8005bb4:	601a      	str	r2, [r3, #0]
}
 8005bb6:	bf00      	nop
 8005bb8:	3708      	adds	r7, #8
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	2000084c 	.word	0x2000084c
 8005bc4:	20000cac 	.word	0x20000cac
 8005bc8:	20000cc0 	.word	0x20000cc0
 8005bcc:	20000cdc 	.word	0x20000cdc
 8005bd0:	20000cf0 	.word	0x20000cf0
 8005bd4:	20000d08 	.word	0x20000d08
 8005bd8:	20000cd4 	.word	0x20000cd4
 8005bdc:	20000cd8 	.word	0x20000cd8

08005be0 <prvCheckTasksWaitingTermination>:
=======
 8005eb6:	4b0b      	ldr	r3, [pc, #44]	; (8005ee4 <prvInitialiseTaskLists+0x78>)
 8005eb8:	4a05      	ldr	r2, [pc, #20]	; (8005ed0 <prvInitialiseTaskLists+0x64>)
 8005eba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ebc:	4b0a      	ldr	r3, [pc, #40]	; (8005ee8 <prvInitialiseTaskLists+0x7c>)
 8005ebe:	4a05      	ldr	r2, [pc, #20]	; (8005ed4 <prvInitialiseTaskLists+0x68>)
 8005ec0:	601a      	str	r2, [r3, #0]
}
 8005ec2:	bf00      	nop
 8005ec4:	3708      	adds	r7, #8
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	20000848 	.word	0x20000848
 8005ed0:	20000ca8 	.word	0x20000ca8
 8005ed4:	20000cbc 	.word	0x20000cbc
 8005ed8:	20000cd8 	.word	0x20000cd8
 8005edc:	20000cec 	.word	0x20000cec
 8005ee0:	20000d04 	.word	0x20000d04
 8005ee4:	20000cd0 	.word	0x20000cd0
 8005ee8:	20000cd4 	.word	0x20000cd4

08005eec <prvCheckTasksWaitingTermination>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
<<<<<<< HEAD
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
=======
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
<<<<<<< HEAD
 8005be6:	e019      	b.n	8005c1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005be8:	f000 fdc0 	bl	800676c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bec:	4b0f      	ldr	r3, [pc, #60]	; (8005c2c <prvCheckTasksWaitingTermination+0x4c>)
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	3304      	adds	r3, #4
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f7fe fceb 	bl	80045d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005bfe:	4b0c      	ldr	r3, [pc, #48]	; (8005c30 <prvCheckTasksWaitingTermination+0x50>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	3b01      	subs	r3, #1
 8005c04:	4a0a      	ldr	r2, [pc, #40]	; (8005c30 <prvCheckTasksWaitingTermination+0x50>)
 8005c06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c08:	4b0a      	ldr	r3, [pc, #40]	; (8005c34 <prvCheckTasksWaitingTermination+0x54>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	4a09      	ldr	r2, [pc, #36]	; (8005c34 <prvCheckTasksWaitingTermination+0x54>)
 8005c10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005c12:	f000 fdd9 	bl	80067c8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 f80e 	bl	8005c38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c1c:	4b05      	ldr	r3, [pc, #20]	; (8005c34 <prvCheckTasksWaitingTermination+0x54>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d1e1      	bne.n	8005be8 <prvCheckTasksWaitingTermination+0x8>
=======
 8005ef2:	e019      	b.n	8005f28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005ef4:	f000 fdc2 	bl	8006a7c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ef8:	4b0f      	ldr	r3, [pc, #60]	; (8005f38 <prvCheckTasksWaitingTermination+0x4c>)
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	3304      	adds	r3, #4
 8005f04:	4618      	mov	r0, r3
 8005f06:	f7fe fceb 	bl	80048e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005f0a:	4b0c      	ldr	r3, [pc, #48]	; (8005f3c <prvCheckTasksWaitingTermination+0x50>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	4a0a      	ldr	r2, [pc, #40]	; (8005f3c <prvCheckTasksWaitingTermination+0x50>)
 8005f12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005f14:	4b0a      	ldr	r3, [pc, #40]	; (8005f40 <prvCheckTasksWaitingTermination+0x54>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	4a09      	ldr	r2, [pc, #36]	; (8005f40 <prvCheckTasksWaitingTermination+0x54>)
 8005f1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005f1e:	f000 fddb 	bl	8006ad8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 f80e 	bl	8005f44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f28:	4b05      	ldr	r3, [pc, #20]	; (8005f40 <prvCheckTasksWaitingTermination+0x54>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d1e1      	bne.n	8005ef4 <prvCheckTasksWaitingTermination+0x8>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
<<<<<<< HEAD
 8005c24:	bf00      	nop
 8005c26:	3708      	adds	r7, #8
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	20000cf0 	.word	0x20000cf0
 8005c30:	20000d1c 	.word	0x20000d1c
 8005c34:	20000d04 	.word	0x20000d04

08005c38 <prvDeleteTCB>:
=======
 8005f30:	bf00      	nop
 8005f32:	3708      	adds	r7, #8
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	20000cec 	.word	0x20000cec
 8005f3c:	20000d18 	.word	0x20000d18
 8005f40:	20000d00 	.word	0x20000d00

08005f44 <prvDeleteTCB>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
<<<<<<< HEAD
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
=======
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
<<<<<<< HEAD
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d108      	bne.n	8005c5c <prvDeleteTCB+0x24>
=======
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d108      	bne.n	8005f68 <prvDeleteTCB+0x24>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
<<<<<<< HEAD
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 ff68 	bl	8006b24 <vPortFree>
				vPortFree( pxTCB );
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 ff65 	bl	8006b24 <vPortFree>
=======
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f000 ff6a 	bl	8006e34 <vPortFree>
				vPortFree( pxTCB );
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 ff67 	bl	8006e34 <vPortFree>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
<<<<<<< HEAD
 8005c5a:	e017      	b.n	8005c8c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d103      	bne.n	8005c6e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 ff5c 	bl	8006b24 <vPortFree>
	}
 8005c6c:	e00e      	b.n	8005c8c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d009      	beq.n	8005c8c <prvDeleteTCB+0x54>
 8005c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7c:	f383 8811 	msr	BASEPRI, r3
 8005c80:	f3bf 8f6f 	isb	sy
 8005c84:	f3bf 8f4f 	dsb	sy
 8005c88:	60fb      	str	r3, [r7, #12]
 8005c8a:	e7fe      	b.n	8005c8a <prvDeleteTCB+0x52>
	}
 8005c8c:	bf00      	nop
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <prvResetNextTaskUnblockTime>:
=======
 8005f66:	e017      	b.n	8005f98 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d103      	bne.n	8005f7a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 ff5e 	bl	8006e34 <vPortFree>
	}
 8005f78:	e00e      	b.n	8005f98 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d009      	beq.n	8005f98 <prvDeleteTCB+0x54>
 8005f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f88:	f383 8811 	msr	BASEPRI, r3
 8005f8c:	f3bf 8f6f 	isb	sy
 8005f90:	f3bf 8f4f 	dsb	sy
 8005f94:	60fb      	str	r3, [r7, #12]
 8005f96:	e7fe      	b.n	8005f96 <prvDeleteTCB+0x52>
	}
 8005f98:	bf00      	nop
 8005f9a:	3710      	adds	r7, #16
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <prvResetNextTaskUnblockTime>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
<<<<<<< HEAD
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c9a:	4b0c      	ldr	r3, [pc, #48]	; (8005ccc <prvResetNextTaskUnblockTime+0x38>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d104      	bne.n	8005cae <prvResetNextTaskUnblockTime+0x1a>
=======
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fa6:	4b0c      	ldr	r3, [pc, #48]	; (8005fd8 <prvResetNextTaskUnblockTime+0x38>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d104      	bne.n	8005fba <prvResetNextTaskUnblockTime+0x1a>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
<<<<<<< HEAD
 8005ca4:	4b0a      	ldr	r3, [pc, #40]	; (8005cd0 <prvResetNextTaskUnblockTime+0x3c>)
 8005ca6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005caa:	601a      	str	r2, [r3, #0]
=======
 8005fb0:	4b0a      	ldr	r3, [pc, #40]	; (8005fdc <prvResetNextTaskUnblockTime+0x3c>)
 8005fb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fb6:	601a      	str	r2, [r3, #0]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
<<<<<<< HEAD
 8005cac:	e008      	b.n	8005cc0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cae:	4b07      	ldr	r3, [pc, #28]	; (8005ccc <prvResetNextTaskUnblockTime+0x38>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	4a04      	ldr	r2, [pc, #16]	; (8005cd0 <prvResetNextTaskUnblockTime+0x3c>)
 8005cbe:	6013      	str	r3, [r2, #0]
}
 8005cc0:	bf00      	nop
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr
 8005ccc:	20000cd4 	.word	0x20000cd4
 8005cd0:	20000d3c 	.word	0x20000d3c

08005cd4 <xTaskGetSchedulerState>:
=======
 8005fb8:	e008      	b.n	8005fcc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fba:	4b07      	ldr	r3, [pc, #28]	; (8005fd8 <prvResetNextTaskUnblockTime+0x38>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	4a04      	ldr	r2, [pc, #16]	; (8005fdc <prvResetNextTaskUnblockTime+0x3c>)
 8005fca:	6013      	str	r3, [r2, #0]
}
 8005fcc:	bf00      	nop
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr
 8005fd8:	20000cd0 	.word	0x20000cd0
 8005fdc:	20000d38 	.word	0x20000d38

08005fe0 <xTaskGetSchedulerState>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
<<<<<<< HEAD
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005cda:	4b0b      	ldr	r3, [pc, #44]	; (8005d08 <xTaskGetSchedulerState+0x34>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d102      	bne.n	8005ce8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	607b      	str	r3, [r7, #4]
 8005ce6:	e008      	b.n	8005cfa <xTaskGetSchedulerState+0x26>
=======
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005fe6:	4b0b      	ldr	r3, [pc, #44]	; (8006014 <xTaskGetSchedulerState+0x34>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d102      	bne.n	8005ff4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	607b      	str	r3, [r7, #4]
 8005ff2:	e008      	b.n	8006006 <xTaskGetSchedulerState+0x26>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
<<<<<<< HEAD
 8005ce8:	4b08      	ldr	r3, [pc, #32]	; (8005d0c <xTaskGetSchedulerState+0x38>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d102      	bne.n	8005cf6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	607b      	str	r3, [r7, #4]
 8005cf4:	e001      	b.n	8005cfa <xTaskGetSchedulerState+0x26>
=======
 8005ff4:	4b08      	ldr	r3, [pc, #32]	; (8006018 <xTaskGetSchedulerState+0x38>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d102      	bne.n	8006002 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ffc:	2302      	movs	r3, #2
 8005ffe:	607b      	str	r3, [r7, #4]
 8006000:	e001      	b.n	8006006 <xTaskGetSchedulerState+0x26>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
<<<<<<< HEAD
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	607b      	str	r3, [r7, #4]
=======
 8006002:	2300      	movs	r3, #0
 8006004:	607b      	str	r3, [r7, #4]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			}
		}

		return xReturn;
<<<<<<< HEAD
 8005cfa:	687b      	ldr	r3, [r7, #4]
	}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr
 8005d08:	20000d28 	.word	0x20000d28
 8005d0c:	20000d44 	.word	0x20000d44

08005d10 <xTaskPriorityDisinherit>:
=======
 8006006:	687b      	ldr	r3, [r7, #4]
	}
 8006008:	4618      	mov	r0, r3
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr
 8006014:	20000d24 	.word	0x20000d24
 8006018:	20000d40 	.word	0x20000d40

0800601c <xTaskPriorityDisinherit>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
<<<<<<< HEAD
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b086      	sub	sp, #24
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d054      	beq.n	8005dd0 <xTaskPriorityDisinherit+0xc0>
=======
 800601c:	b580      	push	{r7, lr}
 800601e:	b086      	sub	sp, #24
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006028:	2300      	movs	r3, #0
 800602a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d054      	beq.n	80060dc <xTaskPriorityDisinherit+0xc0>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
<<<<<<< HEAD
 8005d26:	4b2d      	ldr	r3, [pc, #180]	; (8005ddc <xTaskPriorityDisinherit+0xcc>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d009      	beq.n	8005d44 <xTaskPriorityDisinherit+0x34>
 8005d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d34:	f383 8811 	msr	BASEPRI, r3
 8005d38:	f3bf 8f6f 	isb	sy
 8005d3c:	f3bf 8f4f 	dsb	sy
 8005d40:	60fb      	str	r3, [r7, #12]
 8005d42:	e7fe      	b.n	8005d42 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d109      	bne.n	8005d60 <xTaskPriorityDisinherit+0x50>
 8005d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d50:	f383 8811 	msr	BASEPRI, r3
 8005d54:	f3bf 8f6f 	isb	sy
 8005d58:	f3bf 8f4f 	dsb	sy
 8005d5c:	60bb      	str	r3, [r7, #8]
 8005d5e:	e7fe      	b.n	8005d5e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d64:	1e5a      	subs	r2, r3, #1
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	651a      	str	r2, [r3, #80]	; 0x50
=======
 8006032:	4b2d      	ldr	r3, [pc, #180]	; (80060e8 <xTaskPriorityDisinherit+0xcc>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	429a      	cmp	r2, r3
 800603a:	d009      	beq.n	8006050 <xTaskPriorityDisinherit+0x34>
 800603c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006040:	f383 8811 	msr	BASEPRI, r3
 8006044:	f3bf 8f6f 	isb	sy
 8006048:	f3bf 8f4f 	dsb	sy
 800604c:	60fb      	str	r3, [r7, #12]
 800604e:	e7fe      	b.n	800604e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006054:	2b00      	cmp	r3, #0
 8006056:	d109      	bne.n	800606c <xTaskPriorityDisinherit+0x50>
 8006058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800605c:	f383 8811 	msr	BASEPRI, r3
 8006060:	f3bf 8f6f 	isb	sy
 8006064:	f3bf 8f4f 	dsb	sy
 8006068:	60bb      	str	r3, [r7, #8]
 800606a:	e7fe      	b.n	800606a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006070:	1e5a      	subs	r2, r3, #1
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	651a      	str	r2, [r3, #80]	; 0x50
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
<<<<<<< HEAD
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d02c      	beq.n	8005dd0 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d128      	bne.n	8005dd0 <xTaskPriorityDisinherit+0xc0>
=======
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800607e:	429a      	cmp	r2, r3
 8006080:	d02c      	beq.n	80060dc <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006086:	2b00      	cmp	r3, #0
 8006088:	d128      	bne.n	80060dc <xTaskPriorityDisinherit+0xc0>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	3304      	adds	r3, #4
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7fe fc26 	bl	80045d4 <uxListRemove>
=======
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	3304      	adds	r3, #4
 800608e:	4618      	mov	r0, r3
 8006090:	f7fe fc26 	bl	80048e0 <uxListRemove>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
<<<<<<< HEAD
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d94:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005da0:	4b0f      	ldr	r3, [pc, #60]	; (8005de0 <xTaskPriorityDisinherit+0xd0>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d903      	bls.n	8005db0 <xTaskPriorityDisinherit+0xa0>
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dac:	4a0c      	ldr	r2, [pc, #48]	; (8005de0 <xTaskPriorityDisinherit+0xd0>)
 8005dae:	6013      	str	r3, [r2, #0]
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005db4:	4613      	mov	r3, r2
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	4413      	add	r3, r2
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	4a09      	ldr	r2, [pc, #36]	; (8005de4 <xTaskPriorityDisinherit+0xd4>)
 8005dbe:	441a      	add	r2, r3
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	3304      	adds	r3, #4
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	4610      	mov	r0, r2
 8005dc8:	f7fe fba7 	bl	800451a <vListInsertEnd>
=======
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ac:	4b0f      	ldr	r3, [pc, #60]	; (80060ec <xTaskPriorityDisinherit+0xd0>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d903      	bls.n	80060bc <xTaskPriorityDisinherit+0xa0>
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b8:	4a0c      	ldr	r2, [pc, #48]	; (80060ec <xTaskPriorityDisinherit+0xd0>)
 80060ba:	6013      	str	r3, [r2, #0]
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060c0:	4613      	mov	r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4413      	add	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4a09      	ldr	r2, [pc, #36]	; (80060f0 <xTaskPriorityDisinherit+0xd4>)
 80060ca:	441a      	add	r2, r3
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	3304      	adds	r3, #4
 80060d0:	4619      	mov	r1, r3
 80060d2:	4610      	mov	r0, r2
 80060d4:	f7fe fba7 	bl	8004826 <vListInsertEnd>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
<<<<<<< HEAD
 8005dcc:	2301      	movs	r3, #1
 8005dce:	617b      	str	r3, [r7, #20]
=======
 80060d8:	2301      	movs	r3, #1
 80060da:	617b      	str	r3, [r7, #20]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
<<<<<<< HEAD
 8005dd0:	697b      	ldr	r3, [r7, #20]
	}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3718      	adds	r7, #24
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	20000848 	.word	0x20000848
 8005de0:	20000d24 	.word	0x20000d24
 8005de4:	2000084c 	.word	0x2000084c

08005de8 <prvAddCurrentTaskToDelayedList>:
=======
 80060dc:	697b      	ldr	r3, [r7, #20]
	}
 80060de:	4618      	mov	r0, r3
 80060e0:	3718      	adds	r7, #24
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	20000844 	.word	0x20000844
 80060ec:	20000d20 	.word	0x20000d20
 80060f0:	20000848 	.word	0x20000848

080060f4 <prvAddCurrentTaskToDelayedList>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
<<<<<<< HEAD
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005df2:	4b21      	ldr	r3, [pc, #132]	; (8005e78 <prvAddCurrentTaskToDelayedList+0x90>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	60fb      	str	r3, [r7, #12]
=======
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80060fe:	4b21      	ldr	r3, [pc, #132]	; (8006184 <prvAddCurrentTaskToDelayedList+0x90>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	60fb      	str	r3, [r7, #12]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 8005df8:	4b20      	ldr	r3, [pc, #128]	; (8005e7c <prvAddCurrentTaskToDelayedList+0x94>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	3304      	adds	r3, #4
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7fe fbe8 	bl	80045d4 <uxListRemove>
=======
 8006104:	4b20      	ldr	r3, [pc, #128]	; (8006188 <prvAddCurrentTaskToDelayedList+0x94>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	3304      	adds	r3, #4
 800610a:	4618      	mov	r0, r3
 800610c:	f7fe fbe8 	bl	80048e0 <uxListRemove>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
<<<<<<< HEAD
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e0a:	d10a      	bne.n	8005e22 <prvAddCurrentTaskToDelayedList+0x3a>
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d007      	beq.n	8005e22 <prvAddCurrentTaskToDelayedList+0x3a>
=======
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006116:	d10a      	bne.n	800612e <prvAddCurrentTaskToDelayedList+0x3a>
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d007      	beq.n	800612e <prvAddCurrentTaskToDelayedList+0x3a>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
<<<<<<< HEAD
 8005e12:	4b1a      	ldr	r3, [pc, #104]	; (8005e7c <prvAddCurrentTaskToDelayedList+0x94>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	3304      	adds	r3, #4
 8005e18:	4619      	mov	r1, r3
 8005e1a:	4819      	ldr	r0, [pc, #100]	; (8005e80 <prvAddCurrentTaskToDelayedList+0x98>)
 8005e1c:	f7fe fb7d 	bl	800451a <vListInsertEnd>
=======
 800611e:	4b1a      	ldr	r3, [pc, #104]	; (8006188 <prvAddCurrentTaskToDelayedList+0x94>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	3304      	adds	r3, #4
 8006124:	4619      	mov	r1, r3
 8006126:	4819      	ldr	r0, [pc, #100]	; (800618c <prvAddCurrentTaskToDelayedList+0x98>)
 8006128:	f7fe fb7d 	bl	8004826 <vListInsertEnd>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
<<<<<<< HEAD
 8005e20:	e026      	b.n	8005e70 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4413      	add	r3, r2
 8005e28:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005e2a:	4b14      	ldr	r3, [pc, #80]	; (8005e7c <prvAddCurrentTaskToDelayedList+0x94>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68ba      	ldr	r2, [r7, #8]
 8005e30:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005e32:	68ba      	ldr	r2, [r7, #8]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d209      	bcs.n	8005e4e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e3a:	4b12      	ldr	r3, [pc, #72]	; (8005e84 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	4b0f      	ldr	r3, [pc, #60]	; (8005e7c <prvAddCurrentTaskToDelayedList+0x94>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	3304      	adds	r3, #4
 8005e44:	4619      	mov	r1, r3
 8005e46:	4610      	mov	r0, r2
 8005e48:	f7fe fb8b 	bl	8004562 <vListInsert>
}
 8005e4c:	e010      	b.n	8005e70 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e4e:	4b0e      	ldr	r3, [pc, #56]	; (8005e88 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	4b0a      	ldr	r3, [pc, #40]	; (8005e7c <prvAddCurrentTaskToDelayedList+0x94>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	3304      	adds	r3, #4
 8005e58:	4619      	mov	r1, r3
 8005e5a:	4610      	mov	r0, r2
 8005e5c:	f7fe fb81 	bl	8004562 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005e60:	4b0a      	ldr	r3, [pc, #40]	; (8005e8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68ba      	ldr	r2, [r7, #8]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d202      	bcs.n	8005e70 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005e6a:	4a08      	ldr	r2, [pc, #32]	; (8005e8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	6013      	str	r3, [r2, #0]
}
 8005e70:	bf00      	nop
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	20000d20 	.word	0x20000d20
 8005e7c:	20000848 	.word	0x20000848
 8005e80:	20000d08 	.word	0x20000d08
 8005e84:	20000cd8 	.word	0x20000cd8
 8005e88:	20000cd4 	.word	0x20000cd4
 8005e8c:	20000d3c 	.word	0x20000d3c

08005e90 <xTimerCreateTimerTask>:
=======
 800612c:	e026      	b.n	800617c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4413      	add	r3, r2
 8006134:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006136:	4b14      	ldr	r3, [pc, #80]	; (8006188 <prvAddCurrentTaskToDelayedList+0x94>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800613e:	68ba      	ldr	r2, [r7, #8]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	429a      	cmp	r2, r3
 8006144:	d209      	bcs.n	800615a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006146:	4b12      	ldr	r3, [pc, #72]	; (8006190 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	4b0f      	ldr	r3, [pc, #60]	; (8006188 <prvAddCurrentTaskToDelayedList+0x94>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	3304      	adds	r3, #4
 8006150:	4619      	mov	r1, r3
 8006152:	4610      	mov	r0, r2
 8006154:	f7fe fb8b 	bl	800486e <vListInsert>
}
 8006158:	e010      	b.n	800617c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800615a:	4b0e      	ldr	r3, [pc, #56]	; (8006194 <prvAddCurrentTaskToDelayedList+0xa0>)
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	4b0a      	ldr	r3, [pc, #40]	; (8006188 <prvAddCurrentTaskToDelayedList+0x94>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	3304      	adds	r3, #4
 8006164:	4619      	mov	r1, r3
 8006166:	4610      	mov	r0, r2
 8006168:	f7fe fb81 	bl	800486e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800616c:	4b0a      	ldr	r3, [pc, #40]	; (8006198 <prvAddCurrentTaskToDelayedList+0xa4>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	429a      	cmp	r2, r3
 8006174:	d202      	bcs.n	800617c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006176:	4a08      	ldr	r2, [pc, #32]	; (8006198 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	6013      	str	r3, [r2, #0]
}
 800617c:	bf00      	nop
 800617e:	3710      	adds	r7, #16
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	20000d1c 	.word	0x20000d1c
 8006188:	20000844 	.word	0x20000844
 800618c:	20000d04 	.word	0x20000d04
 8006190:	20000cd4 	.word	0x20000cd4
 8006194:	20000cd0 	.word	0x20000cd0
 8006198:	20000d38 	.word	0x20000d38

0800619c <xTimerCreateTimerTask>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
<<<<<<< HEAD
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b08a      	sub	sp, #40	; 0x28
 8005e94:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005e96:	2300      	movs	r3, #0
 8005e98:	617b      	str	r3, [r7, #20]
=======
 800619c:	b580      	push	{r7, lr}
 800619e:	b08a      	sub	sp, #40	; 0x28
 80061a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80061a2:	2300      	movs	r3, #0
 80061a4:	617b      	str	r3, [r7, #20]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
<<<<<<< HEAD
 8005e9a:	f000 faff 	bl	800649c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005e9e:	4b1c      	ldr	r3, [pc, #112]	; (8005f10 <xTimerCreateTimerTask+0x80>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d021      	beq.n	8005eea <xTimerCreateTimerTask+0x5a>
=======
 80061a6:	f000 faff 	bl	80067a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80061aa:	4b1c      	ldr	r3, [pc, #112]	; (800621c <xTimerCreateTimerTask+0x80>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d021      	beq.n	80061f6 <xTimerCreateTimerTask+0x5a>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
<<<<<<< HEAD
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005eae:	1d3a      	adds	r2, r7, #4
 8005eb0:	f107 0108 	add.w	r1, r7, #8
 8005eb4:	f107 030c 	add.w	r3, r7, #12
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f7fe fae7 	bl	800448c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005ebe:	6879      	ldr	r1, [r7, #4]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	9202      	str	r2, [sp, #8]
 8005ec6:	9301      	str	r3, [sp, #4]
 8005ec8:	2302      	movs	r3, #2
 8005eca:	9300      	str	r3, [sp, #0]
 8005ecc:	2300      	movs	r3, #0
 8005ece:	460a      	mov	r2, r1
 8005ed0:	4910      	ldr	r1, [pc, #64]	; (8005f14 <xTimerCreateTimerTask+0x84>)
 8005ed2:	4811      	ldr	r0, [pc, #68]	; (8005f18 <xTimerCreateTimerTask+0x88>)
 8005ed4:	f7ff f87c 	bl	8004fd0 <xTaskCreateStatic>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	4b10      	ldr	r3, [pc, #64]	; (8005f1c <xTimerCreateTimerTask+0x8c>)
 8005edc:	601a      	str	r2, [r3, #0]
=======
 80061b2:	2300      	movs	r3, #0
 80061b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80061b6:	2300      	movs	r3, #0
 80061b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80061ba:	1d3a      	adds	r2, r7, #4
 80061bc:	f107 0108 	add.w	r1, r7, #8
 80061c0:	f107 030c 	add.w	r3, r7, #12
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7fe fae7 	bl	8004798 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80061ca:	6879      	ldr	r1, [r7, #4]
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	9202      	str	r2, [sp, #8]
 80061d2:	9301      	str	r3, [sp, #4]
 80061d4:	2302      	movs	r3, #2
 80061d6:	9300      	str	r3, [sp, #0]
 80061d8:	2300      	movs	r3, #0
 80061da:	460a      	mov	r2, r1
 80061dc:	4910      	ldr	r1, [pc, #64]	; (8006220 <xTimerCreateTimerTask+0x84>)
 80061de:	4811      	ldr	r0, [pc, #68]	; (8006224 <xTimerCreateTimerTask+0x88>)
 80061e0:	f7ff f87c 	bl	80052dc <xTaskCreateStatic>
 80061e4:	4602      	mov	r2, r0
 80061e6:	4b10      	ldr	r3, [pc, #64]	; (8006228 <xTimerCreateTimerTask+0x8c>)
 80061e8:	601a      	str	r2, [r3, #0]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
<<<<<<< HEAD
 8005ede:	4b0f      	ldr	r3, [pc, #60]	; (8005f1c <xTimerCreateTimerTask+0x8c>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d001      	beq.n	8005eea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	617b      	str	r3, [r7, #20]
=======
 80061ea:	4b0f      	ldr	r3, [pc, #60]	; (8006228 <xTimerCreateTimerTask+0x8c>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d001      	beq.n	80061f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80061f2:	2301      	movs	r3, #1
 80061f4:	617b      	str	r3, [r7, #20]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
<<<<<<< HEAD
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d109      	bne.n	8005f04 <xTimerCreateTimerTask+0x74>
 8005ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef4:	f383 8811 	msr	BASEPRI, r3
 8005ef8:	f3bf 8f6f 	isb	sy
 8005efc:	f3bf 8f4f 	dsb	sy
 8005f00:	613b      	str	r3, [r7, #16]
 8005f02:	e7fe      	b.n	8005f02 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005f04:	697b      	ldr	r3, [r7, #20]
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3718      	adds	r7, #24
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	20000d78 	.word	0x20000d78
 8005f14:	080070c0 	.word	0x080070c0
 8005f18:	08006051 	.word	0x08006051
 8005f1c:	20000d7c 	.word	0x20000d7c

08005f20 <xTimerGenericCommand>:
=======
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d109      	bne.n	8006210 <xTimerCreateTimerTask+0x74>
 80061fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006200:	f383 8811 	msr	BASEPRI, r3
 8006204:	f3bf 8f6f 	isb	sy
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	613b      	str	r3, [r7, #16]
 800620e:	e7fe      	b.n	800620e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8006210:	697b      	ldr	r3, [r7, #20]
}
 8006212:	4618      	mov	r0, r3
 8006214:	3718      	adds	r7, #24
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	20000d74 	.word	0x20000d74
 8006220:	08007b48 	.word	0x08007b48
 8006224:	0800635d 	.word	0x0800635d
 8006228:	20000d78 	.word	0x20000d78

0800622c <xTimerGenericCommand>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
<<<<<<< HEAD
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b08a      	sub	sp, #40	; 0x28
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
 8005f2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d109      	bne.n	8005f4c <xTimerGenericCommand+0x2c>
 8005f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3c:	f383 8811 	msr	BASEPRI, r3
 8005f40:	f3bf 8f6f 	isb	sy
 8005f44:	f3bf 8f4f 	dsb	sy
 8005f48:	623b      	str	r3, [r7, #32]
 8005f4a:	e7fe      	b.n	8005f4a <xTimerGenericCommand+0x2a>
=======
 800622c:	b580      	push	{r7, lr}
 800622e:	b08a      	sub	sp, #40	; 0x28
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
 8006238:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800623a:	2300      	movs	r3, #0
 800623c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d109      	bne.n	8006258 <xTimerGenericCommand+0x2c>
 8006244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006248:	f383 8811 	msr	BASEPRI, r3
 800624c:	f3bf 8f6f 	isb	sy
 8006250:	f3bf 8f4f 	dsb	sy
 8006254:	623b      	str	r3, [r7, #32]
 8006256:	e7fe      	b.n	8006256 <xTimerGenericCommand+0x2a>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
<<<<<<< HEAD
 8005f4c:	4b19      	ldr	r3, [pc, #100]	; (8005fb4 <xTimerGenericCommand+0x94>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d02a      	beq.n	8005faa <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	2b05      	cmp	r3, #5
 8005f64:	dc18      	bgt.n	8005f98 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005f66:	f7ff feb5 	bl	8005cd4 <xTaskGetSchedulerState>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	d109      	bne.n	8005f84 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005f70:	4b10      	ldr	r3, [pc, #64]	; (8005fb4 <xTimerGenericCommand+0x94>)
 8005f72:	6818      	ldr	r0, [r3, #0]
 8005f74:	f107 0110 	add.w	r1, r7, #16
 8005f78:	2300      	movs	r3, #0
 8005f7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f7c:	f7fe fc52 	bl	8004824 <xQueueGenericSend>
 8005f80:	6278      	str	r0, [r7, #36]	; 0x24
 8005f82:	e012      	b.n	8005faa <xTimerGenericCommand+0x8a>
=======
 8006258:	4b19      	ldr	r3, [pc, #100]	; (80062c0 <xTimerGenericCommand+0x94>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d02a      	beq.n	80062b6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	2b05      	cmp	r3, #5
 8006270:	dc18      	bgt.n	80062a4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006272:	f7ff feb5 	bl	8005fe0 <xTaskGetSchedulerState>
 8006276:	4603      	mov	r3, r0
 8006278:	2b02      	cmp	r3, #2
 800627a:	d109      	bne.n	8006290 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800627c:	4b10      	ldr	r3, [pc, #64]	; (80062c0 <xTimerGenericCommand+0x94>)
 800627e:	6818      	ldr	r0, [r3, #0]
 8006280:	f107 0110 	add.w	r1, r7, #16
 8006284:	2300      	movs	r3, #0
 8006286:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006288:	f7fe fc52 	bl	8004b30 <xQueueGenericSend>
 800628c:	6278      	str	r0, [r7, #36]	; 0x24
 800628e:	e012      	b.n	80062b6 <xTimerGenericCommand+0x8a>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
<<<<<<< HEAD
 8005f84:	4b0b      	ldr	r3, [pc, #44]	; (8005fb4 <xTimerGenericCommand+0x94>)
 8005f86:	6818      	ldr	r0, [r3, #0]
 8005f88:	f107 0110 	add.w	r1, r7, #16
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f7fe fc48 	bl	8004824 <xQueueGenericSend>
 8005f94:	6278      	str	r0, [r7, #36]	; 0x24
 8005f96:	e008      	b.n	8005faa <xTimerGenericCommand+0x8a>
=======
 8006290:	4b0b      	ldr	r3, [pc, #44]	; (80062c0 <xTimerGenericCommand+0x94>)
 8006292:	6818      	ldr	r0, [r3, #0]
 8006294:	f107 0110 	add.w	r1, r7, #16
 8006298:	2300      	movs	r3, #0
 800629a:	2200      	movs	r2, #0
 800629c:	f7fe fc48 	bl	8004b30 <xQueueGenericSend>
 80062a0:	6278      	str	r0, [r7, #36]	; 0x24
 80062a2:	e008      	b.n	80062b6 <xTimerGenericCommand+0x8a>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
<<<<<<< HEAD
 8005f98:	4b06      	ldr	r3, [pc, #24]	; (8005fb4 <xTimerGenericCommand+0x94>)
 8005f9a:	6818      	ldr	r0, [r3, #0]
 8005f9c:	f107 0110 	add.w	r1, r7, #16
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	683a      	ldr	r2, [r7, #0]
 8005fa4:	f7fe fd38 	bl	8004a18 <xQueueGenericSendFromISR>
 8005fa8:	6278      	str	r0, [r7, #36]	; 0x24
=======
 80062a4:	4b06      	ldr	r3, [pc, #24]	; (80062c0 <xTimerGenericCommand+0x94>)
 80062a6:	6818      	ldr	r0, [r3, #0]
 80062a8:	f107 0110 	add.w	r1, r7, #16
 80062ac:	2300      	movs	r3, #0
 80062ae:	683a      	ldr	r2, [r7, #0]
 80062b0:	f7fe fd38 	bl	8004d24 <xQueueGenericSendFromISR>
 80062b4:	6278      	str	r0, [r7, #36]	; 0x24
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
<<<<<<< HEAD
 8005faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3728      	adds	r7, #40	; 0x28
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	20000d78 	.word	0x20000d78

08005fb8 <prvProcessExpiredTimer>:
=======
 80062b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3728      	adds	r7, #40	; 0x28
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	20000d74 	.word	0x20000d74

080062c4 <prvProcessExpiredTimer>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
<<<<<<< HEAD
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b088      	sub	sp, #32
 8005fbc:	af02      	add	r7, sp, #8
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fc2:	4b22      	ldr	r3, [pc, #136]	; (800604c <prvProcessExpiredTimer+0x94>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	617b      	str	r3, [r7, #20]
=======
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b088      	sub	sp, #32
 80062c8:	af02      	add	r7, sp, #8
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062ce:	4b22      	ldr	r3, [pc, #136]	; (8006358 <prvProcessExpiredTimer+0x94>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	617b      	str	r3, [r7, #20]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
<<<<<<< HEAD
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	3304      	adds	r3, #4
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f7fe faff 	bl	80045d4 <uxListRemove>
=======
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	3304      	adds	r3, #4
 80062dc:	4618      	mov	r0, r3
 80062de:	f7fe faff 	bl	80048e0 <uxListRemove>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
<<<<<<< HEAD
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fdc:	f003 0304 	and.w	r3, r3, #4
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d021      	beq.n	8006028 <prvProcessExpiredTimer+0x70>
=======
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062e8:	f003 0304 	and.w	r3, r3, #4
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d021      	beq.n	8006334 <prvProcessExpiredTimer+0x70>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
<<<<<<< HEAD
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	699a      	ldr	r2, [r3, #24]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	18d1      	adds	r1, r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	683a      	ldr	r2, [r7, #0]
 8005ff0:	6978      	ldr	r0, [r7, #20]
 8005ff2:	f000 f8d1 	bl	8006198 <prvInsertTimerInActiveList>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d01e      	beq.n	800603a <prvProcessExpiredTimer+0x82>
=======
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	699a      	ldr	r2, [r3, #24]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	18d1      	adds	r1, r2, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	683a      	ldr	r2, [r7, #0]
 80062fc:	6978      	ldr	r0, [r7, #20]
 80062fe:	f000 f8d1 	bl	80064a4 <prvInsertTimerInActiveList>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d01e      	beq.n	8006346 <prvProcessExpiredTimer+0x82>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
<<<<<<< HEAD
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	9300      	str	r3, [sp, #0]
 8006000:	2300      	movs	r3, #0
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	2100      	movs	r1, #0
 8006006:	6978      	ldr	r0, [r7, #20]
 8006008:	f7ff ff8a 	bl	8005f20 <xTimerGenericCommand>
 800600c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d112      	bne.n	800603a <prvProcessExpiredTimer+0x82>
 8006014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006018:	f383 8811 	msr	BASEPRI, r3
 800601c:	f3bf 8f6f 	isb	sy
 8006020:	f3bf 8f4f 	dsb	sy
 8006024:	60fb      	str	r3, [r7, #12]
 8006026:	e7fe      	b.n	8006026 <prvProcessExpiredTimer+0x6e>
=======
 8006308:	2300      	movs	r3, #0
 800630a:	9300      	str	r3, [sp, #0]
 800630c:	2300      	movs	r3, #0
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	2100      	movs	r1, #0
 8006312:	6978      	ldr	r0, [r7, #20]
 8006314:	f7ff ff8a 	bl	800622c <xTimerGenericCommand>
 8006318:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d112      	bne.n	8006346 <prvProcessExpiredTimer+0x82>
 8006320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006324:	f383 8811 	msr	BASEPRI, r3
 8006328:	f3bf 8f6f 	isb	sy
 800632c:	f3bf 8f4f 	dsb	sy
 8006330:	60fb      	str	r3, [r7, #12]
 8006332:	e7fe      	b.n	8006332 <prvProcessExpiredTimer+0x6e>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
<<<<<<< HEAD
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800602e:	f023 0301 	bic.w	r3, r3, #1
 8006032:	b2da      	uxtb	r2, r3
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
=======
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800633a:	f023 0301 	bic.w	r3, r3, #1
 800633e:	b2da      	uxtb	r2, r3
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
<<<<<<< HEAD
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	6a1b      	ldr	r3, [r3, #32]
 800603e:	6978      	ldr	r0, [r7, #20]
 8006040:	4798      	blx	r3
}
 8006042:	bf00      	nop
 8006044:	3718      	adds	r7, #24
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	20000d70 	.word	0x20000d70

08006050 <prvTimerTask>:
=======
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	6a1b      	ldr	r3, [r3, #32]
 800634a:	6978      	ldr	r0, [r7, #20]
 800634c:	4798      	blx	r3
}
 800634e:	bf00      	nop
 8006350:	3718      	adds	r7, #24
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	20000d6c 	.word	0x20000d6c

0800635c <prvTimerTask>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
<<<<<<< HEAD
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
=======
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
<<<<<<< HEAD
 8006058:	f107 0308 	add.w	r3, r7, #8
 800605c:	4618      	mov	r0, r3
 800605e:	f000 f857 	bl	8006110 <prvGetNextExpireTime>
 8006062:	60f8      	str	r0, [r7, #12]
=======
 8006364:	f107 0308 	add.w	r3, r7, #8
 8006368:	4618      	mov	r0, r3
 800636a:	f000 f857 	bl	800641c <prvGetNextExpireTime>
 800636e:	60f8      	str	r0, [r7, #12]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
<<<<<<< HEAD
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	4619      	mov	r1, r3
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f000 f803 	bl	8006074 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800606e:	f000 f8d5 	bl	800621c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006072:	e7f1      	b.n	8006058 <prvTimerTask+0x8>

08006074 <prvProcessTimerOrBlockTask>:
=======
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	4619      	mov	r1, r3
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f000 f803 	bl	8006380 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800637a:	f000 f8d5 	bl	8006528 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800637e:	e7f1      	b.n	8006364 <prvTimerTask+0x8>

08006380 <prvProcessTimerOrBlockTask>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
<<<<<<< HEAD
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
=======
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
<<<<<<< HEAD
 800607e:	f7ff fa57 	bl	8005530 <vTaskSuspendAll>
=======
 800638a:	f7ff fa57 	bl	800583c <vTaskSuspendAll>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
<<<<<<< HEAD
 8006082:	f107 0308 	add.w	r3, r7, #8
 8006086:	4618      	mov	r0, r3
 8006088:	f000 f866 	bl	8006158 <prvSampleTimeNow>
 800608c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d130      	bne.n	80060f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10a      	bne.n	80060b0 <prvProcessTimerOrBlockTask+0x3c>
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d806      	bhi.n	80060b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80060a2:	f7ff fa53 	bl	800554c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80060a6:	68f9      	ldr	r1, [r7, #12]
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f7ff ff85 	bl	8005fb8 <prvProcessExpiredTimer>
=======
 800638e:	f107 0308 	add.w	r3, r7, #8
 8006392:	4618      	mov	r0, r3
 8006394:	f000 f866 	bl	8006464 <prvSampleTimeNow>
 8006398:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d130      	bne.n	8006402 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d10a      	bne.n	80063bc <prvProcessTimerOrBlockTask+0x3c>
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d806      	bhi.n	80063bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80063ae:	f7ff fa53 	bl	8005858 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80063b2:	68f9      	ldr	r1, [r7, #12]
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f7ff ff85 	bl	80062c4 <prvProcessExpiredTimer>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
<<<<<<< HEAD
 80060ae:	e024      	b.n	80060fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d008      	beq.n	80060c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80060b6:	4b13      	ldr	r3, [pc, #76]	; (8006104 <prvProcessTimerOrBlockTask+0x90>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d101      	bne.n	80060c4 <prvProcessTimerOrBlockTask+0x50>
 80060c0:	2301      	movs	r3, #1
 80060c2:	e000      	b.n	80060c6 <prvProcessTimerOrBlockTask+0x52>
 80060c4:	2300      	movs	r3, #0
 80060c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80060c8:	4b0f      	ldr	r3, [pc, #60]	; (8006108 <prvProcessTimerOrBlockTask+0x94>)
 80060ca:	6818      	ldr	r0, [r3, #0]
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	683a      	ldr	r2, [r7, #0]
 80060d4:	4619      	mov	r1, r3
 80060d6:	f7fe ff47 	bl	8004f68 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80060da:	f7ff fa37 	bl	800554c <xTaskResumeAll>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d10a      	bne.n	80060fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80060e4:	4b09      	ldr	r3, [pc, #36]	; (800610c <prvProcessTimerOrBlockTask+0x98>)
 80060e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060ea:	601a      	str	r2, [r3, #0]
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	f3bf 8f6f 	isb	sy
}
 80060f4:	e001      	b.n	80060fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80060f6:	f7ff fa29 	bl	800554c <xTaskResumeAll>
}
 80060fa:	bf00      	nop
 80060fc:	3710      	adds	r7, #16
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	20000d74 	.word	0x20000d74
 8006108:	20000d78 	.word	0x20000d78
 800610c:	e000ed04 	.word	0xe000ed04

08006110 <prvGetNextExpireTime>:
=======
 80063ba:	e024      	b.n	8006406 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d008      	beq.n	80063d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80063c2:	4b13      	ldr	r3, [pc, #76]	; (8006410 <prvProcessTimerOrBlockTask+0x90>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d101      	bne.n	80063d0 <prvProcessTimerOrBlockTask+0x50>
 80063cc:	2301      	movs	r3, #1
 80063ce:	e000      	b.n	80063d2 <prvProcessTimerOrBlockTask+0x52>
 80063d0:	2300      	movs	r3, #0
 80063d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80063d4:	4b0f      	ldr	r3, [pc, #60]	; (8006414 <prvProcessTimerOrBlockTask+0x94>)
 80063d6:	6818      	ldr	r0, [r3, #0]
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	683a      	ldr	r2, [r7, #0]
 80063e0:	4619      	mov	r1, r3
 80063e2:	f7fe ff47 	bl	8005274 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80063e6:	f7ff fa37 	bl	8005858 <xTaskResumeAll>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d10a      	bne.n	8006406 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80063f0:	4b09      	ldr	r3, [pc, #36]	; (8006418 <prvProcessTimerOrBlockTask+0x98>)
 80063f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063f6:	601a      	str	r2, [r3, #0]
 80063f8:	f3bf 8f4f 	dsb	sy
 80063fc:	f3bf 8f6f 	isb	sy
}
 8006400:	e001      	b.n	8006406 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006402:	f7ff fa29 	bl	8005858 <xTaskResumeAll>
}
 8006406:	bf00      	nop
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	20000d70 	.word	0x20000d70
 8006414:	20000d74 	.word	0x20000d74
 8006418:	e000ed04 	.word	0xe000ed04

0800641c <prvGetNextExpireTime>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
<<<<<<< HEAD
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
=======
 800641c:	b480      	push	{r7}
 800641e:	b085      	sub	sp, #20
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
<<<<<<< HEAD
 8006118:	4b0e      	ldr	r3, [pc, #56]	; (8006154 <prvGetNextExpireTime+0x44>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d101      	bne.n	8006126 <prvGetNextExpireTime+0x16>
 8006122:	2201      	movs	r2, #1
 8006124:	e000      	b.n	8006128 <prvGetNextExpireTime+0x18>
 8006126:	2200      	movs	r2, #0
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d105      	bne.n	8006140 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006134:	4b07      	ldr	r3, [pc, #28]	; (8006154 <prvGetNextExpireTime+0x44>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	60fb      	str	r3, [r7, #12]
 800613e:	e001      	b.n	8006144 <prvGetNextExpireTime+0x34>
=======
 8006424:	4b0e      	ldr	r3, [pc, #56]	; (8006460 <prvGetNextExpireTime+0x44>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d101      	bne.n	8006432 <prvGetNextExpireTime+0x16>
 800642e:	2201      	movs	r2, #1
 8006430:	e000      	b.n	8006434 <prvGetNextExpireTime+0x18>
 8006432:	2200      	movs	r2, #0
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d105      	bne.n	800644c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006440:	4b07      	ldr	r3, [pc, #28]	; (8006460 <prvGetNextExpireTime+0x44>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	60fb      	str	r3, [r7, #12]
 800644a:	e001      	b.n	8006450 <prvGetNextExpireTime+0x34>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
<<<<<<< HEAD
 8006140:	2300      	movs	r3, #0
 8006142:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006144:	68fb      	ldr	r3, [r7, #12]
}
 8006146:	4618      	mov	r0, r3
 8006148:	3714      	adds	r7, #20
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	20000d70 	.word	0x20000d70

08006158 <prvSampleTimeNow>:
=======
 800644c:	2300      	movs	r3, #0
 800644e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006450:	68fb      	ldr	r3, [r7, #12]
}
 8006452:	4618      	mov	r0, r3
 8006454:	3714      	adds	r7, #20
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop
 8006460:	20000d6c 	.word	0x20000d6c

08006464 <prvSampleTimeNow>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
<<<<<<< HEAD
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
=======
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
<<<<<<< HEAD
 8006160:	f7ff fa90 	bl	8005684 <xTaskGetTickCount>
 8006164:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006166:	4b0b      	ldr	r3, [pc, #44]	; (8006194 <prvSampleTimeNow+0x3c>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	429a      	cmp	r2, r3
 800616e:	d205      	bcs.n	800617c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006170:	f000 f930 	bl	80063d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	601a      	str	r2, [r3, #0]
 800617a:	e002      	b.n	8006182 <prvSampleTimeNow+0x2a>
=======
 800646c:	f7ff fa90 	bl	8005990 <xTaskGetTickCount>
 8006470:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006472:	4b0b      	ldr	r3, [pc, #44]	; (80064a0 <prvSampleTimeNow+0x3c>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	429a      	cmp	r2, r3
 800647a:	d205      	bcs.n	8006488 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800647c:	f000 f930 	bl	80066e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	601a      	str	r2, [r3, #0]
 8006486:	e002      	b.n	800648e <prvSampleTimeNow+0x2a>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
<<<<<<< HEAD
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006182:	4a04      	ldr	r2, [pc, #16]	; (8006194 <prvSampleTimeNow+0x3c>)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006188:	68fb      	ldr	r3, [r7, #12]
}
 800618a:	4618      	mov	r0, r3
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	20000d80 	.word	0x20000d80

08006198 <prvInsertTimerInActiveList>:
=======
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800648e:	4a04      	ldr	r2, [pc, #16]	; (80064a0 <prvSampleTimeNow+0x3c>)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006494:	68fb      	ldr	r3, [r7, #12]
}
 8006496:	4618      	mov	r0, r3
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	20000d7c 	.word	0x20000d7c

080064a4 <prvInsertTimerInActiveList>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
<<<<<<< HEAD
 8006198:	b580      	push	{r7, lr}
 800619a:	b086      	sub	sp, #24
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
 80061a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80061a6:	2300      	movs	r3, #0
 80061a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	68ba      	ldr	r2, [r7, #8]
 80061ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80061b6:	68ba      	ldr	r2, [r7, #8]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d812      	bhi.n	80061e4 <prvInsertTimerInActiveList+0x4c>
=======
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b086      	sub	sp, #24
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	607a      	str	r2, [r7, #4]
 80064b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80064b2:	2300      	movs	r3, #0
 80064b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	68ba      	ldr	r2, [r7, #8]
 80064ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80064c2:	68ba      	ldr	r2, [r7, #8]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d812      	bhi.n	80064f0 <prvInsertTimerInActiveList+0x4c>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	1ad2      	subs	r2, r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	699b      	ldr	r3, [r3, #24]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d302      	bcc.n	80061d2 <prvInsertTimerInActiveList+0x3a>
=======
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	1ad2      	subs	r2, r2, r3
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	699b      	ldr	r3, [r3, #24]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d302      	bcc.n	80064de <prvInsertTimerInActiveList+0x3a>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
<<<<<<< HEAD
 80061cc:	2301      	movs	r3, #1
 80061ce:	617b      	str	r3, [r7, #20]
 80061d0:	e01b      	b.n	800620a <prvInsertTimerInActiveList+0x72>
=======
 80064d8:	2301      	movs	r3, #1
 80064da:	617b      	str	r3, [r7, #20]
 80064dc:	e01b      	b.n	8006516 <prvInsertTimerInActiveList+0x72>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
<<<<<<< HEAD
 80061d2:	4b10      	ldr	r3, [pc, #64]	; (8006214 <prvInsertTimerInActiveList+0x7c>)
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	3304      	adds	r3, #4
 80061da:	4619      	mov	r1, r3
 80061dc:	4610      	mov	r0, r2
 80061de:	f7fe f9c0 	bl	8004562 <vListInsert>
 80061e2:	e012      	b.n	800620a <prvInsertTimerInActiveList+0x72>
=======
 80064de:	4b10      	ldr	r3, [pc, #64]	; (8006520 <prvInsertTimerInActiveList+0x7c>)
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	3304      	adds	r3, #4
 80064e6:	4619      	mov	r1, r3
 80064e8:	4610      	mov	r0, r2
 80064ea:	f7fe f9c0 	bl	800486e <vListInsert>
 80064ee:	e012      	b.n	8006516 <prvInsertTimerInActiveList+0x72>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
<<<<<<< HEAD
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d206      	bcs.n	80061fa <prvInsertTimerInActiveList+0x62>
 80061ec:	68ba      	ldr	r2, [r7, #8]
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d302      	bcc.n	80061fa <prvInsertTimerInActiveList+0x62>
=======
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d206      	bcs.n	8006506 <prvInsertTimerInActiveList+0x62>
 80064f8:	68ba      	ldr	r2, [r7, #8]
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d302      	bcc.n	8006506 <prvInsertTimerInActiveList+0x62>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
<<<<<<< HEAD
 80061f4:	2301      	movs	r3, #1
 80061f6:	617b      	str	r3, [r7, #20]
 80061f8:	e007      	b.n	800620a <prvInsertTimerInActiveList+0x72>
=======
 8006500:	2301      	movs	r3, #1
 8006502:	617b      	str	r3, [r7, #20]
 8006504:	e007      	b.n	8006516 <prvInsertTimerInActiveList+0x72>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
<<<<<<< HEAD
 80061fa:	4b07      	ldr	r3, [pc, #28]	; (8006218 <prvInsertTimerInActiveList+0x80>)
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	3304      	adds	r3, #4
 8006202:	4619      	mov	r1, r3
 8006204:	4610      	mov	r0, r2
 8006206:	f7fe f9ac 	bl	8004562 <vListInsert>
=======
 8006506:	4b07      	ldr	r3, [pc, #28]	; (8006524 <prvInsertTimerInActiveList+0x80>)
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	3304      	adds	r3, #4
 800650e:	4619      	mov	r1, r3
 8006510:	4610      	mov	r0, r2
 8006512:	f7fe f9ac 	bl	800486e <vListInsert>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		}
	}

	return xProcessTimerNow;
<<<<<<< HEAD
 800620a:	697b      	ldr	r3, [r7, #20]
}
 800620c:	4618      	mov	r0, r3
 800620e:	3718      	adds	r7, #24
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}
 8006214:	20000d74 	.word	0x20000d74
 8006218:	20000d70 	.word	0x20000d70

0800621c <prvProcessReceivedCommands>:
=======
 8006516:	697b      	ldr	r3, [r7, #20]
}
 8006518:	4618      	mov	r0, r3
 800651a:	3718      	adds	r7, #24
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	20000d70 	.word	0x20000d70
 8006524:	20000d6c 	.word	0x20000d6c

08006528 <prvProcessReceivedCommands>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
<<<<<<< HEAD
 800621c:	b580      	push	{r7, lr}
 800621e:	b08e      	sub	sp, #56	; 0x38
 8006220:	af02      	add	r7, sp, #8
=======
 8006528:	b580      	push	{r7, lr}
 800652a:	b08e      	sub	sp, #56	; 0x38
 800652c:	af02      	add	r7, sp, #8
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
<<<<<<< HEAD
 8006222:	e0c6      	b.n	80063b2 <prvProcessReceivedCommands+0x196>
=======
 800652e:	e0c6      	b.n	80066be <prvProcessReceivedCommands+0x196>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
<<<<<<< HEAD
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2b00      	cmp	r3, #0
 8006228:	da17      	bge.n	800625a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800622a:	1d3b      	adds	r3, r7, #4
 800622c:	3304      	adds	r3, #4
 800622e:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2b00      	cmp	r3, #0
 8006534:	da17      	bge.n	8006566 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006536:	1d3b      	adds	r3, r7, #4
 8006538:	3304      	adds	r3, #4
 800653a:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
<<<<<<< HEAD
 8006230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006232:	2b00      	cmp	r3, #0
 8006234:	d109      	bne.n	800624a <prvProcessReceivedCommands+0x2e>
 8006236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800623a:	f383 8811 	msr	BASEPRI, r3
 800623e:	f3bf 8f6f 	isb	sy
 8006242:	f3bf 8f4f 	dsb	sy
 8006246:	61fb      	str	r3, [r7, #28]
 8006248:	e7fe      	b.n	8006248 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800624a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006250:	6850      	ldr	r0, [r2, #4]
 8006252:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006254:	6892      	ldr	r2, [r2, #8]
 8006256:	4611      	mov	r1, r2
 8006258:	4798      	blx	r3
=======
 800653c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653e:	2b00      	cmp	r3, #0
 8006540:	d109      	bne.n	8006556 <prvProcessReceivedCommands+0x2e>
 8006542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006546:	f383 8811 	msr	BASEPRI, r3
 800654a:	f3bf 8f6f 	isb	sy
 800654e:	f3bf 8f4f 	dsb	sy
 8006552:	61fb      	str	r3, [r7, #28]
 8006554:	e7fe      	b.n	8006554 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800655c:	6850      	ldr	r0, [r2, #4]
 800655e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006560:	6892      	ldr	r2, [r2, #8]
 8006562:	4611      	mov	r1, r2
 8006564:	4798      	blx	r3
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
<<<<<<< HEAD
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2b00      	cmp	r3, #0
 800625e:	f2c0 80a7 	blt.w	80063b0 <prvProcessReceivedCommands+0x194>
=======
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2b00      	cmp	r3, #0
 800656a:	f2c0 80a7 	blt.w	80066bc <prvProcessReceivedCommands+0x194>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
<<<<<<< HEAD
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d004      	beq.n	8006278 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800626e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006270:	3304      	adds	r3, #4
 8006272:	4618      	mov	r0, r3
 8006274:	f7fe f9ae 	bl	80045d4 <uxListRemove>
=======
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d004      	beq.n	8006584 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800657a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657c:	3304      	adds	r3, #4
 800657e:	4618      	mov	r0, r3
 8006580:	f7fe f9ae 	bl	80048e0 <uxListRemove>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
<<<<<<< HEAD
 8006278:	463b      	mov	r3, r7
 800627a:	4618      	mov	r0, r3
 800627c:	f7ff ff6c 	bl	8006158 <prvSampleTimeNow>
 8006280:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2b09      	cmp	r3, #9
 8006286:	f200 8094 	bhi.w	80063b2 <prvProcessReceivedCommands+0x196>
 800628a:	a201      	add	r2, pc, #4	; (adr r2, 8006290 <prvProcessReceivedCommands+0x74>)
 800628c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006290:	080062b9 	.word	0x080062b9
 8006294:	080062b9 	.word	0x080062b9
 8006298:	080062b9 	.word	0x080062b9
 800629c:	0800632b 	.word	0x0800632b
 80062a0:	0800633f 	.word	0x0800633f
 80062a4:	08006387 	.word	0x08006387
 80062a8:	080062b9 	.word	0x080062b9
 80062ac:	080062b9 	.word	0x080062b9
 80062b0:	0800632b 	.word	0x0800632b
 80062b4:	0800633f 	.word	0x0800633f
=======
 8006584:	463b      	mov	r3, r7
 8006586:	4618      	mov	r0, r3
 8006588:	f7ff ff6c 	bl	8006464 <prvSampleTimeNow>
 800658c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2b09      	cmp	r3, #9
 8006592:	f200 8094 	bhi.w	80066be <prvProcessReceivedCommands+0x196>
 8006596:	a201      	add	r2, pc, #4	; (adr r2, 800659c <prvProcessReceivedCommands+0x74>)
 8006598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659c:	080065c5 	.word	0x080065c5
 80065a0:	080065c5 	.word	0x080065c5
 80065a4:	080065c5 	.word	0x080065c5
 80065a8:	08006637 	.word	0x08006637
 80065ac:	0800664b 	.word	0x0800664b
 80065b0:	08006693 	.word	0x08006693
 80065b4:	080065c5 	.word	0x080065c5
 80065b8:	080065c5 	.word	0x080065c5
 80065bc:	08006637 	.word	0x08006637
 80065c0:	0800664b 	.word	0x0800664b
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
<<<<<<< HEAD
 80062b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062be:	f043 0301 	orr.w	r3, r3, #1
 80062c2:	b2da      	uxtb	r2, r3
 80062c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ce:	699b      	ldr	r3, [r3, #24]
 80062d0:	18d1      	adds	r1, r2, r3
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062d8:	f7ff ff5e 	bl	8006198 <prvInsertTimerInActiveList>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d067      	beq.n	80063b2 <prvProcessReceivedCommands+0x196>
=======
 80065c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065ca:	f043 0301 	orr.w	r3, r3, #1
 80065ce:	b2da      	uxtb	r2, r3
 80065d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80065d6:	68ba      	ldr	r2, [r7, #8]
 80065d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	18d1      	adds	r1, r2, r3
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065e4:	f7ff ff5e 	bl	80064a4 <prvInsertTimerInActiveList>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d067      	beq.n	80066be <prvProcessReceivedCommands+0x196>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
<<<<<<< HEAD
 80062e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062e8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062f0:	f003 0304 	and.w	r3, r3, #4
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d05c      	beq.n	80063b2 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	441a      	add	r2, r3
 8006300:	2300      	movs	r3, #0
 8006302:	9300      	str	r3, [sp, #0]
 8006304:	2300      	movs	r3, #0
 8006306:	2100      	movs	r1, #0
 8006308:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800630a:	f7ff fe09 	bl	8005f20 <xTimerGenericCommand>
 800630e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006310:	6a3b      	ldr	r3, [r7, #32]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d14d      	bne.n	80063b2 <prvProcessReceivedCommands+0x196>
 8006316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800631a:	f383 8811 	msr	BASEPRI, r3
 800631e:	f3bf 8f6f 	isb	sy
 8006322:	f3bf 8f4f 	dsb	sy
 8006326:	61bb      	str	r3, [r7, #24]
 8006328:	e7fe      	b.n	8006328 <prvProcessReceivedCommands+0x10c>
=======
 80065ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f0:	6a1b      	ldr	r3, [r3, #32]
 80065f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80065f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065fc:	f003 0304 	and.w	r3, r3, #4
 8006600:	2b00      	cmp	r3, #0
 8006602:	d05c      	beq.n	80066be <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006608:	699b      	ldr	r3, [r3, #24]
 800660a:	441a      	add	r2, r3
 800660c:	2300      	movs	r3, #0
 800660e:	9300      	str	r3, [sp, #0]
 8006610:	2300      	movs	r3, #0
 8006612:	2100      	movs	r1, #0
 8006614:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006616:	f7ff fe09 	bl	800622c <xTimerGenericCommand>
 800661a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800661c:	6a3b      	ldr	r3, [r7, #32]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d14d      	bne.n	80066be <prvProcessReceivedCommands+0x196>
 8006622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006626:	f383 8811 	msr	BASEPRI, r3
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	61bb      	str	r3, [r7, #24]
 8006634:	e7fe      	b.n	8006634 <prvProcessReceivedCommands+0x10c>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
<<<<<<< HEAD
 800632a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006330:	f023 0301 	bic.w	r3, r3, #1
 8006334:	b2da      	uxtb	r2, r3
 8006336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006338:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800633c:	e039      	b.n	80063b2 <prvProcessReceivedCommands+0x196>
=======
 8006636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006638:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800663c:	f023 0301 	bic.w	r3, r3, #1
 8006640:	b2da      	uxtb	r2, r3
 8006642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006644:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006648:	e039      	b.n	80066be <prvProcessReceivedCommands+0x196>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
<<<<<<< HEAD
 800633e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006340:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006344:	f043 0301 	orr.w	r3, r3, #1
 8006348:	b2da      	uxtb	r2, r3
 800634a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006350:	68ba      	ldr	r2, [r7, #8]
 8006352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006354:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d109      	bne.n	8006372 <prvProcessReceivedCommands+0x156>
 800635e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006362:	f383 8811 	msr	BASEPRI, r3
 8006366:	f3bf 8f6f 	isb	sy
 800636a:	f3bf 8f4f 	dsb	sy
 800636e:	617b      	str	r3, [r7, #20]
 8006370:	e7fe      	b.n	8006370 <prvProcessReceivedCommands+0x154>
=======
 800664a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006650:	f043 0301 	orr.w	r3, r3, #1
 8006654:	b2da      	uxtb	r2, r3
 8006656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006658:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800665c:	68ba      	ldr	r2, [r7, #8]
 800665e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006660:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d109      	bne.n	800667e <prvProcessReceivedCommands+0x156>
 800666a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800666e:	f383 8811 	msr	BASEPRI, r3
 8006672:	f3bf 8f6f 	isb	sy
 8006676:	f3bf 8f4f 	dsb	sy
 800667a:	617b      	str	r3, [r7, #20]
 800667c:	e7fe      	b.n	800667c <prvProcessReceivedCommands+0x154>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
<<<<<<< HEAD
 8006372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006374:	699a      	ldr	r2, [r3, #24]
 8006376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006378:	18d1      	adds	r1, r2, r3
 800637a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800637e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006380:	f7ff ff0a 	bl	8006198 <prvInsertTimerInActiveList>
					break;
 8006384:	e015      	b.n	80063b2 <prvProcessReceivedCommands+0x196>
=======
 800667e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006680:	699a      	ldr	r2, [r3, #24]
 8006682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006684:	18d1      	adds	r1, r2, r3
 8006686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800668a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800668c:	f7ff ff0a 	bl	80064a4 <prvInsertTimerInActiveList>
					break;
 8006690:	e015      	b.n	80066be <prvProcessReceivedCommands+0x196>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
<<<<<<< HEAD
 8006386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006388:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800638c:	f003 0302 	and.w	r3, r3, #2
 8006390:	2b00      	cmp	r3, #0
 8006392:	d103      	bne.n	800639c <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8006394:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006396:	f000 fbc5 	bl	8006b24 <vPortFree>
 800639a:	e00a      	b.n	80063b2 <prvProcessReceivedCommands+0x196>
=======
 8006692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006694:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006698:	f003 0302 	and.w	r3, r3, #2
 800669c:	2b00      	cmp	r3, #0
 800669e:	d103      	bne.n	80066a8 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80066a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066a2:	f000 fbc7 	bl	8006e34 <vPortFree>
 80066a6:	e00a      	b.n	80066be <prvProcessReceivedCommands+0x196>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
<<<<<<< HEAD
 800639c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063a2:	f023 0301 	bic.w	r3, r3, #1
 80063a6:	b2da      	uxtb	r2, r3
 80063a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
=======
 80066a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066ae:	f023 0301 	bic.w	r3, r3, #1
 80066b2:	b2da      	uxtb	r2, r3
 80066b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
<<<<<<< HEAD
 80063ae:	e000      	b.n	80063b2 <prvProcessReceivedCommands+0x196>
=======
 80066ba:	e000      	b.n	80066be <prvProcessReceivedCommands+0x196>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
<<<<<<< HEAD
 80063b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80063b2:	4b07      	ldr	r3, [pc, #28]	; (80063d0 <prvProcessReceivedCommands+0x1b4>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	1d39      	adds	r1, r7, #4
 80063b8:	2200      	movs	r2, #0
 80063ba:	4618      	mov	r0, r3
 80063bc:	f7fe fbc0 	bl	8004b40 <xQueueReceive>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	f47f af2e 	bne.w	8006224 <prvProcessReceivedCommands+0x8>
	}
}
 80063c8:	bf00      	nop
 80063ca:	3730      	adds	r7, #48	; 0x30
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	20000d78 	.word	0x20000d78

080063d4 <prvSwitchTimerLists>:
=======
 80066bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80066be:	4b07      	ldr	r3, [pc, #28]	; (80066dc <prvProcessReceivedCommands+0x1b4>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	1d39      	adds	r1, r7, #4
 80066c4:	2200      	movs	r2, #0
 80066c6:	4618      	mov	r0, r3
 80066c8:	f7fe fbc0 	bl	8004e4c <xQueueReceive>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f47f af2e 	bne.w	8006530 <prvProcessReceivedCommands+0x8>
	}
}
 80066d4:	bf00      	nop
 80066d6:	3730      	adds	r7, #48	; 0x30
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	20000d74 	.word	0x20000d74

080066e0 <prvSwitchTimerLists>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
<<<<<<< HEAD
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b088      	sub	sp, #32
 80063d8:	af02      	add	r7, sp, #8
=======
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b088      	sub	sp, #32
 80066e4:	af02      	add	r7, sp, #8
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
<<<<<<< HEAD
 80063da:	e047      	b.n	800646c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80063dc:	4b2d      	ldr	r3, [pc, #180]	; (8006494 <prvSwitchTimerLists+0xc0>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063e6:	4b2b      	ldr	r3, [pc, #172]	; (8006494 <prvSwitchTimerLists+0xc0>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	3304      	adds	r3, #4
 80063f4:	4618      	mov	r0, r3
 80063f6:	f7fe f8ed 	bl	80045d4 <uxListRemove>
=======
 80066e6:	e047      	b.n	8006778 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066e8:	4b2d      	ldr	r3, [pc, #180]	; (80067a0 <prvSwitchTimerLists+0xc0>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066f2:	4b2b      	ldr	r3, [pc, #172]	; (80067a0 <prvSwitchTimerLists+0xc0>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	3304      	adds	r3, #4
 8006700:	4618      	mov	r0, r3
 8006702:	f7fe f8ed 	bl	80048e0 <uxListRemove>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
<<<<<<< HEAD
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	68f8      	ldr	r0, [r7, #12]
 8006400:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006408:	f003 0304 	and.w	r3, r3, #4
 800640c:	2b00      	cmp	r3, #0
 800640e:	d02d      	beq.n	800646c <prvSwitchTimerLists+0x98>
=======
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	68f8      	ldr	r0, [r7, #12]
 800670c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006714:	f003 0304 	and.w	r3, r3, #4
 8006718:	2b00      	cmp	r3, #0
 800671a:	d02d      	beq.n	8006778 <prvSwitchTimerLists+0x98>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
<<<<<<< HEAD
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	4413      	add	r3, r2
 8006418:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800641a:	68ba      	ldr	r2, [r7, #8]
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	429a      	cmp	r2, r3
 8006420:	d90e      	bls.n	8006440 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	68ba      	ldr	r2, [r7, #8]
 8006426:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800642e:	4b19      	ldr	r3, [pc, #100]	; (8006494 <prvSwitchTimerLists+0xc0>)
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	3304      	adds	r3, #4
 8006436:	4619      	mov	r1, r3
 8006438:	4610      	mov	r0, r2
 800643a:	f7fe f892 	bl	8004562 <vListInsert>
 800643e:	e015      	b.n	800646c <prvSwitchTimerLists+0x98>
=======
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	699b      	ldr	r3, [r3, #24]
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	4413      	add	r3, r2
 8006724:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006726:	68ba      	ldr	r2, [r7, #8]
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	429a      	cmp	r2, r3
 800672c:	d90e      	bls.n	800674c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	68ba      	ldr	r2, [r7, #8]
 8006732:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800673a:	4b19      	ldr	r3, [pc, #100]	; (80067a0 <prvSwitchTimerLists+0xc0>)
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	3304      	adds	r3, #4
 8006742:	4619      	mov	r1, r3
 8006744:	4610      	mov	r0, r2
 8006746:	f7fe f892 	bl	800486e <vListInsert>
 800674a:	e015      	b.n	8006778 <prvSwitchTimerLists+0x98>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
<<<<<<< HEAD
 8006440:	2300      	movs	r3, #0
 8006442:	9300      	str	r3, [sp, #0]
 8006444:	2300      	movs	r3, #0
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	2100      	movs	r1, #0
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f7ff fd68 	bl	8005f20 <xTimerGenericCommand>
 8006450:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d109      	bne.n	800646c <prvSwitchTimerLists+0x98>
 8006458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645c:	f383 8811 	msr	BASEPRI, r3
 8006460:	f3bf 8f6f 	isb	sy
 8006464:	f3bf 8f4f 	dsb	sy
 8006468:	603b      	str	r3, [r7, #0]
 800646a:	e7fe      	b.n	800646a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800646c:	4b09      	ldr	r3, [pc, #36]	; (8006494 <prvSwitchTimerLists+0xc0>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1b2      	bne.n	80063dc <prvSwitchTimerLists+0x8>
=======
 800674c:	2300      	movs	r3, #0
 800674e:	9300      	str	r3, [sp, #0]
 8006750:	2300      	movs	r3, #0
 8006752:	693a      	ldr	r2, [r7, #16]
 8006754:	2100      	movs	r1, #0
 8006756:	68f8      	ldr	r0, [r7, #12]
 8006758:	f7ff fd68 	bl	800622c <xTimerGenericCommand>
 800675c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d109      	bne.n	8006778 <prvSwitchTimerLists+0x98>
 8006764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006768:	f383 8811 	msr	BASEPRI, r3
 800676c:	f3bf 8f6f 	isb	sy
 8006770:	f3bf 8f4f 	dsb	sy
 8006774:	603b      	str	r3, [r7, #0]
 8006776:	e7fe      	b.n	8006776 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006778:	4b09      	ldr	r3, [pc, #36]	; (80067a0 <prvSwitchTimerLists+0xc0>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1b2      	bne.n	80066e8 <prvSwitchTimerLists+0x8>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
<<<<<<< HEAD
 8006476:	4b07      	ldr	r3, [pc, #28]	; (8006494 <prvSwitchTimerLists+0xc0>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800647c:	4b06      	ldr	r3, [pc, #24]	; (8006498 <prvSwitchTimerLists+0xc4>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a04      	ldr	r2, [pc, #16]	; (8006494 <prvSwitchTimerLists+0xc0>)
 8006482:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006484:	4a04      	ldr	r2, [pc, #16]	; (8006498 <prvSwitchTimerLists+0xc4>)
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	6013      	str	r3, [r2, #0]
}
 800648a:	bf00      	nop
 800648c:	3718      	adds	r7, #24
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	20000d70 	.word	0x20000d70
 8006498:	20000d74 	.word	0x20000d74

0800649c <prvCheckForValidListAndQueue>:
=======
 8006782:	4b07      	ldr	r3, [pc, #28]	; (80067a0 <prvSwitchTimerLists+0xc0>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006788:	4b06      	ldr	r3, [pc, #24]	; (80067a4 <prvSwitchTimerLists+0xc4>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a04      	ldr	r2, [pc, #16]	; (80067a0 <prvSwitchTimerLists+0xc0>)
 800678e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006790:	4a04      	ldr	r2, [pc, #16]	; (80067a4 <prvSwitchTimerLists+0xc4>)
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	6013      	str	r3, [r2, #0]
}
 8006796:	bf00      	nop
 8006798:	3718      	adds	r7, #24
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop
 80067a0:	20000d6c 	.word	0x20000d6c
 80067a4:	20000d70 	.word	0x20000d70

080067a8 <prvCheckForValidListAndQueue>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
<<<<<<< HEAD
 800649c:	b580      	push	{r7, lr}
 800649e:	b082      	sub	sp, #8
 80064a0:	af02      	add	r7, sp, #8
=======
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af02      	add	r7, sp, #8
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
<<<<<<< HEAD
 80064a2:	f000 f963 	bl	800676c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80064a6:	4b15      	ldr	r3, [pc, #84]	; (80064fc <prvCheckForValidListAndQueue+0x60>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d120      	bne.n	80064f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80064ae:	4814      	ldr	r0, [pc, #80]	; (8006500 <prvCheckForValidListAndQueue+0x64>)
 80064b0:	f7fe f806 	bl	80044c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80064b4:	4813      	ldr	r0, [pc, #76]	; (8006504 <prvCheckForValidListAndQueue+0x68>)
 80064b6:	f7fe f803 	bl	80044c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80064ba:	4b13      	ldr	r3, [pc, #76]	; (8006508 <prvCheckForValidListAndQueue+0x6c>)
 80064bc:	4a10      	ldr	r2, [pc, #64]	; (8006500 <prvCheckForValidListAndQueue+0x64>)
 80064be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80064c0:	4b12      	ldr	r3, [pc, #72]	; (800650c <prvCheckForValidListAndQueue+0x70>)
 80064c2:	4a10      	ldr	r2, [pc, #64]	; (8006504 <prvCheckForValidListAndQueue+0x68>)
 80064c4:	601a      	str	r2, [r3, #0]
=======
 80067ae:	f000 f965 	bl	8006a7c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80067b2:	4b15      	ldr	r3, [pc, #84]	; (8006808 <prvCheckForValidListAndQueue+0x60>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d120      	bne.n	80067fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80067ba:	4814      	ldr	r0, [pc, #80]	; (800680c <prvCheckForValidListAndQueue+0x64>)
 80067bc:	f7fe f806 	bl	80047cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80067c0:	4813      	ldr	r0, [pc, #76]	; (8006810 <prvCheckForValidListAndQueue+0x68>)
 80067c2:	f7fe f803 	bl	80047cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80067c6:	4b13      	ldr	r3, [pc, #76]	; (8006814 <prvCheckForValidListAndQueue+0x6c>)
 80067c8:	4a10      	ldr	r2, [pc, #64]	; (800680c <prvCheckForValidListAndQueue+0x64>)
 80067ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80067cc:	4b12      	ldr	r3, [pc, #72]	; (8006818 <prvCheckForValidListAndQueue+0x70>)
 80067ce:	4a10      	ldr	r2, [pc, #64]	; (8006810 <prvCheckForValidListAndQueue+0x68>)
 80067d0:	601a      	str	r2, [r3, #0]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
<<<<<<< HEAD
 80064c6:	2300      	movs	r3, #0
 80064c8:	9300      	str	r3, [sp, #0]
 80064ca:	4b11      	ldr	r3, [pc, #68]	; (8006510 <prvCheckForValidListAndQueue+0x74>)
 80064cc:	4a11      	ldr	r2, [pc, #68]	; (8006514 <prvCheckForValidListAndQueue+0x78>)
 80064ce:	2110      	movs	r1, #16
 80064d0:	200a      	movs	r0, #10
 80064d2:	f7fe f911 	bl	80046f8 <xQueueGenericCreateStatic>
 80064d6:	4602      	mov	r2, r0
 80064d8:	4b08      	ldr	r3, [pc, #32]	; (80064fc <prvCheckForValidListAndQueue+0x60>)
 80064da:	601a      	str	r2, [r3, #0]
=======
 80067d2:	2300      	movs	r3, #0
 80067d4:	9300      	str	r3, [sp, #0]
 80067d6:	4b11      	ldr	r3, [pc, #68]	; (800681c <prvCheckForValidListAndQueue+0x74>)
 80067d8:	4a11      	ldr	r2, [pc, #68]	; (8006820 <prvCheckForValidListAndQueue+0x78>)
 80067da:	2110      	movs	r1, #16
 80067dc:	200a      	movs	r0, #10
 80067de:	f7fe f911 	bl	8004a04 <xQueueGenericCreateStatic>
 80067e2:	4602      	mov	r2, r0
 80067e4:	4b08      	ldr	r3, [pc, #32]	; (8006808 <prvCheckForValidListAndQueue+0x60>)
 80067e6:	601a      	str	r2, [r3, #0]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
<<<<<<< HEAD
 80064dc:	4b07      	ldr	r3, [pc, #28]	; (80064fc <prvCheckForValidListAndQueue+0x60>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d005      	beq.n	80064f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80064e4:	4b05      	ldr	r3, [pc, #20]	; (80064fc <prvCheckForValidListAndQueue+0x60>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	490b      	ldr	r1, [pc, #44]	; (8006518 <prvCheckForValidListAndQueue+0x7c>)
 80064ea:	4618      	mov	r0, r3
 80064ec:	f7fe fd14 	bl	8004f18 <vQueueAddToRegistry>
=======
 80067e8:	4b07      	ldr	r3, [pc, #28]	; (8006808 <prvCheckForValidListAndQueue+0x60>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d005      	beq.n	80067fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80067f0:	4b05      	ldr	r3, [pc, #20]	; (8006808 <prvCheckForValidListAndQueue+0x60>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	490b      	ldr	r1, [pc, #44]	; (8006824 <prvCheckForValidListAndQueue+0x7c>)
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7fe fd14 	bl	8005224 <vQueueAddToRegistry>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 80064f0:	f000 f96a 	bl	80067c8 <vPortExitCritical>
}
 80064f4:	bf00      	nop
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	20000d78 	.word	0x20000d78
 8006500:	20000d48 	.word	0x20000d48
 8006504:	20000d5c 	.word	0x20000d5c
 8006508:	20000d70 	.word	0x20000d70
 800650c:	20000d74 	.word	0x20000d74
 8006510:	20000e24 	.word	0x20000e24
 8006514:	20000d84 	.word	0x20000d84
 8006518:	080070c8 	.word	0x080070c8

0800651c <pxPortInitialiseStack>:
=======
 80067fc:	f000 f96c 	bl	8006ad8 <vPortExitCritical>
}
 8006800:	bf00      	nop
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	20000d74 	.word	0x20000d74
 800680c:	20000d44 	.word	0x20000d44
 8006810:	20000d58 	.word	0x20000d58
 8006814:	20000d6c 	.word	0x20000d6c
 8006818:	20000d70 	.word	0x20000d70
 800681c:	20000e20 	.word	0x20000e20
 8006820:	20000d80 	.word	0x20000d80
 8006824:	08007b50 	.word	0x08007b50

08006828 <pxPortInitialiseStack>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
<<<<<<< HEAD
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	607a      	str	r2, [r7, #4]
=======
 8006828:	b480      	push	{r7}
 800682a:	b085      	sub	sp, #20
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	607a      	str	r2, [r7, #4]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
<<<<<<< HEAD
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	3b04      	subs	r3, #4
 800652c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006534:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	3b04      	subs	r3, #4
 800653a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	f023 0201 	bic.w	r2, r3, #1
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	3b04      	subs	r3, #4
 800654a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800654c:	4a0c      	ldr	r2, [pc, #48]	; (8006580 <pxPortInitialiseStack+0x64>)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	3b14      	subs	r3, #20
 8006556:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	601a      	str	r2, [r3, #0]
=======
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	3b04      	subs	r3, #4
 8006838:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006840:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	3b04      	subs	r3, #4
 8006846:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	f023 0201 	bic.w	r2, r3, #1
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	3b04      	subs	r3, #4
 8006856:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006858:	4a0c      	ldr	r2, [pc, #48]	; (800688c <pxPortInitialiseStack+0x64>)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	3b14      	subs	r3, #20
 8006862:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	601a      	str	r2, [r3, #0]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
<<<<<<< HEAD
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	3b04      	subs	r3, #4
 8006562:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f06f 0202 	mvn.w	r2, #2
 800656a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	3b20      	subs	r3, #32
 8006570:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006572:	68fb      	ldr	r3, [r7, #12]
}
 8006574:	4618      	mov	r0, r3
 8006576:	3714      	adds	r7, #20
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr
 8006580:	08006585 	.word	0x08006585

08006584 <prvTaskExitError>:
=======
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	3b04      	subs	r3, #4
 800686e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f06f 0202 	mvn.w	r2, #2
 8006876:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	3b20      	subs	r3, #32
 800687c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800687e:	68fb      	ldr	r3, [r7, #12]
}
 8006880:	4618      	mov	r0, r3
 8006882:	3714      	adds	r7, #20
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr
 800688c:	08006891 	.word	0x08006891

08006890 <prvTaskExitError>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
<<<<<<< HEAD
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800658a:	2300      	movs	r3, #0
 800658c:	607b      	str	r3, [r7, #4]
=======
 8006890:	b480      	push	{r7}
 8006892:	b085      	sub	sp, #20
 8006894:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006896:	2300      	movs	r3, #0
 8006898:	607b      	str	r3, [r7, #4]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
<<<<<<< HEAD
 800658e:	4b11      	ldr	r3, [pc, #68]	; (80065d4 <prvTaskExitError+0x50>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006596:	d009      	beq.n	80065ac <prvTaskExitError+0x28>
 8006598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659c:	f383 8811 	msr	BASEPRI, r3
 80065a0:	f3bf 8f6f 	isb	sy
 80065a4:	f3bf 8f4f 	dsb	sy
 80065a8:	60fb      	str	r3, [r7, #12]
 80065aa:	e7fe      	b.n	80065aa <prvTaskExitError+0x26>
 80065ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b0:	f383 8811 	msr	BASEPRI, r3
 80065b4:	f3bf 8f6f 	isb	sy
 80065b8:	f3bf 8f4f 	dsb	sy
 80065bc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80065be:	bf00      	nop
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d0fc      	beq.n	80065c0 <prvTaskExitError+0x3c>
=======
 800689a:	4b11      	ldr	r3, [pc, #68]	; (80068e0 <prvTaskExitError+0x50>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068a2:	d009      	beq.n	80068b8 <prvTaskExitError+0x28>
 80068a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a8:	f383 8811 	msr	BASEPRI, r3
 80068ac:	f3bf 8f6f 	isb	sy
 80068b0:	f3bf 8f4f 	dsb	sy
 80068b4:	60fb      	str	r3, [r7, #12]
 80068b6:	e7fe      	b.n	80068b6 <prvTaskExitError+0x26>
 80068b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068bc:	f383 8811 	msr	BASEPRI, r3
 80068c0:	f3bf 8f6f 	isb	sy
 80068c4:	f3bf 8f4f 	dsb	sy
 80068c8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80068ca:	bf00      	nop
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d0fc      	beq.n	80068cc <prvTaskExitError+0x3c>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
<<<<<<< HEAD
 80065c6:	bf00      	nop
 80065c8:	3714      	adds	r7, #20
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	2000000c 	.word	0x2000000c
	...

080065e0 <SVC_Handler>:
=======
 80068d2:	bf00      	nop
 80068d4:	3714      	adds	r7, #20
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop
 80068e0:	2000000c 	.word	0x2000000c
	...

080068f0 <SVC_Handler>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
<<<<<<< HEAD
 80065e0:	4b07      	ldr	r3, [pc, #28]	; (8006600 <pxCurrentTCBConst2>)
 80065e2:	6819      	ldr	r1, [r3, #0]
 80065e4:	6808      	ldr	r0, [r1, #0]
 80065e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ea:	f380 8809 	msr	PSP, r0
 80065ee:	f3bf 8f6f 	isb	sy
 80065f2:	f04f 0000 	mov.w	r0, #0
 80065f6:	f380 8811 	msr	BASEPRI, r0
 80065fa:	4770      	bx	lr
 80065fc:	f3af 8000 	nop.w

08006600 <pxCurrentTCBConst2>:
 8006600:	20000848 	.word	0x20000848
=======
 80068f0:	4b07      	ldr	r3, [pc, #28]	; (8006910 <pxCurrentTCBConst2>)
 80068f2:	6819      	ldr	r1, [r3, #0]
 80068f4:	6808      	ldr	r0, [r1, #0]
 80068f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068fa:	f380 8809 	msr	PSP, r0
 80068fe:	f3bf 8f6f 	isb	sy
 8006902:	f04f 0000 	mov.w	r0, #0
 8006906:	f380 8811 	msr	BASEPRI, r0
 800690a:	4770      	bx	lr
 800690c:	f3af 8000 	nop.w

08006910 <pxCurrentTCBConst2>:
 8006910:	20000844 	.word	0x20000844
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
<<<<<<< HEAD
 8006604:	bf00      	nop
 8006606:	bf00      	nop

08006608 <prvPortStartFirstTask>:
=======
 8006914:	bf00      	nop
 8006916:	bf00      	nop

08006918 <prvPortStartFirstTask>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
<<<<<<< HEAD
 8006608:	4808      	ldr	r0, [pc, #32]	; (800662c <prvPortStartFirstTask+0x24>)
 800660a:	6800      	ldr	r0, [r0, #0]
 800660c:	6800      	ldr	r0, [r0, #0]
 800660e:	f380 8808 	msr	MSP, r0
 8006612:	f04f 0000 	mov.w	r0, #0
 8006616:	f380 8814 	msr	CONTROL, r0
 800661a:	b662      	cpsie	i
 800661c:	b661      	cpsie	f
 800661e:	f3bf 8f4f 	dsb	sy
 8006622:	f3bf 8f6f 	isb	sy
 8006626:	df00      	svc	0
 8006628:	bf00      	nop
=======
 8006918:	4808      	ldr	r0, [pc, #32]	; (800693c <prvPortStartFirstTask+0x24>)
 800691a:	6800      	ldr	r0, [r0, #0]
 800691c:	6800      	ldr	r0, [r0, #0]
 800691e:	f380 8808 	msr	MSP, r0
 8006922:	f04f 0000 	mov.w	r0, #0
 8006926:	f380 8814 	msr	CONTROL, r0
 800692a:	b662      	cpsie	i
 800692c:	b661      	cpsie	f
 800692e:	f3bf 8f4f 	dsb	sy
 8006932:	f3bf 8f6f 	isb	sy
 8006936:	df00      	svc	0
 8006938:	bf00      	nop
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
<<<<<<< HEAD
 800662a:	bf00      	nop
 800662c:	e000ed08 	.word	0xe000ed08

08006630 <xPortStartScheduler>:
=======
 800693a:	bf00      	nop
 800693c:	e000ed08 	.word	0xe000ed08

08006940 <xPortStartScheduler>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
<<<<<<< HEAD
 8006630:	b580      	push	{r7, lr}
 8006632:	b086      	sub	sp, #24
 8006634:	af00      	add	r7, sp, #0
=======
 8006940:	b580      	push	{r7, lr}
 8006942:	b086      	sub	sp, #24
 8006944:	af00      	add	r7, sp, #0
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
<<<<<<< HEAD
 8006636:	4b44      	ldr	r3, [pc, #272]	; (8006748 <xPortStartScheduler+0x118>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a44      	ldr	r2, [pc, #272]	; (800674c <xPortStartScheduler+0x11c>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d109      	bne.n	8006654 <xPortStartScheduler+0x24>
 8006640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006644:	f383 8811 	msr	BASEPRI, r3
 8006648:	f3bf 8f6f 	isb	sy
 800664c:	f3bf 8f4f 	dsb	sy
 8006650:	613b      	str	r3, [r7, #16]
 8006652:	e7fe      	b.n	8006652 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006654:	4b3c      	ldr	r3, [pc, #240]	; (8006748 <xPortStartScheduler+0x118>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a3d      	ldr	r2, [pc, #244]	; (8006750 <xPortStartScheduler+0x120>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d109      	bne.n	8006672 <xPortStartScheduler+0x42>
 800665e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006662:	f383 8811 	msr	BASEPRI, r3
 8006666:	f3bf 8f6f 	isb	sy
 800666a:	f3bf 8f4f 	dsb	sy
 800666e:	60fb      	str	r3, [r7, #12]
 8006670:	e7fe      	b.n	8006670 <xPortStartScheduler+0x40>
=======
 8006946:	4b44      	ldr	r3, [pc, #272]	; (8006a58 <xPortStartScheduler+0x118>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a44      	ldr	r2, [pc, #272]	; (8006a5c <xPortStartScheduler+0x11c>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d109      	bne.n	8006964 <xPortStartScheduler+0x24>
 8006950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006954:	f383 8811 	msr	BASEPRI, r3
 8006958:	f3bf 8f6f 	isb	sy
 800695c:	f3bf 8f4f 	dsb	sy
 8006960:	613b      	str	r3, [r7, #16]
 8006962:	e7fe      	b.n	8006962 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006964:	4b3c      	ldr	r3, [pc, #240]	; (8006a58 <xPortStartScheduler+0x118>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a3d      	ldr	r2, [pc, #244]	; (8006a60 <xPortStartScheduler+0x120>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d109      	bne.n	8006982 <xPortStartScheduler+0x42>
 800696e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006972:	f383 8811 	msr	BASEPRI, r3
 8006976:	f3bf 8f6f 	isb	sy
 800697a:	f3bf 8f4f 	dsb	sy
 800697e:	60fb      	str	r3, [r7, #12]
 8006980:	e7fe      	b.n	8006980 <xPortStartScheduler+0x40>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
<<<<<<< HEAD
 8006672:	4b38      	ldr	r3, [pc, #224]	; (8006754 <xPortStartScheduler+0x124>)
 8006674:	617b      	str	r3, [r7, #20]
=======
 8006982:	4b38      	ldr	r3, [pc, #224]	; (8006a64 <xPortStartScheduler+0x124>)
 8006984:	617b      	str	r3, [r7, #20]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
<<<<<<< HEAD
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	b2db      	uxtb	r3, r3
 800667c:	607b      	str	r3, [r7, #4]
=======
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	b2db      	uxtb	r3, r3
 800698c:	607b      	str	r3, [r7, #4]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
<<<<<<< HEAD
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	22ff      	movs	r2, #255	; 0xff
 8006682:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	b2db      	uxtb	r3, r3
 800668a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800668c:	78fb      	ldrb	r3, [r7, #3]
 800668e:	b2db      	uxtb	r3, r3
 8006690:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006694:	b2da      	uxtb	r2, r3
 8006696:	4b30      	ldr	r3, [pc, #192]	; (8006758 <xPortStartScheduler+0x128>)
 8006698:	701a      	strb	r2, [r3, #0]
=======
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	22ff      	movs	r2, #255	; 0xff
 8006992:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	b2db      	uxtb	r3, r3
 800699a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800699c:	78fb      	ldrb	r3, [r7, #3]
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80069a4:	b2da      	uxtb	r2, r3
 80069a6:	4b30      	ldr	r3, [pc, #192]	; (8006a68 <xPortStartScheduler+0x128>)
 80069a8:	701a      	strb	r2, [r3, #0]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
<<<<<<< HEAD
 800669a:	4b30      	ldr	r3, [pc, #192]	; (800675c <xPortStartScheduler+0x12c>)
 800669c:	2207      	movs	r2, #7
 800669e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066a0:	e009      	b.n	80066b6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80066a2:	4b2e      	ldr	r3, [pc, #184]	; (800675c <xPortStartScheduler+0x12c>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	3b01      	subs	r3, #1
 80066a8:	4a2c      	ldr	r2, [pc, #176]	; (800675c <xPortStartScheduler+0x12c>)
 80066aa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80066ac:	78fb      	ldrb	r3, [r7, #3]
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	005b      	lsls	r3, r3, #1
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066b6:	78fb      	ldrb	r3, [r7, #3]
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066be:	2b80      	cmp	r3, #128	; 0x80
 80066c0:	d0ef      	beq.n	80066a2 <xPortStartScheduler+0x72>
=======
 80069aa:	4b30      	ldr	r3, [pc, #192]	; (8006a6c <xPortStartScheduler+0x12c>)
 80069ac:	2207      	movs	r2, #7
 80069ae:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069b0:	e009      	b.n	80069c6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80069b2:	4b2e      	ldr	r3, [pc, #184]	; (8006a6c <xPortStartScheduler+0x12c>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	3b01      	subs	r3, #1
 80069b8:	4a2c      	ldr	r2, [pc, #176]	; (8006a6c <xPortStartScheduler+0x12c>)
 80069ba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80069bc:	78fb      	ldrb	r3, [r7, #3]
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	005b      	lsls	r3, r3, #1
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069c6:	78fb      	ldrb	r3, [r7, #3]
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ce:	2b80      	cmp	r3, #128	; 0x80
 80069d0:	d0ef      	beq.n	80069b2 <xPortStartScheduler+0x72>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
<<<<<<< HEAD
 80066c2:	4b26      	ldr	r3, [pc, #152]	; (800675c <xPortStartScheduler+0x12c>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f1c3 0307 	rsb	r3, r3, #7
 80066ca:	2b04      	cmp	r3, #4
 80066cc:	d009      	beq.n	80066e2 <xPortStartScheduler+0xb2>
 80066ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d2:	f383 8811 	msr	BASEPRI, r3
 80066d6:	f3bf 8f6f 	isb	sy
 80066da:	f3bf 8f4f 	dsb	sy
 80066de:	60bb      	str	r3, [r7, #8]
 80066e0:	e7fe      	b.n	80066e0 <xPortStartScheduler+0xb0>
=======
 80069d2:	4b26      	ldr	r3, [pc, #152]	; (8006a6c <xPortStartScheduler+0x12c>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f1c3 0307 	rsb	r3, r3, #7
 80069da:	2b04      	cmp	r3, #4
 80069dc:	d009      	beq.n	80069f2 <xPortStartScheduler+0xb2>
 80069de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e2:	f383 8811 	msr	BASEPRI, r3
 80069e6:	f3bf 8f6f 	isb	sy
 80069ea:	f3bf 8f4f 	dsb	sy
 80069ee:	60bb      	str	r3, [r7, #8]
 80069f0:	e7fe      	b.n	80069f0 <xPortStartScheduler+0xb0>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
<<<<<<< HEAD
 80066e2:	4b1e      	ldr	r3, [pc, #120]	; (800675c <xPortStartScheduler+0x12c>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	021b      	lsls	r3, r3, #8
 80066e8:	4a1c      	ldr	r2, [pc, #112]	; (800675c <xPortStartScheduler+0x12c>)
 80066ea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80066ec:	4b1b      	ldr	r3, [pc, #108]	; (800675c <xPortStartScheduler+0x12c>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80066f4:	4a19      	ldr	r2, [pc, #100]	; (800675c <xPortStartScheduler+0x12c>)
 80066f6:	6013      	str	r3, [r2, #0]
=======
 80069f2:	4b1e      	ldr	r3, [pc, #120]	; (8006a6c <xPortStartScheduler+0x12c>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	021b      	lsls	r3, r3, #8
 80069f8:	4a1c      	ldr	r2, [pc, #112]	; (8006a6c <xPortStartScheduler+0x12c>)
 80069fa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80069fc:	4b1b      	ldr	r3, [pc, #108]	; (8006a6c <xPortStartScheduler+0x12c>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a04:	4a19      	ldr	r2, [pc, #100]	; (8006a6c <xPortStartScheduler+0x12c>)
 8006a06:	6013      	str	r3, [r2, #0]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
<<<<<<< HEAD
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	b2da      	uxtb	r2, r3
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	701a      	strb	r2, [r3, #0]
=======
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	b2da      	uxtb	r2, r3
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	701a      	strb	r2, [r3, #0]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
<<<<<<< HEAD
 8006700:	4b17      	ldr	r3, [pc, #92]	; (8006760 <xPortStartScheduler+0x130>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a16      	ldr	r2, [pc, #88]	; (8006760 <xPortStartScheduler+0x130>)
 8006706:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800670a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800670c:	4b14      	ldr	r3, [pc, #80]	; (8006760 <xPortStartScheduler+0x130>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a13      	ldr	r2, [pc, #76]	; (8006760 <xPortStartScheduler+0x130>)
 8006712:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006716:	6013      	str	r3, [r2, #0]
=======
 8006a10:	4b17      	ldr	r3, [pc, #92]	; (8006a70 <xPortStartScheduler+0x130>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a16      	ldr	r2, [pc, #88]	; (8006a70 <xPortStartScheduler+0x130>)
 8006a16:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a1a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006a1c:	4b14      	ldr	r3, [pc, #80]	; (8006a70 <xPortStartScheduler+0x130>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a13      	ldr	r2, [pc, #76]	; (8006a70 <xPortStartScheduler+0x130>)
 8006a22:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006a26:	6013      	str	r3, [r2, #0]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
<<<<<<< HEAD
 8006718:	f000 f8d6 	bl	80068c8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800671c:	4b11      	ldr	r3, [pc, #68]	; (8006764 <xPortStartScheduler+0x134>)
 800671e:	2200      	movs	r2, #0
 8006720:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006722:	f000 f8f5 	bl	8006910 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006726:	4b10      	ldr	r3, [pc, #64]	; (8006768 <xPortStartScheduler+0x138>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a0f      	ldr	r2, [pc, #60]	; (8006768 <xPortStartScheduler+0x138>)
 800672c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006730:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006732:	f7ff ff69 	bl	8006608 <prvPortStartFirstTask>
=======
 8006a28:	f000 f8d6 	bl	8006bd8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006a2c:	4b11      	ldr	r3, [pc, #68]	; (8006a74 <xPortStartScheduler+0x134>)
 8006a2e:	2200      	movs	r2, #0
 8006a30:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006a32:	f000 f8f5 	bl	8006c20 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006a36:	4b10      	ldr	r3, [pc, #64]	; (8006a78 <xPortStartScheduler+0x138>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a0f      	ldr	r2, [pc, #60]	; (8006a78 <xPortStartScheduler+0x138>)
 8006a3c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006a40:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006a42:	f7ff ff69 	bl	8006918 <prvPortStartFirstTask>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
<<<<<<< HEAD
 8006736:	f7ff f86d 	bl	8005814 <vTaskSwitchContext>
	prvTaskExitError();
 800673a:	f7ff ff23 	bl	8006584 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	3718      	adds	r7, #24
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	e000ed00 	.word	0xe000ed00
 800674c:	410fc271 	.word	0x410fc271
 8006750:	410fc270 	.word	0x410fc270
 8006754:	e000e400 	.word	0xe000e400
 8006758:	20000e74 	.word	0x20000e74
 800675c:	20000e78 	.word	0x20000e78
 8006760:	e000ed20 	.word	0xe000ed20
 8006764:	2000000c 	.word	0x2000000c
 8006768:	e000ef34 	.word	0xe000ef34

0800676c <vPortEnterCritical>:
=======
 8006a46:	f7ff f86b 	bl	8005b20 <vTaskSwitchContext>
	prvTaskExitError();
 8006a4a:	f7ff ff21 	bl	8006890 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3718      	adds	r7, #24
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	e000ed00 	.word	0xe000ed00
 8006a5c:	410fc271 	.word	0x410fc271
 8006a60:	410fc270 	.word	0x410fc270
 8006a64:	e000e400 	.word	0xe000e400
 8006a68:	20000e70 	.word	0x20000e70
 8006a6c:	20000e74 	.word	0x20000e74
 8006a70:	e000ed20 	.word	0xe000ed20
 8006a74:	2000000c 	.word	0x2000000c
 8006a78:	e000ef34 	.word	0xe000ef34

08006a7c <vPortEnterCritical>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
<<<<<<< HEAD
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006776:	f383 8811 	msr	BASEPRI, r3
 800677a:	f3bf 8f6f 	isb	sy
 800677e:	f3bf 8f4f 	dsb	sy
 8006782:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006784:	4b0e      	ldr	r3, [pc, #56]	; (80067c0 <vPortEnterCritical+0x54>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	3301      	adds	r3, #1
 800678a:	4a0d      	ldr	r2, [pc, #52]	; (80067c0 <vPortEnterCritical+0x54>)
 800678c:	6013      	str	r3, [r2, #0]
=======
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a86:	f383 8811 	msr	BASEPRI, r3
 8006a8a:	f3bf 8f6f 	isb	sy
 8006a8e:	f3bf 8f4f 	dsb	sy
 8006a92:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006a94:	4b0e      	ldr	r3, [pc, #56]	; (8006ad0 <vPortEnterCritical+0x54>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	3301      	adds	r3, #1
 8006a9a:	4a0d      	ldr	r2, [pc, #52]	; (8006ad0 <vPortEnterCritical+0x54>)
 8006a9c:	6013      	str	r3, [r2, #0]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
<<<<<<< HEAD
 800678e:	4b0c      	ldr	r3, [pc, #48]	; (80067c0 <vPortEnterCritical+0x54>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2b01      	cmp	r3, #1
 8006794:	d10e      	bne.n	80067b4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006796:	4b0b      	ldr	r3, [pc, #44]	; (80067c4 <vPortEnterCritical+0x58>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	b2db      	uxtb	r3, r3
 800679c:	2b00      	cmp	r3, #0
 800679e:	d009      	beq.n	80067b4 <vPortEnterCritical+0x48>
 80067a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a4:	f383 8811 	msr	BASEPRI, r3
 80067a8:	f3bf 8f6f 	isb	sy
 80067ac:	f3bf 8f4f 	dsb	sy
 80067b0:	603b      	str	r3, [r7, #0]
 80067b2:	e7fe      	b.n	80067b2 <vPortEnterCritical+0x46>
	}
}
 80067b4:	bf00      	nop
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr
 80067c0:	2000000c 	.word	0x2000000c
 80067c4:	e000ed04 	.word	0xe000ed04

080067c8 <vPortExitCritical>:
=======
 8006a9e:	4b0c      	ldr	r3, [pc, #48]	; (8006ad0 <vPortEnterCritical+0x54>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d10e      	bne.n	8006ac4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006aa6:	4b0b      	ldr	r3, [pc, #44]	; (8006ad4 <vPortEnterCritical+0x58>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d009      	beq.n	8006ac4 <vPortEnterCritical+0x48>
 8006ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab4:	f383 8811 	msr	BASEPRI, r3
 8006ab8:	f3bf 8f6f 	isb	sy
 8006abc:	f3bf 8f4f 	dsb	sy
 8006ac0:	603b      	str	r3, [r7, #0]
 8006ac2:	e7fe      	b.n	8006ac2 <vPortEnterCritical+0x46>
	}
}
 8006ac4:	bf00      	nop
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr
 8006ad0:	2000000c 	.word	0x2000000c
 8006ad4:	e000ed04 	.word	0xe000ed04

08006ad8 <vPortExitCritical>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
<<<<<<< HEAD
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80067ce:	4b11      	ldr	r3, [pc, #68]	; (8006814 <vPortExitCritical+0x4c>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d109      	bne.n	80067ea <vPortExitCritical+0x22>
 80067d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067da:	f383 8811 	msr	BASEPRI, r3
 80067de:	f3bf 8f6f 	isb	sy
 80067e2:	f3bf 8f4f 	dsb	sy
 80067e6:	607b      	str	r3, [r7, #4]
 80067e8:	e7fe      	b.n	80067e8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80067ea:	4b0a      	ldr	r3, [pc, #40]	; (8006814 <vPortExitCritical+0x4c>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	3b01      	subs	r3, #1
 80067f0:	4a08      	ldr	r2, [pc, #32]	; (8006814 <vPortExitCritical+0x4c>)
 80067f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80067f4:	4b07      	ldr	r3, [pc, #28]	; (8006814 <vPortExitCritical+0x4c>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d104      	bne.n	8006806 <vPortExitCritical+0x3e>
 80067fc:	2300      	movs	r3, #0
 80067fe:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	f383 8811 	msr	BASEPRI, r3
=======
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006ade:	4b11      	ldr	r3, [pc, #68]	; (8006b24 <vPortExitCritical+0x4c>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d109      	bne.n	8006afa <vPortExitCritical+0x22>
 8006ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aea:	f383 8811 	msr	BASEPRI, r3
 8006aee:	f3bf 8f6f 	isb	sy
 8006af2:	f3bf 8f4f 	dsb	sy
 8006af6:	607b      	str	r3, [r7, #4]
 8006af8:	e7fe      	b.n	8006af8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006afa:	4b0a      	ldr	r3, [pc, #40]	; (8006b24 <vPortExitCritical+0x4c>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	3b01      	subs	r3, #1
 8006b00:	4a08      	ldr	r2, [pc, #32]	; (8006b24 <vPortExitCritical+0x4c>)
 8006b02:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006b04:	4b07      	ldr	r3, [pc, #28]	; (8006b24 <vPortExitCritical+0x4c>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d104      	bne.n	8006b16 <vPortExitCritical+0x3e>
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	f383 8811 	msr	BASEPRI, r3
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	{
		portENABLE_INTERRUPTS();
	}
}
<<<<<<< HEAD
 8006806:	bf00      	nop
 8006808:	370c      	adds	r7, #12
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	2000000c 	.word	0x2000000c
	...

08006820 <PendSV_Handler>:
=======
 8006b16:	bf00      	nop
 8006b18:	370c      	adds	r7, #12
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr
 8006b22:	bf00      	nop
 8006b24:	2000000c 	.word	0x2000000c
	...

08006b30 <PendSV_Handler>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
<<<<<<< HEAD
 8006820:	f3ef 8009 	mrs	r0, PSP
 8006824:	f3bf 8f6f 	isb	sy
 8006828:	4b15      	ldr	r3, [pc, #84]	; (8006880 <pxCurrentTCBConst>)
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	f01e 0f10 	tst.w	lr, #16
 8006830:	bf08      	it	eq
 8006832:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006836:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800683a:	6010      	str	r0, [r2, #0]
 800683c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006840:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006844:	f380 8811 	msr	BASEPRI, r0
 8006848:	f3bf 8f4f 	dsb	sy
 800684c:	f3bf 8f6f 	isb	sy
 8006850:	f7fe ffe0 	bl	8005814 <vTaskSwitchContext>
 8006854:	f04f 0000 	mov.w	r0, #0
 8006858:	f380 8811 	msr	BASEPRI, r0
 800685c:	bc09      	pop	{r0, r3}
 800685e:	6819      	ldr	r1, [r3, #0]
 8006860:	6808      	ldr	r0, [r1, #0]
 8006862:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006866:	f01e 0f10 	tst.w	lr, #16
 800686a:	bf08      	it	eq
 800686c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006870:	f380 8809 	msr	PSP, r0
 8006874:	f3bf 8f6f 	isb	sy
 8006878:	4770      	bx	lr
 800687a:	bf00      	nop
 800687c:	f3af 8000 	nop.w

08006880 <pxCurrentTCBConst>:
 8006880:	20000848 	.word	0x20000848
=======
 8006b30:	f3ef 8009 	mrs	r0, PSP
 8006b34:	f3bf 8f6f 	isb	sy
 8006b38:	4b15      	ldr	r3, [pc, #84]	; (8006b90 <pxCurrentTCBConst>)
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	f01e 0f10 	tst.w	lr, #16
 8006b40:	bf08      	it	eq
 8006b42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006b46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b4a:	6010      	str	r0, [r2, #0]
 8006b4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006b50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006b54:	f380 8811 	msr	BASEPRI, r0
 8006b58:	f3bf 8f4f 	dsb	sy
 8006b5c:	f3bf 8f6f 	isb	sy
 8006b60:	f7fe ffde 	bl	8005b20 <vTaskSwitchContext>
 8006b64:	f04f 0000 	mov.w	r0, #0
 8006b68:	f380 8811 	msr	BASEPRI, r0
 8006b6c:	bc09      	pop	{r0, r3}
 8006b6e:	6819      	ldr	r1, [r3, #0]
 8006b70:	6808      	ldr	r0, [r1, #0]
 8006b72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b76:	f01e 0f10 	tst.w	lr, #16
 8006b7a:	bf08      	it	eq
 8006b7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006b80:	f380 8809 	msr	PSP, r0
 8006b84:	f3bf 8f6f 	isb	sy
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop
 8006b8c:	f3af 8000 	nop.w

08006b90 <pxCurrentTCBConst>:
 8006b90:	20000844 	.word	0x20000844
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
<<<<<<< HEAD
 8006884:	bf00      	nop
 8006886:	bf00      	nop

08006888 <SysTick_Handler>:
=======
 8006b94:	bf00      	nop
 8006b96:	bf00      	nop

08006b98 <SysTick_Handler>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
<<<<<<< HEAD
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
	__asm volatile
 800688e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006892:	f383 8811 	msr	BASEPRI, r3
 8006896:	f3bf 8f6f 	isb	sy
 800689a:	f3bf 8f4f 	dsb	sy
 800689e:	607b      	str	r3, [r7, #4]
=======
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	607b      	str	r3, [r7, #4]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
<<<<<<< HEAD
 80068a0:	f7fe ff00 	bl	80056a4 <xTaskIncrementTick>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d003      	beq.n	80068b2 <SysTick_Handler+0x2a>
=======
 8006bb0:	f7fe fefe 	bl	80059b0 <xTaskIncrementTick>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d003      	beq.n	8006bc2 <SysTick_Handler+0x2a>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
<<<<<<< HEAD
 80068aa:	4b06      	ldr	r3, [pc, #24]	; (80068c4 <SysTick_Handler+0x3c>)
 80068ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068b0:	601a      	str	r2, [r3, #0]
 80068b2:	2300      	movs	r3, #0
 80068b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	f383 8811 	msr	BASEPRI, r3
=======
 8006bba:	4b06      	ldr	r3, [pc, #24]	; (8006bd4 <SysTick_Handler+0x3c>)
 8006bbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bc0:	601a      	str	r2, [r3, #0]
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	f383 8811 	msr	BASEPRI, r3
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		}
	}
	portENABLE_INTERRUPTS();
}
<<<<<<< HEAD
 80068bc:	bf00      	nop
 80068be:	3708      	adds	r7, #8
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	e000ed04 	.word	0xe000ed04

080068c8 <vPortSetupTimerInterrupt>:
=======
 8006bcc:	bf00      	nop
 8006bce:	3708      	adds	r7, #8
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	e000ed04 	.word	0xe000ed04

08006bd8 <vPortSetupTimerInterrupt>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
<<<<<<< HEAD
 80068c8:	b480      	push	{r7}
 80068ca:	af00      	add	r7, sp, #0
=======
 8006bd8:	b480      	push	{r7}
 8006bda:	af00      	add	r7, sp, #0
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
<<<<<<< HEAD
 80068cc:	4b0b      	ldr	r3, [pc, #44]	; (80068fc <vPortSetupTimerInterrupt+0x34>)
 80068ce:	2200      	movs	r2, #0
 80068d0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80068d2:	4b0b      	ldr	r3, [pc, #44]	; (8006900 <vPortSetupTimerInterrupt+0x38>)
 80068d4:	2200      	movs	r2, #0
 80068d6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80068d8:	4b0a      	ldr	r3, [pc, #40]	; (8006904 <vPortSetupTimerInterrupt+0x3c>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a0a      	ldr	r2, [pc, #40]	; (8006908 <vPortSetupTimerInterrupt+0x40>)
 80068de:	fba2 2303 	umull	r2, r3, r2, r3
 80068e2:	099b      	lsrs	r3, r3, #6
 80068e4:	4a09      	ldr	r2, [pc, #36]	; (800690c <vPortSetupTimerInterrupt+0x44>)
 80068e6:	3b01      	subs	r3, #1
 80068e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80068ea:	4b04      	ldr	r3, [pc, #16]	; (80068fc <vPortSetupTimerInterrupt+0x34>)
 80068ec:	2207      	movs	r2, #7
 80068ee:	601a      	str	r2, [r3, #0]
}
 80068f0:	bf00      	nop
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop
 80068fc:	e000e010 	.word	0xe000e010
 8006900:	e000e018 	.word	0xe000e018
 8006904:	20000000 	.word	0x20000000
 8006908:	10624dd3 	.word	0x10624dd3
 800690c:	e000e014 	.word	0xe000e014

08006910 <vPortEnableVFP>:
=======
 8006bdc:	4b0b      	ldr	r3, [pc, #44]	; (8006c0c <vPortSetupTimerInterrupt+0x34>)
 8006bde:	2200      	movs	r2, #0
 8006be0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006be2:	4b0b      	ldr	r3, [pc, #44]	; (8006c10 <vPortSetupTimerInterrupt+0x38>)
 8006be4:	2200      	movs	r2, #0
 8006be6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006be8:	4b0a      	ldr	r3, [pc, #40]	; (8006c14 <vPortSetupTimerInterrupt+0x3c>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a0a      	ldr	r2, [pc, #40]	; (8006c18 <vPortSetupTimerInterrupt+0x40>)
 8006bee:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf2:	099b      	lsrs	r3, r3, #6
 8006bf4:	4a09      	ldr	r2, [pc, #36]	; (8006c1c <vPortSetupTimerInterrupt+0x44>)
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006bfa:	4b04      	ldr	r3, [pc, #16]	; (8006c0c <vPortSetupTimerInterrupt+0x34>)
 8006bfc:	2207      	movs	r2, #7
 8006bfe:	601a      	str	r2, [r3, #0]
}
 8006c00:	bf00      	nop
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	e000e010 	.word	0xe000e010
 8006c10:	e000e018 	.word	0xe000e018
 8006c14:	20000000 	.word	0x20000000
 8006c18:	10624dd3 	.word	0x10624dd3
 8006c1c:	e000e014 	.word	0xe000e014

08006c20 <vPortEnableVFP>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
<<<<<<< HEAD
 8006910:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006920 <vPortEnableVFP+0x10>
 8006914:	6801      	ldr	r1, [r0, #0]
 8006916:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800691a:	6001      	str	r1, [r0, #0]
 800691c:	4770      	bx	lr
=======
 8006c20:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006c30 <vPortEnableVFP+0x10>
 8006c24:	6801      	ldr	r1, [r0, #0]
 8006c26:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006c2a:	6001      	str	r1, [r0, #0]
 8006c2c:	4770      	bx	lr
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
<<<<<<< HEAD
 800691e:	bf00      	nop
 8006920:	e000ed88 	.word	0xe000ed88

08006924 <vPortValidateInterruptPriority>:
=======
 8006c2e:	bf00      	nop
 8006c30:	e000ed88 	.word	0xe000ed88

08006c34 <vPortValidateInterruptPriority>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
<<<<<<< HEAD
 8006924:	b480      	push	{r7}
 8006926:	b085      	sub	sp, #20
 8006928:	af00      	add	r7, sp, #0
=======
 8006c34:	b480      	push	{r7}
 8006c36:	b085      	sub	sp, #20
 8006c38:	af00      	add	r7, sp, #0
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
<<<<<<< HEAD
 800692a:	f3ef 8305 	mrs	r3, IPSR
 800692e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2b0f      	cmp	r3, #15
 8006934:	d913      	bls.n	800695e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006936:	4a16      	ldr	r2, [pc, #88]	; (8006990 <vPortValidateInterruptPriority+0x6c>)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	4413      	add	r3, r2
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	72fb      	strb	r3, [r7, #11]
=======
 8006c3a:	f3ef 8305 	mrs	r3, IPSR
 8006c3e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2b0f      	cmp	r3, #15
 8006c44:	d913      	bls.n	8006c6e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006c46:	4a16      	ldr	r2, [pc, #88]	; (8006ca0 <vPortValidateInterruptPriority+0x6c>)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	72fb      	strb	r3, [r7, #11]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
<<<<<<< HEAD
 8006940:	4b14      	ldr	r3, [pc, #80]	; (8006994 <vPortValidateInterruptPriority+0x70>)
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	7afa      	ldrb	r2, [r7, #11]
 8006946:	429a      	cmp	r2, r3
 8006948:	d209      	bcs.n	800695e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800694a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800694e:	f383 8811 	msr	BASEPRI, r3
 8006952:	f3bf 8f6f 	isb	sy
 8006956:	f3bf 8f4f 	dsb	sy
 800695a:	607b      	str	r3, [r7, #4]
 800695c:	e7fe      	b.n	800695c <vPortValidateInterruptPriority+0x38>
=======
 8006c50:	4b14      	ldr	r3, [pc, #80]	; (8006ca4 <vPortValidateInterruptPriority+0x70>)
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	7afa      	ldrb	r2, [r7, #11]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d209      	bcs.n	8006c6e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5e:	f383 8811 	msr	BASEPRI, r3
 8006c62:	f3bf 8f6f 	isb	sy
 8006c66:	f3bf 8f4f 	dsb	sy
 8006c6a:	607b      	str	r3, [r7, #4]
 8006c6c:	e7fe      	b.n	8006c6c <vPortValidateInterruptPriority+0x38>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
<<<<<<< HEAD
 800695e:	4b0e      	ldr	r3, [pc, #56]	; (8006998 <vPortValidateInterruptPriority+0x74>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006966:	4b0d      	ldr	r3, [pc, #52]	; (800699c <vPortValidateInterruptPriority+0x78>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	429a      	cmp	r2, r3
 800696c:	d909      	bls.n	8006982 <vPortValidateInterruptPriority+0x5e>
 800696e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006972:	f383 8811 	msr	BASEPRI, r3
 8006976:	f3bf 8f6f 	isb	sy
 800697a:	f3bf 8f4f 	dsb	sy
 800697e:	603b      	str	r3, [r7, #0]
 8006980:	e7fe      	b.n	8006980 <vPortValidateInterruptPriority+0x5c>
	}
 8006982:	bf00      	nop
 8006984:	3714      	adds	r7, #20
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	e000e3f0 	.word	0xe000e3f0
 8006994:	20000e74 	.word	0x20000e74
 8006998:	e000ed0c 	.word	0xe000ed0c
 800699c:	20000e78 	.word	0x20000e78

080069a0 <pvPortMalloc>:
=======
 8006c6e:	4b0e      	ldr	r3, [pc, #56]	; (8006ca8 <vPortValidateInterruptPriority+0x74>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006c76:	4b0d      	ldr	r3, [pc, #52]	; (8006cac <vPortValidateInterruptPriority+0x78>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d909      	bls.n	8006c92 <vPortValidateInterruptPriority+0x5e>
 8006c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c82:	f383 8811 	msr	BASEPRI, r3
 8006c86:	f3bf 8f6f 	isb	sy
 8006c8a:	f3bf 8f4f 	dsb	sy
 8006c8e:	603b      	str	r3, [r7, #0]
 8006c90:	e7fe      	b.n	8006c90 <vPortValidateInterruptPriority+0x5c>
	}
 8006c92:	bf00      	nop
 8006c94:	3714      	adds	r7, #20
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	e000e3f0 	.word	0xe000e3f0
 8006ca4:	20000e70 	.word	0x20000e70
 8006ca8:	e000ed0c 	.word	0xe000ed0c
 8006cac:	20000e74 	.word	0x20000e74

08006cb0 <pvPortMalloc>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
<<<<<<< HEAD
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b08a      	sub	sp, #40	; 0x28
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80069a8:	2300      	movs	r3, #0
 80069aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80069ac:	f7fe fdc0 	bl	8005530 <vTaskSuspendAll>
=======
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b08a      	sub	sp, #40	; 0x28
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006cbc:	f7fe fdbe 	bl	800583c <vTaskSuspendAll>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
<<<<<<< HEAD
 80069b0:	4b57      	ldr	r3, [pc, #348]	; (8006b10 <pvPortMalloc+0x170>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d101      	bne.n	80069bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80069b8:	f000 f90c 	bl	8006bd4 <prvHeapInit>
=======
 8006cc0:	4b57      	ldr	r3, [pc, #348]	; (8006e20 <pvPortMalloc+0x170>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d101      	bne.n	8006ccc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006cc8:	f000 f90c 	bl	8006ee4 <prvHeapInit>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
<<<<<<< HEAD
 80069bc:	4b55      	ldr	r3, [pc, #340]	; (8006b14 <pvPortMalloc+0x174>)
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4013      	ands	r3, r2
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	f040 808c 	bne.w	8006ae2 <pvPortMalloc+0x142>
=======
 8006ccc:	4b55      	ldr	r3, [pc, #340]	; (8006e24 <pvPortMalloc+0x174>)
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f040 808c 	bne.w	8006df2 <pvPortMalloc+0x142>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
<<<<<<< HEAD
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d01c      	beq.n	8006a0a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80069d0:	2208      	movs	r2, #8
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4413      	add	r3, r2
 80069d6:	607b      	str	r3, [r7, #4]
=======
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d01c      	beq.n	8006d1a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006ce0:	2208      	movs	r2, #8
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	607b      	str	r3, [r7, #4]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
<<<<<<< HEAD
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f003 0307 	and.w	r3, r3, #7
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d013      	beq.n	8006a0a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f023 0307 	bic.w	r3, r3, #7
 80069e8:	3308      	adds	r3, #8
 80069ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f003 0307 	and.w	r3, r3, #7
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d009      	beq.n	8006a0a <pvPortMalloc+0x6a>
 80069f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fa:	f383 8811 	msr	BASEPRI, r3
 80069fe:	f3bf 8f6f 	isb	sy
 8006a02:	f3bf 8f4f 	dsb	sy
 8006a06:	617b      	str	r3, [r7, #20]
 8006a08:	e7fe      	b.n	8006a08 <pvPortMalloc+0x68>
=======
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f003 0307 	and.w	r3, r3, #7
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d013      	beq.n	8006d1a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f023 0307 	bic.w	r3, r3, #7
 8006cf8:	3308      	adds	r3, #8
 8006cfa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f003 0307 	and.w	r3, r3, #7
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d009      	beq.n	8006d1a <pvPortMalloc+0x6a>
 8006d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0a:	f383 8811 	msr	BASEPRI, r3
 8006d0e:	f3bf 8f6f 	isb	sy
 8006d12:	f3bf 8f4f 	dsb	sy
 8006d16:	617b      	str	r3, [r7, #20]
 8006d18:	e7fe      	b.n	8006d18 <pvPortMalloc+0x68>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
<<<<<<< HEAD
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d068      	beq.n	8006ae2 <pvPortMalloc+0x142>
 8006a10:	4b41      	ldr	r3, [pc, #260]	; (8006b18 <pvPortMalloc+0x178>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d863      	bhi.n	8006ae2 <pvPortMalloc+0x142>
=======
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d068      	beq.n	8006df2 <pvPortMalloc+0x142>
 8006d20:	4b41      	ldr	r3, [pc, #260]	; (8006e28 <pvPortMalloc+0x178>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d863      	bhi.n	8006df2 <pvPortMalloc+0x142>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
<<<<<<< HEAD
 8006a1a:	4b40      	ldr	r3, [pc, #256]	; (8006b1c <pvPortMalloc+0x17c>)
 8006a1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006a1e:	4b3f      	ldr	r3, [pc, #252]	; (8006b1c <pvPortMalloc+0x17c>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a24:	e004      	b.n	8006a30 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d903      	bls.n	8006a42 <pvPortMalloc+0xa2>
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1f1      	bne.n	8006a26 <pvPortMalloc+0x86>
=======
 8006d2a:	4b40      	ldr	r3, [pc, #256]	; (8006e2c <pvPortMalloc+0x17c>)
 8006d2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006d2e:	4b3f      	ldr	r3, [pc, #252]	; (8006e2c <pvPortMalloc+0x17c>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d34:	e004      	b.n	8006d40 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d903      	bls.n	8006d52 <pvPortMalloc+0xa2>
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d1f1      	bne.n	8006d36 <pvPortMalloc+0x86>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
<<<<<<< HEAD
 8006a42:	4b33      	ldr	r3, [pc, #204]	; (8006b10 <pvPortMalloc+0x170>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d04a      	beq.n	8006ae2 <pvPortMalloc+0x142>
=======
 8006d52:	4b33      	ldr	r3, [pc, #204]	; (8006e20 <pvPortMalloc+0x170>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d04a      	beq.n	8006df2 <pvPortMalloc+0x142>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
<<<<<<< HEAD
 8006a4c:	6a3b      	ldr	r3, [r7, #32]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2208      	movs	r2, #8
 8006a52:	4413      	add	r3, r2
 8006a54:	61fb      	str	r3, [r7, #28]
=======
 8006d5c:	6a3b      	ldr	r3, [r7, #32]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2208      	movs	r2, #8
 8006d62:	4413      	add	r3, r2
 8006d64:	61fb      	str	r3, [r7, #28]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
<<<<<<< HEAD
 8006a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	6a3b      	ldr	r3, [r7, #32]
 8006a5c:	601a      	str	r2, [r3, #0]
=======
 8006d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	6a3b      	ldr	r3, [r7, #32]
 8006d6c:	601a      	str	r2, [r3, #0]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
<<<<<<< HEAD
 8006a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a60:	685a      	ldr	r2, [r3, #4]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	1ad2      	subs	r2, r2, r3
 8006a66:	2308      	movs	r3, #8
 8006a68:	005b      	lsls	r3, r3, #1
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d91e      	bls.n	8006aac <pvPortMalloc+0x10c>
=======
 8006d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d70:	685a      	ldr	r2, [r3, #4]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	1ad2      	subs	r2, r2, r3
 8006d76:	2308      	movs	r3, #8
 8006d78:	005b      	lsls	r3, r3, #1
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d91e      	bls.n	8006dbc <pvPortMalloc+0x10c>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
<<<<<<< HEAD
 8006a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4413      	add	r3, r2
 8006a74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	f003 0307 	and.w	r3, r3, #7
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d009      	beq.n	8006a94 <pvPortMalloc+0xf4>
 8006a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a84:	f383 8811 	msr	BASEPRI, r3
 8006a88:	f3bf 8f6f 	isb	sy
 8006a8c:	f3bf 8f4f 	dsb	sy
 8006a90:	613b      	str	r3, [r7, #16]
 8006a92:	e7fe      	b.n	8006a92 <pvPortMalloc+0xf2>
=======
 8006d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4413      	add	r3, r2
 8006d84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	f003 0307 	and.w	r3, r3, #7
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d009      	beq.n	8006da4 <pvPortMalloc+0xf4>
 8006d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d94:	f383 8811 	msr	BASEPRI, r3
 8006d98:	f3bf 8f6f 	isb	sy
 8006d9c:	f3bf 8f4f 	dsb	sy
 8006da0:	613b      	str	r3, [r7, #16]
 8006da2:	e7fe      	b.n	8006da2 <pvPortMalloc+0xf2>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
<<<<<<< HEAD
 8006a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a96:	685a      	ldr	r2, [r3, #4]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	1ad2      	subs	r2, r2, r3
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006aa6:	69b8      	ldr	r0, [r7, #24]
 8006aa8:	f000 f8f6 	bl	8006c98 <prvInsertBlockIntoFreeList>
=======
 8006da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da6:	685a      	ldr	r2, [r3, #4]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	1ad2      	subs	r2, r2, r3
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006db6:	69b8      	ldr	r0, [r7, #24]
 8006db8:	f000 f8f6 	bl	8006fa8 <prvInsertBlockIntoFreeList>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
<<<<<<< HEAD
 8006aac:	4b1a      	ldr	r3, [pc, #104]	; (8006b18 <pvPortMalloc+0x178>)
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	4a18      	ldr	r2, [pc, #96]	; (8006b18 <pvPortMalloc+0x178>)
 8006ab8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006aba:	4b17      	ldr	r3, [pc, #92]	; (8006b18 <pvPortMalloc+0x178>)
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	4b18      	ldr	r3, [pc, #96]	; (8006b20 <pvPortMalloc+0x180>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d203      	bcs.n	8006ace <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006ac6:	4b14      	ldr	r3, [pc, #80]	; (8006b18 <pvPortMalloc+0x178>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a15      	ldr	r2, [pc, #84]	; (8006b20 <pvPortMalloc+0x180>)
 8006acc:	6013      	str	r3, [r2, #0]
=======
 8006dbc:	4b1a      	ldr	r3, [pc, #104]	; (8006e28 <pvPortMalloc+0x178>)
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	4a18      	ldr	r2, [pc, #96]	; (8006e28 <pvPortMalloc+0x178>)
 8006dc8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006dca:	4b17      	ldr	r3, [pc, #92]	; (8006e28 <pvPortMalloc+0x178>)
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	4b18      	ldr	r3, [pc, #96]	; (8006e30 <pvPortMalloc+0x180>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d203      	bcs.n	8006dde <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006dd6:	4b14      	ldr	r3, [pc, #80]	; (8006e28 <pvPortMalloc+0x178>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a15      	ldr	r2, [pc, #84]	; (8006e30 <pvPortMalloc+0x180>)
 8006ddc:	6013      	str	r3, [r2, #0]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
<<<<<<< HEAD
 8006ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad0:	685a      	ldr	r2, [r3, #4]
 8006ad2:	4b10      	ldr	r3, [pc, #64]	; (8006b14 <pvPortMalloc+0x174>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	431a      	orrs	r2, r3
 8006ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ada:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ade:	2200      	movs	r2, #0
 8006ae0:	601a      	str	r2, [r3, #0]
=======
 8006dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de0:	685a      	ldr	r2, [r3, #4]
 8006de2:	4b10      	ldr	r3, [pc, #64]	; (8006e24 <pvPortMalloc+0x174>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	431a      	orrs	r2, r3
 8006de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dee:	2200      	movs	r2, #0
 8006df0:	601a      	str	r2, [r3, #0]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
<<<<<<< HEAD
 8006ae2:	f7fe fd33 	bl	800554c <xTaskResumeAll>
=======
 8006df2:	f7fe fd31 	bl	8005858 <xTaskResumeAll>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
<<<<<<< HEAD
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	f003 0307 	and.w	r3, r3, #7
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d009      	beq.n	8006b04 <pvPortMalloc+0x164>
 8006af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af4:	f383 8811 	msr	BASEPRI, r3
 8006af8:	f3bf 8f6f 	isb	sy
 8006afc:	f3bf 8f4f 	dsb	sy
 8006b00:	60fb      	str	r3, [r7, #12]
 8006b02:	e7fe      	b.n	8006b02 <pvPortMalloc+0x162>
	return pvReturn;
 8006b04:	69fb      	ldr	r3, [r7, #28]
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3728      	adds	r7, #40	; 0x28
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	20004a84 	.word	0x20004a84
 8006b14:	20004a90 	.word	0x20004a90
 8006b18:	20004a88 	.word	0x20004a88
 8006b1c:	20004a7c 	.word	0x20004a7c
 8006b20:	20004a8c 	.word	0x20004a8c

08006b24 <vPortFree>:
=======
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	f003 0307 	and.w	r3, r3, #7
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d009      	beq.n	8006e14 <pvPortMalloc+0x164>
 8006e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e04:	f383 8811 	msr	BASEPRI, r3
 8006e08:	f3bf 8f6f 	isb	sy
 8006e0c:	f3bf 8f4f 	dsb	sy
 8006e10:	60fb      	str	r3, [r7, #12]
 8006e12:	e7fe      	b.n	8006e12 <pvPortMalloc+0x162>
	return pvReturn;
 8006e14:	69fb      	ldr	r3, [r7, #28]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3728      	adds	r7, #40	; 0x28
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	20004a80 	.word	0x20004a80
 8006e24:	20004a8c 	.word	0x20004a8c
 8006e28:	20004a84 	.word	0x20004a84
 8006e2c:	20004a78 	.word	0x20004a78
 8006e30:	20004a88 	.word	0x20004a88

08006e34 <vPortFree>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
<<<<<<< HEAD
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b086      	sub	sp, #24
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d046      	beq.n	8006bc4 <vPortFree+0xa0>
=======
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b086      	sub	sp, #24
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d046      	beq.n	8006ed4 <vPortFree+0xa0>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
<<<<<<< HEAD
 8006b36:	2308      	movs	r3, #8
 8006b38:	425b      	negs	r3, r3
 8006b3a:	697a      	ldr	r2, [r7, #20]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	685a      	ldr	r2, [r3, #4]
 8006b48:	4b20      	ldr	r3, [pc, #128]	; (8006bcc <vPortFree+0xa8>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d109      	bne.n	8006b66 <vPortFree+0x42>
 8006b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b56:	f383 8811 	msr	BASEPRI, r3
 8006b5a:	f3bf 8f6f 	isb	sy
 8006b5e:	f3bf 8f4f 	dsb	sy
 8006b62:	60fb      	str	r3, [r7, #12]
 8006b64:	e7fe      	b.n	8006b64 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d009      	beq.n	8006b82 <vPortFree+0x5e>
 8006b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b72:	f383 8811 	msr	BASEPRI, r3
 8006b76:	f3bf 8f6f 	isb	sy
 8006b7a:	f3bf 8f4f 	dsb	sy
 8006b7e:	60bb      	str	r3, [r7, #8]
 8006b80:	e7fe      	b.n	8006b80 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	685a      	ldr	r2, [r3, #4]
 8006b86:	4b11      	ldr	r3, [pc, #68]	; (8006bcc <vPortFree+0xa8>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d019      	beq.n	8006bc4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d115      	bne.n	8006bc4 <vPortFree+0xa0>
=======
 8006e46:	2308      	movs	r3, #8
 8006e48:	425b      	negs	r3, r3
 8006e4a:	697a      	ldr	r2, [r7, #20]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	685a      	ldr	r2, [r3, #4]
 8006e58:	4b20      	ldr	r3, [pc, #128]	; (8006edc <vPortFree+0xa8>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d109      	bne.n	8006e76 <vPortFree+0x42>
 8006e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e66:	f383 8811 	msr	BASEPRI, r3
 8006e6a:	f3bf 8f6f 	isb	sy
 8006e6e:	f3bf 8f4f 	dsb	sy
 8006e72:	60fb      	str	r3, [r7, #12]
 8006e74:	e7fe      	b.n	8006e74 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d009      	beq.n	8006e92 <vPortFree+0x5e>
 8006e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e82:	f383 8811 	msr	BASEPRI, r3
 8006e86:	f3bf 8f6f 	isb	sy
 8006e8a:	f3bf 8f4f 	dsb	sy
 8006e8e:	60bb      	str	r3, [r7, #8]
 8006e90:	e7fe      	b.n	8006e90 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	685a      	ldr	r2, [r3, #4]
 8006e96:	4b11      	ldr	r3, [pc, #68]	; (8006edc <vPortFree+0xa8>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d019      	beq.n	8006ed4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d115      	bne.n	8006ed4 <vPortFree+0xa0>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
<<<<<<< HEAD
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	685a      	ldr	r2, [r3, #4]
 8006b9c:	4b0b      	ldr	r3, [pc, #44]	; (8006bcc <vPortFree+0xa8>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	43db      	mvns	r3, r3
 8006ba2:	401a      	ands	r2, r3
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006ba8:	f7fe fcc2 	bl	8005530 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	685a      	ldr	r2, [r3, #4]
 8006bb0:	4b07      	ldr	r3, [pc, #28]	; (8006bd0 <vPortFree+0xac>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	4a06      	ldr	r2, [pc, #24]	; (8006bd0 <vPortFree+0xac>)
 8006bb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006bba:	6938      	ldr	r0, [r7, #16]
 8006bbc:	f000 f86c 	bl	8006c98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006bc0:	f7fe fcc4 	bl	800554c <xTaskResumeAll>
=======
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	685a      	ldr	r2, [r3, #4]
 8006eac:	4b0b      	ldr	r3, [pc, #44]	; (8006edc <vPortFree+0xa8>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	43db      	mvns	r3, r3
 8006eb2:	401a      	ands	r2, r3
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006eb8:	f7fe fcc0 	bl	800583c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	685a      	ldr	r2, [r3, #4]
 8006ec0:	4b07      	ldr	r3, [pc, #28]	; (8006ee0 <vPortFree+0xac>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	4a06      	ldr	r2, [pc, #24]	; (8006ee0 <vPortFree+0xac>)
 8006ec8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006eca:	6938      	ldr	r0, [r7, #16]
 8006ecc:	f000 f86c 	bl	8006fa8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006ed0:	f7fe fcc2 	bl	8005858 <xTaskResumeAll>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
<<<<<<< HEAD
 8006bc4:	bf00      	nop
 8006bc6:	3718      	adds	r7, #24
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	20004a90 	.word	0x20004a90
 8006bd0:	20004a88 	.word	0x20004a88

08006bd4 <prvHeapInit>:
=======
 8006ed4:	bf00      	nop
 8006ed6:	3718      	adds	r7, #24
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	20004a8c 	.word	0x20004a8c
 8006ee0:	20004a84 	.word	0x20004a84

08006ee4 <prvHeapInit>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
<<<<<<< HEAD
 8006bd4:	b480      	push	{r7}
 8006bd6:	b085      	sub	sp, #20
 8006bd8:	af00      	add	r7, sp, #0
=======
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
<<<<<<< HEAD
 8006bda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006bde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006be0:	4b27      	ldr	r3, [pc, #156]	; (8006c80 <prvHeapInit+0xac>)
 8006be2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f003 0307 	and.w	r3, r3, #7
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00c      	beq.n	8006c08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	3307      	adds	r3, #7
 8006bf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f023 0307 	bic.w	r3, r3, #7
 8006bfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006bfc:	68ba      	ldr	r2, [r7, #8]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	4a1f      	ldr	r2, [pc, #124]	; (8006c80 <prvHeapInit+0xac>)
 8006c04:	4413      	add	r3, r2
 8006c06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	607b      	str	r3, [r7, #4]
=======
 8006eea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006eee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ef0:	4b27      	ldr	r3, [pc, #156]	; (8006f90 <prvHeapInit+0xac>)
 8006ef2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f003 0307 	and.w	r3, r3, #7
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00c      	beq.n	8006f18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	3307      	adds	r3, #7
 8006f02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f023 0307 	bic.w	r3, r3, #7
 8006f0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006f0c:	68ba      	ldr	r2, [r7, #8]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	4a1f      	ldr	r2, [pc, #124]	; (8006f90 <prvHeapInit+0xac>)
 8006f14:	4413      	add	r3, r2
 8006f16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	607b      	str	r3, [r7, #4]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
<<<<<<< HEAD
 8006c0c:	4a1d      	ldr	r2, [pc, #116]	; (8006c84 <prvHeapInit+0xb0>)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006c12:	4b1c      	ldr	r3, [pc, #112]	; (8006c84 <prvHeapInit+0xb0>)
 8006c14:	2200      	movs	r2, #0
 8006c16:	605a      	str	r2, [r3, #4]
=======
 8006f1c:	4a1d      	ldr	r2, [pc, #116]	; (8006f94 <prvHeapInit+0xb0>)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006f22:	4b1c      	ldr	r3, [pc, #112]	; (8006f94 <prvHeapInit+0xb0>)
 8006f24:	2200      	movs	r2, #0
 8006f26:	605a      	str	r2, [r3, #4]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
<<<<<<< HEAD
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	68ba      	ldr	r2, [r7, #8]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006c20:	2208      	movs	r2, #8
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	1a9b      	subs	r3, r3, r2
 8006c26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f023 0307 	bic.w	r3, r3, #7
 8006c2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	4a15      	ldr	r2, [pc, #84]	; (8006c88 <prvHeapInit+0xb4>)
 8006c34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006c36:	4b14      	ldr	r3, [pc, #80]	; (8006c88 <prvHeapInit+0xb4>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c3e:	4b12      	ldr	r3, [pc, #72]	; (8006c88 <prvHeapInit+0xb4>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2200      	movs	r2, #0
 8006c44:	601a      	str	r2, [r3, #0]
=======
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	68ba      	ldr	r2, [r7, #8]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006f30:	2208      	movs	r2, #8
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	1a9b      	subs	r3, r3, r2
 8006f36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f023 0307 	bic.w	r3, r3, #7
 8006f3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	4a15      	ldr	r2, [pc, #84]	; (8006f98 <prvHeapInit+0xb4>)
 8006f44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006f46:	4b14      	ldr	r3, [pc, #80]	; (8006f98 <prvHeapInit+0xb4>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006f4e:	4b12      	ldr	r3, [pc, #72]	; (8006f98 <prvHeapInit+0xb4>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2200      	movs	r2, #0
 8006f54:	601a      	str	r2, [r3, #0]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
<<<<<<< HEAD
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	1ad2      	subs	r2, r2, r3
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c54:	4b0c      	ldr	r3, [pc, #48]	; (8006c88 <prvHeapInit+0xb4>)
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	4a0a      	ldr	r2, [pc, #40]	; (8006c8c <prvHeapInit+0xb8>)
 8006c62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	4a09      	ldr	r2, [pc, #36]	; (8006c90 <prvHeapInit+0xbc>)
 8006c6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c6c:	4b09      	ldr	r3, [pc, #36]	; (8006c94 <prvHeapInit+0xc0>)
 8006c6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006c72:	601a      	str	r2, [r3, #0]
}
 8006c74:	bf00      	nop
 8006c76:	3714      	adds	r7, #20
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr
 8006c80:	20000e7c 	.word	0x20000e7c
 8006c84:	20004a7c 	.word	0x20004a7c
 8006c88:	20004a84 	.word	0x20004a84
 8006c8c:	20004a8c 	.word	0x20004a8c
 8006c90:	20004a88 	.word	0x20004a88
 8006c94:	20004a90 	.word	0x20004a90

08006c98 <prvInsertBlockIntoFreeList>:
=======
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	68fa      	ldr	r2, [r7, #12]
 8006f5e:	1ad2      	subs	r2, r2, r3
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006f64:	4b0c      	ldr	r3, [pc, #48]	; (8006f98 <prvHeapInit+0xb4>)
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	4a0a      	ldr	r2, [pc, #40]	; (8006f9c <prvHeapInit+0xb8>)
 8006f72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	4a09      	ldr	r2, [pc, #36]	; (8006fa0 <prvHeapInit+0xbc>)
 8006f7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f7c:	4b09      	ldr	r3, [pc, #36]	; (8006fa4 <prvHeapInit+0xc0>)
 8006f7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006f82:	601a      	str	r2, [r3, #0]
}
 8006f84:	bf00      	nop
 8006f86:	3714      	adds	r7, #20
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr
 8006f90:	20000e78 	.word	0x20000e78
 8006f94:	20004a78 	.word	0x20004a78
 8006f98:	20004a80 	.word	0x20004a80
 8006f9c:	20004a88 	.word	0x20004a88
 8006fa0:	20004a84 	.word	0x20004a84
 8006fa4:	20004a8c 	.word	0x20004a8c

08006fa8 <prvInsertBlockIntoFreeList>:
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
<<<<<<< HEAD
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
=======
 8006fa8:	b480      	push	{r7}
 8006faa:	b085      	sub	sp, #20
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
<<<<<<< HEAD
 8006ca0:	4b28      	ldr	r3, [pc, #160]	; (8006d44 <prvInsertBlockIntoFreeList+0xac>)
 8006ca2:	60fb      	str	r3, [r7, #12]
 8006ca4:	e002      	b.n	8006cac <prvInsertBlockIntoFreeList+0x14>
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	60fb      	str	r3, [r7, #12]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d8f7      	bhi.n	8006ca6 <prvInsertBlockIntoFreeList+0xe>
=======
 8006fb0:	4b28      	ldr	r3, [pc, #160]	; (8007054 <prvInsertBlockIntoFreeList+0xac>)
 8006fb2:	60fb      	str	r3, [r7, #12]
 8006fb4:	e002      	b.n	8006fbc <prvInsertBlockIntoFreeList+0x14>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	60fb      	str	r3, [r7, #12]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d8f7      	bhi.n	8006fb6 <prvInsertBlockIntoFreeList+0xe>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
<<<<<<< HEAD
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	68ba      	ldr	r2, [r7, #8]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d108      	bne.n	8006cda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	685a      	ldr	r2, [r3, #4]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	441a      	add	r2, r3
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	607b      	str	r3, [r7, #4]
=======
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	68ba      	ldr	r2, [r7, #8]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d108      	bne.n	8006fea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	685a      	ldr	r2, [r3, #4]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	441a      	add	r2, r3
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	607b      	str	r3, [r7, #4]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
<<<<<<< HEAD
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	68ba      	ldr	r2, [r7, #8]
 8006ce4:	441a      	add	r2, r3
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d118      	bne.n	8006d20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	4b15      	ldr	r3, [pc, #84]	; (8006d48 <prvInsertBlockIntoFreeList+0xb0>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d00d      	beq.n	8006d16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	685a      	ldr	r2, [r3, #4]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	441a      	add	r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	601a      	str	r2, [r3, #0]
 8006d14:	e008      	b.n	8006d28 <prvInsertBlockIntoFreeList+0x90>
=======
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	68ba      	ldr	r2, [r7, #8]
 8006ff4:	441a      	add	r2, r3
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d118      	bne.n	8007030 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	4b15      	ldr	r3, [pc, #84]	; (8007058 <prvInsertBlockIntoFreeList+0xb0>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	429a      	cmp	r2, r3
 8007008:	d00d      	beq.n	8007026 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	685a      	ldr	r2, [r3, #4]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	441a      	add	r2, r3
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	601a      	str	r2, [r3, #0]
 8007024:	e008      	b.n	8007038 <prvInsertBlockIntoFreeList+0x90>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
<<<<<<< HEAD
 8006d16:	4b0c      	ldr	r3, [pc, #48]	; (8006d48 <prvInsertBlockIntoFreeList+0xb0>)
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	601a      	str	r2, [r3, #0]
 8006d1e:	e003      	b.n	8006d28 <prvInsertBlockIntoFreeList+0x90>
=======
 8007026:	4b0c      	ldr	r3, [pc, #48]	; (8007058 <prvInsertBlockIntoFreeList+0xb0>)
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	601a      	str	r2, [r3, #0]
 800702e:	e003      	b.n	8007038 <prvInsertBlockIntoFreeList+0x90>
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
<<<<<<< HEAD
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	601a      	str	r2, [r3, #0]
=======
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	601a      	str	r2, [r3, #0]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
<<<<<<< HEAD
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d002      	beq.n	8006d36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	601a      	str	r2, [r3, #0]
=======
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	429a      	cmp	r2, r3
 800703e:	d002      	beq.n	8007046 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	601a      	str	r2, [r3, #0]
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< HEAD
 8006d36:	bf00      	nop
 8006d38:	3714      	adds	r7, #20
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop
 8006d44:	20004a7c 	.word	0x20004a7c
 8006d48:	20004a84 	.word	0x20004a84

08006d4c <_ZdlPvj>:
 8006d4c:	f000 b800 	b.w	8006d50 <_ZdlPv>

08006d50 <_ZdlPv>:
 8006d50:	f000 b936 	b.w	8006fc0 <free>

08006d54 <sqrt>:
 8006d54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006d58:	ed2d 8b02 	vpush	{d8}
 8006d5c:	b08b      	sub	sp, #44	; 0x2c
 8006d5e:	ec55 4b10 	vmov	r4, r5, d0
 8006d62:	f000 f851 	bl	8006e08 <__ieee754_sqrt>
 8006d66:	4b26      	ldr	r3, [pc, #152]	; (8006e00 <sqrt+0xac>)
 8006d68:	eeb0 8a40 	vmov.f32	s16, s0
 8006d6c:	eef0 8a60 	vmov.f32	s17, s1
 8006d70:	f993 6000 	ldrsb.w	r6, [r3]
 8006d74:	1c73      	adds	r3, r6, #1
 8006d76:	d02a      	beq.n	8006dce <sqrt+0x7a>
 8006d78:	4622      	mov	r2, r4
 8006d7a:	462b      	mov	r3, r5
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	4629      	mov	r1, r5
 8006d80:	f7f9 fe84 	bl	8000a8c <__aeabi_dcmpun>
 8006d84:	4607      	mov	r7, r0
 8006d86:	bb10      	cbnz	r0, 8006dce <sqrt+0x7a>
 8006d88:	f04f 0800 	mov.w	r8, #0
 8006d8c:	f04f 0900 	mov.w	r9, #0
 8006d90:	4642      	mov	r2, r8
 8006d92:	464b      	mov	r3, r9
 8006d94:	4620      	mov	r0, r4
 8006d96:	4629      	mov	r1, r5
 8006d98:	f7f9 fe50 	bl	8000a3c <__aeabi_dcmplt>
 8006d9c:	b1b8      	cbz	r0, 8006dce <sqrt+0x7a>
 8006d9e:	2301      	movs	r3, #1
 8006da0:	9300      	str	r3, [sp, #0]
 8006da2:	4b18      	ldr	r3, [pc, #96]	; (8006e04 <sqrt+0xb0>)
 8006da4:	9301      	str	r3, [sp, #4]
 8006da6:	9708      	str	r7, [sp, #32]
 8006da8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006dac:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006db0:	b9b6      	cbnz	r6, 8006de0 <sqrt+0x8c>
 8006db2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006db6:	4668      	mov	r0, sp
 8006db8:	f000 f8d6 	bl	8006f68 <matherr>
 8006dbc:	b1d0      	cbz	r0, 8006df4 <sqrt+0xa0>
 8006dbe:	9b08      	ldr	r3, [sp, #32]
 8006dc0:	b11b      	cbz	r3, 8006dca <sqrt+0x76>
 8006dc2:	f000 f8d3 	bl	8006f6c <__errno>
 8006dc6:	9b08      	ldr	r3, [sp, #32]
 8006dc8:	6003      	str	r3, [r0, #0]
 8006dca:	ed9d 8b06 	vldr	d8, [sp, #24]
 8006dce:	eeb0 0a48 	vmov.f32	s0, s16
 8006dd2:	eef0 0a68 	vmov.f32	s1, s17
 8006dd6:	b00b      	add	sp, #44	; 0x2c
 8006dd8:	ecbd 8b02 	vpop	{d8}
 8006ddc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006de0:	4642      	mov	r2, r8
 8006de2:	464b      	mov	r3, r9
 8006de4:	4640      	mov	r0, r8
 8006de6:	4649      	mov	r1, r9
 8006de8:	f7f9 fce0 	bl	80007ac <__aeabi_ddiv>
 8006dec:	2e02      	cmp	r6, #2
 8006dee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006df2:	d1e0      	bne.n	8006db6 <sqrt+0x62>
 8006df4:	f000 f8ba 	bl	8006f6c <__errno>
 8006df8:	2321      	movs	r3, #33	; 0x21
 8006dfa:	6003      	str	r3, [r0, #0]
 8006dfc:	e7df      	b.n	8006dbe <sqrt+0x6a>
 8006dfe:	bf00      	nop
 8006e00:	20000010 	.word	0x20000010
 8006e04:	08007108 	.word	0x08007108

08006e08 <__ieee754_sqrt>:
 8006e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e0c:	4955      	ldr	r1, [pc, #340]	; (8006f64 <__ieee754_sqrt+0x15c>)
 8006e0e:	ec55 4b10 	vmov	r4, r5, d0
 8006e12:	43a9      	bics	r1, r5
 8006e14:	462b      	mov	r3, r5
 8006e16:	462a      	mov	r2, r5
 8006e18:	d112      	bne.n	8006e40 <__ieee754_sqrt+0x38>
 8006e1a:	ee10 2a10 	vmov	r2, s0
 8006e1e:	ee10 0a10 	vmov	r0, s0
 8006e22:	4629      	mov	r1, r5
 8006e24:	f7f9 fb98 	bl	8000558 <__aeabi_dmul>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	4629      	mov	r1, r5
 8006e30:	f7f9 f9dc 	bl	80001ec <__adddf3>
 8006e34:	4604      	mov	r4, r0
 8006e36:	460d      	mov	r5, r1
 8006e38:	ec45 4b10 	vmov	d0, r4, r5
 8006e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e40:	2d00      	cmp	r5, #0
 8006e42:	ee10 0a10 	vmov	r0, s0
 8006e46:	4621      	mov	r1, r4
 8006e48:	dc0f      	bgt.n	8006e6a <__ieee754_sqrt+0x62>
 8006e4a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006e4e:	4330      	orrs	r0, r6
 8006e50:	d0f2      	beq.n	8006e38 <__ieee754_sqrt+0x30>
 8006e52:	b155      	cbz	r5, 8006e6a <__ieee754_sqrt+0x62>
 8006e54:	ee10 2a10 	vmov	r2, s0
 8006e58:	4620      	mov	r0, r4
 8006e5a:	4629      	mov	r1, r5
 8006e5c:	f7f9 f9c4 	bl	80001e8 <__aeabi_dsub>
 8006e60:	4602      	mov	r2, r0
 8006e62:	460b      	mov	r3, r1
 8006e64:	f7f9 fca2 	bl	80007ac <__aeabi_ddiv>
 8006e68:	e7e4      	b.n	8006e34 <__ieee754_sqrt+0x2c>
 8006e6a:	151b      	asrs	r3, r3, #20
 8006e6c:	d073      	beq.n	8006f56 <__ieee754_sqrt+0x14e>
 8006e6e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006e72:	07dd      	lsls	r5, r3, #31
 8006e74:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006e78:	bf48      	it	mi
 8006e7a:	0fc8      	lsrmi	r0, r1, #31
 8006e7c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006e80:	bf44      	itt	mi
 8006e82:	0049      	lslmi	r1, r1, #1
 8006e84:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8006e88:	2500      	movs	r5, #0
 8006e8a:	1058      	asrs	r0, r3, #1
 8006e8c:	0fcb      	lsrs	r3, r1, #31
 8006e8e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8006e92:	0049      	lsls	r1, r1, #1
 8006e94:	2316      	movs	r3, #22
 8006e96:	462c      	mov	r4, r5
 8006e98:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8006e9c:	19a7      	adds	r7, r4, r6
 8006e9e:	4297      	cmp	r7, r2
 8006ea0:	bfde      	ittt	le
 8006ea2:	19bc      	addle	r4, r7, r6
 8006ea4:	1bd2      	suble	r2, r2, r7
 8006ea6:	19ad      	addle	r5, r5, r6
 8006ea8:	0fcf      	lsrs	r7, r1, #31
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8006eb0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006eb4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006eb8:	d1f0      	bne.n	8006e9c <__ieee754_sqrt+0x94>
 8006eba:	f04f 0c20 	mov.w	ip, #32
 8006ebe:	469e      	mov	lr, r3
 8006ec0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006ec4:	42a2      	cmp	r2, r4
 8006ec6:	eb06 070e 	add.w	r7, r6, lr
 8006eca:	dc02      	bgt.n	8006ed2 <__ieee754_sqrt+0xca>
 8006ecc:	d112      	bne.n	8006ef4 <__ieee754_sqrt+0xec>
 8006ece:	428f      	cmp	r7, r1
 8006ed0:	d810      	bhi.n	8006ef4 <__ieee754_sqrt+0xec>
 8006ed2:	2f00      	cmp	r7, #0
 8006ed4:	eb07 0e06 	add.w	lr, r7, r6
 8006ed8:	da42      	bge.n	8006f60 <__ieee754_sqrt+0x158>
 8006eda:	f1be 0f00 	cmp.w	lr, #0
 8006ede:	db3f      	blt.n	8006f60 <__ieee754_sqrt+0x158>
 8006ee0:	f104 0801 	add.w	r8, r4, #1
 8006ee4:	1b12      	subs	r2, r2, r4
 8006ee6:	428f      	cmp	r7, r1
 8006ee8:	bf88      	it	hi
 8006eea:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8006eee:	1bc9      	subs	r1, r1, r7
 8006ef0:	4433      	add	r3, r6
 8006ef2:	4644      	mov	r4, r8
 8006ef4:	0052      	lsls	r2, r2, #1
 8006ef6:	f1bc 0c01 	subs.w	ip, ip, #1
 8006efa:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8006efe:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006f02:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006f06:	d1dd      	bne.n	8006ec4 <__ieee754_sqrt+0xbc>
 8006f08:	430a      	orrs	r2, r1
 8006f0a:	d006      	beq.n	8006f1a <__ieee754_sqrt+0x112>
 8006f0c:	1c5c      	adds	r4, r3, #1
 8006f0e:	bf13      	iteet	ne
 8006f10:	3301      	addne	r3, #1
 8006f12:	3501      	addeq	r5, #1
 8006f14:	4663      	moveq	r3, ip
 8006f16:	f023 0301 	bicne.w	r3, r3, #1
 8006f1a:	106a      	asrs	r2, r5, #1
 8006f1c:	085b      	lsrs	r3, r3, #1
 8006f1e:	07e9      	lsls	r1, r5, #31
 8006f20:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8006f24:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8006f28:	bf48      	it	mi
 8006f2a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8006f2e:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8006f32:	461c      	mov	r4, r3
 8006f34:	e780      	b.n	8006e38 <__ieee754_sqrt+0x30>
 8006f36:	0aca      	lsrs	r2, r1, #11
 8006f38:	3815      	subs	r0, #21
 8006f3a:	0549      	lsls	r1, r1, #21
 8006f3c:	2a00      	cmp	r2, #0
 8006f3e:	d0fa      	beq.n	8006f36 <__ieee754_sqrt+0x12e>
 8006f40:	02d6      	lsls	r6, r2, #11
 8006f42:	d50a      	bpl.n	8006f5a <__ieee754_sqrt+0x152>
 8006f44:	f1c3 0420 	rsb	r4, r3, #32
 8006f48:	fa21 f404 	lsr.w	r4, r1, r4
 8006f4c:	1e5d      	subs	r5, r3, #1
 8006f4e:	4099      	lsls	r1, r3
 8006f50:	4322      	orrs	r2, r4
 8006f52:	1b43      	subs	r3, r0, r5
 8006f54:	e78b      	b.n	8006e6e <__ieee754_sqrt+0x66>
 8006f56:	4618      	mov	r0, r3
 8006f58:	e7f0      	b.n	8006f3c <__ieee754_sqrt+0x134>
 8006f5a:	0052      	lsls	r2, r2, #1
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	e7ef      	b.n	8006f40 <__ieee754_sqrt+0x138>
 8006f60:	46a0      	mov	r8, r4
 8006f62:	e7bf      	b.n	8006ee4 <__ieee754_sqrt+0xdc>
 8006f64:	7ff00000 	.word	0x7ff00000

08006f68 <matherr>:
 8006f68:	2000      	movs	r0, #0
 8006f6a:	4770      	bx	lr

08006f6c <__errno>:
 8006f6c:	4b01      	ldr	r3, [pc, #4]	; (8006f74 <__errno+0x8>)
 8006f6e:	6818      	ldr	r0, [r3, #0]
 8006f70:	4770      	bx	lr
 8006f72:	bf00      	nop
 8006f74:	20000014 	.word	0x20000014

08006f78 <__libc_init_array>:
 8006f78:	b570      	push	{r4, r5, r6, lr}
 8006f7a:	4e0d      	ldr	r6, [pc, #52]	; (8006fb0 <__libc_init_array+0x38>)
 8006f7c:	4c0d      	ldr	r4, [pc, #52]	; (8006fb4 <__libc_init_array+0x3c>)
 8006f7e:	1ba4      	subs	r4, r4, r6
 8006f80:	10a4      	asrs	r4, r4, #2
 8006f82:	2500      	movs	r5, #0
 8006f84:	42a5      	cmp	r5, r4
 8006f86:	d109      	bne.n	8006f9c <__libc_init_array+0x24>
 8006f88:	4e0b      	ldr	r6, [pc, #44]	; (8006fb8 <__libc_init_array+0x40>)
 8006f8a:	4c0c      	ldr	r4, [pc, #48]	; (8006fbc <__libc_init_array+0x44>)
 8006f8c:	f000 f884 	bl	8007098 <_init>
 8006f90:	1ba4      	subs	r4, r4, r6
 8006f92:	10a4      	asrs	r4, r4, #2
 8006f94:	2500      	movs	r5, #0
 8006f96:	42a5      	cmp	r5, r4
 8006f98:	d105      	bne.n	8006fa6 <__libc_init_array+0x2e>
 8006f9a:	bd70      	pop	{r4, r5, r6, pc}
 8006f9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006fa0:	4798      	blx	r3
 8006fa2:	3501      	adds	r5, #1
 8006fa4:	e7ee      	b.n	8006f84 <__libc_init_array+0xc>
 8006fa6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006faa:	4798      	blx	r3
 8006fac:	3501      	adds	r5, #1
 8006fae:	e7f2      	b.n	8006f96 <__libc_init_array+0x1e>
 8006fb0:	08007118 	.word	0x08007118
 8006fb4:	08007118 	.word	0x08007118
 8006fb8:	08007118 	.word	0x08007118
 8006fbc:	08007120 	.word	0x08007120

08006fc0 <free>:
 8006fc0:	4b02      	ldr	r3, [pc, #8]	; (8006fcc <free+0xc>)
 8006fc2:	4601      	mov	r1, r0
 8006fc4:	6818      	ldr	r0, [r3, #0]
 8006fc6:	f000 b817 	b.w	8006ff8 <_free_r>
 8006fca:	bf00      	nop
 8006fcc:	20000014 	.word	0x20000014

08006fd0 <memcpy>:
 8006fd0:	b510      	push	{r4, lr}
 8006fd2:	1e43      	subs	r3, r0, #1
 8006fd4:	440a      	add	r2, r1
 8006fd6:	4291      	cmp	r1, r2
 8006fd8:	d100      	bne.n	8006fdc <memcpy+0xc>
 8006fda:	bd10      	pop	{r4, pc}
 8006fdc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fe0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fe4:	e7f7      	b.n	8006fd6 <memcpy+0x6>

08006fe6 <memset>:
 8006fe6:	4402      	add	r2, r0
 8006fe8:	4603      	mov	r3, r0
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d100      	bne.n	8006ff0 <memset+0xa>
 8006fee:	4770      	bx	lr
 8006ff0:	f803 1b01 	strb.w	r1, [r3], #1
 8006ff4:	e7f9      	b.n	8006fea <memset+0x4>
	...

08006ff8 <_free_r>:
 8006ff8:	b538      	push	{r3, r4, r5, lr}
 8006ffa:	4605      	mov	r5, r0
 8006ffc:	2900      	cmp	r1, #0
 8006ffe:	d045      	beq.n	800708c <_free_r+0x94>
 8007000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007004:	1f0c      	subs	r4, r1, #4
 8007006:	2b00      	cmp	r3, #0
 8007008:	bfb8      	it	lt
 800700a:	18e4      	addlt	r4, r4, r3
 800700c:	f000 f842 	bl	8007094 <__malloc_lock>
 8007010:	4a1f      	ldr	r2, [pc, #124]	; (8007090 <_free_r+0x98>)
 8007012:	6813      	ldr	r3, [r2, #0]
 8007014:	4610      	mov	r0, r2
 8007016:	b933      	cbnz	r3, 8007026 <_free_r+0x2e>
 8007018:	6063      	str	r3, [r4, #4]
 800701a:	6014      	str	r4, [r2, #0]
 800701c:	4628      	mov	r0, r5
 800701e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007022:	f000 b838 	b.w	8007096 <__malloc_unlock>
 8007026:	42a3      	cmp	r3, r4
 8007028:	d90c      	bls.n	8007044 <_free_r+0x4c>
 800702a:	6821      	ldr	r1, [r4, #0]
 800702c:	1862      	adds	r2, r4, r1
 800702e:	4293      	cmp	r3, r2
 8007030:	bf04      	itt	eq
 8007032:	681a      	ldreq	r2, [r3, #0]
 8007034:	685b      	ldreq	r3, [r3, #4]
 8007036:	6063      	str	r3, [r4, #4]
 8007038:	bf04      	itt	eq
 800703a:	1852      	addeq	r2, r2, r1
 800703c:	6022      	streq	r2, [r4, #0]
 800703e:	6004      	str	r4, [r0, #0]
 8007040:	e7ec      	b.n	800701c <_free_r+0x24>
 8007042:	4613      	mov	r3, r2
 8007044:	685a      	ldr	r2, [r3, #4]
 8007046:	b10a      	cbz	r2, 800704c <_free_r+0x54>
 8007048:	42a2      	cmp	r2, r4
 800704a:	d9fa      	bls.n	8007042 <_free_r+0x4a>
 800704c:	6819      	ldr	r1, [r3, #0]
 800704e:	1858      	adds	r0, r3, r1
 8007050:	42a0      	cmp	r0, r4
 8007052:	d10b      	bne.n	800706c <_free_r+0x74>
 8007054:	6820      	ldr	r0, [r4, #0]
 8007056:	4401      	add	r1, r0
 8007058:	1858      	adds	r0, r3, r1
 800705a:	4282      	cmp	r2, r0
 800705c:	6019      	str	r1, [r3, #0]
 800705e:	d1dd      	bne.n	800701c <_free_r+0x24>
 8007060:	6810      	ldr	r0, [r2, #0]
 8007062:	6852      	ldr	r2, [r2, #4]
 8007064:	605a      	str	r2, [r3, #4]
 8007066:	4401      	add	r1, r0
 8007068:	6019      	str	r1, [r3, #0]
 800706a:	e7d7      	b.n	800701c <_free_r+0x24>
 800706c:	d902      	bls.n	8007074 <_free_r+0x7c>
 800706e:	230c      	movs	r3, #12
 8007070:	602b      	str	r3, [r5, #0]
 8007072:	e7d3      	b.n	800701c <_free_r+0x24>
 8007074:	6820      	ldr	r0, [r4, #0]
 8007076:	1821      	adds	r1, r4, r0
 8007078:	428a      	cmp	r2, r1
 800707a:	bf04      	itt	eq
 800707c:	6811      	ldreq	r1, [r2, #0]
 800707e:	6852      	ldreq	r2, [r2, #4]
 8007080:	6062      	str	r2, [r4, #4]
 8007082:	bf04      	itt	eq
 8007084:	1809      	addeq	r1, r1, r0
 8007086:	6021      	streq	r1, [r4, #0]
 8007088:	605c      	str	r4, [r3, #4]
 800708a:	e7c7      	b.n	800701c <_free_r+0x24>
 800708c:	bd38      	pop	{r3, r4, r5, pc}
 800708e:	bf00      	nop
 8007090:	20004a94 	.word	0x20004a94

08007094 <__malloc_lock>:
 8007094:	4770      	bx	lr

08007096 <__malloc_unlock>:
 8007096:	4770      	bx	lr

08007098 <_init>:
 8007098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800709a:	bf00      	nop
 800709c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800709e:	bc08      	pop	{r3}
 80070a0:	469e      	mov	lr, r3
 80070a2:	4770      	bx	lr

080070a4 <_fini>:
 80070a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070a6:	bf00      	nop
 80070a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070aa:	bc08      	pop	{r3}
 80070ac:	469e      	mov	lr, r3
 80070ae:	4770      	bx	lr
=======
 8007046:	bf00      	nop
 8007048:	3714      	adds	r7, #20
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	20004a78 	.word	0x20004a78
 8007058:	20004a80 	.word	0x20004a80

0800705c <_ZdlPvj>:
 800705c:	f000 b800 	b.w	8007060 <_ZdlPv>

08007060 <_ZdlPv>:
 8007060:	f000 b936 	b.w	80072d0 <free>

08007064 <sqrt>:
 8007064:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007068:	ed2d 8b02 	vpush	{d8}
 800706c:	b08b      	sub	sp, #44	; 0x2c
 800706e:	ec55 4b10 	vmov	r4, r5, d0
 8007072:	f000 f851 	bl	8007118 <__ieee754_sqrt>
 8007076:	4b26      	ldr	r3, [pc, #152]	; (8007110 <sqrt+0xac>)
 8007078:	eeb0 8a40 	vmov.f32	s16, s0
 800707c:	eef0 8a60 	vmov.f32	s17, s1
 8007080:	f993 6000 	ldrsb.w	r6, [r3]
 8007084:	1c73      	adds	r3, r6, #1
 8007086:	d02a      	beq.n	80070de <sqrt+0x7a>
 8007088:	4622      	mov	r2, r4
 800708a:	462b      	mov	r3, r5
 800708c:	4620      	mov	r0, r4
 800708e:	4629      	mov	r1, r5
 8007090:	f7f9 fd54 	bl	8000b3c <__aeabi_dcmpun>
 8007094:	4607      	mov	r7, r0
 8007096:	bb10      	cbnz	r0, 80070de <sqrt+0x7a>
 8007098:	f04f 0800 	mov.w	r8, #0
 800709c:	f04f 0900 	mov.w	r9, #0
 80070a0:	4642      	mov	r2, r8
 80070a2:	464b      	mov	r3, r9
 80070a4:	4620      	mov	r0, r4
 80070a6:	4629      	mov	r1, r5
 80070a8:	f7f9 fd20 	bl	8000aec <__aeabi_dcmplt>
 80070ac:	b1b8      	cbz	r0, 80070de <sqrt+0x7a>
 80070ae:	2301      	movs	r3, #1
 80070b0:	9300      	str	r3, [sp, #0]
 80070b2:	4b18      	ldr	r3, [pc, #96]	; (8007114 <sqrt+0xb0>)
 80070b4:	9301      	str	r3, [sp, #4]
 80070b6:	9708      	str	r7, [sp, #32]
 80070b8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80070bc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80070c0:	b9b6      	cbnz	r6, 80070f0 <sqrt+0x8c>
 80070c2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80070c6:	4668      	mov	r0, sp
 80070c8:	f000 f8d6 	bl	8007278 <matherr>
 80070cc:	b1d0      	cbz	r0, 8007104 <sqrt+0xa0>
 80070ce:	9b08      	ldr	r3, [sp, #32]
 80070d0:	b11b      	cbz	r3, 80070da <sqrt+0x76>
 80070d2:	f000 f8d3 	bl	800727c <__errno>
 80070d6:	9b08      	ldr	r3, [sp, #32]
 80070d8:	6003      	str	r3, [r0, #0]
 80070da:	ed9d 8b06 	vldr	d8, [sp, #24]
 80070de:	eeb0 0a48 	vmov.f32	s0, s16
 80070e2:	eef0 0a68 	vmov.f32	s1, s17
 80070e6:	b00b      	add	sp, #44	; 0x2c
 80070e8:	ecbd 8b02 	vpop	{d8}
 80070ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80070f0:	4642      	mov	r2, r8
 80070f2:	464b      	mov	r3, r9
 80070f4:	4640      	mov	r0, r8
 80070f6:	4649      	mov	r1, r9
 80070f8:	f7f9 fbb0 	bl	800085c <__aeabi_ddiv>
 80070fc:	2e02      	cmp	r6, #2
 80070fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007102:	d1e0      	bne.n	80070c6 <sqrt+0x62>
 8007104:	f000 f8ba 	bl	800727c <__errno>
 8007108:	2321      	movs	r3, #33	; 0x21
 800710a:	6003      	str	r3, [r0, #0]
 800710c:	e7df      	b.n	80070ce <sqrt+0x6a>
 800710e:	bf00      	nop
 8007110:	20000010 	.word	0x20000010
 8007114:	08007b80 	.word	0x08007b80

08007118 <__ieee754_sqrt>:
 8007118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800711c:	4955      	ldr	r1, [pc, #340]	; (8007274 <__ieee754_sqrt+0x15c>)
 800711e:	ec55 4b10 	vmov	r4, r5, d0
 8007122:	43a9      	bics	r1, r5
 8007124:	462b      	mov	r3, r5
 8007126:	462a      	mov	r2, r5
 8007128:	d112      	bne.n	8007150 <__ieee754_sqrt+0x38>
 800712a:	ee10 2a10 	vmov	r2, s0
 800712e:	ee10 0a10 	vmov	r0, s0
 8007132:	4629      	mov	r1, r5
 8007134:	f7f9 fa68 	bl	8000608 <__aeabi_dmul>
 8007138:	4602      	mov	r2, r0
 800713a:	460b      	mov	r3, r1
 800713c:	4620      	mov	r0, r4
 800713e:	4629      	mov	r1, r5
 8007140:	f7f9 f8ac 	bl	800029c <__adddf3>
 8007144:	4604      	mov	r4, r0
 8007146:	460d      	mov	r5, r1
 8007148:	ec45 4b10 	vmov	d0, r4, r5
 800714c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007150:	2d00      	cmp	r5, #0
 8007152:	ee10 0a10 	vmov	r0, s0
 8007156:	4621      	mov	r1, r4
 8007158:	dc0f      	bgt.n	800717a <__ieee754_sqrt+0x62>
 800715a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800715e:	4330      	orrs	r0, r6
 8007160:	d0f2      	beq.n	8007148 <__ieee754_sqrt+0x30>
 8007162:	b155      	cbz	r5, 800717a <__ieee754_sqrt+0x62>
 8007164:	ee10 2a10 	vmov	r2, s0
 8007168:	4620      	mov	r0, r4
 800716a:	4629      	mov	r1, r5
 800716c:	f7f9 f894 	bl	8000298 <__aeabi_dsub>
 8007170:	4602      	mov	r2, r0
 8007172:	460b      	mov	r3, r1
 8007174:	f7f9 fb72 	bl	800085c <__aeabi_ddiv>
 8007178:	e7e4      	b.n	8007144 <__ieee754_sqrt+0x2c>
 800717a:	151b      	asrs	r3, r3, #20
 800717c:	d073      	beq.n	8007266 <__ieee754_sqrt+0x14e>
 800717e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007182:	07dd      	lsls	r5, r3, #31
 8007184:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007188:	bf48      	it	mi
 800718a:	0fc8      	lsrmi	r0, r1, #31
 800718c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007190:	bf44      	itt	mi
 8007192:	0049      	lslmi	r1, r1, #1
 8007194:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8007198:	2500      	movs	r5, #0
 800719a:	1058      	asrs	r0, r3, #1
 800719c:	0fcb      	lsrs	r3, r1, #31
 800719e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80071a2:	0049      	lsls	r1, r1, #1
 80071a4:	2316      	movs	r3, #22
 80071a6:	462c      	mov	r4, r5
 80071a8:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80071ac:	19a7      	adds	r7, r4, r6
 80071ae:	4297      	cmp	r7, r2
 80071b0:	bfde      	ittt	le
 80071b2:	19bc      	addle	r4, r7, r6
 80071b4:	1bd2      	suble	r2, r2, r7
 80071b6:	19ad      	addle	r5, r5, r6
 80071b8:	0fcf      	lsrs	r7, r1, #31
 80071ba:	3b01      	subs	r3, #1
 80071bc:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80071c0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80071c4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80071c8:	d1f0      	bne.n	80071ac <__ieee754_sqrt+0x94>
 80071ca:	f04f 0c20 	mov.w	ip, #32
 80071ce:	469e      	mov	lr, r3
 80071d0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80071d4:	42a2      	cmp	r2, r4
 80071d6:	eb06 070e 	add.w	r7, r6, lr
 80071da:	dc02      	bgt.n	80071e2 <__ieee754_sqrt+0xca>
 80071dc:	d112      	bne.n	8007204 <__ieee754_sqrt+0xec>
 80071de:	428f      	cmp	r7, r1
 80071e0:	d810      	bhi.n	8007204 <__ieee754_sqrt+0xec>
 80071e2:	2f00      	cmp	r7, #0
 80071e4:	eb07 0e06 	add.w	lr, r7, r6
 80071e8:	da42      	bge.n	8007270 <__ieee754_sqrt+0x158>
 80071ea:	f1be 0f00 	cmp.w	lr, #0
 80071ee:	db3f      	blt.n	8007270 <__ieee754_sqrt+0x158>
 80071f0:	f104 0801 	add.w	r8, r4, #1
 80071f4:	1b12      	subs	r2, r2, r4
 80071f6:	428f      	cmp	r7, r1
 80071f8:	bf88      	it	hi
 80071fa:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 80071fe:	1bc9      	subs	r1, r1, r7
 8007200:	4433      	add	r3, r6
 8007202:	4644      	mov	r4, r8
 8007204:	0052      	lsls	r2, r2, #1
 8007206:	f1bc 0c01 	subs.w	ip, ip, #1
 800720a:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800720e:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007212:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007216:	d1dd      	bne.n	80071d4 <__ieee754_sqrt+0xbc>
 8007218:	430a      	orrs	r2, r1
 800721a:	d006      	beq.n	800722a <__ieee754_sqrt+0x112>
 800721c:	1c5c      	adds	r4, r3, #1
 800721e:	bf13      	iteet	ne
 8007220:	3301      	addne	r3, #1
 8007222:	3501      	addeq	r5, #1
 8007224:	4663      	moveq	r3, ip
 8007226:	f023 0301 	bicne.w	r3, r3, #1
 800722a:	106a      	asrs	r2, r5, #1
 800722c:	085b      	lsrs	r3, r3, #1
 800722e:	07e9      	lsls	r1, r5, #31
 8007230:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007234:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007238:	bf48      	it	mi
 800723a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800723e:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8007242:	461c      	mov	r4, r3
 8007244:	e780      	b.n	8007148 <__ieee754_sqrt+0x30>
 8007246:	0aca      	lsrs	r2, r1, #11
 8007248:	3815      	subs	r0, #21
 800724a:	0549      	lsls	r1, r1, #21
 800724c:	2a00      	cmp	r2, #0
 800724e:	d0fa      	beq.n	8007246 <__ieee754_sqrt+0x12e>
 8007250:	02d6      	lsls	r6, r2, #11
 8007252:	d50a      	bpl.n	800726a <__ieee754_sqrt+0x152>
 8007254:	f1c3 0420 	rsb	r4, r3, #32
 8007258:	fa21 f404 	lsr.w	r4, r1, r4
 800725c:	1e5d      	subs	r5, r3, #1
 800725e:	4099      	lsls	r1, r3
 8007260:	4322      	orrs	r2, r4
 8007262:	1b43      	subs	r3, r0, r5
 8007264:	e78b      	b.n	800717e <__ieee754_sqrt+0x66>
 8007266:	4618      	mov	r0, r3
 8007268:	e7f0      	b.n	800724c <__ieee754_sqrt+0x134>
 800726a:	0052      	lsls	r2, r2, #1
 800726c:	3301      	adds	r3, #1
 800726e:	e7ef      	b.n	8007250 <__ieee754_sqrt+0x138>
 8007270:	46a0      	mov	r8, r4
 8007272:	e7bf      	b.n	80071f4 <__ieee754_sqrt+0xdc>
 8007274:	7ff00000 	.word	0x7ff00000

08007278 <matherr>:
 8007278:	2000      	movs	r0, #0
 800727a:	4770      	bx	lr

0800727c <__errno>:
 800727c:	4b01      	ldr	r3, [pc, #4]	; (8007284 <__errno+0x8>)
 800727e:	6818      	ldr	r0, [r3, #0]
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	20000014 	.word	0x20000014

08007288 <__libc_init_array>:
 8007288:	b570      	push	{r4, r5, r6, lr}
 800728a:	4e0d      	ldr	r6, [pc, #52]	; (80072c0 <__libc_init_array+0x38>)
 800728c:	4c0d      	ldr	r4, [pc, #52]	; (80072c4 <__libc_init_array+0x3c>)
 800728e:	1ba4      	subs	r4, r4, r6
 8007290:	10a4      	asrs	r4, r4, #2
 8007292:	2500      	movs	r5, #0
 8007294:	42a5      	cmp	r5, r4
 8007296:	d109      	bne.n	80072ac <__libc_init_array+0x24>
 8007298:	4e0b      	ldr	r6, [pc, #44]	; (80072c8 <__libc_init_array+0x40>)
 800729a:	4c0c      	ldr	r4, [pc, #48]	; (80072cc <__libc_init_array+0x44>)
 800729c:	f000 fc30 	bl	8007b00 <_init>
 80072a0:	1ba4      	subs	r4, r4, r6
 80072a2:	10a4      	asrs	r4, r4, #2
 80072a4:	2500      	movs	r5, #0
 80072a6:	42a5      	cmp	r5, r4
 80072a8:	d105      	bne.n	80072b6 <__libc_init_array+0x2e>
 80072aa:	bd70      	pop	{r4, r5, r6, pc}
 80072ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80072b0:	4798      	blx	r3
 80072b2:	3501      	adds	r5, #1
 80072b4:	e7ee      	b.n	8007294 <__libc_init_array+0xc>
 80072b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80072ba:	4798      	blx	r3
 80072bc:	3501      	adds	r5, #1
 80072be:	e7f2      	b.n	80072a6 <__libc_init_array+0x1e>
 80072c0:	08007bc0 	.word	0x08007bc0
 80072c4:	08007bc0 	.word	0x08007bc0
 80072c8:	08007bc0 	.word	0x08007bc0
 80072cc:	08007bc8 	.word	0x08007bc8

080072d0 <free>:
 80072d0:	4b02      	ldr	r3, [pc, #8]	; (80072dc <free+0xc>)
 80072d2:	4601      	mov	r1, r0
 80072d4:	6818      	ldr	r0, [r3, #0]
 80072d6:	f000 b817 	b.w	8007308 <_free_r>
 80072da:	bf00      	nop
 80072dc:	20000014 	.word	0x20000014

080072e0 <memcpy>:
 80072e0:	b510      	push	{r4, lr}
 80072e2:	1e43      	subs	r3, r0, #1
 80072e4:	440a      	add	r2, r1
 80072e6:	4291      	cmp	r1, r2
 80072e8:	d100      	bne.n	80072ec <memcpy+0xc>
 80072ea:	bd10      	pop	{r4, pc}
 80072ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072f4:	e7f7      	b.n	80072e6 <memcpy+0x6>

080072f6 <memset>:
 80072f6:	4402      	add	r2, r0
 80072f8:	4603      	mov	r3, r0
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d100      	bne.n	8007300 <memset+0xa>
 80072fe:	4770      	bx	lr
 8007300:	f803 1b01 	strb.w	r1, [r3], #1
 8007304:	e7f9      	b.n	80072fa <memset+0x4>
	...

08007308 <_free_r>:
 8007308:	b538      	push	{r3, r4, r5, lr}
 800730a:	4605      	mov	r5, r0
 800730c:	2900      	cmp	r1, #0
 800730e:	d045      	beq.n	800739c <_free_r+0x94>
 8007310:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007314:	1f0c      	subs	r4, r1, #4
 8007316:	2b00      	cmp	r3, #0
 8007318:	bfb8      	it	lt
 800731a:	18e4      	addlt	r4, r4, r3
 800731c:	f000 f8cc 	bl	80074b8 <__malloc_lock>
 8007320:	4a1f      	ldr	r2, [pc, #124]	; (80073a0 <_free_r+0x98>)
 8007322:	6813      	ldr	r3, [r2, #0]
 8007324:	4610      	mov	r0, r2
 8007326:	b933      	cbnz	r3, 8007336 <_free_r+0x2e>
 8007328:	6063      	str	r3, [r4, #4]
 800732a:	6014      	str	r4, [r2, #0]
 800732c:	4628      	mov	r0, r5
 800732e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007332:	f000 b8c2 	b.w	80074ba <__malloc_unlock>
 8007336:	42a3      	cmp	r3, r4
 8007338:	d90c      	bls.n	8007354 <_free_r+0x4c>
 800733a:	6821      	ldr	r1, [r4, #0]
 800733c:	1862      	adds	r2, r4, r1
 800733e:	4293      	cmp	r3, r2
 8007340:	bf04      	itt	eq
 8007342:	681a      	ldreq	r2, [r3, #0]
 8007344:	685b      	ldreq	r3, [r3, #4]
 8007346:	6063      	str	r3, [r4, #4]
 8007348:	bf04      	itt	eq
 800734a:	1852      	addeq	r2, r2, r1
 800734c:	6022      	streq	r2, [r4, #0]
 800734e:	6004      	str	r4, [r0, #0]
 8007350:	e7ec      	b.n	800732c <_free_r+0x24>
 8007352:	4613      	mov	r3, r2
 8007354:	685a      	ldr	r2, [r3, #4]
 8007356:	b10a      	cbz	r2, 800735c <_free_r+0x54>
 8007358:	42a2      	cmp	r2, r4
 800735a:	d9fa      	bls.n	8007352 <_free_r+0x4a>
 800735c:	6819      	ldr	r1, [r3, #0]
 800735e:	1858      	adds	r0, r3, r1
 8007360:	42a0      	cmp	r0, r4
 8007362:	d10b      	bne.n	800737c <_free_r+0x74>
 8007364:	6820      	ldr	r0, [r4, #0]
 8007366:	4401      	add	r1, r0
 8007368:	1858      	adds	r0, r3, r1
 800736a:	4282      	cmp	r2, r0
 800736c:	6019      	str	r1, [r3, #0]
 800736e:	d1dd      	bne.n	800732c <_free_r+0x24>
 8007370:	6810      	ldr	r0, [r2, #0]
 8007372:	6852      	ldr	r2, [r2, #4]
 8007374:	605a      	str	r2, [r3, #4]
 8007376:	4401      	add	r1, r0
 8007378:	6019      	str	r1, [r3, #0]
 800737a:	e7d7      	b.n	800732c <_free_r+0x24>
 800737c:	d902      	bls.n	8007384 <_free_r+0x7c>
 800737e:	230c      	movs	r3, #12
 8007380:	602b      	str	r3, [r5, #0]
 8007382:	e7d3      	b.n	800732c <_free_r+0x24>
 8007384:	6820      	ldr	r0, [r4, #0]
 8007386:	1821      	adds	r1, r4, r0
 8007388:	428a      	cmp	r2, r1
 800738a:	bf04      	itt	eq
 800738c:	6811      	ldreq	r1, [r2, #0]
 800738e:	6852      	ldreq	r2, [r2, #4]
 8007390:	6062      	str	r2, [r4, #4]
 8007392:	bf04      	itt	eq
 8007394:	1809      	addeq	r1, r1, r0
 8007396:	6021      	streq	r1, [r4, #0]
 8007398:	605c      	str	r4, [r3, #4]
 800739a:	e7c7      	b.n	800732c <_free_r+0x24>
 800739c:	bd38      	pop	{r3, r4, r5, pc}
 800739e:	bf00      	nop
 80073a0:	20004a90 	.word	0x20004a90

080073a4 <_malloc_r>:
 80073a4:	b570      	push	{r4, r5, r6, lr}
 80073a6:	1ccd      	adds	r5, r1, #3
 80073a8:	f025 0503 	bic.w	r5, r5, #3
 80073ac:	3508      	adds	r5, #8
 80073ae:	2d0c      	cmp	r5, #12
 80073b0:	bf38      	it	cc
 80073b2:	250c      	movcc	r5, #12
 80073b4:	2d00      	cmp	r5, #0
 80073b6:	4606      	mov	r6, r0
 80073b8:	db01      	blt.n	80073be <_malloc_r+0x1a>
 80073ba:	42a9      	cmp	r1, r5
 80073bc:	d903      	bls.n	80073c6 <_malloc_r+0x22>
 80073be:	230c      	movs	r3, #12
 80073c0:	6033      	str	r3, [r6, #0]
 80073c2:	2000      	movs	r0, #0
 80073c4:	bd70      	pop	{r4, r5, r6, pc}
 80073c6:	f000 f877 	bl	80074b8 <__malloc_lock>
 80073ca:	4a21      	ldr	r2, [pc, #132]	; (8007450 <_malloc_r+0xac>)
 80073cc:	6814      	ldr	r4, [r2, #0]
 80073ce:	4621      	mov	r1, r4
 80073d0:	b991      	cbnz	r1, 80073f8 <_malloc_r+0x54>
 80073d2:	4c20      	ldr	r4, [pc, #128]	; (8007454 <_malloc_r+0xb0>)
 80073d4:	6823      	ldr	r3, [r4, #0]
 80073d6:	b91b      	cbnz	r3, 80073e0 <_malloc_r+0x3c>
 80073d8:	4630      	mov	r0, r6
 80073da:	f000 f83d 	bl	8007458 <_sbrk_r>
 80073de:	6020      	str	r0, [r4, #0]
 80073e0:	4629      	mov	r1, r5
 80073e2:	4630      	mov	r0, r6
 80073e4:	f000 f838 	bl	8007458 <_sbrk_r>
 80073e8:	1c43      	adds	r3, r0, #1
 80073ea:	d124      	bne.n	8007436 <_malloc_r+0x92>
 80073ec:	230c      	movs	r3, #12
 80073ee:	6033      	str	r3, [r6, #0]
 80073f0:	4630      	mov	r0, r6
 80073f2:	f000 f862 	bl	80074ba <__malloc_unlock>
 80073f6:	e7e4      	b.n	80073c2 <_malloc_r+0x1e>
 80073f8:	680b      	ldr	r3, [r1, #0]
 80073fa:	1b5b      	subs	r3, r3, r5
 80073fc:	d418      	bmi.n	8007430 <_malloc_r+0x8c>
 80073fe:	2b0b      	cmp	r3, #11
 8007400:	d90f      	bls.n	8007422 <_malloc_r+0x7e>
 8007402:	600b      	str	r3, [r1, #0]
 8007404:	50cd      	str	r5, [r1, r3]
 8007406:	18cc      	adds	r4, r1, r3
 8007408:	4630      	mov	r0, r6
 800740a:	f000 f856 	bl	80074ba <__malloc_unlock>
 800740e:	f104 000b 	add.w	r0, r4, #11
 8007412:	1d23      	adds	r3, r4, #4
 8007414:	f020 0007 	bic.w	r0, r0, #7
 8007418:	1ac3      	subs	r3, r0, r3
 800741a:	d0d3      	beq.n	80073c4 <_malloc_r+0x20>
 800741c:	425a      	negs	r2, r3
 800741e:	50e2      	str	r2, [r4, r3]
 8007420:	e7d0      	b.n	80073c4 <_malloc_r+0x20>
 8007422:	428c      	cmp	r4, r1
 8007424:	684b      	ldr	r3, [r1, #4]
 8007426:	bf16      	itet	ne
 8007428:	6063      	strne	r3, [r4, #4]
 800742a:	6013      	streq	r3, [r2, #0]
 800742c:	460c      	movne	r4, r1
 800742e:	e7eb      	b.n	8007408 <_malloc_r+0x64>
 8007430:	460c      	mov	r4, r1
 8007432:	6849      	ldr	r1, [r1, #4]
 8007434:	e7cc      	b.n	80073d0 <_malloc_r+0x2c>
 8007436:	1cc4      	adds	r4, r0, #3
 8007438:	f024 0403 	bic.w	r4, r4, #3
 800743c:	42a0      	cmp	r0, r4
 800743e:	d005      	beq.n	800744c <_malloc_r+0xa8>
 8007440:	1a21      	subs	r1, r4, r0
 8007442:	4630      	mov	r0, r6
 8007444:	f000 f808 	bl	8007458 <_sbrk_r>
 8007448:	3001      	adds	r0, #1
 800744a:	d0cf      	beq.n	80073ec <_malloc_r+0x48>
 800744c:	6025      	str	r5, [r4, #0]
 800744e:	e7db      	b.n	8007408 <_malloc_r+0x64>
 8007450:	20004a90 	.word	0x20004a90
 8007454:	20004a94 	.word	0x20004a94

08007458 <_sbrk_r>:
 8007458:	b538      	push	{r3, r4, r5, lr}
 800745a:	4c06      	ldr	r4, [pc, #24]	; (8007474 <_sbrk_r+0x1c>)
 800745c:	2300      	movs	r3, #0
 800745e:	4605      	mov	r5, r0
 8007460:	4608      	mov	r0, r1
 8007462:	6023      	str	r3, [r4, #0]
 8007464:	f7fa fb46 	bl	8001af4 <_sbrk>
 8007468:	1c43      	adds	r3, r0, #1
 800746a:	d102      	bne.n	8007472 <_sbrk_r+0x1a>
 800746c:	6823      	ldr	r3, [r4, #0]
 800746e:	b103      	cbz	r3, 8007472 <_sbrk_r+0x1a>
 8007470:	602b      	str	r3, [r5, #0]
 8007472:	bd38      	pop	{r3, r4, r5, pc}
 8007474:	20004b1c 	.word	0x20004b1c

08007478 <_vsiprintf_r>:
 8007478:	b500      	push	{lr}
 800747a:	b09b      	sub	sp, #108	; 0x6c
 800747c:	9100      	str	r1, [sp, #0]
 800747e:	9104      	str	r1, [sp, #16]
 8007480:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007484:	9105      	str	r1, [sp, #20]
 8007486:	9102      	str	r1, [sp, #8]
 8007488:	4905      	ldr	r1, [pc, #20]	; (80074a0 <_vsiprintf_r+0x28>)
 800748a:	9103      	str	r1, [sp, #12]
 800748c:	4669      	mov	r1, sp
 800748e:	f000 f86f 	bl	8007570 <_svfiprintf_r>
 8007492:	9b00      	ldr	r3, [sp, #0]
 8007494:	2200      	movs	r2, #0
 8007496:	701a      	strb	r2, [r3, #0]
 8007498:	b01b      	add	sp, #108	; 0x6c
 800749a:	f85d fb04 	ldr.w	pc, [sp], #4
 800749e:	bf00      	nop
 80074a0:	ffff0208 	.word	0xffff0208

080074a4 <vsiprintf>:
 80074a4:	4613      	mov	r3, r2
 80074a6:	460a      	mov	r2, r1
 80074a8:	4601      	mov	r1, r0
 80074aa:	4802      	ldr	r0, [pc, #8]	; (80074b4 <vsiprintf+0x10>)
 80074ac:	6800      	ldr	r0, [r0, #0]
 80074ae:	f7ff bfe3 	b.w	8007478 <_vsiprintf_r>
 80074b2:	bf00      	nop
 80074b4:	20000014 	.word	0x20000014

080074b8 <__malloc_lock>:
 80074b8:	4770      	bx	lr

080074ba <__malloc_unlock>:
 80074ba:	4770      	bx	lr

080074bc <__ssputs_r>:
 80074bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074c0:	688e      	ldr	r6, [r1, #8]
 80074c2:	429e      	cmp	r6, r3
 80074c4:	4682      	mov	sl, r0
 80074c6:	460c      	mov	r4, r1
 80074c8:	4690      	mov	r8, r2
 80074ca:	4699      	mov	r9, r3
 80074cc:	d837      	bhi.n	800753e <__ssputs_r+0x82>
 80074ce:	898a      	ldrh	r2, [r1, #12]
 80074d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80074d4:	d031      	beq.n	800753a <__ssputs_r+0x7e>
 80074d6:	6825      	ldr	r5, [r4, #0]
 80074d8:	6909      	ldr	r1, [r1, #16]
 80074da:	1a6f      	subs	r7, r5, r1
 80074dc:	6965      	ldr	r5, [r4, #20]
 80074de:	2302      	movs	r3, #2
 80074e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80074e4:	fb95 f5f3 	sdiv	r5, r5, r3
 80074e8:	f109 0301 	add.w	r3, r9, #1
 80074ec:	443b      	add	r3, r7
 80074ee:	429d      	cmp	r5, r3
 80074f0:	bf38      	it	cc
 80074f2:	461d      	movcc	r5, r3
 80074f4:	0553      	lsls	r3, r2, #21
 80074f6:	d530      	bpl.n	800755a <__ssputs_r+0x9e>
 80074f8:	4629      	mov	r1, r5
 80074fa:	f7ff ff53 	bl	80073a4 <_malloc_r>
 80074fe:	4606      	mov	r6, r0
 8007500:	b950      	cbnz	r0, 8007518 <__ssputs_r+0x5c>
 8007502:	230c      	movs	r3, #12
 8007504:	f8ca 3000 	str.w	r3, [sl]
 8007508:	89a3      	ldrh	r3, [r4, #12]
 800750a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800750e:	81a3      	strh	r3, [r4, #12]
 8007510:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007518:	463a      	mov	r2, r7
 800751a:	6921      	ldr	r1, [r4, #16]
 800751c:	f7ff fee0 	bl	80072e0 <memcpy>
 8007520:	89a3      	ldrh	r3, [r4, #12]
 8007522:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800752a:	81a3      	strh	r3, [r4, #12]
 800752c:	6126      	str	r6, [r4, #16]
 800752e:	6165      	str	r5, [r4, #20]
 8007530:	443e      	add	r6, r7
 8007532:	1bed      	subs	r5, r5, r7
 8007534:	6026      	str	r6, [r4, #0]
 8007536:	60a5      	str	r5, [r4, #8]
 8007538:	464e      	mov	r6, r9
 800753a:	454e      	cmp	r6, r9
 800753c:	d900      	bls.n	8007540 <__ssputs_r+0x84>
 800753e:	464e      	mov	r6, r9
 8007540:	4632      	mov	r2, r6
 8007542:	4641      	mov	r1, r8
 8007544:	6820      	ldr	r0, [r4, #0]
 8007546:	f000 fa93 	bl	8007a70 <memmove>
 800754a:	68a3      	ldr	r3, [r4, #8]
 800754c:	1b9b      	subs	r3, r3, r6
 800754e:	60a3      	str	r3, [r4, #8]
 8007550:	6823      	ldr	r3, [r4, #0]
 8007552:	441e      	add	r6, r3
 8007554:	6026      	str	r6, [r4, #0]
 8007556:	2000      	movs	r0, #0
 8007558:	e7dc      	b.n	8007514 <__ssputs_r+0x58>
 800755a:	462a      	mov	r2, r5
 800755c:	f000 faa1 	bl	8007aa2 <_realloc_r>
 8007560:	4606      	mov	r6, r0
 8007562:	2800      	cmp	r0, #0
 8007564:	d1e2      	bne.n	800752c <__ssputs_r+0x70>
 8007566:	6921      	ldr	r1, [r4, #16]
 8007568:	4650      	mov	r0, sl
 800756a:	f7ff fecd 	bl	8007308 <_free_r>
 800756e:	e7c8      	b.n	8007502 <__ssputs_r+0x46>

08007570 <_svfiprintf_r>:
 8007570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007574:	461d      	mov	r5, r3
 8007576:	898b      	ldrh	r3, [r1, #12]
 8007578:	061f      	lsls	r7, r3, #24
 800757a:	b09d      	sub	sp, #116	; 0x74
 800757c:	4680      	mov	r8, r0
 800757e:	460c      	mov	r4, r1
 8007580:	4616      	mov	r6, r2
 8007582:	d50f      	bpl.n	80075a4 <_svfiprintf_r+0x34>
 8007584:	690b      	ldr	r3, [r1, #16]
 8007586:	b96b      	cbnz	r3, 80075a4 <_svfiprintf_r+0x34>
 8007588:	2140      	movs	r1, #64	; 0x40
 800758a:	f7ff ff0b 	bl	80073a4 <_malloc_r>
 800758e:	6020      	str	r0, [r4, #0]
 8007590:	6120      	str	r0, [r4, #16]
 8007592:	b928      	cbnz	r0, 80075a0 <_svfiprintf_r+0x30>
 8007594:	230c      	movs	r3, #12
 8007596:	f8c8 3000 	str.w	r3, [r8]
 800759a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800759e:	e0c8      	b.n	8007732 <_svfiprintf_r+0x1c2>
 80075a0:	2340      	movs	r3, #64	; 0x40
 80075a2:	6163      	str	r3, [r4, #20]
 80075a4:	2300      	movs	r3, #0
 80075a6:	9309      	str	r3, [sp, #36]	; 0x24
 80075a8:	2320      	movs	r3, #32
 80075aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80075ae:	2330      	movs	r3, #48	; 0x30
 80075b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075b4:	9503      	str	r5, [sp, #12]
 80075b6:	f04f 0b01 	mov.w	fp, #1
 80075ba:	4637      	mov	r7, r6
 80075bc:	463d      	mov	r5, r7
 80075be:	f815 3b01 	ldrb.w	r3, [r5], #1
 80075c2:	b10b      	cbz	r3, 80075c8 <_svfiprintf_r+0x58>
 80075c4:	2b25      	cmp	r3, #37	; 0x25
 80075c6:	d13e      	bne.n	8007646 <_svfiprintf_r+0xd6>
 80075c8:	ebb7 0a06 	subs.w	sl, r7, r6
 80075cc:	d00b      	beq.n	80075e6 <_svfiprintf_r+0x76>
 80075ce:	4653      	mov	r3, sl
 80075d0:	4632      	mov	r2, r6
 80075d2:	4621      	mov	r1, r4
 80075d4:	4640      	mov	r0, r8
 80075d6:	f7ff ff71 	bl	80074bc <__ssputs_r>
 80075da:	3001      	adds	r0, #1
 80075dc:	f000 80a4 	beq.w	8007728 <_svfiprintf_r+0x1b8>
 80075e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075e2:	4453      	add	r3, sl
 80075e4:	9309      	str	r3, [sp, #36]	; 0x24
 80075e6:	783b      	ldrb	r3, [r7, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f000 809d 	beq.w	8007728 <_svfiprintf_r+0x1b8>
 80075ee:	2300      	movs	r3, #0
 80075f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075f8:	9304      	str	r3, [sp, #16]
 80075fa:	9307      	str	r3, [sp, #28]
 80075fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007600:	931a      	str	r3, [sp, #104]	; 0x68
 8007602:	462f      	mov	r7, r5
 8007604:	2205      	movs	r2, #5
 8007606:	f817 1b01 	ldrb.w	r1, [r7], #1
 800760a:	4850      	ldr	r0, [pc, #320]	; (800774c <_svfiprintf_r+0x1dc>)
 800760c:	f7f8 fdf0 	bl	80001f0 <memchr>
 8007610:	9b04      	ldr	r3, [sp, #16]
 8007612:	b9d0      	cbnz	r0, 800764a <_svfiprintf_r+0xda>
 8007614:	06d9      	lsls	r1, r3, #27
 8007616:	bf44      	itt	mi
 8007618:	2220      	movmi	r2, #32
 800761a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800761e:	071a      	lsls	r2, r3, #28
 8007620:	bf44      	itt	mi
 8007622:	222b      	movmi	r2, #43	; 0x2b
 8007624:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007628:	782a      	ldrb	r2, [r5, #0]
 800762a:	2a2a      	cmp	r2, #42	; 0x2a
 800762c:	d015      	beq.n	800765a <_svfiprintf_r+0xea>
 800762e:	9a07      	ldr	r2, [sp, #28]
 8007630:	462f      	mov	r7, r5
 8007632:	2000      	movs	r0, #0
 8007634:	250a      	movs	r5, #10
 8007636:	4639      	mov	r1, r7
 8007638:	f811 3b01 	ldrb.w	r3, [r1], #1
 800763c:	3b30      	subs	r3, #48	; 0x30
 800763e:	2b09      	cmp	r3, #9
 8007640:	d94d      	bls.n	80076de <_svfiprintf_r+0x16e>
 8007642:	b1b8      	cbz	r0, 8007674 <_svfiprintf_r+0x104>
 8007644:	e00f      	b.n	8007666 <_svfiprintf_r+0xf6>
 8007646:	462f      	mov	r7, r5
 8007648:	e7b8      	b.n	80075bc <_svfiprintf_r+0x4c>
 800764a:	4a40      	ldr	r2, [pc, #256]	; (800774c <_svfiprintf_r+0x1dc>)
 800764c:	1a80      	subs	r0, r0, r2
 800764e:	fa0b f000 	lsl.w	r0, fp, r0
 8007652:	4318      	orrs	r0, r3
 8007654:	9004      	str	r0, [sp, #16]
 8007656:	463d      	mov	r5, r7
 8007658:	e7d3      	b.n	8007602 <_svfiprintf_r+0x92>
 800765a:	9a03      	ldr	r2, [sp, #12]
 800765c:	1d11      	adds	r1, r2, #4
 800765e:	6812      	ldr	r2, [r2, #0]
 8007660:	9103      	str	r1, [sp, #12]
 8007662:	2a00      	cmp	r2, #0
 8007664:	db01      	blt.n	800766a <_svfiprintf_r+0xfa>
 8007666:	9207      	str	r2, [sp, #28]
 8007668:	e004      	b.n	8007674 <_svfiprintf_r+0x104>
 800766a:	4252      	negs	r2, r2
 800766c:	f043 0302 	orr.w	r3, r3, #2
 8007670:	9207      	str	r2, [sp, #28]
 8007672:	9304      	str	r3, [sp, #16]
 8007674:	783b      	ldrb	r3, [r7, #0]
 8007676:	2b2e      	cmp	r3, #46	; 0x2e
 8007678:	d10c      	bne.n	8007694 <_svfiprintf_r+0x124>
 800767a:	787b      	ldrb	r3, [r7, #1]
 800767c:	2b2a      	cmp	r3, #42	; 0x2a
 800767e:	d133      	bne.n	80076e8 <_svfiprintf_r+0x178>
 8007680:	9b03      	ldr	r3, [sp, #12]
 8007682:	1d1a      	adds	r2, r3, #4
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	9203      	str	r2, [sp, #12]
 8007688:	2b00      	cmp	r3, #0
 800768a:	bfb8      	it	lt
 800768c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007690:	3702      	adds	r7, #2
 8007692:	9305      	str	r3, [sp, #20]
 8007694:	4d2e      	ldr	r5, [pc, #184]	; (8007750 <_svfiprintf_r+0x1e0>)
 8007696:	7839      	ldrb	r1, [r7, #0]
 8007698:	2203      	movs	r2, #3
 800769a:	4628      	mov	r0, r5
 800769c:	f7f8 fda8 	bl	80001f0 <memchr>
 80076a0:	b138      	cbz	r0, 80076b2 <_svfiprintf_r+0x142>
 80076a2:	2340      	movs	r3, #64	; 0x40
 80076a4:	1b40      	subs	r0, r0, r5
 80076a6:	fa03 f000 	lsl.w	r0, r3, r0
 80076aa:	9b04      	ldr	r3, [sp, #16]
 80076ac:	4303      	orrs	r3, r0
 80076ae:	3701      	adds	r7, #1
 80076b0:	9304      	str	r3, [sp, #16]
 80076b2:	7839      	ldrb	r1, [r7, #0]
 80076b4:	4827      	ldr	r0, [pc, #156]	; (8007754 <_svfiprintf_r+0x1e4>)
 80076b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076ba:	2206      	movs	r2, #6
 80076bc:	1c7e      	adds	r6, r7, #1
 80076be:	f7f8 fd97 	bl	80001f0 <memchr>
 80076c2:	2800      	cmp	r0, #0
 80076c4:	d038      	beq.n	8007738 <_svfiprintf_r+0x1c8>
 80076c6:	4b24      	ldr	r3, [pc, #144]	; (8007758 <_svfiprintf_r+0x1e8>)
 80076c8:	bb13      	cbnz	r3, 8007710 <_svfiprintf_r+0x1a0>
 80076ca:	9b03      	ldr	r3, [sp, #12]
 80076cc:	3307      	adds	r3, #7
 80076ce:	f023 0307 	bic.w	r3, r3, #7
 80076d2:	3308      	adds	r3, #8
 80076d4:	9303      	str	r3, [sp, #12]
 80076d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076d8:	444b      	add	r3, r9
 80076da:	9309      	str	r3, [sp, #36]	; 0x24
 80076dc:	e76d      	b.n	80075ba <_svfiprintf_r+0x4a>
 80076de:	fb05 3202 	mla	r2, r5, r2, r3
 80076e2:	2001      	movs	r0, #1
 80076e4:	460f      	mov	r7, r1
 80076e6:	e7a6      	b.n	8007636 <_svfiprintf_r+0xc6>
 80076e8:	2300      	movs	r3, #0
 80076ea:	3701      	adds	r7, #1
 80076ec:	9305      	str	r3, [sp, #20]
 80076ee:	4619      	mov	r1, r3
 80076f0:	250a      	movs	r5, #10
 80076f2:	4638      	mov	r0, r7
 80076f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076f8:	3a30      	subs	r2, #48	; 0x30
 80076fa:	2a09      	cmp	r2, #9
 80076fc:	d903      	bls.n	8007706 <_svfiprintf_r+0x196>
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d0c8      	beq.n	8007694 <_svfiprintf_r+0x124>
 8007702:	9105      	str	r1, [sp, #20]
 8007704:	e7c6      	b.n	8007694 <_svfiprintf_r+0x124>
 8007706:	fb05 2101 	mla	r1, r5, r1, r2
 800770a:	2301      	movs	r3, #1
 800770c:	4607      	mov	r7, r0
 800770e:	e7f0      	b.n	80076f2 <_svfiprintf_r+0x182>
 8007710:	ab03      	add	r3, sp, #12
 8007712:	9300      	str	r3, [sp, #0]
 8007714:	4622      	mov	r2, r4
 8007716:	4b11      	ldr	r3, [pc, #68]	; (800775c <_svfiprintf_r+0x1ec>)
 8007718:	a904      	add	r1, sp, #16
 800771a:	4640      	mov	r0, r8
 800771c:	f3af 8000 	nop.w
 8007720:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007724:	4681      	mov	r9, r0
 8007726:	d1d6      	bne.n	80076d6 <_svfiprintf_r+0x166>
 8007728:	89a3      	ldrh	r3, [r4, #12]
 800772a:	065b      	lsls	r3, r3, #25
 800772c:	f53f af35 	bmi.w	800759a <_svfiprintf_r+0x2a>
 8007730:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007732:	b01d      	add	sp, #116	; 0x74
 8007734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007738:	ab03      	add	r3, sp, #12
 800773a:	9300      	str	r3, [sp, #0]
 800773c:	4622      	mov	r2, r4
 800773e:	4b07      	ldr	r3, [pc, #28]	; (800775c <_svfiprintf_r+0x1ec>)
 8007740:	a904      	add	r1, sp, #16
 8007742:	4640      	mov	r0, r8
 8007744:	f000 f882 	bl	800784c <_printf_i>
 8007748:	e7ea      	b.n	8007720 <_svfiprintf_r+0x1b0>
 800774a:	bf00      	nop
 800774c:	08007b85 	.word	0x08007b85
 8007750:	08007b8b 	.word	0x08007b8b
 8007754:	08007b8f 	.word	0x08007b8f
 8007758:	00000000 	.word	0x00000000
 800775c:	080074bd 	.word	0x080074bd

08007760 <_printf_common>:
 8007760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007764:	4691      	mov	r9, r2
 8007766:	461f      	mov	r7, r3
 8007768:	688a      	ldr	r2, [r1, #8]
 800776a:	690b      	ldr	r3, [r1, #16]
 800776c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007770:	4293      	cmp	r3, r2
 8007772:	bfb8      	it	lt
 8007774:	4613      	movlt	r3, r2
 8007776:	f8c9 3000 	str.w	r3, [r9]
 800777a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800777e:	4606      	mov	r6, r0
 8007780:	460c      	mov	r4, r1
 8007782:	b112      	cbz	r2, 800778a <_printf_common+0x2a>
 8007784:	3301      	adds	r3, #1
 8007786:	f8c9 3000 	str.w	r3, [r9]
 800778a:	6823      	ldr	r3, [r4, #0]
 800778c:	0699      	lsls	r1, r3, #26
 800778e:	bf42      	ittt	mi
 8007790:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007794:	3302      	addmi	r3, #2
 8007796:	f8c9 3000 	strmi.w	r3, [r9]
 800779a:	6825      	ldr	r5, [r4, #0]
 800779c:	f015 0506 	ands.w	r5, r5, #6
 80077a0:	d107      	bne.n	80077b2 <_printf_common+0x52>
 80077a2:	f104 0a19 	add.w	sl, r4, #25
 80077a6:	68e3      	ldr	r3, [r4, #12]
 80077a8:	f8d9 2000 	ldr.w	r2, [r9]
 80077ac:	1a9b      	subs	r3, r3, r2
 80077ae:	42ab      	cmp	r3, r5
 80077b0:	dc28      	bgt.n	8007804 <_printf_common+0xa4>
 80077b2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80077b6:	6822      	ldr	r2, [r4, #0]
 80077b8:	3300      	adds	r3, #0
 80077ba:	bf18      	it	ne
 80077bc:	2301      	movne	r3, #1
 80077be:	0692      	lsls	r2, r2, #26
 80077c0:	d42d      	bmi.n	800781e <_printf_common+0xbe>
 80077c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077c6:	4639      	mov	r1, r7
 80077c8:	4630      	mov	r0, r6
 80077ca:	47c0      	blx	r8
 80077cc:	3001      	adds	r0, #1
 80077ce:	d020      	beq.n	8007812 <_printf_common+0xb2>
 80077d0:	6823      	ldr	r3, [r4, #0]
 80077d2:	68e5      	ldr	r5, [r4, #12]
 80077d4:	f8d9 2000 	ldr.w	r2, [r9]
 80077d8:	f003 0306 	and.w	r3, r3, #6
 80077dc:	2b04      	cmp	r3, #4
 80077de:	bf08      	it	eq
 80077e0:	1aad      	subeq	r5, r5, r2
 80077e2:	68a3      	ldr	r3, [r4, #8]
 80077e4:	6922      	ldr	r2, [r4, #16]
 80077e6:	bf0c      	ite	eq
 80077e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077ec:	2500      	movne	r5, #0
 80077ee:	4293      	cmp	r3, r2
 80077f0:	bfc4      	itt	gt
 80077f2:	1a9b      	subgt	r3, r3, r2
 80077f4:	18ed      	addgt	r5, r5, r3
 80077f6:	f04f 0900 	mov.w	r9, #0
 80077fa:	341a      	adds	r4, #26
 80077fc:	454d      	cmp	r5, r9
 80077fe:	d11a      	bne.n	8007836 <_printf_common+0xd6>
 8007800:	2000      	movs	r0, #0
 8007802:	e008      	b.n	8007816 <_printf_common+0xb6>
 8007804:	2301      	movs	r3, #1
 8007806:	4652      	mov	r2, sl
 8007808:	4639      	mov	r1, r7
 800780a:	4630      	mov	r0, r6
 800780c:	47c0      	blx	r8
 800780e:	3001      	adds	r0, #1
 8007810:	d103      	bne.n	800781a <_printf_common+0xba>
 8007812:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800781a:	3501      	adds	r5, #1
 800781c:	e7c3      	b.n	80077a6 <_printf_common+0x46>
 800781e:	18e1      	adds	r1, r4, r3
 8007820:	1c5a      	adds	r2, r3, #1
 8007822:	2030      	movs	r0, #48	; 0x30
 8007824:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007828:	4422      	add	r2, r4
 800782a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800782e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007832:	3302      	adds	r3, #2
 8007834:	e7c5      	b.n	80077c2 <_printf_common+0x62>
 8007836:	2301      	movs	r3, #1
 8007838:	4622      	mov	r2, r4
 800783a:	4639      	mov	r1, r7
 800783c:	4630      	mov	r0, r6
 800783e:	47c0      	blx	r8
 8007840:	3001      	adds	r0, #1
 8007842:	d0e6      	beq.n	8007812 <_printf_common+0xb2>
 8007844:	f109 0901 	add.w	r9, r9, #1
 8007848:	e7d8      	b.n	80077fc <_printf_common+0x9c>
	...

0800784c <_printf_i>:
 800784c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007850:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007854:	460c      	mov	r4, r1
 8007856:	7e09      	ldrb	r1, [r1, #24]
 8007858:	b085      	sub	sp, #20
 800785a:	296e      	cmp	r1, #110	; 0x6e
 800785c:	4617      	mov	r7, r2
 800785e:	4606      	mov	r6, r0
 8007860:	4698      	mov	r8, r3
 8007862:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007864:	f000 80b3 	beq.w	80079ce <_printf_i+0x182>
 8007868:	d822      	bhi.n	80078b0 <_printf_i+0x64>
 800786a:	2963      	cmp	r1, #99	; 0x63
 800786c:	d036      	beq.n	80078dc <_printf_i+0x90>
 800786e:	d80a      	bhi.n	8007886 <_printf_i+0x3a>
 8007870:	2900      	cmp	r1, #0
 8007872:	f000 80b9 	beq.w	80079e8 <_printf_i+0x19c>
 8007876:	2958      	cmp	r1, #88	; 0x58
 8007878:	f000 8083 	beq.w	8007982 <_printf_i+0x136>
 800787c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007880:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007884:	e032      	b.n	80078ec <_printf_i+0xa0>
 8007886:	2964      	cmp	r1, #100	; 0x64
 8007888:	d001      	beq.n	800788e <_printf_i+0x42>
 800788a:	2969      	cmp	r1, #105	; 0x69
 800788c:	d1f6      	bne.n	800787c <_printf_i+0x30>
 800788e:	6820      	ldr	r0, [r4, #0]
 8007890:	6813      	ldr	r3, [r2, #0]
 8007892:	0605      	lsls	r5, r0, #24
 8007894:	f103 0104 	add.w	r1, r3, #4
 8007898:	d52a      	bpl.n	80078f0 <_printf_i+0xa4>
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	6011      	str	r1, [r2, #0]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	da03      	bge.n	80078aa <_printf_i+0x5e>
 80078a2:	222d      	movs	r2, #45	; 0x2d
 80078a4:	425b      	negs	r3, r3
 80078a6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80078aa:	486f      	ldr	r0, [pc, #444]	; (8007a68 <_printf_i+0x21c>)
 80078ac:	220a      	movs	r2, #10
 80078ae:	e039      	b.n	8007924 <_printf_i+0xd8>
 80078b0:	2973      	cmp	r1, #115	; 0x73
 80078b2:	f000 809d 	beq.w	80079f0 <_printf_i+0x1a4>
 80078b6:	d808      	bhi.n	80078ca <_printf_i+0x7e>
 80078b8:	296f      	cmp	r1, #111	; 0x6f
 80078ba:	d020      	beq.n	80078fe <_printf_i+0xb2>
 80078bc:	2970      	cmp	r1, #112	; 0x70
 80078be:	d1dd      	bne.n	800787c <_printf_i+0x30>
 80078c0:	6823      	ldr	r3, [r4, #0]
 80078c2:	f043 0320 	orr.w	r3, r3, #32
 80078c6:	6023      	str	r3, [r4, #0]
 80078c8:	e003      	b.n	80078d2 <_printf_i+0x86>
 80078ca:	2975      	cmp	r1, #117	; 0x75
 80078cc:	d017      	beq.n	80078fe <_printf_i+0xb2>
 80078ce:	2978      	cmp	r1, #120	; 0x78
 80078d0:	d1d4      	bne.n	800787c <_printf_i+0x30>
 80078d2:	2378      	movs	r3, #120	; 0x78
 80078d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80078d8:	4864      	ldr	r0, [pc, #400]	; (8007a6c <_printf_i+0x220>)
 80078da:	e055      	b.n	8007988 <_printf_i+0x13c>
 80078dc:	6813      	ldr	r3, [r2, #0]
 80078de:	1d19      	adds	r1, r3, #4
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	6011      	str	r1, [r2, #0]
 80078e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078ec:	2301      	movs	r3, #1
 80078ee:	e08c      	b.n	8007a0a <_printf_i+0x1be>
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	6011      	str	r1, [r2, #0]
 80078f4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80078f8:	bf18      	it	ne
 80078fa:	b21b      	sxthne	r3, r3
 80078fc:	e7cf      	b.n	800789e <_printf_i+0x52>
 80078fe:	6813      	ldr	r3, [r2, #0]
 8007900:	6825      	ldr	r5, [r4, #0]
 8007902:	1d18      	adds	r0, r3, #4
 8007904:	6010      	str	r0, [r2, #0]
 8007906:	0628      	lsls	r0, r5, #24
 8007908:	d501      	bpl.n	800790e <_printf_i+0xc2>
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	e002      	b.n	8007914 <_printf_i+0xc8>
 800790e:	0668      	lsls	r0, r5, #25
 8007910:	d5fb      	bpl.n	800790a <_printf_i+0xbe>
 8007912:	881b      	ldrh	r3, [r3, #0]
 8007914:	4854      	ldr	r0, [pc, #336]	; (8007a68 <_printf_i+0x21c>)
 8007916:	296f      	cmp	r1, #111	; 0x6f
 8007918:	bf14      	ite	ne
 800791a:	220a      	movne	r2, #10
 800791c:	2208      	moveq	r2, #8
 800791e:	2100      	movs	r1, #0
 8007920:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007924:	6865      	ldr	r5, [r4, #4]
 8007926:	60a5      	str	r5, [r4, #8]
 8007928:	2d00      	cmp	r5, #0
 800792a:	f2c0 8095 	blt.w	8007a58 <_printf_i+0x20c>
 800792e:	6821      	ldr	r1, [r4, #0]
 8007930:	f021 0104 	bic.w	r1, r1, #4
 8007934:	6021      	str	r1, [r4, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d13d      	bne.n	80079b6 <_printf_i+0x16a>
 800793a:	2d00      	cmp	r5, #0
 800793c:	f040 808e 	bne.w	8007a5c <_printf_i+0x210>
 8007940:	4665      	mov	r5, ip
 8007942:	2a08      	cmp	r2, #8
 8007944:	d10b      	bne.n	800795e <_printf_i+0x112>
 8007946:	6823      	ldr	r3, [r4, #0]
 8007948:	07db      	lsls	r3, r3, #31
 800794a:	d508      	bpl.n	800795e <_printf_i+0x112>
 800794c:	6923      	ldr	r3, [r4, #16]
 800794e:	6862      	ldr	r2, [r4, #4]
 8007950:	429a      	cmp	r2, r3
 8007952:	bfde      	ittt	le
 8007954:	2330      	movle	r3, #48	; 0x30
 8007956:	f805 3c01 	strble.w	r3, [r5, #-1]
 800795a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800795e:	ebac 0305 	sub.w	r3, ip, r5
 8007962:	6123      	str	r3, [r4, #16]
 8007964:	f8cd 8000 	str.w	r8, [sp]
 8007968:	463b      	mov	r3, r7
 800796a:	aa03      	add	r2, sp, #12
 800796c:	4621      	mov	r1, r4
 800796e:	4630      	mov	r0, r6
 8007970:	f7ff fef6 	bl	8007760 <_printf_common>
 8007974:	3001      	adds	r0, #1
 8007976:	d14d      	bne.n	8007a14 <_printf_i+0x1c8>
 8007978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800797c:	b005      	add	sp, #20
 800797e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007982:	4839      	ldr	r0, [pc, #228]	; (8007a68 <_printf_i+0x21c>)
 8007984:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007988:	6813      	ldr	r3, [r2, #0]
 800798a:	6821      	ldr	r1, [r4, #0]
 800798c:	1d1d      	adds	r5, r3, #4
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	6015      	str	r5, [r2, #0]
 8007992:	060a      	lsls	r2, r1, #24
 8007994:	d50b      	bpl.n	80079ae <_printf_i+0x162>
 8007996:	07ca      	lsls	r2, r1, #31
 8007998:	bf44      	itt	mi
 800799a:	f041 0120 	orrmi.w	r1, r1, #32
 800799e:	6021      	strmi	r1, [r4, #0]
 80079a0:	b91b      	cbnz	r3, 80079aa <_printf_i+0x15e>
 80079a2:	6822      	ldr	r2, [r4, #0]
 80079a4:	f022 0220 	bic.w	r2, r2, #32
 80079a8:	6022      	str	r2, [r4, #0]
 80079aa:	2210      	movs	r2, #16
 80079ac:	e7b7      	b.n	800791e <_printf_i+0xd2>
 80079ae:	064d      	lsls	r5, r1, #25
 80079b0:	bf48      	it	mi
 80079b2:	b29b      	uxthmi	r3, r3
 80079b4:	e7ef      	b.n	8007996 <_printf_i+0x14a>
 80079b6:	4665      	mov	r5, ip
 80079b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80079bc:	fb02 3311 	mls	r3, r2, r1, r3
 80079c0:	5cc3      	ldrb	r3, [r0, r3]
 80079c2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80079c6:	460b      	mov	r3, r1
 80079c8:	2900      	cmp	r1, #0
 80079ca:	d1f5      	bne.n	80079b8 <_printf_i+0x16c>
 80079cc:	e7b9      	b.n	8007942 <_printf_i+0xf6>
 80079ce:	6813      	ldr	r3, [r2, #0]
 80079d0:	6825      	ldr	r5, [r4, #0]
 80079d2:	6961      	ldr	r1, [r4, #20]
 80079d4:	1d18      	adds	r0, r3, #4
 80079d6:	6010      	str	r0, [r2, #0]
 80079d8:	0628      	lsls	r0, r5, #24
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	d501      	bpl.n	80079e2 <_printf_i+0x196>
 80079de:	6019      	str	r1, [r3, #0]
 80079e0:	e002      	b.n	80079e8 <_printf_i+0x19c>
 80079e2:	066a      	lsls	r2, r5, #25
 80079e4:	d5fb      	bpl.n	80079de <_printf_i+0x192>
 80079e6:	8019      	strh	r1, [r3, #0]
 80079e8:	2300      	movs	r3, #0
 80079ea:	6123      	str	r3, [r4, #16]
 80079ec:	4665      	mov	r5, ip
 80079ee:	e7b9      	b.n	8007964 <_printf_i+0x118>
 80079f0:	6813      	ldr	r3, [r2, #0]
 80079f2:	1d19      	adds	r1, r3, #4
 80079f4:	6011      	str	r1, [r2, #0]
 80079f6:	681d      	ldr	r5, [r3, #0]
 80079f8:	6862      	ldr	r2, [r4, #4]
 80079fa:	2100      	movs	r1, #0
 80079fc:	4628      	mov	r0, r5
 80079fe:	f7f8 fbf7 	bl	80001f0 <memchr>
 8007a02:	b108      	cbz	r0, 8007a08 <_printf_i+0x1bc>
 8007a04:	1b40      	subs	r0, r0, r5
 8007a06:	6060      	str	r0, [r4, #4]
 8007a08:	6863      	ldr	r3, [r4, #4]
 8007a0a:	6123      	str	r3, [r4, #16]
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a12:	e7a7      	b.n	8007964 <_printf_i+0x118>
 8007a14:	6923      	ldr	r3, [r4, #16]
 8007a16:	462a      	mov	r2, r5
 8007a18:	4639      	mov	r1, r7
 8007a1a:	4630      	mov	r0, r6
 8007a1c:	47c0      	blx	r8
 8007a1e:	3001      	adds	r0, #1
 8007a20:	d0aa      	beq.n	8007978 <_printf_i+0x12c>
 8007a22:	6823      	ldr	r3, [r4, #0]
 8007a24:	079b      	lsls	r3, r3, #30
 8007a26:	d413      	bmi.n	8007a50 <_printf_i+0x204>
 8007a28:	68e0      	ldr	r0, [r4, #12]
 8007a2a:	9b03      	ldr	r3, [sp, #12]
 8007a2c:	4298      	cmp	r0, r3
 8007a2e:	bfb8      	it	lt
 8007a30:	4618      	movlt	r0, r3
 8007a32:	e7a3      	b.n	800797c <_printf_i+0x130>
 8007a34:	2301      	movs	r3, #1
 8007a36:	464a      	mov	r2, r9
 8007a38:	4639      	mov	r1, r7
 8007a3a:	4630      	mov	r0, r6
 8007a3c:	47c0      	blx	r8
 8007a3e:	3001      	adds	r0, #1
 8007a40:	d09a      	beq.n	8007978 <_printf_i+0x12c>
 8007a42:	3501      	adds	r5, #1
 8007a44:	68e3      	ldr	r3, [r4, #12]
 8007a46:	9a03      	ldr	r2, [sp, #12]
 8007a48:	1a9b      	subs	r3, r3, r2
 8007a4a:	42ab      	cmp	r3, r5
 8007a4c:	dcf2      	bgt.n	8007a34 <_printf_i+0x1e8>
 8007a4e:	e7eb      	b.n	8007a28 <_printf_i+0x1dc>
 8007a50:	2500      	movs	r5, #0
 8007a52:	f104 0919 	add.w	r9, r4, #25
 8007a56:	e7f5      	b.n	8007a44 <_printf_i+0x1f8>
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d1ac      	bne.n	80079b6 <_printf_i+0x16a>
 8007a5c:	7803      	ldrb	r3, [r0, #0]
 8007a5e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a62:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a66:	e76c      	b.n	8007942 <_printf_i+0xf6>
 8007a68:	08007b96 	.word	0x08007b96
 8007a6c:	08007ba7 	.word	0x08007ba7

08007a70 <memmove>:
 8007a70:	4288      	cmp	r0, r1
 8007a72:	b510      	push	{r4, lr}
 8007a74:	eb01 0302 	add.w	r3, r1, r2
 8007a78:	d807      	bhi.n	8007a8a <memmove+0x1a>
 8007a7a:	1e42      	subs	r2, r0, #1
 8007a7c:	4299      	cmp	r1, r3
 8007a7e:	d00a      	beq.n	8007a96 <memmove+0x26>
 8007a80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a84:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007a88:	e7f8      	b.n	8007a7c <memmove+0xc>
 8007a8a:	4283      	cmp	r3, r0
 8007a8c:	d9f5      	bls.n	8007a7a <memmove+0xa>
 8007a8e:	1881      	adds	r1, r0, r2
 8007a90:	1ad2      	subs	r2, r2, r3
 8007a92:	42d3      	cmn	r3, r2
 8007a94:	d100      	bne.n	8007a98 <memmove+0x28>
 8007a96:	bd10      	pop	{r4, pc}
 8007a98:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a9c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007aa0:	e7f7      	b.n	8007a92 <memmove+0x22>

08007aa2 <_realloc_r>:
 8007aa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aa4:	4607      	mov	r7, r0
 8007aa6:	4614      	mov	r4, r2
 8007aa8:	460e      	mov	r6, r1
 8007aaa:	b921      	cbnz	r1, 8007ab6 <_realloc_r+0x14>
 8007aac:	4611      	mov	r1, r2
 8007aae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007ab2:	f7ff bc77 	b.w	80073a4 <_malloc_r>
 8007ab6:	b922      	cbnz	r2, 8007ac2 <_realloc_r+0x20>
 8007ab8:	f7ff fc26 	bl	8007308 <_free_r>
 8007abc:	4625      	mov	r5, r4
 8007abe:	4628      	mov	r0, r5
 8007ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ac2:	f000 f814 	bl	8007aee <_malloc_usable_size_r>
 8007ac6:	42a0      	cmp	r0, r4
 8007ac8:	d20f      	bcs.n	8007aea <_realloc_r+0x48>
 8007aca:	4621      	mov	r1, r4
 8007acc:	4638      	mov	r0, r7
 8007ace:	f7ff fc69 	bl	80073a4 <_malloc_r>
 8007ad2:	4605      	mov	r5, r0
 8007ad4:	2800      	cmp	r0, #0
 8007ad6:	d0f2      	beq.n	8007abe <_realloc_r+0x1c>
 8007ad8:	4631      	mov	r1, r6
 8007ada:	4622      	mov	r2, r4
 8007adc:	f7ff fc00 	bl	80072e0 <memcpy>
 8007ae0:	4631      	mov	r1, r6
 8007ae2:	4638      	mov	r0, r7
 8007ae4:	f7ff fc10 	bl	8007308 <_free_r>
 8007ae8:	e7e9      	b.n	8007abe <_realloc_r+0x1c>
 8007aea:	4635      	mov	r5, r6
 8007aec:	e7e7      	b.n	8007abe <_realloc_r+0x1c>

08007aee <_malloc_usable_size_r>:
 8007aee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007af2:	1f18      	subs	r0, r3, #4
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	bfbc      	itt	lt
 8007af8:	580b      	ldrlt	r3, [r1, r0]
 8007afa:	18c0      	addlt	r0, r0, r3
 8007afc:	4770      	bx	lr
	...

08007b00 <_init>:
 8007b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b02:	bf00      	nop
 8007b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b06:	bc08      	pop	{r3}
 8007b08:	469e      	mov	lr, r3
 8007b0a:	4770      	bx	lr

08007b0c <_fini>:
 8007b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b0e:	bf00      	nop
 8007b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b12:	bc08      	pop	{r3}
 8007b14:	469e      	mov	lr, r3
 8007b16:	4770      	bx	lr
>>>>>>> 1b79143c88bc39ee0bf1dba5bd9b417677685455
