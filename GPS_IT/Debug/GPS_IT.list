
GPS_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fa8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  08009148  08009148  00019148  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094d8  080094d8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080094d8  080094d8  000194d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094e0  080094e0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080094e0  080094e0  000194e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080094e8  080094e8  000194e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080094f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004be0  200001e0  080096d0  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004dc0  080096d0  00024dc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b10e  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003866  00000000  00000000  0003b31e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001448  00000000  00000000  0003eb88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012b0  00000000  00000000  0003ffd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b5c8  00000000  00000000  00041280  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001107d  00000000  00000000  0005c848  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00098405  00000000  00000000  0006d8c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00105cca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f74  00000000  00000000  00105d48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009130 	.word	0x08009130

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08009130 	.word	0x08009130

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2uiz>:
 8000b8c:	004a      	lsls	r2, r1, #1
 8000b8e:	d211      	bcs.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d211      	bcs.n	8000bba <__aeabi_d2uiz+0x2e>
 8000b96:	d50d      	bpl.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d40e      	bmi.n	8000bc0 <__aeabi_d2uiz+0x34>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_d2uiz+0x3a>
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_uldivmod>:
 8000bcc:	b953      	cbnz	r3, 8000be4 <__aeabi_uldivmod+0x18>
 8000bce:	b94a      	cbnz	r2, 8000be4 <__aeabi_uldivmod+0x18>
 8000bd0:	2900      	cmp	r1, #0
 8000bd2:	bf08      	it	eq
 8000bd4:	2800      	cmpeq	r0, #0
 8000bd6:	bf1c      	itt	ne
 8000bd8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bdc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000be0:	f000 b972 	b.w	8000ec8 <__aeabi_idiv0>
 8000be4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bec:	f000 f806 	bl	8000bfc <__udivmoddi4>
 8000bf0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf8:	b004      	add	sp, #16
 8000bfa:	4770      	bx	lr

08000bfc <__udivmoddi4>:
 8000bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c00:	9e08      	ldr	r6, [sp, #32]
 8000c02:	4604      	mov	r4, r0
 8000c04:	4688      	mov	r8, r1
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d14b      	bne.n	8000ca2 <__udivmoddi4+0xa6>
 8000c0a:	428a      	cmp	r2, r1
 8000c0c:	4615      	mov	r5, r2
 8000c0e:	d967      	bls.n	8000ce0 <__udivmoddi4+0xe4>
 8000c10:	fab2 f282 	clz	r2, r2
 8000c14:	b14a      	cbz	r2, 8000c2a <__udivmoddi4+0x2e>
 8000c16:	f1c2 0720 	rsb	r7, r2, #32
 8000c1a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c1e:	fa20 f707 	lsr.w	r7, r0, r7
 8000c22:	4095      	lsls	r5, r2
 8000c24:	ea47 0803 	orr.w	r8, r7, r3
 8000c28:	4094      	lsls	r4, r2
 8000c2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c2e:	0c23      	lsrs	r3, r4, #16
 8000c30:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c34:	fa1f fc85 	uxth.w	ip, r5
 8000c38:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c3c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c40:	fb07 f10c 	mul.w	r1, r7, ip
 8000c44:	4299      	cmp	r1, r3
 8000c46:	d909      	bls.n	8000c5c <__udivmoddi4+0x60>
 8000c48:	18eb      	adds	r3, r5, r3
 8000c4a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c4e:	f080 811b 	bcs.w	8000e88 <__udivmoddi4+0x28c>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 8118 	bls.w	8000e88 <__udivmoddi4+0x28c>
 8000c58:	3f02      	subs	r7, #2
 8000c5a:	442b      	add	r3, r5
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c64:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c70:	45a4      	cmp	ip, r4
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x8c>
 8000c74:	192c      	adds	r4, r5, r4
 8000c76:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c7a:	f080 8107 	bcs.w	8000e8c <__udivmoddi4+0x290>
 8000c7e:	45a4      	cmp	ip, r4
 8000c80:	f240 8104 	bls.w	8000e8c <__udivmoddi4+0x290>
 8000c84:	3802      	subs	r0, #2
 8000c86:	442c      	add	r4, r5
 8000c88:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c8c:	eba4 040c 	sub.w	r4, r4, ip
 8000c90:	2700      	movs	r7, #0
 8000c92:	b11e      	cbz	r6, 8000c9c <__udivmoddi4+0xa0>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c6 4300 	strd	r4, r3, [r6]
 8000c9c:	4639      	mov	r1, r7
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0xbe>
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	f000 80eb 	beq.w	8000e82 <__udivmoddi4+0x286>
 8000cac:	2700      	movs	r7, #0
 8000cae:	e9c6 0100 	strd	r0, r1, [r6]
 8000cb2:	4638      	mov	r0, r7
 8000cb4:	4639      	mov	r1, r7
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	fab3 f783 	clz	r7, r3
 8000cbe:	2f00      	cmp	r7, #0
 8000cc0:	d147      	bne.n	8000d52 <__udivmoddi4+0x156>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xd0>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80fa 	bhi.w	8000ec0 <__udivmoddi4+0x2c4>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	4698      	mov	r8, r3
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	d0e0      	beq.n	8000c9c <__udivmoddi4+0xa0>
 8000cda:	e9c6 4800 	strd	r4, r8, [r6]
 8000cde:	e7dd      	b.n	8000c9c <__udivmoddi4+0xa0>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xe8>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	f040 808f 	bne.w	8000e0c <__udivmoddi4+0x210>
 8000cee:	1b49      	subs	r1, r1, r5
 8000cf0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cf4:	fa1f f885 	uxth.w	r8, r5
 8000cf8:	2701      	movs	r7, #1
 8000cfa:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cfe:	0c23      	lsrs	r3, r4, #16
 8000d00:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d08:	fb08 f10c 	mul.w	r1, r8, ip
 8000d0c:	4299      	cmp	r1, r3
 8000d0e:	d907      	bls.n	8000d20 <__udivmoddi4+0x124>
 8000d10:	18eb      	adds	r3, r5, r3
 8000d12:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x122>
 8000d18:	4299      	cmp	r1, r3
 8000d1a:	f200 80cd 	bhi.w	8000eb8 <__udivmoddi4+0x2bc>
 8000d1e:	4684      	mov	ip, r0
 8000d20:	1a59      	subs	r1, r3, r1
 8000d22:	b2a3      	uxth	r3, r4
 8000d24:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d28:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d2c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d30:	fb08 f800 	mul.w	r8, r8, r0
 8000d34:	45a0      	cmp	r8, r4
 8000d36:	d907      	bls.n	8000d48 <__udivmoddi4+0x14c>
 8000d38:	192c      	adds	r4, r5, r4
 8000d3a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d3e:	d202      	bcs.n	8000d46 <__udivmoddi4+0x14a>
 8000d40:	45a0      	cmp	r8, r4
 8000d42:	f200 80b6 	bhi.w	8000eb2 <__udivmoddi4+0x2b6>
 8000d46:	4618      	mov	r0, r3
 8000d48:	eba4 0408 	sub.w	r4, r4, r8
 8000d4c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d50:	e79f      	b.n	8000c92 <__udivmoddi4+0x96>
 8000d52:	f1c7 0c20 	rsb	ip, r7, #32
 8000d56:	40bb      	lsls	r3, r7
 8000d58:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d5c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d60:	fa01 f407 	lsl.w	r4, r1, r7
 8000d64:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d68:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d6c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d70:	4325      	orrs	r5, r4
 8000d72:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d76:	0c2c      	lsrs	r4, r5, #16
 8000d78:	fb08 3319 	mls	r3, r8, r9, r3
 8000d7c:	fa1f fa8e 	uxth.w	sl, lr
 8000d80:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d84:	fb09 f40a 	mul.w	r4, r9, sl
 8000d88:	429c      	cmp	r4, r3
 8000d8a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d8e:	fa00 f107 	lsl.w	r1, r0, r7
 8000d92:	d90b      	bls.n	8000dac <__udivmoddi4+0x1b0>
 8000d94:	eb1e 0303 	adds.w	r3, lr, r3
 8000d98:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d9c:	f080 8087 	bcs.w	8000eae <__udivmoddi4+0x2b2>
 8000da0:	429c      	cmp	r4, r3
 8000da2:	f240 8084 	bls.w	8000eae <__udivmoddi4+0x2b2>
 8000da6:	f1a9 0902 	sub.w	r9, r9, #2
 8000daa:	4473      	add	r3, lr
 8000dac:	1b1b      	subs	r3, r3, r4
 8000dae:	b2ad      	uxth	r5, r5
 8000db0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db4:	fb08 3310 	mls	r3, r8, r0, r3
 8000db8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dbc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dc0:	45a2      	cmp	sl, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x1da>
 8000dc4:	eb1e 0404 	adds.w	r4, lr, r4
 8000dc8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dcc:	d26b      	bcs.n	8000ea6 <__udivmoddi4+0x2aa>
 8000dce:	45a2      	cmp	sl, r4
 8000dd0:	d969      	bls.n	8000ea6 <__udivmoddi4+0x2aa>
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	4474      	add	r4, lr
 8000dd6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dda:	fba0 8902 	umull	r8, r9, r0, r2
 8000dde:	eba4 040a 	sub.w	r4, r4, sl
 8000de2:	454c      	cmp	r4, r9
 8000de4:	46c2      	mov	sl, r8
 8000de6:	464b      	mov	r3, r9
 8000de8:	d354      	bcc.n	8000e94 <__udivmoddi4+0x298>
 8000dea:	d051      	beq.n	8000e90 <__udivmoddi4+0x294>
 8000dec:	2e00      	cmp	r6, #0
 8000dee:	d069      	beq.n	8000ec4 <__udivmoddi4+0x2c8>
 8000df0:	ebb1 050a 	subs.w	r5, r1, sl
 8000df4:	eb64 0403 	sbc.w	r4, r4, r3
 8000df8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dfc:	40fd      	lsrs	r5, r7
 8000dfe:	40fc      	lsrs	r4, r7
 8000e00:	ea4c 0505 	orr.w	r5, ip, r5
 8000e04:	e9c6 5400 	strd	r5, r4, [r6]
 8000e08:	2700      	movs	r7, #0
 8000e0a:	e747      	b.n	8000c9c <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f703 	lsr.w	r7, r0, r3
 8000e14:	4095      	lsls	r5, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e1e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e22:	4338      	orrs	r0, r7
 8000e24:	0c01      	lsrs	r1, r0, #16
 8000e26:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e2a:	fa1f f885 	uxth.w	r8, r5
 8000e2e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e32:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e36:	fb07 f308 	mul.w	r3, r7, r8
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x256>
 8000e42:	1869      	adds	r1, r5, r1
 8000e44:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000e48:	d22f      	bcs.n	8000eaa <__udivmoddi4+0x2ae>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d92d      	bls.n	8000eaa <__udivmoddi4+0x2ae>
 8000e4e:	3f02      	subs	r7, #2
 8000e50:	4429      	add	r1, r5
 8000e52:	1acb      	subs	r3, r1, r3
 8000e54:	b281      	uxth	r1, r0
 8000e56:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e62:	fb00 f308 	mul.w	r3, r0, r8
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d907      	bls.n	8000e7a <__udivmoddi4+0x27e>
 8000e6a:	1869      	adds	r1, r5, r1
 8000e6c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e70:	d217      	bcs.n	8000ea2 <__udivmoddi4+0x2a6>
 8000e72:	428b      	cmp	r3, r1
 8000e74:	d915      	bls.n	8000ea2 <__udivmoddi4+0x2a6>
 8000e76:	3802      	subs	r0, #2
 8000e78:	4429      	add	r1, r5
 8000e7a:	1ac9      	subs	r1, r1, r3
 8000e7c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e80:	e73b      	b.n	8000cfa <__udivmoddi4+0xfe>
 8000e82:	4637      	mov	r7, r6
 8000e84:	4630      	mov	r0, r6
 8000e86:	e709      	b.n	8000c9c <__udivmoddi4+0xa0>
 8000e88:	4607      	mov	r7, r0
 8000e8a:	e6e7      	b.n	8000c5c <__udivmoddi4+0x60>
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	e6fb      	b.n	8000c88 <__udivmoddi4+0x8c>
 8000e90:	4541      	cmp	r1, r8
 8000e92:	d2ab      	bcs.n	8000dec <__udivmoddi4+0x1f0>
 8000e94:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e98:	eb69 020e 	sbc.w	r2, r9, lr
 8000e9c:	3801      	subs	r0, #1
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	e7a4      	b.n	8000dec <__udivmoddi4+0x1f0>
 8000ea2:	4660      	mov	r0, ip
 8000ea4:	e7e9      	b.n	8000e7a <__udivmoddi4+0x27e>
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	e795      	b.n	8000dd6 <__udivmoddi4+0x1da>
 8000eaa:	4667      	mov	r7, ip
 8000eac:	e7d1      	b.n	8000e52 <__udivmoddi4+0x256>
 8000eae:	4681      	mov	r9, r0
 8000eb0:	e77c      	b.n	8000dac <__udivmoddi4+0x1b0>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	442c      	add	r4, r5
 8000eb6:	e747      	b.n	8000d48 <__udivmoddi4+0x14c>
 8000eb8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ebc:	442b      	add	r3, r5
 8000ebe:	e72f      	b.n	8000d20 <__udivmoddi4+0x124>
 8000ec0:	4638      	mov	r0, r7
 8000ec2:	e708      	b.n	8000cd6 <__udivmoddi4+0xda>
 8000ec4:	4637      	mov	r7, r6
 8000ec6:	e6e9      	b.n	8000c9c <__udivmoddi4+0xa0>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <_ZN3GPSC1Ev>:
 */

#include <GPS/GPS.h>
#include "stdio.h"
#include "string.h"
GPS::GPS() {
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	4a06      	ldr	r2, [pc, #24]	; (8000ef0 <_ZN3GPSC1Ev+0x24>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	has_data = false;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2200      	movs	r2, #0
 8000ede:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
}
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	08009218 	.word	0x08009218

08000ef4 <_ZN3GPSD1Ev>:

GPS::~GPS() {
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <_ZN3GPSD1Ev+0x1c>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4618      	mov	r0, r3
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	08009218 	.word	0x08009218

08000f14 <_ZN3GPSD0Ev>:
GPS::~GPS() {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
}
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff ffe9 	bl	8000ef4 <_ZN3GPSD1Ev>
 8000f22:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f005 ff20 	bl	8006d6c <_ZdlPvj>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <_ZN3GPS4initEP20__UART_HandleTypeDef>:

void GPS::init(UART_HandleTypeDef* handle)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
 8000f3e:	6039      	str	r1, [r7, #0]
	huart = handle;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	683a      	ldr	r2, [r7, #0]
 8000f44:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

	lwgps_init(&lwgps_handle);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	33d8      	adds	r3, #216	; 0xd8
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f000 fd75 	bl	8001a3c <lwgps_init>

	HAL_UART_Receive_IT(huart, (uint8_t*)data, sizeof(data));
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f8d3 00d0 	ldr.w	r0, [r3, #208]	; 0xd0
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3304      	adds	r3, #4
 8000f5c:	22c8      	movs	r2, #200	; 0xc8
 8000f5e:	4619      	mov	r1, r3
 8000f60:	f002 fcac 	bl	80038bc <HAL_UART_Receive_IT>
}
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <_ZN3GPS6updateEv>:

bool GPS::update()
{
 8000f6c:	b590      	push	{r4, r7, lr}
 8000f6e:	b0b5      	sub	sp, #212	; 0xd4
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	if(has_data)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d046      	beq.n	800100c <_ZN3GPS6updateEv+0xa0>
	{
		//Store buffer here
		char temp[200];
		strcpy(temp, data);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	1d1a      	adds	r2, r3, #4
 8000f82:	f107 0308 	add.w	r3, r7, #8
 8000f86:	4611      	mov	r1, r2
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f005 fff9 	bl	8006f80 <strcpy>
		has_data = false;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
		lwgps_process(&lwgps_handle, temp, sizeof(temp));
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	33d8      	adds	r3, #216	; 0xd8
 8000f9a:	f107 0108 	add.w	r1, r7, #8
 8000f9e:	22c8      	movs	r2, #200	; 0xc8
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f000 fd59 	bl	8001a58 <lwgps_process>

		if(lwgps_handle.is_valid)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f893 3126 	ldrb.w	r3, [r3, #294]	; 0x126
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d022      	beq.n	8000ff6 <_ZN3GPS6updateEv+0x8a>
		{
			curr_position.latitude = lwgps_handle.latitude;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	e9d3 3436 	ldrd	r3, r4, [r3, #216]	; 0xd8
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	e9c2 3462 	strd	r3, r4, [r2, #392]	; 0x188
			curr_position.longitude = lwgps_handle.longitude;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	e9d3 3438 	ldrd	r3, r4, [r3, #224]	; 0xe0
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	e9c2 3464 	strd	r3, r4, [r2, #400]	; 0x190

			curr_velocity.speed = lwgps_handle.speed;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	e9d3 344a 	ldrd	r3, r4, [r3, #296]	; 0x128
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	e9c2 3466 	strd	r3, r4, [r2, #408]	; 0x198
			curr_velocity.bearing = lwgps_handle.course;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	e9d3 344c 	ldrd	r3, r4, [r3, #304]	; 0x130
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0

			HAL_UART_Receive_IT(huart, (uint8_t*)data, 200);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f8d3 00d0 	ldr.w	r0, [r3, #208]	; 0xd0
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3304      	adds	r3, #4
 8000fea:	22c8      	movs	r2, #200	; 0xc8
 8000fec:	4619      	mov	r1, r3
 8000fee:	f002 fc65 	bl	80038bc <HAL_UART_Receive_IT>

			return true;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e00b      	b.n	800100e <_ZN3GPS6updateEv+0xa2>
		}
		else
		{
			HAL_UART_Receive_IT(huart, (uint8_t*)data, 200);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f8d3 00d0 	ldr.w	r0, [r3, #208]	; 0xd0
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3304      	adds	r3, #4
 8001000:	22c8      	movs	r2, #200	; 0xc8
 8001002:	4619      	mov	r1, r3
 8001004:	f002 fc5a 	bl	80038bc <HAL_UART_Receive_IT>

			return false;
 8001008:	2300      	movs	r3, #0
 800100a:	e000      	b.n	800100e <_ZN3GPS6updateEv+0xa2>
		}


	}

	return false;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	37d4      	adds	r7, #212	; 0xd4
 8001012:	46bd      	mov	sp, r7
 8001014:	bd90      	pop	{r4, r7, pc}
	...

08001018 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08a      	sub	sp, #40	; 0x28
 800101c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]
 800102c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	4b2d      	ldr	r3, [pc, #180]	; (80010e8 <MX_GPIO_Init+0xd0>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a2c      	ldr	r2, [pc, #176]	; (80010e8 <MX_GPIO_Init+0xd0>)
 8001038:	f043 0304 	orr.w	r3, r3, #4
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b2a      	ldr	r3, [pc, #168]	; (80010e8 <MX_GPIO_Init+0xd0>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0304 	and.w	r3, r3, #4
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	4b26      	ldr	r3, [pc, #152]	; (80010e8 <MX_GPIO_Init+0xd0>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a25      	ldr	r2, [pc, #148]	; (80010e8 <MX_GPIO_Init+0xd0>)
 8001054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b23      	ldr	r3, [pc, #140]	; (80010e8 <MX_GPIO_Init+0xd0>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	4b1f      	ldr	r3, [pc, #124]	; (80010e8 <MX_GPIO_Init+0xd0>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	4a1e      	ldr	r2, [pc, #120]	; (80010e8 <MX_GPIO_Init+0xd0>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6313      	str	r3, [r2, #48]	; 0x30
 8001076:	4b1c      	ldr	r3, [pc, #112]	; (80010e8 <MX_GPIO_Init+0xd0>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <MX_GPIO_Init+0xd0>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a17      	ldr	r2, [pc, #92]	; (80010e8 <MX_GPIO_Init+0xd0>)
 800108c:	f043 0302 	orr.w	r3, r3, #2
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <MX_GPIO_Init+0xd0>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800109e:	2200      	movs	r2, #0
 80010a0:	2120      	movs	r1, #32
 80010a2:	4812      	ldr	r0, [pc, #72]	; (80010ec <MX_GPIO_Init+0xd4>)
 80010a4:	f001 fc3e 	bl	8002924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010ae:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <MX_GPIO_Init+0xd8>)
 80010b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010b6:	f107 0314 	add.w	r3, r7, #20
 80010ba:	4619      	mov	r1, r3
 80010bc:	480d      	ldr	r0, [pc, #52]	; (80010f4 <MX_GPIO_Init+0xdc>)
 80010be:	f001 faaf 	bl	8002620 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010c2:	2320      	movs	r3, #32
 80010c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c6:	2301      	movs	r3, #1
 80010c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	2300      	movs	r3, #0
 80010d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	4619      	mov	r1, r3
 80010d8:	4804      	ldr	r0, [pc, #16]	; (80010ec <MX_GPIO_Init+0xd4>)
 80010da:	f001 faa1 	bl	8002620 <HAL_GPIO_Init>

}
 80010de:	bf00      	nop
 80010e0:	3728      	adds	r7, #40	; 0x28
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40020000 	.word	0x40020000
 80010f0:	10210000 	.word	0x10210000
 80010f4:	40020800 	.word	0x40020800

080010f8 <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d106      	bne.n	800111a <prv_parse_number+0x22>
        t = gh->p.term_str;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3371      	adds	r3, #113	; 0x71
 8001110:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; t++) {}      /* Strip leading spaces */
 8001112:	e002      	b.n	800111a <prv_parse_number+0x22>
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	3301      	adds	r3, #1
 8001118:	603b      	str	r3, [r7, #0]
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d003      	beq.n	8001128 <prv_parse_number+0x30>
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b20      	cmp	r3, #32
 8001126:	d0f5      	beq.n	8001114 <prv_parse_number+0x1c>

    minus = (*t == '-' ? (t++, 1) : 0);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b2d      	cmp	r3, #45	; 0x2d
 800112e:	d104      	bne.n	800113a <prv_parse_number+0x42>
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	3301      	adds	r3, #1
 8001134:	603b      	str	r3, [r7, #0]
 8001136:	2301      	movs	r3, #1
 8001138:	e000      	b.n	800113c <prv_parse_number+0x44>
 800113a:	2300      	movs	r3, #0
 800113c:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); t++) {
 800113e:	e00d      	b.n	800115c <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	4613      	mov	r3, r2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	4413      	add	r3, r2
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	461a      	mov	r2, r3
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	3b30      	subs	r3, #48	; 0x30
 8001152:	4413      	add	r3, r2
 8001154:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); t++) {
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	3301      	adds	r3, #1
 800115a:	603b      	str	r3, [r7, #0]
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d007      	beq.n	8001172 <prv_parse_number+0x7a>
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b2f      	cmp	r3, #47	; 0x2f
 8001168:	d903      	bls.n	8001172 <prv_parse_number+0x7a>
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b39      	cmp	r3, #57	; 0x39
 8001170:	d9e6      	bls.n	8001140 <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 8001172:	7afb      	ldrb	r3, [r7, #11]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d002      	beq.n	800117e <prv_parse_number+0x86>
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	425b      	negs	r3, r3
 800117c:	e000      	b.n	8001180 <prv_parse_number+0x88>
 800117e:	68fb      	ldr	r3, [r7, #12]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 800118c:	b590      	push	{r4, r7, lr}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
    lwgps_float_t res;

    if (t == NULL) {
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d106      	bne.n	80011aa <prv_parse_float_number+0x1e>
        t = gh->p.term_str;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3371      	adds	r3, #113	; 0x71
 80011a0:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; t++) {}      /* Strip leading spaces */
 80011a2:	e002      	b.n	80011aa <prv_parse_float_number+0x1e>
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	3301      	adds	r3, #1
 80011a8:	603b      	str	r3, [r7, #0]
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d003      	beq.n	80011b8 <prv_parse_float_number+0x2c>
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b20      	cmp	r3, #32
 80011b6:	d0f5      	beq.n	80011a4 <prv_parse_float_number+0x18>

#if LWGPS_CFG_DOUBLE
    res = strtod(t, NULL);                      /* Parse string to double */
 80011b8:	2100      	movs	r1, #0
 80011ba:	6838      	ldr	r0, [r7, #0]
 80011bc:	f006 fd0c 	bl	8007bd8 <strtod>
 80011c0:	ed87 0b02 	vstr	d0, [r7, #8]
#else /* LWGPS_CFG_DOUBLE */
    res = strtof(t, NULL);                      /* Parse string to float */
#endif /* !LWGPS_CFG_DOUBLE */

    return FLT(res);                            /* Return casted value, based on float size */
 80011c4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80011c8:	ec44 3b17 	vmov	d7, r3, r4
}
 80011cc:	eeb0 0a47 	vmov.f32	s0, s14
 80011d0:	eef0 0a67 	vmov.f32	s1, s15
 80011d4:	3714      	adds	r7, #20
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd90      	pop	{r4, r7, pc}
	...

080011dc <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 80011dc:	b590      	push	{r4, r7, lr}
 80011de:	b089      	sub	sp, #36	; 0x24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL);          /* Parse value as double */
 80011e4:	2100      	movs	r1, #0
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff ffd0 	bl	800118c <prv_parse_float_number>
 80011ec:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)ll / 100));            /* Get absolute degrees value, interested in integer part only */
 80011f0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80011f4:	f7ff fca2 	bl	8000b3c <__aeabi_d2iz>
 80011f8:	4603      	mov	r3, r0
 80011fa:	4a1f      	ldr	r2, [pc, #124]	; (8001278 <prv_parse_lat_long+0x9c>)
 80011fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001200:	1152      	asrs	r2, r2, #5
 8001202:	17db      	asrs	r3, r3, #31
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff f994 	bl	8000534 <__aeabi_i2d>
 800120c:	4603      	mov	r3, r0
 800120e:	460c      	mov	r4, r1
 8001210:	e9c7 3404 	strd	r3, r4, [r7, #16]
    min = ll - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 8001214:	f04f 0200 	mov.w	r2, #0
 8001218:	4b18      	ldr	r3, [pc, #96]	; (800127c <prv_parse_lat_long+0xa0>)
 800121a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800121e:	f7ff f9f3 	bl	8000608 <__aeabi_dmul>
 8001222:	4603      	mov	r3, r0
 8001224:	460c      	mov	r4, r1
 8001226:	461a      	mov	r2, r3
 8001228:	4623      	mov	r3, r4
 800122a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800122e:	f7ff f833 	bl	8000298 <__aeabi_dsub>
 8001232:	4603      	mov	r3, r0
 8001234:	460c      	mov	r4, r1
 8001236:	e9c7 3402 	strd	r3, r4, [r7, #8]
    ll = deg + (min / FLT(60.0));               /* Calculate latitude/longitude */
 800123a:	f04f 0200 	mov.w	r2, #0
 800123e:	4b10      	ldr	r3, [pc, #64]	; (8001280 <prv_parse_lat_long+0xa4>)
 8001240:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001244:	f7ff fb0a 	bl	800085c <__aeabi_ddiv>
 8001248:	4603      	mov	r3, r0
 800124a:	460c      	mov	r4, r1
 800124c:	461a      	mov	r2, r3
 800124e:	4623      	mov	r3, r4
 8001250:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001254:	f7ff f822 	bl	800029c <__adddf3>
 8001258:	4603      	mov	r3, r0
 800125a:	460c      	mov	r4, r1
 800125c:	e9c7 3406 	strd	r3, r4, [r7, #24]

    return ll;
 8001260:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001264:	ec44 3b17 	vmov	d7, r3, r4
}
 8001268:	eeb0 0a47 	vmov.f32	s0, s14
 800126c:	eef0 0a67 	vmov.f32	s1, s15
 8001270:	3724      	adds	r7, #36	; 0x24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd90      	pop	{r4, r7, pc}
 8001276:	bf00      	nop
 8001278:	51eb851f 	.word	0x51eb851f
 800127c:	40590000 	.word	0x40590000
 8001280:	404e0000 	.word	0x404e0000

08001284 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 8001284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) {                  /* Check string type */
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
 8001292:	2800      	cmp	r0, #0
 8001294:	d169      	bne.n	800136a <prv_parse_term+0xe6>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	3371      	adds	r3, #113	; 0x71
 800129a:	2206      	movs	r2, #6
 800129c:	49c0      	ldr	r1, [pc, #768]	; (80015a0 <prv_parse_term+0x31c>)
 800129e:	4618      	mov	r0, r3
 80012a0:	f005 fe76 	bl	8006f90 <strncmp>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d009      	beq.n	80012be <prv_parse_term+0x3a>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	3371      	adds	r3, #113	; 0x71
 80012ae:	2206      	movs	r2, #6
 80012b0:	49bc      	ldr	r1, [pc, #752]	; (80015a4 <prv_parse_term+0x320>)
 80012b2:	4618      	mov	r0, r3
 80012b4:	f005 fe6c 	bl	8006f90 <strncmp>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d104      	bne.n	80012c8 <prv_parse_term+0x44>
            gh->p.stat = STAT_GGA;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2201      	movs	r2, #1
 80012c2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80012c6:	e04e      	b.n	8001366 <prv_parse_term+0xe2>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3371      	adds	r3, #113	; 0x71
 80012cc:	2206      	movs	r2, #6
 80012ce:	49b6      	ldr	r1, [pc, #728]	; (80015a8 <prv_parse_term+0x324>)
 80012d0:	4618      	mov	r0, r3
 80012d2:	f005 fe5d 	bl	8006f90 <strncmp>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d009      	beq.n	80012f0 <prv_parse_term+0x6c>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3371      	adds	r3, #113	; 0x71
 80012e0:	2206      	movs	r2, #6
 80012e2:	49b2      	ldr	r1, [pc, #712]	; (80015ac <prv_parse_term+0x328>)
 80012e4:	4618      	mov	r0, r3
 80012e6:	f005 fe53 	bl	8006f90 <strncmp>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d104      	bne.n	80012fa <prv_parse_term+0x76>
            gh->p.stat = STAT_GSA;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2202      	movs	r2, #2
 80012f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80012f8:	e035      	b.n	8001366 <prv_parse_term+0xe2>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	3371      	adds	r3, #113	; 0x71
 80012fe:	2206      	movs	r2, #6
 8001300:	49ab      	ldr	r1, [pc, #684]	; (80015b0 <prv_parse_term+0x32c>)
 8001302:	4618      	mov	r0, r3
 8001304:	f005 fe44 	bl	8006f90 <strncmp>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d009      	beq.n	8001322 <prv_parse_term+0x9e>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	3371      	adds	r3, #113	; 0x71
 8001312:	2206      	movs	r2, #6
 8001314:	49a7      	ldr	r1, [pc, #668]	; (80015b4 <prv_parse_term+0x330>)
 8001316:	4618      	mov	r0, r3
 8001318:	f005 fe3a 	bl	8006f90 <strncmp>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d104      	bne.n	800132c <prv_parse_term+0xa8>
            gh->p.stat = STAT_GSV;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2203      	movs	r2, #3
 8001326:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 800132a:	e01c      	b.n	8001366 <prv_parse_term+0xe2>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3371      	adds	r3, #113	; 0x71
 8001330:	2206      	movs	r2, #6
 8001332:	49a1      	ldr	r1, [pc, #644]	; (80015b8 <prv_parse_term+0x334>)
 8001334:	4618      	mov	r0, r3
 8001336:	f005 fe2b 	bl	8006f90 <strncmp>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d009      	beq.n	8001354 <prv_parse_term+0xd0>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3371      	adds	r3, #113	; 0x71
 8001344:	2206      	movs	r2, #6
 8001346:	499d      	ldr	r1, [pc, #628]	; (80015bc <prv_parse_term+0x338>)
 8001348:	4618      	mov	r0, r3
 800134a:	f005 fe21 	bl	8006f90 <strncmp>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d104      	bne.n	800135e <prv_parse_term+0xda>
            gh->p.stat = STAT_RMC;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2204      	movs	r2, #4
 8001358:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 800135c:	e003      	b.n	8001366 <prv_parse_term+0xe2>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN;          /* Invalid statement for library */
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        }
        return 1;
 8001366:	2301      	movs	r3, #1
 8001368:	e234      	b.n	80017d4 <prv_parse_term+0x550>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
 8001370:	2800      	cmp	r0, #0
 8001372:	f000 822e 	beq.w	80017d2 <prv_parse_term+0x54e>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {        /* Process GPGGA statement */
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
 800137c:	2801      	cmp	r0, #1
 800137e:	f040 80ca 	bne.w	8001516 <prv_parse_term+0x292>
        switch (gh->p.term_num) {
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001388:	3b01      	subs	r3, #1
 800138a:	2b0a      	cmp	r3, #10
 800138c:	f200 8214 	bhi.w	80017b8 <prv_parse_term+0x534>
 8001390:	a001      	add	r0, pc, #4	; (adr r0, 8001398 <prv_parse_term+0x114>)
 8001392:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001396:	bf00      	nop
 8001398:	080013c5 	.word	0x080013c5
 800139c:	0800143f 	.word	0x0800143f
 80013a0:	08001455 	.word	0x08001455
 80013a4:	0800147f 	.word	0x0800147f
 80013a8:	08001495 	.word	0x08001495
 80013ac:	080014bf 	.word	0x080014bf
 80013b0:	080014d3 	.word	0x080014d3
 80013b4:	080017b9 	.word	0x080017b9
 80013b8:	080014e7 	.word	0x080014e7
 80013bc:	080017b9 	.word	0x080017b9
 80013c0:	080014ff 	.word	0x080014ff
            case 1:                             /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80013ca:	3b30      	subs	r3, #48	; 0x30
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	461a      	mov	r2, r3
 80013d0:	0092      	lsls	r2, r2, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80013de:	4413      	add	r3, r2
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	3b30      	subs	r3, #48	; 0x30
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 80013f2:	3b30      	subs	r3, #48	; 0x30
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	461a      	mov	r2, r3
 80013f8:	0092      	lsls	r2, r2, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001406:	4413      	add	r3, r2
 8001408:	b2db      	uxtb	r3, r3
 800140a:	3b30      	subs	r3, #48	; 0x30
 800140c:	b2da      	uxtb	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800141a:	3b30      	subs	r3, #48	; 0x30
 800141c:	b2db      	uxtb	r3, r3
 800141e:	461a      	mov	r2, r3
 8001420:	0092      	lsls	r2, r2, #2
 8001422:	4413      	add	r3, r2
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	b2da      	uxtb	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800142e:	4413      	add	r3, r2
 8001430:	b2db      	uxtb	r3, r3
 8001432:	3b30      	subs	r3, #48	; 0x30
 8001434:	b2da      	uxtb	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
                break;
 800143c:	e1c9      	b.n	80017d2 <prv_parse_term+0x54e>
            case 2:                             /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh);   /* Parse latitude */
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff fecc 	bl	80011dc <prv_parse_lat_long>
 8001444:	eeb0 7a40 	vmov.f32	s14, s0
 8001448:	eef0 7a60 	vmov.f32	s15, s1
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 8001452:	e1be      	b.n	80017d2 <prv_parse_term+0x54e>
            case 3:                             /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800145a:	2b53      	cmp	r3, #83	; 0x53
 800145c:	d005      	beq.n	800146a <prv_parse_term+0x1e6>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001464:	2b73      	cmp	r3, #115	; 0x73
 8001466:	f040 81a9 	bne.w	80017bc <prv_parse_term+0x538>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8001470:	461d      	mov	r5, r3
 8001472:	f084 4600 	eor.w	r6, r4, #2147483648	; 0x80000000
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	e9c3 5622 	strd	r5, r6, [r3, #136]	; 0x88
                }
                break;
 800147c:	e19e      	b.n	80017bc <prv_parse_term+0x538>
            case 4:                             /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh);  /* Parse longitude */
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff feac 	bl	80011dc <prv_parse_lat_long>
 8001484:	eeb0 7a40 	vmov.f32	s14, s0
 8001488:	eef0 7a60 	vmov.f32	s15, s1
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 8001492:	e19e      	b.n	80017d2 <prv_parse_term+0x54e>
            case 5:                             /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800149a:	2b57      	cmp	r3, #87	; 0x57
 800149c:	d005      	beq.n	80014aa <prv_parse_term+0x226>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80014a4:	2b77      	cmp	r3, #119	; 0x77
 80014a6:	f040 818b 	bne.w	80017c0 <prv_parse_term+0x53c>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	e9d3 3424 	ldrd	r3, r4, [r3, #144]	; 0x90
 80014b0:	4619      	mov	r1, r3
 80014b2:	f084 4200 	eor.w	r2, r4, #2147483648	; 0x80000000
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	e9c3 1224 	strd	r1, r2, [r3, #144]	; 0x90
                }
                break;
 80014bc:	e180      	b.n	80017c0 <prv_parse_term+0x53c>
            case 6:                             /* Fix status */
                gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL);
 80014be:	2100      	movs	r1, #0
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff fe19 	bl	80010f8 <prv_parse_number>
 80014c6:	4603      	mov	r3, r0
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
                break;
 80014d0:	e17f      	b.n	80017d2 <prv_parse_term+0x54e>
            case 7:                             /* Satellites in use */
                gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL);
 80014d2:	2100      	movs	r1, #0
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff fe0f 	bl	80010f8 <prv_parse_number>
 80014da:	4603      	mov	r3, r0
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
                break;
 80014e4:	e175      	b.n	80017d2 <prv_parse_term+0x54e>
            case 9:                             /* Altitude */
                gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL);
 80014e6:	2100      	movs	r1, #0
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff fe4f 	bl	800118c <prv_parse_float_number>
 80014ee:	eeb0 7a40 	vmov.f32	s14, s0
 80014f2:	eef0 7a60 	vmov.f32	s15, s1
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 80014fc:	e169      	b.n	80017d2 <prv_parse_term+0x54e>
            case 11:                            /* Altitude above ellipsoid */
                gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL);
 80014fe:	2100      	movs	r1, #0
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff fe43 	bl	800118c <prv_parse_float_number>
 8001506:	eeb0 7a40 	vmov.f32	s14, s0
 800150a:	eef0 7a60 	vmov.f32	s15, s1
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 8001514:	e15d      	b.n	80017d2 <prv_parse_term+0x54e>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {        /* Process GPGSA statement */
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
 800151c:	2a02      	cmp	r2, #2
 800151e:	f040 8084 	bne.w	800162a <prv_parse_term+0x3a6>
        switch (gh->p.term_num) {
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001528:	3b02      	subs	r3, #2
 800152a:	2b0f      	cmp	r3, #15
 800152c:	d860      	bhi.n	80015f0 <prv_parse_term+0x36c>
 800152e:	a201      	add	r2, pc, #4	; (adr r2, 8001534 <prv_parse_term+0x2b0>)
 8001530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001534:	08001575 	.word	0x08001575
 8001538:	080015f1 	.word	0x080015f1
 800153c:	080015f1 	.word	0x080015f1
 8001540:	080015f1 	.word	0x080015f1
 8001544:	080015f1 	.word	0x080015f1
 8001548:	080015f1 	.word	0x080015f1
 800154c:	080015f1 	.word	0x080015f1
 8001550:	080015f1 	.word	0x080015f1
 8001554:	080015f1 	.word	0x080015f1
 8001558:	080015f1 	.word	0x080015f1
 800155c:	080015f1 	.word	0x080015f1
 8001560:	080015f1 	.word	0x080015f1
 8001564:	080015f1 	.word	0x080015f1
 8001568:	08001589 	.word	0x08001589
 800156c:	080015c1 	.word	0x080015c1
 8001570:	080015d9 	.word	0x080015d9
            case 2:                             /* Process fix mode */
                gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL);
 8001574:	2100      	movs	r1, #0
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff fdbe 	bl	80010f8 <prv_parse_number>
 800157c:	4603      	mov	r3, r0
 800157e:	b2da      	uxtb	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
                break;
 8001586:	e124      	b.n	80017d2 <prv_parse_term+0x54e>
            case 15:                            /* Process PDOP */
                gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL);
 8001588:	2100      	movs	r1, #0
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff fdfe 	bl	800118c <prv_parse_float_number>
 8001590:	eeb0 7a40 	vmov.f32	s14, s0
 8001594:	eef0 7a60 	vmov.f32	s15, s1
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 800159e:	e118      	b.n	80017d2 <prv_parse_term+0x54e>
 80015a0:	08009148 	.word	0x08009148
 80015a4:	08009150 	.word	0x08009150
 80015a8:	08009158 	.word	0x08009158
 80015ac:	08009160 	.word	0x08009160
 80015b0:	08009168 	.word	0x08009168
 80015b4:	08009170 	.word	0x08009170
 80015b8:	08009178 	.word	0x08009178
 80015bc:	08009180 	.word	0x08009180
            case 16:                            /* Process HDOP */
                gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL);
 80015c0:	2100      	movs	r1, #0
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff fde2 	bl	800118c <prv_parse_float_number>
 80015c8:	eeb0 7a40 	vmov.f32	s14, s0
 80015cc:	eef0 7a60 	vmov.f32	s15, s1
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 80015d6:	e0fc      	b.n	80017d2 <prv_parse_term+0x54e>
            case 17:                            /* Process VDOP */
                gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL);
 80015d8:	2100      	movs	r1, #0
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff fdd6 	bl	800118c <prv_parse_float_number>
 80015e0:	eeb0 7a40 	vmov.f32	s14, s0
 80015e4:	eef0 7a60 	vmov.f32	s15, s1
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 80015ee:	e0f0      	b.n	80017d2 <prv_parse_term+0x54e>
            default:
                /* Parse satellite IDs */
                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	f240 80e4 	bls.w	80017c4 <prv_parse_term+0x540>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001602:	2b0e      	cmp	r3, #14
 8001604:	f200 80de 	bhi.w	80017c4 <prv_parse_term+0x540>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 8001608:	2100      	movs	r1, #0
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff fd74 	bl	80010f8 <prv_parse_number>
 8001610:	4602      	mov	r2, r0
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001618:	3b03      	subs	r3, #3
 800161a:	b2d1      	uxtb	r1, r2
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	4413      	add	r3, r2
 8001620:	460a      	mov	r2, r1
 8001622:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
                }
                break;
 8001626:	bf00      	nop
 8001628:	e0cc      	b.n	80017c4 <prv_parse_term+0x540>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {        /* Process GPGSV statement */
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
 8001630:	2a03      	cmp	r2, #3
 8001632:	d11b      	bne.n	800166c <prv_parse_term+0x3e8>
        switch (gh->p.term_num) {
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800163a:	2b02      	cmp	r3, #2
 800163c:	d002      	beq.n	8001644 <prv_parse_term+0x3c0>
 800163e:	2b03      	cmp	r3, #3
 8001640:	d00a      	beq.n	8001658 <prv_parse_term+0x3d4>
                                break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 8001642:	e0c6      	b.n	80017d2 <prv_parse_term+0x54e>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 8001644:	2100      	movs	r1, #0
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7ff fd56 	bl	80010f8 <prv_parse_number>
 800164c:	4603      	mov	r3, r0
 800164e:	b2da      	uxtb	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                break;
 8001656:	e0bc      	b.n	80017d2 <prv_parse_term+0x54e>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 8001658:	2100      	movs	r1, #0
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff fd4c 	bl	80010f8 <prv_parse_number>
 8001660:	4603      	mov	r3, r0
 8001662:	b2da      	uxtb	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 800166a:	e0b2      	b.n	80017d2 <prv_parse_term+0x54e>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {        /* Process GPRMC statement */
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
 8001672:	2a04      	cmp	r2, #4
 8001674:	f040 80a8 	bne.w	80017c8 <prv_parse_term+0x544>
        switch (gh->p.term_num) {
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	f892 207f 	ldrb.w	r2, [r2, #127]	; 0x7f
 800167e:	3a02      	subs	r2, #2
 8001680:	2a09      	cmp	r2, #9
 8001682:	f200 80a3 	bhi.w	80017cc <prv_parse_term+0x548>
 8001686:	a101      	add	r1, pc, #4	; (adr r1, 800168c <prv_parse_term+0x408>)
 8001688:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800168c:	080016b5 	.word	0x080016b5
 8001690:	080017cd 	.word	0x080017cd
 8001694:	080017cd 	.word	0x080017cd
 8001698:	080017cd 	.word	0x080017cd
 800169c:	080017cd 	.word	0x080017cd
 80016a0:	080016cf 	.word	0x080016cf
 80016a4:	080016e7 	.word	0x080016e7
 80016a8:	080016ff 	.word	0x080016ff
 80016ac:	08001779 	.word	0x08001779
 80016b0:	08001791 	.word	0x08001791
            case 2:                             /* Process valid status */
                gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80016ba:	2b41      	cmp	r3, #65	; 0x41
 80016bc:	bf0c      	ite	eq
 80016be:	2301      	moveq	r3, #1
 80016c0:	2300      	movne	r3, #0
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	461a      	mov	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 80016cc:	e081      	b.n	80017d2 <prv_parse_term+0x54e>
            case 7:                             /* Process ground speed in knots */
                gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL);
 80016ce:	2100      	movs	r1, #0
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff fd5b 	bl	800118c <prv_parse_float_number>
 80016d6:	eeb0 7a40 	vmov.f32	s14, s0
 80016da:	eef0 7a60 	vmov.f32	s15, s1
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 80016e4:	e075      	b.n	80017d2 <prv_parse_term+0x54e>
            case 8:                             /* Process true ground coarse */
                gh->p.data.rmc.course = prv_parse_float_number(gh, NULL);
 80016e6:	2100      	movs	r1, #0
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7ff fd4f 	bl	800118c <prv_parse_float_number>
 80016ee:	eeb0 7a40 	vmov.f32	s14, s0
 80016f2:	eef0 7a60 	vmov.f32	s15, s1
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 80016fc:	e069      	b.n	80017d2 <prv_parse_term+0x54e>
            case 9:                             /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001704:	3b30      	subs	r3, #48	; 0x30
 8001706:	b2db      	uxtb	r3, r3
 8001708:	461a      	mov	r2, r3
 800170a:	0092      	lsls	r2, r2, #2
 800170c:	4413      	add	r3, r2
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	b2da      	uxtb	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001718:	4413      	add	r3, r2
 800171a:	b2db      	uxtb	r3, r3
 800171c:	3b30      	subs	r3, #48	; 0x30
 800171e:	b2da      	uxtb	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 800172c:	3b30      	subs	r3, #48	; 0x30
 800172e:	b2db      	uxtb	r3, r3
 8001730:	461a      	mov	r2, r3
 8001732:	0092      	lsls	r2, r2, #2
 8001734:	4413      	add	r3, r2
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	b2da      	uxtb	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001740:	4413      	add	r3, r2
 8001742:	b2db      	uxtb	r3, r3
 8001744:	3b30      	subs	r3, #48	; 0x30
 8001746:	b2da      	uxtb	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8001754:	3b30      	subs	r3, #48	; 0x30
 8001756:	b2db      	uxtb	r3, r3
 8001758:	461a      	mov	r2, r3
 800175a:	0092      	lsls	r2, r2, #2
 800175c:	4413      	add	r3, r2
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	b2da      	uxtb	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001768:	4413      	add	r3, r2
 800176a:	b2db      	uxtb	r3, r3
 800176c:	3b30      	subs	r3, #48	; 0x30
 800176e:	b2da      	uxtb	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
                break;
 8001776:	e02c      	b.n	80017d2 <prv_parse_term+0x54e>
            case 10:                            /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 8001778:	2100      	movs	r1, #0
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7ff fd06 	bl	800118c <prv_parse_float_number>
 8001780:	eeb0 7a40 	vmov.f32	s14, s0
 8001784:	eef0 7a60 	vmov.f32	s15, s1
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 800178e:	e020      	b.n	80017d2 <prv_parse_term+0x54e>
            case 11:                            /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	f892 2071 	ldrb.w	r2, [r2, #113]	; 0x71
 8001796:	2a57      	cmp	r2, #87	; 0x57
 8001798:	d004      	beq.n	80017a4 <prv_parse_term+0x520>
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	f892 2071 	ldrb.w	r2, [r2, #113]	; 0x71
 80017a0:	2a77      	cmp	r2, #119	; 0x77
 80017a2:	d115      	bne.n	80017d0 <prv_parse_term+0x54c>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	e9d2 1228 	ldrd	r1, r2, [r2, #160]	; 0xa0
 80017aa:	460b      	mov	r3, r1
 80017ac:	f082 4400 	eor.w	r4, r2, #2147483648	; 0x80000000
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0
                }
                break;
 80017b6:	e00b      	b.n	80017d0 <prv_parse_term+0x54c>
                break;
 80017b8:	bf00      	nop
 80017ba:	e00a      	b.n	80017d2 <prv_parse_term+0x54e>
                break;
 80017bc:	bf00      	nop
 80017be:	e008      	b.n	80017d2 <prv_parse_term+0x54e>
                break;
 80017c0:	bf00      	nop
 80017c2:	e006      	b.n	80017d2 <prv_parse_term+0x54e>
                break;
 80017c4:	bf00      	nop
 80017c6:	e004      	b.n	80017d2 <prv_parse_term+0x54e>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
 80017c8:	bf00      	nop
 80017ca:	e002      	b.n	80017d2 <prv_parse_term+0x54e>
                break;
 80017cc:	bf00      	nop
 80017ce:	e000      	b.n	80017d2 <prv_parse_term+0x54e>
                break;
 80017d0:	bf00      	nop
    return 1;
 80017d2:	2301      	movs	r3, #1
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017dc <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(gh->p.term_str[1]) & 0x0F);   /* Convert received CRC from string (hex) to number */
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80017ea:	2b2f      	cmp	r3, #47	; 0x2f
 80017ec:	d90b      	bls.n	8001806 <prv_check_crc+0x2a>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80017f4:	2b39      	cmp	r3, #57	; 0x39
 80017f6:	d806      	bhi.n	8001806 <prv_check_crc+0x2a>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80017fe:	011b      	lsls	r3, r3, #4
 8001800:	b2db      	uxtb	r3, r3
 8001802:	b25a      	sxtb	r2, r3
 8001804:	e026      	b.n	8001854 <prv_check_crc+0x78>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800180c:	2b60      	cmp	r3, #96	; 0x60
 800180e:	d90d      	bls.n	800182c <prv_check_crc+0x50>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001816:	2b7a      	cmp	r3, #122	; 0x7a
 8001818:	d808      	bhi.n	800182c <prv_check_crc+0x50>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001820:	3b57      	subs	r3, #87	; 0x57
 8001822:	b2db      	uxtb	r3, r3
 8001824:	011b      	lsls	r3, r3, #4
 8001826:	b2db      	uxtb	r3, r3
 8001828:	b25a      	sxtb	r2, r3
 800182a:	e013      	b.n	8001854 <prv_check_crc+0x78>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001832:	2b40      	cmp	r3, #64	; 0x40
 8001834:	d90d      	bls.n	8001852 <prv_check_crc+0x76>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800183c:	2b5a      	cmp	r3, #90	; 0x5a
 800183e:	d808      	bhi.n	8001852 <prv_check_crc+0x76>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001846:	3b37      	subs	r3, #55	; 0x37
 8001848:	b2db      	uxtb	r3, r3
 800184a:	011b      	lsls	r3, r3, #4
 800184c:	b2db      	uxtb	r3, r3
 800184e:	b25a      	sxtb	r2, r3
 8001850:	e000      	b.n	8001854 <prv_check_crc+0x78>
 8001852:	2200      	movs	r2, #0
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800185a:	2b2f      	cmp	r3, #47	; 0x2f
 800185c:	d90c      	bls.n	8001878 <prv_check_crc+0x9c>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001864:	2b39      	cmp	r3, #57	; 0x39
 8001866:	d807      	bhi.n	8001878 <prv_check_crc+0x9c>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800186e:	b25b      	sxtb	r3, r3
 8001870:	f003 030f 	and.w	r3, r3, #15
 8001874:	b25b      	sxtb	r3, r3
 8001876:	e028      	b.n	80018ca <prv_check_crc+0xee>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800187e:	2b60      	cmp	r3, #96	; 0x60
 8001880:	d90e      	bls.n	80018a0 <prv_check_crc+0xc4>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001888:	2b7a      	cmp	r3, #122	; 0x7a
 800188a:	d809      	bhi.n	80018a0 <prv_check_crc+0xc4>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001892:	3b57      	subs	r3, #87	; 0x57
 8001894:	b2db      	uxtb	r3, r3
 8001896:	b25b      	sxtb	r3, r3
 8001898:	f003 030f 	and.w	r3, r3, #15
 800189c:	b25b      	sxtb	r3, r3
 800189e:	e014      	b.n	80018ca <prv_check_crc+0xee>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80018a6:	2b40      	cmp	r3, #64	; 0x40
 80018a8:	d90e      	bls.n	80018c8 <prv_check_crc+0xec>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80018b0:	2b5a      	cmp	r3, #90	; 0x5a
 80018b2:	d809      	bhi.n	80018c8 <prv_check_crc+0xec>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80018ba:	3b37      	subs	r3, #55	; 0x37
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	b25b      	sxtb	r3, r3
 80018c0:	f003 030f 	and.w	r3, r3, #15
 80018c4:	b25b      	sxtb	r3, r3
 80018c6:	e000      	b.n	80018ca <prv_check_crc+0xee>
 80018c8:	2300      	movs	r3, #0
 80018ca:	4313      	orrs	r3, r2
 80018cc:	b25b      	sxtb	r3, r3
 80018ce:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;               /* They must match! */
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80018d6:	7bfa      	ldrb	r2, [r7, #15]
 80018d8:	429a      	cmp	r2, r3
 80018da:	bf0c      	ite	eq
 80018dc:	2301      	moveq	r3, #1
 80018de:	2300      	movne	r3, #0
 80018e0:	b2db      	uxtb	r3, r3
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 80018ee:	b590      	push	{r4, r7, lr}
 80018f0:	b083      	sub	sp, #12
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d136      	bne.n	800196e <prv_copy_from_tmp_memory+0x80>
        gh->latitude = gh->p.data.gga.latitude;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	e9c2 3400 	strd	r3, r4, [r2]
        gh->longitude = gh->p.data.gga.longitude;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	e9d3 3424 	ldrd	r3, r4, [r3, #144]	; 0x90
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	e9c2 3402 	strd	r3, r4, [r2, #8]
        gh->altitude = gh->p.data.gga.altitude;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	e9d3 3426 	ldrd	r3, r4, [r3, #152]	; 0x98
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	e9c2 3404 	strd	r3, r4, [r2, #16]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	e9d3 3428 	ldrd	r3, r4, [r3, #160]	; 0xa0
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	e9c2 3406 	strd	r3, r4, [r2, #24]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f883 2020 	strb.w	r2, [r3, #32]
        gh->fix = gh->p.data.gga.fix;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        gh->hours = gh->p.data.gga.hours;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        gh->minutes = gh->p.data.gga.minutes;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        gh->seconds = gh->p.data.gga.seconds;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f893 20ac 	ldrb.w	r2, [r3, #172]	; 0xac
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800196c:	e061      	b.n	8001a32 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001974:	2b02      	cmp	r3, #2
 8001976:	d121      	bne.n	80019bc <prv_copy_from_tmp_memory+0xce>
        gh->dop_h = gh->p.data.gsa.dop_h;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
        gh->dop_p = gh->p.data.gsa.dop_p;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	e9d3 3426 	ldrd	r3, r4, [r3, #152]	; 0x98
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
        gh->dop_v = gh->p.data.gsa.dop_v;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	e9d3 3424 	ldrd	r3, r4, [r3, #144]	; 0x90
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f103 0041 	add.w	r0, r3, #65	; 0x41
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	33a1      	adds	r3, #161	; 0xa1
 80019b2:	220c      	movs	r2, #12
 80019b4:	4619      	mov	r1, r3
 80019b6:	f005 fa17 	bl	8006de8 <memcpy>
 80019ba:	e03a      	b.n	8001a32 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80019c2:	2b03      	cmp	r3, #3
 80019c4:	d106      	bne.n	80019d4 <prv_copy_from_tmp_memory+0xe6>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80019d2:	e02e      	b.n	8001a32 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80019da:	2b04      	cmp	r3, #4
 80019dc:	d129      	bne.n	8001a32 <prv_copy_from_tmp_memory+0x144>
        gh->course = gh->p.data.rmc.course;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	e9d3 3426 	ldrd	r3, r4, [r3, #152]	; 0x98
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
        gh->is_valid = gh->p.data.rmc.is_valid;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        gh->speed = gh->p.data.rmc.speed;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	e9d3 3424 	ldrd	r3, r4, [r3, #144]	; 0x90
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
        gh->variation = gh->p.data.rmc.variation;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	e9d3 3428 	ldrd	r3, r4, [r3, #160]	; 0xa0
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
        gh->date = gh->p.data.rmc.date;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 2089 	ldrb.w	r2, [r3, #137]	; 0x89
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        gh->month = gh->p.data.rmc.month;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f893 208a 	ldrb.w	r2, [r3, #138]	; 0x8a
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        gh->year = gh->p.data.rmc.year;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 208b 	ldrb.w	r2, [r3, #139]	; 0x8b
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 8001a32:	2301      	movs	r3, #1
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd90      	pop	{r4, r7, pc}

08001a3c <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 8001a44:	22b0      	movs	r2, #176	; 0xb0
 8001a46:	2100      	movs	r1, #0
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f005 f9d8 	bl	8006dfe <memset>
    return 1;
 8001a4e:	2301      	movs	r3, #1
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8001a68:	e0a7      	b.n	8001bba <lwgps_process+0x162>
        if (*d == '$') {                        /* Check for beginning of NMEA line */
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b24      	cmp	r3, #36	; 0x24
 8001a70:	d125      	bne.n	8001abe <lwgps_process+0x66>
            memset(&gh->p, 0x00, sizeof(gh->p));/* Reset private memory */
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	3370      	adds	r3, #112	; 0x70
 8001a76:	2240      	movs	r2, #64	; 0x40
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f005 f9bf 	bl	8006dfe <memset>
            TERM_ADD(gh, *d);                   /* Add character to term */
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001a86:	2b0b      	cmp	r3, #11
 8001a88:	f200 8091 	bhi.w	8001bae <lwgps_process+0x156>
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001a92:	1c5a      	adds	r2, r3, #1
 8001a94:	b2d1      	uxtb	r1, r2
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	f882 107e 	strb.w	r1, [r2, #126]	; 0x7e
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	781a      	ldrb	r2, [r3, #0]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	440b      	add	r3, r1
 8001aa6:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001abc:	e077      	b.n	8001bae <lwgps_process+0x156>
        } else if (*d == ',') {                 /* Term separator character */
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b2c      	cmp	r3, #44	; 0x2c
 8001ac4:	d11d      	bne.n	8001b02 <lwgps_process+0xaa>
            prv_parse_term(gh);                     /* Parse term we have currently in memory */
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f7ff fbdc 	bl	8001284 <prv_parse_term>
            CRC_ADD(gh, *d);                    /* Add character to CRC computation */
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	4053      	eors	r3, r2
 8001ad8:	b2da      	uxtb	r2, r3
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            TERM_NEXT(gh);                      /* Start with next term */
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001af6:	3301      	adds	r3, #1
 8001af8:	b2da      	uxtb	r2, r3
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8001b00:	e055      	b.n	8001bae <lwgps_process+0x156>
        } else if (*d == '*') {                 /* Start indicates end of data for CRC computation */
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b2a      	cmp	r3, #42	; 0x2a
 8001b08:	d117      	bne.n	8001b3a <lwgps_process+0xe2>
            prv_parse_term(gh);                     /* Parse term we have currently in memory */
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f7ff fbba 	bl	8001284 <prv_parse_term>
            gh->p.star = 1;                     /* STAR detected */
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            TERM_NEXT(gh);                      /* Start with next term */
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001b2e:	3301      	adds	r3, #1
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8001b38:	e039      	b.n	8001bae <lwgps_process+0x156>
        } else if (*d == '\r') {
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b0d      	cmp	r3, #13
 8001b40:	d109      	bne.n	8001b56 <lwgps_process+0xfe>
            if (prv_check_crc(gh)) {            /* Check for CRC result */
 8001b42:	68f8      	ldr	r0, [r7, #12]
 8001b44:	f7ff fe4a 	bl	80017dc <prv_check_crc>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d02f      	beq.n	8001bae <lwgps_process+0x156>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh);   /* Copy memory from temporary to user memory */
 8001b4e:	68f8      	ldr	r0, [r7, #12]
 8001b50:	f7ff fecd 	bl	80018ee <prv_copy_from_tmp_memory>
 8001b54:	e02b      	b.n	8001bae <lwgps_process+0x156>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {                  /* Add to CRC only if star not yet detected */
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d109      	bne.n	8001b74 <lwgps_process+0x11c>
                CRC_ADD(gh, *d);                /* Add to CRC */
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	4053      	eors	r3, r2
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            }
            TERM_ADD(gh, *d);                   /* Add character to term */
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001b7a:	2b0b      	cmp	r3, #11
 8001b7c:	d817      	bhi.n	8001bae <lwgps_process+0x156>
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001b84:	1c5a      	adds	r2, r3, #1
 8001b86:	b2d1      	uxtb	r1, r2
 8001b88:	68fa      	ldr	r2, [r7, #12]
 8001b8a:	f882 107e 	strb.w	r1, [r2, #126]	; 0x7e
 8001b8e:	4619      	mov	r1, r3
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	781a      	ldrb	r2, [r3, #0]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	440b      	add	r3, r1
 8001b98:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	617b      	str	r3, [r7, #20]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	607b      	str	r3, [r7, #4]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f47f af54 	bne.w	8001a6a <lwgps_process+0x12>
        }
    }
    return 1;
 8001bc2:	2301      	movs	r3, #1
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3718      	adds	r7, #24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <_Z6vprintPKcSt9__va_list>:
#include <string.h>
//#include "stm32f4xx_hal.h"
#include "main.h"

void vprint(const char *fmt, va_list argp)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b0b4      	sub	sp, #208	; 0xd0
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
	char temp[200];
	if(vsprintf(temp, fmt, argp))
 8001bd6:	f107 0308 	add.w	r3, r7, #8
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	6879      	ldr	r1, [r7, #4]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f006 f824 	bl	8007c2c <vsiprintf>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	bf14      	ite	ne
 8001bea:	2301      	movne	r3, #1
 8001bec:	2300      	moveq	r3, #0
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d00d      	beq.n	8001c10 <_Z6vprintPKcSt9__va_list+0x44>
	{
		HAL_UART_Transmit(&huart2, (uint8_t*) temp, strlen(temp), 1000);
 8001bf4:	f107 0308 	add.w	r3, r7, #8
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7fe faf1 	bl	80001e0 <strlen>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	f107 0108 	add.w	r1, r7, #8
 8001c06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c0a:	4803      	ldr	r0, [pc, #12]	; (8001c18 <_Z6vprintPKcSt9__va_list+0x4c>)
 8001c0c:	f001 fdbd 	bl	800378a <HAL_UART_Transmit>
	}
}
 8001c10:	bf00      	nop
 8001c12:	37d0      	adds	r7, #208	; 0xd0
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20004d38 	.word	0x20004d38

08001c1c <_Z11uart_printfPKcz>:

void uart_printf(const char *fmt, ...)
{
 8001c1c:	b40f      	push	{r0, r1, r2, r3}
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
	va_list argp;
	va_start(argp, fmt);
 8001c24:	f107 0314 	add.w	r3, r7, #20
 8001c28:	607b      	str	r3, [r7, #4]
	vprint(fmt, argp);
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	6938      	ldr	r0, [r7, #16]
 8001c2e:	f7ff ffcd 	bl	8001bcc <_Z6vprintPKcSt9__va_list>
	va_end(argp);
}
 8001c32:	bf00      	nop
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c3c:	b004      	add	sp, #16
 8001c3e:	4770      	bx	lr

08001c40 <_ZN3GPS11getPositionEv>:

	void init(UART_HandleTypeDef* handle);

	bool update();

	location getPosition()
 8001c40:	b490      	push	{r4, r7}
 8001c42:	b08a      	sub	sp, #40	; 0x28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6178      	str	r0, [r7, #20]
	{
		return curr_position;
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	f107 0418 	add.w	r4, r7, #24
 8001c4e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001c52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001c58:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001c5c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001c60:	ec42 1b16 	vmov	d6, r1, r2
 8001c64:	ec44 3b17 	vmov	d7, r3, r4
	}
 8001c68:	eeb0 0a46 	vmov.f32	s0, s12
 8001c6c:	eef0 0a66 	vmov.f32	s1, s13
 8001c70:	eeb0 1a47 	vmov.f32	s2, s14
 8001c74:	eef0 1a67 	vmov.f32	s3, s15
 8001c78:	3728      	adds	r7, #40	; 0x28
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc90      	pop	{r4, r7}
 8001c7e:	4770      	bx	lr

08001c80 <_ZN3GPS11getVelocityEv>:
	velocity getVelocity()
 8001c80:	b490      	push	{r4, r7}
 8001c82:	b08a      	sub	sp, #40	; 0x28
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6178      	str	r0, [r7, #20]
	{
		return curr_velocity;
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	f107 0418 	add.w	r4, r7, #24
 8001c8e:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8001c92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001c98:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001c9c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001ca0:	ec42 1b16 	vmov	d6, r1, r2
 8001ca4:	ec44 3b17 	vmov	d7, r3, r4
	}
 8001ca8:	eeb0 0a46 	vmov.f32	s0, s12
 8001cac:	eef0 0a66 	vmov.f32	s1, s13
 8001cb0:	eeb0 1a47 	vmov.f32	s2, s14
 8001cb4:	eef0 1a67 	vmov.f32	s3, s15
 8001cb8:	3728      	adds	r7, #40	; 0x28
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc90      	pop	{r4, r7}
 8001cbe:	4770      	bx	lr

08001cc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af02      	add	r7, sp, #8
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cc6:	f000 fb65 	bl	8002394 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8001cca:	f000 f891 	bl	8001df0 <_Z18SystemClock_Configv>


  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cce:	f7ff f9a3 	bl	8001018 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001cd2:	f000 fa87 	bl	80021e4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001cd6:	f000 fa5b 	bl	8002190 <MX_USART1_UART_Init>

  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8001cda:	4b10      	ldr	r3, [pc, #64]	; (8001d1c <main+0x5c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68da      	ldr	r2, [r3, #12]
 8001ce0:	4b0e      	ldr	r3, [pc, #56]	; (8001d1c <main+0x5c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f042 0220 	orr.w	r2, r2, #32
 8001ce8:	60da      	str	r2, [r3, #12]

  xTaskCreate(blink, "Blink", configMINIMAL_STACK_SIZE, NULL, 0, NULL);
 8001cea:	2300      	movs	r3, #0
 8001cec:	9301      	str	r3, [sp, #4]
 8001cee:	2300      	movs	r3, #0
 8001cf0:	9300      	str	r3, [sp, #0]
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	2280      	movs	r2, #128	; 0x80
 8001cf6:	490a      	ldr	r1, [pc, #40]	; (8001d20 <main+0x60>)
 8001cf8:	480a      	ldr	r0, [pc, #40]	; (8001d24 <main+0x64>)
 8001cfa:	f003 fa51 	bl	80051a0 <xTaskCreate>
  xTaskCreate(gps_task, "GPS task", 512, NULL, 0, NULL);
 8001cfe:	2300      	movs	r3, #0
 8001d00:	9301      	str	r3, [sp, #4]
 8001d02:	2300      	movs	r3, #0
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	2300      	movs	r3, #0
 8001d08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d0c:	4906      	ldr	r1, [pc, #24]	; (8001d28 <main+0x68>)
 8001d0e:	4807      	ldr	r0, [pc, #28]	; (8001d2c <main+0x6c>)
 8001d10:	f003 fa46 	bl	80051a0 <xTaskCreate>

  vTaskStartScheduler();
 8001d14:	f003 fbbc 	bl	8005490 <vTaskStartScheduler>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d18:	e7fe      	b.n	8001d18 <main+0x58>
 8001d1a:	bf00      	nop
 8001d1c:	20004cf8 	.word	0x20004cf8
 8001d20:	08009188 	.word	0x08009188
 8001d24:	08001d31 	.word	0x08001d31
 8001d28:	08009190 	.word	0x08009190
 8001d2c:	08001d4d 	.word	0x08001d4d

08001d30 <_Z5blinkPv>:
  }
  /* USER CODE END 3 */
}

void blink(void*)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001d38:	2120      	movs	r1, #32
 8001d3a:	4803      	ldr	r0, [pc, #12]	; (8001d48 <_Z5blinkPv+0x18>)
 8001d3c:	f000 fe0b 	bl	8002956 <HAL_GPIO_TogglePin>
		vTaskDelay(250);
 8001d40:	20fa      	movs	r0, #250	; 0xfa
 8001d42:	f003 fb71 	bl	8005428 <vTaskDelay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001d46:	e7f7      	b.n	8001d38 <_Z5blinkPv+0x8>
 8001d48:	40020000 	.word	0x40020000

08001d4c <_Z8gps_taskPv>:
	}
}

void gps_task(void*)
{
 8001d4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d50:	b091      	sub	sp, #68	; 0x44
 8001d52:	af06      	add	r7, sp, #24
 8001d54:	6078      	str	r0, [r7, #4]
	gps.init(&huart1);
 8001d56:	4922      	ldr	r1, [pc, #136]	; (8001de0 <_Z8gps_taskPv+0x94>)
 8001d58:	4822      	ldr	r0, [pc, #136]	; (8001de4 <_Z8gps_taskPv+0x98>)
 8001d5a:	f7ff f8ec 	bl	8000f36 <_ZN3GPS4initEP20__UART_HandleTypeDef>

	while(1)
	{
		if(gps.update())
 8001d5e:	4821      	ldr	r0, [pc, #132]	; (8001de4 <_Z8gps_taskPv+0x98>)
 8001d60:	f7ff f904 	bl	8000f6c <_ZN3GPS6updateEv>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d031      	beq.n	8001dce <_Z8gps_taskPv+0x82>
		{
			location loc = gps.getPosition();
 8001d6a:	481e      	ldr	r0, [pc, #120]	; (8001de4 <_Z8gps_taskPv+0x98>)
 8001d6c:	f7ff ff68 	bl	8001c40 <_ZN3GPS11getPositionEv>
 8001d70:	eeb0 6a40 	vmov.f32	s12, s0
 8001d74:	eef0 6a60 	vmov.f32	s13, s1
 8001d78:	eeb0 7a41 	vmov.f32	s14, s2
 8001d7c:	eef0 7a61 	vmov.f32	s15, s3
 8001d80:	ed87 6b06 	vstr	d6, [r7, #24]
 8001d84:	ed87 7b08 	vstr	d7, [r7, #32]
			velocity vel = gps.getVelocity();
 8001d88:	4816      	ldr	r0, [pc, #88]	; (8001de4 <_Z8gps_taskPv+0x98>)
 8001d8a:	f7ff ff79 	bl	8001c80 <_ZN3GPS11getVelocityEv>
 8001d8e:	eeb0 6a40 	vmov.f32	s12, s0
 8001d92:	eef0 6a60 	vmov.f32	s13, s1
 8001d96:	eeb0 7a41 	vmov.f32	s14, s2
 8001d9a:	eef0 7a61 	vmov.f32	s15, s3
 8001d9e:	ed87 6b02 	vstr	d6, [r7, #8]
 8001da2:	ed87 7b04 	vstr	d7, [r7, #16]
			uart_printf("Lattitude = %8.4f\r\n Longitude = %8.4f\r\n Speed = %8.4f\r\n Bearing = %8.4f\r\n", loc.latitude, loc.longitude, vel.speed, vel.bearing);
 8001da6:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001daa:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001dae:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001db2:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8001db6:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8001dba:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8001dbe:	e9cd 3400 	strd	r3, r4, [sp]
 8001dc2:	4642      	mov	r2, r8
 8001dc4:	464b      	mov	r3, r9
 8001dc6:	4808      	ldr	r0, [pc, #32]	; (8001de8 <_Z8gps_taskPv+0x9c>)
 8001dc8:	f7ff ff28 	bl	8001c1c <_Z11uart_printfPKcz>
 8001dcc:	e002      	b.n	8001dd4 <_Z8gps_taskPv+0x88>
		}
		else
		{
			uart_printf("NO SIGNAL!!!\r\n");
 8001dce:	4807      	ldr	r0, [pc, #28]	; (8001dec <_Z8gps_taskPv+0xa0>)
 8001dd0:	f7ff ff24 	bl	8001c1c <_Z11uart_printfPKcz>
		}
		vTaskDelay(1000);
 8001dd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dd8:	f003 fb26 	bl	8005428 <vTaskDelay>
	}
 8001ddc:	e7bf      	b.n	8001d5e <_Z8gps_taskPv+0x12>
 8001dde:	bf00      	nop
 8001de0:	20004cf8 	.word	0x20004cf8
 8001de4:	20000200 	.word	0x20000200
 8001de8:	0800919c 	.word	0x0800919c
 8001dec:	080091e8 	.word	0x080091e8

08001df0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b094      	sub	sp, #80	; 0x50
 8001df4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001df6:	f107 0320 	add.w	r3, r7, #32
 8001dfa:	2230      	movs	r2, #48	; 0x30
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f004 fffd 	bl	8006dfe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e04:	f107 030c 	add.w	r3, r7, #12
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	60da      	str	r2, [r3, #12]
 8001e12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e14:	2300      	movs	r3, #0
 8001e16:	60bb      	str	r3, [r7, #8]
 8001e18:	4b2e      	ldr	r3, [pc, #184]	; (8001ed4 <_Z18SystemClock_Configv+0xe4>)
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1c:	4a2d      	ldr	r2, [pc, #180]	; (8001ed4 <_Z18SystemClock_Configv+0xe4>)
 8001e1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e22:	6413      	str	r3, [r2, #64]	; 0x40
 8001e24:	4b2b      	ldr	r3, [pc, #172]	; (8001ed4 <_Z18SystemClock_Configv+0xe4>)
 8001e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2c:	60bb      	str	r3, [r7, #8]
 8001e2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e30:	2300      	movs	r3, #0
 8001e32:	607b      	str	r3, [r7, #4]
 8001e34:	4b28      	ldr	r3, [pc, #160]	; (8001ed8 <_Z18SystemClock_Configv+0xe8>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001e3c:	4a26      	ldr	r2, [pc, #152]	; (8001ed8 <_Z18SystemClock_Configv+0xe8>)
 8001e3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e42:	6013      	str	r3, [r2, #0]
 8001e44:	4b24      	ldr	r3, [pc, #144]	; (8001ed8 <_Z18SystemClock_Configv+0xe8>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e4c:	607b      	str	r3, [r7, #4]
 8001e4e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e50:	2302      	movs	r3, #2
 8001e52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e54:	2301      	movs	r3, #1
 8001e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e58:	2310      	movs	r3, #16
 8001e5a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e60:	2300      	movs	r3, #0
 8001e62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001e64:	2310      	movs	r3, #16
 8001e66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001e68:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001e6c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001e6e:	2304      	movs	r3, #4
 8001e70:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001e72:	2307      	movs	r3, #7
 8001e74:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e76:	f107 0320 	add.w	r3, r7, #32
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f000 fd86 	bl	800298c <HAL_RCC_OscConfig>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	bf14      	ite	ne
 8001e86:	2301      	movne	r3, #1
 8001e88:	2300      	moveq	r3, #0
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
 8001e90:	f000 f836 	bl	8001f00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e94:	230f      	movs	r3, #15
 8001e96:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ea0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ea4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001eaa:	f107 030c 	add.w	r3, r7, #12
 8001eae:	2102      	movs	r1, #2
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f000 ffdb 	bl	8002e6c <HAL_RCC_ClockConfig>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	bf14      	ite	ne
 8001ebc:	2301      	movne	r3, #1
 8001ebe:	2300      	moveq	r3, #0
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 8001ec6:	f000 f81b 	bl	8001f00 <Error_Handler>
  }
}
 8001eca:	bf00      	nop
 8001ecc:	3750      	adds	r7, #80	; 0x50
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	40007000 	.word	0x40007000

08001edc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a04      	ldr	r2, [pc, #16]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d101      	bne.n	8001ef2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001eee:	f000 fa73 	bl	80023d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40014800 	.word	0x40014800

08001f00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
	...

08001f10 <_Z41__static_initialization_and_destruction_0ii>:
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d107      	bne.n	8001f30 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d102      	bne.n	8001f30 <_Z41__static_initialization_and_destruction_0ii+0x20>
GPS gps;
 8001f2a:	4809      	ldr	r0, [pc, #36]	; (8001f50 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001f2c:	f7fe ffce 	bl	8000ecc <_ZN3GPSC1Ev>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d107      	bne.n	8001f46 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d102      	bne.n	8001f46 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001f40:	4803      	ldr	r0, [pc, #12]	; (8001f50 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001f42:	f7fe ffd7 	bl	8000ef4 <_ZN3GPSD1Ev>
}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20000200 	.word	0x20000200

08001f54 <_GLOBAL__sub_I__Z6vprintPKcSt9__va_list>:
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001f5c:	2001      	movs	r0, #1
 8001f5e:	f7ff ffd7 	bl	8001f10 <_Z41__static_initialization_and_destruction_0ii>
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <_GLOBAL__sub_D__Z6vprintPKcSt9__va_list>:
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001f6c:	2000      	movs	r0, #0
 8001f6e:	f7ff ffcf 	bl	8001f10 <_Z41__static_initialization_and_destruction_0ii>
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	607b      	str	r3, [r7, #4]
 8001f7e:	4b10      	ldr	r3, [pc, #64]	; (8001fc0 <HAL_MspInit+0x4c>)
 8001f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f82:	4a0f      	ldr	r2, [pc, #60]	; (8001fc0 <HAL_MspInit+0x4c>)
 8001f84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f88:	6453      	str	r3, [r2, #68]	; 0x44
 8001f8a:	4b0d      	ldr	r3, [pc, #52]	; (8001fc0 <HAL_MspInit+0x4c>)
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f92:	607b      	str	r3, [r7, #4]
 8001f94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	603b      	str	r3, [r7, #0]
 8001f9a:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <HAL_MspInit+0x4c>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	4a08      	ldr	r2, [pc, #32]	; (8001fc0 <HAL_MspInit+0x4c>)
 8001fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa6:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <HAL_MspInit+0x4c>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fae:	603b      	str	r3, [r7, #0]
 8001fb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	40023800 	.word	0x40023800

08001fc4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b08c      	sub	sp, #48	; 0x30
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	201a      	movs	r0, #26
 8001fda:	f000 fad5 	bl	8002588 <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001fde:	201a      	movs	r0, #26
 8001fe0:	f000 faee 	bl	80025c0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	4b1e      	ldr	r3, [pc, #120]	; (8002064 <HAL_InitTick+0xa0>)
 8001fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fec:	4a1d      	ldr	r2, [pc, #116]	; (8002064 <HAL_InitTick+0xa0>)
 8001fee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ff2:	6453      	str	r3, [r2, #68]	; 0x44
 8001ff4:	4b1b      	ldr	r3, [pc, #108]	; (8002064 <HAL_InitTick+0xa0>)
 8001ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002000:	f107 0210 	add.w	r2, r7, #16
 8002004:	f107 0314 	add.w	r3, r7, #20
 8002008:	4611      	mov	r1, r2
 800200a:	4618      	mov	r0, r3
 800200c:	f001 f920 	bl	8003250 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002010:	f001 f90a 	bl	8003228 <HAL_RCC_GetPCLK2Freq>
 8002014:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002018:	4a13      	ldr	r2, [pc, #76]	; (8002068 <HAL_InitTick+0xa4>)
 800201a:	fba2 2303 	umull	r2, r3, r2, r3
 800201e:	0c9b      	lsrs	r3, r3, #18
 8002020:	3b01      	subs	r3, #1
 8002022:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8002024:	4b11      	ldr	r3, [pc, #68]	; (800206c <HAL_InitTick+0xa8>)
 8002026:	4a12      	ldr	r2, [pc, #72]	; (8002070 <HAL_InitTick+0xac>)
 8002028:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000 / 1000) - 1;
 800202a:	4b10      	ldr	r3, [pc, #64]	; (800206c <HAL_InitTick+0xa8>)
 800202c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002030:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8002032:	4a0e      	ldr	r2, [pc, #56]	; (800206c <HAL_InitTick+0xa8>)
 8002034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002036:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8002038:	4b0c      	ldr	r3, [pc, #48]	; (800206c <HAL_InitTick+0xa8>)
 800203a:	2200      	movs	r2, #0
 800203c:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800203e:	4b0b      	ldr	r3, [pc, #44]	; (800206c <HAL_InitTick+0xa8>)
 8002040:	2200      	movs	r2, #0
 8002042:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 8002044:	4809      	ldr	r0, [pc, #36]	; (800206c <HAL_InitTick+0xa8>)
 8002046:	f001 f935 	bl	80032b4 <HAL_TIM_Base_Init>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d104      	bne.n	800205a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 8002050:	4806      	ldr	r0, [pc, #24]	; (800206c <HAL_InitTick+0xa8>)
 8002052:	f001 f964 	bl	800331e <HAL_TIM_Base_Start_IT>
 8002056:	4603      	mov	r3, r0
 8002058:	e000      	b.n	800205c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
}
 800205c:	4618      	mov	r0, r3
 800205e:	3730      	adds	r7, #48	; 0x30
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40023800 	.word	0x40023800
 8002068:	431bde83 	.word	0x431bde83
 800206c:	20004cb8 	.word	0x20004cb8
 8002070:	40014800 	.word	0x40014800

08002074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002078:	bf00      	nop
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002082:	b480      	push	{r7}
 8002084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002086:	e7fe      	b.n	8002086 <HardFault_Handler+0x4>

08002088 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800208c:	e7fe      	b.n	800208c <MemManage_Handler+0x4>

0800208e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800208e:	b480      	push	{r7}
 8002090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002092:	e7fe      	b.n	8002092 <BusFault_Handler+0x4>

08002094 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002098:	e7fe      	b.n	8002098 <UsageFault_Handler+0x4>

0800209a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800209a:	b480      	push	{r7}
 800209c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80020ac:	4802      	ldr	r0, [pc, #8]	; (80020b8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80020ae:	f001 f95a 	bl	8003366 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20004cb8 	.word	0x20004cb8

080020bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020c0:	480a      	ldr	r0, [pc, #40]	; (80020ec <USART1_IRQHandler+0x30>)
 80020c2:	f001 fc51 	bl	8003968 <HAL_UART_IRQHandler>
  if(!gps.has_data)
 80020c6:	4b0a      	ldr	r3, [pc, #40]	; (80020f0 <USART1_IRQHandler+0x34>)
 80020c8:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 80020cc:	f083 0301 	eor.w	r3, r3, #1
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d008      	beq.n	80020e8 <USART1_IRQHandler+0x2c>
  {
	  HAL_UART_Receive_IT(&huart1, (uint8_t*)gps.data, 200);
 80020d6:	22c8      	movs	r2, #200	; 0xc8
 80020d8:	4906      	ldr	r1, [pc, #24]	; (80020f4 <USART1_IRQHandler+0x38>)
 80020da:	4804      	ldr	r0, [pc, #16]	; (80020ec <USART1_IRQHandler+0x30>)
 80020dc:	f001 fbee 	bl	80038bc <HAL_UART_Receive_IT>
	  gps.has_data = true;
 80020e0:	4b03      	ldr	r3, [pc, #12]	; (80020f0 <USART1_IRQHandler+0x34>)
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
  }

}
 80020e8:	bf00      	nop
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	20004cf8 	.word	0x20004cf8
 80020f0:	20000200 	.word	0x20000200
 80020f4:	20000204 	.word	0x20000204

080020f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002100:	4a14      	ldr	r2, [pc, #80]	; (8002154 <_sbrk+0x5c>)
 8002102:	4b15      	ldr	r3, [pc, #84]	; (8002158 <_sbrk+0x60>)
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800210c:	4b13      	ldr	r3, [pc, #76]	; (800215c <_sbrk+0x64>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d102      	bne.n	800211a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002114:	4b11      	ldr	r3, [pc, #68]	; (800215c <_sbrk+0x64>)
 8002116:	4a12      	ldr	r2, [pc, #72]	; (8002160 <_sbrk+0x68>)
 8002118:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800211a:	4b10      	ldr	r3, [pc, #64]	; (800215c <_sbrk+0x64>)
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4413      	add	r3, r2
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	429a      	cmp	r2, r3
 8002126:	d207      	bcs.n	8002138 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002128:	f004 fe24 	bl	8006d74 <__errno>
 800212c:	4602      	mov	r2, r0
 800212e:	230c      	movs	r3, #12
 8002130:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002132:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002136:	e009      	b.n	800214c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002138:	4b08      	ldr	r3, [pc, #32]	; (800215c <_sbrk+0x64>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800213e:	4b07      	ldr	r3, [pc, #28]	; (800215c <_sbrk+0x64>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4413      	add	r3, r2
 8002146:	4a05      	ldr	r2, [pc, #20]	; (800215c <_sbrk+0x64>)
 8002148:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800214a:	68fb      	ldr	r3, [r7, #12]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20018000 	.word	0x20018000
 8002158:	00000400 	.word	0x00000400
 800215c:	200003a8 	.word	0x200003a8
 8002160:	20004dc0 	.word	0x20004dc0

08002164 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002168:	4b08      	ldr	r3, [pc, #32]	; (800218c <SystemInit+0x28>)
 800216a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216e:	4a07      	ldr	r2, [pc, #28]	; (800218c <SystemInit+0x28>)
 8002170:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002174:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002178:	4b04      	ldr	r3, [pc, #16]	; (800218c <SystemInit+0x28>)
 800217a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800217e:	609a      	str	r2, [r3, #8]
#endif
}
 8002180:	bf00      	nop
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	e000ed00 	.word	0xe000ed00

08002190 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002194:	4b11      	ldr	r3, [pc, #68]	; (80021dc <MX_USART1_UART_Init+0x4c>)
 8002196:	4a12      	ldr	r2, [pc, #72]	; (80021e0 <MX_USART1_UART_Init+0x50>)
 8002198:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800219a:	4b10      	ldr	r3, [pc, #64]	; (80021dc <MX_USART1_UART_Init+0x4c>)
 800219c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80021a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021a2:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <MX_USART1_UART_Init+0x4c>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021a8:	4b0c      	ldr	r3, [pc, #48]	; (80021dc <MX_USART1_UART_Init+0x4c>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021ae:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <MX_USART1_UART_Init+0x4c>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021b4:	4b09      	ldr	r3, [pc, #36]	; (80021dc <MX_USART1_UART_Init+0x4c>)
 80021b6:	220c      	movs	r2, #12
 80021b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ba:	4b08      	ldr	r3, [pc, #32]	; (80021dc <MX_USART1_UART_Init+0x4c>)
 80021bc:	2200      	movs	r2, #0
 80021be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021c0:	4b06      	ldr	r3, [pc, #24]	; (80021dc <MX_USART1_UART_Init+0x4c>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021c6:	4805      	ldr	r0, [pc, #20]	; (80021dc <MX_USART1_UART_Init+0x4c>)
 80021c8:	f001 fa92 	bl	80036f0 <HAL_UART_Init>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80021d2:	f7ff fe95 	bl	8001f00 <Error_Handler>
  }

}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	20004cf8 	.word	0x20004cf8
 80021e0:	40011000 	.word	0x40011000

080021e4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80021e8:	4b11      	ldr	r3, [pc, #68]	; (8002230 <MX_USART2_UART_Init+0x4c>)
 80021ea:	4a12      	ldr	r2, [pc, #72]	; (8002234 <MX_USART2_UART_Init+0x50>)
 80021ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021ee:	4b10      	ldr	r3, [pc, #64]	; (8002230 <MX_USART2_UART_Init+0x4c>)
 80021f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021f6:	4b0e      	ldr	r3, [pc, #56]	; (8002230 <MX_USART2_UART_Init+0x4c>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021fc:	4b0c      	ldr	r3, [pc, #48]	; (8002230 <MX_USART2_UART_Init+0x4c>)
 80021fe:	2200      	movs	r2, #0
 8002200:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002202:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <MX_USART2_UART_Init+0x4c>)
 8002204:	2200      	movs	r2, #0
 8002206:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002208:	4b09      	ldr	r3, [pc, #36]	; (8002230 <MX_USART2_UART_Init+0x4c>)
 800220a:	220c      	movs	r2, #12
 800220c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800220e:	4b08      	ldr	r3, [pc, #32]	; (8002230 <MX_USART2_UART_Init+0x4c>)
 8002210:	2200      	movs	r2, #0
 8002212:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002214:	4b06      	ldr	r3, [pc, #24]	; (8002230 <MX_USART2_UART_Init+0x4c>)
 8002216:	2200      	movs	r2, #0
 8002218:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800221a:	4805      	ldr	r0, [pc, #20]	; (8002230 <MX_USART2_UART_Init+0x4c>)
 800221c:	f001 fa68 	bl	80036f0 <HAL_UART_Init>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002226:	f7ff fe6b 	bl	8001f00 <Error_Handler>
  }

}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	20004d38 	.word	0x20004d38
 8002234:	40004400 	.word	0x40004400

08002238 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08c      	sub	sp, #48	; 0x30
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002240:	f107 031c 	add.w	r3, r7, #28
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	60da      	str	r2, [r3, #12]
 800224e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a36      	ldr	r2, [pc, #216]	; (8002330 <HAL_UART_MspInit+0xf8>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d135      	bne.n	80022c6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	61bb      	str	r3, [r7, #24]
 800225e:	4b35      	ldr	r3, [pc, #212]	; (8002334 <HAL_UART_MspInit+0xfc>)
 8002260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002262:	4a34      	ldr	r2, [pc, #208]	; (8002334 <HAL_UART_MspInit+0xfc>)
 8002264:	f043 0310 	orr.w	r3, r3, #16
 8002268:	6453      	str	r3, [r2, #68]	; 0x44
 800226a:	4b32      	ldr	r3, [pc, #200]	; (8002334 <HAL_UART_MspInit+0xfc>)
 800226c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226e:	f003 0310 	and.w	r3, r3, #16
 8002272:	61bb      	str	r3, [r7, #24]
 8002274:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	617b      	str	r3, [r7, #20]
 800227a:	4b2e      	ldr	r3, [pc, #184]	; (8002334 <HAL_UART_MspInit+0xfc>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	4a2d      	ldr	r2, [pc, #180]	; (8002334 <HAL_UART_MspInit+0xfc>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	6313      	str	r3, [r2, #48]	; 0x30
 8002286:	4b2b      	ldr	r3, [pc, #172]	; (8002334 <HAL_UART_MspInit+0xfc>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	617b      	str	r3, [r7, #20]
 8002290:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002292:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002296:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002298:	2302      	movs	r3, #2
 800229a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a0:	2303      	movs	r3, #3
 80022a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022a4:	2307      	movs	r3, #7
 80022a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a8:	f107 031c 	add.w	r3, r7, #28
 80022ac:	4619      	mov	r1, r3
 80022ae:	4822      	ldr	r0, [pc, #136]	; (8002338 <HAL_UART_MspInit+0x100>)
 80022b0:	f000 f9b6 	bl	8002620 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80022b4:	2200      	movs	r2, #0
 80022b6:	2100      	movs	r1, #0
 80022b8:	2025      	movs	r0, #37	; 0x25
 80022ba:	f000 f965 	bl	8002588 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022be:	2025      	movs	r0, #37	; 0x25
 80022c0:	f000 f97e 	bl	80025c0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80022c4:	e030      	b.n	8002328 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a1c      	ldr	r2, [pc, #112]	; (800233c <HAL_UART_MspInit+0x104>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d12b      	bne.n	8002328 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80022d0:	2300      	movs	r3, #0
 80022d2:	613b      	str	r3, [r7, #16]
 80022d4:	4b17      	ldr	r3, [pc, #92]	; (8002334 <HAL_UART_MspInit+0xfc>)
 80022d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d8:	4a16      	ldr	r2, [pc, #88]	; (8002334 <HAL_UART_MspInit+0xfc>)
 80022da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022de:	6413      	str	r3, [r2, #64]	; 0x40
 80022e0:	4b14      	ldr	r3, [pc, #80]	; (8002334 <HAL_UART_MspInit+0xfc>)
 80022e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e8:	613b      	str	r3, [r7, #16]
 80022ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ec:	2300      	movs	r3, #0
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	4b10      	ldr	r3, [pc, #64]	; (8002334 <HAL_UART_MspInit+0xfc>)
 80022f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f4:	4a0f      	ldr	r2, [pc, #60]	; (8002334 <HAL_UART_MspInit+0xfc>)
 80022f6:	f043 0301 	orr.w	r3, r3, #1
 80022fa:	6313      	str	r3, [r2, #48]	; 0x30
 80022fc:	4b0d      	ldr	r3, [pc, #52]	; (8002334 <HAL_UART_MspInit+0xfc>)
 80022fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002308:	230c      	movs	r3, #12
 800230a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230c:	2302      	movs	r3, #2
 800230e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002310:	2300      	movs	r3, #0
 8002312:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002314:	2300      	movs	r3, #0
 8002316:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002318:	2307      	movs	r3, #7
 800231a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231c:	f107 031c 	add.w	r3, r7, #28
 8002320:	4619      	mov	r1, r3
 8002322:	4805      	ldr	r0, [pc, #20]	; (8002338 <HAL_UART_MspInit+0x100>)
 8002324:	f000 f97c 	bl	8002620 <HAL_GPIO_Init>
}
 8002328:	bf00      	nop
 800232a:	3730      	adds	r7, #48	; 0x30
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40011000 	.word	0x40011000
 8002334:	40023800 	.word	0x40023800
 8002338:	40020000 	.word	0x40020000
 800233c:	40004400 	.word	0x40004400

08002340 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002340:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002378 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002344:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002346:	e003      	b.n	8002350 <LoopCopyDataInit>

08002348 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002348:	4b0c      	ldr	r3, [pc, #48]	; (800237c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800234a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800234c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800234e:	3104      	adds	r1, #4

08002350 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002350:	480b      	ldr	r0, [pc, #44]	; (8002380 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002352:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002354:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002356:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002358:	d3f6      	bcc.n	8002348 <CopyDataInit>
  ldr  r2, =_sbss
 800235a:	4a0b      	ldr	r2, [pc, #44]	; (8002388 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800235c:	e002      	b.n	8002364 <LoopFillZerobss>

0800235e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800235e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002360:	f842 3b04 	str.w	r3, [r2], #4

08002364 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002364:	4b09      	ldr	r3, [pc, #36]	; (800238c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002366:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002368:	d3f9      	bcc.n	800235e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800236a:	f7ff fefb 	bl	8002164 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800236e:	f004 fd07 	bl	8006d80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002372:	f7ff fca5 	bl	8001cc0 <main>
  bx  lr    
 8002376:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002378:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 800237c:	080094f0 	.word	0x080094f0
  ldr  r0, =_sdata
 8002380:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002384:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8002388:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 800238c:	20004dc0 	.word	0x20004dc0

08002390 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002390:	e7fe      	b.n	8002390 <ADC_IRQHandler>
	...

08002394 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002398:	4b0e      	ldr	r3, [pc, #56]	; (80023d4 <HAL_Init+0x40>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a0d      	ldr	r2, [pc, #52]	; (80023d4 <HAL_Init+0x40>)
 800239e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023a4:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <HAL_Init+0x40>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a0a      	ldr	r2, [pc, #40]	; (80023d4 <HAL_Init+0x40>)
 80023aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023b0:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <HAL_Init+0x40>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a07      	ldr	r2, [pc, #28]	; (80023d4 <HAL_Init+0x40>)
 80023b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023bc:	2003      	movs	r0, #3
 80023be:	f000 f8d8 	bl	8002572 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023c2:	2000      	movs	r0, #0
 80023c4:	f7ff fdfe 	bl	8001fc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023c8:	f7ff fdd4 	bl	8001f74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40023c00 	.word	0x40023c00

080023d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023dc:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <HAL_IncTick+0x20>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	461a      	mov	r2, r3
 80023e2:	4b06      	ldr	r3, [pc, #24]	; (80023fc <HAL_IncTick+0x24>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4413      	add	r3, r2
 80023e8:	4a04      	ldr	r2, [pc, #16]	; (80023fc <HAL_IncTick+0x24>)
 80023ea:	6013      	str	r3, [r2, #0]
}
 80023ec:	bf00      	nop
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	20000008 	.word	0x20000008
 80023fc:	20004d78 	.word	0x20004d78

08002400 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return uwTick;
 8002404:	4b03      	ldr	r3, [pc, #12]	; (8002414 <HAL_GetTick+0x14>)
 8002406:	681b      	ldr	r3, [r3, #0]
}
 8002408:	4618      	mov	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	20004d78 	.word	0x20004d78

08002418 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002428:	4b0c      	ldr	r3, [pc, #48]	; (800245c <__NVIC_SetPriorityGrouping+0x44>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002434:	4013      	ands	r3, r2
 8002436:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002440:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002448:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800244a:	4a04      	ldr	r2, [pc, #16]	; (800245c <__NVIC_SetPriorityGrouping+0x44>)
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	60d3      	str	r3, [r2, #12]
}
 8002450:	bf00      	nop
 8002452:	3714      	adds	r7, #20
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	e000ed00 	.word	0xe000ed00

08002460 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002464:	4b04      	ldr	r3, [pc, #16]	; (8002478 <__NVIC_GetPriorityGrouping+0x18>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	0a1b      	lsrs	r3, r3, #8
 800246a:	f003 0307 	and.w	r3, r3, #7
}
 800246e:	4618      	mov	r0, r3
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	e000ed00 	.word	0xe000ed00

0800247c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248a:	2b00      	cmp	r3, #0
 800248c:	db0b      	blt.n	80024a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800248e:	79fb      	ldrb	r3, [r7, #7]
 8002490:	f003 021f 	and.w	r2, r3, #31
 8002494:	4907      	ldr	r1, [pc, #28]	; (80024b4 <__NVIC_EnableIRQ+0x38>)
 8002496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249a:	095b      	lsrs	r3, r3, #5
 800249c:	2001      	movs	r0, #1
 800249e:	fa00 f202 	lsl.w	r2, r0, r2
 80024a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	e000e100 	.word	0xe000e100

080024b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	6039      	str	r1, [r7, #0]
 80024c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	db0a      	blt.n	80024e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	b2da      	uxtb	r2, r3
 80024d0:	490c      	ldr	r1, [pc, #48]	; (8002504 <__NVIC_SetPriority+0x4c>)
 80024d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d6:	0112      	lsls	r2, r2, #4
 80024d8:	b2d2      	uxtb	r2, r2
 80024da:	440b      	add	r3, r1
 80024dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024e0:	e00a      	b.n	80024f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	4908      	ldr	r1, [pc, #32]	; (8002508 <__NVIC_SetPriority+0x50>)
 80024e8:	79fb      	ldrb	r3, [r7, #7]
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	3b04      	subs	r3, #4
 80024f0:	0112      	lsls	r2, r2, #4
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	440b      	add	r3, r1
 80024f6:	761a      	strb	r2, [r3, #24]
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	e000e100 	.word	0xe000e100
 8002508:	e000ed00 	.word	0xe000ed00

0800250c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800250c:	b480      	push	{r7}
 800250e:	b089      	sub	sp, #36	; 0x24
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f003 0307 	and.w	r3, r3, #7
 800251e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	f1c3 0307 	rsb	r3, r3, #7
 8002526:	2b04      	cmp	r3, #4
 8002528:	bf28      	it	cs
 800252a:	2304      	movcs	r3, #4
 800252c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	3304      	adds	r3, #4
 8002532:	2b06      	cmp	r3, #6
 8002534:	d902      	bls.n	800253c <NVIC_EncodePriority+0x30>
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	3b03      	subs	r3, #3
 800253a:	e000      	b.n	800253e <NVIC_EncodePriority+0x32>
 800253c:	2300      	movs	r3, #0
 800253e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002540:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	43da      	mvns	r2, r3
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	401a      	ands	r2, r3
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002554:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	fa01 f303 	lsl.w	r3, r1, r3
 800255e:	43d9      	mvns	r1, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002564:	4313      	orrs	r3, r2
         );
}
 8002566:	4618      	mov	r0, r3
 8002568:	3724      	adds	r7, #36	; 0x24
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b082      	sub	sp, #8
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f7ff ff4c 	bl	8002418 <__NVIC_SetPriorityGrouping>
}
 8002580:	bf00      	nop
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
 8002594:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800259a:	f7ff ff61 	bl	8002460 <__NVIC_GetPriorityGrouping>
 800259e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	68b9      	ldr	r1, [r7, #8]
 80025a4:	6978      	ldr	r0, [r7, #20]
 80025a6:	f7ff ffb1 	bl	800250c <NVIC_EncodePriority>
 80025aa:	4602      	mov	r2, r0
 80025ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025b0:	4611      	mov	r1, r2
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff ff80 	bl	80024b8 <__NVIC_SetPriority>
}
 80025b8:	bf00      	nop
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff ff54 	bl	800247c <__NVIC_EnableIRQ>
}
 80025d4:	bf00      	nop
 80025d6:	3708      	adds	r7, #8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d004      	beq.n	80025fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2280      	movs	r2, #128	; 0x80
 80025f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e00c      	b.n	8002614 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2205      	movs	r2, #5
 80025fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 0201 	bic.w	r2, r2, #1
 8002610:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002620:	b480      	push	{r7}
 8002622:	b089      	sub	sp, #36	; 0x24
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800262a:	2300      	movs	r3, #0
 800262c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800262e:	2300      	movs	r3, #0
 8002630:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002632:	2300      	movs	r3, #0
 8002634:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002636:	2300      	movs	r3, #0
 8002638:	61fb      	str	r3, [r7, #28]
 800263a:	e159      	b.n	80028f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800263c:	2201      	movs	r2, #1
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	4013      	ands	r3, r2
 800264e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	429a      	cmp	r2, r3
 8002656:	f040 8148 	bne.w	80028ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d00b      	beq.n	800267a <HAL_GPIO_Init+0x5a>
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b02      	cmp	r3, #2
 8002668:	d007      	beq.n	800267a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800266e:	2b11      	cmp	r3, #17
 8002670:	d003      	beq.n	800267a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b12      	cmp	r3, #18
 8002678:	d130      	bne.n	80026dc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	2203      	movs	r2, #3
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	43db      	mvns	r3, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4013      	ands	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	68da      	ldr	r2, [r3, #12]
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026b0:	2201      	movs	r2, #1
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	43db      	mvns	r3, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4013      	ands	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	091b      	lsrs	r3, r3, #4
 80026c6:	f003 0201 	and.w	r2, r3, #1
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	2203      	movs	r2, #3
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	43db      	mvns	r3, r3
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4013      	ands	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4313      	orrs	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b02      	cmp	r3, #2
 8002712:	d003      	beq.n	800271c <HAL_GPIO_Init+0xfc>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	2b12      	cmp	r3, #18
 800271a:	d123      	bne.n	8002764 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	08da      	lsrs	r2, r3, #3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3208      	adds	r2, #8
 8002724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002728:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	220f      	movs	r2, #15
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	43db      	mvns	r3, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4013      	ands	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	691a      	ldr	r2, [r3, #16]
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	08da      	lsrs	r2, r3, #3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3208      	adds	r2, #8
 800275e:	69b9      	ldr	r1, [r7, #24]
 8002760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	2203      	movs	r2, #3
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4013      	ands	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f003 0203 	and.w	r2, r3, #3
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4313      	orrs	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 80a2 	beq.w	80028ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	4b56      	ldr	r3, [pc, #344]	; (8002904 <HAL_GPIO_Init+0x2e4>)
 80027ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ae:	4a55      	ldr	r2, [pc, #340]	; (8002904 <HAL_GPIO_Init+0x2e4>)
 80027b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027b4:	6453      	str	r3, [r2, #68]	; 0x44
 80027b6:	4b53      	ldr	r3, [pc, #332]	; (8002904 <HAL_GPIO_Init+0x2e4>)
 80027b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027c2:	4a51      	ldr	r2, [pc, #324]	; (8002908 <HAL_GPIO_Init+0x2e8>)
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	089b      	lsrs	r3, r3, #2
 80027c8:	3302      	adds	r3, #2
 80027ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	220f      	movs	r2, #15
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	43db      	mvns	r3, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4013      	ands	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a48      	ldr	r2, [pc, #288]	; (800290c <HAL_GPIO_Init+0x2ec>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d019      	beq.n	8002822 <HAL_GPIO_Init+0x202>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a47      	ldr	r2, [pc, #284]	; (8002910 <HAL_GPIO_Init+0x2f0>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d013      	beq.n	800281e <HAL_GPIO_Init+0x1fe>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a46      	ldr	r2, [pc, #280]	; (8002914 <HAL_GPIO_Init+0x2f4>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d00d      	beq.n	800281a <HAL_GPIO_Init+0x1fa>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a45      	ldr	r2, [pc, #276]	; (8002918 <HAL_GPIO_Init+0x2f8>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d007      	beq.n	8002816 <HAL_GPIO_Init+0x1f6>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a44      	ldr	r2, [pc, #272]	; (800291c <HAL_GPIO_Init+0x2fc>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d101      	bne.n	8002812 <HAL_GPIO_Init+0x1f2>
 800280e:	2304      	movs	r3, #4
 8002810:	e008      	b.n	8002824 <HAL_GPIO_Init+0x204>
 8002812:	2307      	movs	r3, #7
 8002814:	e006      	b.n	8002824 <HAL_GPIO_Init+0x204>
 8002816:	2303      	movs	r3, #3
 8002818:	e004      	b.n	8002824 <HAL_GPIO_Init+0x204>
 800281a:	2302      	movs	r3, #2
 800281c:	e002      	b.n	8002824 <HAL_GPIO_Init+0x204>
 800281e:	2301      	movs	r3, #1
 8002820:	e000      	b.n	8002824 <HAL_GPIO_Init+0x204>
 8002822:	2300      	movs	r3, #0
 8002824:	69fa      	ldr	r2, [r7, #28]
 8002826:	f002 0203 	and.w	r2, r2, #3
 800282a:	0092      	lsls	r2, r2, #2
 800282c:	4093      	lsls	r3, r2
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	4313      	orrs	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002834:	4934      	ldr	r1, [pc, #208]	; (8002908 <HAL_GPIO_Init+0x2e8>)
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	089b      	lsrs	r3, r3, #2
 800283a:	3302      	adds	r3, #2
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002842:	4b37      	ldr	r3, [pc, #220]	; (8002920 <HAL_GPIO_Init+0x300>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	43db      	mvns	r3, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4013      	ands	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	4313      	orrs	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002866:	4a2e      	ldr	r2, [pc, #184]	; (8002920 <HAL_GPIO_Init+0x300>)
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800286c:	4b2c      	ldr	r3, [pc, #176]	; (8002920 <HAL_GPIO_Init+0x300>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	43db      	mvns	r3, r3
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	4013      	ands	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d003      	beq.n	8002890 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	4313      	orrs	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002890:	4a23      	ldr	r2, [pc, #140]	; (8002920 <HAL_GPIO_Init+0x300>)
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002896:	4b22      	ldr	r3, [pc, #136]	; (8002920 <HAL_GPIO_Init+0x300>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	43db      	mvns	r3, r3
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	4013      	ands	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028ba:	4a19      	ldr	r2, [pc, #100]	; (8002920 <HAL_GPIO_Init+0x300>)
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028c0:	4b17      	ldr	r3, [pc, #92]	; (8002920 <HAL_GPIO_Init+0x300>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	43db      	mvns	r3, r3
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	4013      	ands	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d003      	beq.n	80028e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028e4:	4a0e      	ldr	r2, [pc, #56]	; (8002920 <HAL_GPIO_Init+0x300>)
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	3301      	adds	r3, #1
 80028ee:	61fb      	str	r3, [r7, #28]
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	2b0f      	cmp	r3, #15
 80028f4:	f67f aea2 	bls.w	800263c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028f8:	bf00      	nop
 80028fa:	3724      	adds	r7, #36	; 0x24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	40023800 	.word	0x40023800
 8002908:	40013800 	.word	0x40013800
 800290c:	40020000 	.word	0x40020000
 8002910:	40020400 	.word	0x40020400
 8002914:	40020800 	.word	0x40020800
 8002918:	40020c00 	.word	0x40020c00
 800291c:	40021000 	.word	0x40021000
 8002920:	40013c00 	.word	0x40013c00

08002924 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	460b      	mov	r3, r1
 800292e:	807b      	strh	r3, [r7, #2]
 8002930:	4613      	mov	r3, r2
 8002932:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002934:	787b      	ldrb	r3, [r7, #1]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800293a:	887a      	ldrh	r2, [r7, #2]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002940:	e003      	b.n	800294a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002942:	887b      	ldrh	r3, [r7, #2]
 8002944:	041a      	lsls	r2, r3, #16
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	619a      	str	r2, [r3, #24]
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
 800295e:	460b      	mov	r3, r1
 8002960:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	695a      	ldr	r2, [r3, #20]
 8002966:	887b      	ldrh	r3, [r7, #2]
 8002968:	401a      	ands	r2, r3
 800296a:	887b      	ldrh	r3, [r7, #2]
 800296c:	429a      	cmp	r2, r3
 800296e:	d104      	bne.n	800297a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002970:	887b      	ldrh	r3, [r7, #2]
 8002972:	041a      	lsls	r2, r3, #16
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002978:	e002      	b.n	8002980 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800297a:	887a      	ldrh	r2, [r7, #2]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	619a      	str	r2, [r3, #24]
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e25b      	b.n	8002e56 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d075      	beq.n	8002a96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029aa:	4ba3      	ldr	r3, [pc, #652]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 030c 	and.w	r3, r3, #12
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d00c      	beq.n	80029d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029b6:	4ba0      	ldr	r3, [pc, #640]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029be:	2b08      	cmp	r3, #8
 80029c0:	d112      	bne.n	80029e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029c2:	4b9d      	ldr	r3, [pc, #628]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029ce:	d10b      	bne.n	80029e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029d0:	4b99      	ldr	r3, [pc, #612]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d05b      	beq.n	8002a94 <HAL_RCC_OscConfig+0x108>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d157      	bne.n	8002a94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e236      	b.n	8002e56 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029f0:	d106      	bne.n	8002a00 <HAL_RCC_OscConfig+0x74>
 80029f2:	4b91      	ldr	r3, [pc, #580]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a90      	ldr	r2, [pc, #576]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 80029f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029fc:	6013      	str	r3, [r2, #0]
 80029fe:	e01d      	b.n	8002a3c <HAL_RCC_OscConfig+0xb0>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a08:	d10c      	bne.n	8002a24 <HAL_RCC_OscConfig+0x98>
 8002a0a:	4b8b      	ldr	r3, [pc, #556]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a8a      	ldr	r2, [pc, #552]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002a10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	4b88      	ldr	r3, [pc, #544]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a87      	ldr	r2, [pc, #540]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	e00b      	b.n	8002a3c <HAL_RCC_OscConfig+0xb0>
 8002a24:	4b84      	ldr	r3, [pc, #528]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a83      	ldr	r2, [pc, #524]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002a2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a2e:	6013      	str	r3, [r2, #0]
 8002a30:	4b81      	ldr	r3, [pc, #516]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a80      	ldr	r2, [pc, #512]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002a36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d013      	beq.n	8002a6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a44:	f7ff fcdc 	bl	8002400 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a4c:	f7ff fcd8 	bl	8002400 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b64      	cmp	r3, #100	; 0x64
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e1fb      	b.n	8002e56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a5e:	4b76      	ldr	r3, [pc, #472]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0f0      	beq.n	8002a4c <HAL_RCC_OscConfig+0xc0>
 8002a6a:	e014      	b.n	8002a96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6c:	f7ff fcc8 	bl	8002400 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a74:	f7ff fcc4 	bl	8002400 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b64      	cmp	r3, #100	; 0x64
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e1e7      	b.n	8002e56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a86:	4b6c      	ldr	r3, [pc, #432]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1f0      	bne.n	8002a74 <HAL_RCC_OscConfig+0xe8>
 8002a92:	e000      	b.n	8002a96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d063      	beq.n	8002b6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002aa2:	4b65      	ldr	r3, [pc, #404]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 030c 	and.w	r3, r3, #12
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00b      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aae:	4b62      	ldr	r3, [pc, #392]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ab6:	2b08      	cmp	r3, #8
 8002ab8:	d11c      	bne.n	8002af4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aba:	4b5f      	ldr	r3, [pc, #380]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d116      	bne.n	8002af4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ac6:	4b5c      	ldr	r3, [pc, #368]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d005      	beq.n	8002ade <HAL_RCC_OscConfig+0x152>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d001      	beq.n	8002ade <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e1bb      	b.n	8002e56 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ade:	4b56      	ldr	r3, [pc, #344]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	4952      	ldr	r1, [pc, #328]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af2:	e03a      	b.n	8002b6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d020      	beq.n	8002b3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002afc:	4b4f      	ldr	r3, [pc, #316]	; (8002c3c <HAL_RCC_OscConfig+0x2b0>)
 8002afe:	2201      	movs	r2, #1
 8002b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b02:	f7ff fc7d 	bl	8002400 <HAL_GetTick>
 8002b06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b08:	e008      	b.n	8002b1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b0a:	f7ff fc79 	bl	8002400 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e19c      	b.n	8002e56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b1c:	4b46      	ldr	r3, [pc, #280]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d0f0      	beq.n	8002b0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b28:	4b43      	ldr	r3, [pc, #268]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	4940      	ldr	r1, [pc, #256]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	600b      	str	r3, [r1, #0]
 8002b3c:	e015      	b.n	8002b6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b3e:	4b3f      	ldr	r3, [pc, #252]	; (8002c3c <HAL_RCC_OscConfig+0x2b0>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b44:	f7ff fc5c 	bl	8002400 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b4c:	f7ff fc58 	bl	8002400 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e17b      	b.n	8002e56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b5e:	4b36      	ldr	r3, [pc, #216]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f0      	bne.n	8002b4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d030      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d016      	beq.n	8002bac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b7e:	4b30      	ldr	r3, [pc, #192]	; (8002c40 <HAL_RCC_OscConfig+0x2b4>)
 8002b80:	2201      	movs	r2, #1
 8002b82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b84:	f7ff fc3c 	bl	8002400 <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b8c:	f7ff fc38 	bl	8002400 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e15b      	b.n	8002e56 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b9e:	4b26      	ldr	r3, [pc, #152]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d0f0      	beq.n	8002b8c <HAL_RCC_OscConfig+0x200>
 8002baa:	e015      	b.n	8002bd8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bac:	4b24      	ldr	r3, [pc, #144]	; (8002c40 <HAL_RCC_OscConfig+0x2b4>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb2:	f7ff fc25 	bl	8002400 <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bba:	f7ff fc21 	bl	8002400 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e144      	b.n	8002e56 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bcc:	4b1a      	ldr	r3, [pc, #104]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002bce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1f0      	bne.n	8002bba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 80a0 	beq.w	8002d26 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002be6:	2300      	movs	r3, #0
 8002be8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bea:	4b13      	ldr	r3, [pc, #76]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10f      	bne.n	8002c16 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	4b0f      	ldr	r3, [pc, #60]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	4a0e      	ldr	r2, [pc, #56]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c04:	6413      	str	r3, [r2, #64]	; 0x40
 8002c06:	4b0c      	ldr	r3, [pc, #48]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c0e:	60bb      	str	r3, [r7, #8]
 8002c10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c12:	2301      	movs	r3, #1
 8002c14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c16:	4b0b      	ldr	r3, [pc, #44]	; (8002c44 <HAL_RCC_OscConfig+0x2b8>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d121      	bne.n	8002c66 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c22:	4b08      	ldr	r3, [pc, #32]	; (8002c44 <HAL_RCC_OscConfig+0x2b8>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a07      	ldr	r2, [pc, #28]	; (8002c44 <HAL_RCC_OscConfig+0x2b8>)
 8002c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c2e:	f7ff fbe7 	bl	8002400 <HAL_GetTick>
 8002c32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c34:	e011      	b.n	8002c5a <HAL_RCC_OscConfig+0x2ce>
 8002c36:	bf00      	nop
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	42470000 	.word	0x42470000
 8002c40:	42470e80 	.word	0x42470e80
 8002c44:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c48:	f7ff fbda 	bl	8002400 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e0fd      	b.n	8002e56 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c5a:	4b81      	ldr	r3, [pc, #516]	; (8002e60 <HAL_RCC_OscConfig+0x4d4>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0f0      	beq.n	8002c48 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d106      	bne.n	8002c7c <HAL_RCC_OscConfig+0x2f0>
 8002c6e:	4b7d      	ldr	r3, [pc, #500]	; (8002e64 <HAL_RCC_OscConfig+0x4d8>)
 8002c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c72:	4a7c      	ldr	r2, [pc, #496]	; (8002e64 <HAL_RCC_OscConfig+0x4d8>)
 8002c74:	f043 0301 	orr.w	r3, r3, #1
 8002c78:	6713      	str	r3, [r2, #112]	; 0x70
 8002c7a:	e01c      	b.n	8002cb6 <HAL_RCC_OscConfig+0x32a>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	2b05      	cmp	r3, #5
 8002c82:	d10c      	bne.n	8002c9e <HAL_RCC_OscConfig+0x312>
 8002c84:	4b77      	ldr	r3, [pc, #476]	; (8002e64 <HAL_RCC_OscConfig+0x4d8>)
 8002c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c88:	4a76      	ldr	r2, [pc, #472]	; (8002e64 <HAL_RCC_OscConfig+0x4d8>)
 8002c8a:	f043 0304 	orr.w	r3, r3, #4
 8002c8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c90:	4b74      	ldr	r3, [pc, #464]	; (8002e64 <HAL_RCC_OscConfig+0x4d8>)
 8002c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c94:	4a73      	ldr	r2, [pc, #460]	; (8002e64 <HAL_RCC_OscConfig+0x4d8>)
 8002c96:	f043 0301 	orr.w	r3, r3, #1
 8002c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c9c:	e00b      	b.n	8002cb6 <HAL_RCC_OscConfig+0x32a>
 8002c9e:	4b71      	ldr	r3, [pc, #452]	; (8002e64 <HAL_RCC_OscConfig+0x4d8>)
 8002ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca2:	4a70      	ldr	r2, [pc, #448]	; (8002e64 <HAL_RCC_OscConfig+0x4d8>)
 8002ca4:	f023 0301 	bic.w	r3, r3, #1
 8002ca8:	6713      	str	r3, [r2, #112]	; 0x70
 8002caa:	4b6e      	ldr	r3, [pc, #440]	; (8002e64 <HAL_RCC_OscConfig+0x4d8>)
 8002cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cae:	4a6d      	ldr	r2, [pc, #436]	; (8002e64 <HAL_RCC_OscConfig+0x4d8>)
 8002cb0:	f023 0304 	bic.w	r3, r3, #4
 8002cb4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d015      	beq.n	8002cea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cbe:	f7ff fb9f 	bl	8002400 <HAL_GetTick>
 8002cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc4:	e00a      	b.n	8002cdc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cc6:	f7ff fb9b 	bl	8002400 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e0bc      	b.n	8002e56 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cdc:	4b61      	ldr	r3, [pc, #388]	; (8002e64 <HAL_RCC_OscConfig+0x4d8>)
 8002cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d0ee      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x33a>
 8002ce8:	e014      	b.n	8002d14 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cea:	f7ff fb89 	bl	8002400 <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cf0:	e00a      	b.n	8002d08 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cf2:	f7ff fb85 	bl	8002400 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e0a6      	b.n	8002e56 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d08:	4b56      	ldr	r3, [pc, #344]	; (8002e64 <HAL_RCC_OscConfig+0x4d8>)
 8002d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1ee      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d14:	7dfb      	ldrb	r3, [r7, #23]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d105      	bne.n	8002d26 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d1a:	4b52      	ldr	r3, [pc, #328]	; (8002e64 <HAL_RCC_OscConfig+0x4d8>)
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	4a51      	ldr	r2, [pc, #324]	; (8002e64 <HAL_RCC_OscConfig+0x4d8>)
 8002d20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d24:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 8092 	beq.w	8002e54 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d30:	4b4c      	ldr	r3, [pc, #304]	; (8002e64 <HAL_RCC_OscConfig+0x4d8>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f003 030c 	and.w	r3, r3, #12
 8002d38:	2b08      	cmp	r3, #8
 8002d3a:	d05c      	beq.n	8002df6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d141      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d44:	4b48      	ldr	r3, [pc, #288]	; (8002e68 <HAL_RCC_OscConfig+0x4dc>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d4a:	f7ff fb59 	bl	8002400 <HAL_GetTick>
 8002d4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d50:	e008      	b.n	8002d64 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d52:	f7ff fb55 	bl	8002400 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e078      	b.n	8002e56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d64:	4b3f      	ldr	r3, [pc, #252]	; (8002e64 <HAL_RCC_OscConfig+0x4d8>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1f0      	bne.n	8002d52 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	69da      	ldr	r2, [r3, #28]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	019b      	lsls	r3, r3, #6
 8002d80:	431a      	orrs	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d86:	085b      	lsrs	r3, r3, #1
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	041b      	lsls	r3, r3, #16
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d92:	061b      	lsls	r3, r3, #24
 8002d94:	4933      	ldr	r1, [pc, #204]	; (8002e64 <HAL_RCC_OscConfig+0x4d8>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d9a:	4b33      	ldr	r3, [pc, #204]	; (8002e68 <HAL_RCC_OscConfig+0x4dc>)
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da0:	f7ff fb2e 	bl	8002400 <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002da8:	f7ff fb2a 	bl	8002400 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e04d      	b.n	8002e56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dba:	4b2a      	ldr	r3, [pc, #168]	; (8002e64 <HAL_RCC_OscConfig+0x4d8>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0f0      	beq.n	8002da8 <HAL_RCC_OscConfig+0x41c>
 8002dc6:	e045      	b.n	8002e54 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc8:	4b27      	ldr	r3, [pc, #156]	; (8002e68 <HAL_RCC_OscConfig+0x4dc>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dce:	f7ff fb17 	bl	8002400 <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dd4:	e008      	b.n	8002de8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dd6:	f7ff fb13 	bl	8002400 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e036      	b.n	8002e56 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002de8:	4b1e      	ldr	r3, [pc, #120]	; (8002e64 <HAL_RCC_OscConfig+0x4d8>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1f0      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x44a>
 8002df4:	e02e      	b.n	8002e54 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d101      	bne.n	8002e02 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e029      	b.n	8002e56 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e02:	4b18      	ldr	r3, [pc, #96]	; (8002e64 <HAL_RCC_OscConfig+0x4d8>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d11c      	bne.n	8002e50 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d115      	bne.n	8002e50 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d10d      	bne.n	8002e50 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d106      	bne.n	8002e50 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d001      	beq.n	8002e54 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e000      	b.n	8002e56 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3718      	adds	r7, #24
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	40007000 	.word	0x40007000
 8002e64:	40023800 	.word	0x40023800
 8002e68:	42470060 	.word	0x42470060

08002e6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e0cc      	b.n	800301a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e80:	4b68      	ldr	r3, [pc, #416]	; (8003024 <HAL_RCC_ClockConfig+0x1b8>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 030f 	and.w	r3, r3, #15
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d90c      	bls.n	8002ea8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8e:	4b65      	ldr	r3, [pc, #404]	; (8003024 <HAL_RCC_ClockConfig+0x1b8>)
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	b2d2      	uxtb	r2, r2
 8002e94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e96:	4b63      	ldr	r3, [pc, #396]	; (8003024 <HAL_RCC_ClockConfig+0x1b8>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 030f 	and.w	r3, r3, #15
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d001      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e0b8      	b.n	800301a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d020      	beq.n	8002ef6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d005      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ec0:	4b59      	ldr	r3, [pc, #356]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	4a58      	ldr	r2, [pc, #352]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002eca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0308 	and.w	r3, r3, #8
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d005      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ed8:	4b53      	ldr	r3, [pc, #332]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	4a52      	ldr	r2, [pc, #328]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002ede:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ee2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ee4:	4b50      	ldr	r3, [pc, #320]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	494d      	ldr	r1, [pc, #308]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d044      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d107      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f0a:	4b47      	ldr	r3, [pc, #284]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d119      	bne.n	8002f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e07f      	b.n	800301a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d003      	beq.n	8002f2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f26:	2b03      	cmp	r3, #3
 8002f28:	d107      	bne.n	8002f3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f2a:	4b3f      	ldr	r3, [pc, #252]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d109      	bne.n	8002f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e06f      	b.n	800301a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f3a:	4b3b      	ldr	r3, [pc, #236]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e067      	b.n	800301a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f4a:	4b37      	ldr	r3, [pc, #220]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f023 0203 	bic.w	r2, r3, #3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	4934      	ldr	r1, [pc, #208]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f5c:	f7ff fa50 	bl	8002400 <HAL_GetTick>
 8002f60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f62:	e00a      	b.n	8002f7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f64:	f7ff fa4c 	bl	8002400 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e04f      	b.n	800301a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f7a:	4b2b      	ldr	r3, [pc, #172]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 020c 	and.w	r2, r3, #12
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d1eb      	bne.n	8002f64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f8c:	4b25      	ldr	r3, [pc, #148]	; (8003024 <HAL_RCC_ClockConfig+0x1b8>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 030f 	and.w	r3, r3, #15
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d20c      	bcs.n	8002fb4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f9a:	4b22      	ldr	r3, [pc, #136]	; (8003024 <HAL_RCC_ClockConfig+0x1b8>)
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa2:	4b20      	ldr	r3, [pc, #128]	; (8003024 <HAL_RCC_ClockConfig+0x1b8>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 030f 	and.w	r3, r3, #15
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d001      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e032      	b.n	800301a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d008      	beq.n	8002fd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fc0:	4b19      	ldr	r3, [pc, #100]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	4916      	ldr	r1, [pc, #88]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0308 	and.w	r3, r3, #8
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d009      	beq.n	8002ff2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fde:	4b12      	ldr	r3, [pc, #72]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	490e      	ldr	r1, [pc, #56]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ff2:	f000 f821 	bl	8003038 <HAL_RCC_GetSysClockFreq>
 8002ff6:	4601      	mov	r1, r0
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	091b      	lsrs	r3, r3, #4
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	4a0a      	ldr	r2, [pc, #40]	; (800302c <HAL_RCC_ClockConfig+0x1c0>)
 8003004:	5cd3      	ldrb	r3, [r2, r3]
 8003006:	fa21 f303 	lsr.w	r3, r1, r3
 800300a:	4a09      	ldr	r2, [pc, #36]	; (8003030 <HAL_RCC_ClockConfig+0x1c4>)
 800300c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800300e:	4b09      	ldr	r3, [pc, #36]	; (8003034 <HAL_RCC_ClockConfig+0x1c8>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f7fe ffd6 	bl	8001fc4 <HAL_InitTick>

  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40023c00 	.word	0x40023c00
 8003028:	40023800 	.word	0x40023800
 800302c:	08009220 	.word	0x08009220
 8003030:	20000000 	.word	0x20000000
 8003034:	20000004 	.word	0x20000004

08003038 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800303e:	2300      	movs	r3, #0
 8003040:	607b      	str	r3, [r7, #4]
 8003042:	2300      	movs	r3, #0
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	2300      	movs	r3, #0
 8003048:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800304a:	2300      	movs	r3, #0
 800304c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800304e:	4b63      	ldr	r3, [pc, #396]	; (80031dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 030c 	and.w	r3, r3, #12
 8003056:	2b04      	cmp	r3, #4
 8003058:	d007      	beq.n	800306a <HAL_RCC_GetSysClockFreq+0x32>
 800305a:	2b08      	cmp	r3, #8
 800305c:	d008      	beq.n	8003070 <HAL_RCC_GetSysClockFreq+0x38>
 800305e:	2b00      	cmp	r3, #0
 8003060:	f040 80b4 	bne.w	80031cc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003064:	4b5e      	ldr	r3, [pc, #376]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003066:	60bb      	str	r3, [r7, #8]
       break;
 8003068:	e0b3      	b.n	80031d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800306a:	4b5e      	ldr	r3, [pc, #376]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800306c:	60bb      	str	r3, [r7, #8]
      break;
 800306e:	e0b0      	b.n	80031d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003070:	4b5a      	ldr	r3, [pc, #360]	; (80031dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003078:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800307a:	4b58      	ldr	r3, [pc, #352]	; (80031dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d04a      	beq.n	800311c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003086:	4b55      	ldr	r3, [pc, #340]	; (80031dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	099b      	lsrs	r3, r3, #6
 800308c:	f04f 0400 	mov.w	r4, #0
 8003090:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003094:	f04f 0200 	mov.w	r2, #0
 8003098:	ea03 0501 	and.w	r5, r3, r1
 800309c:	ea04 0602 	and.w	r6, r4, r2
 80030a0:	4629      	mov	r1, r5
 80030a2:	4632      	mov	r2, r6
 80030a4:	f04f 0300 	mov.w	r3, #0
 80030a8:	f04f 0400 	mov.w	r4, #0
 80030ac:	0154      	lsls	r4, r2, #5
 80030ae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80030b2:	014b      	lsls	r3, r1, #5
 80030b4:	4619      	mov	r1, r3
 80030b6:	4622      	mov	r2, r4
 80030b8:	1b49      	subs	r1, r1, r5
 80030ba:	eb62 0206 	sbc.w	r2, r2, r6
 80030be:	f04f 0300 	mov.w	r3, #0
 80030c2:	f04f 0400 	mov.w	r4, #0
 80030c6:	0194      	lsls	r4, r2, #6
 80030c8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80030cc:	018b      	lsls	r3, r1, #6
 80030ce:	1a5b      	subs	r3, r3, r1
 80030d0:	eb64 0402 	sbc.w	r4, r4, r2
 80030d4:	f04f 0100 	mov.w	r1, #0
 80030d8:	f04f 0200 	mov.w	r2, #0
 80030dc:	00e2      	lsls	r2, r4, #3
 80030de:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80030e2:	00d9      	lsls	r1, r3, #3
 80030e4:	460b      	mov	r3, r1
 80030e6:	4614      	mov	r4, r2
 80030e8:	195b      	adds	r3, r3, r5
 80030ea:	eb44 0406 	adc.w	r4, r4, r6
 80030ee:	f04f 0100 	mov.w	r1, #0
 80030f2:	f04f 0200 	mov.w	r2, #0
 80030f6:	0262      	lsls	r2, r4, #9
 80030f8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80030fc:	0259      	lsls	r1, r3, #9
 80030fe:	460b      	mov	r3, r1
 8003100:	4614      	mov	r4, r2
 8003102:	4618      	mov	r0, r3
 8003104:	4621      	mov	r1, r4
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f04f 0400 	mov.w	r4, #0
 800310c:	461a      	mov	r2, r3
 800310e:	4623      	mov	r3, r4
 8003110:	f7fd fd5c 	bl	8000bcc <__aeabi_uldivmod>
 8003114:	4603      	mov	r3, r0
 8003116:	460c      	mov	r4, r1
 8003118:	60fb      	str	r3, [r7, #12]
 800311a:	e049      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800311c:	4b2f      	ldr	r3, [pc, #188]	; (80031dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	099b      	lsrs	r3, r3, #6
 8003122:	f04f 0400 	mov.w	r4, #0
 8003126:	f240 11ff 	movw	r1, #511	; 0x1ff
 800312a:	f04f 0200 	mov.w	r2, #0
 800312e:	ea03 0501 	and.w	r5, r3, r1
 8003132:	ea04 0602 	and.w	r6, r4, r2
 8003136:	4629      	mov	r1, r5
 8003138:	4632      	mov	r2, r6
 800313a:	f04f 0300 	mov.w	r3, #0
 800313e:	f04f 0400 	mov.w	r4, #0
 8003142:	0154      	lsls	r4, r2, #5
 8003144:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003148:	014b      	lsls	r3, r1, #5
 800314a:	4619      	mov	r1, r3
 800314c:	4622      	mov	r2, r4
 800314e:	1b49      	subs	r1, r1, r5
 8003150:	eb62 0206 	sbc.w	r2, r2, r6
 8003154:	f04f 0300 	mov.w	r3, #0
 8003158:	f04f 0400 	mov.w	r4, #0
 800315c:	0194      	lsls	r4, r2, #6
 800315e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003162:	018b      	lsls	r3, r1, #6
 8003164:	1a5b      	subs	r3, r3, r1
 8003166:	eb64 0402 	sbc.w	r4, r4, r2
 800316a:	f04f 0100 	mov.w	r1, #0
 800316e:	f04f 0200 	mov.w	r2, #0
 8003172:	00e2      	lsls	r2, r4, #3
 8003174:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003178:	00d9      	lsls	r1, r3, #3
 800317a:	460b      	mov	r3, r1
 800317c:	4614      	mov	r4, r2
 800317e:	195b      	adds	r3, r3, r5
 8003180:	eb44 0406 	adc.w	r4, r4, r6
 8003184:	f04f 0100 	mov.w	r1, #0
 8003188:	f04f 0200 	mov.w	r2, #0
 800318c:	02a2      	lsls	r2, r4, #10
 800318e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003192:	0299      	lsls	r1, r3, #10
 8003194:	460b      	mov	r3, r1
 8003196:	4614      	mov	r4, r2
 8003198:	4618      	mov	r0, r3
 800319a:	4621      	mov	r1, r4
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f04f 0400 	mov.w	r4, #0
 80031a2:	461a      	mov	r2, r3
 80031a4:	4623      	mov	r3, r4
 80031a6:	f7fd fd11 	bl	8000bcc <__aeabi_uldivmod>
 80031aa:	4603      	mov	r3, r0
 80031ac:	460c      	mov	r4, r1
 80031ae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031b0:	4b0a      	ldr	r3, [pc, #40]	; (80031dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	0c1b      	lsrs	r3, r3, #16
 80031b6:	f003 0303 	and.w	r3, r3, #3
 80031ba:	3301      	adds	r3, #1
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c8:	60bb      	str	r3, [r7, #8]
      break;
 80031ca:	e002      	b.n	80031d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031cc:	4b04      	ldr	r3, [pc, #16]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80031ce:	60bb      	str	r3, [r7, #8]
      break;
 80031d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031d2:	68bb      	ldr	r3, [r7, #8]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031dc:	40023800 	.word	0x40023800
 80031e0:	00f42400 	.word	0x00f42400
 80031e4:	007a1200 	.word	0x007a1200

080031e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031ec:	4b03      	ldr	r3, [pc, #12]	; (80031fc <HAL_RCC_GetHCLKFreq+0x14>)
 80031ee:	681b      	ldr	r3, [r3, #0]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	20000000 	.word	0x20000000

08003200 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003204:	f7ff fff0 	bl	80031e8 <HAL_RCC_GetHCLKFreq>
 8003208:	4601      	mov	r1, r0
 800320a:	4b05      	ldr	r3, [pc, #20]	; (8003220 <HAL_RCC_GetPCLK1Freq+0x20>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	0a9b      	lsrs	r3, r3, #10
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	4a03      	ldr	r2, [pc, #12]	; (8003224 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003216:	5cd3      	ldrb	r3, [r2, r3]
 8003218:	fa21 f303 	lsr.w	r3, r1, r3
}
 800321c:	4618      	mov	r0, r3
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40023800 	.word	0x40023800
 8003224:	08009230 	.word	0x08009230

08003228 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800322c:	f7ff ffdc 	bl	80031e8 <HAL_RCC_GetHCLKFreq>
 8003230:	4601      	mov	r1, r0
 8003232:	4b05      	ldr	r3, [pc, #20]	; (8003248 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	0b5b      	lsrs	r3, r3, #13
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	4a03      	ldr	r2, [pc, #12]	; (800324c <HAL_RCC_GetPCLK2Freq+0x24>)
 800323e:	5cd3      	ldrb	r3, [r2, r3]
 8003240:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003244:	4618      	mov	r0, r3
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40023800 	.word	0x40023800
 800324c:	08009230 	.word	0x08009230

08003250 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	220f      	movs	r2, #15
 800325e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003260:	4b12      	ldr	r3, [pc, #72]	; (80032ac <HAL_RCC_GetClockConfig+0x5c>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f003 0203 	and.w	r2, r3, #3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800326c:	4b0f      	ldr	r3, [pc, #60]	; (80032ac <HAL_RCC_GetClockConfig+0x5c>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003278:	4b0c      	ldr	r3, [pc, #48]	; (80032ac <HAL_RCC_GetClockConfig+0x5c>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003284:	4b09      	ldr	r3, [pc, #36]	; (80032ac <HAL_RCC_GetClockConfig+0x5c>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	08db      	lsrs	r3, r3, #3
 800328a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003292:	4b07      	ldr	r3, [pc, #28]	; (80032b0 <HAL_RCC_GetClockConfig+0x60>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 020f 	and.w	r2, r3, #15
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	601a      	str	r2, [r3, #0]
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	40023800 	.word	0x40023800
 80032b0:	40023c00 	.word	0x40023c00

080032b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e01d      	b.n	8003302 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d106      	bne.n	80032e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f815 	bl	800330a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2202      	movs	r2, #2
 80032e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	3304      	adds	r3, #4
 80032f0:	4619      	mov	r1, r3
 80032f2:	4610      	mov	r0, r2
 80032f4:	f000 f968 	bl	80035c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003312:	bf00      	nop
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800331e:	b480      	push	{r7}
 8003320:	b085      	sub	sp, #20
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f042 0201 	orr.w	r2, r2, #1
 8003334:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2b06      	cmp	r3, #6
 8003346:	d007      	beq.n	8003358 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f042 0201 	orr.w	r2, r2, #1
 8003356:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3714      	adds	r7, #20
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b082      	sub	sp, #8
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b02      	cmp	r3, #2
 800337a:	d122      	bne.n	80033c2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b02      	cmp	r3, #2
 8003388:	d11b      	bne.n	80033c2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f06f 0202 	mvn.w	r2, #2
 8003392:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	f003 0303 	and.w	r3, r3, #3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d003      	beq.n	80033b0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 f8ee 	bl	800358a <HAL_TIM_IC_CaptureCallback>
 80033ae:	e005      	b.n	80033bc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 f8e0 	bl	8003576 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f8f1 	bl	800359e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	2b04      	cmp	r3, #4
 80033ce:	d122      	bne.n	8003416 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	f003 0304 	and.w	r3, r3, #4
 80033da:	2b04      	cmp	r3, #4
 80033dc:	d11b      	bne.n	8003416 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f06f 0204 	mvn.w	r2, #4
 80033e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2202      	movs	r2, #2
 80033ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d003      	beq.n	8003404 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 f8c4 	bl	800358a <HAL_TIM_IC_CaptureCallback>
 8003402:	e005      	b.n	8003410 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 f8b6 	bl	8003576 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f8c7 	bl	800359e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	f003 0308 	and.w	r3, r3, #8
 8003420:	2b08      	cmp	r3, #8
 8003422:	d122      	bne.n	800346a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	f003 0308 	and.w	r3, r3, #8
 800342e:	2b08      	cmp	r3, #8
 8003430:	d11b      	bne.n	800346a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f06f 0208 	mvn.w	r2, #8
 800343a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2204      	movs	r2, #4
 8003440:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	69db      	ldr	r3, [r3, #28]
 8003448:	f003 0303 	and.w	r3, r3, #3
 800344c:	2b00      	cmp	r3, #0
 800344e:	d003      	beq.n	8003458 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f89a 	bl	800358a <HAL_TIM_IC_CaptureCallback>
 8003456:	e005      	b.n	8003464 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 f88c 	bl	8003576 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f89d 	bl	800359e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	f003 0310 	and.w	r3, r3, #16
 8003474:	2b10      	cmp	r3, #16
 8003476:	d122      	bne.n	80034be <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	f003 0310 	and.w	r3, r3, #16
 8003482:	2b10      	cmp	r3, #16
 8003484:	d11b      	bne.n	80034be <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f06f 0210 	mvn.w	r2, #16
 800348e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2208      	movs	r2, #8
 8003494:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	69db      	ldr	r3, [r3, #28]
 800349c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 f870 	bl	800358a <HAL_TIM_IC_CaptureCallback>
 80034aa:	e005      	b.n	80034b8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 f862 	bl	8003576 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f873 	bl	800359e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d10e      	bne.n	80034ea <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d107      	bne.n	80034ea <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f06f 0201 	mvn.w	r2, #1
 80034e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7fe fcf9 	bl	8001edc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f4:	2b80      	cmp	r3, #128	; 0x80
 80034f6:	d10e      	bne.n	8003516 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003502:	2b80      	cmp	r3, #128	; 0x80
 8003504:	d107      	bne.n	8003516 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800350e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 f8e3 	bl	80036dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003520:	2b40      	cmp	r3, #64	; 0x40
 8003522:	d10e      	bne.n	8003542 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352e:	2b40      	cmp	r3, #64	; 0x40
 8003530:	d107      	bne.n	8003542 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800353a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 f838 	bl	80035b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	f003 0320 	and.w	r3, r3, #32
 800354c:	2b20      	cmp	r3, #32
 800354e:	d10e      	bne.n	800356e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	f003 0320 	and.w	r3, r3, #32
 800355a:	2b20      	cmp	r3, #32
 800355c:	d107      	bne.n	800356e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f06f 0220 	mvn.w	r2, #32
 8003566:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 f8ad 	bl	80036c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800356e:	bf00      	nop
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003576:	b480      	push	{r7}
 8003578:	b083      	sub	sp, #12
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800357e:	bf00      	nop
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800358a:	b480      	push	{r7}
 800358c:	b083      	sub	sp, #12
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003592:	bf00      	nop
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800359e:	b480      	push	{r7}
 80035a0:	b083      	sub	sp, #12
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035a6:	bf00      	nop
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035b2:	b480      	push	{r7}
 80035b4:	b083      	sub	sp, #12
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035ba:	bf00      	nop
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
	...

080035c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a34      	ldr	r2, [pc, #208]	; (80036ac <TIM_Base_SetConfig+0xe4>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d00f      	beq.n	8003600 <TIM_Base_SetConfig+0x38>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e6:	d00b      	beq.n	8003600 <TIM_Base_SetConfig+0x38>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a31      	ldr	r2, [pc, #196]	; (80036b0 <TIM_Base_SetConfig+0xe8>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d007      	beq.n	8003600 <TIM_Base_SetConfig+0x38>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a30      	ldr	r2, [pc, #192]	; (80036b4 <TIM_Base_SetConfig+0xec>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d003      	beq.n	8003600 <TIM_Base_SetConfig+0x38>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a2f      	ldr	r2, [pc, #188]	; (80036b8 <TIM_Base_SetConfig+0xf0>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d108      	bne.n	8003612 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003606:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	4313      	orrs	r3, r2
 8003610:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a25      	ldr	r2, [pc, #148]	; (80036ac <TIM_Base_SetConfig+0xe4>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d01b      	beq.n	8003652 <TIM_Base_SetConfig+0x8a>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003620:	d017      	beq.n	8003652 <TIM_Base_SetConfig+0x8a>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a22      	ldr	r2, [pc, #136]	; (80036b0 <TIM_Base_SetConfig+0xe8>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d013      	beq.n	8003652 <TIM_Base_SetConfig+0x8a>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a21      	ldr	r2, [pc, #132]	; (80036b4 <TIM_Base_SetConfig+0xec>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d00f      	beq.n	8003652 <TIM_Base_SetConfig+0x8a>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a20      	ldr	r2, [pc, #128]	; (80036b8 <TIM_Base_SetConfig+0xf0>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d00b      	beq.n	8003652 <TIM_Base_SetConfig+0x8a>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a1f      	ldr	r2, [pc, #124]	; (80036bc <TIM_Base_SetConfig+0xf4>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d007      	beq.n	8003652 <TIM_Base_SetConfig+0x8a>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a1e      	ldr	r2, [pc, #120]	; (80036c0 <TIM_Base_SetConfig+0xf8>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d003      	beq.n	8003652 <TIM_Base_SetConfig+0x8a>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a1d      	ldr	r2, [pc, #116]	; (80036c4 <TIM_Base_SetConfig+0xfc>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d108      	bne.n	8003664 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003658:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	4313      	orrs	r3, r2
 8003662:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	4313      	orrs	r3, r2
 8003670:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a08      	ldr	r2, [pc, #32]	; (80036ac <TIM_Base_SetConfig+0xe4>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d103      	bne.n	8003698 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	691a      	ldr	r2, [r3, #16]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	615a      	str	r2, [r3, #20]
}
 800369e:	bf00      	nop
 80036a0:	3714      	adds	r7, #20
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	40010000 	.word	0x40010000
 80036b0:	40000400 	.word	0x40000400
 80036b4:	40000800 	.word	0x40000800
 80036b8:	40000c00 	.word	0x40000c00
 80036bc:	40014000 	.word	0x40014000
 80036c0:	40014400 	.word	0x40014400
 80036c4:	40014800 	.word	0x40014800

080036c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e03f      	b.n	8003782 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d106      	bne.n	800371c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7fe fd8e 	bl	8002238 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2224      	movs	r2, #36	; 0x24
 8003720:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68da      	ldr	r2, [r3, #12]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003732:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 fba1 	bl	8003e7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	691a      	ldr	r2, [r3, #16]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003748:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	695a      	ldr	r2, [r3, #20]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003758:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68da      	ldr	r2, [r3, #12]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003768:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2220      	movs	r2, #32
 8003774:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b088      	sub	sp, #32
 800378e:	af02      	add	r7, sp, #8
 8003790:	60f8      	str	r0, [r7, #12]
 8003792:	60b9      	str	r1, [r7, #8]
 8003794:	603b      	str	r3, [r7, #0]
 8003796:	4613      	mov	r3, r2
 8003798:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800379a:	2300      	movs	r3, #0
 800379c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b20      	cmp	r3, #32
 80037a8:	f040 8083 	bne.w	80038b2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d002      	beq.n	80037b8 <HAL_UART_Transmit+0x2e>
 80037b2:	88fb      	ldrh	r3, [r7, #6]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e07b      	b.n	80038b4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d101      	bne.n	80037ca <HAL_UART_Transmit+0x40>
 80037c6:	2302      	movs	r3, #2
 80037c8:	e074      	b.n	80038b4 <HAL_UART_Transmit+0x12a>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2221      	movs	r2, #33	; 0x21
 80037dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80037e0:	f7fe fe0e 	bl	8002400 <HAL_GetTick>
 80037e4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	88fa      	ldrh	r2, [r7, #6]
 80037ea:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	88fa      	ldrh	r2, [r7, #6]
 80037f0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80037fa:	e042      	b.n	8003882 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003800:	b29b      	uxth	r3, r3
 8003802:	3b01      	subs	r3, #1
 8003804:	b29a      	uxth	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003812:	d122      	bne.n	800385a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	2200      	movs	r2, #0
 800381c:	2180      	movs	r1, #128	; 0x80
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 f9c0 	bl	8003ba4 <UART_WaitOnFlagUntilTimeout>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e042      	b.n	80038b4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	881b      	ldrh	r3, [r3, #0]
 8003836:	461a      	mov	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003840:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d103      	bne.n	8003852 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	3302      	adds	r3, #2
 800384e:	60bb      	str	r3, [r7, #8]
 8003850:	e017      	b.n	8003882 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	3301      	adds	r3, #1
 8003856:	60bb      	str	r3, [r7, #8]
 8003858:	e013      	b.n	8003882 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	2200      	movs	r2, #0
 8003862:	2180      	movs	r1, #128	; 0x80
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 f99d 	bl	8003ba4 <UART_WaitOnFlagUntilTimeout>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e01f      	b.n	80038b4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	1c5a      	adds	r2, r3, #1
 8003878:	60ba      	str	r2, [r7, #8]
 800387a:	781a      	ldrb	r2, [r3, #0]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003886:	b29b      	uxth	r3, r3
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1b7      	bne.n	80037fc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	2200      	movs	r2, #0
 8003894:	2140      	movs	r1, #64	; 0x40
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 f984 	bl	8003ba4 <UART_WaitOnFlagUntilTimeout>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e006      	b.n	80038b4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2220      	movs	r2, #32
 80038aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80038ae:	2300      	movs	r3, #0
 80038b0:	e000      	b.n	80038b4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80038b2:	2302      	movs	r3, #2
  }
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3718      	adds	r7, #24
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	4613      	mov	r3, r2
 80038c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b20      	cmp	r3, #32
 80038d4:	d140      	bne.n	8003958 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d002      	beq.n	80038e2 <HAL_UART_Receive_IT+0x26>
 80038dc:	88fb      	ldrh	r3, [r7, #6]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e039      	b.n	800395a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d101      	bne.n	80038f4 <HAL_UART_Receive_IT+0x38>
 80038f0:	2302      	movs	r3, #2
 80038f2:	e032      	b.n	800395a <HAL_UART_Receive_IT+0x9e>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	88fa      	ldrh	r2, [r7, #6]
 8003906:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	88fa      	ldrh	r2, [r7, #6]
 800390c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2222      	movs	r2, #34	; 0x22
 8003918:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68da      	ldr	r2, [r3, #12]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003932:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	695a      	ldr	r2, [r3, #20]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0201 	orr.w	r2, r2, #1
 8003942:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68da      	ldr	r2, [r3, #12]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f042 0220 	orr.w	r2, r2, #32
 8003952:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003954:	2300      	movs	r3, #0
 8003956:	e000      	b.n	800395a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003958:	2302      	movs	r3, #2
  }
}
 800395a:	4618      	mov	r0, r3
 800395c:	3714      	adds	r7, #20
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
	...

08003968 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b088      	sub	sp, #32
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003988:	2300      	movs	r3, #0
 800398a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800398c:	2300      	movs	r3, #0
 800398e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	f003 030f 	and.w	r3, r3, #15
 8003996:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10d      	bne.n	80039ba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	f003 0320 	and.w	r3, r3, #32
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d008      	beq.n	80039ba <HAL_UART_IRQHandler+0x52>
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	f003 0320 	and.w	r3, r3, #32
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d003      	beq.n	80039ba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f9e0 	bl	8003d78 <UART_Receive_IT>
      return;
 80039b8:	e0d1      	b.n	8003b5e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f000 80b0 	beq.w	8003b22 <HAL_UART_IRQHandler+0x1ba>
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d105      	bne.n	80039d8 <HAL_UART_IRQHandler+0x70>
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f000 80a5 	beq.w	8003b22 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00a      	beq.n	80039f8 <HAL_UART_IRQHandler+0x90>
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d005      	beq.n	80039f8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f0:	f043 0201 	orr.w	r2, r3, #1
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	f003 0304 	and.w	r3, r3, #4
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00a      	beq.n	8003a18 <HAL_UART_IRQHandler+0xb0>
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d005      	beq.n	8003a18 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a10:	f043 0202 	orr.w	r2, r3, #2
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00a      	beq.n	8003a38 <HAL_UART_IRQHandler+0xd0>
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d005      	beq.n	8003a38 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a30:	f043 0204 	orr.w	r2, r3, #4
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	f003 0308 	and.w	r3, r3, #8
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00f      	beq.n	8003a62 <HAL_UART_IRQHandler+0xfa>
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	f003 0320 	and.w	r3, r3, #32
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d104      	bne.n	8003a56 <HAL_UART_IRQHandler+0xee>
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d005      	beq.n	8003a62 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a5a:	f043 0208 	orr.w	r2, r3, #8
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d078      	beq.n	8003b5c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	f003 0320 	and.w	r3, r3, #32
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d007      	beq.n	8003a84 <HAL_UART_IRQHandler+0x11c>
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	f003 0320 	and.w	r3, r3, #32
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d002      	beq.n	8003a84 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f97a 	bl	8003d78 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a8e:	2b40      	cmp	r3, #64	; 0x40
 8003a90:	bf0c      	ite	eq
 8003a92:	2301      	moveq	r3, #1
 8003a94:	2300      	movne	r3, #0
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a9e:	f003 0308 	and.w	r3, r3, #8
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d102      	bne.n	8003aac <HAL_UART_IRQHandler+0x144>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d031      	beq.n	8003b10 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 f8c3 	bl	8003c38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003abc:	2b40      	cmp	r3, #64	; 0x40
 8003abe:	d123      	bne.n	8003b08 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695a      	ldr	r2, [r3, #20]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ace:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d013      	beq.n	8003b00 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003adc:	4a21      	ldr	r2, [pc, #132]	; (8003b64 <HAL_UART_IRQHandler+0x1fc>)
 8003ade:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7fe fd79 	bl	80025dc <HAL_DMA_Abort_IT>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d016      	beq.n	8003b1e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003afa:	4610      	mov	r0, r2
 8003afc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003afe:	e00e      	b.n	8003b1e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 f845 	bl	8003b90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b06:	e00a      	b.n	8003b1e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 f841 	bl	8003b90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b0e:	e006      	b.n	8003b1e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f83d 	bl	8003b90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003b1c:	e01e      	b.n	8003b5c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b1e:	bf00      	nop
    return;
 8003b20:	e01c      	b.n	8003b5c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d008      	beq.n	8003b3e <HAL_UART_IRQHandler+0x1d6>
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d003      	beq.n	8003b3e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f8b0 	bl	8003c9c <UART_Transmit_IT>
    return;
 8003b3c:	e00f      	b.n	8003b5e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00a      	beq.n	8003b5e <HAL_UART_IRQHandler+0x1f6>
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d005      	beq.n	8003b5e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f8f8 	bl	8003d48 <UART_EndTransmit_IT>
    return;
 8003b58:	bf00      	nop
 8003b5a:	e000      	b.n	8003b5e <HAL_UART_IRQHandler+0x1f6>
    return;
 8003b5c:	bf00      	nop
  }
}
 8003b5e:	3720      	adds	r7, #32
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	08003c75 	.word	0x08003c75

08003b68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	603b      	str	r3, [r7, #0]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bb4:	e02c      	b.n	8003c10 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bbc:	d028      	beq.n	8003c10 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d007      	beq.n	8003bd4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003bc4:	f7fe fc1c 	bl	8002400 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d21d      	bcs.n	8003c10 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68da      	ldr	r2, [r3, #12]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003be2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	695a      	ldr	r2, [r3, #20]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f022 0201 	bic.w	r2, r2, #1
 8003bf2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e00f      	b.n	8003c30 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	bf0c      	ite	eq
 8003c20:	2301      	moveq	r3, #1
 8003c22:	2300      	movne	r3, #0
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	461a      	mov	r2, r3
 8003c28:	79fb      	ldrb	r3, [r7, #7]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d0c3      	beq.n	8003bb6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68da      	ldr	r2, [r3, #12]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c4e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	695a      	ldr	r2, [r3, #20]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 0201 	bic.w	r2, r2, #1
 8003c5e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2220      	movs	r2, #32
 8003c64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f7ff ff7e 	bl	8003b90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c94:	bf00      	nop
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b21      	cmp	r3, #33	; 0x21
 8003cae:	d144      	bne.n	8003d3a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb8:	d11a      	bne.n	8003cf0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	881b      	ldrh	r3, [r3, #0]
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cce:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d105      	bne.n	8003ce4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	1c9a      	adds	r2, r3, #2
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	621a      	str	r2, [r3, #32]
 8003ce2:	e00e      	b.n	8003d02 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	1c5a      	adds	r2, r3, #1
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	621a      	str	r2, [r3, #32]
 8003cee:	e008      	b.n	8003d02 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	1c59      	adds	r1, r3, #1
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	6211      	str	r1, [r2, #32]
 8003cfa:	781a      	ldrb	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	4619      	mov	r1, r3
 8003d10:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10f      	bne.n	8003d36 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68da      	ldr	r2, [r3, #12]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d24:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68da      	ldr	r2, [r3, #12]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d34:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d36:	2300      	movs	r3, #0
 8003d38:	e000      	b.n	8003d3c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003d3a:	2302      	movs	r3, #2
  }
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3714      	adds	r7, #20
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d5e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2220      	movs	r2, #32
 8003d64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f7ff fefd 	bl	8003b68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3708      	adds	r7, #8
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b22      	cmp	r3, #34	; 0x22
 8003d8a:	d171      	bne.n	8003e70 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d94:	d123      	bne.n	8003dde <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10e      	bne.n	8003dc2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dba:	1c9a      	adds	r2, r3, #2
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	629a      	str	r2, [r3, #40]	; 0x28
 8003dc0:	e029      	b.n	8003e16 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	b29a      	uxth	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd6:	1c5a      	adds	r2, r3, #1
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	629a      	str	r2, [r3, #40]	; 0x28
 8003ddc:	e01b      	b.n	8003e16 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10a      	bne.n	8003dfc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	6858      	ldr	r0, [r3, #4]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df0:	1c59      	adds	r1, r3, #1
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6291      	str	r1, [r2, #40]	; 0x28
 8003df6:	b2c2      	uxtb	r2, r0
 8003df8:	701a      	strb	r2, [r3, #0]
 8003dfa:	e00c      	b.n	8003e16 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	b2da      	uxtb	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e08:	1c58      	adds	r0, r3, #1
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	6288      	str	r0, [r1, #40]	; 0x28
 8003e0e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e12:	b2d2      	uxtb	r2, r2
 8003e14:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	4619      	mov	r1, r3
 8003e24:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d120      	bne.n	8003e6c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68da      	ldr	r2, [r3, #12]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 0220 	bic.w	r2, r2, #32
 8003e38:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68da      	ldr	r2, [r3, #12]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e48:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	695a      	ldr	r2, [r3, #20]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 0201 	bic.w	r2, r2, #1
 8003e58:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7ff fe8a 	bl	8003b7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	e002      	b.n	8003e72 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	e000      	b.n	8003e72 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003e70:	2302      	movs	r3, #2
  }
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
	...

08003e7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e80:	b085      	sub	sp, #20
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68da      	ldr	r2, [r3, #12]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689a      	ldr	r2, [r3, #8]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	69db      	ldr	r3, [r3, #28]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003ebe:	f023 030c 	bic.w	r3, r3, #12
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	6812      	ldr	r2, [r2, #0]
 8003ec6:	68f9      	ldr	r1, [r7, #12]
 8003ec8:	430b      	orrs	r3, r1
 8003eca:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	699a      	ldr	r2, [r3, #24]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	69db      	ldr	r3, [r3, #28]
 8003ee6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eea:	f040 818b 	bne.w	8004204 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4ac1      	ldr	r2, [pc, #772]	; (80041f8 <UART_SetConfig+0x37c>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d005      	beq.n	8003f04 <UART_SetConfig+0x88>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4abf      	ldr	r2, [pc, #764]	; (80041fc <UART_SetConfig+0x380>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	f040 80bd 	bne.w	800407e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f04:	f7ff f990 	bl	8003228 <HAL_RCC_GetPCLK2Freq>
 8003f08:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	461d      	mov	r5, r3
 8003f0e:	f04f 0600 	mov.w	r6, #0
 8003f12:	46a8      	mov	r8, r5
 8003f14:	46b1      	mov	r9, r6
 8003f16:	eb18 0308 	adds.w	r3, r8, r8
 8003f1a:	eb49 0409 	adc.w	r4, r9, r9
 8003f1e:	4698      	mov	r8, r3
 8003f20:	46a1      	mov	r9, r4
 8003f22:	eb18 0805 	adds.w	r8, r8, r5
 8003f26:	eb49 0906 	adc.w	r9, r9, r6
 8003f2a:	f04f 0100 	mov.w	r1, #0
 8003f2e:	f04f 0200 	mov.w	r2, #0
 8003f32:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f36:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f3a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f3e:	4688      	mov	r8, r1
 8003f40:	4691      	mov	r9, r2
 8003f42:	eb18 0005 	adds.w	r0, r8, r5
 8003f46:	eb49 0106 	adc.w	r1, r9, r6
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	461d      	mov	r5, r3
 8003f50:	f04f 0600 	mov.w	r6, #0
 8003f54:	196b      	adds	r3, r5, r5
 8003f56:	eb46 0406 	adc.w	r4, r6, r6
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	4623      	mov	r3, r4
 8003f5e:	f7fc fe35 	bl	8000bcc <__aeabi_uldivmod>
 8003f62:	4603      	mov	r3, r0
 8003f64:	460c      	mov	r4, r1
 8003f66:	461a      	mov	r2, r3
 8003f68:	4ba5      	ldr	r3, [pc, #660]	; (8004200 <UART_SetConfig+0x384>)
 8003f6a:	fba3 2302 	umull	r2, r3, r3, r2
 8003f6e:	095b      	lsrs	r3, r3, #5
 8003f70:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	461d      	mov	r5, r3
 8003f78:	f04f 0600 	mov.w	r6, #0
 8003f7c:	46a9      	mov	r9, r5
 8003f7e:	46b2      	mov	sl, r6
 8003f80:	eb19 0309 	adds.w	r3, r9, r9
 8003f84:	eb4a 040a 	adc.w	r4, sl, sl
 8003f88:	4699      	mov	r9, r3
 8003f8a:	46a2      	mov	sl, r4
 8003f8c:	eb19 0905 	adds.w	r9, r9, r5
 8003f90:	eb4a 0a06 	adc.w	sl, sl, r6
 8003f94:	f04f 0100 	mov.w	r1, #0
 8003f98:	f04f 0200 	mov.w	r2, #0
 8003f9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fa0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fa4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fa8:	4689      	mov	r9, r1
 8003faa:	4692      	mov	sl, r2
 8003fac:	eb19 0005 	adds.w	r0, r9, r5
 8003fb0:	eb4a 0106 	adc.w	r1, sl, r6
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	461d      	mov	r5, r3
 8003fba:	f04f 0600 	mov.w	r6, #0
 8003fbe:	196b      	adds	r3, r5, r5
 8003fc0:	eb46 0406 	adc.w	r4, r6, r6
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	4623      	mov	r3, r4
 8003fc8:	f7fc fe00 	bl	8000bcc <__aeabi_uldivmod>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	460c      	mov	r4, r1
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	4b8b      	ldr	r3, [pc, #556]	; (8004200 <UART_SetConfig+0x384>)
 8003fd4:	fba3 1302 	umull	r1, r3, r3, r2
 8003fd8:	095b      	lsrs	r3, r3, #5
 8003fda:	2164      	movs	r1, #100	; 0x64
 8003fdc:	fb01 f303 	mul.w	r3, r1, r3
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	3332      	adds	r3, #50	; 0x32
 8003fe6:	4a86      	ldr	r2, [pc, #536]	; (8004200 <UART_SetConfig+0x384>)
 8003fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fec:	095b      	lsrs	r3, r3, #5
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ff4:	4498      	add	r8, r3
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	461d      	mov	r5, r3
 8003ffa:	f04f 0600 	mov.w	r6, #0
 8003ffe:	46a9      	mov	r9, r5
 8004000:	46b2      	mov	sl, r6
 8004002:	eb19 0309 	adds.w	r3, r9, r9
 8004006:	eb4a 040a 	adc.w	r4, sl, sl
 800400a:	4699      	mov	r9, r3
 800400c:	46a2      	mov	sl, r4
 800400e:	eb19 0905 	adds.w	r9, r9, r5
 8004012:	eb4a 0a06 	adc.w	sl, sl, r6
 8004016:	f04f 0100 	mov.w	r1, #0
 800401a:	f04f 0200 	mov.w	r2, #0
 800401e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004022:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004026:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800402a:	4689      	mov	r9, r1
 800402c:	4692      	mov	sl, r2
 800402e:	eb19 0005 	adds.w	r0, r9, r5
 8004032:	eb4a 0106 	adc.w	r1, sl, r6
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	461d      	mov	r5, r3
 800403c:	f04f 0600 	mov.w	r6, #0
 8004040:	196b      	adds	r3, r5, r5
 8004042:	eb46 0406 	adc.w	r4, r6, r6
 8004046:	461a      	mov	r2, r3
 8004048:	4623      	mov	r3, r4
 800404a:	f7fc fdbf 	bl	8000bcc <__aeabi_uldivmod>
 800404e:	4603      	mov	r3, r0
 8004050:	460c      	mov	r4, r1
 8004052:	461a      	mov	r2, r3
 8004054:	4b6a      	ldr	r3, [pc, #424]	; (8004200 <UART_SetConfig+0x384>)
 8004056:	fba3 1302 	umull	r1, r3, r3, r2
 800405a:	095b      	lsrs	r3, r3, #5
 800405c:	2164      	movs	r1, #100	; 0x64
 800405e:	fb01 f303 	mul.w	r3, r1, r3
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	3332      	adds	r3, #50	; 0x32
 8004068:	4a65      	ldr	r2, [pc, #404]	; (8004200 <UART_SetConfig+0x384>)
 800406a:	fba2 2303 	umull	r2, r3, r2, r3
 800406e:	095b      	lsrs	r3, r3, #5
 8004070:	f003 0207 	and.w	r2, r3, #7
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4442      	add	r2, r8
 800407a:	609a      	str	r2, [r3, #8]
 800407c:	e26f      	b.n	800455e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800407e:	f7ff f8bf 	bl	8003200 <HAL_RCC_GetPCLK1Freq>
 8004082:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	461d      	mov	r5, r3
 8004088:	f04f 0600 	mov.w	r6, #0
 800408c:	46a8      	mov	r8, r5
 800408e:	46b1      	mov	r9, r6
 8004090:	eb18 0308 	adds.w	r3, r8, r8
 8004094:	eb49 0409 	adc.w	r4, r9, r9
 8004098:	4698      	mov	r8, r3
 800409a:	46a1      	mov	r9, r4
 800409c:	eb18 0805 	adds.w	r8, r8, r5
 80040a0:	eb49 0906 	adc.w	r9, r9, r6
 80040a4:	f04f 0100 	mov.w	r1, #0
 80040a8:	f04f 0200 	mov.w	r2, #0
 80040ac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80040b0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80040b4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80040b8:	4688      	mov	r8, r1
 80040ba:	4691      	mov	r9, r2
 80040bc:	eb18 0005 	adds.w	r0, r8, r5
 80040c0:	eb49 0106 	adc.w	r1, r9, r6
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	461d      	mov	r5, r3
 80040ca:	f04f 0600 	mov.w	r6, #0
 80040ce:	196b      	adds	r3, r5, r5
 80040d0:	eb46 0406 	adc.w	r4, r6, r6
 80040d4:	461a      	mov	r2, r3
 80040d6:	4623      	mov	r3, r4
 80040d8:	f7fc fd78 	bl	8000bcc <__aeabi_uldivmod>
 80040dc:	4603      	mov	r3, r0
 80040de:	460c      	mov	r4, r1
 80040e0:	461a      	mov	r2, r3
 80040e2:	4b47      	ldr	r3, [pc, #284]	; (8004200 <UART_SetConfig+0x384>)
 80040e4:	fba3 2302 	umull	r2, r3, r3, r2
 80040e8:	095b      	lsrs	r3, r3, #5
 80040ea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	461d      	mov	r5, r3
 80040f2:	f04f 0600 	mov.w	r6, #0
 80040f6:	46a9      	mov	r9, r5
 80040f8:	46b2      	mov	sl, r6
 80040fa:	eb19 0309 	adds.w	r3, r9, r9
 80040fe:	eb4a 040a 	adc.w	r4, sl, sl
 8004102:	4699      	mov	r9, r3
 8004104:	46a2      	mov	sl, r4
 8004106:	eb19 0905 	adds.w	r9, r9, r5
 800410a:	eb4a 0a06 	adc.w	sl, sl, r6
 800410e:	f04f 0100 	mov.w	r1, #0
 8004112:	f04f 0200 	mov.w	r2, #0
 8004116:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800411a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800411e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004122:	4689      	mov	r9, r1
 8004124:	4692      	mov	sl, r2
 8004126:	eb19 0005 	adds.w	r0, r9, r5
 800412a:	eb4a 0106 	adc.w	r1, sl, r6
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	461d      	mov	r5, r3
 8004134:	f04f 0600 	mov.w	r6, #0
 8004138:	196b      	adds	r3, r5, r5
 800413a:	eb46 0406 	adc.w	r4, r6, r6
 800413e:	461a      	mov	r2, r3
 8004140:	4623      	mov	r3, r4
 8004142:	f7fc fd43 	bl	8000bcc <__aeabi_uldivmod>
 8004146:	4603      	mov	r3, r0
 8004148:	460c      	mov	r4, r1
 800414a:	461a      	mov	r2, r3
 800414c:	4b2c      	ldr	r3, [pc, #176]	; (8004200 <UART_SetConfig+0x384>)
 800414e:	fba3 1302 	umull	r1, r3, r3, r2
 8004152:	095b      	lsrs	r3, r3, #5
 8004154:	2164      	movs	r1, #100	; 0x64
 8004156:	fb01 f303 	mul.w	r3, r1, r3
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	3332      	adds	r3, #50	; 0x32
 8004160:	4a27      	ldr	r2, [pc, #156]	; (8004200 <UART_SetConfig+0x384>)
 8004162:	fba2 2303 	umull	r2, r3, r2, r3
 8004166:	095b      	lsrs	r3, r3, #5
 8004168:	005b      	lsls	r3, r3, #1
 800416a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800416e:	4498      	add	r8, r3
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	461d      	mov	r5, r3
 8004174:	f04f 0600 	mov.w	r6, #0
 8004178:	46a9      	mov	r9, r5
 800417a:	46b2      	mov	sl, r6
 800417c:	eb19 0309 	adds.w	r3, r9, r9
 8004180:	eb4a 040a 	adc.w	r4, sl, sl
 8004184:	4699      	mov	r9, r3
 8004186:	46a2      	mov	sl, r4
 8004188:	eb19 0905 	adds.w	r9, r9, r5
 800418c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004190:	f04f 0100 	mov.w	r1, #0
 8004194:	f04f 0200 	mov.w	r2, #0
 8004198:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800419c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041a4:	4689      	mov	r9, r1
 80041a6:	4692      	mov	sl, r2
 80041a8:	eb19 0005 	adds.w	r0, r9, r5
 80041ac:	eb4a 0106 	adc.w	r1, sl, r6
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	461d      	mov	r5, r3
 80041b6:	f04f 0600 	mov.w	r6, #0
 80041ba:	196b      	adds	r3, r5, r5
 80041bc:	eb46 0406 	adc.w	r4, r6, r6
 80041c0:	461a      	mov	r2, r3
 80041c2:	4623      	mov	r3, r4
 80041c4:	f7fc fd02 	bl	8000bcc <__aeabi_uldivmod>
 80041c8:	4603      	mov	r3, r0
 80041ca:	460c      	mov	r4, r1
 80041cc:	461a      	mov	r2, r3
 80041ce:	4b0c      	ldr	r3, [pc, #48]	; (8004200 <UART_SetConfig+0x384>)
 80041d0:	fba3 1302 	umull	r1, r3, r3, r2
 80041d4:	095b      	lsrs	r3, r3, #5
 80041d6:	2164      	movs	r1, #100	; 0x64
 80041d8:	fb01 f303 	mul.w	r3, r1, r3
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	3332      	adds	r3, #50	; 0x32
 80041e2:	4a07      	ldr	r2, [pc, #28]	; (8004200 <UART_SetConfig+0x384>)
 80041e4:	fba2 2303 	umull	r2, r3, r2, r3
 80041e8:	095b      	lsrs	r3, r3, #5
 80041ea:	f003 0207 	and.w	r2, r3, #7
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4442      	add	r2, r8
 80041f4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80041f6:	e1b2      	b.n	800455e <UART_SetConfig+0x6e2>
 80041f8:	40011000 	.word	0x40011000
 80041fc:	40011400 	.word	0x40011400
 8004200:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4ad7      	ldr	r2, [pc, #860]	; (8004568 <UART_SetConfig+0x6ec>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d005      	beq.n	800421a <UART_SetConfig+0x39e>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4ad6      	ldr	r2, [pc, #856]	; (800456c <UART_SetConfig+0x6f0>)
 8004214:	4293      	cmp	r3, r2
 8004216:	f040 80d1 	bne.w	80043bc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800421a:	f7ff f805 	bl	8003228 <HAL_RCC_GetPCLK2Freq>
 800421e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	469a      	mov	sl, r3
 8004224:	f04f 0b00 	mov.w	fp, #0
 8004228:	46d0      	mov	r8, sl
 800422a:	46d9      	mov	r9, fp
 800422c:	eb18 0308 	adds.w	r3, r8, r8
 8004230:	eb49 0409 	adc.w	r4, r9, r9
 8004234:	4698      	mov	r8, r3
 8004236:	46a1      	mov	r9, r4
 8004238:	eb18 080a 	adds.w	r8, r8, sl
 800423c:	eb49 090b 	adc.w	r9, r9, fp
 8004240:	f04f 0100 	mov.w	r1, #0
 8004244:	f04f 0200 	mov.w	r2, #0
 8004248:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800424c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004250:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004254:	4688      	mov	r8, r1
 8004256:	4691      	mov	r9, r2
 8004258:	eb1a 0508 	adds.w	r5, sl, r8
 800425c:	eb4b 0609 	adc.w	r6, fp, r9
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	4619      	mov	r1, r3
 8004266:	f04f 0200 	mov.w	r2, #0
 800426a:	f04f 0300 	mov.w	r3, #0
 800426e:	f04f 0400 	mov.w	r4, #0
 8004272:	0094      	lsls	r4, r2, #2
 8004274:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004278:	008b      	lsls	r3, r1, #2
 800427a:	461a      	mov	r2, r3
 800427c:	4623      	mov	r3, r4
 800427e:	4628      	mov	r0, r5
 8004280:	4631      	mov	r1, r6
 8004282:	f7fc fca3 	bl	8000bcc <__aeabi_uldivmod>
 8004286:	4603      	mov	r3, r0
 8004288:	460c      	mov	r4, r1
 800428a:	461a      	mov	r2, r3
 800428c:	4bb8      	ldr	r3, [pc, #736]	; (8004570 <UART_SetConfig+0x6f4>)
 800428e:	fba3 2302 	umull	r2, r3, r3, r2
 8004292:	095b      	lsrs	r3, r3, #5
 8004294:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	469b      	mov	fp, r3
 800429c:	f04f 0c00 	mov.w	ip, #0
 80042a0:	46d9      	mov	r9, fp
 80042a2:	46e2      	mov	sl, ip
 80042a4:	eb19 0309 	adds.w	r3, r9, r9
 80042a8:	eb4a 040a 	adc.w	r4, sl, sl
 80042ac:	4699      	mov	r9, r3
 80042ae:	46a2      	mov	sl, r4
 80042b0:	eb19 090b 	adds.w	r9, r9, fp
 80042b4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80042b8:	f04f 0100 	mov.w	r1, #0
 80042bc:	f04f 0200 	mov.w	r2, #0
 80042c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042cc:	4689      	mov	r9, r1
 80042ce:	4692      	mov	sl, r2
 80042d0:	eb1b 0509 	adds.w	r5, fp, r9
 80042d4:	eb4c 060a 	adc.w	r6, ip, sl
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	4619      	mov	r1, r3
 80042de:	f04f 0200 	mov.w	r2, #0
 80042e2:	f04f 0300 	mov.w	r3, #0
 80042e6:	f04f 0400 	mov.w	r4, #0
 80042ea:	0094      	lsls	r4, r2, #2
 80042ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80042f0:	008b      	lsls	r3, r1, #2
 80042f2:	461a      	mov	r2, r3
 80042f4:	4623      	mov	r3, r4
 80042f6:	4628      	mov	r0, r5
 80042f8:	4631      	mov	r1, r6
 80042fa:	f7fc fc67 	bl	8000bcc <__aeabi_uldivmod>
 80042fe:	4603      	mov	r3, r0
 8004300:	460c      	mov	r4, r1
 8004302:	461a      	mov	r2, r3
 8004304:	4b9a      	ldr	r3, [pc, #616]	; (8004570 <UART_SetConfig+0x6f4>)
 8004306:	fba3 1302 	umull	r1, r3, r3, r2
 800430a:	095b      	lsrs	r3, r3, #5
 800430c:	2164      	movs	r1, #100	; 0x64
 800430e:	fb01 f303 	mul.w	r3, r1, r3
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	011b      	lsls	r3, r3, #4
 8004316:	3332      	adds	r3, #50	; 0x32
 8004318:	4a95      	ldr	r2, [pc, #596]	; (8004570 <UART_SetConfig+0x6f4>)
 800431a:	fba2 2303 	umull	r2, r3, r2, r3
 800431e:	095b      	lsrs	r3, r3, #5
 8004320:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004324:	4498      	add	r8, r3
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	469b      	mov	fp, r3
 800432a:	f04f 0c00 	mov.w	ip, #0
 800432e:	46d9      	mov	r9, fp
 8004330:	46e2      	mov	sl, ip
 8004332:	eb19 0309 	adds.w	r3, r9, r9
 8004336:	eb4a 040a 	adc.w	r4, sl, sl
 800433a:	4699      	mov	r9, r3
 800433c:	46a2      	mov	sl, r4
 800433e:	eb19 090b 	adds.w	r9, r9, fp
 8004342:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004346:	f04f 0100 	mov.w	r1, #0
 800434a:	f04f 0200 	mov.w	r2, #0
 800434e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004352:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004356:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800435a:	4689      	mov	r9, r1
 800435c:	4692      	mov	sl, r2
 800435e:	eb1b 0509 	adds.w	r5, fp, r9
 8004362:	eb4c 060a 	adc.w	r6, ip, sl
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	4619      	mov	r1, r3
 800436c:	f04f 0200 	mov.w	r2, #0
 8004370:	f04f 0300 	mov.w	r3, #0
 8004374:	f04f 0400 	mov.w	r4, #0
 8004378:	0094      	lsls	r4, r2, #2
 800437a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800437e:	008b      	lsls	r3, r1, #2
 8004380:	461a      	mov	r2, r3
 8004382:	4623      	mov	r3, r4
 8004384:	4628      	mov	r0, r5
 8004386:	4631      	mov	r1, r6
 8004388:	f7fc fc20 	bl	8000bcc <__aeabi_uldivmod>
 800438c:	4603      	mov	r3, r0
 800438e:	460c      	mov	r4, r1
 8004390:	461a      	mov	r2, r3
 8004392:	4b77      	ldr	r3, [pc, #476]	; (8004570 <UART_SetConfig+0x6f4>)
 8004394:	fba3 1302 	umull	r1, r3, r3, r2
 8004398:	095b      	lsrs	r3, r3, #5
 800439a:	2164      	movs	r1, #100	; 0x64
 800439c:	fb01 f303 	mul.w	r3, r1, r3
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	011b      	lsls	r3, r3, #4
 80043a4:	3332      	adds	r3, #50	; 0x32
 80043a6:	4a72      	ldr	r2, [pc, #456]	; (8004570 <UART_SetConfig+0x6f4>)
 80043a8:	fba2 2303 	umull	r2, r3, r2, r3
 80043ac:	095b      	lsrs	r3, r3, #5
 80043ae:	f003 020f 	and.w	r2, r3, #15
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4442      	add	r2, r8
 80043b8:	609a      	str	r2, [r3, #8]
 80043ba:	e0d0      	b.n	800455e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80043bc:	f7fe ff20 	bl	8003200 <HAL_RCC_GetPCLK1Freq>
 80043c0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	469a      	mov	sl, r3
 80043c6:	f04f 0b00 	mov.w	fp, #0
 80043ca:	46d0      	mov	r8, sl
 80043cc:	46d9      	mov	r9, fp
 80043ce:	eb18 0308 	adds.w	r3, r8, r8
 80043d2:	eb49 0409 	adc.w	r4, r9, r9
 80043d6:	4698      	mov	r8, r3
 80043d8:	46a1      	mov	r9, r4
 80043da:	eb18 080a 	adds.w	r8, r8, sl
 80043de:	eb49 090b 	adc.w	r9, r9, fp
 80043e2:	f04f 0100 	mov.w	r1, #0
 80043e6:	f04f 0200 	mov.w	r2, #0
 80043ea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80043ee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80043f2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80043f6:	4688      	mov	r8, r1
 80043f8:	4691      	mov	r9, r2
 80043fa:	eb1a 0508 	adds.w	r5, sl, r8
 80043fe:	eb4b 0609 	adc.w	r6, fp, r9
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	4619      	mov	r1, r3
 8004408:	f04f 0200 	mov.w	r2, #0
 800440c:	f04f 0300 	mov.w	r3, #0
 8004410:	f04f 0400 	mov.w	r4, #0
 8004414:	0094      	lsls	r4, r2, #2
 8004416:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800441a:	008b      	lsls	r3, r1, #2
 800441c:	461a      	mov	r2, r3
 800441e:	4623      	mov	r3, r4
 8004420:	4628      	mov	r0, r5
 8004422:	4631      	mov	r1, r6
 8004424:	f7fc fbd2 	bl	8000bcc <__aeabi_uldivmod>
 8004428:	4603      	mov	r3, r0
 800442a:	460c      	mov	r4, r1
 800442c:	461a      	mov	r2, r3
 800442e:	4b50      	ldr	r3, [pc, #320]	; (8004570 <UART_SetConfig+0x6f4>)
 8004430:	fba3 2302 	umull	r2, r3, r3, r2
 8004434:	095b      	lsrs	r3, r3, #5
 8004436:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	469b      	mov	fp, r3
 800443e:	f04f 0c00 	mov.w	ip, #0
 8004442:	46d9      	mov	r9, fp
 8004444:	46e2      	mov	sl, ip
 8004446:	eb19 0309 	adds.w	r3, r9, r9
 800444a:	eb4a 040a 	adc.w	r4, sl, sl
 800444e:	4699      	mov	r9, r3
 8004450:	46a2      	mov	sl, r4
 8004452:	eb19 090b 	adds.w	r9, r9, fp
 8004456:	eb4a 0a0c 	adc.w	sl, sl, ip
 800445a:	f04f 0100 	mov.w	r1, #0
 800445e:	f04f 0200 	mov.w	r2, #0
 8004462:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004466:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800446a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800446e:	4689      	mov	r9, r1
 8004470:	4692      	mov	sl, r2
 8004472:	eb1b 0509 	adds.w	r5, fp, r9
 8004476:	eb4c 060a 	adc.w	r6, ip, sl
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	4619      	mov	r1, r3
 8004480:	f04f 0200 	mov.w	r2, #0
 8004484:	f04f 0300 	mov.w	r3, #0
 8004488:	f04f 0400 	mov.w	r4, #0
 800448c:	0094      	lsls	r4, r2, #2
 800448e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004492:	008b      	lsls	r3, r1, #2
 8004494:	461a      	mov	r2, r3
 8004496:	4623      	mov	r3, r4
 8004498:	4628      	mov	r0, r5
 800449a:	4631      	mov	r1, r6
 800449c:	f7fc fb96 	bl	8000bcc <__aeabi_uldivmod>
 80044a0:	4603      	mov	r3, r0
 80044a2:	460c      	mov	r4, r1
 80044a4:	461a      	mov	r2, r3
 80044a6:	4b32      	ldr	r3, [pc, #200]	; (8004570 <UART_SetConfig+0x6f4>)
 80044a8:	fba3 1302 	umull	r1, r3, r3, r2
 80044ac:	095b      	lsrs	r3, r3, #5
 80044ae:	2164      	movs	r1, #100	; 0x64
 80044b0:	fb01 f303 	mul.w	r3, r1, r3
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	011b      	lsls	r3, r3, #4
 80044b8:	3332      	adds	r3, #50	; 0x32
 80044ba:	4a2d      	ldr	r2, [pc, #180]	; (8004570 <UART_SetConfig+0x6f4>)
 80044bc:	fba2 2303 	umull	r2, r3, r2, r3
 80044c0:	095b      	lsrs	r3, r3, #5
 80044c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044c6:	4498      	add	r8, r3
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	469b      	mov	fp, r3
 80044cc:	f04f 0c00 	mov.w	ip, #0
 80044d0:	46d9      	mov	r9, fp
 80044d2:	46e2      	mov	sl, ip
 80044d4:	eb19 0309 	adds.w	r3, r9, r9
 80044d8:	eb4a 040a 	adc.w	r4, sl, sl
 80044dc:	4699      	mov	r9, r3
 80044de:	46a2      	mov	sl, r4
 80044e0:	eb19 090b 	adds.w	r9, r9, fp
 80044e4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80044e8:	f04f 0100 	mov.w	r1, #0
 80044ec:	f04f 0200 	mov.w	r2, #0
 80044f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044fc:	4689      	mov	r9, r1
 80044fe:	4692      	mov	sl, r2
 8004500:	eb1b 0509 	adds.w	r5, fp, r9
 8004504:	eb4c 060a 	adc.w	r6, ip, sl
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	4619      	mov	r1, r3
 800450e:	f04f 0200 	mov.w	r2, #0
 8004512:	f04f 0300 	mov.w	r3, #0
 8004516:	f04f 0400 	mov.w	r4, #0
 800451a:	0094      	lsls	r4, r2, #2
 800451c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004520:	008b      	lsls	r3, r1, #2
 8004522:	461a      	mov	r2, r3
 8004524:	4623      	mov	r3, r4
 8004526:	4628      	mov	r0, r5
 8004528:	4631      	mov	r1, r6
 800452a:	f7fc fb4f 	bl	8000bcc <__aeabi_uldivmod>
 800452e:	4603      	mov	r3, r0
 8004530:	460c      	mov	r4, r1
 8004532:	461a      	mov	r2, r3
 8004534:	4b0e      	ldr	r3, [pc, #56]	; (8004570 <UART_SetConfig+0x6f4>)
 8004536:	fba3 1302 	umull	r1, r3, r3, r2
 800453a:	095b      	lsrs	r3, r3, #5
 800453c:	2164      	movs	r1, #100	; 0x64
 800453e:	fb01 f303 	mul.w	r3, r1, r3
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	011b      	lsls	r3, r3, #4
 8004546:	3332      	adds	r3, #50	; 0x32
 8004548:	4a09      	ldr	r2, [pc, #36]	; (8004570 <UART_SetConfig+0x6f4>)
 800454a:	fba2 2303 	umull	r2, r3, r2, r3
 800454e:	095b      	lsrs	r3, r3, #5
 8004550:	f003 020f 	and.w	r2, r3, #15
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4442      	add	r2, r8
 800455a:	609a      	str	r2, [r3, #8]
}
 800455c:	e7ff      	b.n	800455e <UART_SetConfig+0x6e2>
 800455e:	bf00      	nop
 8004560:	3714      	adds	r7, #20
 8004562:	46bd      	mov	sp, r7
 8004564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004568:	40011000 	.word	0x40011000
 800456c:	40011400 	.word	0x40011400
 8004570:	51eb851f 	.word	0x51eb851f

08004574 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	4a07      	ldr	r2, [pc, #28]	; (80045a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8004584:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	4a06      	ldr	r2, [pc, #24]	; (80045a4 <vApplicationGetIdleTaskMemory+0x30>)
 800458a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2280      	movs	r2, #128	; 0x80
 8004590:	601a      	str	r2, [r3, #0]
}
 8004592:	bf00      	nop
 8004594:	3714      	adds	r7, #20
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	200003ac 	.word	0x200003ac
 80045a4:	20000408 	.word	0x20000408

080045a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	4a07      	ldr	r2, [pc, #28]	; (80045d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80045b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	4a06      	ldr	r2, [pc, #24]	; (80045d8 <vApplicationGetTimerTaskMemory+0x30>)
 80045be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045c6:	601a      	str	r2, [r3, #0]
}
 80045c8:	bf00      	nop
 80045ca:	3714      	adds	r7, #20
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	20000608 	.word	0x20000608
 80045d8:	20000664 	.word	0x20000664

080045dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f103 0208 	add.w	r2, r3, #8
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f103 0208 	add.w	r2, r3, #8
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f103 0208 	add.w	r2, r3, #8
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800462a:	bf00      	nop
 800462c:	370c      	adds	r7, #12
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr

08004636 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004636:	b480      	push	{r7}
 8004638:	b085      	sub	sp, #20
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
 800463e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	689a      	ldr	r2, [r3, #8]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	1c5a      	adds	r2, r3, #1
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	601a      	str	r2, [r3, #0]
}
 8004672:	bf00      	nop
 8004674:	3714      	adds	r7, #20
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr

0800467e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800467e:	b480      	push	{r7}
 8004680:	b085      	sub	sp, #20
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
 8004686:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004694:	d103      	bne.n	800469e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	60fb      	str	r3, [r7, #12]
 800469c:	e00c      	b.n	80046b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	3308      	adds	r3, #8
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	e002      	b.n	80046ac <vListInsert+0x2e>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	60fb      	str	r3, [r7, #12]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68ba      	ldr	r2, [r7, #8]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d2f6      	bcs.n	80046a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	683a      	ldr	r2, [r7, #0]
 80046d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	1c5a      	adds	r2, r3, #1
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	601a      	str	r2, [r3, #0]
}
 80046e4:	bf00      	nop
 80046e6:	3714      	adds	r7, #20
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6892      	ldr	r2, [r2, #8]
 8004706:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	6852      	ldr	r2, [r2, #4]
 8004710:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	429a      	cmp	r2, r3
 800471a:	d103      	bne.n	8004724 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689a      	ldr	r2, [r3, #8]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	1e5a      	subs	r2, r3, #1
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
}
 8004738:	4618      	mov	r0, r3
 800473a:	3714      	adds	r7, #20
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d109      	bne.n	800476c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475c:	f383 8811 	msr	BASEPRI, r3
 8004760:	f3bf 8f6f 	isb	sy
 8004764:	f3bf 8f4f 	dsb	sy
 8004768:	60bb      	str	r3, [r7, #8]
 800476a:	e7fe      	b.n	800476a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800476c:	f002 f80e 	bl	800678c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004778:	68f9      	ldr	r1, [r7, #12]
 800477a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800477c:	fb01 f303 	mul.w	r3, r1, r3
 8004780:	441a      	add	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800479c:	3b01      	subs	r3, #1
 800479e:	68f9      	ldr	r1, [r7, #12]
 80047a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80047a2:	fb01 f303 	mul.w	r3, r1, r3
 80047a6:	441a      	add	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	22ff      	movs	r2, #255	; 0xff
 80047b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	22ff      	movs	r2, #255	; 0xff
 80047b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d114      	bne.n	80047ec <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d01a      	beq.n	8004800 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	3310      	adds	r3, #16
 80047ce:	4618      	mov	r0, r3
 80047d0:	f001 f8de 	bl	8005990 <xTaskRemoveFromEventList>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d012      	beq.n	8004800 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80047da:	4b0d      	ldr	r3, [pc, #52]	; (8004810 <xQueueGenericReset+0xcc>)
 80047dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047e0:	601a      	str	r2, [r3, #0]
 80047e2:	f3bf 8f4f 	dsb	sy
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	e009      	b.n	8004800 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	3310      	adds	r3, #16
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7ff fef3 	bl	80045dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	3324      	adds	r3, #36	; 0x24
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7ff feee 	bl	80045dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004800:	f001 fff2 	bl	80067e8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004804:	2301      	movs	r3, #1
}
 8004806:	4618      	mov	r0, r3
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	e000ed04 	.word	0xe000ed04

08004814 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004814:	b580      	push	{r7, lr}
 8004816:	b08e      	sub	sp, #56	; 0x38
 8004818:	af02      	add	r7, sp, #8
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	607a      	str	r2, [r7, #4]
 8004820:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d109      	bne.n	800483c <xQueueGenericCreateStatic+0x28>
 8004828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482c:	f383 8811 	msr	BASEPRI, r3
 8004830:	f3bf 8f6f 	isb	sy
 8004834:	f3bf 8f4f 	dsb	sy
 8004838:	62bb      	str	r3, [r7, #40]	; 0x28
 800483a:	e7fe      	b.n	800483a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d109      	bne.n	8004856 <xQueueGenericCreateStatic+0x42>
 8004842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004846:	f383 8811 	msr	BASEPRI, r3
 800484a:	f3bf 8f6f 	isb	sy
 800484e:	f3bf 8f4f 	dsb	sy
 8004852:	627b      	str	r3, [r7, #36]	; 0x24
 8004854:	e7fe      	b.n	8004854 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d002      	beq.n	8004862 <xQueueGenericCreateStatic+0x4e>
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <xQueueGenericCreateStatic+0x52>
 8004862:	2301      	movs	r3, #1
 8004864:	e000      	b.n	8004868 <xQueueGenericCreateStatic+0x54>
 8004866:	2300      	movs	r3, #0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d109      	bne.n	8004880 <xQueueGenericCreateStatic+0x6c>
 800486c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004870:	f383 8811 	msr	BASEPRI, r3
 8004874:	f3bf 8f6f 	isb	sy
 8004878:	f3bf 8f4f 	dsb	sy
 800487c:	623b      	str	r3, [r7, #32]
 800487e:	e7fe      	b.n	800487e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d102      	bne.n	800488c <xQueueGenericCreateStatic+0x78>
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d101      	bne.n	8004890 <xQueueGenericCreateStatic+0x7c>
 800488c:	2301      	movs	r3, #1
 800488e:	e000      	b.n	8004892 <xQueueGenericCreateStatic+0x7e>
 8004890:	2300      	movs	r3, #0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d109      	bne.n	80048aa <xQueueGenericCreateStatic+0x96>
 8004896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489a:	f383 8811 	msr	BASEPRI, r3
 800489e:	f3bf 8f6f 	isb	sy
 80048a2:	f3bf 8f4f 	dsb	sy
 80048a6:	61fb      	str	r3, [r7, #28]
 80048a8:	e7fe      	b.n	80048a8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80048aa:	2350      	movs	r3, #80	; 0x50
 80048ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	2b50      	cmp	r3, #80	; 0x50
 80048b2:	d009      	beq.n	80048c8 <xQueueGenericCreateStatic+0xb4>
 80048b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b8:	f383 8811 	msr	BASEPRI, r3
 80048bc:	f3bf 8f6f 	isb	sy
 80048c0:	f3bf 8f4f 	dsb	sy
 80048c4:	61bb      	str	r3, [r7, #24]
 80048c6:	e7fe      	b.n	80048c6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80048c8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80048ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00d      	beq.n	80048f0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80048d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80048dc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80048e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	4613      	mov	r3, r2
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	68b9      	ldr	r1, [r7, #8]
 80048ea:	68f8      	ldr	r0, [r7, #12]
 80048ec:	f000 f805 	bl	80048fa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80048f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3730      	adds	r7, #48	; 0x30
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b084      	sub	sp, #16
 80048fe:	af00      	add	r7, sp, #0
 8004900:	60f8      	str	r0, [r7, #12]
 8004902:	60b9      	str	r1, [r7, #8]
 8004904:	607a      	str	r2, [r7, #4]
 8004906:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d103      	bne.n	8004916 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	601a      	str	r2, [r3, #0]
 8004914:	e002      	b.n	800491c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	68ba      	ldr	r2, [r7, #8]
 8004926:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004928:	2101      	movs	r1, #1
 800492a:	69b8      	ldr	r0, [r7, #24]
 800492c:	f7ff ff0a 	bl	8004744 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	78fa      	ldrb	r2, [r7, #3]
 8004934:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004938:	bf00      	nop
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b08e      	sub	sp, #56	; 0x38
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
 800494c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800494e:	2300      	movs	r3, #0
 8004950:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004958:	2b00      	cmp	r3, #0
 800495a:	d109      	bne.n	8004970 <xQueueGenericSend+0x30>
 800495c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004960:	f383 8811 	msr	BASEPRI, r3
 8004964:	f3bf 8f6f 	isb	sy
 8004968:	f3bf 8f4f 	dsb	sy
 800496c:	62bb      	str	r3, [r7, #40]	; 0x28
 800496e:	e7fe      	b.n	800496e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d103      	bne.n	800497e <xQueueGenericSend+0x3e>
 8004976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <xQueueGenericSend+0x42>
 800497e:	2301      	movs	r3, #1
 8004980:	e000      	b.n	8004984 <xQueueGenericSend+0x44>
 8004982:	2300      	movs	r3, #0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d109      	bne.n	800499c <xQueueGenericSend+0x5c>
 8004988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498c:	f383 8811 	msr	BASEPRI, r3
 8004990:	f3bf 8f6f 	isb	sy
 8004994:	f3bf 8f4f 	dsb	sy
 8004998:	627b      	str	r3, [r7, #36]	; 0x24
 800499a:	e7fe      	b.n	800499a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d103      	bne.n	80049aa <xQueueGenericSend+0x6a>
 80049a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d101      	bne.n	80049ae <xQueueGenericSend+0x6e>
 80049aa:	2301      	movs	r3, #1
 80049ac:	e000      	b.n	80049b0 <xQueueGenericSend+0x70>
 80049ae:	2300      	movs	r3, #0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d109      	bne.n	80049c8 <xQueueGenericSend+0x88>
 80049b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b8:	f383 8811 	msr	BASEPRI, r3
 80049bc:	f3bf 8f6f 	isb	sy
 80049c0:	f3bf 8f4f 	dsb	sy
 80049c4:	623b      	str	r3, [r7, #32]
 80049c6:	e7fe      	b.n	80049c6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049c8:	f001 f998 	bl	8005cfc <xTaskGetSchedulerState>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d102      	bne.n	80049d8 <xQueueGenericSend+0x98>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d101      	bne.n	80049dc <xQueueGenericSend+0x9c>
 80049d8:	2301      	movs	r3, #1
 80049da:	e000      	b.n	80049de <xQueueGenericSend+0x9e>
 80049dc:	2300      	movs	r3, #0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d109      	bne.n	80049f6 <xQueueGenericSend+0xb6>
 80049e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e6:	f383 8811 	msr	BASEPRI, r3
 80049ea:	f3bf 8f6f 	isb	sy
 80049ee:	f3bf 8f4f 	dsb	sy
 80049f2:	61fb      	str	r3, [r7, #28]
 80049f4:	e7fe      	b.n	80049f4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80049f6:	f001 fec9 	bl	800678c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80049fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d302      	bcc.n	8004a0c <xQueueGenericSend+0xcc>
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d129      	bne.n	8004a60 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	68b9      	ldr	r1, [r7, #8]
 8004a10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a12:	f000 f9ff 	bl	8004e14 <prvCopyDataToQueue>
 8004a16:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d010      	beq.n	8004a42 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a22:	3324      	adds	r3, #36	; 0x24
 8004a24:	4618      	mov	r0, r3
 8004a26:	f000 ffb3 	bl	8005990 <xTaskRemoveFromEventList>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d013      	beq.n	8004a58 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004a30:	4b3f      	ldr	r3, [pc, #252]	; (8004b30 <xQueueGenericSend+0x1f0>)
 8004a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a36:	601a      	str	r2, [r3, #0]
 8004a38:	f3bf 8f4f 	dsb	sy
 8004a3c:	f3bf 8f6f 	isb	sy
 8004a40:	e00a      	b.n	8004a58 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d007      	beq.n	8004a58 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004a48:	4b39      	ldr	r3, [pc, #228]	; (8004b30 <xQueueGenericSend+0x1f0>)
 8004a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a4e:	601a      	str	r2, [r3, #0]
 8004a50:	f3bf 8f4f 	dsb	sy
 8004a54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004a58:	f001 fec6 	bl	80067e8 <vPortExitCritical>
				return pdPASS;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e063      	b.n	8004b28 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d103      	bne.n	8004a6e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a66:	f001 febf 	bl	80067e8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	e05c      	b.n	8004b28 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d106      	bne.n	8004a82 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a74:	f107 0314 	add.w	r3, r7, #20
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f000 ffeb 	bl	8005a54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a82:	f001 feb1 	bl	80067e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a86:	f000 fd67 	bl	8005558 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a8a:	f001 fe7f 	bl	800678c <vPortEnterCritical>
 8004a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a94:	b25b      	sxtb	r3, r3
 8004a96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a9a:	d103      	bne.n	8004aa4 <xQueueGenericSend+0x164>
 8004a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004aaa:	b25b      	sxtb	r3, r3
 8004aac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ab0:	d103      	bne.n	8004aba <xQueueGenericSend+0x17a>
 8004ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004aba:	f001 fe95 	bl	80067e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004abe:	1d3a      	adds	r2, r7, #4
 8004ac0:	f107 0314 	add.w	r3, r7, #20
 8004ac4:	4611      	mov	r1, r2
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 ffda 	bl	8005a80 <xTaskCheckForTimeOut>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d124      	bne.n	8004b1c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004ad2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ad4:	f000 fa96 	bl	8005004 <prvIsQueueFull>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d018      	beq.n	8004b10 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae0:	3310      	adds	r3, #16
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	4611      	mov	r1, r2
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f000 ff04 	bl	80058f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004aec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004aee:	f000 fa21 	bl	8004f34 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004af2:	f000 fd3f 	bl	8005574 <xTaskResumeAll>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f47f af7c 	bne.w	80049f6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004afe:	4b0c      	ldr	r3, [pc, #48]	; (8004b30 <xQueueGenericSend+0x1f0>)
 8004b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	f3bf 8f4f 	dsb	sy
 8004b0a:	f3bf 8f6f 	isb	sy
 8004b0e:	e772      	b.n	80049f6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004b10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b12:	f000 fa0f 	bl	8004f34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b16:	f000 fd2d 	bl	8005574 <xTaskResumeAll>
 8004b1a:	e76c      	b.n	80049f6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004b1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b1e:	f000 fa09 	bl	8004f34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b22:	f000 fd27 	bl	8005574 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004b26:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3738      	adds	r7, #56	; 0x38
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	e000ed04 	.word	0xe000ed04

08004b34 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b08e      	sub	sp, #56	; 0x38
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
 8004b40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d109      	bne.n	8004b60 <xQueueGenericSendFromISR+0x2c>
 8004b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b50:	f383 8811 	msr	BASEPRI, r3
 8004b54:	f3bf 8f6f 	isb	sy
 8004b58:	f3bf 8f4f 	dsb	sy
 8004b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b5e:	e7fe      	b.n	8004b5e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d103      	bne.n	8004b6e <xQueueGenericSendFromISR+0x3a>
 8004b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d101      	bne.n	8004b72 <xQueueGenericSendFromISR+0x3e>
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e000      	b.n	8004b74 <xQueueGenericSendFromISR+0x40>
 8004b72:	2300      	movs	r3, #0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d109      	bne.n	8004b8c <xQueueGenericSendFromISR+0x58>
 8004b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7c:	f383 8811 	msr	BASEPRI, r3
 8004b80:	f3bf 8f6f 	isb	sy
 8004b84:	f3bf 8f4f 	dsb	sy
 8004b88:	623b      	str	r3, [r7, #32]
 8004b8a:	e7fe      	b.n	8004b8a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d103      	bne.n	8004b9a <xQueueGenericSendFromISR+0x66>
 8004b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d101      	bne.n	8004b9e <xQueueGenericSendFromISR+0x6a>
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e000      	b.n	8004ba0 <xQueueGenericSendFromISR+0x6c>
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d109      	bne.n	8004bb8 <xQueueGenericSendFromISR+0x84>
 8004ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba8:	f383 8811 	msr	BASEPRI, r3
 8004bac:	f3bf 8f6f 	isb	sy
 8004bb0:	f3bf 8f4f 	dsb	sy
 8004bb4:	61fb      	str	r3, [r7, #28]
 8004bb6:	e7fe      	b.n	8004bb6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004bb8:	f001 fec4 	bl	8006944 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004bbc:	f3ef 8211 	mrs	r2, BASEPRI
 8004bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc4:	f383 8811 	msr	BASEPRI, r3
 8004bc8:	f3bf 8f6f 	isb	sy
 8004bcc:	f3bf 8f4f 	dsb	sy
 8004bd0:	61ba      	str	r2, [r7, #24]
 8004bd2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004bd4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d302      	bcc.n	8004bea <xQueueGenericSendFromISR+0xb6>
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d12c      	bne.n	8004c44 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004bf4:	683a      	ldr	r2, [r7, #0]
 8004bf6:	68b9      	ldr	r1, [r7, #8]
 8004bf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bfa:	f000 f90b 	bl	8004e14 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004bfe:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004c02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c06:	d112      	bne.n	8004c2e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d016      	beq.n	8004c3e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c12:	3324      	adds	r3, #36	; 0x24
 8004c14:	4618      	mov	r0, r3
 8004c16:	f000 febb 	bl	8005990 <xTaskRemoveFromEventList>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00e      	beq.n	8004c3e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00b      	beq.n	8004c3e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	601a      	str	r2, [r3, #0]
 8004c2c:	e007      	b.n	8004c3e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004c2e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004c32:	3301      	adds	r3, #1
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	b25a      	sxtb	r2, r3
 8004c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004c42:	e001      	b.n	8004c48 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004c44:	2300      	movs	r3, #0
 8004c46:	637b      	str	r3, [r7, #52]	; 0x34
 8004c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c4a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3738      	adds	r7, #56	; 0x38
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b08c      	sub	sp, #48	; 0x30
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d109      	bne.n	8004c8a <xQueueReceive+0x2e>
	__asm volatile
 8004c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7a:	f383 8811 	msr	BASEPRI, r3
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	f3bf 8f4f 	dsb	sy
 8004c86:	623b      	str	r3, [r7, #32]
 8004c88:	e7fe      	b.n	8004c88 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d103      	bne.n	8004c98 <xQueueReceive+0x3c>
 8004c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d101      	bne.n	8004c9c <xQueueReceive+0x40>
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e000      	b.n	8004c9e <xQueueReceive+0x42>
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d109      	bne.n	8004cb6 <xQueueReceive+0x5a>
 8004ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca6:	f383 8811 	msr	BASEPRI, r3
 8004caa:	f3bf 8f6f 	isb	sy
 8004cae:	f3bf 8f4f 	dsb	sy
 8004cb2:	61fb      	str	r3, [r7, #28]
 8004cb4:	e7fe      	b.n	8004cb4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cb6:	f001 f821 	bl	8005cfc <xTaskGetSchedulerState>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d102      	bne.n	8004cc6 <xQueueReceive+0x6a>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <xQueueReceive+0x6e>
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e000      	b.n	8004ccc <xQueueReceive+0x70>
 8004cca:	2300      	movs	r3, #0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d109      	bne.n	8004ce4 <xQueueReceive+0x88>
 8004cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd4:	f383 8811 	msr	BASEPRI, r3
 8004cd8:	f3bf 8f6f 	isb	sy
 8004cdc:	f3bf 8f4f 	dsb	sy
 8004ce0:	61bb      	str	r3, [r7, #24]
 8004ce2:	e7fe      	b.n	8004ce2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ce4:	f001 fd52 	bl	800678c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cec:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d01f      	beq.n	8004d34 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004cf4:	68b9      	ldr	r1, [r7, #8]
 8004cf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cf8:	f000 f8f6 	bl	8004ee8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfe:	1e5a      	subs	r2, r3, #1
 8004d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d02:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00f      	beq.n	8004d2c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0e:	3310      	adds	r3, #16
 8004d10:	4618      	mov	r0, r3
 8004d12:	f000 fe3d 	bl	8005990 <xTaskRemoveFromEventList>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d007      	beq.n	8004d2c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004d1c:	4b3c      	ldr	r3, [pc, #240]	; (8004e10 <xQueueReceive+0x1b4>)
 8004d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d22:	601a      	str	r2, [r3, #0]
 8004d24:	f3bf 8f4f 	dsb	sy
 8004d28:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004d2c:	f001 fd5c 	bl	80067e8 <vPortExitCritical>
				return pdPASS;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e069      	b.n	8004e08 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d103      	bne.n	8004d42 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d3a:	f001 fd55 	bl	80067e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	e062      	b.n	8004e08 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d106      	bne.n	8004d56 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d48:	f107 0310 	add.w	r3, r7, #16
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f000 fe81 	bl	8005a54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d52:	2301      	movs	r3, #1
 8004d54:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d56:	f001 fd47 	bl	80067e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d5a:	f000 fbfd 	bl	8005558 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d5e:	f001 fd15 	bl	800678c <vPortEnterCritical>
 8004d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d68:	b25b      	sxtb	r3, r3
 8004d6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d6e:	d103      	bne.n	8004d78 <xQueueReceive+0x11c>
 8004d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d7e:	b25b      	sxtb	r3, r3
 8004d80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d84:	d103      	bne.n	8004d8e <xQueueReceive+0x132>
 8004d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d8e:	f001 fd2b 	bl	80067e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d92:	1d3a      	adds	r2, r7, #4
 8004d94:	f107 0310 	add.w	r3, r7, #16
 8004d98:	4611      	mov	r1, r2
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 fe70 	bl	8005a80 <xTaskCheckForTimeOut>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d123      	bne.n	8004dee <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004da6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004da8:	f000 f916 	bl	8004fd8 <prvIsQueueEmpty>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d017      	beq.n	8004de2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db4:	3324      	adds	r3, #36	; 0x24
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	4611      	mov	r1, r2
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 fd9a 	bl	80058f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004dc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dc2:	f000 f8b7 	bl	8004f34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004dc6:	f000 fbd5 	bl	8005574 <xTaskResumeAll>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d189      	bne.n	8004ce4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004dd0:	4b0f      	ldr	r3, [pc, #60]	; (8004e10 <xQueueReceive+0x1b4>)
 8004dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dd6:	601a      	str	r2, [r3, #0]
 8004dd8:	f3bf 8f4f 	dsb	sy
 8004ddc:	f3bf 8f6f 	isb	sy
 8004de0:	e780      	b.n	8004ce4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004de2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004de4:	f000 f8a6 	bl	8004f34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004de8:	f000 fbc4 	bl	8005574 <xTaskResumeAll>
 8004dec:	e77a      	b.n	8004ce4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004dee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004df0:	f000 f8a0 	bl	8004f34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004df4:	f000 fbbe 	bl	8005574 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004df8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dfa:	f000 f8ed 	bl	8004fd8 <prvIsQueueEmpty>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f43f af6f 	beq.w	8004ce4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004e06:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3730      	adds	r7, #48	; 0x30
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	e000ed04 	.word	0xe000ed04

08004e14 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004e20:	2300      	movs	r3, #0
 8004e22:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e28:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10d      	bne.n	8004e4e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d14d      	bne.n	8004ed6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 ff7a 	bl	8005d38 <xTaskPriorityDisinherit>
 8004e44:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	609a      	str	r2, [r3, #8]
 8004e4c:	e043      	b.n	8004ed6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d119      	bne.n	8004e88 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6858      	ldr	r0, [r3, #4]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	68b9      	ldr	r1, [r7, #8]
 8004e60:	f001 ffc2 	bl	8006de8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	685a      	ldr	r2, [r3, #4]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6c:	441a      	add	r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d32b      	bcc.n	8004ed6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	605a      	str	r2, [r3, #4]
 8004e86:	e026      	b.n	8004ed6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	68d8      	ldr	r0, [r3, #12]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e90:	461a      	mov	r2, r3
 8004e92:	68b9      	ldr	r1, [r7, #8]
 8004e94:	f001 ffa8 	bl	8006de8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	68da      	ldr	r2, [r3, #12]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea0:	425b      	negs	r3, r3
 8004ea2:	441a      	add	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	68da      	ldr	r2, [r3, #12]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d207      	bcs.n	8004ec4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	689a      	ldr	r2, [r3, #8]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebc:	425b      	negs	r3, r3
 8004ebe:	441a      	add	r2, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d105      	bne.n	8004ed6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d002      	beq.n	8004ed6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1c5a      	adds	r2, r3, #1
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004ede:	697b      	ldr	r3, [r7, #20]
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3718      	adds	r7, #24
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d018      	beq.n	8004f2c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68da      	ldr	r2, [r3, #12]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f02:	441a      	add	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	68da      	ldr	r2, [r3, #12]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d303      	bcc.n	8004f1c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	68d9      	ldr	r1, [r3, #12]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f24:	461a      	mov	r2, r3
 8004f26:	6838      	ldr	r0, [r7, #0]
 8004f28:	f001 ff5e 	bl	8006de8 <memcpy>
	}
}
 8004f2c:	bf00      	nop
 8004f2e:	3708      	adds	r7, #8
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004f3c:	f001 fc26 	bl	800678c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f46:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f48:	e011      	b.n	8004f6e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d012      	beq.n	8004f78 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	3324      	adds	r3, #36	; 0x24
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 fd1a 	bl	8005990 <xTaskRemoveFromEventList>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004f62:	f000 fded 	bl	8005b40 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004f66:	7bfb      	ldrb	r3, [r7, #15]
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	dce9      	bgt.n	8004f4a <prvUnlockQueue+0x16>
 8004f76:	e000      	b.n	8004f7a <prvUnlockQueue+0x46>
					break;
 8004f78:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	22ff      	movs	r2, #255	; 0xff
 8004f7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004f82:	f001 fc31 	bl	80067e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004f86:	f001 fc01 	bl	800678c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f90:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f92:	e011      	b.n	8004fb8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d012      	beq.n	8004fc2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	3310      	adds	r3, #16
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f000 fcf5 	bl	8005990 <xTaskRemoveFromEventList>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d001      	beq.n	8004fb0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004fac:	f000 fdc8 	bl	8005b40 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004fb0:	7bbb      	ldrb	r3, [r7, #14]
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004fb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	dce9      	bgt.n	8004f94 <prvUnlockQueue+0x60>
 8004fc0:	e000      	b.n	8004fc4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004fc2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	22ff      	movs	r2, #255	; 0xff
 8004fc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004fcc:	f001 fc0c 	bl	80067e8 <vPortExitCritical>
}
 8004fd0:	bf00      	nop
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004fe0:	f001 fbd4 	bl	800678c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d102      	bne.n	8004ff2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004fec:	2301      	movs	r3, #1
 8004fee:	60fb      	str	r3, [r7, #12]
 8004ff0:	e001      	b.n	8004ff6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ff6:	f001 fbf7 	bl	80067e8 <vPortExitCritical>

	return xReturn;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800500c:	f001 fbbe 	bl	800678c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005018:	429a      	cmp	r2, r3
 800501a:	d102      	bne.n	8005022 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800501c:	2301      	movs	r3, #1
 800501e:	60fb      	str	r3, [r7, #12]
 8005020:	e001      	b.n	8005026 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005022:	2300      	movs	r3, #0
 8005024:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005026:	f001 fbdf 	bl	80067e8 <vPortExitCritical>

	return xReturn;
 800502a:	68fb      	ldr	r3, [r7, #12]
}
 800502c:	4618      	mov	r0, r3
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800503e:	2300      	movs	r3, #0
 8005040:	60fb      	str	r3, [r7, #12]
 8005042:	e014      	b.n	800506e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005044:	4a0e      	ldr	r2, [pc, #56]	; (8005080 <vQueueAddToRegistry+0x4c>)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10b      	bne.n	8005068 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005050:	490b      	ldr	r1, [pc, #44]	; (8005080 <vQueueAddToRegistry+0x4c>)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	683a      	ldr	r2, [r7, #0]
 8005056:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800505a:	4a09      	ldr	r2, [pc, #36]	; (8005080 <vQueueAddToRegistry+0x4c>)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	00db      	lsls	r3, r3, #3
 8005060:	4413      	add	r3, r2
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005066:	e005      	b.n	8005074 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	3301      	adds	r3, #1
 800506c:	60fb      	str	r3, [r7, #12]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2b07      	cmp	r3, #7
 8005072:	d9e7      	bls.n	8005044 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005074:	bf00      	nop
 8005076:	3714      	adds	r7, #20
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr
 8005080:	20004d7c 	.word	0x20004d7c

08005084 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005094:	f001 fb7a 	bl	800678c <vPortEnterCritical>
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800509e:	b25b      	sxtb	r3, r3
 80050a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050a4:	d103      	bne.n	80050ae <vQueueWaitForMessageRestricted+0x2a>
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050b4:	b25b      	sxtb	r3, r3
 80050b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050ba:	d103      	bne.n	80050c4 <vQueueWaitForMessageRestricted+0x40>
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050c4:	f001 fb90 	bl	80067e8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d106      	bne.n	80050de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	3324      	adds	r3, #36	; 0x24
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	68b9      	ldr	r1, [r7, #8]
 80050d8:	4618      	mov	r0, r3
 80050da:	f000 fc2f 	bl	800593c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80050de:	6978      	ldr	r0, [r7, #20]
 80050e0:	f7ff ff28 	bl	8004f34 <prvUnlockQueue>
	}
 80050e4:	bf00      	nop
 80050e6:	3718      	adds	r7, #24
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b08e      	sub	sp, #56	; 0x38
 80050f0:	af04      	add	r7, sp, #16
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
 80050f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80050fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d109      	bne.n	8005114 <xTaskCreateStatic+0x28>
 8005100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005104:	f383 8811 	msr	BASEPRI, r3
 8005108:	f3bf 8f6f 	isb	sy
 800510c:	f3bf 8f4f 	dsb	sy
 8005110:	623b      	str	r3, [r7, #32]
 8005112:	e7fe      	b.n	8005112 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005116:	2b00      	cmp	r3, #0
 8005118:	d109      	bne.n	800512e <xTaskCreateStatic+0x42>
 800511a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800511e:	f383 8811 	msr	BASEPRI, r3
 8005122:	f3bf 8f6f 	isb	sy
 8005126:	f3bf 8f4f 	dsb	sy
 800512a:	61fb      	str	r3, [r7, #28]
 800512c:	e7fe      	b.n	800512c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800512e:	235c      	movs	r3, #92	; 0x5c
 8005130:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	2b5c      	cmp	r3, #92	; 0x5c
 8005136:	d009      	beq.n	800514c <xTaskCreateStatic+0x60>
 8005138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513c:	f383 8811 	msr	BASEPRI, r3
 8005140:	f3bf 8f6f 	isb	sy
 8005144:	f3bf 8f4f 	dsb	sy
 8005148:	61bb      	str	r3, [r7, #24]
 800514a:	e7fe      	b.n	800514a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800514c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800514e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005150:	2b00      	cmp	r3, #0
 8005152:	d01e      	beq.n	8005192 <xTaskCreateStatic+0xa6>
 8005154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005156:	2b00      	cmp	r3, #0
 8005158:	d01b      	beq.n	8005192 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800515a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800515c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005160:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005162:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	2202      	movs	r2, #2
 8005168:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800516c:	2300      	movs	r3, #0
 800516e:	9303      	str	r3, [sp, #12]
 8005170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005172:	9302      	str	r3, [sp, #8]
 8005174:	f107 0314 	add.w	r3, r7, #20
 8005178:	9301      	str	r3, [sp, #4]
 800517a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517c:	9300      	str	r3, [sp, #0]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	68b9      	ldr	r1, [r7, #8]
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f000 f850 	bl	800522a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800518a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800518c:	f000 f8dc 	bl	8005348 <prvAddNewTaskToReadyList>
 8005190:	e001      	b.n	8005196 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8005192:	2300      	movs	r3, #0
 8005194:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005196:	697b      	ldr	r3, [r7, #20]
	}
 8005198:	4618      	mov	r0, r3
 800519a:	3728      	adds	r7, #40	; 0x28
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b08c      	sub	sp, #48	; 0x30
 80051a4:	af04      	add	r7, sp, #16
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	603b      	str	r3, [r7, #0]
 80051ac:	4613      	mov	r3, r2
 80051ae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80051b0:	88fb      	ldrh	r3, [r7, #6]
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	4618      	mov	r0, r3
 80051b6:	f001 fc03 	bl	80069c0 <pvPortMalloc>
 80051ba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00e      	beq.n	80051e0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80051c2:	205c      	movs	r0, #92	; 0x5c
 80051c4:	f001 fbfc 	bl	80069c0 <pvPortMalloc>
 80051c8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d003      	beq.n	80051d8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	631a      	str	r2, [r3, #48]	; 0x30
 80051d6:	e005      	b.n	80051e4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80051d8:	6978      	ldr	r0, [r7, #20]
 80051da:	f001 fcb3 	bl	8006b44 <vPortFree>
 80051de:	e001      	b.n	80051e4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80051e0:	2300      	movs	r3, #0
 80051e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d017      	beq.n	800521a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80051f2:	88fa      	ldrh	r2, [r7, #6]
 80051f4:	2300      	movs	r3, #0
 80051f6:	9303      	str	r3, [sp, #12]
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	9302      	str	r3, [sp, #8]
 80051fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051fe:	9301      	str	r3, [sp, #4]
 8005200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005202:	9300      	str	r3, [sp, #0]
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	68b9      	ldr	r1, [r7, #8]
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f000 f80e 	bl	800522a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800520e:	69f8      	ldr	r0, [r7, #28]
 8005210:	f000 f89a 	bl	8005348 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005214:	2301      	movs	r3, #1
 8005216:	61bb      	str	r3, [r7, #24]
 8005218:	e002      	b.n	8005220 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800521a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800521e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005220:	69bb      	ldr	r3, [r7, #24]
	}
 8005222:	4618      	mov	r0, r3
 8005224:	3720      	adds	r7, #32
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b088      	sub	sp, #32
 800522e:	af00      	add	r7, sp, #0
 8005230:	60f8      	str	r0, [r7, #12]
 8005232:	60b9      	str	r1, [r7, #8]
 8005234:	607a      	str	r2, [r7, #4]
 8005236:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	461a      	mov	r2, r3
 8005242:	21a5      	movs	r1, #165	; 0xa5
 8005244:	f001 fddb 	bl	8006dfe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005252:	3b01      	subs	r3, #1
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4413      	add	r3, r2
 8005258:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	f023 0307 	bic.w	r3, r3, #7
 8005260:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	f003 0307 	and.w	r3, r3, #7
 8005268:	2b00      	cmp	r3, #0
 800526a:	d009      	beq.n	8005280 <prvInitialiseNewTask+0x56>
 800526c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005270:	f383 8811 	msr	BASEPRI, r3
 8005274:	f3bf 8f6f 	isb	sy
 8005278:	f3bf 8f4f 	dsb	sy
 800527c:	617b      	str	r3, [r7, #20]
 800527e:	e7fe      	b.n	800527e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d01f      	beq.n	80052c6 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005286:	2300      	movs	r3, #0
 8005288:	61fb      	str	r3, [r7, #28]
 800528a:	e012      	b.n	80052b2 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800528c:	68ba      	ldr	r2, [r7, #8]
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	4413      	add	r3, r2
 8005292:	7819      	ldrb	r1, [r3, #0]
 8005294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	4413      	add	r3, r2
 800529a:	3334      	adds	r3, #52	; 0x34
 800529c:	460a      	mov	r2, r1
 800529e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80052a0:	68ba      	ldr	r2, [r7, #8]
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	4413      	add	r3, r2
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d006      	beq.n	80052ba <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	3301      	adds	r3, #1
 80052b0:	61fb      	str	r3, [r7, #28]
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	2b0f      	cmp	r3, #15
 80052b6:	d9e9      	bls.n	800528c <prvInitialiseNewTask+0x62>
 80052b8:	e000      	b.n	80052bc <prvInitialiseNewTask+0x92>
			{
				break;
 80052ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80052bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052c4:	e003      	b.n	80052ce <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80052c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80052ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d0:	2b37      	cmp	r3, #55	; 0x37
 80052d2:	d901      	bls.n	80052d8 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80052d4:	2337      	movs	r3, #55	; 0x37
 80052d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80052d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80052de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052e2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80052e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e6:	2200      	movs	r2, #0
 80052e8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80052ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ec:	3304      	adds	r3, #4
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7ff f994 	bl	800461c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80052f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f6:	3318      	adds	r3, #24
 80052f8:	4618      	mov	r0, r3
 80052fa:	f7ff f98f 	bl	800461c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80052fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005302:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005306:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800530a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800530e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005310:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005312:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005316:	2200      	movs	r2, #0
 8005318:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800531a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005322:	683a      	ldr	r2, [r7, #0]
 8005324:	68f9      	ldr	r1, [r7, #12]
 8005326:	69b8      	ldr	r0, [r7, #24]
 8005328:	f001 f90c 	bl	8006544 <pxPortInitialiseStack>
 800532c:	4602      	mov	r2, r0
 800532e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005330:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005334:	2b00      	cmp	r3, #0
 8005336:	d002      	beq.n	800533e <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800533a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800533c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800533e:	bf00      	nop
 8005340:	3720      	adds	r7, #32
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
	...

08005348 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005350:	f001 fa1c 	bl	800678c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005354:	4b2d      	ldr	r3, [pc, #180]	; (800540c <prvAddNewTaskToReadyList+0xc4>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	3301      	adds	r3, #1
 800535a:	4a2c      	ldr	r2, [pc, #176]	; (800540c <prvAddNewTaskToReadyList+0xc4>)
 800535c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800535e:	4b2c      	ldr	r3, [pc, #176]	; (8005410 <prvAddNewTaskToReadyList+0xc8>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d109      	bne.n	800537a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005366:	4a2a      	ldr	r2, [pc, #168]	; (8005410 <prvAddNewTaskToReadyList+0xc8>)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800536c:	4b27      	ldr	r3, [pc, #156]	; (800540c <prvAddNewTaskToReadyList+0xc4>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d110      	bne.n	8005396 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005374:	f000 fc08 	bl	8005b88 <prvInitialiseTaskLists>
 8005378:	e00d      	b.n	8005396 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800537a:	4b26      	ldr	r3, [pc, #152]	; (8005414 <prvAddNewTaskToReadyList+0xcc>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d109      	bne.n	8005396 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005382:	4b23      	ldr	r3, [pc, #140]	; (8005410 <prvAddNewTaskToReadyList+0xc8>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538c:	429a      	cmp	r2, r3
 800538e:	d802      	bhi.n	8005396 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005390:	4a1f      	ldr	r2, [pc, #124]	; (8005410 <prvAddNewTaskToReadyList+0xc8>)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005396:	4b20      	ldr	r3, [pc, #128]	; (8005418 <prvAddNewTaskToReadyList+0xd0>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	3301      	adds	r3, #1
 800539c:	4a1e      	ldr	r2, [pc, #120]	; (8005418 <prvAddNewTaskToReadyList+0xd0>)
 800539e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80053a0:	4b1d      	ldr	r3, [pc, #116]	; (8005418 <prvAddNewTaskToReadyList+0xd0>)
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ac:	4b1b      	ldr	r3, [pc, #108]	; (800541c <prvAddNewTaskToReadyList+0xd4>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d903      	bls.n	80053bc <prvAddNewTaskToReadyList+0x74>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b8:	4a18      	ldr	r2, [pc, #96]	; (800541c <prvAddNewTaskToReadyList+0xd4>)
 80053ba:	6013      	str	r3, [r2, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c0:	4613      	mov	r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4a15      	ldr	r2, [pc, #84]	; (8005420 <prvAddNewTaskToReadyList+0xd8>)
 80053ca:	441a      	add	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	3304      	adds	r3, #4
 80053d0:	4619      	mov	r1, r3
 80053d2:	4610      	mov	r0, r2
 80053d4:	f7ff f92f 	bl	8004636 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80053d8:	f001 fa06 	bl	80067e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80053dc:	4b0d      	ldr	r3, [pc, #52]	; (8005414 <prvAddNewTaskToReadyList+0xcc>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00e      	beq.n	8005402 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80053e4:	4b0a      	ldr	r3, [pc, #40]	; (8005410 <prvAddNewTaskToReadyList+0xc8>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d207      	bcs.n	8005402 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80053f2:	4b0c      	ldr	r3, [pc, #48]	; (8005424 <prvAddNewTaskToReadyList+0xdc>)
 80053f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053f8:	601a      	str	r2, [r3, #0]
 80053fa:	f3bf 8f4f 	dsb	sy
 80053fe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005402:	bf00      	nop
 8005404:	3708      	adds	r7, #8
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	20000f38 	.word	0x20000f38
 8005410:	20000a64 	.word	0x20000a64
 8005414:	20000f44 	.word	0x20000f44
 8005418:	20000f54 	.word	0x20000f54
 800541c:	20000f40 	.word	0x20000f40
 8005420:	20000a68 	.word	0x20000a68
 8005424:	e000ed04 	.word	0xe000ed04

08005428 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005430:	2300      	movs	r3, #0
 8005432:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d016      	beq.n	8005468 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800543a:	4b13      	ldr	r3, [pc, #76]	; (8005488 <vTaskDelay+0x60>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d009      	beq.n	8005456 <vTaskDelay+0x2e>
 8005442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005446:	f383 8811 	msr	BASEPRI, r3
 800544a:	f3bf 8f6f 	isb	sy
 800544e:	f3bf 8f4f 	dsb	sy
 8005452:	60bb      	str	r3, [r7, #8]
 8005454:	e7fe      	b.n	8005454 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005456:	f000 f87f 	bl	8005558 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800545a:	2100      	movs	r1, #0
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 fcd7 	bl	8005e10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005462:	f000 f887 	bl	8005574 <xTaskResumeAll>
 8005466:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d107      	bne.n	800547e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800546e:	4b07      	ldr	r3, [pc, #28]	; (800548c <vTaskDelay+0x64>)
 8005470:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005474:	601a      	str	r2, [r3, #0]
 8005476:	f3bf 8f4f 	dsb	sy
 800547a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800547e:	bf00      	nop
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	20000f60 	.word	0x20000f60
 800548c:	e000ed04 	.word	0xe000ed04

08005490 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b08a      	sub	sp, #40	; 0x28
 8005494:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005496:	2300      	movs	r3, #0
 8005498:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800549a:	2300      	movs	r3, #0
 800549c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800549e:	463a      	mov	r2, r7
 80054a0:	1d39      	adds	r1, r7, #4
 80054a2:	f107 0308 	add.w	r3, r7, #8
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7ff f864 	bl	8004574 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80054ac:	6839      	ldr	r1, [r7, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	9202      	str	r2, [sp, #8]
 80054b4:	9301      	str	r3, [sp, #4]
 80054b6:	2300      	movs	r3, #0
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	2300      	movs	r3, #0
 80054bc:	460a      	mov	r2, r1
 80054be:	4920      	ldr	r1, [pc, #128]	; (8005540 <vTaskStartScheduler+0xb0>)
 80054c0:	4820      	ldr	r0, [pc, #128]	; (8005544 <vTaskStartScheduler+0xb4>)
 80054c2:	f7ff fe13 	bl	80050ec <xTaskCreateStatic>
 80054c6:	4602      	mov	r2, r0
 80054c8:	4b1f      	ldr	r3, [pc, #124]	; (8005548 <vTaskStartScheduler+0xb8>)
 80054ca:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80054cc:	4b1e      	ldr	r3, [pc, #120]	; (8005548 <vTaskStartScheduler+0xb8>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d002      	beq.n	80054da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80054d4:	2301      	movs	r3, #1
 80054d6:	617b      	str	r3, [r7, #20]
 80054d8:	e001      	b.n	80054de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80054da:	2300      	movs	r3, #0
 80054dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d102      	bne.n	80054ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80054e4:	f000 fce8 	bl	8005eb8 <xTimerCreateTimerTask>
 80054e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d115      	bne.n	800551c <vTaskStartScheduler+0x8c>
 80054f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f4:	f383 8811 	msr	BASEPRI, r3
 80054f8:	f3bf 8f6f 	isb	sy
 80054fc:	f3bf 8f4f 	dsb	sy
 8005500:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005502:	4b12      	ldr	r3, [pc, #72]	; (800554c <vTaskStartScheduler+0xbc>)
 8005504:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005508:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800550a:	4b11      	ldr	r3, [pc, #68]	; (8005550 <vTaskStartScheduler+0xc0>)
 800550c:	2201      	movs	r2, #1
 800550e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005510:	4b10      	ldr	r3, [pc, #64]	; (8005554 <vTaskStartScheduler+0xc4>)
 8005512:	2200      	movs	r2, #0
 8005514:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005516:	f001 f89b 	bl	8006650 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800551a:	e00d      	b.n	8005538 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005522:	d109      	bne.n	8005538 <vTaskStartScheduler+0xa8>
 8005524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005528:	f383 8811 	msr	BASEPRI, r3
 800552c:	f3bf 8f6f 	isb	sy
 8005530:	f3bf 8f4f 	dsb	sy
 8005534:	60fb      	str	r3, [r7, #12]
 8005536:	e7fe      	b.n	8005536 <vTaskStartScheduler+0xa6>
}
 8005538:	bf00      	nop
 800553a:	3718      	adds	r7, #24
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	080091f8 	.word	0x080091f8
 8005544:	08005b59 	.word	0x08005b59
 8005548:	20000f5c 	.word	0x20000f5c
 800554c:	20000f58 	.word	0x20000f58
 8005550:	20000f44 	.word	0x20000f44
 8005554:	20000f3c 	.word	0x20000f3c

08005558 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005558:	b480      	push	{r7}
 800555a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800555c:	4b04      	ldr	r3, [pc, #16]	; (8005570 <vTaskSuspendAll+0x18>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	3301      	adds	r3, #1
 8005562:	4a03      	ldr	r2, [pc, #12]	; (8005570 <vTaskSuspendAll+0x18>)
 8005564:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005566:	bf00      	nop
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr
 8005570:	20000f60 	.word	0x20000f60

08005574 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800557a:	2300      	movs	r3, #0
 800557c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800557e:	2300      	movs	r3, #0
 8005580:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005582:	4b41      	ldr	r3, [pc, #260]	; (8005688 <xTaskResumeAll+0x114>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d109      	bne.n	800559e <xTaskResumeAll+0x2a>
 800558a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558e:	f383 8811 	msr	BASEPRI, r3
 8005592:	f3bf 8f6f 	isb	sy
 8005596:	f3bf 8f4f 	dsb	sy
 800559a:	603b      	str	r3, [r7, #0]
 800559c:	e7fe      	b.n	800559c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800559e:	f001 f8f5 	bl	800678c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80055a2:	4b39      	ldr	r3, [pc, #228]	; (8005688 <xTaskResumeAll+0x114>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	3b01      	subs	r3, #1
 80055a8:	4a37      	ldr	r2, [pc, #220]	; (8005688 <xTaskResumeAll+0x114>)
 80055aa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055ac:	4b36      	ldr	r3, [pc, #216]	; (8005688 <xTaskResumeAll+0x114>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d162      	bne.n	800567a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80055b4:	4b35      	ldr	r3, [pc, #212]	; (800568c <xTaskResumeAll+0x118>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d05e      	beq.n	800567a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055bc:	e02f      	b.n	800561e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055be:	4b34      	ldr	r3, [pc, #208]	; (8005690 <xTaskResumeAll+0x11c>)
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	3318      	adds	r3, #24
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7ff f890 	bl	80046f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	3304      	adds	r3, #4
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7ff f88b 	bl	80046f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055de:	4b2d      	ldr	r3, [pc, #180]	; (8005694 <xTaskResumeAll+0x120>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d903      	bls.n	80055ee <xTaskResumeAll+0x7a>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ea:	4a2a      	ldr	r2, [pc, #168]	; (8005694 <xTaskResumeAll+0x120>)
 80055ec:	6013      	str	r3, [r2, #0]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055f2:	4613      	mov	r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	4413      	add	r3, r2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	4a27      	ldr	r2, [pc, #156]	; (8005698 <xTaskResumeAll+0x124>)
 80055fc:	441a      	add	r2, r3
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	3304      	adds	r3, #4
 8005602:	4619      	mov	r1, r3
 8005604:	4610      	mov	r0, r2
 8005606:	f7ff f816 	bl	8004636 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800560e:	4b23      	ldr	r3, [pc, #140]	; (800569c <xTaskResumeAll+0x128>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005614:	429a      	cmp	r2, r3
 8005616:	d302      	bcc.n	800561e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005618:	4b21      	ldr	r3, [pc, #132]	; (80056a0 <xTaskResumeAll+0x12c>)
 800561a:	2201      	movs	r2, #1
 800561c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800561e:	4b1c      	ldr	r3, [pc, #112]	; (8005690 <xTaskResumeAll+0x11c>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1cb      	bne.n	80055be <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d001      	beq.n	8005630 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800562c:	f000 fb46 	bl	8005cbc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005630:	4b1c      	ldr	r3, [pc, #112]	; (80056a4 <xTaskResumeAll+0x130>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d010      	beq.n	800565e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800563c:	f000 f846 	bl	80056cc <xTaskIncrementTick>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d002      	beq.n	800564c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005646:	4b16      	ldr	r3, [pc, #88]	; (80056a0 <xTaskResumeAll+0x12c>)
 8005648:	2201      	movs	r2, #1
 800564a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	3b01      	subs	r3, #1
 8005650:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1f1      	bne.n	800563c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005658:	4b12      	ldr	r3, [pc, #72]	; (80056a4 <xTaskResumeAll+0x130>)
 800565a:	2200      	movs	r2, #0
 800565c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800565e:	4b10      	ldr	r3, [pc, #64]	; (80056a0 <xTaskResumeAll+0x12c>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d009      	beq.n	800567a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005666:	2301      	movs	r3, #1
 8005668:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800566a:	4b0f      	ldr	r3, [pc, #60]	; (80056a8 <xTaskResumeAll+0x134>)
 800566c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005670:	601a      	str	r2, [r3, #0]
 8005672:	f3bf 8f4f 	dsb	sy
 8005676:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800567a:	f001 f8b5 	bl	80067e8 <vPortExitCritical>

	return xAlreadyYielded;
 800567e:	68bb      	ldr	r3, [r7, #8]
}
 8005680:	4618      	mov	r0, r3
 8005682:	3710      	adds	r7, #16
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	20000f60 	.word	0x20000f60
 800568c:	20000f38 	.word	0x20000f38
 8005690:	20000ef8 	.word	0x20000ef8
 8005694:	20000f40 	.word	0x20000f40
 8005698:	20000a68 	.word	0x20000a68
 800569c:	20000a64 	.word	0x20000a64
 80056a0:	20000f4c 	.word	0x20000f4c
 80056a4:	20000f48 	.word	0x20000f48
 80056a8:	e000ed04 	.word	0xe000ed04

080056ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80056b2:	4b05      	ldr	r3, [pc, #20]	; (80056c8 <xTaskGetTickCount+0x1c>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80056b8:	687b      	ldr	r3, [r7, #4]
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	370c      	adds	r7, #12
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	20000f3c 	.word	0x20000f3c

080056cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b086      	sub	sp, #24
 80056d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80056d2:	2300      	movs	r3, #0
 80056d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056d6:	4b4e      	ldr	r3, [pc, #312]	; (8005810 <xTaskIncrementTick+0x144>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f040 8088 	bne.w	80057f0 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80056e0:	4b4c      	ldr	r3, [pc, #304]	; (8005814 <xTaskIncrementTick+0x148>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	3301      	adds	r3, #1
 80056e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80056e8:	4a4a      	ldr	r2, [pc, #296]	; (8005814 <xTaskIncrementTick+0x148>)
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d11f      	bne.n	8005734 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80056f4:	4b48      	ldr	r3, [pc, #288]	; (8005818 <xTaskIncrementTick+0x14c>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d009      	beq.n	8005712 <xTaskIncrementTick+0x46>
 80056fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005702:	f383 8811 	msr	BASEPRI, r3
 8005706:	f3bf 8f6f 	isb	sy
 800570a:	f3bf 8f4f 	dsb	sy
 800570e:	603b      	str	r3, [r7, #0]
 8005710:	e7fe      	b.n	8005710 <xTaskIncrementTick+0x44>
 8005712:	4b41      	ldr	r3, [pc, #260]	; (8005818 <xTaskIncrementTick+0x14c>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	60fb      	str	r3, [r7, #12]
 8005718:	4b40      	ldr	r3, [pc, #256]	; (800581c <xTaskIncrementTick+0x150>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a3e      	ldr	r2, [pc, #248]	; (8005818 <xTaskIncrementTick+0x14c>)
 800571e:	6013      	str	r3, [r2, #0]
 8005720:	4a3e      	ldr	r2, [pc, #248]	; (800581c <xTaskIncrementTick+0x150>)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6013      	str	r3, [r2, #0]
 8005726:	4b3e      	ldr	r3, [pc, #248]	; (8005820 <xTaskIncrementTick+0x154>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	3301      	adds	r3, #1
 800572c:	4a3c      	ldr	r2, [pc, #240]	; (8005820 <xTaskIncrementTick+0x154>)
 800572e:	6013      	str	r3, [r2, #0]
 8005730:	f000 fac4 	bl	8005cbc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005734:	4b3b      	ldr	r3, [pc, #236]	; (8005824 <xTaskIncrementTick+0x158>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	429a      	cmp	r2, r3
 800573c:	d349      	bcc.n	80057d2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800573e:	4b36      	ldr	r3, [pc, #216]	; (8005818 <xTaskIncrementTick+0x14c>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d104      	bne.n	8005752 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005748:	4b36      	ldr	r3, [pc, #216]	; (8005824 <xTaskIncrementTick+0x158>)
 800574a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800574e:	601a      	str	r2, [r3, #0]
					break;
 8005750:	e03f      	b.n	80057d2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005752:	4b31      	ldr	r3, [pc, #196]	; (8005818 <xTaskIncrementTick+0x14c>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	429a      	cmp	r2, r3
 8005768:	d203      	bcs.n	8005772 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800576a:	4a2e      	ldr	r2, [pc, #184]	; (8005824 <xTaskIncrementTick+0x158>)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005770:	e02f      	b.n	80057d2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	3304      	adds	r3, #4
 8005776:	4618      	mov	r0, r3
 8005778:	f7fe ffba 	bl	80046f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005780:	2b00      	cmp	r3, #0
 8005782:	d004      	beq.n	800578e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	3318      	adds	r3, #24
 8005788:	4618      	mov	r0, r3
 800578a:	f7fe ffb1 	bl	80046f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005792:	4b25      	ldr	r3, [pc, #148]	; (8005828 <xTaskIncrementTick+0x15c>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	429a      	cmp	r2, r3
 8005798:	d903      	bls.n	80057a2 <xTaskIncrementTick+0xd6>
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579e:	4a22      	ldr	r2, [pc, #136]	; (8005828 <xTaskIncrementTick+0x15c>)
 80057a0:	6013      	str	r3, [r2, #0]
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a6:	4613      	mov	r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	4413      	add	r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	4a1f      	ldr	r2, [pc, #124]	; (800582c <xTaskIncrementTick+0x160>)
 80057b0:	441a      	add	r2, r3
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	3304      	adds	r3, #4
 80057b6:	4619      	mov	r1, r3
 80057b8:	4610      	mov	r0, r2
 80057ba:	f7fe ff3c 	bl	8004636 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057c2:	4b1b      	ldr	r3, [pc, #108]	; (8005830 <xTaskIncrementTick+0x164>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d3b8      	bcc.n	800573e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80057cc:	2301      	movs	r3, #1
 80057ce:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057d0:	e7b5      	b.n	800573e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80057d2:	4b17      	ldr	r3, [pc, #92]	; (8005830 <xTaskIncrementTick+0x164>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057d8:	4914      	ldr	r1, [pc, #80]	; (800582c <xTaskIncrementTick+0x160>)
 80057da:	4613      	mov	r3, r2
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	4413      	add	r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	440b      	add	r3, r1
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d907      	bls.n	80057fa <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80057ea:	2301      	movs	r3, #1
 80057ec:	617b      	str	r3, [r7, #20]
 80057ee:	e004      	b.n	80057fa <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80057f0:	4b10      	ldr	r3, [pc, #64]	; (8005834 <xTaskIncrementTick+0x168>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	3301      	adds	r3, #1
 80057f6:	4a0f      	ldr	r2, [pc, #60]	; (8005834 <xTaskIncrementTick+0x168>)
 80057f8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80057fa:	4b0f      	ldr	r3, [pc, #60]	; (8005838 <xTaskIncrementTick+0x16c>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d001      	beq.n	8005806 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8005802:	2301      	movs	r3, #1
 8005804:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005806:	697b      	ldr	r3, [r7, #20]
}
 8005808:	4618      	mov	r0, r3
 800580a:	3718      	adds	r7, #24
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	20000f60 	.word	0x20000f60
 8005814:	20000f3c 	.word	0x20000f3c
 8005818:	20000ef0 	.word	0x20000ef0
 800581c:	20000ef4 	.word	0x20000ef4
 8005820:	20000f50 	.word	0x20000f50
 8005824:	20000f58 	.word	0x20000f58
 8005828:	20000f40 	.word	0x20000f40
 800582c:	20000a68 	.word	0x20000a68
 8005830:	20000a64 	.word	0x20000a64
 8005834:	20000f48 	.word	0x20000f48
 8005838:	20000f4c 	.word	0x20000f4c

0800583c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005842:	4b27      	ldr	r3, [pc, #156]	; (80058e0 <vTaskSwitchContext+0xa4>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d003      	beq.n	8005852 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800584a:	4b26      	ldr	r3, [pc, #152]	; (80058e4 <vTaskSwitchContext+0xa8>)
 800584c:	2201      	movs	r2, #1
 800584e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005850:	e040      	b.n	80058d4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005852:	4b24      	ldr	r3, [pc, #144]	; (80058e4 <vTaskSwitchContext+0xa8>)
 8005854:	2200      	movs	r2, #0
 8005856:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005858:	4b23      	ldr	r3, [pc, #140]	; (80058e8 <vTaskSwitchContext+0xac>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	60fb      	str	r3, [r7, #12]
 800585e:	e00f      	b.n	8005880 <vTaskSwitchContext+0x44>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d109      	bne.n	800587a <vTaskSwitchContext+0x3e>
 8005866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586a:	f383 8811 	msr	BASEPRI, r3
 800586e:	f3bf 8f6f 	isb	sy
 8005872:	f3bf 8f4f 	dsb	sy
 8005876:	607b      	str	r3, [r7, #4]
 8005878:	e7fe      	b.n	8005878 <vTaskSwitchContext+0x3c>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	3b01      	subs	r3, #1
 800587e:	60fb      	str	r3, [r7, #12]
 8005880:	491a      	ldr	r1, [pc, #104]	; (80058ec <vTaskSwitchContext+0xb0>)
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	4613      	mov	r3, r2
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	4413      	add	r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	440b      	add	r3, r1
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d0e5      	beq.n	8005860 <vTaskSwitchContext+0x24>
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	4613      	mov	r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	4413      	add	r3, r2
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	4a13      	ldr	r2, [pc, #76]	; (80058ec <vTaskSwitchContext+0xb0>)
 80058a0:	4413      	add	r3, r2
 80058a2:	60bb      	str	r3, [r7, #8]
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	685a      	ldr	r2, [r3, #4]
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	605a      	str	r2, [r3, #4]
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	685a      	ldr	r2, [r3, #4]
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	3308      	adds	r3, #8
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d104      	bne.n	80058c4 <vTaskSwitchContext+0x88>
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	605a      	str	r2, [r3, #4]
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	4a09      	ldr	r2, [pc, #36]	; (80058f0 <vTaskSwitchContext+0xb4>)
 80058cc:	6013      	str	r3, [r2, #0]
 80058ce:	4a06      	ldr	r2, [pc, #24]	; (80058e8 <vTaskSwitchContext+0xac>)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6013      	str	r3, [r2, #0]
}
 80058d4:	bf00      	nop
 80058d6:	3714      	adds	r7, #20
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr
 80058e0:	20000f60 	.word	0x20000f60
 80058e4:	20000f4c 	.word	0x20000f4c
 80058e8:	20000f40 	.word	0x20000f40
 80058ec:	20000a68 	.word	0x20000a68
 80058f0:	20000a64 	.word	0x20000a64

080058f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d109      	bne.n	8005918 <vTaskPlaceOnEventList+0x24>
 8005904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005908:	f383 8811 	msr	BASEPRI, r3
 800590c:	f3bf 8f6f 	isb	sy
 8005910:	f3bf 8f4f 	dsb	sy
 8005914:	60fb      	str	r3, [r7, #12]
 8005916:	e7fe      	b.n	8005916 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005918:	4b07      	ldr	r3, [pc, #28]	; (8005938 <vTaskPlaceOnEventList+0x44>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	3318      	adds	r3, #24
 800591e:	4619      	mov	r1, r3
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f7fe feac 	bl	800467e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005926:	2101      	movs	r1, #1
 8005928:	6838      	ldr	r0, [r7, #0]
 800592a:	f000 fa71 	bl	8005e10 <prvAddCurrentTaskToDelayedList>
}
 800592e:	bf00      	nop
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	20000a64 	.word	0x20000a64

0800593c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800593c:	b580      	push	{r7, lr}
 800593e:	b086      	sub	sp, #24
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d109      	bne.n	8005962 <vTaskPlaceOnEventListRestricted+0x26>
 800594e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005952:	f383 8811 	msr	BASEPRI, r3
 8005956:	f3bf 8f6f 	isb	sy
 800595a:	f3bf 8f4f 	dsb	sy
 800595e:	617b      	str	r3, [r7, #20]
 8005960:	e7fe      	b.n	8005960 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005962:	4b0a      	ldr	r3, [pc, #40]	; (800598c <vTaskPlaceOnEventListRestricted+0x50>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	3318      	adds	r3, #24
 8005968:	4619      	mov	r1, r3
 800596a:	68f8      	ldr	r0, [r7, #12]
 800596c:	f7fe fe63 	bl	8004636 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d002      	beq.n	800597c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005976:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800597a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800597c:	6879      	ldr	r1, [r7, #4]
 800597e:	68b8      	ldr	r0, [r7, #8]
 8005980:	f000 fa46 	bl	8005e10 <prvAddCurrentTaskToDelayedList>
	}
 8005984:	bf00      	nop
 8005986:	3718      	adds	r7, #24
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	20000a64 	.word	0x20000a64

08005990 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b086      	sub	sp, #24
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d109      	bne.n	80059ba <xTaskRemoveFromEventList+0x2a>
 80059a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059aa:	f383 8811 	msr	BASEPRI, r3
 80059ae:	f3bf 8f6f 	isb	sy
 80059b2:	f3bf 8f4f 	dsb	sy
 80059b6:	60fb      	str	r3, [r7, #12]
 80059b8:	e7fe      	b.n	80059b8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	3318      	adds	r3, #24
 80059be:	4618      	mov	r0, r3
 80059c0:	f7fe fe96 	bl	80046f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059c4:	4b1d      	ldr	r3, [pc, #116]	; (8005a3c <xTaskRemoveFromEventList+0xac>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d11d      	bne.n	8005a08 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	3304      	adds	r3, #4
 80059d0:	4618      	mov	r0, r3
 80059d2:	f7fe fe8d 	bl	80046f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059da:	4b19      	ldr	r3, [pc, #100]	; (8005a40 <xTaskRemoveFromEventList+0xb0>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d903      	bls.n	80059ea <xTaskRemoveFromEventList+0x5a>
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e6:	4a16      	ldr	r2, [pc, #88]	; (8005a40 <xTaskRemoveFromEventList+0xb0>)
 80059e8:	6013      	str	r3, [r2, #0]
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ee:	4613      	mov	r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	4413      	add	r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	4a13      	ldr	r2, [pc, #76]	; (8005a44 <xTaskRemoveFromEventList+0xb4>)
 80059f8:	441a      	add	r2, r3
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	3304      	adds	r3, #4
 80059fe:	4619      	mov	r1, r3
 8005a00:	4610      	mov	r0, r2
 8005a02:	f7fe fe18 	bl	8004636 <vListInsertEnd>
 8005a06:	e005      	b.n	8005a14 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	3318      	adds	r3, #24
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	480e      	ldr	r0, [pc, #56]	; (8005a48 <xTaskRemoveFromEventList+0xb8>)
 8005a10:	f7fe fe11 	bl	8004636 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a18:	4b0c      	ldr	r3, [pc, #48]	; (8005a4c <xTaskRemoveFromEventList+0xbc>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d905      	bls.n	8005a2e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005a22:	2301      	movs	r3, #1
 8005a24:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005a26:	4b0a      	ldr	r3, [pc, #40]	; (8005a50 <xTaskRemoveFromEventList+0xc0>)
 8005a28:	2201      	movs	r2, #1
 8005a2a:	601a      	str	r2, [r3, #0]
 8005a2c:	e001      	b.n	8005a32 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005a32:	697b      	ldr	r3, [r7, #20]
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3718      	adds	r7, #24
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	20000f60 	.word	0x20000f60
 8005a40:	20000f40 	.word	0x20000f40
 8005a44:	20000a68 	.word	0x20000a68
 8005a48:	20000ef8 	.word	0x20000ef8
 8005a4c:	20000a64 	.word	0x20000a64
 8005a50:	20000f4c 	.word	0x20000f4c

08005a54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a5c:	4b06      	ldr	r3, [pc, #24]	; (8005a78 <vTaskInternalSetTimeOutState+0x24>)
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005a64:	4b05      	ldr	r3, [pc, #20]	; (8005a7c <vTaskInternalSetTimeOutState+0x28>)
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	605a      	str	r2, [r3, #4]
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr
 8005a78:	20000f50 	.word	0x20000f50
 8005a7c:	20000f3c 	.word	0x20000f3c

08005a80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b088      	sub	sp, #32
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d109      	bne.n	8005aa4 <xTaskCheckForTimeOut+0x24>
 8005a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a94:	f383 8811 	msr	BASEPRI, r3
 8005a98:	f3bf 8f6f 	isb	sy
 8005a9c:	f3bf 8f4f 	dsb	sy
 8005aa0:	613b      	str	r3, [r7, #16]
 8005aa2:	e7fe      	b.n	8005aa2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d109      	bne.n	8005abe <xTaskCheckForTimeOut+0x3e>
 8005aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aae:	f383 8811 	msr	BASEPRI, r3
 8005ab2:	f3bf 8f6f 	isb	sy
 8005ab6:	f3bf 8f4f 	dsb	sy
 8005aba:	60fb      	str	r3, [r7, #12]
 8005abc:	e7fe      	b.n	8005abc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005abe:	f000 fe65 	bl	800678c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005ac2:	4b1d      	ldr	r3, [pc, #116]	; (8005b38 <xTaskCheckForTimeOut+0xb8>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	69ba      	ldr	r2, [r7, #24]
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ada:	d102      	bne.n	8005ae2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005adc:	2300      	movs	r3, #0
 8005ade:	61fb      	str	r3, [r7, #28]
 8005ae0:	e023      	b.n	8005b2a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	4b15      	ldr	r3, [pc, #84]	; (8005b3c <xTaskCheckForTimeOut+0xbc>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d007      	beq.n	8005afe <xTaskCheckForTimeOut+0x7e>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	69ba      	ldr	r2, [r7, #24]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d302      	bcc.n	8005afe <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005af8:	2301      	movs	r3, #1
 8005afa:	61fb      	str	r3, [r7, #28]
 8005afc:	e015      	b.n	8005b2a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d20b      	bcs.n	8005b20 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	1ad2      	subs	r2, r2, r3
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f7ff ff9d 	bl	8005a54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	61fb      	str	r3, [r7, #28]
 8005b1e:	e004      	b.n	8005b2a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	2200      	movs	r2, #0
 8005b24:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005b26:	2301      	movs	r3, #1
 8005b28:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005b2a:	f000 fe5d 	bl	80067e8 <vPortExitCritical>

	return xReturn;
 8005b2e:	69fb      	ldr	r3, [r7, #28]
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3720      	adds	r7, #32
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	20000f3c 	.word	0x20000f3c
 8005b3c:	20000f50 	.word	0x20000f50

08005b40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005b40:	b480      	push	{r7}
 8005b42:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005b44:	4b03      	ldr	r3, [pc, #12]	; (8005b54 <vTaskMissedYield+0x14>)
 8005b46:	2201      	movs	r2, #1
 8005b48:	601a      	str	r2, [r3, #0]
}
 8005b4a:	bf00      	nop
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr
 8005b54:	20000f4c 	.word	0x20000f4c

08005b58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b60:	f000 f852 	bl	8005c08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b64:	4b06      	ldr	r3, [pc, #24]	; (8005b80 <prvIdleTask+0x28>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d9f9      	bls.n	8005b60 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b6c:	4b05      	ldr	r3, [pc, #20]	; (8005b84 <prvIdleTask+0x2c>)
 8005b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b72:	601a      	str	r2, [r3, #0]
 8005b74:	f3bf 8f4f 	dsb	sy
 8005b78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b7c:	e7f0      	b.n	8005b60 <prvIdleTask+0x8>
 8005b7e:	bf00      	nop
 8005b80:	20000a68 	.word	0x20000a68
 8005b84:	e000ed04 	.word	0xe000ed04

08005b88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b8e:	2300      	movs	r3, #0
 8005b90:	607b      	str	r3, [r7, #4]
 8005b92:	e00c      	b.n	8005bae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	4613      	mov	r3, r2
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	4413      	add	r3, r2
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	4a12      	ldr	r2, [pc, #72]	; (8005be8 <prvInitialiseTaskLists+0x60>)
 8005ba0:	4413      	add	r3, r2
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7fe fd1a 	bl	80045dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	3301      	adds	r3, #1
 8005bac:	607b      	str	r3, [r7, #4]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2b37      	cmp	r3, #55	; 0x37
 8005bb2:	d9ef      	bls.n	8005b94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005bb4:	480d      	ldr	r0, [pc, #52]	; (8005bec <prvInitialiseTaskLists+0x64>)
 8005bb6:	f7fe fd11 	bl	80045dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005bba:	480d      	ldr	r0, [pc, #52]	; (8005bf0 <prvInitialiseTaskLists+0x68>)
 8005bbc:	f7fe fd0e 	bl	80045dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005bc0:	480c      	ldr	r0, [pc, #48]	; (8005bf4 <prvInitialiseTaskLists+0x6c>)
 8005bc2:	f7fe fd0b 	bl	80045dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005bc6:	480c      	ldr	r0, [pc, #48]	; (8005bf8 <prvInitialiseTaskLists+0x70>)
 8005bc8:	f7fe fd08 	bl	80045dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005bcc:	480b      	ldr	r0, [pc, #44]	; (8005bfc <prvInitialiseTaskLists+0x74>)
 8005bce:	f7fe fd05 	bl	80045dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005bd2:	4b0b      	ldr	r3, [pc, #44]	; (8005c00 <prvInitialiseTaskLists+0x78>)
 8005bd4:	4a05      	ldr	r2, [pc, #20]	; (8005bec <prvInitialiseTaskLists+0x64>)
 8005bd6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005bd8:	4b0a      	ldr	r3, [pc, #40]	; (8005c04 <prvInitialiseTaskLists+0x7c>)
 8005bda:	4a05      	ldr	r2, [pc, #20]	; (8005bf0 <prvInitialiseTaskLists+0x68>)
 8005bdc:	601a      	str	r2, [r3, #0]
}
 8005bde:	bf00      	nop
 8005be0:	3708      	adds	r7, #8
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	20000a68 	.word	0x20000a68
 8005bec:	20000ec8 	.word	0x20000ec8
 8005bf0:	20000edc 	.word	0x20000edc
 8005bf4:	20000ef8 	.word	0x20000ef8
 8005bf8:	20000f0c 	.word	0x20000f0c
 8005bfc:	20000f24 	.word	0x20000f24
 8005c00:	20000ef0 	.word	0x20000ef0
 8005c04:	20000ef4 	.word	0x20000ef4

08005c08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c0e:	e019      	b.n	8005c44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c10:	f000 fdbc 	bl	800678c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c14:	4b0f      	ldr	r3, [pc, #60]	; (8005c54 <prvCheckTasksWaitingTermination+0x4c>)
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	3304      	adds	r3, #4
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7fe fd65 	bl	80046f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c26:	4b0c      	ldr	r3, [pc, #48]	; (8005c58 <prvCheckTasksWaitingTermination+0x50>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	4a0a      	ldr	r2, [pc, #40]	; (8005c58 <prvCheckTasksWaitingTermination+0x50>)
 8005c2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c30:	4b0a      	ldr	r3, [pc, #40]	; (8005c5c <prvCheckTasksWaitingTermination+0x54>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	3b01      	subs	r3, #1
 8005c36:	4a09      	ldr	r2, [pc, #36]	; (8005c5c <prvCheckTasksWaitingTermination+0x54>)
 8005c38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005c3a:	f000 fdd5 	bl	80067e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 f80e 	bl	8005c60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c44:	4b05      	ldr	r3, [pc, #20]	; (8005c5c <prvCheckTasksWaitingTermination+0x54>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d1e1      	bne.n	8005c10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c4c:	bf00      	nop
 8005c4e:	3708      	adds	r7, #8
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	20000f0c 	.word	0x20000f0c
 8005c58:	20000f38 	.word	0x20000f38
 8005c5c:	20000f20 	.word	0x20000f20

08005c60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d108      	bne.n	8005c84 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c76:	4618      	mov	r0, r3
 8005c78:	f000 ff64 	bl	8006b44 <vPortFree>
				vPortFree( pxTCB );
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 ff61 	bl	8006b44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c82:	e017      	b.n	8005cb4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d103      	bne.n	8005c96 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 ff58 	bl	8006b44 <vPortFree>
	}
 8005c94:	e00e      	b.n	8005cb4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d009      	beq.n	8005cb4 <prvDeleteTCB+0x54>
 8005ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca4:	f383 8811 	msr	BASEPRI, r3
 8005ca8:	f3bf 8f6f 	isb	sy
 8005cac:	f3bf 8f4f 	dsb	sy
 8005cb0:	60fb      	str	r3, [r7, #12]
 8005cb2:	e7fe      	b.n	8005cb2 <prvDeleteTCB+0x52>
	}
 8005cb4:	bf00      	nop
 8005cb6:	3710      	adds	r7, #16
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cc2:	4b0c      	ldr	r3, [pc, #48]	; (8005cf4 <prvResetNextTaskUnblockTime+0x38>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d104      	bne.n	8005cd6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ccc:	4b0a      	ldr	r3, [pc, #40]	; (8005cf8 <prvResetNextTaskUnblockTime+0x3c>)
 8005cce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005cd2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005cd4:	e008      	b.n	8005ce8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cd6:	4b07      	ldr	r3, [pc, #28]	; (8005cf4 <prvResetNextTaskUnblockTime+0x38>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	4a04      	ldr	r2, [pc, #16]	; (8005cf8 <prvResetNextTaskUnblockTime+0x3c>)
 8005ce6:	6013      	str	r3, [r2, #0]
}
 8005ce8:	bf00      	nop
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr
 8005cf4:	20000ef0 	.word	0x20000ef0
 8005cf8:	20000f58 	.word	0x20000f58

08005cfc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005d02:	4b0b      	ldr	r3, [pc, #44]	; (8005d30 <xTaskGetSchedulerState+0x34>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d102      	bne.n	8005d10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	607b      	str	r3, [r7, #4]
 8005d0e:	e008      	b.n	8005d22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d10:	4b08      	ldr	r3, [pc, #32]	; (8005d34 <xTaskGetSchedulerState+0x38>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d102      	bne.n	8005d1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005d18:	2302      	movs	r3, #2
 8005d1a:	607b      	str	r3, [r7, #4]
 8005d1c:	e001      	b.n	8005d22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005d22:	687b      	ldr	r3, [r7, #4]
	}
 8005d24:	4618      	mov	r0, r3
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr
 8005d30:	20000f44 	.word	0x20000f44
 8005d34:	20000f60 	.word	0x20000f60

08005d38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b086      	sub	sp, #24
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005d44:	2300      	movs	r3, #0
 8005d46:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d054      	beq.n	8005df8 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005d4e:	4b2d      	ldr	r3, [pc, #180]	; (8005e04 <xTaskPriorityDisinherit+0xcc>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d009      	beq.n	8005d6c <xTaskPriorityDisinherit+0x34>
 8005d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5c:	f383 8811 	msr	BASEPRI, r3
 8005d60:	f3bf 8f6f 	isb	sy
 8005d64:	f3bf 8f4f 	dsb	sy
 8005d68:	60fb      	str	r3, [r7, #12]
 8005d6a:	e7fe      	b.n	8005d6a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d109      	bne.n	8005d88 <xTaskPriorityDisinherit+0x50>
 8005d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d78:	f383 8811 	msr	BASEPRI, r3
 8005d7c:	f3bf 8f6f 	isb	sy
 8005d80:	f3bf 8f4f 	dsb	sy
 8005d84:	60bb      	str	r3, [r7, #8]
 8005d86:	e7fe      	b.n	8005d86 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d8c:	1e5a      	subs	r2, r3, #1
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d02c      	beq.n	8005df8 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d128      	bne.n	8005df8 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	3304      	adds	r3, #4
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7fe fca0 	bl	80046f0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dbc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dc8:	4b0f      	ldr	r3, [pc, #60]	; (8005e08 <xTaskPriorityDisinherit+0xd0>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d903      	bls.n	8005dd8 <xTaskPriorityDisinherit+0xa0>
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd4:	4a0c      	ldr	r2, [pc, #48]	; (8005e08 <xTaskPriorityDisinherit+0xd0>)
 8005dd6:	6013      	str	r3, [r2, #0]
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ddc:	4613      	mov	r3, r2
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	4413      	add	r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	4a09      	ldr	r2, [pc, #36]	; (8005e0c <xTaskPriorityDisinherit+0xd4>)
 8005de6:	441a      	add	r2, r3
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	3304      	adds	r3, #4
 8005dec:	4619      	mov	r1, r3
 8005dee:	4610      	mov	r0, r2
 8005df0:	f7fe fc21 	bl	8004636 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005df4:	2301      	movs	r3, #1
 8005df6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005df8:	697b      	ldr	r3, [r7, #20]
	}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3718      	adds	r7, #24
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	20000a64 	.word	0x20000a64
 8005e08:	20000f40 	.word	0x20000f40
 8005e0c:	20000a68 	.word	0x20000a68

08005e10 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e1a:	4b21      	ldr	r3, [pc, #132]	; (8005ea0 <prvAddCurrentTaskToDelayedList+0x90>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e20:	4b20      	ldr	r3, [pc, #128]	; (8005ea4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	3304      	adds	r3, #4
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7fe fc62 	bl	80046f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e32:	d10a      	bne.n	8005e4a <prvAddCurrentTaskToDelayedList+0x3a>
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d007      	beq.n	8005e4a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e3a:	4b1a      	ldr	r3, [pc, #104]	; (8005ea4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	3304      	adds	r3, #4
 8005e40:	4619      	mov	r1, r3
 8005e42:	4819      	ldr	r0, [pc, #100]	; (8005ea8 <prvAddCurrentTaskToDelayedList+0x98>)
 8005e44:	f7fe fbf7 	bl	8004636 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005e48:	e026      	b.n	8005e98 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4413      	add	r3, r2
 8005e50:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005e52:	4b14      	ldr	r3, [pc, #80]	; (8005ea4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68ba      	ldr	r2, [r7, #8]
 8005e58:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d209      	bcs.n	8005e76 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e62:	4b12      	ldr	r3, [pc, #72]	; (8005eac <prvAddCurrentTaskToDelayedList+0x9c>)
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	4b0f      	ldr	r3, [pc, #60]	; (8005ea4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	3304      	adds	r3, #4
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	4610      	mov	r0, r2
 8005e70:	f7fe fc05 	bl	800467e <vListInsert>
}
 8005e74:	e010      	b.n	8005e98 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e76:	4b0e      	ldr	r3, [pc, #56]	; (8005eb0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	4b0a      	ldr	r3, [pc, #40]	; (8005ea4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	3304      	adds	r3, #4
 8005e80:	4619      	mov	r1, r3
 8005e82:	4610      	mov	r0, r2
 8005e84:	f7fe fbfb 	bl	800467e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005e88:	4b0a      	ldr	r3, [pc, #40]	; (8005eb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68ba      	ldr	r2, [r7, #8]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d202      	bcs.n	8005e98 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005e92:	4a08      	ldr	r2, [pc, #32]	; (8005eb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	6013      	str	r3, [r2, #0]
}
 8005e98:	bf00      	nop
 8005e9a:	3710      	adds	r7, #16
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	20000f3c 	.word	0x20000f3c
 8005ea4:	20000a64 	.word	0x20000a64
 8005ea8:	20000f24 	.word	0x20000f24
 8005eac:	20000ef4 	.word	0x20000ef4
 8005eb0:	20000ef0 	.word	0x20000ef0
 8005eb4:	20000f58 	.word	0x20000f58

08005eb8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b08a      	sub	sp, #40	; 0x28
 8005ebc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005ec2:	f000 faff 	bl	80064c4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005ec6:	4b1c      	ldr	r3, [pc, #112]	; (8005f38 <xTimerCreateTimerTask+0x80>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d021      	beq.n	8005f12 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005ed6:	1d3a      	adds	r2, r7, #4
 8005ed8:	f107 0108 	add.w	r1, r7, #8
 8005edc:	f107 030c 	add.w	r3, r7, #12
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f7fe fb61 	bl	80045a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005ee6:	6879      	ldr	r1, [r7, #4]
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	9202      	str	r2, [sp, #8]
 8005eee:	9301      	str	r3, [sp, #4]
 8005ef0:	2302      	movs	r3, #2
 8005ef2:	9300      	str	r3, [sp, #0]
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	460a      	mov	r2, r1
 8005ef8:	4910      	ldr	r1, [pc, #64]	; (8005f3c <xTimerCreateTimerTask+0x84>)
 8005efa:	4811      	ldr	r0, [pc, #68]	; (8005f40 <xTimerCreateTimerTask+0x88>)
 8005efc:	f7ff f8f6 	bl	80050ec <xTaskCreateStatic>
 8005f00:	4602      	mov	r2, r0
 8005f02:	4b10      	ldr	r3, [pc, #64]	; (8005f44 <xTimerCreateTimerTask+0x8c>)
 8005f04:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005f06:	4b0f      	ldr	r3, [pc, #60]	; (8005f44 <xTimerCreateTimerTask+0x8c>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d001      	beq.n	8005f12 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d109      	bne.n	8005f2c <xTimerCreateTimerTask+0x74>
 8005f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1c:	f383 8811 	msr	BASEPRI, r3
 8005f20:	f3bf 8f6f 	isb	sy
 8005f24:	f3bf 8f4f 	dsb	sy
 8005f28:	613b      	str	r3, [r7, #16]
 8005f2a:	e7fe      	b.n	8005f2a <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005f2c:	697b      	ldr	r3, [r7, #20]
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3718      	adds	r7, #24
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	20000f94 	.word	0x20000f94
 8005f3c:	08009200 	.word	0x08009200
 8005f40:	08006079 	.word	0x08006079
 8005f44:	20000f98 	.word	0x20000f98

08005f48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b08a      	sub	sp, #40	; 0x28
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	607a      	str	r2, [r7, #4]
 8005f54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005f56:	2300      	movs	r3, #0
 8005f58:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d109      	bne.n	8005f74 <xTimerGenericCommand+0x2c>
 8005f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f64:	f383 8811 	msr	BASEPRI, r3
 8005f68:	f3bf 8f6f 	isb	sy
 8005f6c:	f3bf 8f4f 	dsb	sy
 8005f70:	623b      	str	r3, [r7, #32]
 8005f72:	e7fe      	b.n	8005f72 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005f74:	4b19      	ldr	r3, [pc, #100]	; (8005fdc <xTimerGenericCommand+0x94>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d02a      	beq.n	8005fd2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	2b05      	cmp	r3, #5
 8005f8c:	dc18      	bgt.n	8005fc0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005f8e:	f7ff feb5 	bl	8005cfc <xTaskGetSchedulerState>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d109      	bne.n	8005fac <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005f98:	4b10      	ldr	r3, [pc, #64]	; (8005fdc <xTimerGenericCommand+0x94>)
 8005f9a:	6818      	ldr	r0, [r3, #0]
 8005f9c:	f107 0110 	add.w	r1, r7, #16
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fa4:	f7fe fccc 	bl	8004940 <xQueueGenericSend>
 8005fa8:	6278      	str	r0, [r7, #36]	; 0x24
 8005faa:	e012      	b.n	8005fd2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005fac:	4b0b      	ldr	r3, [pc, #44]	; (8005fdc <xTimerGenericCommand+0x94>)
 8005fae:	6818      	ldr	r0, [r3, #0]
 8005fb0:	f107 0110 	add.w	r1, r7, #16
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f7fe fcc2 	bl	8004940 <xQueueGenericSend>
 8005fbc:	6278      	str	r0, [r7, #36]	; 0x24
 8005fbe:	e008      	b.n	8005fd2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005fc0:	4b06      	ldr	r3, [pc, #24]	; (8005fdc <xTimerGenericCommand+0x94>)
 8005fc2:	6818      	ldr	r0, [r3, #0]
 8005fc4:	f107 0110 	add.w	r1, r7, #16
 8005fc8:	2300      	movs	r3, #0
 8005fca:	683a      	ldr	r2, [r7, #0]
 8005fcc:	f7fe fdb2 	bl	8004b34 <xQueueGenericSendFromISR>
 8005fd0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3728      	adds	r7, #40	; 0x28
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	20000f94 	.word	0x20000f94

08005fe0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b088      	sub	sp, #32
 8005fe4:	af02      	add	r7, sp, #8
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fea:	4b22      	ldr	r3, [pc, #136]	; (8006074 <prvProcessExpiredTimer+0x94>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	3304      	adds	r3, #4
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7fe fb79 	bl	80046f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006004:	f003 0304 	and.w	r3, r3, #4
 8006008:	2b00      	cmp	r3, #0
 800600a:	d021      	beq.n	8006050 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	699a      	ldr	r2, [r3, #24]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	18d1      	adds	r1, r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	683a      	ldr	r2, [r7, #0]
 8006018:	6978      	ldr	r0, [r7, #20]
 800601a:	f000 f8d1 	bl	80061c0 <prvInsertTimerInActiveList>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d01e      	beq.n	8006062 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006024:	2300      	movs	r3, #0
 8006026:	9300      	str	r3, [sp, #0]
 8006028:	2300      	movs	r3, #0
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	2100      	movs	r1, #0
 800602e:	6978      	ldr	r0, [r7, #20]
 8006030:	f7ff ff8a 	bl	8005f48 <xTimerGenericCommand>
 8006034:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d112      	bne.n	8006062 <prvProcessExpiredTimer+0x82>
 800603c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006040:	f383 8811 	msr	BASEPRI, r3
 8006044:	f3bf 8f6f 	isb	sy
 8006048:	f3bf 8f4f 	dsb	sy
 800604c:	60fb      	str	r3, [r7, #12]
 800604e:	e7fe      	b.n	800604e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006056:	f023 0301 	bic.w	r3, r3, #1
 800605a:	b2da      	uxtb	r2, r3
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	6a1b      	ldr	r3, [r3, #32]
 8006066:	6978      	ldr	r0, [r7, #20]
 8006068:	4798      	blx	r3
}
 800606a:	bf00      	nop
 800606c:	3718      	adds	r7, #24
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	20000f8c 	.word	0x20000f8c

08006078 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006080:	f107 0308 	add.w	r3, r7, #8
 8006084:	4618      	mov	r0, r3
 8006086:	f000 f857 	bl	8006138 <prvGetNextExpireTime>
 800608a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	4619      	mov	r1, r3
 8006090:	68f8      	ldr	r0, [r7, #12]
 8006092:	f000 f803 	bl	800609c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006096:	f000 f8d5 	bl	8006244 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800609a:	e7f1      	b.n	8006080 <prvTimerTask+0x8>

0800609c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80060a6:	f7ff fa57 	bl	8005558 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80060aa:	f107 0308 	add.w	r3, r7, #8
 80060ae:	4618      	mov	r0, r3
 80060b0:	f000 f866 	bl	8006180 <prvSampleTimeNow>
 80060b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d130      	bne.n	800611e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d10a      	bne.n	80060d8 <prvProcessTimerOrBlockTask+0x3c>
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d806      	bhi.n	80060d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80060ca:	f7ff fa53 	bl	8005574 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80060ce:	68f9      	ldr	r1, [r7, #12]
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f7ff ff85 	bl	8005fe0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80060d6:	e024      	b.n	8006122 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d008      	beq.n	80060f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80060de:	4b13      	ldr	r3, [pc, #76]	; (800612c <prvProcessTimerOrBlockTask+0x90>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d101      	bne.n	80060ec <prvProcessTimerOrBlockTask+0x50>
 80060e8:	2301      	movs	r3, #1
 80060ea:	e000      	b.n	80060ee <prvProcessTimerOrBlockTask+0x52>
 80060ec:	2300      	movs	r3, #0
 80060ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80060f0:	4b0f      	ldr	r3, [pc, #60]	; (8006130 <prvProcessTimerOrBlockTask+0x94>)
 80060f2:	6818      	ldr	r0, [r3, #0]
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	4619      	mov	r1, r3
 80060fe:	f7fe ffc1 	bl	8005084 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006102:	f7ff fa37 	bl	8005574 <xTaskResumeAll>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d10a      	bne.n	8006122 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800610c:	4b09      	ldr	r3, [pc, #36]	; (8006134 <prvProcessTimerOrBlockTask+0x98>)
 800610e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006112:	601a      	str	r2, [r3, #0]
 8006114:	f3bf 8f4f 	dsb	sy
 8006118:	f3bf 8f6f 	isb	sy
}
 800611c:	e001      	b.n	8006122 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800611e:	f7ff fa29 	bl	8005574 <xTaskResumeAll>
}
 8006122:	bf00      	nop
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	20000f90 	.word	0x20000f90
 8006130:	20000f94 	.word	0x20000f94
 8006134:	e000ed04 	.word	0xe000ed04

08006138 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006140:	4b0e      	ldr	r3, [pc, #56]	; (800617c <prvGetNextExpireTime+0x44>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d101      	bne.n	800614e <prvGetNextExpireTime+0x16>
 800614a:	2201      	movs	r2, #1
 800614c:	e000      	b.n	8006150 <prvGetNextExpireTime+0x18>
 800614e:	2200      	movs	r2, #0
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d105      	bne.n	8006168 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800615c:	4b07      	ldr	r3, [pc, #28]	; (800617c <prvGetNextExpireTime+0x44>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	60fb      	str	r3, [r7, #12]
 8006166:	e001      	b.n	800616c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006168:	2300      	movs	r3, #0
 800616a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800616c:	68fb      	ldr	r3, [r7, #12]
}
 800616e:	4618      	mov	r0, r3
 8006170:	3714      	adds	r7, #20
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	20000f8c 	.word	0x20000f8c

08006180 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006188:	f7ff fa90 	bl	80056ac <xTaskGetTickCount>
 800618c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800618e:	4b0b      	ldr	r3, [pc, #44]	; (80061bc <prvSampleTimeNow+0x3c>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	429a      	cmp	r2, r3
 8006196:	d205      	bcs.n	80061a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006198:	f000 f930 	bl	80063fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	601a      	str	r2, [r3, #0]
 80061a2:	e002      	b.n	80061aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80061aa:	4a04      	ldr	r2, [pc, #16]	; (80061bc <prvSampleTimeNow+0x3c>)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80061b0:	68fb      	ldr	r3, [r7, #12]
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	20000f9c 	.word	0x20000f9c

080061c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b086      	sub	sp, #24
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
 80061cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80061ce:	2300      	movs	r3, #0
 80061d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	68ba      	ldr	r2, [r7, #8]
 80061d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80061de:	68ba      	ldr	r2, [r7, #8]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d812      	bhi.n	800620c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	1ad2      	subs	r2, r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	699b      	ldr	r3, [r3, #24]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d302      	bcc.n	80061fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80061f4:	2301      	movs	r3, #1
 80061f6:	617b      	str	r3, [r7, #20]
 80061f8:	e01b      	b.n	8006232 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80061fa:	4b10      	ldr	r3, [pc, #64]	; (800623c <prvInsertTimerInActiveList+0x7c>)
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	3304      	adds	r3, #4
 8006202:	4619      	mov	r1, r3
 8006204:	4610      	mov	r0, r2
 8006206:	f7fe fa3a 	bl	800467e <vListInsert>
 800620a:	e012      	b.n	8006232 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	429a      	cmp	r2, r3
 8006212:	d206      	bcs.n	8006222 <prvInsertTimerInActiveList+0x62>
 8006214:	68ba      	ldr	r2, [r7, #8]
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	429a      	cmp	r2, r3
 800621a:	d302      	bcc.n	8006222 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800621c:	2301      	movs	r3, #1
 800621e:	617b      	str	r3, [r7, #20]
 8006220:	e007      	b.n	8006232 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006222:	4b07      	ldr	r3, [pc, #28]	; (8006240 <prvInsertTimerInActiveList+0x80>)
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	3304      	adds	r3, #4
 800622a:	4619      	mov	r1, r3
 800622c:	4610      	mov	r0, r2
 800622e:	f7fe fa26 	bl	800467e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006232:	697b      	ldr	r3, [r7, #20]
}
 8006234:	4618      	mov	r0, r3
 8006236:	3718      	adds	r7, #24
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	20000f90 	.word	0x20000f90
 8006240:	20000f8c 	.word	0x20000f8c

08006244 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b08e      	sub	sp, #56	; 0x38
 8006248:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800624a:	e0c6      	b.n	80063da <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	da17      	bge.n	8006282 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006252:	1d3b      	adds	r3, r7, #4
 8006254:	3304      	adds	r3, #4
 8006256:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800625a:	2b00      	cmp	r3, #0
 800625c:	d109      	bne.n	8006272 <prvProcessReceivedCommands+0x2e>
 800625e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006262:	f383 8811 	msr	BASEPRI, r3
 8006266:	f3bf 8f6f 	isb	sy
 800626a:	f3bf 8f4f 	dsb	sy
 800626e:	61fb      	str	r3, [r7, #28]
 8006270:	e7fe      	b.n	8006270 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006278:	6850      	ldr	r0, [r2, #4]
 800627a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800627c:	6892      	ldr	r2, [r2, #8]
 800627e:	4611      	mov	r1, r2
 8006280:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2b00      	cmp	r3, #0
 8006286:	f2c0 80a7 	blt.w	80063d8 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800628e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006290:	695b      	ldr	r3, [r3, #20]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d004      	beq.n	80062a0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006298:	3304      	adds	r3, #4
 800629a:	4618      	mov	r0, r3
 800629c:	f7fe fa28 	bl	80046f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80062a0:	463b      	mov	r3, r7
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7ff ff6c 	bl	8006180 <prvSampleTimeNow>
 80062a8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2b09      	cmp	r3, #9
 80062ae:	f200 8094 	bhi.w	80063da <prvProcessReceivedCommands+0x196>
 80062b2:	a201      	add	r2, pc, #4	; (adr r2, 80062b8 <prvProcessReceivedCommands+0x74>)
 80062b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b8:	080062e1 	.word	0x080062e1
 80062bc:	080062e1 	.word	0x080062e1
 80062c0:	080062e1 	.word	0x080062e1
 80062c4:	08006353 	.word	0x08006353
 80062c8:	08006367 	.word	0x08006367
 80062cc:	080063af 	.word	0x080063af
 80062d0:	080062e1 	.word	0x080062e1
 80062d4:	080062e1 	.word	0x080062e1
 80062d8:	08006353 	.word	0x08006353
 80062dc:	08006367 	.word	0x08006367
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80062e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062e6:	f043 0301 	orr.w	r3, r3, #1
 80062ea:	b2da      	uxtb	r2, r3
 80062ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80062f2:	68ba      	ldr	r2, [r7, #8]
 80062f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f6:	699b      	ldr	r3, [r3, #24]
 80062f8:	18d1      	adds	r1, r2, r3
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006300:	f7ff ff5e 	bl	80061c0 <prvInsertTimerInActiveList>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d067      	beq.n	80063da <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800630a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630c:	6a1b      	ldr	r3, [r3, #32]
 800630e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006310:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006314:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006318:	f003 0304 	and.w	r3, r3, #4
 800631c:	2b00      	cmp	r3, #0
 800631e:	d05c      	beq.n	80063da <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	441a      	add	r2, r3
 8006328:	2300      	movs	r3, #0
 800632a:	9300      	str	r3, [sp, #0]
 800632c:	2300      	movs	r3, #0
 800632e:	2100      	movs	r1, #0
 8006330:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006332:	f7ff fe09 	bl	8005f48 <xTimerGenericCommand>
 8006336:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006338:	6a3b      	ldr	r3, [r7, #32]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d14d      	bne.n	80063da <prvProcessReceivedCommands+0x196>
 800633e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006342:	f383 8811 	msr	BASEPRI, r3
 8006346:	f3bf 8f6f 	isb	sy
 800634a:	f3bf 8f4f 	dsb	sy
 800634e:	61bb      	str	r3, [r7, #24]
 8006350:	e7fe      	b.n	8006350 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006354:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006358:	f023 0301 	bic.w	r3, r3, #1
 800635c:	b2da      	uxtb	r2, r3
 800635e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006360:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006364:	e039      	b.n	80063da <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006368:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800636c:	f043 0301 	orr.w	r3, r3, #1
 8006370:	b2da      	uxtb	r2, r3
 8006372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006374:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006378:	68ba      	ldr	r2, [r7, #8]
 800637a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800637e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d109      	bne.n	800639a <prvProcessReceivedCommands+0x156>
 8006386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638a:	f383 8811 	msr	BASEPRI, r3
 800638e:	f3bf 8f6f 	isb	sy
 8006392:	f3bf 8f4f 	dsb	sy
 8006396:	617b      	str	r3, [r7, #20]
 8006398:	e7fe      	b.n	8006398 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800639a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639c:	699a      	ldr	r2, [r3, #24]
 800639e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a0:	18d1      	adds	r1, r2, r3
 80063a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063a8:	f7ff ff0a 	bl	80061c0 <prvInsertTimerInActiveList>
					break;
 80063ac:	e015      	b.n	80063da <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80063ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063b4:	f003 0302 	and.w	r3, r3, #2
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d103      	bne.n	80063c4 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80063bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063be:	f000 fbc1 	bl	8006b44 <vPortFree>
 80063c2:	e00a      	b.n	80063da <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063ca:	f023 0301 	bic.w	r3, r3, #1
 80063ce:	b2da      	uxtb	r2, r3
 80063d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80063d6:	e000      	b.n	80063da <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80063d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80063da:	4b07      	ldr	r3, [pc, #28]	; (80063f8 <prvProcessReceivedCommands+0x1b4>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	1d39      	adds	r1, r7, #4
 80063e0:	2200      	movs	r2, #0
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7fe fc3a 	bl	8004c5c <xQueueReceive>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	f47f af2e 	bne.w	800624c <prvProcessReceivedCommands+0x8>
	}
}
 80063f0:	bf00      	nop
 80063f2:	3730      	adds	r7, #48	; 0x30
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	20000f94 	.word	0x20000f94

080063fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b088      	sub	sp, #32
 8006400:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006402:	e047      	b.n	8006494 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006404:	4b2d      	ldr	r3, [pc, #180]	; (80064bc <prvSwitchTimerLists+0xc0>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800640e:	4b2b      	ldr	r3, [pc, #172]	; (80064bc <prvSwitchTimerLists+0xc0>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	3304      	adds	r3, #4
 800641c:	4618      	mov	r0, r3
 800641e:	f7fe f967 	bl	80046f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6a1b      	ldr	r3, [r3, #32]
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006430:	f003 0304 	and.w	r3, r3, #4
 8006434:	2b00      	cmp	r3, #0
 8006436:	d02d      	beq.n	8006494 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	4413      	add	r3, r2
 8006440:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006442:	68ba      	ldr	r2, [r7, #8]
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	429a      	cmp	r2, r3
 8006448:	d90e      	bls.n	8006468 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	68ba      	ldr	r2, [r7, #8]
 800644e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006456:	4b19      	ldr	r3, [pc, #100]	; (80064bc <prvSwitchTimerLists+0xc0>)
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	3304      	adds	r3, #4
 800645e:	4619      	mov	r1, r3
 8006460:	4610      	mov	r0, r2
 8006462:	f7fe f90c 	bl	800467e <vListInsert>
 8006466:	e015      	b.n	8006494 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006468:	2300      	movs	r3, #0
 800646a:	9300      	str	r3, [sp, #0]
 800646c:	2300      	movs	r3, #0
 800646e:	693a      	ldr	r2, [r7, #16]
 8006470:	2100      	movs	r1, #0
 8006472:	68f8      	ldr	r0, [r7, #12]
 8006474:	f7ff fd68 	bl	8005f48 <xTimerGenericCommand>
 8006478:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d109      	bne.n	8006494 <prvSwitchTimerLists+0x98>
 8006480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006484:	f383 8811 	msr	BASEPRI, r3
 8006488:	f3bf 8f6f 	isb	sy
 800648c:	f3bf 8f4f 	dsb	sy
 8006490:	603b      	str	r3, [r7, #0]
 8006492:	e7fe      	b.n	8006492 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006494:	4b09      	ldr	r3, [pc, #36]	; (80064bc <prvSwitchTimerLists+0xc0>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d1b2      	bne.n	8006404 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800649e:	4b07      	ldr	r3, [pc, #28]	; (80064bc <prvSwitchTimerLists+0xc0>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80064a4:	4b06      	ldr	r3, [pc, #24]	; (80064c0 <prvSwitchTimerLists+0xc4>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a04      	ldr	r2, [pc, #16]	; (80064bc <prvSwitchTimerLists+0xc0>)
 80064aa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80064ac:	4a04      	ldr	r2, [pc, #16]	; (80064c0 <prvSwitchTimerLists+0xc4>)
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	6013      	str	r3, [r2, #0]
}
 80064b2:	bf00      	nop
 80064b4:	3718      	adds	r7, #24
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	20000f8c 	.word	0x20000f8c
 80064c0:	20000f90 	.word	0x20000f90

080064c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80064ca:	f000 f95f 	bl	800678c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80064ce:	4b15      	ldr	r3, [pc, #84]	; (8006524 <prvCheckForValidListAndQueue+0x60>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d120      	bne.n	8006518 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80064d6:	4814      	ldr	r0, [pc, #80]	; (8006528 <prvCheckForValidListAndQueue+0x64>)
 80064d8:	f7fe f880 	bl	80045dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80064dc:	4813      	ldr	r0, [pc, #76]	; (800652c <prvCheckForValidListAndQueue+0x68>)
 80064de:	f7fe f87d 	bl	80045dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80064e2:	4b13      	ldr	r3, [pc, #76]	; (8006530 <prvCheckForValidListAndQueue+0x6c>)
 80064e4:	4a10      	ldr	r2, [pc, #64]	; (8006528 <prvCheckForValidListAndQueue+0x64>)
 80064e6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80064e8:	4b12      	ldr	r3, [pc, #72]	; (8006534 <prvCheckForValidListAndQueue+0x70>)
 80064ea:	4a10      	ldr	r2, [pc, #64]	; (800652c <prvCheckForValidListAndQueue+0x68>)
 80064ec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80064ee:	2300      	movs	r3, #0
 80064f0:	9300      	str	r3, [sp, #0]
 80064f2:	4b11      	ldr	r3, [pc, #68]	; (8006538 <prvCheckForValidListAndQueue+0x74>)
 80064f4:	4a11      	ldr	r2, [pc, #68]	; (800653c <prvCheckForValidListAndQueue+0x78>)
 80064f6:	2110      	movs	r1, #16
 80064f8:	200a      	movs	r0, #10
 80064fa:	f7fe f98b 	bl	8004814 <xQueueGenericCreateStatic>
 80064fe:	4602      	mov	r2, r0
 8006500:	4b08      	ldr	r3, [pc, #32]	; (8006524 <prvCheckForValidListAndQueue+0x60>)
 8006502:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006504:	4b07      	ldr	r3, [pc, #28]	; (8006524 <prvCheckForValidListAndQueue+0x60>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d005      	beq.n	8006518 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800650c:	4b05      	ldr	r3, [pc, #20]	; (8006524 <prvCheckForValidListAndQueue+0x60>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	490b      	ldr	r1, [pc, #44]	; (8006540 <prvCheckForValidListAndQueue+0x7c>)
 8006512:	4618      	mov	r0, r3
 8006514:	f7fe fd8e 	bl	8005034 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006518:	f000 f966 	bl	80067e8 <vPortExitCritical>
}
 800651c:	bf00      	nop
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	20000f94 	.word	0x20000f94
 8006528:	20000f64 	.word	0x20000f64
 800652c:	20000f78 	.word	0x20000f78
 8006530:	20000f8c 	.word	0x20000f8c
 8006534:	20000f90 	.word	0x20000f90
 8006538:	20001040 	.word	0x20001040
 800653c:	20000fa0 	.word	0x20000fa0
 8006540:	08009208 	.word	0x08009208

08006544 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	3b04      	subs	r3, #4
 8006554:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800655c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	3b04      	subs	r3, #4
 8006562:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	f023 0201 	bic.w	r2, r3, #1
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	3b04      	subs	r3, #4
 8006572:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006574:	4a0c      	ldr	r2, [pc, #48]	; (80065a8 <pxPortInitialiseStack+0x64>)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	3b14      	subs	r3, #20
 800657e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	3b04      	subs	r3, #4
 800658a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f06f 0202 	mvn.w	r2, #2
 8006592:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	3b20      	subs	r3, #32
 8006598:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800659a:	68fb      	ldr	r3, [r7, #12]
}
 800659c:	4618      	mov	r0, r3
 800659e:	3714      	adds	r7, #20
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr
 80065a8:	080065ad 	.word	0x080065ad

080065ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80065b2:	2300      	movs	r3, #0
 80065b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80065b6:	4b11      	ldr	r3, [pc, #68]	; (80065fc <prvTaskExitError+0x50>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065be:	d009      	beq.n	80065d4 <prvTaskExitError+0x28>
 80065c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c4:	f383 8811 	msr	BASEPRI, r3
 80065c8:	f3bf 8f6f 	isb	sy
 80065cc:	f3bf 8f4f 	dsb	sy
 80065d0:	60fb      	str	r3, [r7, #12]
 80065d2:	e7fe      	b.n	80065d2 <prvTaskExitError+0x26>
 80065d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d8:	f383 8811 	msr	BASEPRI, r3
 80065dc:	f3bf 8f6f 	isb	sy
 80065e0:	f3bf 8f4f 	dsb	sy
 80065e4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80065e6:	bf00      	nop
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d0fc      	beq.n	80065e8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80065ee:	bf00      	nop
 80065f0:	3714      	adds	r7, #20
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	2000000c 	.word	0x2000000c

08006600 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006600:	4b07      	ldr	r3, [pc, #28]	; (8006620 <pxCurrentTCBConst2>)
 8006602:	6819      	ldr	r1, [r3, #0]
 8006604:	6808      	ldr	r0, [r1, #0]
 8006606:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800660a:	f380 8809 	msr	PSP, r0
 800660e:	f3bf 8f6f 	isb	sy
 8006612:	f04f 0000 	mov.w	r0, #0
 8006616:	f380 8811 	msr	BASEPRI, r0
 800661a:	4770      	bx	lr
 800661c:	f3af 8000 	nop.w

08006620 <pxCurrentTCBConst2>:
 8006620:	20000a64 	.word	0x20000a64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006624:	bf00      	nop
 8006626:	bf00      	nop

08006628 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006628:	4808      	ldr	r0, [pc, #32]	; (800664c <prvPortStartFirstTask+0x24>)
 800662a:	6800      	ldr	r0, [r0, #0]
 800662c:	6800      	ldr	r0, [r0, #0]
 800662e:	f380 8808 	msr	MSP, r0
 8006632:	f04f 0000 	mov.w	r0, #0
 8006636:	f380 8814 	msr	CONTROL, r0
 800663a:	b662      	cpsie	i
 800663c:	b661      	cpsie	f
 800663e:	f3bf 8f4f 	dsb	sy
 8006642:	f3bf 8f6f 	isb	sy
 8006646:	df00      	svc	0
 8006648:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800664a:	bf00      	nop
 800664c:	e000ed08 	.word	0xe000ed08

08006650 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b086      	sub	sp, #24
 8006654:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006656:	4b44      	ldr	r3, [pc, #272]	; (8006768 <xPortStartScheduler+0x118>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a44      	ldr	r2, [pc, #272]	; (800676c <xPortStartScheduler+0x11c>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d109      	bne.n	8006674 <xPortStartScheduler+0x24>
 8006660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006664:	f383 8811 	msr	BASEPRI, r3
 8006668:	f3bf 8f6f 	isb	sy
 800666c:	f3bf 8f4f 	dsb	sy
 8006670:	613b      	str	r3, [r7, #16]
 8006672:	e7fe      	b.n	8006672 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006674:	4b3c      	ldr	r3, [pc, #240]	; (8006768 <xPortStartScheduler+0x118>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a3d      	ldr	r2, [pc, #244]	; (8006770 <xPortStartScheduler+0x120>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d109      	bne.n	8006692 <xPortStartScheduler+0x42>
 800667e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006682:	f383 8811 	msr	BASEPRI, r3
 8006686:	f3bf 8f6f 	isb	sy
 800668a:	f3bf 8f4f 	dsb	sy
 800668e:	60fb      	str	r3, [r7, #12]
 8006690:	e7fe      	b.n	8006690 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006692:	4b38      	ldr	r3, [pc, #224]	; (8006774 <xPortStartScheduler+0x124>)
 8006694:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	b2db      	uxtb	r3, r3
 800669c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	22ff      	movs	r2, #255	; 0xff
 80066a2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80066ac:	78fb      	ldrb	r3, [r7, #3]
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80066b4:	b2da      	uxtb	r2, r3
 80066b6:	4b30      	ldr	r3, [pc, #192]	; (8006778 <xPortStartScheduler+0x128>)
 80066b8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80066ba:	4b30      	ldr	r3, [pc, #192]	; (800677c <xPortStartScheduler+0x12c>)
 80066bc:	2207      	movs	r2, #7
 80066be:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066c0:	e009      	b.n	80066d6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80066c2:	4b2e      	ldr	r3, [pc, #184]	; (800677c <xPortStartScheduler+0x12c>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	3b01      	subs	r3, #1
 80066c8:	4a2c      	ldr	r2, [pc, #176]	; (800677c <xPortStartScheduler+0x12c>)
 80066ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80066cc:	78fb      	ldrb	r3, [r7, #3]
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	005b      	lsls	r3, r3, #1
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066d6:	78fb      	ldrb	r3, [r7, #3]
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066de:	2b80      	cmp	r3, #128	; 0x80
 80066e0:	d0ef      	beq.n	80066c2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80066e2:	4b26      	ldr	r3, [pc, #152]	; (800677c <xPortStartScheduler+0x12c>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f1c3 0307 	rsb	r3, r3, #7
 80066ea:	2b04      	cmp	r3, #4
 80066ec:	d009      	beq.n	8006702 <xPortStartScheduler+0xb2>
 80066ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f2:	f383 8811 	msr	BASEPRI, r3
 80066f6:	f3bf 8f6f 	isb	sy
 80066fa:	f3bf 8f4f 	dsb	sy
 80066fe:	60bb      	str	r3, [r7, #8]
 8006700:	e7fe      	b.n	8006700 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006702:	4b1e      	ldr	r3, [pc, #120]	; (800677c <xPortStartScheduler+0x12c>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	021b      	lsls	r3, r3, #8
 8006708:	4a1c      	ldr	r2, [pc, #112]	; (800677c <xPortStartScheduler+0x12c>)
 800670a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800670c:	4b1b      	ldr	r3, [pc, #108]	; (800677c <xPortStartScheduler+0x12c>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006714:	4a19      	ldr	r2, [pc, #100]	; (800677c <xPortStartScheduler+0x12c>)
 8006716:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	b2da      	uxtb	r2, r3
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006720:	4b17      	ldr	r3, [pc, #92]	; (8006780 <xPortStartScheduler+0x130>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a16      	ldr	r2, [pc, #88]	; (8006780 <xPortStartScheduler+0x130>)
 8006726:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800672a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800672c:	4b14      	ldr	r3, [pc, #80]	; (8006780 <xPortStartScheduler+0x130>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a13      	ldr	r2, [pc, #76]	; (8006780 <xPortStartScheduler+0x130>)
 8006732:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006736:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006738:	f000 f8d6 	bl	80068e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800673c:	4b11      	ldr	r3, [pc, #68]	; (8006784 <xPortStartScheduler+0x134>)
 800673e:	2200      	movs	r2, #0
 8006740:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006742:	f000 f8f5 	bl	8006930 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006746:	4b10      	ldr	r3, [pc, #64]	; (8006788 <xPortStartScheduler+0x138>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a0f      	ldr	r2, [pc, #60]	; (8006788 <xPortStartScheduler+0x138>)
 800674c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006750:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006752:	f7ff ff69 	bl	8006628 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006756:	f7ff f871 	bl	800583c <vTaskSwitchContext>
	prvTaskExitError();
 800675a:	f7ff ff27 	bl	80065ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3718      	adds	r7, #24
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}
 8006768:	e000ed00 	.word	0xe000ed00
 800676c:	410fc271 	.word	0x410fc271
 8006770:	410fc270 	.word	0x410fc270
 8006774:	e000e400 	.word	0xe000e400
 8006778:	20001090 	.word	0x20001090
 800677c:	20001094 	.word	0x20001094
 8006780:	e000ed20 	.word	0xe000ed20
 8006784:	2000000c 	.word	0x2000000c
 8006788:	e000ef34 	.word	0xe000ef34

0800678c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006796:	f383 8811 	msr	BASEPRI, r3
 800679a:	f3bf 8f6f 	isb	sy
 800679e:	f3bf 8f4f 	dsb	sy
 80067a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80067a4:	4b0e      	ldr	r3, [pc, #56]	; (80067e0 <vPortEnterCritical+0x54>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	3301      	adds	r3, #1
 80067aa:	4a0d      	ldr	r2, [pc, #52]	; (80067e0 <vPortEnterCritical+0x54>)
 80067ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80067ae:	4b0c      	ldr	r3, [pc, #48]	; (80067e0 <vPortEnterCritical+0x54>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d10e      	bne.n	80067d4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80067b6:	4b0b      	ldr	r3, [pc, #44]	; (80067e4 <vPortEnterCritical+0x58>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d009      	beq.n	80067d4 <vPortEnterCritical+0x48>
 80067c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c4:	f383 8811 	msr	BASEPRI, r3
 80067c8:	f3bf 8f6f 	isb	sy
 80067cc:	f3bf 8f4f 	dsb	sy
 80067d0:	603b      	str	r3, [r7, #0]
 80067d2:	e7fe      	b.n	80067d2 <vPortEnterCritical+0x46>
	}
}
 80067d4:	bf00      	nop
 80067d6:	370c      	adds	r7, #12
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr
 80067e0:	2000000c 	.word	0x2000000c
 80067e4:	e000ed04 	.word	0xe000ed04

080067e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80067ee:	4b11      	ldr	r3, [pc, #68]	; (8006834 <vPortExitCritical+0x4c>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d109      	bne.n	800680a <vPortExitCritical+0x22>
 80067f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fa:	f383 8811 	msr	BASEPRI, r3
 80067fe:	f3bf 8f6f 	isb	sy
 8006802:	f3bf 8f4f 	dsb	sy
 8006806:	607b      	str	r3, [r7, #4]
 8006808:	e7fe      	b.n	8006808 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800680a:	4b0a      	ldr	r3, [pc, #40]	; (8006834 <vPortExitCritical+0x4c>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	3b01      	subs	r3, #1
 8006810:	4a08      	ldr	r2, [pc, #32]	; (8006834 <vPortExitCritical+0x4c>)
 8006812:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006814:	4b07      	ldr	r3, [pc, #28]	; (8006834 <vPortExitCritical+0x4c>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d104      	bne.n	8006826 <vPortExitCritical+0x3e>
 800681c:	2300      	movs	r3, #0
 800681e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006826:	bf00      	nop
 8006828:	370c      	adds	r7, #12
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	2000000c 	.word	0x2000000c
	...

08006840 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006840:	f3ef 8009 	mrs	r0, PSP
 8006844:	f3bf 8f6f 	isb	sy
 8006848:	4b15      	ldr	r3, [pc, #84]	; (80068a0 <pxCurrentTCBConst>)
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	f01e 0f10 	tst.w	lr, #16
 8006850:	bf08      	it	eq
 8006852:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006856:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800685a:	6010      	str	r0, [r2, #0]
 800685c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006860:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006864:	f380 8811 	msr	BASEPRI, r0
 8006868:	f3bf 8f4f 	dsb	sy
 800686c:	f3bf 8f6f 	isb	sy
 8006870:	f7fe ffe4 	bl	800583c <vTaskSwitchContext>
 8006874:	f04f 0000 	mov.w	r0, #0
 8006878:	f380 8811 	msr	BASEPRI, r0
 800687c:	bc09      	pop	{r0, r3}
 800687e:	6819      	ldr	r1, [r3, #0]
 8006880:	6808      	ldr	r0, [r1, #0]
 8006882:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006886:	f01e 0f10 	tst.w	lr, #16
 800688a:	bf08      	it	eq
 800688c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006890:	f380 8809 	msr	PSP, r0
 8006894:	f3bf 8f6f 	isb	sy
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop
 800689c:	f3af 8000 	nop.w

080068a0 <pxCurrentTCBConst>:
 80068a0:	20000a64 	.word	0x20000a64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80068a4:	bf00      	nop
 80068a6:	bf00      	nop

080068a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
	__asm volatile
 80068ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b2:	f383 8811 	msr	BASEPRI, r3
 80068b6:	f3bf 8f6f 	isb	sy
 80068ba:	f3bf 8f4f 	dsb	sy
 80068be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80068c0:	f7fe ff04 	bl	80056cc <xTaskIncrementTick>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d003      	beq.n	80068d2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80068ca:	4b06      	ldr	r3, [pc, #24]	; (80068e4 <SysTick_Handler+0x3c>)
 80068cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068d0:	601a      	str	r2, [r3, #0]
 80068d2:	2300      	movs	r3, #0
 80068d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80068dc:	bf00      	nop
 80068de:	3708      	adds	r7, #8
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	e000ed04 	.word	0xe000ed04

080068e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80068e8:	b480      	push	{r7}
 80068ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80068ec:	4b0b      	ldr	r3, [pc, #44]	; (800691c <vPortSetupTimerInterrupt+0x34>)
 80068ee:	2200      	movs	r2, #0
 80068f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80068f2:	4b0b      	ldr	r3, [pc, #44]	; (8006920 <vPortSetupTimerInterrupt+0x38>)
 80068f4:	2200      	movs	r2, #0
 80068f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80068f8:	4b0a      	ldr	r3, [pc, #40]	; (8006924 <vPortSetupTimerInterrupt+0x3c>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a0a      	ldr	r2, [pc, #40]	; (8006928 <vPortSetupTimerInterrupt+0x40>)
 80068fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006902:	099b      	lsrs	r3, r3, #6
 8006904:	4a09      	ldr	r2, [pc, #36]	; (800692c <vPortSetupTimerInterrupt+0x44>)
 8006906:	3b01      	subs	r3, #1
 8006908:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800690a:	4b04      	ldr	r3, [pc, #16]	; (800691c <vPortSetupTimerInterrupt+0x34>)
 800690c:	2207      	movs	r2, #7
 800690e:	601a      	str	r2, [r3, #0]
}
 8006910:	bf00      	nop
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr
 800691a:	bf00      	nop
 800691c:	e000e010 	.word	0xe000e010
 8006920:	e000e018 	.word	0xe000e018
 8006924:	20000000 	.word	0x20000000
 8006928:	10624dd3 	.word	0x10624dd3
 800692c:	e000e014 	.word	0xe000e014

08006930 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006930:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006940 <vPortEnableVFP+0x10>
 8006934:	6801      	ldr	r1, [r0, #0]
 8006936:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800693a:	6001      	str	r1, [r0, #0]
 800693c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800693e:	bf00      	nop
 8006940:	e000ed88 	.word	0xe000ed88

08006944 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800694a:	f3ef 8305 	mrs	r3, IPSR
 800694e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2b0f      	cmp	r3, #15
 8006954:	d913      	bls.n	800697e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006956:	4a16      	ldr	r2, [pc, #88]	; (80069b0 <vPortValidateInterruptPriority+0x6c>)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	4413      	add	r3, r2
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006960:	4b14      	ldr	r3, [pc, #80]	; (80069b4 <vPortValidateInterruptPriority+0x70>)
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	7afa      	ldrb	r2, [r7, #11]
 8006966:	429a      	cmp	r2, r3
 8006968:	d209      	bcs.n	800697e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800696a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800696e:	f383 8811 	msr	BASEPRI, r3
 8006972:	f3bf 8f6f 	isb	sy
 8006976:	f3bf 8f4f 	dsb	sy
 800697a:	607b      	str	r3, [r7, #4]
 800697c:	e7fe      	b.n	800697c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800697e:	4b0e      	ldr	r3, [pc, #56]	; (80069b8 <vPortValidateInterruptPriority+0x74>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006986:	4b0d      	ldr	r3, [pc, #52]	; (80069bc <vPortValidateInterruptPriority+0x78>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	429a      	cmp	r2, r3
 800698c:	d909      	bls.n	80069a2 <vPortValidateInterruptPriority+0x5e>
 800698e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006992:	f383 8811 	msr	BASEPRI, r3
 8006996:	f3bf 8f6f 	isb	sy
 800699a:	f3bf 8f4f 	dsb	sy
 800699e:	603b      	str	r3, [r7, #0]
 80069a0:	e7fe      	b.n	80069a0 <vPortValidateInterruptPriority+0x5c>
	}
 80069a2:	bf00      	nop
 80069a4:	3714      	adds	r7, #20
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	e000e3f0 	.word	0xe000e3f0
 80069b4:	20001090 	.word	0x20001090
 80069b8:	e000ed0c 	.word	0xe000ed0c
 80069bc:	20001094 	.word	0x20001094

080069c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b08a      	sub	sp, #40	; 0x28
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80069c8:	2300      	movs	r3, #0
 80069ca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80069cc:	f7fe fdc4 	bl	8005558 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80069d0:	4b57      	ldr	r3, [pc, #348]	; (8006b30 <pvPortMalloc+0x170>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d101      	bne.n	80069dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80069d8:	f000 f90c 	bl	8006bf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80069dc:	4b55      	ldr	r3, [pc, #340]	; (8006b34 <pvPortMalloc+0x174>)
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4013      	ands	r3, r2
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f040 808c 	bne.w	8006b02 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d01c      	beq.n	8006a2a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80069f0:	2208      	movs	r2, #8
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4413      	add	r3, r2
 80069f6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f003 0307 	and.w	r3, r3, #7
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d013      	beq.n	8006a2a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f023 0307 	bic.w	r3, r3, #7
 8006a08:	3308      	adds	r3, #8
 8006a0a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f003 0307 	and.w	r3, r3, #7
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d009      	beq.n	8006a2a <pvPortMalloc+0x6a>
 8006a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1a:	f383 8811 	msr	BASEPRI, r3
 8006a1e:	f3bf 8f6f 	isb	sy
 8006a22:	f3bf 8f4f 	dsb	sy
 8006a26:	617b      	str	r3, [r7, #20]
 8006a28:	e7fe      	b.n	8006a28 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d068      	beq.n	8006b02 <pvPortMalloc+0x142>
 8006a30:	4b41      	ldr	r3, [pc, #260]	; (8006b38 <pvPortMalloc+0x178>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d863      	bhi.n	8006b02 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006a3a:	4b40      	ldr	r3, [pc, #256]	; (8006b3c <pvPortMalloc+0x17c>)
 8006a3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006a3e:	4b3f      	ldr	r3, [pc, #252]	; (8006b3c <pvPortMalloc+0x17c>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a44:	e004      	b.n	8006a50 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d903      	bls.n	8006a62 <pvPortMalloc+0xa2>
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1f1      	bne.n	8006a46 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006a62:	4b33      	ldr	r3, [pc, #204]	; (8006b30 <pvPortMalloc+0x170>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d04a      	beq.n	8006b02 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a6c:	6a3b      	ldr	r3, [r7, #32]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2208      	movs	r2, #8
 8006a72:	4413      	add	r3, r2
 8006a74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	6a3b      	ldr	r3, [r7, #32]
 8006a7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a80:	685a      	ldr	r2, [r3, #4]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	1ad2      	subs	r2, r2, r3
 8006a86:	2308      	movs	r3, #8
 8006a88:	005b      	lsls	r3, r3, #1
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d91e      	bls.n	8006acc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4413      	add	r3, r2
 8006a94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	f003 0307 	and.w	r3, r3, #7
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d009      	beq.n	8006ab4 <pvPortMalloc+0xf4>
 8006aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa4:	f383 8811 	msr	BASEPRI, r3
 8006aa8:	f3bf 8f6f 	isb	sy
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	613b      	str	r3, [r7, #16]
 8006ab2:	e7fe      	b.n	8006ab2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab6:	685a      	ldr	r2, [r3, #4]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	1ad2      	subs	r2, r2, r3
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ac6:	69b8      	ldr	r0, [r7, #24]
 8006ac8:	f000 f8f6 	bl	8006cb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006acc:	4b1a      	ldr	r3, [pc, #104]	; (8006b38 <pvPortMalloc+0x178>)
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	4a18      	ldr	r2, [pc, #96]	; (8006b38 <pvPortMalloc+0x178>)
 8006ad8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006ada:	4b17      	ldr	r3, [pc, #92]	; (8006b38 <pvPortMalloc+0x178>)
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	4b18      	ldr	r3, [pc, #96]	; (8006b40 <pvPortMalloc+0x180>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d203      	bcs.n	8006aee <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006ae6:	4b14      	ldr	r3, [pc, #80]	; (8006b38 <pvPortMalloc+0x178>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a15      	ldr	r2, [pc, #84]	; (8006b40 <pvPortMalloc+0x180>)
 8006aec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af0:	685a      	ldr	r2, [r3, #4]
 8006af2:	4b10      	ldr	r3, [pc, #64]	; (8006b34 <pvPortMalloc+0x174>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	431a      	orrs	r2, r3
 8006af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afe:	2200      	movs	r2, #0
 8006b00:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006b02:	f7fe fd37 	bl	8005574 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	f003 0307 	and.w	r3, r3, #7
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d009      	beq.n	8006b24 <pvPortMalloc+0x164>
 8006b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b14:	f383 8811 	msr	BASEPRI, r3
 8006b18:	f3bf 8f6f 	isb	sy
 8006b1c:	f3bf 8f4f 	dsb	sy
 8006b20:	60fb      	str	r3, [r7, #12]
 8006b22:	e7fe      	b.n	8006b22 <pvPortMalloc+0x162>
	return pvReturn;
 8006b24:	69fb      	ldr	r3, [r7, #28]
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3728      	adds	r7, #40	; 0x28
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	20004ca0 	.word	0x20004ca0
 8006b34:	20004cac 	.word	0x20004cac
 8006b38:	20004ca4 	.word	0x20004ca4
 8006b3c:	20004c98 	.word	0x20004c98
 8006b40:	20004ca8 	.word	0x20004ca8

08006b44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b086      	sub	sp, #24
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d046      	beq.n	8006be4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006b56:	2308      	movs	r3, #8
 8006b58:	425b      	negs	r3, r3
 8006b5a:	697a      	ldr	r2, [r7, #20]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	685a      	ldr	r2, [r3, #4]
 8006b68:	4b20      	ldr	r3, [pc, #128]	; (8006bec <vPortFree+0xa8>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d109      	bne.n	8006b86 <vPortFree+0x42>
 8006b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b76:	f383 8811 	msr	BASEPRI, r3
 8006b7a:	f3bf 8f6f 	isb	sy
 8006b7e:	f3bf 8f4f 	dsb	sy
 8006b82:	60fb      	str	r3, [r7, #12]
 8006b84:	e7fe      	b.n	8006b84 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d009      	beq.n	8006ba2 <vPortFree+0x5e>
 8006b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b92:	f383 8811 	msr	BASEPRI, r3
 8006b96:	f3bf 8f6f 	isb	sy
 8006b9a:	f3bf 8f4f 	dsb	sy
 8006b9e:	60bb      	str	r3, [r7, #8]
 8006ba0:	e7fe      	b.n	8006ba0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	685a      	ldr	r2, [r3, #4]
 8006ba6:	4b11      	ldr	r3, [pc, #68]	; (8006bec <vPortFree+0xa8>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4013      	ands	r3, r2
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d019      	beq.n	8006be4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d115      	bne.n	8006be4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	685a      	ldr	r2, [r3, #4]
 8006bbc:	4b0b      	ldr	r3, [pc, #44]	; (8006bec <vPortFree+0xa8>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	43db      	mvns	r3, r3
 8006bc2:	401a      	ands	r2, r3
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006bc8:	f7fe fcc6 	bl	8005558 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	685a      	ldr	r2, [r3, #4]
 8006bd0:	4b07      	ldr	r3, [pc, #28]	; (8006bf0 <vPortFree+0xac>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	4a06      	ldr	r2, [pc, #24]	; (8006bf0 <vPortFree+0xac>)
 8006bd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006bda:	6938      	ldr	r0, [r7, #16]
 8006bdc:	f000 f86c 	bl	8006cb8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006be0:	f7fe fcc8 	bl	8005574 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006be4:	bf00      	nop
 8006be6:	3718      	adds	r7, #24
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	20004cac 	.word	0x20004cac
 8006bf0:	20004ca4 	.word	0x20004ca4

08006bf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b085      	sub	sp, #20
 8006bf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006bfa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006bfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006c00:	4b27      	ldr	r3, [pc, #156]	; (8006ca0 <prvHeapInit+0xac>)
 8006c02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f003 0307 	and.w	r3, r3, #7
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d00c      	beq.n	8006c28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	3307      	adds	r3, #7
 8006c12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f023 0307 	bic.w	r3, r3, #7
 8006c1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006c1c:	68ba      	ldr	r2, [r7, #8]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	4a1f      	ldr	r2, [pc, #124]	; (8006ca0 <prvHeapInit+0xac>)
 8006c24:	4413      	add	r3, r2
 8006c26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006c2c:	4a1d      	ldr	r2, [pc, #116]	; (8006ca4 <prvHeapInit+0xb0>)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006c32:	4b1c      	ldr	r3, [pc, #112]	; (8006ca4 <prvHeapInit+0xb0>)
 8006c34:	2200      	movs	r2, #0
 8006c36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	68ba      	ldr	r2, [r7, #8]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006c40:	2208      	movs	r2, #8
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	1a9b      	subs	r3, r3, r2
 8006c46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f023 0307 	bic.w	r3, r3, #7
 8006c4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	4a15      	ldr	r2, [pc, #84]	; (8006ca8 <prvHeapInit+0xb4>)
 8006c54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006c56:	4b14      	ldr	r3, [pc, #80]	; (8006ca8 <prvHeapInit+0xb4>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c5e:	4b12      	ldr	r3, [pc, #72]	; (8006ca8 <prvHeapInit+0xb4>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2200      	movs	r2, #0
 8006c64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	1ad2      	subs	r2, r2, r3
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c74:	4b0c      	ldr	r3, [pc, #48]	; (8006ca8 <prvHeapInit+0xb4>)
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	4a0a      	ldr	r2, [pc, #40]	; (8006cac <prvHeapInit+0xb8>)
 8006c82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	4a09      	ldr	r2, [pc, #36]	; (8006cb0 <prvHeapInit+0xbc>)
 8006c8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c8c:	4b09      	ldr	r3, [pc, #36]	; (8006cb4 <prvHeapInit+0xc0>)
 8006c8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006c92:	601a      	str	r2, [r3, #0]
}
 8006c94:	bf00      	nop
 8006c96:	3714      	adds	r7, #20
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr
 8006ca0:	20001098 	.word	0x20001098
 8006ca4:	20004c98 	.word	0x20004c98
 8006ca8:	20004ca0 	.word	0x20004ca0
 8006cac:	20004ca8 	.word	0x20004ca8
 8006cb0:	20004ca4 	.word	0x20004ca4
 8006cb4:	20004cac 	.word	0x20004cac

08006cb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b085      	sub	sp, #20
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006cc0:	4b28      	ldr	r3, [pc, #160]	; (8006d64 <prvInsertBlockIntoFreeList+0xac>)
 8006cc2:	60fb      	str	r3, [r7, #12]
 8006cc4:	e002      	b.n	8006ccc <prvInsertBlockIntoFreeList+0x14>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	60fb      	str	r3, [r7, #12]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d8f7      	bhi.n	8006cc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	68ba      	ldr	r2, [r7, #8]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d108      	bne.n	8006cfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	685a      	ldr	r2, [r3, #4]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	441a      	add	r2, r3
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	68ba      	ldr	r2, [r7, #8]
 8006d04:	441a      	add	r2, r3
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d118      	bne.n	8006d40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	4b15      	ldr	r3, [pc, #84]	; (8006d68 <prvInsertBlockIntoFreeList+0xb0>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d00d      	beq.n	8006d36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	685a      	ldr	r2, [r3, #4]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	441a      	add	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	601a      	str	r2, [r3, #0]
 8006d34:	e008      	b.n	8006d48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d36:	4b0c      	ldr	r3, [pc, #48]	; (8006d68 <prvInsertBlockIntoFreeList+0xb0>)
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	601a      	str	r2, [r3, #0]
 8006d3e:	e003      	b.n	8006d48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d002      	beq.n	8006d56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d56:	bf00      	nop
 8006d58:	3714      	adds	r7, #20
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	20004c98 	.word	0x20004c98
 8006d68:	20004ca0 	.word	0x20004ca0

08006d6c <_ZdlPvj>:
 8006d6c:	f000 b800 	b.w	8006d70 <_ZdlPv>

08006d70 <_ZdlPv>:
 8006d70:	f000 b832 	b.w	8006dd8 <free>

08006d74 <__errno>:
 8006d74:	4b01      	ldr	r3, [pc, #4]	; (8006d7c <__errno+0x8>)
 8006d76:	6818      	ldr	r0, [r3, #0]
 8006d78:	4770      	bx	lr
 8006d7a:	bf00      	nop
 8006d7c:	20000010 	.word	0x20000010

08006d80 <__libc_init_array>:
 8006d80:	b570      	push	{r4, r5, r6, lr}
 8006d82:	4e0d      	ldr	r6, [pc, #52]	; (8006db8 <__libc_init_array+0x38>)
 8006d84:	4c0d      	ldr	r4, [pc, #52]	; (8006dbc <__libc_init_array+0x3c>)
 8006d86:	1ba4      	subs	r4, r4, r6
 8006d88:	10a4      	asrs	r4, r4, #2
 8006d8a:	2500      	movs	r5, #0
 8006d8c:	42a5      	cmp	r5, r4
 8006d8e:	d109      	bne.n	8006da4 <__libc_init_array+0x24>
 8006d90:	4e0b      	ldr	r6, [pc, #44]	; (8006dc0 <__libc_init_array+0x40>)
 8006d92:	4c0c      	ldr	r4, [pc, #48]	; (8006dc4 <__libc_init_array+0x44>)
 8006d94:	f002 f9cc 	bl	8009130 <_init>
 8006d98:	1ba4      	subs	r4, r4, r6
 8006d9a:	10a4      	asrs	r4, r4, #2
 8006d9c:	2500      	movs	r5, #0
 8006d9e:	42a5      	cmp	r5, r4
 8006da0:	d105      	bne.n	8006dae <__libc_init_array+0x2e>
 8006da2:	bd70      	pop	{r4, r5, r6, pc}
 8006da4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006da8:	4798      	blx	r3
 8006daa:	3501      	adds	r5, #1
 8006dac:	e7ee      	b.n	8006d8c <__libc_init_array+0xc>
 8006dae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006db2:	4798      	blx	r3
 8006db4:	3501      	adds	r5, #1
 8006db6:	e7f2      	b.n	8006d9e <__libc_init_array+0x1e>
 8006db8:	080094e0 	.word	0x080094e0
 8006dbc:	080094e0 	.word	0x080094e0
 8006dc0:	080094e0 	.word	0x080094e0
 8006dc4:	080094e8 	.word	0x080094e8

08006dc8 <malloc>:
 8006dc8:	4b02      	ldr	r3, [pc, #8]	; (8006dd4 <malloc+0xc>)
 8006dca:	4601      	mov	r1, r0
 8006dcc:	6818      	ldr	r0, [r3, #0]
 8006dce:	f000 b86d 	b.w	8006eac <_malloc_r>
 8006dd2:	bf00      	nop
 8006dd4:	20000010 	.word	0x20000010

08006dd8 <free>:
 8006dd8:	4b02      	ldr	r3, [pc, #8]	; (8006de4 <free+0xc>)
 8006dda:	4601      	mov	r1, r0
 8006ddc:	6818      	ldr	r0, [r3, #0]
 8006dde:	f000 b817 	b.w	8006e10 <_free_r>
 8006de2:	bf00      	nop
 8006de4:	20000010 	.word	0x20000010

08006de8 <memcpy>:
 8006de8:	b510      	push	{r4, lr}
 8006dea:	1e43      	subs	r3, r0, #1
 8006dec:	440a      	add	r2, r1
 8006dee:	4291      	cmp	r1, r2
 8006df0:	d100      	bne.n	8006df4 <memcpy+0xc>
 8006df2:	bd10      	pop	{r4, pc}
 8006df4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006df8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006dfc:	e7f7      	b.n	8006dee <memcpy+0x6>

08006dfe <memset>:
 8006dfe:	4402      	add	r2, r0
 8006e00:	4603      	mov	r3, r0
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d100      	bne.n	8006e08 <memset+0xa>
 8006e06:	4770      	bx	lr
 8006e08:	f803 1b01 	strb.w	r1, [r3], #1
 8006e0c:	e7f9      	b.n	8006e02 <memset+0x4>
	...

08006e10 <_free_r>:
 8006e10:	b538      	push	{r3, r4, r5, lr}
 8006e12:	4605      	mov	r5, r0
 8006e14:	2900      	cmp	r1, #0
 8006e16:	d045      	beq.n	8006ea4 <_free_r+0x94>
 8006e18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e1c:	1f0c      	subs	r4, r1, #4
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	bfb8      	it	lt
 8006e22:	18e4      	addlt	r4, r4, r3
 8006e24:	f001 fa46 	bl	80082b4 <__malloc_lock>
 8006e28:	4a1f      	ldr	r2, [pc, #124]	; (8006ea8 <_free_r+0x98>)
 8006e2a:	6813      	ldr	r3, [r2, #0]
 8006e2c:	4610      	mov	r0, r2
 8006e2e:	b933      	cbnz	r3, 8006e3e <_free_r+0x2e>
 8006e30:	6063      	str	r3, [r4, #4]
 8006e32:	6014      	str	r4, [r2, #0]
 8006e34:	4628      	mov	r0, r5
 8006e36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e3a:	f001 ba3c 	b.w	80082b6 <__malloc_unlock>
 8006e3e:	42a3      	cmp	r3, r4
 8006e40:	d90c      	bls.n	8006e5c <_free_r+0x4c>
 8006e42:	6821      	ldr	r1, [r4, #0]
 8006e44:	1862      	adds	r2, r4, r1
 8006e46:	4293      	cmp	r3, r2
 8006e48:	bf04      	itt	eq
 8006e4a:	681a      	ldreq	r2, [r3, #0]
 8006e4c:	685b      	ldreq	r3, [r3, #4]
 8006e4e:	6063      	str	r3, [r4, #4]
 8006e50:	bf04      	itt	eq
 8006e52:	1852      	addeq	r2, r2, r1
 8006e54:	6022      	streq	r2, [r4, #0]
 8006e56:	6004      	str	r4, [r0, #0]
 8006e58:	e7ec      	b.n	8006e34 <_free_r+0x24>
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	685a      	ldr	r2, [r3, #4]
 8006e5e:	b10a      	cbz	r2, 8006e64 <_free_r+0x54>
 8006e60:	42a2      	cmp	r2, r4
 8006e62:	d9fa      	bls.n	8006e5a <_free_r+0x4a>
 8006e64:	6819      	ldr	r1, [r3, #0]
 8006e66:	1858      	adds	r0, r3, r1
 8006e68:	42a0      	cmp	r0, r4
 8006e6a:	d10b      	bne.n	8006e84 <_free_r+0x74>
 8006e6c:	6820      	ldr	r0, [r4, #0]
 8006e6e:	4401      	add	r1, r0
 8006e70:	1858      	adds	r0, r3, r1
 8006e72:	4282      	cmp	r2, r0
 8006e74:	6019      	str	r1, [r3, #0]
 8006e76:	d1dd      	bne.n	8006e34 <_free_r+0x24>
 8006e78:	6810      	ldr	r0, [r2, #0]
 8006e7a:	6852      	ldr	r2, [r2, #4]
 8006e7c:	605a      	str	r2, [r3, #4]
 8006e7e:	4401      	add	r1, r0
 8006e80:	6019      	str	r1, [r3, #0]
 8006e82:	e7d7      	b.n	8006e34 <_free_r+0x24>
 8006e84:	d902      	bls.n	8006e8c <_free_r+0x7c>
 8006e86:	230c      	movs	r3, #12
 8006e88:	602b      	str	r3, [r5, #0]
 8006e8a:	e7d3      	b.n	8006e34 <_free_r+0x24>
 8006e8c:	6820      	ldr	r0, [r4, #0]
 8006e8e:	1821      	adds	r1, r4, r0
 8006e90:	428a      	cmp	r2, r1
 8006e92:	bf04      	itt	eq
 8006e94:	6811      	ldreq	r1, [r2, #0]
 8006e96:	6852      	ldreq	r2, [r2, #4]
 8006e98:	6062      	str	r2, [r4, #4]
 8006e9a:	bf04      	itt	eq
 8006e9c:	1809      	addeq	r1, r1, r0
 8006e9e:	6021      	streq	r1, [r4, #0]
 8006ea0:	605c      	str	r4, [r3, #4]
 8006ea2:	e7c7      	b.n	8006e34 <_free_r+0x24>
 8006ea4:	bd38      	pop	{r3, r4, r5, pc}
 8006ea6:	bf00      	nop
 8006ea8:	20004cb0 	.word	0x20004cb0

08006eac <_malloc_r>:
 8006eac:	b570      	push	{r4, r5, r6, lr}
 8006eae:	1ccd      	adds	r5, r1, #3
 8006eb0:	f025 0503 	bic.w	r5, r5, #3
 8006eb4:	3508      	adds	r5, #8
 8006eb6:	2d0c      	cmp	r5, #12
 8006eb8:	bf38      	it	cc
 8006eba:	250c      	movcc	r5, #12
 8006ebc:	2d00      	cmp	r5, #0
 8006ebe:	4606      	mov	r6, r0
 8006ec0:	db01      	blt.n	8006ec6 <_malloc_r+0x1a>
 8006ec2:	42a9      	cmp	r1, r5
 8006ec4:	d903      	bls.n	8006ece <_malloc_r+0x22>
 8006ec6:	230c      	movs	r3, #12
 8006ec8:	6033      	str	r3, [r6, #0]
 8006eca:	2000      	movs	r0, #0
 8006ecc:	bd70      	pop	{r4, r5, r6, pc}
 8006ece:	f001 f9f1 	bl	80082b4 <__malloc_lock>
 8006ed2:	4a21      	ldr	r2, [pc, #132]	; (8006f58 <_malloc_r+0xac>)
 8006ed4:	6814      	ldr	r4, [r2, #0]
 8006ed6:	4621      	mov	r1, r4
 8006ed8:	b991      	cbnz	r1, 8006f00 <_malloc_r+0x54>
 8006eda:	4c20      	ldr	r4, [pc, #128]	; (8006f5c <_malloc_r+0xb0>)
 8006edc:	6823      	ldr	r3, [r4, #0]
 8006ede:	b91b      	cbnz	r3, 8006ee8 <_malloc_r+0x3c>
 8006ee0:	4630      	mov	r0, r6
 8006ee2:	f000 f83d 	bl	8006f60 <_sbrk_r>
 8006ee6:	6020      	str	r0, [r4, #0]
 8006ee8:	4629      	mov	r1, r5
 8006eea:	4630      	mov	r0, r6
 8006eec:	f000 f838 	bl	8006f60 <_sbrk_r>
 8006ef0:	1c43      	adds	r3, r0, #1
 8006ef2:	d124      	bne.n	8006f3e <_malloc_r+0x92>
 8006ef4:	230c      	movs	r3, #12
 8006ef6:	6033      	str	r3, [r6, #0]
 8006ef8:	4630      	mov	r0, r6
 8006efa:	f001 f9dc 	bl	80082b6 <__malloc_unlock>
 8006efe:	e7e4      	b.n	8006eca <_malloc_r+0x1e>
 8006f00:	680b      	ldr	r3, [r1, #0]
 8006f02:	1b5b      	subs	r3, r3, r5
 8006f04:	d418      	bmi.n	8006f38 <_malloc_r+0x8c>
 8006f06:	2b0b      	cmp	r3, #11
 8006f08:	d90f      	bls.n	8006f2a <_malloc_r+0x7e>
 8006f0a:	600b      	str	r3, [r1, #0]
 8006f0c:	50cd      	str	r5, [r1, r3]
 8006f0e:	18cc      	adds	r4, r1, r3
 8006f10:	4630      	mov	r0, r6
 8006f12:	f001 f9d0 	bl	80082b6 <__malloc_unlock>
 8006f16:	f104 000b 	add.w	r0, r4, #11
 8006f1a:	1d23      	adds	r3, r4, #4
 8006f1c:	f020 0007 	bic.w	r0, r0, #7
 8006f20:	1ac3      	subs	r3, r0, r3
 8006f22:	d0d3      	beq.n	8006ecc <_malloc_r+0x20>
 8006f24:	425a      	negs	r2, r3
 8006f26:	50e2      	str	r2, [r4, r3]
 8006f28:	e7d0      	b.n	8006ecc <_malloc_r+0x20>
 8006f2a:	428c      	cmp	r4, r1
 8006f2c:	684b      	ldr	r3, [r1, #4]
 8006f2e:	bf16      	itet	ne
 8006f30:	6063      	strne	r3, [r4, #4]
 8006f32:	6013      	streq	r3, [r2, #0]
 8006f34:	460c      	movne	r4, r1
 8006f36:	e7eb      	b.n	8006f10 <_malloc_r+0x64>
 8006f38:	460c      	mov	r4, r1
 8006f3a:	6849      	ldr	r1, [r1, #4]
 8006f3c:	e7cc      	b.n	8006ed8 <_malloc_r+0x2c>
 8006f3e:	1cc4      	adds	r4, r0, #3
 8006f40:	f024 0403 	bic.w	r4, r4, #3
 8006f44:	42a0      	cmp	r0, r4
 8006f46:	d005      	beq.n	8006f54 <_malloc_r+0xa8>
 8006f48:	1a21      	subs	r1, r4, r0
 8006f4a:	4630      	mov	r0, r6
 8006f4c:	f000 f808 	bl	8006f60 <_sbrk_r>
 8006f50:	3001      	adds	r0, #1
 8006f52:	d0cf      	beq.n	8006ef4 <_malloc_r+0x48>
 8006f54:	6025      	str	r5, [r4, #0]
 8006f56:	e7db      	b.n	8006f10 <_malloc_r+0x64>
 8006f58:	20004cb0 	.word	0x20004cb0
 8006f5c:	20004cb4 	.word	0x20004cb4

08006f60 <_sbrk_r>:
 8006f60:	b538      	push	{r3, r4, r5, lr}
 8006f62:	4c06      	ldr	r4, [pc, #24]	; (8006f7c <_sbrk_r+0x1c>)
 8006f64:	2300      	movs	r3, #0
 8006f66:	4605      	mov	r5, r0
 8006f68:	4608      	mov	r0, r1
 8006f6a:	6023      	str	r3, [r4, #0]
 8006f6c:	f7fb f8c4 	bl	80020f8 <_sbrk>
 8006f70:	1c43      	adds	r3, r0, #1
 8006f72:	d102      	bne.n	8006f7a <_sbrk_r+0x1a>
 8006f74:	6823      	ldr	r3, [r4, #0]
 8006f76:	b103      	cbz	r3, 8006f7a <_sbrk_r+0x1a>
 8006f78:	602b      	str	r3, [r5, #0]
 8006f7a:	bd38      	pop	{r3, r4, r5, pc}
 8006f7c:	20004dbc 	.word	0x20004dbc

08006f80 <strcpy>:
 8006f80:	4603      	mov	r3, r0
 8006f82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f86:	f803 2b01 	strb.w	r2, [r3], #1
 8006f8a:	2a00      	cmp	r2, #0
 8006f8c:	d1f9      	bne.n	8006f82 <strcpy+0x2>
 8006f8e:	4770      	bx	lr

08006f90 <strncmp>:
 8006f90:	b510      	push	{r4, lr}
 8006f92:	b16a      	cbz	r2, 8006fb0 <strncmp+0x20>
 8006f94:	3901      	subs	r1, #1
 8006f96:	1884      	adds	r4, r0, r2
 8006f98:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006f9c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d103      	bne.n	8006fac <strncmp+0x1c>
 8006fa4:	42a0      	cmp	r0, r4
 8006fa6:	d001      	beq.n	8006fac <strncmp+0x1c>
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d1f5      	bne.n	8006f98 <strncmp+0x8>
 8006fac:	1a98      	subs	r0, r3, r2
 8006fae:	bd10      	pop	{r4, pc}
 8006fb0:	4610      	mov	r0, r2
 8006fb2:	e7fc      	b.n	8006fae <strncmp+0x1e>

08006fb4 <sulp>:
 8006fb4:	b570      	push	{r4, r5, r6, lr}
 8006fb6:	4604      	mov	r4, r0
 8006fb8:	460d      	mov	r5, r1
 8006fba:	ec45 4b10 	vmov	d0, r4, r5
 8006fbe:	4616      	mov	r6, r2
 8006fc0:	f001 fc46 	bl	8008850 <__ulp>
 8006fc4:	ec51 0b10 	vmov	r0, r1, d0
 8006fc8:	b17e      	cbz	r6, 8006fea <sulp+0x36>
 8006fca:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006fce:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	dd09      	ble.n	8006fea <sulp+0x36>
 8006fd6:	051b      	lsls	r3, r3, #20
 8006fd8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006fdc:	2400      	movs	r4, #0
 8006fde:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006fe2:	4622      	mov	r2, r4
 8006fe4:	462b      	mov	r3, r5
 8006fe6:	f7f9 fb0f 	bl	8000608 <__aeabi_dmul>
 8006fea:	bd70      	pop	{r4, r5, r6, pc}
 8006fec:	0000      	movs	r0, r0
	...

08006ff0 <_strtod_l>:
 8006ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ff4:	461f      	mov	r7, r3
 8006ff6:	b0a1      	sub	sp, #132	; 0x84
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	4681      	mov	r9, r0
 8006ffc:	4638      	mov	r0, r7
 8006ffe:	460e      	mov	r6, r1
 8007000:	9217      	str	r2, [sp, #92]	; 0x5c
 8007002:	931c      	str	r3, [sp, #112]	; 0x70
 8007004:	f001 f942 	bl	800828c <__localeconv_l>
 8007008:	4680      	mov	r8, r0
 800700a:	6800      	ldr	r0, [r0, #0]
 800700c:	f7f9 f8e8 	bl	80001e0 <strlen>
 8007010:	f04f 0a00 	mov.w	sl, #0
 8007014:	4604      	mov	r4, r0
 8007016:	f04f 0b00 	mov.w	fp, #0
 800701a:	961b      	str	r6, [sp, #108]	; 0x6c
 800701c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800701e:	781a      	ldrb	r2, [r3, #0]
 8007020:	2a0d      	cmp	r2, #13
 8007022:	d832      	bhi.n	800708a <_strtod_l+0x9a>
 8007024:	2a09      	cmp	r2, #9
 8007026:	d236      	bcs.n	8007096 <_strtod_l+0xa6>
 8007028:	2a00      	cmp	r2, #0
 800702a:	d03e      	beq.n	80070aa <_strtod_l+0xba>
 800702c:	2300      	movs	r3, #0
 800702e:	930d      	str	r3, [sp, #52]	; 0x34
 8007030:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007032:	782b      	ldrb	r3, [r5, #0]
 8007034:	2b30      	cmp	r3, #48	; 0x30
 8007036:	f040 80ac 	bne.w	8007192 <_strtod_l+0x1a2>
 800703a:	786b      	ldrb	r3, [r5, #1]
 800703c:	2b58      	cmp	r3, #88	; 0x58
 800703e:	d001      	beq.n	8007044 <_strtod_l+0x54>
 8007040:	2b78      	cmp	r3, #120	; 0x78
 8007042:	d167      	bne.n	8007114 <_strtod_l+0x124>
 8007044:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007046:	9301      	str	r3, [sp, #4]
 8007048:	ab1c      	add	r3, sp, #112	; 0x70
 800704a:	9300      	str	r3, [sp, #0]
 800704c:	9702      	str	r7, [sp, #8]
 800704e:	ab1d      	add	r3, sp, #116	; 0x74
 8007050:	4a88      	ldr	r2, [pc, #544]	; (8007274 <_strtod_l+0x284>)
 8007052:	a91b      	add	r1, sp, #108	; 0x6c
 8007054:	4648      	mov	r0, r9
 8007056:	f000 fe42 	bl	8007cde <__gethex>
 800705a:	f010 0407 	ands.w	r4, r0, #7
 800705e:	4606      	mov	r6, r0
 8007060:	d005      	beq.n	800706e <_strtod_l+0x7e>
 8007062:	2c06      	cmp	r4, #6
 8007064:	d12b      	bne.n	80070be <_strtod_l+0xce>
 8007066:	3501      	adds	r5, #1
 8007068:	2300      	movs	r3, #0
 800706a:	951b      	str	r5, [sp, #108]	; 0x6c
 800706c:	930d      	str	r3, [sp, #52]	; 0x34
 800706e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007070:	2b00      	cmp	r3, #0
 8007072:	f040 859a 	bne.w	8007baa <_strtod_l+0xbba>
 8007076:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007078:	b1e3      	cbz	r3, 80070b4 <_strtod_l+0xc4>
 800707a:	4652      	mov	r2, sl
 800707c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007080:	ec43 2b10 	vmov	d0, r2, r3
 8007084:	b021      	add	sp, #132	; 0x84
 8007086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800708a:	2a2b      	cmp	r2, #43	; 0x2b
 800708c:	d015      	beq.n	80070ba <_strtod_l+0xca>
 800708e:	2a2d      	cmp	r2, #45	; 0x2d
 8007090:	d004      	beq.n	800709c <_strtod_l+0xac>
 8007092:	2a20      	cmp	r2, #32
 8007094:	d1ca      	bne.n	800702c <_strtod_l+0x3c>
 8007096:	3301      	adds	r3, #1
 8007098:	931b      	str	r3, [sp, #108]	; 0x6c
 800709a:	e7bf      	b.n	800701c <_strtod_l+0x2c>
 800709c:	2201      	movs	r2, #1
 800709e:	920d      	str	r2, [sp, #52]	; 0x34
 80070a0:	1c5a      	adds	r2, r3, #1
 80070a2:	921b      	str	r2, [sp, #108]	; 0x6c
 80070a4:	785b      	ldrb	r3, [r3, #1]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d1c2      	bne.n	8007030 <_strtod_l+0x40>
 80070aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80070ac:	961b      	str	r6, [sp, #108]	; 0x6c
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	f040 8579 	bne.w	8007ba6 <_strtod_l+0xbb6>
 80070b4:	4652      	mov	r2, sl
 80070b6:	465b      	mov	r3, fp
 80070b8:	e7e2      	b.n	8007080 <_strtod_l+0x90>
 80070ba:	2200      	movs	r2, #0
 80070bc:	e7ef      	b.n	800709e <_strtod_l+0xae>
 80070be:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80070c0:	b13a      	cbz	r2, 80070d2 <_strtod_l+0xe2>
 80070c2:	2135      	movs	r1, #53	; 0x35
 80070c4:	a81e      	add	r0, sp, #120	; 0x78
 80070c6:	f001 fcbb 	bl	8008a40 <__copybits>
 80070ca:	991c      	ldr	r1, [sp, #112]	; 0x70
 80070cc:	4648      	mov	r0, r9
 80070ce:	f001 f927 	bl	8008320 <_Bfree>
 80070d2:	3c01      	subs	r4, #1
 80070d4:	2c04      	cmp	r4, #4
 80070d6:	d806      	bhi.n	80070e6 <_strtod_l+0xf6>
 80070d8:	e8df f004 	tbb	[pc, r4]
 80070dc:	1714030a 	.word	0x1714030a
 80070e0:	0a          	.byte	0x0a
 80070e1:	00          	.byte	0x00
 80070e2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80070e6:	0730      	lsls	r0, r6, #28
 80070e8:	d5c1      	bpl.n	800706e <_strtod_l+0x7e>
 80070ea:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80070ee:	e7be      	b.n	800706e <_strtod_l+0x7e>
 80070f0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80070f4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80070f6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80070fa:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80070fe:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007102:	e7f0      	b.n	80070e6 <_strtod_l+0xf6>
 8007104:	f8df b170 	ldr.w	fp, [pc, #368]	; 8007278 <_strtod_l+0x288>
 8007108:	e7ed      	b.n	80070e6 <_strtod_l+0xf6>
 800710a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800710e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007112:	e7e8      	b.n	80070e6 <_strtod_l+0xf6>
 8007114:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007116:	1c5a      	adds	r2, r3, #1
 8007118:	921b      	str	r2, [sp, #108]	; 0x6c
 800711a:	785b      	ldrb	r3, [r3, #1]
 800711c:	2b30      	cmp	r3, #48	; 0x30
 800711e:	d0f9      	beq.n	8007114 <_strtod_l+0x124>
 8007120:	2b00      	cmp	r3, #0
 8007122:	d0a4      	beq.n	800706e <_strtod_l+0x7e>
 8007124:	2301      	movs	r3, #1
 8007126:	2500      	movs	r5, #0
 8007128:	9306      	str	r3, [sp, #24]
 800712a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800712c:	9308      	str	r3, [sp, #32]
 800712e:	9507      	str	r5, [sp, #28]
 8007130:	9505      	str	r5, [sp, #20]
 8007132:	220a      	movs	r2, #10
 8007134:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007136:	7807      	ldrb	r7, [r0, #0]
 8007138:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800713c:	b2d9      	uxtb	r1, r3
 800713e:	2909      	cmp	r1, #9
 8007140:	d929      	bls.n	8007196 <_strtod_l+0x1a6>
 8007142:	4622      	mov	r2, r4
 8007144:	f8d8 1000 	ldr.w	r1, [r8]
 8007148:	f7ff ff22 	bl	8006f90 <strncmp>
 800714c:	2800      	cmp	r0, #0
 800714e:	d031      	beq.n	80071b4 <_strtod_l+0x1c4>
 8007150:	2000      	movs	r0, #0
 8007152:	9c05      	ldr	r4, [sp, #20]
 8007154:	9004      	str	r0, [sp, #16]
 8007156:	463b      	mov	r3, r7
 8007158:	4602      	mov	r2, r0
 800715a:	2b65      	cmp	r3, #101	; 0x65
 800715c:	d001      	beq.n	8007162 <_strtod_l+0x172>
 800715e:	2b45      	cmp	r3, #69	; 0x45
 8007160:	d114      	bne.n	800718c <_strtod_l+0x19c>
 8007162:	b924      	cbnz	r4, 800716e <_strtod_l+0x17e>
 8007164:	b910      	cbnz	r0, 800716c <_strtod_l+0x17c>
 8007166:	9b06      	ldr	r3, [sp, #24]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d09e      	beq.n	80070aa <_strtod_l+0xba>
 800716c:	2400      	movs	r4, #0
 800716e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8007170:	1c73      	adds	r3, r6, #1
 8007172:	931b      	str	r3, [sp, #108]	; 0x6c
 8007174:	7873      	ldrb	r3, [r6, #1]
 8007176:	2b2b      	cmp	r3, #43	; 0x2b
 8007178:	d078      	beq.n	800726c <_strtod_l+0x27c>
 800717a:	2b2d      	cmp	r3, #45	; 0x2d
 800717c:	d070      	beq.n	8007260 <_strtod_l+0x270>
 800717e:	f04f 0c00 	mov.w	ip, #0
 8007182:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8007186:	2f09      	cmp	r7, #9
 8007188:	d97c      	bls.n	8007284 <_strtod_l+0x294>
 800718a:	961b      	str	r6, [sp, #108]	; 0x6c
 800718c:	f04f 0e00 	mov.w	lr, #0
 8007190:	e09a      	b.n	80072c8 <_strtod_l+0x2d8>
 8007192:	2300      	movs	r3, #0
 8007194:	e7c7      	b.n	8007126 <_strtod_l+0x136>
 8007196:	9905      	ldr	r1, [sp, #20]
 8007198:	2908      	cmp	r1, #8
 800719a:	bfdd      	ittte	le
 800719c:	9907      	ldrle	r1, [sp, #28]
 800719e:	fb02 3301 	mlale	r3, r2, r1, r3
 80071a2:	9307      	strle	r3, [sp, #28]
 80071a4:	fb02 3505 	mlagt	r5, r2, r5, r3
 80071a8:	9b05      	ldr	r3, [sp, #20]
 80071aa:	3001      	adds	r0, #1
 80071ac:	3301      	adds	r3, #1
 80071ae:	9305      	str	r3, [sp, #20]
 80071b0:	901b      	str	r0, [sp, #108]	; 0x6c
 80071b2:	e7bf      	b.n	8007134 <_strtod_l+0x144>
 80071b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80071b6:	191a      	adds	r2, r3, r4
 80071b8:	921b      	str	r2, [sp, #108]	; 0x6c
 80071ba:	9a05      	ldr	r2, [sp, #20]
 80071bc:	5d1b      	ldrb	r3, [r3, r4]
 80071be:	2a00      	cmp	r2, #0
 80071c0:	d037      	beq.n	8007232 <_strtod_l+0x242>
 80071c2:	9c05      	ldr	r4, [sp, #20]
 80071c4:	4602      	mov	r2, r0
 80071c6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80071ca:	2909      	cmp	r1, #9
 80071cc:	d913      	bls.n	80071f6 <_strtod_l+0x206>
 80071ce:	2101      	movs	r1, #1
 80071d0:	9104      	str	r1, [sp, #16]
 80071d2:	e7c2      	b.n	800715a <_strtod_l+0x16a>
 80071d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80071d6:	1c5a      	adds	r2, r3, #1
 80071d8:	921b      	str	r2, [sp, #108]	; 0x6c
 80071da:	785b      	ldrb	r3, [r3, #1]
 80071dc:	3001      	adds	r0, #1
 80071de:	2b30      	cmp	r3, #48	; 0x30
 80071e0:	d0f8      	beq.n	80071d4 <_strtod_l+0x1e4>
 80071e2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80071e6:	2a08      	cmp	r2, #8
 80071e8:	f200 84e4 	bhi.w	8007bb4 <_strtod_l+0xbc4>
 80071ec:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80071ee:	9208      	str	r2, [sp, #32]
 80071f0:	4602      	mov	r2, r0
 80071f2:	2000      	movs	r0, #0
 80071f4:	4604      	mov	r4, r0
 80071f6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80071fa:	f100 0101 	add.w	r1, r0, #1
 80071fe:	d012      	beq.n	8007226 <_strtod_l+0x236>
 8007200:	440a      	add	r2, r1
 8007202:	eb00 0c04 	add.w	ip, r0, r4
 8007206:	4621      	mov	r1, r4
 8007208:	270a      	movs	r7, #10
 800720a:	458c      	cmp	ip, r1
 800720c:	d113      	bne.n	8007236 <_strtod_l+0x246>
 800720e:	1821      	adds	r1, r4, r0
 8007210:	2908      	cmp	r1, #8
 8007212:	f104 0401 	add.w	r4, r4, #1
 8007216:	4404      	add	r4, r0
 8007218:	dc19      	bgt.n	800724e <_strtod_l+0x25e>
 800721a:	9b07      	ldr	r3, [sp, #28]
 800721c:	210a      	movs	r1, #10
 800721e:	fb01 e303 	mla	r3, r1, r3, lr
 8007222:	9307      	str	r3, [sp, #28]
 8007224:	2100      	movs	r1, #0
 8007226:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007228:	1c58      	adds	r0, r3, #1
 800722a:	901b      	str	r0, [sp, #108]	; 0x6c
 800722c:	785b      	ldrb	r3, [r3, #1]
 800722e:	4608      	mov	r0, r1
 8007230:	e7c9      	b.n	80071c6 <_strtod_l+0x1d6>
 8007232:	9805      	ldr	r0, [sp, #20]
 8007234:	e7d3      	b.n	80071de <_strtod_l+0x1ee>
 8007236:	2908      	cmp	r1, #8
 8007238:	f101 0101 	add.w	r1, r1, #1
 800723c:	dc03      	bgt.n	8007246 <_strtod_l+0x256>
 800723e:	9b07      	ldr	r3, [sp, #28]
 8007240:	437b      	muls	r3, r7
 8007242:	9307      	str	r3, [sp, #28]
 8007244:	e7e1      	b.n	800720a <_strtod_l+0x21a>
 8007246:	2910      	cmp	r1, #16
 8007248:	bfd8      	it	le
 800724a:	437d      	mulle	r5, r7
 800724c:	e7dd      	b.n	800720a <_strtod_l+0x21a>
 800724e:	2c10      	cmp	r4, #16
 8007250:	bfdc      	itt	le
 8007252:	210a      	movle	r1, #10
 8007254:	fb01 e505 	mlale	r5, r1, r5, lr
 8007258:	e7e4      	b.n	8007224 <_strtod_l+0x234>
 800725a:	2301      	movs	r3, #1
 800725c:	9304      	str	r3, [sp, #16]
 800725e:	e781      	b.n	8007164 <_strtod_l+0x174>
 8007260:	f04f 0c01 	mov.w	ip, #1
 8007264:	1cb3      	adds	r3, r6, #2
 8007266:	931b      	str	r3, [sp, #108]	; 0x6c
 8007268:	78b3      	ldrb	r3, [r6, #2]
 800726a:	e78a      	b.n	8007182 <_strtod_l+0x192>
 800726c:	f04f 0c00 	mov.w	ip, #0
 8007270:	e7f8      	b.n	8007264 <_strtod_l+0x274>
 8007272:	bf00      	nop
 8007274:	08009244 	.word	0x08009244
 8007278:	7ff00000 	.word	0x7ff00000
 800727c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800727e:	1c5f      	adds	r7, r3, #1
 8007280:	971b      	str	r7, [sp, #108]	; 0x6c
 8007282:	785b      	ldrb	r3, [r3, #1]
 8007284:	2b30      	cmp	r3, #48	; 0x30
 8007286:	d0f9      	beq.n	800727c <_strtod_l+0x28c>
 8007288:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800728c:	2f08      	cmp	r7, #8
 800728e:	f63f af7d 	bhi.w	800718c <_strtod_l+0x19c>
 8007292:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8007296:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007298:	930a      	str	r3, [sp, #40]	; 0x28
 800729a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800729c:	1c5f      	adds	r7, r3, #1
 800729e:	971b      	str	r7, [sp, #108]	; 0x6c
 80072a0:	785b      	ldrb	r3, [r3, #1]
 80072a2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80072a6:	f1b8 0f09 	cmp.w	r8, #9
 80072aa:	d937      	bls.n	800731c <_strtod_l+0x32c>
 80072ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 80072ae:	1a7f      	subs	r7, r7, r1
 80072b0:	2f08      	cmp	r7, #8
 80072b2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80072b6:	dc37      	bgt.n	8007328 <_strtod_l+0x338>
 80072b8:	45be      	cmp	lr, r7
 80072ba:	bfa8      	it	ge
 80072bc:	46be      	movge	lr, r7
 80072be:	f1bc 0f00 	cmp.w	ip, #0
 80072c2:	d001      	beq.n	80072c8 <_strtod_l+0x2d8>
 80072c4:	f1ce 0e00 	rsb	lr, lr, #0
 80072c8:	2c00      	cmp	r4, #0
 80072ca:	d151      	bne.n	8007370 <_strtod_l+0x380>
 80072cc:	2800      	cmp	r0, #0
 80072ce:	f47f aece 	bne.w	800706e <_strtod_l+0x7e>
 80072d2:	9a06      	ldr	r2, [sp, #24]
 80072d4:	2a00      	cmp	r2, #0
 80072d6:	f47f aeca 	bne.w	800706e <_strtod_l+0x7e>
 80072da:	9a04      	ldr	r2, [sp, #16]
 80072dc:	2a00      	cmp	r2, #0
 80072de:	f47f aee4 	bne.w	80070aa <_strtod_l+0xba>
 80072e2:	2b4e      	cmp	r3, #78	; 0x4e
 80072e4:	d027      	beq.n	8007336 <_strtod_l+0x346>
 80072e6:	dc21      	bgt.n	800732c <_strtod_l+0x33c>
 80072e8:	2b49      	cmp	r3, #73	; 0x49
 80072ea:	f47f aede 	bne.w	80070aa <_strtod_l+0xba>
 80072ee:	49a0      	ldr	r1, [pc, #640]	; (8007570 <_strtod_l+0x580>)
 80072f0:	a81b      	add	r0, sp, #108	; 0x6c
 80072f2:	f000 ff27 	bl	8008144 <__match>
 80072f6:	2800      	cmp	r0, #0
 80072f8:	f43f aed7 	beq.w	80070aa <_strtod_l+0xba>
 80072fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80072fe:	499d      	ldr	r1, [pc, #628]	; (8007574 <_strtod_l+0x584>)
 8007300:	3b01      	subs	r3, #1
 8007302:	a81b      	add	r0, sp, #108	; 0x6c
 8007304:	931b      	str	r3, [sp, #108]	; 0x6c
 8007306:	f000 ff1d 	bl	8008144 <__match>
 800730a:	b910      	cbnz	r0, 8007312 <_strtod_l+0x322>
 800730c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800730e:	3301      	adds	r3, #1
 8007310:	931b      	str	r3, [sp, #108]	; 0x6c
 8007312:	f8df b274 	ldr.w	fp, [pc, #628]	; 8007588 <_strtod_l+0x598>
 8007316:	f04f 0a00 	mov.w	sl, #0
 800731a:	e6a8      	b.n	800706e <_strtod_l+0x7e>
 800731c:	210a      	movs	r1, #10
 800731e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8007322:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007326:	e7b8      	b.n	800729a <_strtod_l+0x2aa>
 8007328:	46be      	mov	lr, r7
 800732a:	e7c8      	b.n	80072be <_strtod_l+0x2ce>
 800732c:	2b69      	cmp	r3, #105	; 0x69
 800732e:	d0de      	beq.n	80072ee <_strtod_l+0x2fe>
 8007330:	2b6e      	cmp	r3, #110	; 0x6e
 8007332:	f47f aeba 	bne.w	80070aa <_strtod_l+0xba>
 8007336:	4990      	ldr	r1, [pc, #576]	; (8007578 <_strtod_l+0x588>)
 8007338:	a81b      	add	r0, sp, #108	; 0x6c
 800733a:	f000 ff03 	bl	8008144 <__match>
 800733e:	2800      	cmp	r0, #0
 8007340:	f43f aeb3 	beq.w	80070aa <_strtod_l+0xba>
 8007344:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	2b28      	cmp	r3, #40	; 0x28
 800734a:	d10e      	bne.n	800736a <_strtod_l+0x37a>
 800734c:	aa1e      	add	r2, sp, #120	; 0x78
 800734e:	498b      	ldr	r1, [pc, #556]	; (800757c <_strtod_l+0x58c>)
 8007350:	a81b      	add	r0, sp, #108	; 0x6c
 8007352:	f000 ff0b 	bl	800816c <__hexnan>
 8007356:	2805      	cmp	r0, #5
 8007358:	d107      	bne.n	800736a <_strtod_l+0x37a>
 800735a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800735c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8007360:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007364:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007368:	e681      	b.n	800706e <_strtod_l+0x7e>
 800736a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8007590 <_strtod_l+0x5a0>
 800736e:	e7d2      	b.n	8007316 <_strtod_l+0x326>
 8007370:	ebae 0302 	sub.w	r3, lr, r2
 8007374:	9306      	str	r3, [sp, #24]
 8007376:	9b05      	ldr	r3, [sp, #20]
 8007378:	9807      	ldr	r0, [sp, #28]
 800737a:	2b00      	cmp	r3, #0
 800737c:	bf08      	it	eq
 800737e:	4623      	moveq	r3, r4
 8007380:	2c10      	cmp	r4, #16
 8007382:	9305      	str	r3, [sp, #20]
 8007384:	46a0      	mov	r8, r4
 8007386:	bfa8      	it	ge
 8007388:	f04f 0810 	movge.w	r8, #16
 800738c:	f7f9 f8c2 	bl	8000514 <__aeabi_ui2d>
 8007390:	2c09      	cmp	r4, #9
 8007392:	4682      	mov	sl, r0
 8007394:	468b      	mov	fp, r1
 8007396:	dc13      	bgt.n	80073c0 <_strtod_l+0x3d0>
 8007398:	9b06      	ldr	r3, [sp, #24]
 800739a:	2b00      	cmp	r3, #0
 800739c:	f43f ae67 	beq.w	800706e <_strtod_l+0x7e>
 80073a0:	9b06      	ldr	r3, [sp, #24]
 80073a2:	dd7a      	ble.n	800749a <_strtod_l+0x4aa>
 80073a4:	2b16      	cmp	r3, #22
 80073a6:	dc61      	bgt.n	800746c <_strtod_l+0x47c>
 80073a8:	4a75      	ldr	r2, [pc, #468]	; (8007580 <_strtod_l+0x590>)
 80073aa:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80073ae:	e9de 0100 	ldrd	r0, r1, [lr]
 80073b2:	4652      	mov	r2, sl
 80073b4:	465b      	mov	r3, fp
 80073b6:	f7f9 f927 	bl	8000608 <__aeabi_dmul>
 80073ba:	4682      	mov	sl, r0
 80073bc:	468b      	mov	fp, r1
 80073be:	e656      	b.n	800706e <_strtod_l+0x7e>
 80073c0:	4b6f      	ldr	r3, [pc, #444]	; (8007580 <_strtod_l+0x590>)
 80073c2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80073c6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80073ca:	f7f9 f91d 	bl	8000608 <__aeabi_dmul>
 80073ce:	4606      	mov	r6, r0
 80073d0:	4628      	mov	r0, r5
 80073d2:	460f      	mov	r7, r1
 80073d4:	f7f9 f89e 	bl	8000514 <__aeabi_ui2d>
 80073d8:	4602      	mov	r2, r0
 80073da:	460b      	mov	r3, r1
 80073dc:	4630      	mov	r0, r6
 80073de:	4639      	mov	r1, r7
 80073e0:	f7f8 ff5c 	bl	800029c <__adddf3>
 80073e4:	2c0f      	cmp	r4, #15
 80073e6:	4682      	mov	sl, r0
 80073e8:	468b      	mov	fp, r1
 80073ea:	ddd5      	ble.n	8007398 <_strtod_l+0x3a8>
 80073ec:	9b06      	ldr	r3, [sp, #24]
 80073ee:	eba4 0808 	sub.w	r8, r4, r8
 80073f2:	4498      	add	r8, r3
 80073f4:	f1b8 0f00 	cmp.w	r8, #0
 80073f8:	f340 8096 	ble.w	8007528 <_strtod_l+0x538>
 80073fc:	f018 030f 	ands.w	r3, r8, #15
 8007400:	d00a      	beq.n	8007418 <_strtod_l+0x428>
 8007402:	495f      	ldr	r1, [pc, #380]	; (8007580 <_strtod_l+0x590>)
 8007404:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007408:	4652      	mov	r2, sl
 800740a:	465b      	mov	r3, fp
 800740c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007410:	f7f9 f8fa 	bl	8000608 <__aeabi_dmul>
 8007414:	4682      	mov	sl, r0
 8007416:	468b      	mov	fp, r1
 8007418:	f038 080f 	bics.w	r8, r8, #15
 800741c:	d073      	beq.n	8007506 <_strtod_l+0x516>
 800741e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007422:	dd47      	ble.n	80074b4 <_strtod_l+0x4c4>
 8007424:	2400      	movs	r4, #0
 8007426:	46a0      	mov	r8, r4
 8007428:	9407      	str	r4, [sp, #28]
 800742a:	9405      	str	r4, [sp, #20]
 800742c:	2322      	movs	r3, #34	; 0x22
 800742e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8007588 <_strtod_l+0x598>
 8007432:	f8c9 3000 	str.w	r3, [r9]
 8007436:	f04f 0a00 	mov.w	sl, #0
 800743a:	9b07      	ldr	r3, [sp, #28]
 800743c:	2b00      	cmp	r3, #0
 800743e:	f43f ae16 	beq.w	800706e <_strtod_l+0x7e>
 8007442:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007444:	4648      	mov	r0, r9
 8007446:	f000 ff6b 	bl	8008320 <_Bfree>
 800744a:	9905      	ldr	r1, [sp, #20]
 800744c:	4648      	mov	r0, r9
 800744e:	f000 ff67 	bl	8008320 <_Bfree>
 8007452:	4641      	mov	r1, r8
 8007454:	4648      	mov	r0, r9
 8007456:	f000 ff63 	bl	8008320 <_Bfree>
 800745a:	9907      	ldr	r1, [sp, #28]
 800745c:	4648      	mov	r0, r9
 800745e:	f000 ff5f 	bl	8008320 <_Bfree>
 8007462:	4621      	mov	r1, r4
 8007464:	4648      	mov	r0, r9
 8007466:	f000 ff5b 	bl	8008320 <_Bfree>
 800746a:	e600      	b.n	800706e <_strtod_l+0x7e>
 800746c:	9a06      	ldr	r2, [sp, #24]
 800746e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007472:	4293      	cmp	r3, r2
 8007474:	dbba      	blt.n	80073ec <_strtod_l+0x3fc>
 8007476:	4d42      	ldr	r5, [pc, #264]	; (8007580 <_strtod_l+0x590>)
 8007478:	f1c4 040f 	rsb	r4, r4, #15
 800747c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007480:	4652      	mov	r2, sl
 8007482:	465b      	mov	r3, fp
 8007484:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007488:	f7f9 f8be 	bl	8000608 <__aeabi_dmul>
 800748c:	9b06      	ldr	r3, [sp, #24]
 800748e:	1b1c      	subs	r4, r3, r4
 8007490:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007494:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007498:	e78d      	b.n	80073b6 <_strtod_l+0x3c6>
 800749a:	f113 0f16 	cmn.w	r3, #22
 800749e:	dba5      	blt.n	80073ec <_strtod_l+0x3fc>
 80074a0:	4a37      	ldr	r2, [pc, #220]	; (8007580 <_strtod_l+0x590>)
 80074a2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80074a6:	e9d2 2300 	ldrd	r2, r3, [r2]
 80074aa:	4650      	mov	r0, sl
 80074ac:	4659      	mov	r1, fp
 80074ae:	f7f9 f9d5 	bl	800085c <__aeabi_ddiv>
 80074b2:	e782      	b.n	80073ba <_strtod_l+0x3ca>
 80074b4:	2300      	movs	r3, #0
 80074b6:	4e33      	ldr	r6, [pc, #204]	; (8007584 <_strtod_l+0x594>)
 80074b8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80074bc:	4650      	mov	r0, sl
 80074be:	4659      	mov	r1, fp
 80074c0:	461d      	mov	r5, r3
 80074c2:	f1b8 0f01 	cmp.w	r8, #1
 80074c6:	dc21      	bgt.n	800750c <_strtod_l+0x51c>
 80074c8:	b10b      	cbz	r3, 80074ce <_strtod_l+0x4de>
 80074ca:	4682      	mov	sl, r0
 80074cc:	468b      	mov	fp, r1
 80074ce:	4b2d      	ldr	r3, [pc, #180]	; (8007584 <_strtod_l+0x594>)
 80074d0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80074d4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80074d8:	4652      	mov	r2, sl
 80074da:	465b      	mov	r3, fp
 80074dc:	e9d5 0100 	ldrd	r0, r1, [r5]
 80074e0:	f7f9 f892 	bl	8000608 <__aeabi_dmul>
 80074e4:	4b28      	ldr	r3, [pc, #160]	; (8007588 <_strtod_l+0x598>)
 80074e6:	460a      	mov	r2, r1
 80074e8:	400b      	ands	r3, r1
 80074ea:	4928      	ldr	r1, [pc, #160]	; (800758c <_strtod_l+0x59c>)
 80074ec:	428b      	cmp	r3, r1
 80074ee:	4682      	mov	sl, r0
 80074f0:	d898      	bhi.n	8007424 <_strtod_l+0x434>
 80074f2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80074f6:	428b      	cmp	r3, r1
 80074f8:	bf86      	itte	hi
 80074fa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8007594 <_strtod_l+0x5a4>
 80074fe:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8007502:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007506:	2300      	movs	r3, #0
 8007508:	9304      	str	r3, [sp, #16]
 800750a:	e077      	b.n	80075fc <_strtod_l+0x60c>
 800750c:	f018 0f01 	tst.w	r8, #1
 8007510:	d006      	beq.n	8007520 <_strtod_l+0x530>
 8007512:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8007516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751a:	f7f9 f875 	bl	8000608 <__aeabi_dmul>
 800751e:	2301      	movs	r3, #1
 8007520:	3501      	adds	r5, #1
 8007522:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007526:	e7cc      	b.n	80074c2 <_strtod_l+0x4d2>
 8007528:	d0ed      	beq.n	8007506 <_strtod_l+0x516>
 800752a:	f1c8 0800 	rsb	r8, r8, #0
 800752e:	f018 020f 	ands.w	r2, r8, #15
 8007532:	d00a      	beq.n	800754a <_strtod_l+0x55a>
 8007534:	4b12      	ldr	r3, [pc, #72]	; (8007580 <_strtod_l+0x590>)
 8007536:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800753a:	4650      	mov	r0, sl
 800753c:	4659      	mov	r1, fp
 800753e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007542:	f7f9 f98b 	bl	800085c <__aeabi_ddiv>
 8007546:	4682      	mov	sl, r0
 8007548:	468b      	mov	fp, r1
 800754a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800754e:	d0da      	beq.n	8007506 <_strtod_l+0x516>
 8007550:	f1b8 0f1f 	cmp.w	r8, #31
 8007554:	dd20      	ble.n	8007598 <_strtod_l+0x5a8>
 8007556:	2400      	movs	r4, #0
 8007558:	46a0      	mov	r8, r4
 800755a:	9407      	str	r4, [sp, #28]
 800755c:	9405      	str	r4, [sp, #20]
 800755e:	2322      	movs	r3, #34	; 0x22
 8007560:	f04f 0a00 	mov.w	sl, #0
 8007564:	f04f 0b00 	mov.w	fp, #0
 8007568:	f8c9 3000 	str.w	r3, [r9]
 800756c:	e765      	b.n	800743a <_strtod_l+0x44a>
 800756e:	bf00      	nop
 8007570:	08009238 	.word	0x08009238
 8007574:	0800923b 	.word	0x0800923b
 8007578:	08009241 	.word	0x08009241
 800757c:	08009258 	.word	0x08009258
 8007580:	080092d0 	.word	0x080092d0
 8007584:	080092a8 	.word	0x080092a8
 8007588:	7ff00000 	.word	0x7ff00000
 800758c:	7ca00000 	.word	0x7ca00000
 8007590:	fff80000 	.word	0xfff80000
 8007594:	7fefffff 	.word	0x7fefffff
 8007598:	f018 0310 	ands.w	r3, r8, #16
 800759c:	bf18      	it	ne
 800759e:	236a      	movne	r3, #106	; 0x6a
 80075a0:	4da0      	ldr	r5, [pc, #640]	; (8007824 <_strtod_l+0x834>)
 80075a2:	9304      	str	r3, [sp, #16]
 80075a4:	4650      	mov	r0, sl
 80075a6:	4659      	mov	r1, fp
 80075a8:	2300      	movs	r3, #0
 80075aa:	f1b8 0f00 	cmp.w	r8, #0
 80075ae:	f300 810a 	bgt.w	80077c6 <_strtod_l+0x7d6>
 80075b2:	b10b      	cbz	r3, 80075b8 <_strtod_l+0x5c8>
 80075b4:	4682      	mov	sl, r0
 80075b6:	468b      	mov	fp, r1
 80075b8:	9b04      	ldr	r3, [sp, #16]
 80075ba:	b1bb      	cbz	r3, 80075ec <_strtod_l+0x5fc>
 80075bc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80075c0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	4659      	mov	r1, fp
 80075c8:	dd10      	ble.n	80075ec <_strtod_l+0x5fc>
 80075ca:	2b1f      	cmp	r3, #31
 80075cc:	f340 8107 	ble.w	80077de <_strtod_l+0x7ee>
 80075d0:	2b34      	cmp	r3, #52	; 0x34
 80075d2:	bfde      	ittt	le
 80075d4:	3b20      	suble	r3, #32
 80075d6:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80075da:	fa02 f303 	lslle.w	r3, r2, r3
 80075de:	f04f 0a00 	mov.w	sl, #0
 80075e2:	bfcc      	ite	gt
 80075e4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80075e8:	ea03 0b01 	andle.w	fp, r3, r1
 80075ec:	2200      	movs	r2, #0
 80075ee:	2300      	movs	r3, #0
 80075f0:	4650      	mov	r0, sl
 80075f2:	4659      	mov	r1, fp
 80075f4:	f7f9 fa70 	bl	8000ad8 <__aeabi_dcmpeq>
 80075f8:	2800      	cmp	r0, #0
 80075fa:	d1ac      	bne.n	8007556 <_strtod_l+0x566>
 80075fc:	9b07      	ldr	r3, [sp, #28]
 80075fe:	9300      	str	r3, [sp, #0]
 8007600:	9a05      	ldr	r2, [sp, #20]
 8007602:	9908      	ldr	r1, [sp, #32]
 8007604:	4623      	mov	r3, r4
 8007606:	4648      	mov	r0, r9
 8007608:	f000 fedc 	bl	80083c4 <__s2b>
 800760c:	9007      	str	r0, [sp, #28]
 800760e:	2800      	cmp	r0, #0
 8007610:	f43f af08 	beq.w	8007424 <_strtod_l+0x434>
 8007614:	9a06      	ldr	r2, [sp, #24]
 8007616:	9b06      	ldr	r3, [sp, #24]
 8007618:	2a00      	cmp	r2, #0
 800761a:	f1c3 0300 	rsb	r3, r3, #0
 800761e:	bfa8      	it	ge
 8007620:	2300      	movge	r3, #0
 8007622:	930e      	str	r3, [sp, #56]	; 0x38
 8007624:	2400      	movs	r4, #0
 8007626:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800762a:	9316      	str	r3, [sp, #88]	; 0x58
 800762c:	46a0      	mov	r8, r4
 800762e:	9b07      	ldr	r3, [sp, #28]
 8007630:	4648      	mov	r0, r9
 8007632:	6859      	ldr	r1, [r3, #4]
 8007634:	f000 fe40 	bl	80082b8 <_Balloc>
 8007638:	9005      	str	r0, [sp, #20]
 800763a:	2800      	cmp	r0, #0
 800763c:	f43f aef6 	beq.w	800742c <_strtod_l+0x43c>
 8007640:	9b07      	ldr	r3, [sp, #28]
 8007642:	691a      	ldr	r2, [r3, #16]
 8007644:	3202      	adds	r2, #2
 8007646:	f103 010c 	add.w	r1, r3, #12
 800764a:	0092      	lsls	r2, r2, #2
 800764c:	300c      	adds	r0, #12
 800764e:	f7ff fbcb 	bl	8006de8 <memcpy>
 8007652:	aa1e      	add	r2, sp, #120	; 0x78
 8007654:	a91d      	add	r1, sp, #116	; 0x74
 8007656:	ec4b ab10 	vmov	d0, sl, fp
 800765a:	4648      	mov	r0, r9
 800765c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007660:	f001 f96c 	bl	800893c <__d2b>
 8007664:	901c      	str	r0, [sp, #112]	; 0x70
 8007666:	2800      	cmp	r0, #0
 8007668:	f43f aee0 	beq.w	800742c <_strtod_l+0x43c>
 800766c:	2101      	movs	r1, #1
 800766e:	4648      	mov	r0, r9
 8007670:	f000 ff34 	bl	80084dc <__i2b>
 8007674:	4680      	mov	r8, r0
 8007676:	2800      	cmp	r0, #0
 8007678:	f43f aed8 	beq.w	800742c <_strtod_l+0x43c>
 800767c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800767e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007680:	2e00      	cmp	r6, #0
 8007682:	bfab      	itete	ge
 8007684:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007686:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007688:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800768a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800768c:	bfac      	ite	ge
 800768e:	18f7      	addge	r7, r6, r3
 8007690:	1b9d      	sublt	r5, r3, r6
 8007692:	9b04      	ldr	r3, [sp, #16]
 8007694:	1af6      	subs	r6, r6, r3
 8007696:	4416      	add	r6, r2
 8007698:	4b63      	ldr	r3, [pc, #396]	; (8007828 <_strtod_l+0x838>)
 800769a:	3e01      	subs	r6, #1
 800769c:	429e      	cmp	r6, r3
 800769e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80076a2:	f280 80af 	bge.w	8007804 <_strtod_l+0x814>
 80076a6:	1b9b      	subs	r3, r3, r6
 80076a8:	2b1f      	cmp	r3, #31
 80076aa:	eba2 0203 	sub.w	r2, r2, r3
 80076ae:	f04f 0101 	mov.w	r1, #1
 80076b2:	f300 809b 	bgt.w	80077ec <_strtod_l+0x7fc>
 80076b6:	fa01 f303 	lsl.w	r3, r1, r3
 80076ba:	930f      	str	r3, [sp, #60]	; 0x3c
 80076bc:	2300      	movs	r3, #0
 80076be:	930a      	str	r3, [sp, #40]	; 0x28
 80076c0:	18be      	adds	r6, r7, r2
 80076c2:	9b04      	ldr	r3, [sp, #16]
 80076c4:	42b7      	cmp	r7, r6
 80076c6:	4415      	add	r5, r2
 80076c8:	441d      	add	r5, r3
 80076ca:	463b      	mov	r3, r7
 80076cc:	bfa8      	it	ge
 80076ce:	4633      	movge	r3, r6
 80076d0:	42ab      	cmp	r3, r5
 80076d2:	bfa8      	it	ge
 80076d4:	462b      	movge	r3, r5
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	bfc2      	ittt	gt
 80076da:	1af6      	subgt	r6, r6, r3
 80076dc:	1aed      	subgt	r5, r5, r3
 80076de:	1aff      	subgt	r7, r7, r3
 80076e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076e2:	b1bb      	cbz	r3, 8007714 <_strtod_l+0x724>
 80076e4:	4641      	mov	r1, r8
 80076e6:	461a      	mov	r2, r3
 80076e8:	4648      	mov	r0, r9
 80076ea:	f000 ff97 	bl	800861c <__pow5mult>
 80076ee:	4680      	mov	r8, r0
 80076f0:	2800      	cmp	r0, #0
 80076f2:	f43f ae9b 	beq.w	800742c <_strtod_l+0x43c>
 80076f6:	4601      	mov	r1, r0
 80076f8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80076fa:	4648      	mov	r0, r9
 80076fc:	f000 fef7 	bl	80084ee <__multiply>
 8007700:	900c      	str	r0, [sp, #48]	; 0x30
 8007702:	2800      	cmp	r0, #0
 8007704:	f43f ae92 	beq.w	800742c <_strtod_l+0x43c>
 8007708:	991c      	ldr	r1, [sp, #112]	; 0x70
 800770a:	4648      	mov	r0, r9
 800770c:	f000 fe08 	bl	8008320 <_Bfree>
 8007710:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007712:	931c      	str	r3, [sp, #112]	; 0x70
 8007714:	2e00      	cmp	r6, #0
 8007716:	dc7a      	bgt.n	800780e <_strtod_l+0x81e>
 8007718:	9b06      	ldr	r3, [sp, #24]
 800771a:	2b00      	cmp	r3, #0
 800771c:	dd08      	ble.n	8007730 <_strtod_l+0x740>
 800771e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007720:	9905      	ldr	r1, [sp, #20]
 8007722:	4648      	mov	r0, r9
 8007724:	f000 ff7a 	bl	800861c <__pow5mult>
 8007728:	9005      	str	r0, [sp, #20]
 800772a:	2800      	cmp	r0, #0
 800772c:	f43f ae7e 	beq.w	800742c <_strtod_l+0x43c>
 8007730:	2d00      	cmp	r5, #0
 8007732:	dd08      	ble.n	8007746 <_strtod_l+0x756>
 8007734:	462a      	mov	r2, r5
 8007736:	9905      	ldr	r1, [sp, #20]
 8007738:	4648      	mov	r0, r9
 800773a:	f000 ffbd 	bl	80086b8 <__lshift>
 800773e:	9005      	str	r0, [sp, #20]
 8007740:	2800      	cmp	r0, #0
 8007742:	f43f ae73 	beq.w	800742c <_strtod_l+0x43c>
 8007746:	2f00      	cmp	r7, #0
 8007748:	dd08      	ble.n	800775c <_strtod_l+0x76c>
 800774a:	4641      	mov	r1, r8
 800774c:	463a      	mov	r2, r7
 800774e:	4648      	mov	r0, r9
 8007750:	f000 ffb2 	bl	80086b8 <__lshift>
 8007754:	4680      	mov	r8, r0
 8007756:	2800      	cmp	r0, #0
 8007758:	f43f ae68 	beq.w	800742c <_strtod_l+0x43c>
 800775c:	9a05      	ldr	r2, [sp, #20]
 800775e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007760:	4648      	mov	r0, r9
 8007762:	f001 f817 	bl	8008794 <__mdiff>
 8007766:	4604      	mov	r4, r0
 8007768:	2800      	cmp	r0, #0
 800776a:	f43f ae5f 	beq.w	800742c <_strtod_l+0x43c>
 800776e:	68c3      	ldr	r3, [r0, #12]
 8007770:	930c      	str	r3, [sp, #48]	; 0x30
 8007772:	2300      	movs	r3, #0
 8007774:	60c3      	str	r3, [r0, #12]
 8007776:	4641      	mov	r1, r8
 8007778:	f000 fff2 	bl	8008760 <__mcmp>
 800777c:	2800      	cmp	r0, #0
 800777e:	da55      	bge.n	800782c <_strtod_l+0x83c>
 8007780:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007782:	b9e3      	cbnz	r3, 80077be <_strtod_l+0x7ce>
 8007784:	f1ba 0f00 	cmp.w	sl, #0
 8007788:	d119      	bne.n	80077be <_strtod_l+0x7ce>
 800778a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800778e:	b9b3      	cbnz	r3, 80077be <_strtod_l+0x7ce>
 8007790:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007794:	0d1b      	lsrs	r3, r3, #20
 8007796:	051b      	lsls	r3, r3, #20
 8007798:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800779c:	d90f      	bls.n	80077be <_strtod_l+0x7ce>
 800779e:	6963      	ldr	r3, [r4, #20]
 80077a0:	b913      	cbnz	r3, 80077a8 <_strtod_l+0x7b8>
 80077a2:	6923      	ldr	r3, [r4, #16]
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	dd0a      	ble.n	80077be <_strtod_l+0x7ce>
 80077a8:	4621      	mov	r1, r4
 80077aa:	2201      	movs	r2, #1
 80077ac:	4648      	mov	r0, r9
 80077ae:	f000 ff83 	bl	80086b8 <__lshift>
 80077b2:	4641      	mov	r1, r8
 80077b4:	4604      	mov	r4, r0
 80077b6:	f000 ffd3 	bl	8008760 <__mcmp>
 80077ba:	2800      	cmp	r0, #0
 80077bc:	dc67      	bgt.n	800788e <_strtod_l+0x89e>
 80077be:	9b04      	ldr	r3, [sp, #16]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d171      	bne.n	80078a8 <_strtod_l+0x8b8>
 80077c4:	e63d      	b.n	8007442 <_strtod_l+0x452>
 80077c6:	f018 0f01 	tst.w	r8, #1
 80077ca:	d004      	beq.n	80077d6 <_strtod_l+0x7e6>
 80077cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80077d0:	f7f8 ff1a 	bl	8000608 <__aeabi_dmul>
 80077d4:	2301      	movs	r3, #1
 80077d6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80077da:	3508      	adds	r5, #8
 80077dc:	e6e5      	b.n	80075aa <_strtod_l+0x5ba>
 80077de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80077e2:	fa02 f303 	lsl.w	r3, r2, r3
 80077e6:	ea03 0a0a 	and.w	sl, r3, sl
 80077ea:	e6ff      	b.n	80075ec <_strtod_l+0x5fc>
 80077ec:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80077f0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80077f4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80077f8:	36e2      	adds	r6, #226	; 0xe2
 80077fa:	fa01 f306 	lsl.w	r3, r1, r6
 80077fe:	930a      	str	r3, [sp, #40]	; 0x28
 8007800:	910f      	str	r1, [sp, #60]	; 0x3c
 8007802:	e75d      	b.n	80076c0 <_strtod_l+0x6d0>
 8007804:	2300      	movs	r3, #0
 8007806:	930a      	str	r3, [sp, #40]	; 0x28
 8007808:	2301      	movs	r3, #1
 800780a:	930f      	str	r3, [sp, #60]	; 0x3c
 800780c:	e758      	b.n	80076c0 <_strtod_l+0x6d0>
 800780e:	4632      	mov	r2, r6
 8007810:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007812:	4648      	mov	r0, r9
 8007814:	f000 ff50 	bl	80086b8 <__lshift>
 8007818:	901c      	str	r0, [sp, #112]	; 0x70
 800781a:	2800      	cmp	r0, #0
 800781c:	f47f af7c 	bne.w	8007718 <_strtod_l+0x728>
 8007820:	e604      	b.n	800742c <_strtod_l+0x43c>
 8007822:	bf00      	nop
 8007824:	08009270 	.word	0x08009270
 8007828:	fffffc02 	.word	0xfffffc02
 800782c:	465d      	mov	r5, fp
 800782e:	f040 8086 	bne.w	800793e <_strtod_l+0x94e>
 8007832:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007834:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007838:	b32a      	cbz	r2, 8007886 <_strtod_l+0x896>
 800783a:	4aaf      	ldr	r2, [pc, #700]	; (8007af8 <_strtod_l+0xb08>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d153      	bne.n	80078e8 <_strtod_l+0x8f8>
 8007840:	9b04      	ldr	r3, [sp, #16]
 8007842:	4650      	mov	r0, sl
 8007844:	b1d3      	cbz	r3, 800787c <_strtod_l+0x88c>
 8007846:	4aad      	ldr	r2, [pc, #692]	; (8007afc <_strtod_l+0xb0c>)
 8007848:	402a      	ands	r2, r5
 800784a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800784e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007852:	d816      	bhi.n	8007882 <_strtod_l+0x892>
 8007854:	0d12      	lsrs	r2, r2, #20
 8007856:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800785a:	fa01 f303 	lsl.w	r3, r1, r3
 800785e:	4298      	cmp	r0, r3
 8007860:	d142      	bne.n	80078e8 <_strtod_l+0x8f8>
 8007862:	4ba7      	ldr	r3, [pc, #668]	; (8007b00 <_strtod_l+0xb10>)
 8007864:	429d      	cmp	r5, r3
 8007866:	d102      	bne.n	800786e <_strtod_l+0x87e>
 8007868:	3001      	adds	r0, #1
 800786a:	f43f addf 	beq.w	800742c <_strtod_l+0x43c>
 800786e:	4ba3      	ldr	r3, [pc, #652]	; (8007afc <_strtod_l+0xb0c>)
 8007870:	402b      	ands	r3, r5
 8007872:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007876:	f04f 0a00 	mov.w	sl, #0
 800787a:	e7a0      	b.n	80077be <_strtod_l+0x7ce>
 800787c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007880:	e7ed      	b.n	800785e <_strtod_l+0x86e>
 8007882:	460b      	mov	r3, r1
 8007884:	e7eb      	b.n	800785e <_strtod_l+0x86e>
 8007886:	bb7b      	cbnz	r3, 80078e8 <_strtod_l+0x8f8>
 8007888:	f1ba 0f00 	cmp.w	sl, #0
 800788c:	d12c      	bne.n	80078e8 <_strtod_l+0x8f8>
 800788e:	9904      	ldr	r1, [sp, #16]
 8007890:	4a9a      	ldr	r2, [pc, #616]	; (8007afc <_strtod_l+0xb0c>)
 8007892:	465b      	mov	r3, fp
 8007894:	b1f1      	cbz	r1, 80078d4 <_strtod_l+0x8e4>
 8007896:	ea02 010b 	and.w	r1, r2, fp
 800789a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800789e:	dc19      	bgt.n	80078d4 <_strtod_l+0x8e4>
 80078a0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80078a4:	f77f ae5b 	ble.w	800755e <_strtod_l+0x56e>
 80078a8:	4a96      	ldr	r2, [pc, #600]	; (8007b04 <_strtod_l+0xb14>)
 80078aa:	2300      	movs	r3, #0
 80078ac:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80078b0:	4650      	mov	r0, sl
 80078b2:	4659      	mov	r1, fp
 80078b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80078b8:	f7f8 fea6 	bl	8000608 <__aeabi_dmul>
 80078bc:	4682      	mov	sl, r0
 80078be:	468b      	mov	fp, r1
 80078c0:	2900      	cmp	r1, #0
 80078c2:	f47f adbe 	bne.w	8007442 <_strtod_l+0x452>
 80078c6:	2800      	cmp	r0, #0
 80078c8:	f47f adbb 	bne.w	8007442 <_strtod_l+0x452>
 80078cc:	2322      	movs	r3, #34	; 0x22
 80078ce:	f8c9 3000 	str.w	r3, [r9]
 80078d2:	e5b6      	b.n	8007442 <_strtod_l+0x452>
 80078d4:	4013      	ands	r3, r2
 80078d6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80078da:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80078de:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80078e2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80078e6:	e76a      	b.n	80077be <_strtod_l+0x7ce>
 80078e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078ea:	b193      	cbz	r3, 8007912 <_strtod_l+0x922>
 80078ec:	422b      	tst	r3, r5
 80078ee:	f43f af66 	beq.w	80077be <_strtod_l+0x7ce>
 80078f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078f4:	9a04      	ldr	r2, [sp, #16]
 80078f6:	4650      	mov	r0, sl
 80078f8:	4659      	mov	r1, fp
 80078fa:	b173      	cbz	r3, 800791a <_strtod_l+0x92a>
 80078fc:	f7ff fb5a 	bl	8006fb4 <sulp>
 8007900:	4602      	mov	r2, r0
 8007902:	460b      	mov	r3, r1
 8007904:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007908:	f7f8 fcc8 	bl	800029c <__adddf3>
 800790c:	4682      	mov	sl, r0
 800790e:	468b      	mov	fp, r1
 8007910:	e755      	b.n	80077be <_strtod_l+0x7ce>
 8007912:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007914:	ea13 0f0a 	tst.w	r3, sl
 8007918:	e7e9      	b.n	80078ee <_strtod_l+0x8fe>
 800791a:	f7ff fb4b 	bl	8006fb4 <sulp>
 800791e:	4602      	mov	r2, r0
 8007920:	460b      	mov	r3, r1
 8007922:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007926:	f7f8 fcb7 	bl	8000298 <__aeabi_dsub>
 800792a:	2200      	movs	r2, #0
 800792c:	2300      	movs	r3, #0
 800792e:	4682      	mov	sl, r0
 8007930:	468b      	mov	fp, r1
 8007932:	f7f9 f8d1 	bl	8000ad8 <__aeabi_dcmpeq>
 8007936:	2800      	cmp	r0, #0
 8007938:	f47f ae11 	bne.w	800755e <_strtod_l+0x56e>
 800793c:	e73f      	b.n	80077be <_strtod_l+0x7ce>
 800793e:	4641      	mov	r1, r8
 8007940:	4620      	mov	r0, r4
 8007942:	f001 f84a 	bl	80089da <__ratio>
 8007946:	ec57 6b10 	vmov	r6, r7, d0
 800794a:	2200      	movs	r2, #0
 800794c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007950:	ee10 0a10 	vmov	r0, s0
 8007954:	4639      	mov	r1, r7
 8007956:	f7f9 f8d3 	bl	8000b00 <__aeabi_dcmple>
 800795a:	2800      	cmp	r0, #0
 800795c:	d077      	beq.n	8007a4e <_strtod_l+0xa5e>
 800795e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007960:	2b00      	cmp	r3, #0
 8007962:	d04a      	beq.n	80079fa <_strtod_l+0xa0a>
 8007964:	4b68      	ldr	r3, [pc, #416]	; (8007b08 <_strtod_l+0xb18>)
 8007966:	2200      	movs	r2, #0
 8007968:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800796c:	4f66      	ldr	r7, [pc, #408]	; (8007b08 <_strtod_l+0xb18>)
 800796e:	2600      	movs	r6, #0
 8007970:	4b62      	ldr	r3, [pc, #392]	; (8007afc <_strtod_l+0xb0c>)
 8007972:	402b      	ands	r3, r5
 8007974:	930f      	str	r3, [sp, #60]	; 0x3c
 8007976:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007978:	4b64      	ldr	r3, [pc, #400]	; (8007b0c <_strtod_l+0xb1c>)
 800797a:	429a      	cmp	r2, r3
 800797c:	f040 80ce 	bne.w	8007b1c <_strtod_l+0xb2c>
 8007980:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007984:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007988:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800798c:	ec4b ab10 	vmov	d0, sl, fp
 8007990:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007994:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007998:	f000 ff5a 	bl	8008850 <__ulp>
 800799c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80079a0:	ec53 2b10 	vmov	r2, r3, d0
 80079a4:	f7f8 fe30 	bl	8000608 <__aeabi_dmul>
 80079a8:	4652      	mov	r2, sl
 80079aa:	465b      	mov	r3, fp
 80079ac:	f7f8 fc76 	bl	800029c <__adddf3>
 80079b0:	460b      	mov	r3, r1
 80079b2:	4952      	ldr	r1, [pc, #328]	; (8007afc <_strtod_l+0xb0c>)
 80079b4:	4a56      	ldr	r2, [pc, #344]	; (8007b10 <_strtod_l+0xb20>)
 80079b6:	4019      	ands	r1, r3
 80079b8:	4291      	cmp	r1, r2
 80079ba:	4682      	mov	sl, r0
 80079bc:	d95b      	bls.n	8007a76 <_strtod_l+0xa86>
 80079be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079c0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d103      	bne.n	80079d0 <_strtod_l+0x9e0>
 80079c8:	9b08      	ldr	r3, [sp, #32]
 80079ca:	3301      	adds	r3, #1
 80079cc:	f43f ad2e 	beq.w	800742c <_strtod_l+0x43c>
 80079d0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8007b00 <_strtod_l+0xb10>
 80079d4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80079d8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80079da:	4648      	mov	r0, r9
 80079dc:	f000 fca0 	bl	8008320 <_Bfree>
 80079e0:	9905      	ldr	r1, [sp, #20]
 80079e2:	4648      	mov	r0, r9
 80079e4:	f000 fc9c 	bl	8008320 <_Bfree>
 80079e8:	4641      	mov	r1, r8
 80079ea:	4648      	mov	r0, r9
 80079ec:	f000 fc98 	bl	8008320 <_Bfree>
 80079f0:	4621      	mov	r1, r4
 80079f2:	4648      	mov	r0, r9
 80079f4:	f000 fc94 	bl	8008320 <_Bfree>
 80079f8:	e619      	b.n	800762e <_strtod_l+0x63e>
 80079fa:	f1ba 0f00 	cmp.w	sl, #0
 80079fe:	d11a      	bne.n	8007a36 <_strtod_l+0xa46>
 8007a00:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007a04:	b9eb      	cbnz	r3, 8007a42 <_strtod_l+0xa52>
 8007a06:	2200      	movs	r2, #0
 8007a08:	4b3f      	ldr	r3, [pc, #252]	; (8007b08 <_strtod_l+0xb18>)
 8007a0a:	4630      	mov	r0, r6
 8007a0c:	4639      	mov	r1, r7
 8007a0e:	f7f9 f86d 	bl	8000aec <__aeabi_dcmplt>
 8007a12:	b9c8      	cbnz	r0, 8007a48 <_strtod_l+0xa58>
 8007a14:	4630      	mov	r0, r6
 8007a16:	4639      	mov	r1, r7
 8007a18:	2200      	movs	r2, #0
 8007a1a:	4b3e      	ldr	r3, [pc, #248]	; (8007b14 <_strtod_l+0xb24>)
 8007a1c:	f7f8 fdf4 	bl	8000608 <__aeabi_dmul>
 8007a20:	4606      	mov	r6, r0
 8007a22:	460f      	mov	r7, r1
 8007a24:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007a28:	9618      	str	r6, [sp, #96]	; 0x60
 8007a2a:	9319      	str	r3, [sp, #100]	; 0x64
 8007a2c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8007a30:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007a34:	e79c      	b.n	8007970 <_strtod_l+0x980>
 8007a36:	f1ba 0f01 	cmp.w	sl, #1
 8007a3a:	d102      	bne.n	8007a42 <_strtod_l+0xa52>
 8007a3c:	2d00      	cmp	r5, #0
 8007a3e:	f43f ad8e 	beq.w	800755e <_strtod_l+0x56e>
 8007a42:	2200      	movs	r2, #0
 8007a44:	4b34      	ldr	r3, [pc, #208]	; (8007b18 <_strtod_l+0xb28>)
 8007a46:	e78f      	b.n	8007968 <_strtod_l+0x978>
 8007a48:	2600      	movs	r6, #0
 8007a4a:	4f32      	ldr	r7, [pc, #200]	; (8007b14 <_strtod_l+0xb24>)
 8007a4c:	e7ea      	b.n	8007a24 <_strtod_l+0xa34>
 8007a4e:	4b31      	ldr	r3, [pc, #196]	; (8007b14 <_strtod_l+0xb24>)
 8007a50:	4630      	mov	r0, r6
 8007a52:	4639      	mov	r1, r7
 8007a54:	2200      	movs	r2, #0
 8007a56:	f7f8 fdd7 	bl	8000608 <__aeabi_dmul>
 8007a5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a5c:	4606      	mov	r6, r0
 8007a5e:	460f      	mov	r7, r1
 8007a60:	b933      	cbnz	r3, 8007a70 <_strtod_l+0xa80>
 8007a62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a66:	9010      	str	r0, [sp, #64]	; 0x40
 8007a68:	9311      	str	r3, [sp, #68]	; 0x44
 8007a6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007a6e:	e7df      	b.n	8007a30 <_strtod_l+0xa40>
 8007a70:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8007a74:	e7f9      	b.n	8007a6a <_strtod_l+0xa7a>
 8007a76:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007a7a:	9b04      	ldr	r3, [sp, #16]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d1ab      	bne.n	80079d8 <_strtod_l+0x9e8>
 8007a80:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007a84:	0d1b      	lsrs	r3, r3, #20
 8007a86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007a88:	051b      	lsls	r3, r3, #20
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	465d      	mov	r5, fp
 8007a8e:	d1a3      	bne.n	80079d8 <_strtod_l+0x9e8>
 8007a90:	4639      	mov	r1, r7
 8007a92:	4630      	mov	r0, r6
 8007a94:	f7f9 f852 	bl	8000b3c <__aeabi_d2iz>
 8007a98:	f7f8 fd4c 	bl	8000534 <__aeabi_i2d>
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	4639      	mov	r1, r7
 8007aa2:	4630      	mov	r0, r6
 8007aa4:	f7f8 fbf8 	bl	8000298 <__aeabi_dsub>
 8007aa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007aaa:	4606      	mov	r6, r0
 8007aac:	460f      	mov	r7, r1
 8007aae:	b933      	cbnz	r3, 8007abe <_strtod_l+0xace>
 8007ab0:	f1ba 0f00 	cmp.w	sl, #0
 8007ab4:	d103      	bne.n	8007abe <_strtod_l+0xace>
 8007ab6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8007aba:	2d00      	cmp	r5, #0
 8007abc:	d06d      	beq.n	8007b9a <_strtod_l+0xbaa>
 8007abe:	a30a      	add	r3, pc, #40	; (adr r3, 8007ae8 <_strtod_l+0xaf8>)
 8007ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac4:	4630      	mov	r0, r6
 8007ac6:	4639      	mov	r1, r7
 8007ac8:	f7f9 f810 	bl	8000aec <__aeabi_dcmplt>
 8007acc:	2800      	cmp	r0, #0
 8007ace:	f47f acb8 	bne.w	8007442 <_strtod_l+0x452>
 8007ad2:	a307      	add	r3, pc, #28	; (adr r3, 8007af0 <_strtod_l+0xb00>)
 8007ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad8:	4630      	mov	r0, r6
 8007ada:	4639      	mov	r1, r7
 8007adc:	f7f9 f824 	bl	8000b28 <__aeabi_dcmpgt>
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	f43f af79 	beq.w	80079d8 <_strtod_l+0x9e8>
 8007ae6:	e4ac      	b.n	8007442 <_strtod_l+0x452>
 8007ae8:	94a03595 	.word	0x94a03595
 8007aec:	3fdfffff 	.word	0x3fdfffff
 8007af0:	35afe535 	.word	0x35afe535
 8007af4:	3fe00000 	.word	0x3fe00000
 8007af8:	000fffff 	.word	0x000fffff
 8007afc:	7ff00000 	.word	0x7ff00000
 8007b00:	7fefffff 	.word	0x7fefffff
 8007b04:	39500000 	.word	0x39500000
 8007b08:	3ff00000 	.word	0x3ff00000
 8007b0c:	7fe00000 	.word	0x7fe00000
 8007b10:	7c9fffff 	.word	0x7c9fffff
 8007b14:	3fe00000 	.word	0x3fe00000
 8007b18:	bff00000 	.word	0xbff00000
 8007b1c:	9b04      	ldr	r3, [sp, #16]
 8007b1e:	b333      	cbz	r3, 8007b6e <_strtod_l+0xb7e>
 8007b20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b22:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007b26:	d822      	bhi.n	8007b6e <_strtod_l+0xb7e>
 8007b28:	a327      	add	r3, pc, #156	; (adr r3, 8007bc8 <_strtod_l+0xbd8>)
 8007b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b2e:	4630      	mov	r0, r6
 8007b30:	4639      	mov	r1, r7
 8007b32:	f7f8 ffe5 	bl	8000b00 <__aeabi_dcmple>
 8007b36:	b1a0      	cbz	r0, 8007b62 <_strtod_l+0xb72>
 8007b38:	4639      	mov	r1, r7
 8007b3a:	4630      	mov	r0, r6
 8007b3c:	f7f9 f826 	bl	8000b8c <__aeabi_d2uiz>
 8007b40:	2800      	cmp	r0, #0
 8007b42:	bf08      	it	eq
 8007b44:	2001      	moveq	r0, #1
 8007b46:	f7f8 fce5 	bl	8000514 <__aeabi_ui2d>
 8007b4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b4c:	4606      	mov	r6, r0
 8007b4e:	460f      	mov	r7, r1
 8007b50:	bb03      	cbnz	r3, 8007b94 <_strtod_l+0xba4>
 8007b52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b56:	9012      	str	r0, [sp, #72]	; 0x48
 8007b58:	9313      	str	r3, [sp, #76]	; 0x4c
 8007b5a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8007b5e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007b62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007b66:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007b6a:	1a9b      	subs	r3, r3, r2
 8007b6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b6e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8007b72:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8007b76:	f000 fe6b 	bl	8008850 <__ulp>
 8007b7a:	4650      	mov	r0, sl
 8007b7c:	ec53 2b10 	vmov	r2, r3, d0
 8007b80:	4659      	mov	r1, fp
 8007b82:	f7f8 fd41 	bl	8000608 <__aeabi_dmul>
 8007b86:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007b8a:	f7f8 fb87 	bl	800029c <__adddf3>
 8007b8e:	4682      	mov	sl, r0
 8007b90:	468b      	mov	fp, r1
 8007b92:	e772      	b.n	8007a7a <_strtod_l+0xa8a>
 8007b94:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8007b98:	e7df      	b.n	8007b5a <_strtod_l+0xb6a>
 8007b9a:	a30d      	add	r3, pc, #52	; (adr r3, 8007bd0 <_strtod_l+0xbe0>)
 8007b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba0:	f7f8 ffa4 	bl	8000aec <__aeabi_dcmplt>
 8007ba4:	e79c      	b.n	8007ae0 <_strtod_l+0xaf0>
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	930d      	str	r3, [sp, #52]	; 0x34
 8007baa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007bac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007bae:	6013      	str	r3, [r2, #0]
 8007bb0:	f7ff ba61 	b.w	8007076 <_strtod_l+0x86>
 8007bb4:	2b65      	cmp	r3, #101	; 0x65
 8007bb6:	f04f 0200 	mov.w	r2, #0
 8007bba:	f43f ab4e 	beq.w	800725a <_strtod_l+0x26a>
 8007bbe:	2101      	movs	r1, #1
 8007bc0:	4614      	mov	r4, r2
 8007bc2:	9104      	str	r1, [sp, #16]
 8007bc4:	f7ff bacb 	b.w	800715e <_strtod_l+0x16e>
 8007bc8:	ffc00000 	.word	0xffc00000
 8007bcc:	41dfffff 	.word	0x41dfffff
 8007bd0:	94a03595 	.word	0x94a03595
 8007bd4:	3fcfffff 	.word	0x3fcfffff

08007bd8 <strtod>:
 8007bd8:	4b07      	ldr	r3, [pc, #28]	; (8007bf8 <strtod+0x20>)
 8007bda:	4a08      	ldr	r2, [pc, #32]	; (8007bfc <strtod+0x24>)
 8007bdc:	b410      	push	{r4}
 8007bde:	681c      	ldr	r4, [r3, #0]
 8007be0:	6a23      	ldr	r3, [r4, #32]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	bf08      	it	eq
 8007be6:	4613      	moveq	r3, r2
 8007be8:	460a      	mov	r2, r1
 8007bea:	4601      	mov	r1, r0
 8007bec:	4620      	mov	r0, r4
 8007bee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bf2:	f7ff b9fd 	b.w	8006ff0 <_strtod_l>
 8007bf6:	bf00      	nop
 8007bf8:	20000010 	.word	0x20000010
 8007bfc:	20000074 	.word	0x20000074

08007c00 <_vsiprintf_r>:
 8007c00:	b500      	push	{lr}
 8007c02:	b09b      	sub	sp, #108	; 0x6c
 8007c04:	9100      	str	r1, [sp, #0]
 8007c06:	9104      	str	r1, [sp, #16]
 8007c08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007c0c:	9105      	str	r1, [sp, #20]
 8007c0e:	9102      	str	r1, [sp, #8]
 8007c10:	4905      	ldr	r1, [pc, #20]	; (8007c28 <_vsiprintf_r+0x28>)
 8007c12:	9103      	str	r1, [sp, #12]
 8007c14:	4669      	mov	r1, sp
 8007c16:	f000 ffb7 	bl	8008b88 <_svfiprintf_r>
 8007c1a:	9b00      	ldr	r3, [sp, #0]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	701a      	strb	r2, [r3, #0]
 8007c20:	b01b      	add	sp, #108	; 0x6c
 8007c22:	f85d fb04 	ldr.w	pc, [sp], #4
 8007c26:	bf00      	nop
 8007c28:	ffff0208 	.word	0xffff0208

08007c2c <vsiprintf>:
 8007c2c:	4613      	mov	r3, r2
 8007c2e:	460a      	mov	r2, r1
 8007c30:	4601      	mov	r1, r0
 8007c32:	4802      	ldr	r0, [pc, #8]	; (8007c3c <vsiprintf+0x10>)
 8007c34:	6800      	ldr	r0, [r0, #0]
 8007c36:	f7ff bfe3 	b.w	8007c00 <_vsiprintf_r>
 8007c3a:	bf00      	nop
 8007c3c:	20000010 	.word	0x20000010

08007c40 <rshift>:
 8007c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c42:	6906      	ldr	r6, [r0, #16]
 8007c44:	114b      	asrs	r3, r1, #5
 8007c46:	429e      	cmp	r6, r3
 8007c48:	f100 0414 	add.w	r4, r0, #20
 8007c4c:	dd30      	ble.n	8007cb0 <rshift+0x70>
 8007c4e:	f011 011f 	ands.w	r1, r1, #31
 8007c52:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007c56:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8007c5a:	d108      	bne.n	8007c6e <rshift+0x2e>
 8007c5c:	4621      	mov	r1, r4
 8007c5e:	42b2      	cmp	r2, r6
 8007c60:	460b      	mov	r3, r1
 8007c62:	d211      	bcs.n	8007c88 <rshift+0x48>
 8007c64:	f852 3b04 	ldr.w	r3, [r2], #4
 8007c68:	f841 3b04 	str.w	r3, [r1], #4
 8007c6c:	e7f7      	b.n	8007c5e <rshift+0x1e>
 8007c6e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8007c72:	f1c1 0c20 	rsb	ip, r1, #32
 8007c76:	40cd      	lsrs	r5, r1
 8007c78:	3204      	adds	r2, #4
 8007c7a:	4623      	mov	r3, r4
 8007c7c:	42b2      	cmp	r2, r6
 8007c7e:	4617      	mov	r7, r2
 8007c80:	d30c      	bcc.n	8007c9c <rshift+0x5c>
 8007c82:	601d      	str	r5, [r3, #0]
 8007c84:	b105      	cbz	r5, 8007c88 <rshift+0x48>
 8007c86:	3304      	adds	r3, #4
 8007c88:	1b1a      	subs	r2, r3, r4
 8007c8a:	42a3      	cmp	r3, r4
 8007c8c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007c90:	bf08      	it	eq
 8007c92:	2300      	moveq	r3, #0
 8007c94:	6102      	str	r2, [r0, #16]
 8007c96:	bf08      	it	eq
 8007c98:	6143      	streq	r3, [r0, #20]
 8007c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c9c:	683f      	ldr	r7, [r7, #0]
 8007c9e:	fa07 f70c 	lsl.w	r7, r7, ip
 8007ca2:	433d      	orrs	r5, r7
 8007ca4:	f843 5b04 	str.w	r5, [r3], #4
 8007ca8:	f852 5b04 	ldr.w	r5, [r2], #4
 8007cac:	40cd      	lsrs	r5, r1
 8007cae:	e7e5      	b.n	8007c7c <rshift+0x3c>
 8007cb0:	4623      	mov	r3, r4
 8007cb2:	e7e9      	b.n	8007c88 <rshift+0x48>

08007cb4 <__hexdig_fun>:
 8007cb4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007cb8:	2b09      	cmp	r3, #9
 8007cba:	d802      	bhi.n	8007cc2 <__hexdig_fun+0xe>
 8007cbc:	3820      	subs	r0, #32
 8007cbe:	b2c0      	uxtb	r0, r0
 8007cc0:	4770      	bx	lr
 8007cc2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007cc6:	2b05      	cmp	r3, #5
 8007cc8:	d801      	bhi.n	8007cce <__hexdig_fun+0x1a>
 8007cca:	3847      	subs	r0, #71	; 0x47
 8007ccc:	e7f7      	b.n	8007cbe <__hexdig_fun+0xa>
 8007cce:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007cd2:	2b05      	cmp	r3, #5
 8007cd4:	d801      	bhi.n	8007cda <__hexdig_fun+0x26>
 8007cd6:	3827      	subs	r0, #39	; 0x27
 8007cd8:	e7f1      	b.n	8007cbe <__hexdig_fun+0xa>
 8007cda:	2000      	movs	r0, #0
 8007cdc:	4770      	bx	lr

08007cde <__gethex>:
 8007cde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce2:	b08b      	sub	sp, #44	; 0x2c
 8007ce4:	468a      	mov	sl, r1
 8007ce6:	9002      	str	r0, [sp, #8]
 8007ce8:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007cea:	9306      	str	r3, [sp, #24]
 8007cec:	4690      	mov	r8, r2
 8007cee:	f000 facd 	bl	800828c <__localeconv_l>
 8007cf2:	6803      	ldr	r3, [r0, #0]
 8007cf4:	9303      	str	r3, [sp, #12]
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7f8 fa72 	bl	80001e0 <strlen>
 8007cfc:	9b03      	ldr	r3, [sp, #12]
 8007cfe:	9001      	str	r0, [sp, #4]
 8007d00:	4403      	add	r3, r0
 8007d02:	f04f 0b00 	mov.w	fp, #0
 8007d06:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007d0a:	9307      	str	r3, [sp, #28]
 8007d0c:	f8da 3000 	ldr.w	r3, [sl]
 8007d10:	3302      	adds	r3, #2
 8007d12:	461f      	mov	r7, r3
 8007d14:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007d18:	2830      	cmp	r0, #48	; 0x30
 8007d1a:	d06c      	beq.n	8007df6 <__gethex+0x118>
 8007d1c:	f7ff ffca 	bl	8007cb4 <__hexdig_fun>
 8007d20:	4604      	mov	r4, r0
 8007d22:	2800      	cmp	r0, #0
 8007d24:	d16a      	bne.n	8007dfc <__gethex+0x11e>
 8007d26:	9a01      	ldr	r2, [sp, #4]
 8007d28:	9903      	ldr	r1, [sp, #12]
 8007d2a:	4638      	mov	r0, r7
 8007d2c:	f7ff f930 	bl	8006f90 <strncmp>
 8007d30:	2800      	cmp	r0, #0
 8007d32:	d166      	bne.n	8007e02 <__gethex+0x124>
 8007d34:	9b01      	ldr	r3, [sp, #4]
 8007d36:	5cf8      	ldrb	r0, [r7, r3]
 8007d38:	18fe      	adds	r6, r7, r3
 8007d3a:	f7ff ffbb 	bl	8007cb4 <__hexdig_fun>
 8007d3e:	2800      	cmp	r0, #0
 8007d40:	d062      	beq.n	8007e08 <__gethex+0x12a>
 8007d42:	4633      	mov	r3, r6
 8007d44:	7818      	ldrb	r0, [r3, #0]
 8007d46:	2830      	cmp	r0, #48	; 0x30
 8007d48:	461f      	mov	r7, r3
 8007d4a:	f103 0301 	add.w	r3, r3, #1
 8007d4e:	d0f9      	beq.n	8007d44 <__gethex+0x66>
 8007d50:	f7ff ffb0 	bl	8007cb4 <__hexdig_fun>
 8007d54:	fab0 f580 	clz	r5, r0
 8007d58:	096d      	lsrs	r5, r5, #5
 8007d5a:	4634      	mov	r4, r6
 8007d5c:	f04f 0b01 	mov.w	fp, #1
 8007d60:	463a      	mov	r2, r7
 8007d62:	4616      	mov	r6, r2
 8007d64:	3201      	adds	r2, #1
 8007d66:	7830      	ldrb	r0, [r6, #0]
 8007d68:	f7ff ffa4 	bl	8007cb4 <__hexdig_fun>
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	d1f8      	bne.n	8007d62 <__gethex+0x84>
 8007d70:	9a01      	ldr	r2, [sp, #4]
 8007d72:	9903      	ldr	r1, [sp, #12]
 8007d74:	4630      	mov	r0, r6
 8007d76:	f7ff f90b 	bl	8006f90 <strncmp>
 8007d7a:	b950      	cbnz	r0, 8007d92 <__gethex+0xb4>
 8007d7c:	b954      	cbnz	r4, 8007d94 <__gethex+0xb6>
 8007d7e:	9b01      	ldr	r3, [sp, #4]
 8007d80:	18f4      	adds	r4, r6, r3
 8007d82:	4622      	mov	r2, r4
 8007d84:	4616      	mov	r6, r2
 8007d86:	3201      	adds	r2, #1
 8007d88:	7830      	ldrb	r0, [r6, #0]
 8007d8a:	f7ff ff93 	bl	8007cb4 <__hexdig_fun>
 8007d8e:	2800      	cmp	r0, #0
 8007d90:	d1f8      	bne.n	8007d84 <__gethex+0xa6>
 8007d92:	b10c      	cbz	r4, 8007d98 <__gethex+0xba>
 8007d94:	1ba4      	subs	r4, r4, r6
 8007d96:	00a4      	lsls	r4, r4, #2
 8007d98:	7833      	ldrb	r3, [r6, #0]
 8007d9a:	2b50      	cmp	r3, #80	; 0x50
 8007d9c:	d001      	beq.n	8007da2 <__gethex+0xc4>
 8007d9e:	2b70      	cmp	r3, #112	; 0x70
 8007da0:	d140      	bne.n	8007e24 <__gethex+0x146>
 8007da2:	7873      	ldrb	r3, [r6, #1]
 8007da4:	2b2b      	cmp	r3, #43	; 0x2b
 8007da6:	d031      	beq.n	8007e0c <__gethex+0x12e>
 8007da8:	2b2d      	cmp	r3, #45	; 0x2d
 8007daa:	d033      	beq.n	8007e14 <__gethex+0x136>
 8007dac:	1c71      	adds	r1, r6, #1
 8007dae:	f04f 0900 	mov.w	r9, #0
 8007db2:	7808      	ldrb	r0, [r1, #0]
 8007db4:	f7ff ff7e 	bl	8007cb4 <__hexdig_fun>
 8007db8:	1e43      	subs	r3, r0, #1
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	2b18      	cmp	r3, #24
 8007dbe:	d831      	bhi.n	8007e24 <__gethex+0x146>
 8007dc0:	f1a0 0210 	sub.w	r2, r0, #16
 8007dc4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007dc8:	f7ff ff74 	bl	8007cb4 <__hexdig_fun>
 8007dcc:	1e43      	subs	r3, r0, #1
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	2b18      	cmp	r3, #24
 8007dd2:	d922      	bls.n	8007e1a <__gethex+0x13c>
 8007dd4:	f1b9 0f00 	cmp.w	r9, #0
 8007dd8:	d000      	beq.n	8007ddc <__gethex+0xfe>
 8007dda:	4252      	negs	r2, r2
 8007ddc:	4414      	add	r4, r2
 8007dde:	f8ca 1000 	str.w	r1, [sl]
 8007de2:	b30d      	cbz	r5, 8007e28 <__gethex+0x14a>
 8007de4:	f1bb 0f00 	cmp.w	fp, #0
 8007de8:	bf0c      	ite	eq
 8007dea:	2706      	moveq	r7, #6
 8007dec:	2700      	movne	r7, #0
 8007dee:	4638      	mov	r0, r7
 8007df0:	b00b      	add	sp, #44	; 0x2c
 8007df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007df6:	f10b 0b01 	add.w	fp, fp, #1
 8007dfa:	e78a      	b.n	8007d12 <__gethex+0x34>
 8007dfc:	2500      	movs	r5, #0
 8007dfe:	462c      	mov	r4, r5
 8007e00:	e7ae      	b.n	8007d60 <__gethex+0x82>
 8007e02:	463e      	mov	r6, r7
 8007e04:	2501      	movs	r5, #1
 8007e06:	e7c7      	b.n	8007d98 <__gethex+0xba>
 8007e08:	4604      	mov	r4, r0
 8007e0a:	e7fb      	b.n	8007e04 <__gethex+0x126>
 8007e0c:	f04f 0900 	mov.w	r9, #0
 8007e10:	1cb1      	adds	r1, r6, #2
 8007e12:	e7ce      	b.n	8007db2 <__gethex+0xd4>
 8007e14:	f04f 0901 	mov.w	r9, #1
 8007e18:	e7fa      	b.n	8007e10 <__gethex+0x132>
 8007e1a:	230a      	movs	r3, #10
 8007e1c:	fb03 0202 	mla	r2, r3, r2, r0
 8007e20:	3a10      	subs	r2, #16
 8007e22:	e7cf      	b.n	8007dc4 <__gethex+0xe6>
 8007e24:	4631      	mov	r1, r6
 8007e26:	e7da      	b.n	8007dde <__gethex+0x100>
 8007e28:	1bf3      	subs	r3, r6, r7
 8007e2a:	3b01      	subs	r3, #1
 8007e2c:	4629      	mov	r1, r5
 8007e2e:	2b07      	cmp	r3, #7
 8007e30:	dc49      	bgt.n	8007ec6 <__gethex+0x1e8>
 8007e32:	9802      	ldr	r0, [sp, #8]
 8007e34:	f000 fa40 	bl	80082b8 <_Balloc>
 8007e38:	9b01      	ldr	r3, [sp, #4]
 8007e3a:	f100 0914 	add.w	r9, r0, #20
 8007e3e:	f04f 0b00 	mov.w	fp, #0
 8007e42:	f1c3 0301 	rsb	r3, r3, #1
 8007e46:	4605      	mov	r5, r0
 8007e48:	f8cd 9010 	str.w	r9, [sp, #16]
 8007e4c:	46da      	mov	sl, fp
 8007e4e:	9308      	str	r3, [sp, #32]
 8007e50:	42b7      	cmp	r7, r6
 8007e52:	d33b      	bcc.n	8007ecc <__gethex+0x1ee>
 8007e54:	9804      	ldr	r0, [sp, #16]
 8007e56:	f840 ab04 	str.w	sl, [r0], #4
 8007e5a:	eba0 0009 	sub.w	r0, r0, r9
 8007e5e:	1080      	asrs	r0, r0, #2
 8007e60:	6128      	str	r0, [r5, #16]
 8007e62:	0147      	lsls	r7, r0, #5
 8007e64:	4650      	mov	r0, sl
 8007e66:	f000 faeb 	bl	8008440 <__hi0bits>
 8007e6a:	f8d8 6000 	ldr.w	r6, [r8]
 8007e6e:	1a3f      	subs	r7, r7, r0
 8007e70:	42b7      	cmp	r7, r6
 8007e72:	dd64      	ble.n	8007f3e <__gethex+0x260>
 8007e74:	1bbf      	subs	r7, r7, r6
 8007e76:	4639      	mov	r1, r7
 8007e78:	4628      	mov	r0, r5
 8007e7a:	f000 fdfb 	bl	8008a74 <__any_on>
 8007e7e:	4682      	mov	sl, r0
 8007e80:	b178      	cbz	r0, 8007ea2 <__gethex+0x1c4>
 8007e82:	1e7b      	subs	r3, r7, #1
 8007e84:	1159      	asrs	r1, r3, #5
 8007e86:	f003 021f 	and.w	r2, r3, #31
 8007e8a:	f04f 0a01 	mov.w	sl, #1
 8007e8e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007e92:	fa0a f202 	lsl.w	r2, sl, r2
 8007e96:	420a      	tst	r2, r1
 8007e98:	d003      	beq.n	8007ea2 <__gethex+0x1c4>
 8007e9a:	4553      	cmp	r3, sl
 8007e9c:	dc46      	bgt.n	8007f2c <__gethex+0x24e>
 8007e9e:	f04f 0a02 	mov.w	sl, #2
 8007ea2:	4639      	mov	r1, r7
 8007ea4:	4628      	mov	r0, r5
 8007ea6:	f7ff fecb 	bl	8007c40 <rshift>
 8007eaa:	443c      	add	r4, r7
 8007eac:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007eb0:	42a3      	cmp	r3, r4
 8007eb2:	da52      	bge.n	8007f5a <__gethex+0x27c>
 8007eb4:	4629      	mov	r1, r5
 8007eb6:	9802      	ldr	r0, [sp, #8]
 8007eb8:	f000 fa32 	bl	8008320 <_Bfree>
 8007ebc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	6013      	str	r3, [r2, #0]
 8007ec2:	27a3      	movs	r7, #163	; 0xa3
 8007ec4:	e793      	b.n	8007dee <__gethex+0x110>
 8007ec6:	3101      	adds	r1, #1
 8007ec8:	105b      	asrs	r3, r3, #1
 8007eca:	e7b0      	b.n	8007e2e <__gethex+0x150>
 8007ecc:	1e73      	subs	r3, r6, #1
 8007ece:	9305      	str	r3, [sp, #20]
 8007ed0:	9a07      	ldr	r2, [sp, #28]
 8007ed2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d018      	beq.n	8007f0c <__gethex+0x22e>
 8007eda:	f1bb 0f20 	cmp.w	fp, #32
 8007ede:	d107      	bne.n	8007ef0 <__gethex+0x212>
 8007ee0:	9b04      	ldr	r3, [sp, #16]
 8007ee2:	f8c3 a000 	str.w	sl, [r3]
 8007ee6:	3304      	adds	r3, #4
 8007ee8:	f04f 0a00 	mov.w	sl, #0
 8007eec:	9304      	str	r3, [sp, #16]
 8007eee:	46d3      	mov	fp, sl
 8007ef0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007ef4:	f7ff fede 	bl	8007cb4 <__hexdig_fun>
 8007ef8:	f000 000f 	and.w	r0, r0, #15
 8007efc:	fa00 f00b 	lsl.w	r0, r0, fp
 8007f00:	ea4a 0a00 	orr.w	sl, sl, r0
 8007f04:	f10b 0b04 	add.w	fp, fp, #4
 8007f08:	9b05      	ldr	r3, [sp, #20]
 8007f0a:	e00d      	b.n	8007f28 <__gethex+0x24a>
 8007f0c:	9b05      	ldr	r3, [sp, #20]
 8007f0e:	9a08      	ldr	r2, [sp, #32]
 8007f10:	4413      	add	r3, r2
 8007f12:	42bb      	cmp	r3, r7
 8007f14:	d3e1      	bcc.n	8007eda <__gethex+0x1fc>
 8007f16:	4618      	mov	r0, r3
 8007f18:	9a01      	ldr	r2, [sp, #4]
 8007f1a:	9903      	ldr	r1, [sp, #12]
 8007f1c:	9309      	str	r3, [sp, #36]	; 0x24
 8007f1e:	f7ff f837 	bl	8006f90 <strncmp>
 8007f22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f24:	2800      	cmp	r0, #0
 8007f26:	d1d8      	bne.n	8007eda <__gethex+0x1fc>
 8007f28:	461e      	mov	r6, r3
 8007f2a:	e791      	b.n	8007e50 <__gethex+0x172>
 8007f2c:	1eb9      	subs	r1, r7, #2
 8007f2e:	4628      	mov	r0, r5
 8007f30:	f000 fda0 	bl	8008a74 <__any_on>
 8007f34:	2800      	cmp	r0, #0
 8007f36:	d0b2      	beq.n	8007e9e <__gethex+0x1c0>
 8007f38:	f04f 0a03 	mov.w	sl, #3
 8007f3c:	e7b1      	b.n	8007ea2 <__gethex+0x1c4>
 8007f3e:	da09      	bge.n	8007f54 <__gethex+0x276>
 8007f40:	1bf7      	subs	r7, r6, r7
 8007f42:	4629      	mov	r1, r5
 8007f44:	463a      	mov	r2, r7
 8007f46:	9802      	ldr	r0, [sp, #8]
 8007f48:	f000 fbb6 	bl	80086b8 <__lshift>
 8007f4c:	1be4      	subs	r4, r4, r7
 8007f4e:	4605      	mov	r5, r0
 8007f50:	f100 0914 	add.w	r9, r0, #20
 8007f54:	f04f 0a00 	mov.w	sl, #0
 8007f58:	e7a8      	b.n	8007eac <__gethex+0x1ce>
 8007f5a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007f5e:	42a0      	cmp	r0, r4
 8007f60:	dd6a      	ble.n	8008038 <__gethex+0x35a>
 8007f62:	1b04      	subs	r4, r0, r4
 8007f64:	42a6      	cmp	r6, r4
 8007f66:	dc2e      	bgt.n	8007fc6 <__gethex+0x2e8>
 8007f68:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007f6c:	2b02      	cmp	r3, #2
 8007f6e:	d022      	beq.n	8007fb6 <__gethex+0x2d8>
 8007f70:	2b03      	cmp	r3, #3
 8007f72:	d024      	beq.n	8007fbe <__gethex+0x2e0>
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d115      	bne.n	8007fa4 <__gethex+0x2c6>
 8007f78:	42a6      	cmp	r6, r4
 8007f7a:	d113      	bne.n	8007fa4 <__gethex+0x2c6>
 8007f7c:	2e01      	cmp	r6, #1
 8007f7e:	dc0b      	bgt.n	8007f98 <__gethex+0x2ba>
 8007f80:	9a06      	ldr	r2, [sp, #24]
 8007f82:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007f86:	6013      	str	r3, [r2, #0]
 8007f88:	2301      	movs	r3, #1
 8007f8a:	612b      	str	r3, [r5, #16]
 8007f8c:	f8c9 3000 	str.w	r3, [r9]
 8007f90:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f92:	2762      	movs	r7, #98	; 0x62
 8007f94:	601d      	str	r5, [r3, #0]
 8007f96:	e72a      	b.n	8007dee <__gethex+0x110>
 8007f98:	1e71      	subs	r1, r6, #1
 8007f9a:	4628      	mov	r0, r5
 8007f9c:	f000 fd6a 	bl	8008a74 <__any_on>
 8007fa0:	2800      	cmp	r0, #0
 8007fa2:	d1ed      	bne.n	8007f80 <__gethex+0x2a2>
 8007fa4:	4629      	mov	r1, r5
 8007fa6:	9802      	ldr	r0, [sp, #8]
 8007fa8:	f000 f9ba 	bl	8008320 <_Bfree>
 8007fac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007fae:	2300      	movs	r3, #0
 8007fb0:	6013      	str	r3, [r2, #0]
 8007fb2:	2750      	movs	r7, #80	; 0x50
 8007fb4:	e71b      	b.n	8007dee <__gethex+0x110>
 8007fb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d0e1      	beq.n	8007f80 <__gethex+0x2a2>
 8007fbc:	e7f2      	b.n	8007fa4 <__gethex+0x2c6>
 8007fbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d1dd      	bne.n	8007f80 <__gethex+0x2a2>
 8007fc4:	e7ee      	b.n	8007fa4 <__gethex+0x2c6>
 8007fc6:	1e67      	subs	r7, r4, #1
 8007fc8:	f1ba 0f00 	cmp.w	sl, #0
 8007fcc:	d131      	bne.n	8008032 <__gethex+0x354>
 8007fce:	b127      	cbz	r7, 8007fda <__gethex+0x2fc>
 8007fd0:	4639      	mov	r1, r7
 8007fd2:	4628      	mov	r0, r5
 8007fd4:	f000 fd4e 	bl	8008a74 <__any_on>
 8007fd8:	4682      	mov	sl, r0
 8007fda:	117a      	asrs	r2, r7, #5
 8007fdc:	2301      	movs	r3, #1
 8007fde:	f007 071f 	and.w	r7, r7, #31
 8007fe2:	fa03 f707 	lsl.w	r7, r3, r7
 8007fe6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8007fea:	4621      	mov	r1, r4
 8007fec:	421f      	tst	r7, r3
 8007fee:	4628      	mov	r0, r5
 8007ff0:	bf18      	it	ne
 8007ff2:	f04a 0a02 	orrne.w	sl, sl, #2
 8007ff6:	1b36      	subs	r6, r6, r4
 8007ff8:	f7ff fe22 	bl	8007c40 <rshift>
 8007ffc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8008000:	2702      	movs	r7, #2
 8008002:	f1ba 0f00 	cmp.w	sl, #0
 8008006:	d048      	beq.n	800809a <__gethex+0x3bc>
 8008008:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800800c:	2b02      	cmp	r3, #2
 800800e:	d015      	beq.n	800803c <__gethex+0x35e>
 8008010:	2b03      	cmp	r3, #3
 8008012:	d017      	beq.n	8008044 <__gethex+0x366>
 8008014:	2b01      	cmp	r3, #1
 8008016:	d109      	bne.n	800802c <__gethex+0x34e>
 8008018:	f01a 0f02 	tst.w	sl, #2
 800801c:	d006      	beq.n	800802c <__gethex+0x34e>
 800801e:	f8d9 3000 	ldr.w	r3, [r9]
 8008022:	ea4a 0a03 	orr.w	sl, sl, r3
 8008026:	f01a 0f01 	tst.w	sl, #1
 800802a:	d10e      	bne.n	800804a <__gethex+0x36c>
 800802c:	f047 0710 	orr.w	r7, r7, #16
 8008030:	e033      	b.n	800809a <__gethex+0x3bc>
 8008032:	f04f 0a01 	mov.w	sl, #1
 8008036:	e7d0      	b.n	8007fda <__gethex+0x2fc>
 8008038:	2701      	movs	r7, #1
 800803a:	e7e2      	b.n	8008002 <__gethex+0x324>
 800803c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800803e:	f1c3 0301 	rsb	r3, r3, #1
 8008042:	9315      	str	r3, [sp, #84]	; 0x54
 8008044:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008046:	2b00      	cmp	r3, #0
 8008048:	d0f0      	beq.n	800802c <__gethex+0x34e>
 800804a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800804e:	f105 0314 	add.w	r3, r5, #20
 8008052:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8008056:	eb03 010a 	add.w	r1, r3, sl
 800805a:	f04f 0c00 	mov.w	ip, #0
 800805e:	4618      	mov	r0, r3
 8008060:	f853 2b04 	ldr.w	r2, [r3], #4
 8008064:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8008068:	d01c      	beq.n	80080a4 <__gethex+0x3c6>
 800806a:	3201      	adds	r2, #1
 800806c:	6002      	str	r2, [r0, #0]
 800806e:	2f02      	cmp	r7, #2
 8008070:	f105 0314 	add.w	r3, r5, #20
 8008074:	d138      	bne.n	80080e8 <__gethex+0x40a>
 8008076:	f8d8 2000 	ldr.w	r2, [r8]
 800807a:	3a01      	subs	r2, #1
 800807c:	42b2      	cmp	r2, r6
 800807e:	d10a      	bne.n	8008096 <__gethex+0x3b8>
 8008080:	1171      	asrs	r1, r6, #5
 8008082:	2201      	movs	r2, #1
 8008084:	f006 061f 	and.w	r6, r6, #31
 8008088:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800808c:	fa02 f606 	lsl.w	r6, r2, r6
 8008090:	421e      	tst	r6, r3
 8008092:	bf18      	it	ne
 8008094:	4617      	movne	r7, r2
 8008096:	f047 0720 	orr.w	r7, r7, #32
 800809a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800809c:	601d      	str	r5, [r3, #0]
 800809e:	9b06      	ldr	r3, [sp, #24]
 80080a0:	601c      	str	r4, [r3, #0]
 80080a2:	e6a4      	b.n	8007dee <__gethex+0x110>
 80080a4:	4299      	cmp	r1, r3
 80080a6:	f843 cc04 	str.w	ip, [r3, #-4]
 80080aa:	d8d8      	bhi.n	800805e <__gethex+0x380>
 80080ac:	68ab      	ldr	r3, [r5, #8]
 80080ae:	4599      	cmp	r9, r3
 80080b0:	db12      	blt.n	80080d8 <__gethex+0x3fa>
 80080b2:	6869      	ldr	r1, [r5, #4]
 80080b4:	9802      	ldr	r0, [sp, #8]
 80080b6:	3101      	adds	r1, #1
 80080b8:	f000 f8fe 	bl	80082b8 <_Balloc>
 80080bc:	692a      	ldr	r2, [r5, #16]
 80080be:	3202      	adds	r2, #2
 80080c0:	f105 010c 	add.w	r1, r5, #12
 80080c4:	4683      	mov	fp, r0
 80080c6:	0092      	lsls	r2, r2, #2
 80080c8:	300c      	adds	r0, #12
 80080ca:	f7fe fe8d 	bl	8006de8 <memcpy>
 80080ce:	4629      	mov	r1, r5
 80080d0:	9802      	ldr	r0, [sp, #8]
 80080d2:	f000 f925 	bl	8008320 <_Bfree>
 80080d6:	465d      	mov	r5, fp
 80080d8:	692b      	ldr	r3, [r5, #16]
 80080da:	1c5a      	adds	r2, r3, #1
 80080dc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80080e0:	612a      	str	r2, [r5, #16]
 80080e2:	2201      	movs	r2, #1
 80080e4:	615a      	str	r2, [r3, #20]
 80080e6:	e7c2      	b.n	800806e <__gethex+0x390>
 80080e8:	692a      	ldr	r2, [r5, #16]
 80080ea:	454a      	cmp	r2, r9
 80080ec:	dd0b      	ble.n	8008106 <__gethex+0x428>
 80080ee:	2101      	movs	r1, #1
 80080f0:	4628      	mov	r0, r5
 80080f2:	f7ff fda5 	bl	8007c40 <rshift>
 80080f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80080fa:	3401      	adds	r4, #1
 80080fc:	42a3      	cmp	r3, r4
 80080fe:	f6ff aed9 	blt.w	8007eb4 <__gethex+0x1d6>
 8008102:	2701      	movs	r7, #1
 8008104:	e7c7      	b.n	8008096 <__gethex+0x3b8>
 8008106:	f016 061f 	ands.w	r6, r6, #31
 800810a:	d0fa      	beq.n	8008102 <__gethex+0x424>
 800810c:	449a      	add	sl, r3
 800810e:	f1c6 0620 	rsb	r6, r6, #32
 8008112:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008116:	f000 f993 	bl	8008440 <__hi0bits>
 800811a:	42b0      	cmp	r0, r6
 800811c:	dbe7      	blt.n	80080ee <__gethex+0x410>
 800811e:	e7f0      	b.n	8008102 <__gethex+0x424>

08008120 <L_shift>:
 8008120:	f1c2 0208 	rsb	r2, r2, #8
 8008124:	0092      	lsls	r2, r2, #2
 8008126:	b570      	push	{r4, r5, r6, lr}
 8008128:	f1c2 0620 	rsb	r6, r2, #32
 800812c:	6843      	ldr	r3, [r0, #4]
 800812e:	6804      	ldr	r4, [r0, #0]
 8008130:	fa03 f506 	lsl.w	r5, r3, r6
 8008134:	432c      	orrs	r4, r5
 8008136:	40d3      	lsrs	r3, r2
 8008138:	6004      	str	r4, [r0, #0]
 800813a:	f840 3f04 	str.w	r3, [r0, #4]!
 800813e:	4288      	cmp	r0, r1
 8008140:	d3f4      	bcc.n	800812c <L_shift+0xc>
 8008142:	bd70      	pop	{r4, r5, r6, pc}

08008144 <__match>:
 8008144:	b530      	push	{r4, r5, lr}
 8008146:	6803      	ldr	r3, [r0, #0]
 8008148:	3301      	adds	r3, #1
 800814a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800814e:	b914      	cbnz	r4, 8008156 <__match+0x12>
 8008150:	6003      	str	r3, [r0, #0]
 8008152:	2001      	movs	r0, #1
 8008154:	bd30      	pop	{r4, r5, pc}
 8008156:	f813 2b01 	ldrb.w	r2, [r3], #1
 800815a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800815e:	2d19      	cmp	r5, #25
 8008160:	bf98      	it	ls
 8008162:	3220      	addls	r2, #32
 8008164:	42a2      	cmp	r2, r4
 8008166:	d0f0      	beq.n	800814a <__match+0x6>
 8008168:	2000      	movs	r0, #0
 800816a:	e7f3      	b.n	8008154 <__match+0x10>

0800816c <__hexnan>:
 800816c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008170:	680b      	ldr	r3, [r1, #0]
 8008172:	6801      	ldr	r1, [r0, #0]
 8008174:	115f      	asrs	r7, r3, #5
 8008176:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800817a:	f013 031f 	ands.w	r3, r3, #31
 800817e:	b087      	sub	sp, #28
 8008180:	bf18      	it	ne
 8008182:	3704      	addne	r7, #4
 8008184:	2500      	movs	r5, #0
 8008186:	1f3e      	subs	r6, r7, #4
 8008188:	4682      	mov	sl, r0
 800818a:	4690      	mov	r8, r2
 800818c:	9301      	str	r3, [sp, #4]
 800818e:	f847 5c04 	str.w	r5, [r7, #-4]
 8008192:	46b1      	mov	r9, r6
 8008194:	4634      	mov	r4, r6
 8008196:	9502      	str	r5, [sp, #8]
 8008198:	46ab      	mov	fp, r5
 800819a:	784a      	ldrb	r2, [r1, #1]
 800819c:	1c4b      	adds	r3, r1, #1
 800819e:	9303      	str	r3, [sp, #12]
 80081a0:	b342      	cbz	r2, 80081f4 <__hexnan+0x88>
 80081a2:	4610      	mov	r0, r2
 80081a4:	9105      	str	r1, [sp, #20]
 80081a6:	9204      	str	r2, [sp, #16]
 80081a8:	f7ff fd84 	bl	8007cb4 <__hexdig_fun>
 80081ac:	2800      	cmp	r0, #0
 80081ae:	d143      	bne.n	8008238 <__hexnan+0xcc>
 80081b0:	9a04      	ldr	r2, [sp, #16]
 80081b2:	9905      	ldr	r1, [sp, #20]
 80081b4:	2a20      	cmp	r2, #32
 80081b6:	d818      	bhi.n	80081ea <__hexnan+0x7e>
 80081b8:	9b02      	ldr	r3, [sp, #8]
 80081ba:	459b      	cmp	fp, r3
 80081bc:	dd13      	ble.n	80081e6 <__hexnan+0x7a>
 80081be:	454c      	cmp	r4, r9
 80081c0:	d206      	bcs.n	80081d0 <__hexnan+0x64>
 80081c2:	2d07      	cmp	r5, #7
 80081c4:	dc04      	bgt.n	80081d0 <__hexnan+0x64>
 80081c6:	462a      	mov	r2, r5
 80081c8:	4649      	mov	r1, r9
 80081ca:	4620      	mov	r0, r4
 80081cc:	f7ff ffa8 	bl	8008120 <L_shift>
 80081d0:	4544      	cmp	r4, r8
 80081d2:	d944      	bls.n	800825e <__hexnan+0xf2>
 80081d4:	2300      	movs	r3, #0
 80081d6:	f1a4 0904 	sub.w	r9, r4, #4
 80081da:	f844 3c04 	str.w	r3, [r4, #-4]
 80081de:	f8cd b008 	str.w	fp, [sp, #8]
 80081e2:	464c      	mov	r4, r9
 80081e4:	461d      	mov	r5, r3
 80081e6:	9903      	ldr	r1, [sp, #12]
 80081e8:	e7d7      	b.n	800819a <__hexnan+0x2e>
 80081ea:	2a29      	cmp	r2, #41	; 0x29
 80081ec:	d14a      	bne.n	8008284 <__hexnan+0x118>
 80081ee:	3102      	adds	r1, #2
 80081f0:	f8ca 1000 	str.w	r1, [sl]
 80081f4:	f1bb 0f00 	cmp.w	fp, #0
 80081f8:	d044      	beq.n	8008284 <__hexnan+0x118>
 80081fa:	454c      	cmp	r4, r9
 80081fc:	d206      	bcs.n	800820c <__hexnan+0xa0>
 80081fe:	2d07      	cmp	r5, #7
 8008200:	dc04      	bgt.n	800820c <__hexnan+0xa0>
 8008202:	462a      	mov	r2, r5
 8008204:	4649      	mov	r1, r9
 8008206:	4620      	mov	r0, r4
 8008208:	f7ff ff8a 	bl	8008120 <L_shift>
 800820c:	4544      	cmp	r4, r8
 800820e:	d928      	bls.n	8008262 <__hexnan+0xf6>
 8008210:	4643      	mov	r3, r8
 8008212:	f854 2b04 	ldr.w	r2, [r4], #4
 8008216:	f843 2b04 	str.w	r2, [r3], #4
 800821a:	42a6      	cmp	r6, r4
 800821c:	d2f9      	bcs.n	8008212 <__hexnan+0xa6>
 800821e:	2200      	movs	r2, #0
 8008220:	f843 2b04 	str.w	r2, [r3], #4
 8008224:	429e      	cmp	r6, r3
 8008226:	d2fb      	bcs.n	8008220 <__hexnan+0xb4>
 8008228:	6833      	ldr	r3, [r6, #0]
 800822a:	b91b      	cbnz	r3, 8008234 <__hexnan+0xc8>
 800822c:	4546      	cmp	r6, r8
 800822e:	d127      	bne.n	8008280 <__hexnan+0x114>
 8008230:	2301      	movs	r3, #1
 8008232:	6033      	str	r3, [r6, #0]
 8008234:	2005      	movs	r0, #5
 8008236:	e026      	b.n	8008286 <__hexnan+0x11a>
 8008238:	3501      	adds	r5, #1
 800823a:	2d08      	cmp	r5, #8
 800823c:	f10b 0b01 	add.w	fp, fp, #1
 8008240:	dd06      	ble.n	8008250 <__hexnan+0xe4>
 8008242:	4544      	cmp	r4, r8
 8008244:	d9cf      	bls.n	80081e6 <__hexnan+0x7a>
 8008246:	2300      	movs	r3, #0
 8008248:	f844 3c04 	str.w	r3, [r4, #-4]
 800824c:	2501      	movs	r5, #1
 800824e:	3c04      	subs	r4, #4
 8008250:	6822      	ldr	r2, [r4, #0]
 8008252:	f000 000f 	and.w	r0, r0, #15
 8008256:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800825a:	6020      	str	r0, [r4, #0]
 800825c:	e7c3      	b.n	80081e6 <__hexnan+0x7a>
 800825e:	2508      	movs	r5, #8
 8008260:	e7c1      	b.n	80081e6 <__hexnan+0x7a>
 8008262:	9b01      	ldr	r3, [sp, #4]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d0df      	beq.n	8008228 <__hexnan+0xbc>
 8008268:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800826c:	f1c3 0320 	rsb	r3, r3, #32
 8008270:	fa22 f303 	lsr.w	r3, r2, r3
 8008274:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8008278:	401a      	ands	r2, r3
 800827a:	f847 2c04 	str.w	r2, [r7, #-4]
 800827e:	e7d3      	b.n	8008228 <__hexnan+0xbc>
 8008280:	3e04      	subs	r6, #4
 8008282:	e7d1      	b.n	8008228 <__hexnan+0xbc>
 8008284:	2004      	movs	r0, #4
 8008286:	b007      	add	sp, #28
 8008288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800828c <__localeconv_l>:
 800828c:	30f0      	adds	r0, #240	; 0xf0
 800828e:	4770      	bx	lr

08008290 <__ascii_mbtowc>:
 8008290:	b082      	sub	sp, #8
 8008292:	b901      	cbnz	r1, 8008296 <__ascii_mbtowc+0x6>
 8008294:	a901      	add	r1, sp, #4
 8008296:	b142      	cbz	r2, 80082aa <__ascii_mbtowc+0x1a>
 8008298:	b14b      	cbz	r3, 80082ae <__ascii_mbtowc+0x1e>
 800829a:	7813      	ldrb	r3, [r2, #0]
 800829c:	600b      	str	r3, [r1, #0]
 800829e:	7812      	ldrb	r2, [r2, #0]
 80082a0:	1c10      	adds	r0, r2, #0
 80082a2:	bf18      	it	ne
 80082a4:	2001      	movne	r0, #1
 80082a6:	b002      	add	sp, #8
 80082a8:	4770      	bx	lr
 80082aa:	4610      	mov	r0, r2
 80082ac:	e7fb      	b.n	80082a6 <__ascii_mbtowc+0x16>
 80082ae:	f06f 0001 	mvn.w	r0, #1
 80082b2:	e7f8      	b.n	80082a6 <__ascii_mbtowc+0x16>

080082b4 <__malloc_lock>:
 80082b4:	4770      	bx	lr

080082b6 <__malloc_unlock>:
 80082b6:	4770      	bx	lr

080082b8 <_Balloc>:
 80082b8:	b570      	push	{r4, r5, r6, lr}
 80082ba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80082bc:	4604      	mov	r4, r0
 80082be:	460e      	mov	r6, r1
 80082c0:	b93d      	cbnz	r5, 80082d2 <_Balloc+0x1a>
 80082c2:	2010      	movs	r0, #16
 80082c4:	f7fe fd80 	bl	8006dc8 <malloc>
 80082c8:	6260      	str	r0, [r4, #36]	; 0x24
 80082ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80082ce:	6005      	str	r5, [r0, #0]
 80082d0:	60c5      	str	r5, [r0, #12]
 80082d2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80082d4:	68eb      	ldr	r3, [r5, #12]
 80082d6:	b183      	cbz	r3, 80082fa <_Balloc+0x42>
 80082d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80082e0:	b9b8      	cbnz	r0, 8008312 <_Balloc+0x5a>
 80082e2:	2101      	movs	r1, #1
 80082e4:	fa01 f506 	lsl.w	r5, r1, r6
 80082e8:	1d6a      	adds	r2, r5, #5
 80082ea:	0092      	lsls	r2, r2, #2
 80082ec:	4620      	mov	r0, r4
 80082ee:	f000 fbe2 	bl	8008ab6 <_calloc_r>
 80082f2:	b160      	cbz	r0, 800830e <_Balloc+0x56>
 80082f4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80082f8:	e00e      	b.n	8008318 <_Balloc+0x60>
 80082fa:	2221      	movs	r2, #33	; 0x21
 80082fc:	2104      	movs	r1, #4
 80082fe:	4620      	mov	r0, r4
 8008300:	f000 fbd9 	bl	8008ab6 <_calloc_r>
 8008304:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008306:	60e8      	str	r0, [r5, #12]
 8008308:	68db      	ldr	r3, [r3, #12]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d1e4      	bne.n	80082d8 <_Balloc+0x20>
 800830e:	2000      	movs	r0, #0
 8008310:	bd70      	pop	{r4, r5, r6, pc}
 8008312:	6802      	ldr	r2, [r0, #0]
 8008314:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008318:	2300      	movs	r3, #0
 800831a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800831e:	e7f7      	b.n	8008310 <_Balloc+0x58>

08008320 <_Bfree>:
 8008320:	b570      	push	{r4, r5, r6, lr}
 8008322:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008324:	4606      	mov	r6, r0
 8008326:	460d      	mov	r5, r1
 8008328:	b93c      	cbnz	r4, 800833a <_Bfree+0x1a>
 800832a:	2010      	movs	r0, #16
 800832c:	f7fe fd4c 	bl	8006dc8 <malloc>
 8008330:	6270      	str	r0, [r6, #36]	; 0x24
 8008332:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008336:	6004      	str	r4, [r0, #0]
 8008338:	60c4      	str	r4, [r0, #12]
 800833a:	b13d      	cbz	r5, 800834c <_Bfree+0x2c>
 800833c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800833e:	686a      	ldr	r2, [r5, #4]
 8008340:	68db      	ldr	r3, [r3, #12]
 8008342:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008346:	6029      	str	r1, [r5, #0]
 8008348:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800834c:	bd70      	pop	{r4, r5, r6, pc}

0800834e <__multadd>:
 800834e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008352:	690d      	ldr	r5, [r1, #16]
 8008354:	461f      	mov	r7, r3
 8008356:	4606      	mov	r6, r0
 8008358:	460c      	mov	r4, r1
 800835a:	f101 0c14 	add.w	ip, r1, #20
 800835e:	2300      	movs	r3, #0
 8008360:	f8dc 0000 	ldr.w	r0, [ip]
 8008364:	b281      	uxth	r1, r0
 8008366:	fb02 7101 	mla	r1, r2, r1, r7
 800836a:	0c0f      	lsrs	r7, r1, #16
 800836c:	0c00      	lsrs	r0, r0, #16
 800836e:	fb02 7000 	mla	r0, r2, r0, r7
 8008372:	b289      	uxth	r1, r1
 8008374:	3301      	adds	r3, #1
 8008376:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800837a:	429d      	cmp	r5, r3
 800837c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008380:	f84c 1b04 	str.w	r1, [ip], #4
 8008384:	dcec      	bgt.n	8008360 <__multadd+0x12>
 8008386:	b1d7      	cbz	r7, 80083be <__multadd+0x70>
 8008388:	68a3      	ldr	r3, [r4, #8]
 800838a:	42ab      	cmp	r3, r5
 800838c:	dc12      	bgt.n	80083b4 <__multadd+0x66>
 800838e:	6861      	ldr	r1, [r4, #4]
 8008390:	4630      	mov	r0, r6
 8008392:	3101      	adds	r1, #1
 8008394:	f7ff ff90 	bl	80082b8 <_Balloc>
 8008398:	6922      	ldr	r2, [r4, #16]
 800839a:	3202      	adds	r2, #2
 800839c:	f104 010c 	add.w	r1, r4, #12
 80083a0:	4680      	mov	r8, r0
 80083a2:	0092      	lsls	r2, r2, #2
 80083a4:	300c      	adds	r0, #12
 80083a6:	f7fe fd1f 	bl	8006de8 <memcpy>
 80083aa:	4621      	mov	r1, r4
 80083ac:	4630      	mov	r0, r6
 80083ae:	f7ff ffb7 	bl	8008320 <_Bfree>
 80083b2:	4644      	mov	r4, r8
 80083b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80083b8:	3501      	adds	r5, #1
 80083ba:	615f      	str	r7, [r3, #20]
 80083bc:	6125      	str	r5, [r4, #16]
 80083be:	4620      	mov	r0, r4
 80083c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080083c4 <__s2b>:
 80083c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083c8:	460c      	mov	r4, r1
 80083ca:	4615      	mov	r5, r2
 80083cc:	461f      	mov	r7, r3
 80083ce:	2209      	movs	r2, #9
 80083d0:	3308      	adds	r3, #8
 80083d2:	4606      	mov	r6, r0
 80083d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80083d8:	2100      	movs	r1, #0
 80083da:	2201      	movs	r2, #1
 80083dc:	429a      	cmp	r2, r3
 80083de:	db20      	blt.n	8008422 <__s2b+0x5e>
 80083e0:	4630      	mov	r0, r6
 80083e2:	f7ff ff69 	bl	80082b8 <_Balloc>
 80083e6:	9b08      	ldr	r3, [sp, #32]
 80083e8:	6143      	str	r3, [r0, #20]
 80083ea:	2d09      	cmp	r5, #9
 80083ec:	f04f 0301 	mov.w	r3, #1
 80083f0:	6103      	str	r3, [r0, #16]
 80083f2:	dd19      	ble.n	8008428 <__s2b+0x64>
 80083f4:	f104 0809 	add.w	r8, r4, #9
 80083f8:	46c1      	mov	r9, r8
 80083fa:	442c      	add	r4, r5
 80083fc:	f819 3b01 	ldrb.w	r3, [r9], #1
 8008400:	4601      	mov	r1, r0
 8008402:	3b30      	subs	r3, #48	; 0x30
 8008404:	220a      	movs	r2, #10
 8008406:	4630      	mov	r0, r6
 8008408:	f7ff ffa1 	bl	800834e <__multadd>
 800840c:	45a1      	cmp	r9, r4
 800840e:	d1f5      	bne.n	80083fc <__s2b+0x38>
 8008410:	eb08 0405 	add.w	r4, r8, r5
 8008414:	3c08      	subs	r4, #8
 8008416:	1b2d      	subs	r5, r5, r4
 8008418:	1963      	adds	r3, r4, r5
 800841a:	42bb      	cmp	r3, r7
 800841c:	db07      	blt.n	800842e <__s2b+0x6a>
 800841e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008422:	0052      	lsls	r2, r2, #1
 8008424:	3101      	adds	r1, #1
 8008426:	e7d9      	b.n	80083dc <__s2b+0x18>
 8008428:	340a      	adds	r4, #10
 800842a:	2509      	movs	r5, #9
 800842c:	e7f3      	b.n	8008416 <__s2b+0x52>
 800842e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008432:	4601      	mov	r1, r0
 8008434:	3b30      	subs	r3, #48	; 0x30
 8008436:	220a      	movs	r2, #10
 8008438:	4630      	mov	r0, r6
 800843a:	f7ff ff88 	bl	800834e <__multadd>
 800843e:	e7eb      	b.n	8008418 <__s2b+0x54>

08008440 <__hi0bits>:
 8008440:	0c02      	lsrs	r2, r0, #16
 8008442:	0412      	lsls	r2, r2, #16
 8008444:	4603      	mov	r3, r0
 8008446:	b9b2      	cbnz	r2, 8008476 <__hi0bits+0x36>
 8008448:	0403      	lsls	r3, r0, #16
 800844a:	2010      	movs	r0, #16
 800844c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008450:	bf04      	itt	eq
 8008452:	021b      	lsleq	r3, r3, #8
 8008454:	3008      	addeq	r0, #8
 8008456:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800845a:	bf04      	itt	eq
 800845c:	011b      	lsleq	r3, r3, #4
 800845e:	3004      	addeq	r0, #4
 8008460:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008464:	bf04      	itt	eq
 8008466:	009b      	lsleq	r3, r3, #2
 8008468:	3002      	addeq	r0, #2
 800846a:	2b00      	cmp	r3, #0
 800846c:	db06      	blt.n	800847c <__hi0bits+0x3c>
 800846e:	005b      	lsls	r3, r3, #1
 8008470:	d503      	bpl.n	800847a <__hi0bits+0x3a>
 8008472:	3001      	adds	r0, #1
 8008474:	4770      	bx	lr
 8008476:	2000      	movs	r0, #0
 8008478:	e7e8      	b.n	800844c <__hi0bits+0xc>
 800847a:	2020      	movs	r0, #32
 800847c:	4770      	bx	lr

0800847e <__lo0bits>:
 800847e:	6803      	ldr	r3, [r0, #0]
 8008480:	f013 0207 	ands.w	r2, r3, #7
 8008484:	4601      	mov	r1, r0
 8008486:	d00b      	beq.n	80084a0 <__lo0bits+0x22>
 8008488:	07da      	lsls	r2, r3, #31
 800848a:	d423      	bmi.n	80084d4 <__lo0bits+0x56>
 800848c:	0798      	lsls	r0, r3, #30
 800848e:	bf49      	itett	mi
 8008490:	085b      	lsrmi	r3, r3, #1
 8008492:	089b      	lsrpl	r3, r3, #2
 8008494:	2001      	movmi	r0, #1
 8008496:	600b      	strmi	r3, [r1, #0]
 8008498:	bf5c      	itt	pl
 800849a:	600b      	strpl	r3, [r1, #0]
 800849c:	2002      	movpl	r0, #2
 800849e:	4770      	bx	lr
 80084a0:	b298      	uxth	r0, r3
 80084a2:	b9a8      	cbnz	r0, 80084d0 <__lo0bits+0x52>
 80084a4:	0c1b      	lsrs	r3, r3, #16
 80084a6:	2010      	movs	r0, #16
 80084a8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80084ac:	bf04      	itt	eq
 80084ae:	0a1b      	lsreq	r3, r3, #8
 80084b0:	3008      	addeq	r0, #8
 80084b2:	071a      	lsls	r2, r3, #28
 80084b4:	bf04      	itt	eq
 80084b6:	091b      	lsreq	r3, r3, #4
 80084b8:	3004      	addeq	r0, #4
 80084ba:	079a      	lsls	r2, r3, #30
 80084bc:	bf04      	itt	eq
 80084be:	089b      	lsreq	r3, r3, #2
 80084c0:	3002      	addeq	r0, #2
 80084c2:	07da      	lsls	r2, r3, #31
 80084c4:	d402      	bmi.n	80084cc <__lo0bits+0x4e>
 80084c6:	085b      	lsrs	r3, r3, #1
 80084c8:	d006      	beq.n	80084d8 <__lo0bits+0x5a>
 80084ca:	3001      	adds	r0, #1
 80084cc:	600b      	str	r3, [r1, #0]
 80084ce:	4770      	bx	lr
 80084d0:	4610      	mov	r0, r2
 80084d2:	e7e9      	b.n	80084a8 <__lo0bits+0x2a>
 80084d4:	2000      	movs	r0, #0
 80084d6:	4770      	bx	lr
 80084d8:	2020      	movs	r0, #32
 80084da:	4770      	bx	lr

080084dc <__i2b>:
 80084dc:	b510      	push	{r4, lr}
 80084de:	460c      	mov	r4, r1
 80084e0:	2101      	movs	r1, #1
 80084e2:	f7ff fee9 	bl	80082b8 <_Balloc>
 80084e6:	2201      	movs	r2, #1
 80084e8:	6144      	str	r4, [r0, #20]
 80084ea:	6102      	str	r2, [r0, #16]
 80084ec:	bd10      	pop	{r4, pc}

080084ee <__multiply>:
 80084ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084f2:	4614      	mov	r4, r2
 80084f4:	690a      	ldr	r2, [r1, #16]
 80084f6:	6923      	ldr	r3, [r4, #16]
 80084f8:	429a      	cmp	r2, r3
 80084fa:	bfb8      	it	lt
 80084fc:	460b      	movlt	r3, r1
 80084fe:	4688      	mov	r8, r1
 8008500:	bfbc      	itt	lt
 8008502:	46a0      	movlt	r8, r4
 8008504:	461c      	movlt	r4, r3
 8008506:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800850a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800850e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008512:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008516:	eb07 0609 	add.w	r6, r7, r9
 800851a:	42b3      	cmp	r3, r6
 800851c:	bfb8      	it	lt
 800851e:	3101      	addlt	r1, #1
 8008520:	f7ff feca 	bl	80082b8 <_Balloc>
 8008524:	f100 0514 	add.w	r5, r0, #20
 8008528:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800852c:	462b      	mov	r3, r5
 800852e:	2200      	movs	r2, #0
 8008530:	4573      	cmp	r3, lr
 8008532:	d316      	bcc.n	8008562 <__multiply+0x74>
 8008534:	f104 0214 	add.w	r2, r4, #20
 8008538:	f108 0114 	add.w	r1, r8, #20
 800853c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008540:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008544:	9300      	str	r3, [sp, #0]
 8008546:	9b00      	ldr	r3, [sp, #0]
 8008548:	9201      	str	r2, [sp, #4]
 800854a:	4293      	cmp	r3, r2
 800854c:	d80c      	bhi.n	8008568 <__multiply+0x7a>
 800854e:	2e00      	cmp	r6, #0
 8008550:	dd03      	ble.n	800855a <__multiply+0x6c>
 8008552:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008556:	2b00      	cmp	r3, #0
 8008558:	d05d      	beq.n	8008616 <__multiply+0x128>
 800855a:	6106      	str	r6, [r0, #16]
 800855c:	b003      	add	sp, #12
 800855e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008562:	f843 2b04 	str.w	r2, [r3], #4
 8008566:	e7e3      	b.n	8008530 <__multiply+0x42>
 8008568:	f8b2 b000 	ldrh.w	fp, [r2]
 800856c:	f1bb 0f00 	cmp.w	fp, #0
 8008570:	d023      	beq.n	80085ba <__multiply+0xcc>
 8008572:	4689      	mov	r9, r1
 8008574:	46ac      	mov	ip, r5
 8008576:	f04f 0800 	mov.w	r8, #0
 800857a:	f859 4b04 	ldr.w	r4, [r9], #4
 800857e:	f8dc a000 	ldr.w	sl, [ip]
 8008582:	b2a3      	uxth	r3, r4
 8008584:	fa1f fa8a 	uxth.w	sl, sl
 8008588:	fb0b a303 	mla	r3, fp, r3, sl
 800858c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008590:	f8dc 4000 	ldr.w	r4, [ip]
 8008594:	4443      	add	r3, r8
 8008596:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800859a:	fb0b 840a 	mla	r4, fp, sl, r8
 800859e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80085a2:	46e2      	mov	sl, ip
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80085aa:	454f      	cmp	r7, r9
 80085ac:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80085b0:	f84a 3b04 	str.w	r3, [sl], #4
 80085b4:	d82b      	bhi.n	800860e <__multiply+0x120>
 80085b6:	f8cc 8004 	str.w	r8, [ip, #4]
 80085ba:	9b01      	ldr	r3, [sp, #4]
 80085bc:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80085c0:	3204      	adds	r2, #4
 80085c2:	f1ba 0f00 	cmp.w	sl, #0
 80085c6:	d020      	beq.n	800860a <__multiply+0x11c>
 80085c8:	682b      	ldr	r3, [r5, #0]
 80085ca:	4689      	mov	r9, r1
 80085cc:	46a8      	mov	r8, r5
 80085ce:	f04f 0b00 	mov.w	fp, #0
 80085d2:	f8b9 c000 	ldrh.w	ip, [r9]
 80085d6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80085da:	fb0a 440c 	mla	r4, sl, ip, r4
 80085de:	445c      	add	r4, fp
 80085e0:	46c4      	mov	ip, r8
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80085e8:	f84c 3b04 	str.w	r3, [ip], #4
 80085ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80085f0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80085f4:	0c1b      	lsrs	r3, r3, #16
 80085f6:	fb0a b303 	mla	r3, sl, r3, fp
 80085fa:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80085fe:	454f      	cmp	r7, r9
 8008600:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008604:	d805      	bhi.n	8008612 <__multiply+0x124>
 8008606:	f8c8 3004 	str.w	r3, [r8, #4]
 800860a:	3504      	adds	r5, #4
 800860c:	e79b      	b.n	8008546 <__multiply+0x58>
 800860e:	46d4      	mov	ip, sl
 8008610:	e7b3      	b.n	800857a <__multiply+0x8c>
 8008612:	46e0      	mov	r8, ip
 8008614:	e7dd      	b.n	80085d2 <__multiply+0xe4>
 8008616:	3e01      	subs	r6, #1
 8008618:	e799      	b.n	800854e <__multiply+0x60>
	...

0800861c <__pow5mult>:
 800861c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008620:	4615      	mov	r5, r2
 8008622:	f012 0203 	ands.w	r2, r2, #3
 8008626:	4606      	mov	r6, r0
 8008628:	460f      	mov	r7, r1
 800862a:	d007      	beq.n	800863c <__pow5mult+0x20>
 800862c:	3a01      	subs	r2, #1
 800862e:	4c21      	ldr	r4, [pc, #132]	; (80086b4 <__pow5mult+0x98>)
 8008630:	2300      	movs	r3, #0
 8008632:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008636:	f7ff fe8a 	bl	800834e <__multadd>
 800863a:	4607      	mov	r7, r0
 800863c:	10ad      	asrs	r5, r5, #2
 800863e:	d035      	beq.n	80086ac <__pow5mult+0x90>
 8008640:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008642:	b93c      	cbnz	r4, 8008654 <__pow5mult+0x38>
 8008644:	2010      	movs	r0, #16
 8008646:	f7fe fbbf 	bl	8006dc8 <malloc>
 800864a:	6270      	str	r0, [r6, #36]	; 0x24
 800864c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008650:	6004      	str	r4, [r0, #0]
 8008652:	60c4      	str	r4, [r0, #12]
 8008654:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008658:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800865c:	b94c      	cbnz	r4, 8008672 <__pow5mult+0x56>
 800865e:	f240 2171 	movw	r1, #625	; 0x271
 8008662:	4630      	mov	r0, r6
 8008664:	f7ff ff3a 	bl	80084dc <__i2b>
 8008668:	2300      	movs	r3, #0
 800866a:	f8c8 0008 	str.w	r0, [r8, #8]
 800866e:	4604      	mov	r4, r0
 8008670:	6003      	str	r3, [r0, #0]
 8008672:	f04f 0800 	mov.w	r8, #0
 8008676:	07eb      	lsls	r3, r5, #31
 8008678:	d50a      	bpl.n	8008690 <__pow5mult+0x74>
 800867a:	4639      	mov	r1, r7
 800867c:	4622      	mov	r2, r4
 800867e:	4630      	mov	r0, r6
 8008680:	f7ff ff35 	bl	80084ee <__multiply>
 8008684:	4639      	mov	r1, r7
 8008686:	4681      	mov	r9, r0
 8008688:	4630      	mov	r0, r6
 800868a:	f7ff fe49 	bl	8008320 <_Bfree>
 800868e:	464f      	mov	r7, r9
 8008690:	106d      	asrs	r5, r5, #1
 8008692:	d00b      	beq.n	80086ac <__pow5mult+0x90>
 8008694:	6820      	ldr	r0, [r4, #0]
 8008696:	b938      	cbnz	r0, 80086a8 <__pow5mult+0x8c>
 8008698:	4622      	mov	r2, r4
 800869a:	4621      	mov	r1, r4
 800869c:	4630      	mov	r0, r6
 800869e:	f7ff ff26 	bl	80084ee <__multiply>
 80086a2:	6020      	str	r0, [r4, #0]
 80086a4:	f8c0 8000 	str.w	r8, [r0]
 80086a8:	4604      	mov	r4, r0
 80086aa:	e7e4      	b.n	8008676 <__pow5mult+0x5a>
 80086ac:	4638      	mov	r0, r7
 80086ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086b2:	bf00      	nop
 80086b4:	08009398 	.word	0x08009398

080086b8 <__lshift>:
 80086b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086bc:	460c      	mov	r4, r1
 80086be:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80086c2:	6923      	ldr	r3, [r4, #16]
 80086c4:	6849      	ldr	r1, [r1, #4]
 80086c6:	eb0a 0903 	add.w	r9, sl, r3
 80086ca:	68a3      	ldr	r3, [r4, #8]
 80086cc:	4607      	mov	r7, r0
 80086ce:	4616      	mov	r6, r2
 80086d0:	f109 0501 	add.w	r5, r9, #1
 80086d4:	42ab      	cmp	r3, r5
 80086d6:	db32      	blt.n	800873e <__lshift+0x86>
 80086d8:	4638      	mov	r0, r7
 80086da:	f7ff fded 	bl	80082b8 <_Balloc>
 80086de:	2300      	movs	r3, #0
 80086e0:	4680      	mov	r8, r0
 80086e2:	f100 0114 	add.w	r1, r0, #20
 80086e6:	461a      	mov	r2, r3
 80086e8:	4553      	cmp	r3, sl
 80086ea:	db2b      	blt.n	8008744 <__lshift+0x8c>
 80086ec:	6920      	ldr	r0, [r4, #16]
 80086ee:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80086f2:	f104 0314 	add.w	r3, r4, #20
 80086f6:	f016 021f 	ands.w	r2, r6, #31
 80086fa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80086fe:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008702:	d025      	beq.n	8008750 <__lshift+0x98>
 8008704:	f1c2 0e20 	rsb	lr, r2, #32
 8008708:	2000      	movs	r0, #0
 800870a:	681e      	ldr	r6, [r3, #0]
 800870c:	468a      	mov	sl, r1
 800870e:	4096      	lsls	r6, r2
 8008710:	4330      	orrs	r0, r6
 8008712:	f84a 0b04 	str.w	r0, [sl], #4
 8008716:	f853 0b04 	ldr.w	r0, [r3], #4
 800871a:	459c      	cmp	ip, r3
 800871c:	fa20 f00e 	lsr.w	r0, r0, lr
 8008720:	d814      	bhi.n	800874c <__lshift+0x94>
 8008722:	6048      	str	r0, [r1, #4]
 8008724:	b108      	cbz	r0, 800872a <__lshift+0x72>
 8008726:	f109 0502 	add.w	r5, r9, #2
 800872a:	3d01      	subs	r5, #1
 800872c:	4638      	mov	r0, r7
 800872e:	f8c8 5010 	str.w	r5, [r8, #16]
 8008732:	4621      	mov	r1, r4
 8008734:	f7ff fdf4 	bl	8008320 <_Bfree>
 8008738:	4640      	mov	r0, r8
 800873a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800873e:	3101      	adds	r1, #1
 8008740:	005b      	lsls	r3, r3, #1
 8008742:	e7c7      	b.n	80086d4 <__lshift+0x1c>
 8008744:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008748:	3301      	adds	r3, #1
 800874a:	e7cd      	b.n	80086e8 <__lshift+0x30>
 800874c:	4651      	mov	r1, sl
 800874e:	e7dc      	b.n	800870a <__lshift+0x52>
 8008750:	3904      	subs	r1, #4
 8008752:	f853 2b04 	ldr.w	r2, [r3], #4
 8008756:	f841 2f04 	str.w	r2, [r1, #4]!
 800875a:	459c      	cmp	ip, r3
 800875c:	d8f9      	bhi.n	8008752 <__lshift+0x9a>
 800875e:	e7e4      	b.n	800872a <__lshift+0x72>

08008760 <__mcmp>:
 8008760:	6903      	ldr	r3, [r0, #16]
 8008762:	690a      	ldr	r2, [r1, #16]
 8008764:	1a9b      	subs	r3, r3, r2
 8008766:	b530      	push	{r4, r5, lr}
 8008768:	d10c      	bne.n	8008784 <__mcmp+0x24>
 800876a:	0092      	lsls	r2, r2, #2
 800876c:	3014      	adds	r0, #20
 800876e:	3114      	adds	r1, #20
 8008770:	1884      	adds	r4, r0, r2
 8008772:	4411      	add	r1, r2
 8008774:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008778:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800877c:	4295      	cmp	r5, r2
 800877e:	d003      	beq.n	8008788 <__mcmp+0x28>
 8008780:	d305      	bcc.n	800878e <__mcmp+0x2e>
 8008782:	2301      	movs	r3, #1
 8008784:	4618      	mov	r0, r3
 8008786:	bd30      	pop	{r4, r5, pc}
 8008788:	42a0      	cmp	r0, r4
 800878a:	d3f3      	bcc.n	8008774 <__mcmp+0x14>
 800878c:	e7fa      	b.n	8008784 <__mcmp+0x24>
 800878e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008792:	e7f7      	b.n	8008784 <__mcmp+0x24>

08008794 <__mdiff>:
 8008794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008798:	460d      	mov	r5, r1
 800879a:	4607      	mov	r7, r0
 800879c:	4611      	mov	r1, r2
 800879e:	4628      	mov	r0, r5
 80087a0:	4614      	mov	r4, r2
 80087a2:	f7ff ffdd 	bl	8008760 <__mcmp>
 80087a6:	1e06      	subs	r6, r0, #0
 80087a8:	d108      	bne.n	80087bc <__mdiff+0x28>
 80087aa:	4631      	mov	r1, r6
 80087ac:	4638      	mov	r0, r7
 80087ae:	f7ff fd83 	bl	80082b8 <_Balloc>
 80087b2:	2301      	movs	r3, #1
 80087b4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80087b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087bc:	bfa4      	itt	ge
 80087be:	4623      	movge	r3, r4
 80087c0:	462c      	movge	r4, r5
 80087c2:	4638      	mov	r0, r7
 80087c4:	6861      	ldr	r1, [r4, #4]
 80087c6:	bfa6      	itte	ge
 80087c8:	461d      	movge	r5, r3
 80087ca:	2600      	movge	r6, #0
 80087cc:	2601      	movlt	r6, #1
 80087ce:	f7ff fd73 	bl	80082b8 <_Balloc>
 80087d2:	692b      	ldr	r3, [r5, #16]
 80087d4:	60c6      	str	r6, [r0, #12]
 80087d6:	6926      	ldr	r6, [r4, #16]
 80087d8:	f105 0914 	add.w	r9, r5, #20
 80087dc:	f104 0214 	add.w	r2, r4, #20
 80087e0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80087e4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80087e8:	f100 0514 	add.w	r5, r0, #20
 80087ec:	f04f 0e00 	mov.w	lr, #0
 80087f0:	f852 ab04 	ldr.w	sl, [r2], #4
 80087f4:	f859 4b04 	ldr.w	r4, [r9], #4
 80087f8:	fa1e f18a 	uxtah	r1, lr, sl
 80087fc:	b2a3      	uxth	r3, r4
 80087fe:	1ac9      	subs	r1, r1, r3
 8008800:	0c23      	lsrs	r3, r4, #16
 8008802:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008806:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800880a:	b289      	uxth	r1, r1
 800880c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008810:	45c8      	cmp	r8, r9
 8008812:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008816:	4694      	mov	ip, r2
 8008818:	f845 3b04 	str.w	r3, [r5], #4
 800881c:	d8e8      	bhi.n	80087f0 <__mdiff+0x5c>
 800881e:	45bc      	cmp	ip, r7
 8008820:	d304      	bcc.n	800882c <__mdiff+0x98>
 8008822:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008826:	b183      	cbz	r3, 800884a <__mdiff+0xb6>
 8008828:	6106      	str	r6, [r0, #16]
 800882a:	e7c5      	b.n	80087b8 <__mdiff+0x24>
 800882c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008830:	fa1e f381 	uxtah	r3, lr, r1
 8008834:	141a      	asrs	r2, r3, #16
 8008836:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800883a:	b29b      	uxth	r3, r3
 800883c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008840:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008844:	f845 3b04 	str.w	r3, [r5], #4
 8008848:	e7e9      	b.n	800881e <__mdiff+0x8a>
 800884a:	3e01      	subs	r6, #1
 800884c:	e7e9      	b.n	8008822 <__mdiff+0x8e>
	...

08008850 <__ulp>:
 8008850:	4b12      	ldr	r3, [pc, #72]	; (800889c <__ulp+0x4c>)
 8008852:	ee10 2a90 	vmov	r2, s1
 8008856:	401a      	ands	r2, r3
 8008858:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800885c:	2b00      	cmp	r3, #0
 800885e:	dd04      	ble.n	800886a <__ulp+0x1a>
 8008860:	2000      	movs	r0, #0
 8008862:	4619      	mov	r1, r3
 8008864:	ec41 0b10 	vmov	d0, r0, r1
 8008868:	4770      	bx	lr
 800886a:	425b      	negs	r3, r3
 800886c:	151b      	asrs	r3, r3, #20
 800886e:	2b13      	cmp	r3, #19
 8008870:	f04f 0000 	mov.w	r0, #0
 8008874:	f04f 0100 	mov.w	r1, #0
 8008878:	dc04      	bgt.n	8008884 <__ulp+0x34>
 800887a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800887e:	fa42 f103 	asr.w	r1, r2, r3
 8008882:	e7ef      	b.n	8008864 <__ulp+0x14>
 8008884:	3b14      	subs	r3, #20
 8008886:	2b1e      	cmp	r3, #30
 8008888:	f04f 0201 	mov.w	r2, #1
 800888c:	bfda      	itte	le
 800888e:	f1c3 031f 	rsble	r3, r3, #31
 8008892:	fa02 f303 	lslle.w	r3, r2, r3
 8008896:	4613      	movgt	r3, r2
 8008898:	4618      	mov	r0, r3
 800889a:	e7e3      	b.n	8008864 <__ulp+0x14>
 800889c:	7ff00000 	.word	0x7ff00000

080088a0 <__b2d>:
 80088a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088a2:	6905      	ldr	r5, [r0, #16]
 80088a4:	f100 0714 	add.w	r7, r0, #20
 80088a8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80088ac:	1f2e      	subs	r6, r5, #4
 80088ae:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80088b2:	4620      	mov	r0, r4
 80088b4:	f7ff fdc4 	bl	8008440 <__hi0bits>
 80088b8:	f1c0 0320 	rsb	r3, r0, #32
 80088bc:	280a      	cmp	r0, #10
 80088be:	600b      	str	r3, [r1, #0]
 80088c0:	f8df c074 	ldr.w	ip, [pc, #116]	; 8008938 <__b2d+0x98>
 80088c4:	dc14      	bgt.n	80088f0 <__b2d+0x50>
 80088c6:	f1c0 0e0b 	rsb	lr, r0, #11
 80088ca:	fa24 f10e 	lsr.w	r1, r4, lr
 80088ce:	42b7      	cmp	r7, r6
 80088d0:	ea41 030c 	orr.w	r3, r1, ip
 80088d4:	bf34      	ite	cc
 80088d6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80088da:	2100      	movcs	r1, #0
 80088dc:	3015      	adds	r0, #21
 80088de:	fa04 f000 	lsl.w	r0, r4, r0
 80088e2:	fa21 f10e 	lsr.w	r1, r1, lr
 80088e6:	ea40 0201 	orr.w	r2, r0, r1
 80088ea:	ec43 2b10 	vmov	d0, r2, r3
 80088ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088f0:	42b7      	cmp	r7, r6
 80088f2:	bf3a      	itte	cc
 80088f4:	f1a5 0608 	subcc.w	r6, r5, #8
 80088f8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80088fc:	2100      	movcs	r1, #0
 80088fe:	380b      	subs	r0, #11
 8008900:	d015      	beq.n	800892e <__b2d+0x8e>
 8008902:	4084      	lsls	r4, r0
 8008904:	f1c0 0520 	rsb	r5, r0, #32
 8008908:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800890c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8008910:	42be      	cmp	r6, r7
 8008912:	fa21 fc05 	lsr.w	ip, r1, r5
 8008916:	ea44 030c 	orr.w	r3, r4, ip
 800891a:	bf8c      	ite	hi
 800891c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008920:	2400      	movls	r4, #0
 8008922:	fa01 f000 	lsl.w	r0, r1, r0
 8008926:	40ec      	lsrs	r4, r5
 8008928:	ea40 0204 	orr.w	r2, r0, r4
 800892c:	e7dd      	b.n	80088ea <__b2d+0x4a>
 800892e:	ea44 030c 	orr.w	r3, r4, ip
 8008932:	460a      	mov	r2, r1
 8008934:	e7d9      	b.n	80088ea <__b2d+0x4a>
 8008936:	bf00      	nop
 8008938:	3ff00000 	.word	0x3ff00000

0800893c <__d2b>:
 800893c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008940:	460e      	mov	r6, r1
 8008942:	2101      	movs	r1, #1
 8008944:	ec59 8b10 	vmov	r8, r9, d0
 8008948:	4615      	mov	r5, r2
 800894a:	f7ff fcb5 	bl	80082b8 <_Balloc>
 800894e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008952:	4607      	mov	r7, r0
 8008954:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008958:	bb34      	cbnz	r4, 80089a8 <__d2b+0x6c>
 800895a:	9301      	str	r3, [sp, #4]
 800895c:	f1b8 0300 	subs.w	r3, r8, #0
 8008960:	d027      	beq.n	80089b2 <__d2b+0x76>
 8008962:	a802      	add	r0, sp, #8
 8008964:	f840 3d08 	str.w	r3, [r0, #-8]!
 8008968:	f7ff fd89 	bl	800847e <__lo0bits>
 800896c:	9900      	ldr	r1, [sp, #0]
 800896e:	b1f0      	cbz	r0, 80089ae <__d2b+0x72>
 8008970:	9a01      	ldr	r2, [sp, #4]
 8008972:	f1c0 0320 	rsb	r3, r0, #32
 8008976:	fa02 f303 	lsl.w	r3, r2, r3
 800897a:	430b      	orrs	r3, r1
 800897c:	40c2      	lsrs	r2, r0
 800897e:	617b      	str	r3, [r7, #20]
 8008980:	9201      	str	r2, [sp, #4]
 8008982:	9b01      	ldr	r3, [sp, #4]
 8008984:	61bb      	str	r3, [r7, #24]
 8008986:	2b00      	cmp	r3, #0
 8008988:	bf14      	ite	ne
 800898a:	2102      	movne	r1, #2
 800898c:	2101      	moveq	r1, #1
 800898e:	6139      	str	r1, [r7, #16]
 8008990:	b1c4      	cbz	r4, 80089c4 <__d2b+0x88>
 8008992:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008996:	4404      	add	r4, r0
 8008998:	6034      	str	r4, [r6, #0]
 800899a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800899e:	6028      	str	r0, [r5, #0]
 80089a0:	4638      	mov	r0, r7
 80089a2:	b003      	add	sp, #12
 80089a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80089ac:	e7d5      	b.n	800895a <__d2b+0x1e>
 80089ae:	6179      	str	r1, [r7, #20]
 80089b0:	e7e7      	b.n	8008982 <__d2b+0x46>
 80089b2:	a801      	add	r0, sp, #4
 80089b4:	f7ff fd63 	bl	800847e <__lo0bits>
 80089b8:	9b01      	ldr	r3, [sp, #4]
 80089ba:	617b      	str	r3, [r7, #20]
 80089bc:	2101      	movs	r1, #1
 80089be:	6139      	str	r1, [r7, #16]
 80089c0:	3020      	adds	r0, #32
 80089c2:	e7e5      	b.n	8008990 <__d2b+0x54>
 80089c4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80089c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80089cc:	6030      	str	r0, [r6, #0]
 80089ce:	6918      	ldr	r0, [r3, #16]
 80089d0:	f7ff fd36 	bl	8008440 <__hi0bits>
 80089d4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80089d8:	e7e1      	b.n	800899e <__d2b+0x62>

080089da <__ratio>:
 80089da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089de:	4688      	mov	r8, r1
 80089e0:	4669      	mov	r1, sp
 80089e2:	4681      	mov	r9, r0
 80089e4:	f7ff ff5c 	bl	80088a0 <__b2d>
 80089e8:	a901      	add	r1, sp, #4
 80089ea:	4640      	mov	r0, r8
 80089ec:	ec57 6b10 	vmov	r6, r7, d0
 80089f0:	f7ff ff56 	bl	80088a0 <__b2d>
 80089f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80089f8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80089fc:	eba3 0c02 	sub.w	ip, r3, r2
 8008a00:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008a04:	1a9b      	subs	r3, r3, r2
 8008a06:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008a0a:	ec5b ab10 	vmov	sl, fp, d0
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	bfce      	itee	gt
 8008a12:	463a      	movgt	r2, r7
 8008a14:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008a18:	465a      	movle	r2, fp
 8008a1a:	4659      	mov	r1, fp
 8008a1c:	463d      	mov	r5, r7
 8008a1e:	bfd4      	ite	le
 8008a20:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8008a24:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8008a28:	4630      	mov	r0, r6
 8008a2a:	ee10 2a10 	vmov	r2, s0
 8008a2e:	460b      	mov	r3, r1
 8008a30:	4629      	mov	r1, r5
 8008a32:	f7f7 ff13 	bl	800085c <__aeabi_ddiv>
 8008a36:	ec41 0b10 	vmov	d0, r0, r1
 8008a3a:	b003      	add	sp, #12
 8008a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008a40 <__copybits>:
 8008a40:	3901      	subs	r1, #1
 8008a42:	b510      	push	{r4, lr}
 8008a44:	1149      	asrs	r1, r1, #5
 8008a46:	6914      	ldr	r4, [r2, #16]
 8008a48:	3101      	adds	r1, #1
 8008a4a:	f102 0314 	add.w	r3, r2, #20
 8008a4e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008a52:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008a56:	42a3      	cmp	r3, r4
 8008a58:	4602      	mov	r2, r0
 8008a5a:	d303      	bcc.n	8008a64 <__copybits+0x24>
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	428a      	cmp	r2, r1
 8008a60:	d305      	bcc.n	8008a6e <__copybits+0x2e>
 8008a62:	bd10      	pop	{r4, pc}
 8008a64:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a68:	f840 2b04 	str.w	r2, [r0], #4
 8008a6c:	e7f3      	b.n	8008a56 <__copybits+0x16>
 8008a6e:	f842 3b04 	str.w	r3, [r2], #4
 8008a72:	e7f4      	b.n	8008a5e <__copybits+0x1e>

08008a74 <__any_on>:
 8008a74:	f100 0214 	add.w	r2, r0, #20
 8008a78:	6900      	ldr	r0, [r0, #16]
 8008a7a:	114b      	asrs	r3, r1, #5
 8008a7c:	4298      	cmp	r0, r3
 8008a7e:	b510      	push	{r4, lr}
 8008a80:	db11      	blt.n	8008aa6 <__any_on+0x32>
 8008a82:	dd0a      	ble.n	8008a9a <__any_on+0x26>
 8008a84:	f011 011f 	ands.w	r1, r1, #31
 8008a88:	d007      	beq.n	8008a9a <__any_on+0x26>
 8008a8a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008a8e:	fa24 f001 	lsr.w	r0, r4, r1
 8008a92:	fa00 f101 	lsl.w	r1, r0, r1
 8008a96:	428c      	cmp	r4, r1
 8008a98:	d10b      	bne.n	8008ab2 <__any_on+0x3e>
 8008a9a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d803      	bhi.n	8008aaa <__any_on+0x36>
 8008aa2:	2000      	movs	r0, #0
 8008aa4:	bd10      	pop	{r4, pc}
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	e7f7      	b.n	8008a9a <__any_on+0x26>
 8008aaa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008aae:	2900      	cmp	r1, #0
 8008ab0:	d0f5      	beq.n	8008a9e <__any_on+0x2a>
 8008ab2:	2001      	movs	r0, #1
 8008ab4:	e7f6      	b.n	8008aa4 <__any_on+0x30>

08008ab6 <_calloc_r>:
 8008ab6:	b538      	push	{r3, r4, r5, lr}
 8008ab8:	fb02 f401 	mul.w	r4, r2, r1
 8008abc:	4621      	mov	r1, r4
 8008abe:	f7fe f9f5 	bl	8006eac <_malloc_r>
 8008ac2:	4605      	mov	r5, r0
 8008ac4:	b118      	cbz	r0, 8008ace <_calloc_r+0x18>
 8008ac6:	4622      	mov	r2, r4
 8008ac8:	2100      	movs	r1, #0
 8008aca:	f7fe f998 	bl	8006dfe <memset>
 8008ace:	4628      	mov	r0, r5
 8008ad0:	bd38      	pop	{r3, r4, r5, pc}

08008ad2 <__ssputs_r>:
 8008ad2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ad6:	688e      	ldr	r6, [r1, #8]
 8008ad8:	429e      	cmp	r6, r3
 8008ada:	4682      	mov	sl, r0
 8008adc:	460c      	mov	r4, r1
 8008ade:	4690      	mov	r8, r2
 8008ae0:	4699      	mov	r9, r3
 8008ae2:	d837      	bhi.n	8008b54 <__ssputs_r+0x82>
 8008ae4:	898a      	ldrh	r2, [r1, #12]
 8008ae6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008aea:	d031      	beq.n	8008b50 <__ssputs_r+0x7e>
 8008aec:	6825      	ldr	r5, [r4, #0]
 8008aee:	6909      	ldr	r1, [r1, #16]
 8008af0:	1a6f      	subs	r7, r5, r1
 8008af2:	6965      	ldr	r5, [r4, #20]
 8008af4:	2302      	movs	r3, #2
 8008af6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008afa:	fb95 f5f3 	sdiv	r5, r5, r3
 8008afe:	f109 0301 	add.w	r3, r9, #1
 8008b02:	443b      	add	r3, r7
 8008b04:	429d      	cmp	r5, r3
 8008b06:	bf38      	it	cc
 8008b08:	461d      	movcc	r5, r3
 8008b0a:	0553      	lsls	r3, r2, #21
 8008b0c:	d530      	bpl.n	8008b70 <__ssputs_r+0x9e>
 8008b0e:	4629      	mov	r1, r5
 8008b10:	f7fe f9cc 	bl	8006eac <_malloc_r>
 8008b14:	4606      	mov	r6, r0
 8008b16:	b950      	cbnz	r0, 8008b2e <__ssputs_r+0x5c>
 8008b18:	230c      	movs	r3, #12
 8008b1a:	f8ca 3000 	str.w	r3, [sl]
 8008b1e:	89a3      	ldrh	r3, [r4, #12]
 8008b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b24:	81a3      	strh	r3, [r4, #12]
 8008b26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b2e:	463a      	mov	r2, r7
 8008b30:	6921      	ldr	r1, [r4, #16]
 8008b32:	f7fe f959 	bl	8006de8 <memcpy>
 8008b36:	89a3      	ldrh	r3, [r4, #12]
 8008b38:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b40:	81a3      	strh	r3, [r4, #12]
 8008b42:	6126      	str	r6, [r4, #16]
 8008b44:	6165      	str	r5, [r4, #20]
 8008b46:	443e      	add	r6, r7
 8008b48:	1bed      	subs	r5, r5, r7
 8008b4a:	6026      	str	r6, [r4, #0]
 8008b4c:	60a5      	str	r5, [r4, #8]
 8008b4e:	464e      	mov	r6, r9
 8008b50:	454e      	cmp	r6, r9
 8008b52:	d900      	bls.n	8008b56 <__ssputs_r+0x84>
 8008b54:	464e      	mov	r6, r9
 8008b56:	4632      	mov	r2, r6
 8008b58:	4641      	mov	r1, r8
 8008b5a:	6820      	ldr	r0, [r4, #0]
 8008b5c:	f000 faa1 	bl	80090a2 <memmove>
 8008b60:	68a3      	ldr	r3, [r4, #8]
 8008b62:	1b9b      	subs	r3, r3, r6
 8008b64:	60a3      	str	r3, [r4, #8]
 8008b66:	6823      	ldr	r3, [r4, #0]
 8008b68:	441e      	add	r6, r3
 8008b6a:	6026      	str	r6, [r4, #0]
 8008b6c:	2000      	movs	r0, #0
 8008b6e:	e7dc      	b.n	8008b2a <__ssputs_r+0x58>
 8008b70:	462a      	mov	r2, r5
 8008b72:	f000 faaf 	bl	80090d4 <_realloc_r>
 8008b76:	4606      	mov	r6, r0
 8008b78:	2800      	cmp	r0, #0
 8008b7a:	d1e2      	bne.n	8008b42 <__ssputs_r+0x70>
 8008b7c:	6921      	ldr	r1, [r4, #16]
 8008b7e:	4650      	mov	r0, sl
 8008b80:	f7fe f946 	bl	8006e10 <_free_r>
 8008b84:	e7c8      	b.n	8008b18 <__ssputs_r+0x46>
	...

08008b88 <_svfiprintf_r>:
 8008b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b8c:	461d      	mov	r5, r3
 8008b8e:	898b      	ldrh	r3, [r1, #12]
 8008b90:	061f      	lsls	r7, r3, #24
 8008b92:	b09d      	sub	sp, #116	; 0x74
 8008b94:	4680      	mov	r8, r0
 8008b96:	460c      	mov	r4, r1
 8008b98:	4616      	mov	r6, r2
 8008b9a:	d50f      	bpl.n	8008bbc <_svfiprintf_r+0x34>
 8008b9c:	690b      	ldr	r3, [r1, #16]
 8008b9e:	b96b      	cbnz	r3, 8008bbc <_svfiprintf_r+0x34>
 8008ba0:	2140      	movs	r1, #64	; 0x40
 8008ba2:	f7fe f983 	bl	8006eac <_malloc_r>
 8008ba6:	6020      	str	r0, [r4, #0]
 8008ba8:	6120      	str	r0, [r4, #16]
 8008baa:	b928      	cbnz	r0, 8008bb8 <_svfiprintf_r+0x30>
 8008bac:	230c      	movs	r3, #12
 8008bae:	f8c8 3000 	str.w	r3, [r8]
 8008bb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bb6:	e0c8      	b.n	8008d4a <_svfiprintf_r+0x1c2>
 8008bb8:	2340      	movs	r3, #64	; 0x40
 8008bba:	6163      	str	r3, [r4, #20]
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	9309      	str	r3, [sp, #36]	; 0x24
 8008bc0:	2320      	movs	r3, #32
 8008bc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bc6:	2330      	movs	r3, #48	; 0x30
 8008bc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008bcc:	9503      	str	r5, [sp, #12]
 8008bce:	f04f 0b01 	mov.w	fp, #1
 8008bd2:	4637      	mov	r7, r6
 8008bd4:	463d      	mov	r5, r7
 8008bd6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008bda:	b10b      	cbz	r3, 8008be0 <_svfiprintf_r+0x58>
 8008bdc:	2b25      	cmp	r3, #37	; 0x25
 8008bde:	d13e      	bne.n	8008c5e <_svfiprintf_r+0xd6>
 8008be0:	ebb7 0a06 	subs.w	sl, r7, r6
 8008be4:	d00b      	beq.n	8008bfe <_svfiprintf_r+0x76>
 8008be6:	4653      	mov	r3, sl
 8008be8:	4632      	mov	r2, r6
 8008bea:	4621      	mov	r1, r4
 8008bec:	4640      	mov	r0, r8
 8008bee:	f7ff ff70 	bl	8008ad2 <__ssputs_r>
 8008bf2:	3001      	adds	r0, #1
 8008bf4:	f000 80a4 	beq.w	8008d40 <_svfiprintf_r+0x1b8>
 8008bf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bfa:	4453      	add	r3, sl
 8008bfc:	9309      	str	r3, [sp, #36]	; 0x24
 8008bfe:	783b      	ldrb	r3, [r7, #0]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	f000 809d 	beq.w	8008d40 <_svfiprintf_r+0x1b8>
 8008c06:	2300      	movs	r3, #0
 8008c08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c10:	9304      	str	r3, [sp, #16]
 8008c12:	9307      	str	r3, [sp, #28]
 8008c14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c18:	931a      	str	r3, [sp, #104]	; 0x68
 8008c1a:	462f      	mov	r7, r5
 8008c1c:	2205      	movs	r2, #5
 8008c1e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008c22:	4850      	ldr	r0, [pc, #320]	; (8008d64 <_svfiprintf_r+0x1dc>)
 8008c24:	f7f7 fae4 	bl	80001f0 <memchr>
 8008c28:	9b04      	ldr	r3, [sp, #16]
 8008c2a:	b9d0      	cbnz	r0, 8008c62 <_svfiprintf_r+0xda>
 8008c2c:	06d9      	lsls	r1, r3, #27
 8008c2e:	bf44      	itt	mi
 8008c30:	2220      	movmi	r2, #32
 8008c32:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008c36:	071a      	lsls	r2, r3, #28
 8008c38:	bf44      	itt	mi
 8008c3a:	222b      	movmi	r2, #43	; 0x2b
 8008c3c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008c40:	782a      	ldrb	r2, [r5, #0]
 8008c42:	2a2a      	cmp	r2, #42	; 0x2a
 8008c44:	d015      	beq.n	8008c72 <_svfiprintf_r+0xea>
 8008c46:	9a07      	ldr	r2, [sp, #28]
 8008c48:	462f      	mov	r7, r5
 8008c4a:	2000      	movs	r0, #0
 8008c4c:	250a      	movs	r5, #10
 8008c4e:	4639      	mov	r1, r7
 8008c50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c54:	3b30      	subs	r3, #48	; 0x30
 8008c56:	2b09      	cmp	r3, #9
 8008c58:	d94d      	bls.n	8008cf6 <_svfiprintf_r+0x16e>
 8008c5a:	b1b8      	cbz	r0, 8008c8c <_svfiprintf_r+0x104>
 8008c5c:	e00f      	b.n	8008c7e <_svfiprintf_r+0xf6>
 8008c5e:	462f      	mov	r7, r5
 8008c60:	e7b8      	b.n	8008bd4 <_svfiprintf_r+0x4c>
 8008c62:	4a40      	ldr	r2, [pc, #256]	; (8008d64 <_svfiprintf_r+0x1dc>)
 8008c64:	1a80      	subs	r0, r0, r2
 8008c66:	fa0b f000 	lsl.w	r0, fp, r0
 8008c6a:	4318      	orrs	r0, r3
 8008c6c:	9004      	str	r0, [sp, #16]
 8008c6e:	463d      	mov	r5, r7
 8008c70:	e7d3      	b.n	8008c1a <_svfiprintf_r+0x92>
 8008c72:	9a03      	ldr	r2, [sp, #12]
 8008c74:	1d11      	adds	r1, r2, #4
 8008c76:	6812      	ldr	r2, [r2, #0]
 8008c78:	9103      	str	r1, [sp, #12]
 8008c7a:	2a00      	cmp	r2, #0
 8008c7c:	db01      	blt.n	8008c82 <_svfiprintf_r+0xfa>
 8008c7e:	9207      	str	r2, [sp, #28]
 8008c80:	e004      	b.n	8008c8c <_svfiprintf_r+0x104>
 8008c82:	4252      	negs	r2, r2
 8008c84:	f043 0302 	orr.w	r3, r3, #2
 8008c88:	9207      	str	r2, [sp, #28]
 8008c8a:	9304      	str	r3, [sp, #16]
 8008c8c:	783b      	ldrb	r3, [r7, #0]
 8008c8e:	2b2e      	cmp	r3, #46	; 0x2e
 8008c90:	d10c      	bne.n	8008cac <_svfiprintf_r+0x124>
 8008c92:	787b      	ldrb	r3, [r7, #1]
 8008c94:	2b2a      	cmp	r3, #42	; 0x2a
 8008c96:	d133      	bne.n	8008d00 <_svfiprintf_r+0x178>
 8008c98:	9b03      	ldr	r3, [sp, #12]
 8008c9a:	1d1a      	adds	r2, r3, #4
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	9203      	str	r2, [sp, #12]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	bfb8      	it	lt
 8008ca4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008ca8:	3702      	adds	r7, #2
 8008caa:	9305      	str	r3, [sp, #20]
 8008cac:	4d2e      	ldr	r5, [pc, #184]	; (8008d68 <_svfiprintf_r+0x1e0>)
 8008cae:	7839      	ldrb	r1, [r7, #0]
 8008cb0:	2203      	movs	r2, #3
 8008cb2:	4628      	mov	r0, r5
 8008cb4:	f7f7 fa9c 	bl	80001f0 <memchr>
 8008cb8:	b138      	cbz	r0, 8008cca <_svfiprintf_r+0x142>
 8008cba:	2340      	movs	r3, #64	; 0x40
 8008cbc:	1b40      	subs	r0, r0, r5
 8008cbe:	fa03 f000 	lsl.w	r0, r3, r0
 8008cc2:	9b04      	ldr	r3, [sp, #16]
 8008cc4:	4303      	orrs	r3, r0
 8008cc6:	3701      	adds	r7, #1
 8008cc8:	9304      	str	r3, [sp, #16]
 8008cca:	7839      	ldrb	r1, [r7, #0]
 8008ccc:	4827      	ldr	r0, [pc, #156]	; (8008d6c <_svfiprintf_r+0x1e4>)
 8008cce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008cd2:	2206      	movs	r2, #6
 8008cd4:	1c7e      	adds	r6, r7, #1
 8008cd6:	f7f7 fa8b 	bl	80001f0 <memchr>
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	d038      	beq.n	8008d50 <_svfiprintf_r+0x1c8>
 8008cde:	4b24      	ldr	r3, [pc, #144]	; (8008d70 <_svfiprintf_r+0x1e8>)
 8008ce0:	bb13      	cbnz	r3, 8008d28 <_svfiprintf_r+0x1a0>
 8008ce2:	9b03      	ldr	r3, [sp, #12]
 8008ce4:	3307      	adds	r3, #7
 8008ce6:	f023 0307 	bic.w	r3, r3, #7
 8008cea:	3308      	adds	r3, #8
 8008cec:	9303      	str	r3, [sp, #12]
 8008cee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cf0:	444b      	add	r3, r9
 8008cf2:	9309      	str	r3, [sp, #36]	; 0x24
 8008cf4:	e76d      	b.n	8008bd2 <_svfiprintf_r+0x4a>
 8008cf6:	fb05 3202 	mla	r2, r5, r2, r3
 8008cfa:	2001      	movs	r0, #1
 8008cfc:	460f      	mov	r7, r1
 8008cfe:	e7a6      	b.n	8008c4e <_svfiprintf_r+0xc6>
 8008d00:	2300      	movs	r3, #0
 8008d02:	3701      	adds	r7, #1
 8008d04:	9305      	str	r3, [sp, #20]
 8008d06:	4619      	mov	r1, r3
 8008d08:	250a      	movs	r5, #10
 8008d0a:	4638      	mov	r0, r7
 8008d0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d10:	3a30      	subs	r2, #48	; 0x30
 8008d12:	2a09      	cmp	r2, #9
 8008d14:	d903      	bls.n	8008d1e <_svfiprintf_r+0x196>
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d0c8      	beq.n	8008cac <_svfiprintf_r+0x124>
 8008d1a:	9105      	str	r1, [sp, #20]
 8008d1c:	e7c6      	b.n	8008cac <_svfiprintf_r+0x124>
 8008d1e:	fb05 2101 	mla	r1, r5, r1, r2
 8008d22:	2301      	movs	r3, #1
 8008d24:	4607      	mov	r7, r0
 8008d26:	e7f0      	b.n	8008d0a <_svfiprintf_r+0x182>
 8008d28:	ab03      	add	r3, sp, #12
 8008d2a:	9300      	str	r3, [sp, #0]
 8008d2c:	4622      	mov	r2, r4
 8008d2e:	4b11      	ldr	r3, [pc, #68]	; (8008d74 <_svfiprintf_r+0x1ec>)
 8008d30:	a904      	add	r1, sp, #16
 8008d32:	4640      	mov	r0, r8
 8008d34:	f3af 8000 	nop.w
 8008d38:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008d3c:	4681      	mov	r9, r0
 8008d3e:	d1d6      	bne.n	8008cee <_svfiprintf_r+0x166>
 8008d40:	89a3      	ldrh	r3, [r4, #12]
 8008d42:	065b      	lsls	r3, r3, #25
 8008d44:	f53f af35 	bmi.w	8008bb2 <_svfiprintf_r+0x2a>
 8008d48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d4a:	b01d      	add	sp, #116	; 0x74
 8008d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d50:	ab03      	add	r3, sp, #12
 8008d52:	9300      	str	r3, [sp, #0]
 8008d54:	4622      	mov	r2, r4
 8008d56:	4b07      	ldr	r3, [pc, #28]	; (8008d74 <_svfiprintf_r+0x1ec>)
 8008d58:	a904      	add	r1, sp, #16
 8008d5a:	4640      	mov	r0, r8
 8008d5c:	f000 f882 	bl	8008e64 <_printf_i>
 8008d60:	e7ea      	b.n	8008d38 <_svfiprintf_r+0x1b0>
 8008d62:	bf00      	nop
 8008d64:	080093a4 	.word	0x080093a4
 8008d68:	080093aa 	.word	0x080093aa
 8008d6c:	080093ae 	.word	0x080093ae
 8008d70:	00000000 	.word	0x00000000
 8008d74:	08008ad3 	.word	0x08008ad3

08008d78 <_printf_common>:
 8008d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d7c:	4691      	mov	r9, r2
 8008d7e:	461f      	mov	r7, r3
 8008d80:	688a      	ldr	r2, [r1, #8]
 8008d82:	690b      	ldr	r3, [r1, #16]
 8008d84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	bfb8      	it	lt
 8008d8c:	4613      	movlt	r3, r2
 8008d8e:	f8c9 3000 	str.w	r3, [r9]
 8008d92:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d96:	4606      	mov	r6, r0
 8008d98:	460c      	mov	r4, r1
 8008d9a:	b112      	cbz	r2, 8008da2 <_printf_common+0x2a>
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	f8c9 3000 	str.w	r3, [r9]
 8008da2:	6823      	ldr	r3, [r4, #0]
 8008da4:	0699      	lsls	r1, r3, #26
 8008da6:	bf42      	ittt	mi
 8008da8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008dac:	3302      	addmi	r3, #2
 8008dae:	f8c9 3000 	strmi.w	r3, [r9]
 8008db2:	6825      	ldr	r5, [r4, #0]
 8008db4:	f015 0506 	ands.w	r5, r5, #6
 8008db8:	d107      	bne.n	8008dca <_printf_common+0x52>
 8008dba:	f104 0a19 	add.w	sl, r4, #25
 8008dbe:	68e3      	ldr	r3, [r4, #12]
 8008dc0:	f8d9 2000 	ldr.w	r2, [r9]
 8008dc4:	1a9b      	subs	r3, r3, r2
 8008dc6:	42ab      	cmp	r3, r5
 8008dc8:	dc28      	bgt.n	8008e1c <_printf_common+0xa4>
 8008dca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008dce:	6822      	ldr	r2, [r4, #0]
 8008dd0:	3300      	adds	r3, #0
 8008dd2:	bf18      	it	ne
 8008dd4:	2301      	movne	r3, #1
 8008dd6:	0692      	lsls	r2, r2, #26
 8008dd8:	d42d      	bmi.n	8008e36 <_printf_common+0xbe>
 8008dda:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008dde:	4639      	mov	r1, r7
 8008de0:	4630      	mov	r0, r6
 8008de2:	47c0      	blx	r8
 8008de4:	3001      	adds	r0, #1
 8008de6:	d020      	beq.n	8008e2a <_printf_common+0xb2>
 8008de8:	6823      	ldr	r3, [r4, #0]
 8008dea:	68e5      	ldr	r5, [r4, #12]
 8008dec:	f8d9 2000 	ldr.w	r2, [r9]
 8008df0:	f003 0306 	and.w	r3, r3, #6
 8008df4:	2b04      	cmp	r3, #4
 8008df6:	bf08      	it	eq
 8008df8:	1aad      	subeq	r5, r5, r2
 8008dfa:	68a3      	ldr	r3, [r4, #8]
 8008dfc:	6922      	ldr	r2, [r4, #16]
 8008dfe:	bf0c      	ite	eq
 8008e00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e04:	2500      	movne	r5, #0
 8008e06:	4293      	cmp	r3, r2
 8008e08:	bfc4      	itt	gt
 8008e0a:	1a9b      	subgt	r3, r3, r2
 8008e0c:	18ed      	addgt	r5, r5, r3
 8008e0e:	f04f 0900 	mov.w	r9, #0
 8008e12:	341a      	adds	r4, #26
 8008e14:	454d      	cmp	r5, r9
 8008e16:	d11a      	bne.n	8008e4e <_printf_common+0xd6>
 8008e18:	2000      	movs	r0, #0
 8008e1a:	e008      	b.n	8008e2e <_printf_common+0xb6>
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	4652      	mov	r2, sl
 8008e20:	4639      	mov	r1, r7
 8008e22:	4630      	mov	r0, r6
 8008e24:	47c0      	blx	r8
 8008e26:	3001      	adds	r0, #1
 8008e28:	d103      	bne.n	8008e32 <_printf_common+0xba>
 8008e2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e32:	3501      	adds	r5, #1
 8008e34:	e7c3      	b.n	8008dbe <_printf_common+0x46>
 8008e36:	18e1      	adds	r1, r4, r3
 8008e38:	1c5a      	adds	r2, r3, #1
 8008e3a:	2030      	movs	r0, #48	; 0x30
 8008e3c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e40:	4422      	add	r2, r4
 8008e42:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e4a:	3302      	adds	r3, #2
 8008e4c:	e7c5      	b.n	8008dda <_printf_common+0x62>
 8008e4e:	2301      	movs	r3, #1
 8008e50:	4622      	mov	r2, r4
 8008e52:	4639      	mov	r1, r7
 8008e54:	4630      	mov	r0, r6
 8008e56:	47c0      	blx	r8
 8008e58:	3001      	adds	r0, #1
 8008e5a:	d0e6      	beq.n	8008e2a <_printf_common+0xb2>
 8008e5c:	f109 0901 	add.w	r9, r9, #1
 8008e60:	e7d8      	b.n	8008e14 <_printf_common+0x9c>
	...

08008e64 <_printf_i>:
 8008e64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e68:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008e6c:	460c      	mov	r4, r1
 8008e6e:	7e09      	ldrb	r1, [r1, #24]
 8008e70:	b085      	sub	sp, #20
 8008e72:	296e      	cmp	r1, #110	; 0x6e
 8008e74:	4617      	mov	r7, r2
 8008e76:	4606      	mov	r6, r0
 8008e78:	4698      	mov	r8, r3
 8008e7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e7c:	f000 80b3 	beq.w	8008fe6 <_printf_i+0x182>
 8008e80:	d822      	bhi.n	8008ec8 <_printf_i+0x64>
 8008e82:	2963      	cmp	r1, #99	; 0x63
 8008e84:	d036      	beq.n	8008ef4 <_printf_i+0x90>
 8008e86:	d80a      	bhi.n	8008e9e <_printf_i+0x3a>
 8008e88:	2900      	cmp	r1, #0
 8008e8a:	f000 80b9 	beq.w	8009000 <_printf_i+0x19c>
 8008e8e:	2958      	cmp	r1, #88	; 0x58
 8008e90:	f000 8083 	beq.w	8008f9a <_printf_i+0x136>
 8008e94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e98:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008e9c:	e032      	b.n	8008f04 <_printf_i+0xa0>
 8008e9e:	2964      	cmp	r1, #100	; 0x64
 8008ea0:	d001      	beq.n	8008ea6 <_printf_i+0x42>
 8008ea2:	2969      	cmp	r1, #105	; 0x69
 8008ea4:	d1f6      	bne.n	8008e94 <_printf_i+0x30>
 8008ea6:	6820      	ldr	r0, [r4, #0]
 8008ea8:	6813      	ldr	r3, [r2, #0]
 8008eaa:	0605      	lsls	r5, r0, #24
 8008eac:	f103 0104 	add.w	r1, r3, #4
 8008eb0:	d52a      	bpl.n	8008f08 <_printf_i+0xa4>
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	6011      	str	r1, [r2, #0]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	da03      	bge.n	8008ec2 <_printf_i+0x5e>
 8008eba:	222d      	movs	r2, #45	; 0x2d
 8008ebc:	425b      	negs	r3, r3
 8008ebe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008ec2:	486f      	ldr	r0, [pc, #444]	; (8009080 <_printf_i+0x21c>)
 8008ec4:	220a      	movs	r2, #10
 8008ec6:	e039      	b.n	8008f3c <_printf_i+0xd8>
 8008ec8:	2973      	cmp	r1, #115	; 0x73
 8008eca:	f000 809d 	beq.w	8009008 <_printf_i+0x1a4>
 8008ece:	d808      	bhi.n	8008ee2 <_printf_i+0x7e>
 8008ed0:	296f      	cmp	r1, #111	; 0x6f
 8008ed2:	d020      	beq.n	8008f16 <_printf_i+0xb2>
 8008ed4:	2970      	cmp	r1, #112	; 0x70
 8008ed6:	d1dd      	bne.n	8008e94 <_printf_i+0x30>
 8008ed8:	6823      	ldr	r3, [r4, #0]
 8008eda:	f043 0320 	orr.w	r3, r3, #32
 8008ede:	6023      	str	r3, [r4, #0]
 8008ee0:	e003      	b.n	8008eea <_printf_i+0x86>
 8008ee2:	2975      	cmp	r1, #117	; 0x75
 8008ee4:	d017      	beq.n	8008f16 <_printf_i+0xb2>
 8008ee6:	2978      	cmp	r1, #120	; 0x78
 8008ee8:	d1d4      	bne.n	8008e94 <_printf_i+0x30>
 8008eea:	2378      	movs	r3, #120	; 0x78
 8008eec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008ef0:	4864      	ldr	r0, [pc, #400]	; (8009084 <_printf_i+0x220>)
 8008ef2:	e055      	b.n	8008fa0 <_printf_i+0x13c>
 8008ef4:	6813      	ldr	r3, [r2, #0]
 8008ef6:	1d19      	adds	r1, r3, #4
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	6011      	str	r1, [r2, #0]
 8008efc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f04:	2301      	movs	r3, #1
 8008f06:	e08c      	b.n	8009022 <_printf_i+0x1be>
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	6011      	str	r1, [r2, #0]
 8008f0c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008f10:	bf18      	it	ne
 8008f12:	b21b      	sxthne	r3, r3
 8008f14:	e7cf      	b.n	8008eb6 <_printf_i+0x52>
 8008f16:	6813      	ldr	r3, [r2, #0]
 8008f18:	6825      	ldr	r5, [r4, #0]
 8008f1a:	1d18      	adds	r0, r3, #4
 8008f1c:	6010      	str	r0, [r2, #0]
 8008f1e:	0628      	lsls	r0, r5, #24
 8008f20:	d501      	bpl.n	8008f26 <_printf_i+0xc2>
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	e002      	b.n	8008f2c <_printf_i+0xc8>
 8008f26:	0668      	lsls	r0, r5, #25
 8008f28:	d5fb      	bpl.n	8008f22 <_printf_i+0xbe>
 8008f2a:	881b      	ldrh	r3, [r3, #0]
 8008f2c:	4854      	ldr	r0, [pc, #336]	; (8009080 <_printf_i+0x21c>)
 8008f2e:	296f      	cmp	r1, #111	; 0x6f
 8008f30:	bf14      	ite	ne
 8008f32:	220a      	movne	r2, #10
 8008f34:	2208      	moveq	r2, #8
 8008f36:	2100      	movs	r1, #0
 8008f38:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f3c:	6865      	ldr	r5, [r4, #4]
 8008f3e:	60a5      	str	r5, [r4, #8]
 8008f40:	2d00      	cmp	r5, #0
 8008f42:	f2c0 8095 	blt.w	8009070 <_printf_i+0x20c>
 8008f46:	6821      	ldr	r1, [r4, #0]
 8008f48:	f021 0104 	bic.w	r1, r1, #4
 8008f4c:	6021      	str	r1, [r4, #0]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d13d      	bne.n	8008fce <_printf_i+0x16a>
 8008f52:	2d00      	cmp	r5, #0
 8008f54:	f040 808e 	bne.w	8009074 <_printf_i+0x210>
 8008f58:	4665      	mov	r5, ip
 8008f5a:	2a08      	cmp	r2, #8
 8008f5c:	d10b      	bne.n	8008f76 <_printf_i+0x112>
 8008f5e:	6823      	ldr	r3, [r4, #0]
 8008f60:	07db      	lsls	r3, r3, #31
 8008f62:	d508      	bpl.n	8008f76 <_printf_i+0x112>
 8008f64:	6923      	ldr	r3, [r4, #16]
 8008f66:	6862      	ldr	r2, [r4, #4]
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	bfde      	ittt	le
 8008f6c:	2330      	movle	r3, #48	; 0x30
 8008f6e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f72:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008f76:	ebac 0305 	sub.w	r3, ip, r5
 8008f7a:	6123      	str	r3, [r4, #16]
 8008f7c:	f8cd 8000 	str.w	r8, [sp]
 8008f80:	463b      	mov	r3, r7
 8008f82:	aa03      	add	r2, sp, #12
 8008f84:	4621      	mov	r1, r4
 8008f86:	4630      	mov	r0, r6
 8008f88:	f7ff fef6 	bl	8008d78 <_printf_common>
 8008f8c:	3001      	adds	r0, #1
 8008f8e:	d14d      	bne.n	800902c <_printf_i+0x1c8>
 8008f90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f94:	b005      	add	sp, #20
 8008f96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f9a:	4839      	ldr	r0, [pc, #228]	; (8009080 <_printf_i+0x21c>)
 8008f9c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008fa0:	6813      	ldr	r3, [r2, #0]
 8008fa2:	6821      	ldr	r1, [r4, #0]
 8008fa4:	1d1d      	adds	r5, r3, #4
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	6015      	str	r5, [r2, #0]
 8008faa:	060a      	lsls	r2, r1, #24
 8008fac:	d50b      	bpl.n	8008fc6 <_printf_i+0x162>
 8008fae:	07ca      	lsls	r2, r1, #31
 8008fb0:	bf44      	itt	mi
 8008fb2:	f041 0120 	orrmi.w	r1, r1, #32
 8008fb6:	6021      	strmi	r1, [r4, #0]
 8008fb8:	b91b      	cbnz	r3, 8008fc2 <_printf_i+0x15e>
 8008fba:	6822      	ldr	r2, [r4, #0]
 8008fbc:	f022 0220 	bic.w	r2, r2, #32
 8008fc0:	6022      	str	r2, [r4, #0]
 8008fc2:	2210      	movs	r2, #16
 8008fc4:	e7b7      	b.n	8008f36 <_printf_i+0xd2>
 8008fc6:	064d      	lsls	r5, r1, #25
 8008fc8:	bf48      	it	mi
 8008fca:	b29b      	uxthmi	r3, r3
 8008fcc:	e7ef      	b.n	8008fae <_printf_i+0x14a>
 8008fce:	4665      	mov	r5, ip
 8008fd0:	fbb3 f1f2 	udiv	r1, r3, r2
 8008fd4:	fb02 3311 	mls	r3, r2, r1, r3
 8008fd8:	5cc3      	ldrb	r3, [r0, r3]
 8008fda:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008fde:	460b      	mov	r3, r1
 8008fe0:	2900      	cmp	r1, #0
 8008fe2:	d1f5      	bne.n	8008fd0 <_printf_i+0x16c>
 8008fe4:	e7b9      	b.n	8008f5a <_printf_i+0xf6>
 8008fe6:	6813      	ldr	r3, [r2, #0]
 8008fe8:	6825      	ldr	r5, [r4, #0]
 8008fea:	6961      	ldr	r1, [r4, #20]
 8008fec:	1d18      	adds	r0, r3, #4
 8008fee:	6010      	str	r0, [r2, #0]
 8008ff0:	0628      	lsls	r0, r5, #24
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	d501      	bpl.n	8008ffa <_printf_i+0x196>
 8008ff6:	6019      	str	r1, [r3, #0]
 8008ff8:	e002      	b.n	8009000 <_printf_i+0x19c>
 8008ffa:	066a      	lsls	r2, r5, #25
 8008ffc:	d5fb      	bpl.n	8008ff6 <_printf_i+0x192>
 8008ffe:	8019      	strh	r1, [r3, #0]
 8009000:	2300      	movs	r3, #0
 8009002:	6123      	str	r3, [r4, #16]
 8009004:	4665      	mov	r5, ip
 8009006:	e7b9      	b.n	8008f7c <_printf_i+0x118>
 8009008:	6813      	ldr	r3, [r2, #0]
 800900a:	1d19      	adds	r1, r3, #4
 800900c:	6011      	str	r1, [r2, #0]
 800900e:	681d      	ldr	r5, [r3, #0]
 8009010:	6862      	ldr	r2, [r4, #4]
 8009012:	2100      	movs	r1, #0
 8009014:	4628      	mov	r0, r5
 8009016:	f7f7 f8eb 	bl	80001f0 <memchr>
 800901a:	b108      	cbz	r0, 8009020 <_printf_i+0x1bc>
 800901c:	1b40      	subs	r0, r0, r5
 800901e:	6060      	str	r0, [r4, #4]
 8009020:	6863      	ldr	r3, [r4, #4]
 8009022:	6123      	str	r3, [r4, #16]
 8009024:	2300      	movs	r3, #0
 8009026:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800902a:	e7a7      	b.n	8008f7c <_printf_i+0x118>
 800902c:	6923      	ldr	r3, [r4, #16]
 800902e:	462a      	mov	r2, r5
 8009030:	4639      	mov	r1, r7
 8009032:	4630      	mov	r0, r6
 8009034:	47c0      	blx	r8
 8009036:	3001      	adds	r0, #1
 8009038:	d0aa      	beq.n	8008f90 <_printf_i+0x12c>
 800903a:	6823      	ldr	r3, [r4, #0]
 800903c:	079b      	lsls	r3, r3, #30
 800903e:	d413      	bmi.n	8009068 <_printf_i+0x204>
 8009040:	68e0      	ldr	r0, [r4, #12]
 8009042:	9b03      	ldr	r3, [sp, #12]
 8009044:	4298      	cmp	r0, r3
 8009046:	bfb8      	it	lt
 8009048:	4618      	movlt	r0, r3
 800904a:	e7a3      	b.n	8008f94 <_printf_i+0x130>
 800904c:	2301      	movs	r3, #1
 800904e:	464a      	mov	r2, r9
 8009050:	4639      	mov	r1, r7
 8009052:	4630      	mov	r0, r6
 8009054:	47c0      	blx	r8
 8009056:	3001      	adds	r0, #1
 8009058:	d09a      	beq.n	8008f90 <_printf_i+0x12c>
 800905a:	3501      	adds	r5, #1
 800905c:	68e3      	ldr	r3, [r4, #12]
 800905e:	9a03      	ldr	r2, [sp, #12]
 8009060:	1a9b      	subs	r3, r3, r2
 8009062:	42ab      	cmp	r3, r5
 8009064:	dcf2      	bgt.n	800904c <_printf_i+0x1e8>
 8009066:	e7eb      	b.n	8009040 <_printf_i+0x1dc>
 8009068:	2500      	movs	r5, #0
 800906a:	f104 0919 	add.w	r9, r4, #25
 800906e:	e7f5      	b.n	800905c <_printf_i+0x1f8>
 8009070:	2b00      	cmp	r3, #0
 8009072:	d1ac      	bne.n	8008fce <_printf_i+0x16a>
 8009074:	7803      	ldrb	r3, [r0, #0]
 8009076:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800907a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800907e:	e76c      	b.n	8008f5a <_printf_i+0xf6>
 8009080:	080093b5 	.word	0x080093b5
 8009084:	080093c6 	.word	0x080093c6

08009088 <__ascii_wctomb>:
 8009088:	b149      	cbz	r1, 800909e <__ascii_wctomb+0x16>
 800908a:	2aff      	cmp	r2, #255	; 0xff
 800908c:	bf85      	ittet	hi
 800908e:	238a      	movhi	r3, #138	; 0x8a
 8009090:	6003      	strhi	r3, [r0, #0]
 8009092:	700a      	strbls	r2, [r1, #0]
 8009094:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009098:	bf98      	it	ls
 800909a:	2001      	movls	r0, #1
 800909c:	4770      	bx	lr
 800909e:	4608      	mov	r0, r1
 80090a0:	4770      	bx	lr

080090a2 <memmove>:
 80090a2:	4288      	cmp	r0, r1
 80090a4:	b510      	push	{r4, lr}
 80090a6:	eb01 0302 	add.w	r3, r1, r2
 80090aa:	d807      	bhi.n	80090bc <memmove+0x1a>
 80090ac:	1e42      	subs	r2, r0, #1
 80090ae:	4299      	cmp	r1, r3
 80090b0:	d00a      	beq.n	80090c8 <memmove+0x26>
 80090b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090b6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80090ba:	e7f8      	b.n	80090ae <memmove+0xc>
 80090bc:	4283      	cmp	r3, r0
 80090be:	d9f5      	bls.n	80090ac <memmove+0xa>
 80090c0:	1881      	adds	r1, r0, r2
 80090c2:	1ad2      	subs	r2, r2, r3
 80090c4:	42d3      	cmn	r3, r2
 80090c6:	d100      	bne.n	80090ca <memmove+0x28>
 80090c8:	bd10      	pop	{r4, pc}
 80090ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80090ce:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80090d2:	e7f7      	b.n	80090c4 <memmove+0x22>

080090d4 <_realloc_r>:
 80090d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090d6:	4607      	mov	r7, r0
 80090d8:	4614      	mov	r4, r2
 80090da:	460e      	mov	r6, r1
 80090dc:	b921      	cbnz	r1, 80090e8 <_realloc_r+0x14>
 80090de:	4611      	mov	r1, r2
 80090e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80090e4:	f7fd bee2 	b.w	8006eac <_malloc_r>
 80090e8:	b922      	cbnz	r2, 80090f4 <_realloc_r+0x20>
 80090ea:	f7fd fe91 	bl	8006e10 <_free_r>
 80090ee:	4625      	mov	r5, r4
 80090f0:	4628      	mov	r0, r5
 80090f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090f4:	f000 f814 	bl	8009120 <_malloc_usable_size_r>
 80090f8:	42a0      	cmp	r0, r4
 80090fa:	d20f      	bcs.n	800911c <_realloc_r+0x48>
 80090fc:	4621      	mov	r1, r4
 80090fe:	4638      	mov	r0, r7
 8009100:	f7fd fed4 	bl	8006eac <_malloc_r>
 8009104:	4605      	mov	r5, r0
 8009106:	2800      	cmp	r0, #0
 8009108:	d0f2      	beq.n	80090f0 <_realloc_r+0x1c>
 800910a:	4631      	mov	r1, r6
 800910c:	4622      	mov	r2, r4
 800910e:	f7fd fe6b 	bl	8006de8 <memcpy>
 8009112:	4631      	mov	r1, r6
 8009114:	4638      	mov	r0, r7
 8009116:	f7fd fe7b 	bl	8006e10 <_free_r>
 800911a:	e7e9      	b.n	80090f0 <_realloc_r+0x1c>
 800911c:	4635      	mov	r5, r6
 800911e:	e7e7      	b.n	80090f0 <_realloc_r+0x1c>

08009120 <_malloc_usable_size_r>:
 8009120:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009124:	1f18      	subs	r0, r3, #4
 8009126:	2b00      	cmp	r3, #0
 8009128:	bfbc      	itt	lt
 800912a:	580b      	ldrlt	r3, [r1, r0]
 800912c:	18c0      	addlt	r0, r0, r3
 800912e:	4770      	bx	lr

08009130 <_init>:
 8009130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009132:	bf00      	nop
 8009134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009136:	bc08      	pop	{r3}
 8009138:	469e      	mov	lr, r3
 800913a:	4770      	bx	lr

0800913c <_fini>:
 800913c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800913e:	bf00      	nop
 8009140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009142:	bc08      	pop	{r3}
 8009144:	469e      	mov	lr, r3
 8009146:	4770      	bx	lr
