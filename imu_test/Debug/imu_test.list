
imu_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .init         0000000c  00008000  00008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000021e6  0000800c  0000800c  0000800c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .fini         0000000c  0000a1f4  0000a1f4  0000a1f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000002c  0000a200  0000a200  0000a200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.exidx    00000008  0000a22c  0000a22c  0000a22c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .eh_frame     00000004  0000a234  0000a234  0000a234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000008  0001a238  0001a238  0000a238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0001a240  0001a240  0000a240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  0001a248  0001a248  0000a248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  0001a2b8  0001a2b8  0000a2b8  2**2
                  ALLOC
 10 .comment      0000007b  00000000  00000000  0000a2b8  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 000009e0  00000000  00000000  0000a333  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   0000a558  00000000  00000000  0000ad13  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017ea  00000000  00000000  0001526b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000759f  00000000  00000000  00016a55  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002b40  00000000  00000000  0001dff4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00093112  00000000  00000000  00020b34  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000930  00000000  00000000  000b3c46  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00016fdd  00000000  00000000  000b4576  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .ARM.attributes 00000030  00000000  00000000  000cb553  2**0
                  CONTENTS, READONLY

Disassembly of section .init:

00008000 <_init>:
    8000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8002:	bf00      	nop
    8004:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8006:	bc08      	pop	{r3}
    8008:	469e      	mov	lr, r3
    800a:	4770      	bx	lr

Disassembly of section .text:

0000800c <exit>:
    800c:	b508      	push	{r3, lr}
    800e:	4b07      	ldr	r3, [pc, #28]	; (802c <exit+0x20>)
    8010:	4604      	mov	r4, r0
    8012:	b113      	cbz	r3, 801a <exit+0xe>
    8014:	2100      	movs	r1, #0
    8016:	f3af 8000 	nop.w
    801a:	4b05      	ldr	r3, [pc, #20]	; (8030 <exit+0x24>)
    801c:	6818      	ldr	r0, [r3, #0]
    801e:	6a83      	ldr	r3, [r0, #40]	; 0x28
    8020:	b103      	cbz	r3, 8024 <exit+0x18>
    8022:	4798      	blx	r3
    8024:	4620      	mov	r0, r4
    8026:	f002 f8e3 	bl	a1f0 <_exit>
    802a:	bf00      	nop
    802c:	00000000 	.word	0x00000000
    8030:	0000a228 	.word	0x0000a228

00008034 <__do_global_dtors_aux>:
    8034:	b510      	push	{r4, lr}
    8036:	4c05      	ldr	r4, [pc, #20]	; (804c <__do_global_dtors_aux+0x18>)
    8038:	7823      	ldrb	r3, [r4, #0]
    803a:	b933      	cbnz	r3, 804a <__do_global_dtors_aux+0x16>
    803c:	4b04      	ldr	r3, [pc, #16]	; (8050 <__do_global_dtors_aux+0x1c>)
    803e:	b113      	cbz	r3, 8046 <__do_global_dtors_aux+0x12>
    8040:	4804      	ldr	r0, [pc, #16]	; (8054 <__do_global_dtors_aux+0x20>)
    8042:	f3af 8000 	nop.w
    8046:	2301      	movs	r3, #1
    8048:	7023      	strb	r3, [r4, #0]
    804a:	bd10      	pop	{r4, pc}
    804c:	0001a2b8 	.word	0x0001a2b8
    8050:	00000000 	.word	0x00000000
    8054:	0000a234 	.word	0x0000a234

00008058 <frame_dummy>:
    8058:	b508      	push	{r3, lr}
    805a:	4b03      	ldr	r3, [pc, #12]	; (8068 <frame_dummy+0x10>)
    805c:	b11b      	cbz	r3, 8066 <frame_dummy+0xe>
    805e:	4903      	ldr	r1, [pc, #12]	; (806c <frame_dummy+0x14>)
    8060:	4803      	ldr	r0, [pc, #12]	; (8070 <frame_dummy+0x18>)
    8062:	f3af 8000 	nop.w
    8066:	bd08      	pop	{r3, pc}
    8068:	00000000 	.word	0x00000000
    806c:	0001a2bc 	.word	0x0001a2bc
    8070:	0000a234 	.word	0x0000a234

00008074 <_mainCRTStartup>:
    8074:	4b15      	ldr	r3, [pc, #84]	; (80cc <_mainCRTStartup+0x58>)
    8076:	2b00      	cmp	r3, #0
    8078:	bf08      	it	eq
    807a:	4b13      	ldreq	r3, [pc, #76]	; (80c8 <_mainCRTStartup+0x54>)
    807c:	469d      	mov	sp, r3
    807e:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
    8082:	2100      	movs	r1, #0
    8084:	468b      	mov	fp, r1
    8086:	460f      	mov	r7, r1
    8088:	4813      	ldr	r0, [pc, #76]	; (80d8 <_mainCRTStartup+0x64>)
    808a:	4a14      	ldr	r2, [pc, #80]	; (80dc <_mainCRTStartup+0x68>)
    808c:	1a12      	subs	r2, r2, r0
    808e:	f001 fed7 	bl	9e40 <memset>
    8092:	4b0f      	ldr	r3, [pc, #60]	; (80d0 <_mainCRTStartup+0x5c>)
    8094:	2b00      	cmp	r3, #0
    8096:	d000      	beq.n	809a <_mainCRTStartup+0x26>
    8098:	4798      	blx	r3
    809a:	4b0e      	ldr	r3, [pc, #56]	; (80d4 <_mainCRTStartup+0x60>)
    809c:	2b00      	cmp	r3, #0
    809e:	d000      	beq.n	80a2 <_mainCRTStartup+0x2e>
    80a0:	4798      	blx	r3
    80a2:	2000      	movs	r0, #0
    80a4:	2100      	movs	r1, #0
    80a6:	0004      	movs	r4, r0
    80a8:	000d      	movs	r5, r1
    80aa:	480d      	ldr	r0, [pc, #52]	; (80e0 <_mainCRTStartup+0x6c>)
    80ac:	2800      	cmp	r0, #0
    80ae:	d002      	beq.n	80b6 <_mainCRTStartup+0x42>
    80b0:	480c      	ldr	r0, [pc, #48]	; (80e4 <_mainCRTStartup+0x70>)
    80b2:	f3af 8000 	nop.w
    80b6:	f001 fe97 	bl	9de8 <__libc_init_array>
    80ba:	0020      	movs	r0, r4
    80bc:	0029      	movs	r1, r5
    80be:	f000 f843 	bl	8148 <main>
    80c2:	f7ff ffa3 	bl	800c <exit>
    80c6:	bf00      	nop
    80c8:	00080000 	.word	0x00080000
	...
    80d8:	0001a2b8 	.word	0x0001a2b8
    80dc:	0001a3bc 	.word	0x0001a3bc
	...

000080e8 <_ZN3IMUC1Ev>:
 *      Author: cy
 */

#include <imu/IMU.h>

IMU::IMU() {
    80e8:	b480      	push	{r7}
    80ea:	b083      	sub	sp, #12
    80ec:	af00      	add	r7, sp, #0
    80ee:	6078      	str	r0, [r7, #4]
    80f0:	4a04      	ldr	r2, [pc, #16]	; (8104 <_ZN3IMUC1Ev+0x1c>)
    80f2:	687b      	ldr	r3, [r7, #4]
    80f4:	601a      	str	r2, [r3, #0]
	// Auto-generated constructor stub
}
    80f6:	687b      	ldr	r3, [r7, #4]
    80f8:	4618      	mov	r0, r3
    80fa:	370c      	adds	r7, #12
    80fc:	46bd      	mov	sp, r7
    80fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    8102:	4770      	bx	lr
    8104:	0000a208 	.word	0x0000a208

00008108 <_ZN3IMUD1Ev>:

IMU::~IMU() {
    8108:	b480      	push	{r7}
    810a:	b083      	sub	sp, #12
    810c:	af00      	add	r7, sp, #0
    810e:	6078      	str	r0, [r7, #4]
    8110:	4a04      	ldr	r2, [pc, #16]	; (8124 <_ZN3IMUD1Ev+0x1c>)
    8112:	687b      	ldr	r3, [r7, #4]
    8114:	601a      	str	r2, [r3, #0]
	// Auto-generated destructor stub
}
    8116:	687b      	ldr	r3, [r7, #4]
    8118:	4618      	mov	r0, r3
    811a:	370c      	adds	r7, #12
    811c:	46bd      	mov	sp, r7
    811e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8122:	4770      	bx	lr
    8124:	0000a208 	.word	0x0000a208

00008128 <_ZN3IMUD0Ev>:
IMU::~IMU() {
    8128:	b580      	push	{r7, lr}
    812a:	b082      	sub	sp, #8
    812c:	af00      	add	r7, sp, #0
    812e:	6078      	str	r0, [r7, #4]
}
    8130:	6878      	ldr	r0, [r7, #4]
    8132:	f7ff ffe9 	bl	8108 <_ZN3IMUD1Ev>
    8136:	2160      	movs	r1, #96	; 0x60
    8138:	6878      	ldr	r0, [r7, #4]
    813a:	f001 fe51 	bl	9de0 <_ZdlPvj>
    813e:	687b      	ldr	r3, [r7, #4]
    8140:	4618      	mov	r0, r3
    8142:	3708      	adds	r7, #8
    8144:	46bd      	mov	sp, r7
    8146:	bd80      	pop	{r7, pc}

00008148 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
    8148:	b580      	push	{r7, lr}
    814a:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
    814c:	f000 fa28 	bl	85a0 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
    8150:	f000 f810 	bl	8174 <_Z18SystemClock_Configv>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
    8154:	f000 f8b2 	bl	82bc <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
    8158:	f000 f882 	bl	8260 <_ZL19MX_USART2_UART_Initv>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
    815c:	2120      	movs	r1, #32
    815e:	4804      	ldr	r0, [pc, #16]	; (8170 <main+0x28>)
    8160:	f000 fceb 	bl	8b3a <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
    8164:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8168:	f000 fa48 	bl	85fc <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
    816c:	e7f6      	b.n	815c <main+0x14>
    816e:	bf00      	nop
    8170:	40020000 	.word	0x40020000

00008174 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
    8174:	b580      	push	{r7, lr}
    8176:	b094      	sub	sp, #80	; 0x50
    8178:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    817a:	f107 0320 	add.w	r3, r7, #32
    817e:	2230      	movs	r2, #48	; 0x30
    8180:	2100      	movs	r1, #0
    8182:	4618      	mov	r0, r3
    8184:	f001 fe5c 	bl	9e40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
    8188:	f107 030c 	add.w	r3, r7, #12
    818c:	2200      	movs	r2, #0
    818e:	601a      	str	r2, [r3, #0]
    8190:	605a      	str	r2, [r3, #4]
    8192:	609a      	str	r2, [r3, #8]
    8194:	60da      	str	r2, [r3, #12]
    8196:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
    8198:	2300      	movs	r3, #0
    819a:	60bb      	str	r3, [r7, #8]
    819c:	4b2e      	ldr	r3, [pc, #184]	; (8258 <_Z18SystemClock_Configv+0xe4>)
    819e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    81a0:	4a2d      	ldr	r2, [pc, #180]	; (8258 <_Z18SystemClock_Configv+0xe4>)
    81a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    81a6:	6413      	str	r3, [r2, #64]	; 0x40
    81a8:	4b2b      	ldr	r3, [pc, #172]	; (8258 <_Z18SystemClock_Configv+0xe4>)
    81aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    81ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    81b0:	60bb      	str	r3, [r7, #8]
    81b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
    81b4:	2300      	movs	r3, #0
    81b6:	607b      	str	r3, [r7, #4]
    81b8:	4b28      	ldr	r3, [pc, #160]	; (825c <_Z18SystemClock_Configv+0xe8>)
    81ba:	681b      	ldr	r3, [r3, #0]
    81bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
    81c0:	4a26      	ldr	r2, [pc, #152]	; (825c <_Z18SystemClock_Configv+0xe8>)
    81c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    81c6:	6013      	str	r3, [r2, #0]
    81c8:	4b24      	ldr	r3, [pc, #144]	; (825c <_Z18SystemClock_Configv+0xe8>)
    81ca:	681b      	ldr	r3, [r3, #0]
    81cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    81d0:	607b      	str	r3, [r7, #4]
    81d2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
    81d4:	2302      	movs	r3, #2
    81d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    81d8:	2301      	movs	r3, #1
    81da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
    81dc:	2310      	movs	r3, #16
    81de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    81e0:	2302      	movs	r3, #2
    81e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
    81e4:	2300      	movs	r3, #0
    81e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
    81e8:	2310      	movs	r3, #16
    81ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
    81ec:	f44f 73a8 	mov.w	r3, #336	; 0x150
    81f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
    81f2:	2304      	movs	r3, #4
    81f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
    81f6:	2307      	movs	r3, #7
    81f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
    81fa:	f107 0320 	add.w	r3, r7, #32
    81fe:	4618      	mov	r0, r3
    8200:	f000 fcb6 	bl	8b70 <HAL_RCC_OscConfig>
    8204:	4603      	mov	r3, r0
    8206:	2b00      	cmp	r3, #0
    8208:	bf14      	ite	ne
    820a:	2301      	movne	r3, #1
    820c:	2300      	moveq	r3, #0
    820e:	b2db      	uxtb	r3, r3
    8210:	2b00      	cmp	r3, #0
    8212:	d001      	beq.n	8218 <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
    8214:	f000 f8c2 	bl	839c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
    8218:	230f      	movs	r3, #15
    821a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    821c:	2302      	movs	r3, #2
    821e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    8220:	2300      	movs	r3, #0
    8222:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
    8224:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    8228:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
    822a:	2300      	movs	r3, #0
    822c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
    822e:	f107 030c 	add.w	r3, r7, #12
    8232:	2102      	movs	r1, #2
    8234:	4618      	mov	r0, r3
    8236:	f000 ff0b 	bl	9050 <HAL_RCC_ClockConfig>
    823a:	4603      	mov	r3, r0
    823c:	2b00      	cmp	r3, #0
    823e:	bf14      	ite	ne
    8240:	2301      	movne	r3, #1
    8242:	2300      	moveq	r3, #0
    8244:	b2db      	uxtb	r3, r3
    8246:	2b00      	cmp	r3, #0
    8248:	d001      	beq.n	824e <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
    824a:	f000 f8a7 	bl	839c <Error_Handler>
  }
}
    824e:	bf00      	nop
    8250:	3750      	adds	r7, #80	; 0x50
    8252:	46bd      	mov	sp, r7
    8254:	bd80      	pop	{r7, pc}
    8256:	bf00      	nop
    8258:	40023800 	.word	0x40023800
    825c:	40007000 	.word	0x40007000

00008260 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
    8260:	b580      	push	{r7, lr}
    8262:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
    8264:	4b13      	ldr	r3, [pc, #76]	; (82b4 <_ZL19MX_USART2_UART_Initv+0x54>)
    8266:	4a14      	ldr	r2, [pc, #80]	; (82b8 <_ZL19MX_USART2_UART_Initv+0x58>)
    8268:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
    826a:	4b12      	ldr	r3, [pc, #72]	; (82b4 <_ZL19MX_USART2_UART_Initv+0x54>)
    826c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
    8270:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
    8272:	4b10      	ldr	r3, [pc, #64]	; (82b4 <_ZL19MX_USART2_UART_Initv+0x54>)
    8274:	2200      	movs	r2, #0
    8276:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
    8278:	4b0e      	ldr	r3, [pc, #56]	; (82b4 <_ZL19MX_USART2_UART_Initv+0x54>)
    827a:	2200      	movs	r2, #0
    827c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
    827e:	4b0d      	ldr	r3, [pc, #52]	; (82b4 <_ZL19MX_USART2_UART_Initv+0x54>)
    8280:	2200      	movs	r2, #0
    8282:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
    8284:	4b0b      	ldr	r3, [pc, #44]	; (82b4 <_ZL19MX_USART2_UART_Initv+0x54>)
    8286:	220c      	movs	r2, #12
    8288:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
    828a:	4b0a      	ldr	r3, [pc, #40]	; (82b4 <_ZL19MX_USART2_UART_Initv+0x54>)
    828c:	2200      	movs	r2, #0
    828e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
    8290:	4b08      	ldr	r3, [pc, #32]	; (82b4 <_ZL19MX_USART2_UART_Initv+0x54>)
    8292:	2200      	movs	r2, #0
    8294:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
    8296:	4807      	ldr	r0, [pc, #28]	; (82b4 <_ZL19MX_USART2_UART_Initv+0x54>)
    8298:	f001 f9d8 	bl	964c <HAL_UART_Init>
    829c:	4603      	mov	r3, r0
    829e:	2b00      	cmp	r3, #0
    82a0:	bf14      	ite	ne
    82a2:	2301      	movne	r3, #1
    82a4:	2300      	moveq	r3, #0
    82a6:	b2db      	uxtb	r3, r3
    82a8:	2b00      	cmp	r3, #0
    82aa:	d001      	beq.n	82b0 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
    82ac:	f000 f876 	bl	839c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
    82b0:	bf00      	nop
    82b2:	bd80      	pop	{r7, pc}
    82b4:	0001a2d4 	.word	0x0001a2d4
    82b8:	40004400 	.word	0x40004400

000082bc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
    82bc:	b580      	push	{r7, lr}
    82be:	b08a      	sub	sp, #40	; 0x28
    82c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
    82c2:	f107 0314 	add.w	r3, r7, #20
    82c6:	2200      	movs	r2, #0
    82c8:	601a      	str	r2, [r3, #0]
    82ca:	605a      	str	r2, [r3, #4]
    82cc:	609a      	str	r2, [r3, #8]
    82ce:	60da      	str	r2, [r3, #12]
    82d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
    82d2:	2300      	movs	r3, #0
    82d4:	613b      	str	r3, [r7, #16]
    82d6:	4b2d      	ldr	r3, [pc, #180]	; (838c <_ZL12MX_GPIO_Initv+0xd0>)
    82d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    82da:	4a2c      	ldr	r2, [pc, #176]	; (838c <_ZL12MX_GPIO_Initv+0xd0>)
    82dc:	f043 0304 	orr.w	r3, r3, #4
    82e0:	6313      	str	r3, [r2, #48]	; 0x30
    82e2:	4b2a      	ldr	r3, [pc, #168]	; (838c <_ZL12MX_GPIO_Initv+0xd0>)
    82e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    82e6:	f003 0304 	and.w	r3, r3, #4
    82ea:	613b      	str	r3, [r7, #16]
    82ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
    82ee:	2300      	movs	r3, #0
    82f0:	60fb      	str	r3, [r7, #12]
    82f2:	4b26      	ldr	r3, [pc, #152]	; (838c <_ZL12MX_GPIO_Initv+0xd0>)
    82f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    82f6:	4a25      	ldr	r2, [pc, #148]	; (838c <_ZL12MX_GPIO_Initv+0xd0>)
    82f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    82fc:	6313      	str	r3, [r2, #48]	; 0x30
    82fe:	4b23      	ldr	r3, [pc, #140]	; (838c <_ZL12MX_GPIO_Initv+0xd0>)
    8300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8302:	f003 0380 	and.w	r3, r3, #128	; 0x80
    8306:	60fb      	str	r3, [r7, #12]
    8308:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
    830a:	2300      	movs	r3, #0
    830c:	60bb      	str	r3, [r7, #8]
    830e:	4b1f      	ldr	r3, [pc, #124]	; (838c <_ZL12MX_GPIO_Initv+0xd0>)
    8310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8312:	4a1e      	ldr	r2, [pc, #120]	; (838c <_ZL12MX_GPIO_Initv+0xd0>)
    8314:	f043 0301 	orr.w	r3, r3, #1
    8318:	6313      	str	r3, [r2, #48]	; 0x30
    831a:	4b1c      	ldr	r3, [pc, #112]	; (838c <_ZL12MX_GPIO_Initv+0xd0>)
    831c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    831e:	f003 0301 	and.w	r3, r3, #1
    8322:	60bb      	str	r3, [r7, #8]
    8324:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
    8326:	2300      	movs	r3, #0
    8328:	607b      	str	r3, [r7, #4]
    832a:	4b18      	ldr	r3, [pc, #96]	; (838c <_ZL12MX_GPIO_Initv+0xd0>)
    832c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    832e:	4a17      	ldr	r2, [pc, #92]	; (838c <_ZL12MX_GPIO_Initv+0xd0>)
    8330:	f043 0302 	orr.w	r3, r3, #2
    8334:	6313      	str	r3, [r2, #48]	; 0x30
    8336:	4b15      	ldr	r3, [pc, #84]	; (838c <_ZL12MX_GPIO_Initv+0xd0>)
    8338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    833a:	f003 0302 	and.w	r3, r3, #2
    833e:	607b      	str	r3, [r7, #4]
    8340:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
    8342:	2200      	movs	r2, #0
    8344:	2120      	movs	r1, #32
    8346:	4812      	ldr	r0, [pc, #72]	; (8390 <_ZL12MX_GPIO_Initv+0xd4>)
    8348:	f000 fbde 	bl	8b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
    834c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    8350:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
    8352:	4b10      	ldr	r3, [pc, #64]	; (8394 <_ZL12MX_GPIO_Initv+0xd8>)
    8354:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
    8356:	2300      	movs	r3, #0
    8358:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
    835a:	f107 0314 	add.w	r3, r7, #20
    835e:	4619      	mov	r1, r3
    8360:	480d      	ldr	r0, [pc, #52]	; (8398 <_ZL12MX_GPIO_Initv+0xdc>)
    8362:	f000 fa4f 	bl	8804 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
    8366:	2320      	movs	r3, #32
    8368:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    836a:	2301      	movs	r3, #1
    836c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
    836e:	2300      	movs	r3, #0
    8370:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    8372:	2300      	movs	r3, #0
    8374:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
    8376:	f107 0314 	add.w	r3, r7, #20
    837a:	4619      	mov	r1, r3
    837c:	4804      	ldr	r0, [pc, #16]	; (8390 <_ZL12MX_GPIO_Initv+0xd4>)
    837e:	f000 fa41 	bl	8804 <HAL_GPIO_Init>

}
    8382:	bf00      	nop
    8384:	3728      	adds	r7, #40	; 0x28
    8386:	46bd      	mov	sp, r7
    8388:	bd80      	pop	{r7, pc}
    838a:	bf00      	nop
    838c:	40023800 	.word	0x40023800
    8390:	40020000 	.word	0x40020000
    8394:	10210000 	.word	0x10210000
    8398:	40020800 	.word	0x40020800

0000839c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
    839c:	b480      	push	{r7}
    839e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
    83a0:	bf00      	nop
    83a2:	46bd      	mov	sp, r7
    83a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    83a8:	4770      	bx	lr
	...

000083ac <_Z41__static_initialization_and_destruction_0ii>:
    83ac:	b580      	push	{r7, lr}
    83ae:	b082      	sub	sp, #8
    83b0:	af00      	add	r7, sp, #0
    83b2:	6078      	str	r0, [r7, #4]
    83b4:	6039      	str	r1, [r7, #0]
    83b6:	687b      	ldr	r3, [r7, #4]
    83b8:	2b01      	cmp	r3, #1
    83ba:	d107      	bne.n	83cc <_Z41__static_initialization_and_destruction_0ii+0x20>
    83bc:	683b      	ldr	r3, [r7, #0]
    83be:	f64f 72ff 	movw	r2, #65535	; 0xffff
    83c2:	4293      	cmp	r3, r2
    83c4:	d102      	bne.n	83cc <_Z41__static_initialization_and_destruction_0ii+0x20>
IMU imu;
    83c6:	4809      	ldr	r0, [pc, #36]	; (83ec <_Z41__static_initialization_and_destruction_0ii+0x40>)
    83c8:	f7ff fe8e 	bl	80e8 <_ZN3IMUC1Ev>
    83cc:	687b      	ldr	r3, [r7, #4]
    83ce:	2b00      	cmp	r3, #0
    83d0:	d107      	bne.n	83e2 <_Z41__static_initialization_and_destruction_0ii+0x36>
    83d2:	683b      	ldr	r3, [r7, #0]
    83d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    83d8:	4293      	cmp	r3, r2
    83da:	d102      	bne.n	83e2 <_Z41__static_initialization_and_destruction_0ii+0x36>
    83dc:	4803      	ldr	r0, [pc, #12]	; (83ec <_Z41__static_initialization_and_destruction_0ii+0x40>)
    83de:	f7ff fe93 	bl	8108 <_ZN3IMUD1Ev>
}
    83e2:	bf00      	nop
    83e4:	3708      	adds	r7, #8
    83e6:	46bd      	mov	sp, r7
    83e8:	bd80      	pop	{r7, pc}
    83ea:	bf00      	nop
    83ec:	0001a314 	.word	0x0001a314

000083f0 <_GLOBAL__sub_I_hi2c1>:
    83f0:	b580      	push	{r7, lr}
    83f2:	af00      	add	r7, sp, #0
    83f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    83f8:	2001      	movs	r0, #1
    83fa:	f7ff ffd7 	bl	83ac <_Z41__static_initialization_and_destruction_0ii>
    83fe:	bd80      	pop	{r7, pc}

00008400 <_GLOBAL__sub_D_hi2c1>:
    8400:	b580      	push	{r7, lr}
    8402:	af00      	add	r7, sp, #0
    8404:	f64f 71ff 	movw	r1, #65535	; 0xffff
    8408:	2000      	movs	r0, #0
    840a:	f7ff ffcf 	bl	83ac <_Z41__static_initialization_and_destruction_0ii>
    840e:	bd80      	pop	{r7, pc}

00008410 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
    8410:	b580      	push	{r7, lr}
    8412:	b082      	sub	sp, #8
    8414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
    8416:	2300      	movs	r3, #0
    8418:	607b      	str	r3, [r7, #4]
    841a:	4b10      	ldr	r3, [pc, #64]	; (845c <HAL_MspInit+0x4c>)
    841c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    841e:	4a0f      	ldr	r2, [pc, #60]	; (845c <HAL_MspInit+0x4c>)
    8420:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    8424:	6453      	str	r3, [r2, #68]	; 0x44
    8426:	4b0d      	ldr	r3, [pc, #52]	; (845c <HAL_MspInit+0x4c>)
    8428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    842a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    842e:	607b      	str	r3, [r7, #4]
    8430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
    8432:	2300      	movs	r3, #0
    8434:	603b      	str	r3, [r7, #0]
    8436:	4b09      	ldr	r3, [pc, #36]	; (845c <HAL_MspInit+0x4c>)
    8438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    843a:	4a08      	ldr	r2, [pc, #32]	; (845c <HAL_MspInit+0x4c>)
    843c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    8440:	6413      	str	r3, [r2, #64]	; 0x40
    8442:	4b06      	ldr	r3, [pc, #24]	; (845c <HAL_MspInit+0x4c>)
    8444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    844a:	603b      	str	r3, [r7, #0]
    844c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
    844e:	2007      	movs	r0, #7
    8450:	f000 f9a3 	bl	879a <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
    8454:	bf00      	nop
    8456:	3708      	adds	r7, #8
    8458:	46bd      	mov	sp, r7
    845a:	bd80      	pop	{r7, pc}
    845c:	40023800 	.word	0x40023800

00008460 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
    8460:	b580      	push	{r7, lr}
    8462:	b08a      	sub	sp, #40	; 0x28
    8464:	af00      	add	r7, sp, #0
    8466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
    8468:	f107 0314 	add.w	r3, r7, #20
    846c:	2200      	movs	r2, #0
    846e:	601a      	str	r2, [r3, #0]
    8470:	605a      	str	r2, [r3, #4]
    8472:	609a      	str	r2, [r3, #8]
    8474:	60da      	str	r2, [r3, #12]
    8476:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
    8478:	687b      	ldr	r3, [r7, #4]
    847a:	681b      	ldr	r3, [r3, #0]
    847c:	4a19      	ldr	r2, [pc, #100]	; (84e4 <HAL_UART_MspInit+0x84>)
    847e:	4293      	cmp	r3, r2
    8480:	d12b      	bne.n	84da <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
    8482:	2300      	movs	r3, #0
    8484:	613b      	str	r3, [r7, #16]
    8486:	4b18      	ldr	r3, [pc, #96]	; (84e8 <HAL_UART_MspInit+0x88>)
    8488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    848a:	4a17      	ldr	r2, [pc, #92]	; (84e8 <HAL_UART_MspInit+0x88>)
    848c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    8490:	6413      	str	r3, [r2, #64]	; 0x40
    8492:	4b15      	ldr	r3, [pc, #84]	; (84e8 <HAL_UART_MspInit+0x88>)
    8494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    849a:	613b      	str	r3, [r7, #16]
    849c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
    849e:	2300      	movs	r3, #0
    84a0:	60fb      	str	r3, [r7, #12]
    84a2:	4b11      	ldr	r3, [pc, #68]	; (84e8 <HAL_UART_MspInit+0x88>)
    84a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    84a6:	4a10      	ldr	r2, [pc, #64]	; (84e8 <HAL_UART_MspInit+0x88>)
    84a8:	f043 0301 	orr.w	r3, r3, #1
    84ac:	6313      	str	r3, [r2, #48]	; 0x30
    84ae:	4b0e      	ldr	r3, [pc, #56]	; (84e8 <HAL_UART_MspInit+0x88>)
    84b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    84b2:	f003 0301 	and.w	r3, r3, #1
    84b6:	60fb      	str	r3, [r7, #12]
    84b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    84ba:	230c      	movs	r3, #12
    84bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    84be:	2302      	movs	r3, #2
    84c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    84c2:	2300      	movs	r3, #0
    84c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    84c6:	2300      	movs	r3, #0
    84c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    84ca:	2307      	movs	r3, #7
    84cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
    84ce:	f107 0314 	add.w	r3, r7, #20
    84d2:	4619      	mov	r1, r3
    84d4:	4805      	ldr	r0, [pc, #20]	; (84ec <HAL_UART_MspInit+0x8c>)
    84d6:	f000 f995 	bl	8804 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
    84da:	bf00      	nop
    84dc:	3728      	adds	r7, #40	; 0x28
    84de:	46bd      	mov	sp, r7
    84e0:	bd80      	pop	{r7, pc}
    84e2:	bf00      	nop
    84e4:	40004400 	.word	0x40004400
    84e8:	40023800 	.word	0x40023800
    84ec:	40020000 	.word	0x40020000

000084f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
    84f0:	b580      	push	{r7, lr}
    84f2:	b08c      	sub	sp, #48	; 0x30
    84f4:	af00      	add	r7, sp, #0
    84f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
    84f8:	2300      	movs	r3, #0
    84fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
    84fc:	2300      	movs	r3, #0
    84fe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
    8500:	2200      	movs	r2, #0
    8502:	6879      	ldr	r1, [r7, #4]
    8504:	2019      	movs	r0, #25
    8506:	f000 f953 	bl	87b0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
    850a:	2019      	movs	r0, #25
    850c:	f000 f96c 	bl	87e8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
    8510:	2300      	movs	r3, #0
    8512:	60fb      	str	r3, [r7, #12]
    8514:	4b1e      	ldr	r3, [pc, #120]	; (8590 <HAL_InitTick+0xa0>)
    8516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    8518:	4a1d      	ldr	r2, [pc, #116]	; (8590 <HAL_InitTick+0xa0>)
    851a:	f043 0301 	orr.w	r3, r3, #1
    851e:	6453      	str	r3, [r2, #68]	; 0x44
    8520:	4b1b      	ldr	r3, [pc, #108]	; (8590 <HAL_InitTick+0xa0>)
    8522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    8524:	f003 0301 	and.w	r3, r3, #1
    8528:	60fb      	str	r3, [r7, #12]
    852a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
    852c:	f107 0210 	add.w	r2, r7, #16
    8530:	f107 0314 	add.w	r3, r7, #20
    8534:	4611      	mov	r1, r2
    8536:	4618      	mov	r0, r3
    8538:	f000 ff7c 	bl	9434 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
    853c:	f000 ff66 	bl	940c <HAL_RCC_GetPCLK2Freq>
    8540:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
    8542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8544:	4a13      	ldr	r2, [pc, #76]	; (8594 <HAL_InitTick+0xa4>)
    8546:	fba2 2303 	umull	r2, r3, r2, r3
    854a:	0c9b      	lsrs	r3, r3, #18
    854c:	3b01      	subs	r3, #1
    854e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
    8550:	4b11      	ldr	r3, [pc, #68]	; (8598 <HAL_InitTick+0xa8>)
    8552:	4a12      	ldr	r2, [pc, #72]	; (859c <HAL_InitTick+0xac>)
    8554:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
    8556:	4b10      	ldr	r3, [pc, #64]	; (8598 <HAL_InitTick+0xa8>)
    8558:	f240 32e7 	movw	r2, #999	; 0x3e7
    855c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
    855e:	4a0e      	ldr	r2, [pc, #56]	; (8598 <HAL_InitTick+0xa8>)
    8560:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8562:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
    8564:	4b0c      	ldr	r3, [pc, #48]	; (8598 <HAL_InitTick+0xa8>)
    8566:	2200      	movs	r2, #0
    8568:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
    856a:	4b0b      	ldr	r3, [pc, #44]	; (8598 <HAL_InitTick+0xa8>)
    856c:	2200      	movs	r2, #0
    856e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
    8570:	4809      	ldr	r0, [pc, #36]	; (8598 <HAL_InitTick+0xa8>)
    8572:	f000 ff91 	bl	9498 <HAL_TIM_Base_Init>
    8576:	4603      	mov	r3, r0
    8578:	2b00      	cmp	r3, #0
    857a:	d104      	bne.n	8586 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
    857c:	4806      	ldr	r0, [pc, #24]	; (8598 <HAL_InitTick+0xa8>)
    857e:	f000 ffc0 	bl	9502 <HAL_TIM_Base_Start_IT>
    8582:	4603      	mov	r3, r0
    8584:	e000      	b.n	8588 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
    8586:	2301      	movs	r3, #1
}
    8588:	4618      	mov	r0, r3
    858a:	3730      	adds	r7, #48	; 0x30
    858c:	46bd      	mov	sp, r7
    858e:	bd80      	pop	{r7, pc}
    8590:	40023800 	.word	0x40023800
    8594:	431bde83 	.word	0x431bde83
    8598:	0001a378 	.word	0x0001a378
    859c:	40010000 	.word	0x40010000

000085a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
    85a0:	b580      	push	{r7, lr}
    85a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
    85a4:	4b0e      	ldr	r3, [pc, #56]	; (85e0 <HAL_Init+0x40>)
    85a6:	681b      	ldr	r3, [r3, #0]
    85a8:	4a0d      	ldr	r2, [pc, #52]	; (85e0 <HAL_Init+0x40>)
    85aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    85ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
    85b0:	4b0b      	ldr	r3, [pc, #44]	; (85e0 <HAL_Init+0x40>)
    85b2:	681b      	ldr	r3, [r3, #0]
    85b4:	4a0a      	ldr	r2, [pc, #40]	; (85e0 <HAL_Init+0x40>)
    85b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    85ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
    85bc:	4b08      	ldr	r3, [pc, #32]	; (85e0 <HAL_Init+0x40>)
    85be:	681b      	ldr	r3, [r3, #0]
    85c0:	4a07      	ldr	r2, [pc, #28]	; (85e0 <HAL_Init+0x40>)
    85c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    85c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
    85c8:	2003      	movs	r0, #3
    85ca:	f000 f8e6 	bl	879a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
    85ce:	2000      	movs	r0, #0
    85d0:	f7ff ff8e 	bl	84f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
    85d4:	f7ff ff1c 	bl	8410 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
    85d8:	2300      	movs	r3, #0
}
    85da:	4618      	mov	r0, r3
    85dc:	bd80      	pop	{r7, pc}
    85de:	bf00      	nop
    85e0:	40023c00 	.word	0x40023c00

000085e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
    85e4:	b480      	push	{r7}
    85e6:	af00      	add	r7, sp, #0
  return uwTick;
    85e8:	4b03      	ldr	r3, [pc, #12]	; (85f8 <HAL_GetTick+0x14>)
    85ea:	681b      	ldr	r3, [r3, #0]
}
    85ec:	4618      	mov	r0, r3
    85ee:	46bd      	mov	sp, r7
    85f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    85f4:	4770      	bx	lr
    85f6:	bf00      	nop
    85f8:	0001a3b8 	.word	0x0001a3b8

000085fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
    85fc:	b580      	push	{r7, lr}
    85fe:	b084      	sub	sp, #16
    8600:	af00      	add	r7, sp, #0
    8602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
    8604:	f7ff ffee 	bl	85e4 <HAL_GetTick>
    8608:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
    860a:	687b      	ldr	r3, [r7, #4]
    860c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
    860e:	68fb      	ldr	r3, [r7, #12]
    8610:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    8614:	d005      	beq.n	8622 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
    8616:	4b09      	ldr	r3, [pc, #36]	; (863c <HAL_Delay+0x40>)
    8618:	781b      	ldrb	r3, [r3, #0]
    861a:	461a      	mov	r2, r3
    861c:	68fb      	ldr	r3, [r7, #12]
    861e:	4413      	add	r3, r2
    8620:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
    8622:	bf00      	nop
    8624:	f7ff ffde 	bl	85e4 <HAL_GetTick>
    8628:	4602      	mov	r2, r0
    862a:	68bb      	ldr	r3, [r7, #8]
    862c:	1ad3      	subs	r3, r2, r3
    862e:	68fa      	ldr	r2, [r7, #12]
    8630:	429a      	cmp	r2, r3
    8632:	d8f7      	bhi.n	8624 <HAL_Delay+0x28>
  {
  }
}
    8634:	bf00      	nop
    8636:	3710      	adds	r7, #16
    8638:	46bd      	mov	sp, r7
    863a:	bd80      	pop	{r7, pc}
    863c:	0001a250 	.word	0x0001a250

00008640 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
    8640:	b480      	push	{r7}
    8642:	b085      	sub	sp, #20
    8644:	af00      	add	r7, sp, #0
    8646:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
    8648:	687b      	ldr	r3, [r7, #4]
    864a:	f003 0307 	and.w	r3, r3, #7
    864e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
    8650:	4b0c      	ldr	r3, [pc, #48]	; (8684 <__NVIC_SetPriorityGrouping+0x44>)
    8652:	68db      	ldr	r3, [r3, #12]
    8654:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
    8656:	68ba      	ldr	r2, [r7, #8]
    8658:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
    865c:	4013      	ands	r3, r2
    865e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
    8660:	68fb      	ldr	r3, [r7, #12]
    8662:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
    8664:	68bb      	ldr	r3, [r7, #8]
    8666:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
    8668:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    866c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    8670:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
    8672:	4a04      	ldr	r2, [pc, #16]	; (8684 <__NVIC_SetPriorityGrouping+0x44>)
    8674:	68bb      	ldr	r3, [r7, #8]
    8676:	60d3      	str	r3, [r2, #12]
}
    8678:	bf00      	nop
    867a:	3714      	adds	r7, #20
    867c:	46bd      	mov	sp, r7
    867e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8682:	4770      	bx	lr
    8684:	e000ed00 	.word	0xe000ed00

00008688 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
    8688:	b480      	push	{r7}
    868a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
    868c:	4b04      	ldr	r3, [pc, #16]	; (86a0 <__NVIC_GetPriorityGrouping+0x18>)
    868e:	68db      	ldr	r3, [r3, #12]
    8690:	0a1b      	lsrs	r3, r3, #8
    8692:	f003 0307 	and.w	r3, r3, #7
}
    8696:	4618      	mov	r0, r3
    8698:	46bd      	mov	sp, r7
    869a:	f85d 7b04 	ldr.w	r7, [sp], #4
    869e:	4770      	bx	lr
    86a0:	e000ed00 	.word	0xe000ed00

000086a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    86a4:	b480      	push	{r7}
    86a6:	b083      	sub	sp, #12
    86a8:	af00      	add	r7, sp, #0
    86aa:	4603      	mov	r3, r0
    86ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    86ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
    86b2:	2b00      	cmp	r3, #0
    86b4:	db0b      	blt.n	86ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    86b6:	79fb      	ldrb	r3, [r7, #7]
    86b8:	f003 021f 	and.w	r2, r3, #31
    86bc:	4907      	ldr	r1, [pc, #28]	; (86dc <__NVIC_EnableIRQ+0x38>)
    86be:	f997 3007 	ldrsb.w	r3, [r7, #7]
    86c2:	095b      	lsrs	r3, r3, #5
    86c4:	2001      	movs	r0, #1
    86c6:	fa00 f202 	lsl.w	r2, r0, r2
    86ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    86ce:	bf00      	nop
    86d0:	370c      	adds	r7, #12
    86d2:	46bd      	mov	sp, r7
    86d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    86d8:	4770      	bx	lr
    86da:	bf00      	nop
    86dc:	e000e100 	.word	0xe000e100

000086e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    86e0:	b480      	push	{r7}
    86e2:	b083      	sub	sp, #12
    86e4:	af00      	add	r7, sp, #0
    86e6:	4603      	mov	r3, r0
    86e8:	6039      	str	r1, [r7, #0]
    86ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    86ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
    86f0:	2b00      	cmp	r3, #0
    86f2:	db0a      	blt.n	870a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    86f4:	683b      	ldr	r3, [r7, #0]
    86f6:	b2da      	uxtb	r2, r3
    86f8:	490c      	ldr	r1, [pc, #48]	; (872c <__NVIC_SetPriority+0x4c>)
    86fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
    86fe:	0112      	lsls	r2, r2, #4
    8700:	b2d2      	uxtb	r2, r2
    8702:	440b      	add	r3, r1
    8704:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
    8708:	e00a      	b.n	8720 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    870a:	683b      	ldr	r3, [r7, #0]
    870c:	b2da      	uxtb	r2, r3
    870e:	4908      	ldr	r1, [pc, #32]	; (8730 <__NVIC_SetPriority+0x50>)
    8710:	79fb      	ldrb	r3, [r7, #7]
    8712:	f003 030f 	and.w	r3, r3, #15
    8716:	3b04      	subs	r3, #4
    8718:	0112      	lsls	r2, r2, #4
    871a:	b2d2      	uxtb	r2, r2
    871c:	440b      	add	r3, r1
    871e:	761a      	strb	r2, [r3, #24]
}
    8720:	bf00      	nop
    8722:	370c      	adds	r7, #12
    8724:	46bd      	mov	sp, r7
    8726:	f85d 7b04 	ldr.w	r7, [sp], #4
    872a:	4770      	bx	lr
    872c:	e000e100 	.word	0xe000e100
    8730:	e000ed00 	.word	0xe000ed00

00008734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
    8734:	b480      	push	{r7}
    8736:	b089      	sub	sp, #36	; 0x24
    8738:	af00      	add	r7, sp, #0
    873a:	60f8      	str	r0, [r7, #12]
    873c:	60b9      	str	r1, [r7, #8]
    873e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
    8740:	68fb      	ldr	r3, [r7, #12]
    8742:	f003 0307 	and.w	r3, r3, #7
    8746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
    8748:	69fb      	ldr	r3, [r7, #28]
    874a:	f1c3 0307 	rsb	r3, r3, #7
    874e:	2b04      	cmp	r3, #4
    8750:	bf28      	it	cs
    8752:	2304      	movcs	r3, #4
    8754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
    8756:	69fb      	ldr	r3, [r7, #28]
    8758:	3304      	adds	r3, #4
    875a:	2b06      	cmp	r3, #6
    875c:	d902      	bls.n	8764 <NVIC_EncodePriority+0x30>
    875e:	69fb      	ldr	r3, [r7, #28]
    8760:	3b03      	subs	r3, #3
    8762:	e000      	b.n	8766 <NVIC_EncodePriority+0x32>
    8764:	2300      	movs	r3, #0
    8766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
    8768:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    876c:	69bb      	ldr	r3, [r7, #24]
    876e:	fa02 f303 	lsl.w	r3, r2, r3
    8772:	43da      	mvns	r2, r3
    8774:	68bb      	ldr	r3, [r7, #8]
    8776:	401a      	ands	r2, r3
    8778:	697b      	ldr	r3, [r7, #20]
    877a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
    877c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8780:	697b      	ldr	r3, [r7, #20]
    8782:	fa01 f303 	lsl.w	r3, r1, r3
    8786:	43d9      	mvns	r1, r3
    8788:	687b      	ldr	r3, [r7, #4]
    878a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
    878c:	4313      	orrs	r3, r2
         );
}
    878e:	4618      	mov	r0, r3
    8790:	3724      	adds	r7, #36	; 0x24
    8792:	46bd      	mov	sp, r7
    8794:	f85d 7b04 	ldr.w	r7, [sp], #4
    8798:	4770      	bx	lr

0000879a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
    879a:	b580      	push	{r7, lr}
    879c:	b082      	sub	sp, #8
    879e:	af00      	add	r7, sp, #0
    87a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
    87a2:	6878      	ldr	r0, [r7, #4]
    87a4:	f7ff ff4c 	bl	8640 <__NVIC_SetPriorityGrouping>
}
    87a8:	bf00      	nop
    87aa:	3708      	adds	r7, #8
    87ac:	46bd      	mov	sp, r7
    87ae:	bd80      	pop	{r7, pc}

000087b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
    87b0:	b580      	push	{r7, lr}
    87b2:	b086      	sub	sp, #24
    87b4:	af00      	add	r7, sp, #0
    87b6:	4603      	mov	r3, r0
    87b8:	60b9      	str	r1, [r7, #8]
    87ba:	607a      	str	r2, [r7, #4]
    87bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
    87be:	2300      	movs	r3, #0
    87c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
    87c2:	f7ff ff61 	bl	8688 <__NVIC_GetPriorityGrouping>
    87c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
    87c8:	687a      	ldr	r2, [r7, #4]
    87ca:	68b9      	ldr	r1, [r7, #8]
    87cc:	6978      	ldr	r0, [r7, #20]
    87ce:	f7ff ffb1 	bl	8734 <NVIC_EncodePriority>
    87d2:	4602      	mov	r2, r0
    87d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    87d8:	4611      	mov	r1, r2
    87da:	4618      	mov	r0, r3
    87dc:	f7ff ff80 	bl	86e0 <__NVIC_SetPriority>
}
    87e0:	bf00      	nop
    87e2:	3718      	adds	r7, #24
    87e4:	46bd      	mov	sp, r7
    87e6:	bd80      	pop	{r7, pc}

000087e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
    87e8:	b580      	push	{r7, lr}
    87ea:	b082      	sub	sp, #8
    87ec:	af00      	add	r7, sp, #0
    87ee:	4603      	mov	r3, r0
    87f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
    87f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
    87f6:	4618      	mov	r0, r3
    87f8:	f7ff ff54 	bl	86a4 <__NVIC_EnableIRQ>
}
    87fc:	bf00      	nop
    87fe:	3708      	adds	r7, #8
    8800:	46bd      	mov	sp, r7
    8802:	bd80      	pop	{r7, pc}

00008804 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
    8804:	b480      	push	{r7}
    8806:	b089      	sub	sp, #36	; 0x24
    8808:	af00      	add	r7, sp, #0
    880a:	6078      	str	r0, [r7, #4]
    880c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
    880e:	2300      	movs	r3, #0
    8810:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
    8812:	2300      	movs	r3, #0
    8814:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
    8816:	2300      	movs	r3, #0
    8818:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
    881a:	2300      	movs	r3, #0
    881c:	61fb      	str	r3, [r7, #28]
    881e:	e159      	b.n	8ad4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    8820:	2201      	movs	r2, #1
    8822:	69fb      	ldr	r3, [r7, #28]
    8824:	fa02 f303 	lsl.w	r3, r2, r3
    8828:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
    882a:	683b      	ldr	r3, [r7, #0]
    882c:	681b      	ldr	r3, [r3, #0]
    882e:	697a      	ldr	r2, [r7, #20]
    8830:	4013      	ands	r3, r2
    8832:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
    8834:	693a      	ldr	r2, [r7, #16]
    8836:	697b      	ldr	r3, [r7, #20]
    8838:	429a      	cmp	r2, r3
    883a:	f040 8148 	bne.w	8ace <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
    883e:	683b      	ldr	r3, [r7, #0]
    8840:	685b      	ldr	r3, [r3, #4]
    8842:	2b01      	cmp	r3, #1
    8844:	d00b      	beq.n	885e <HAL_GPIO_Init+0x5a>
    8846:	683b      	ldr	r3, [r7, #0]
    8848:	685b      	ldr	r3, [r3, #4]
    884a:	2b02      	cmp	r3, #2
    884c:	d007      	beq.n	885e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
    884e:	683b      	ldr	r3, [r7, #0]
    8850:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
    8852:	2b11      	cmp	r3, #17
    8854:	d003      	beq.n	885e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
    8856:	683b      	ldr	r3, [r7, #0]
    8858:	685b      	ldr	r3, [r3, #4]
    885a:	2b12      	cmp	r3, #18
    885c:	d130      	bne.n	88c0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
    885e:	687b      	ldr	r3, [r7, #4]
    8860:	689b      	ldr	r3, [r3, #8]
    8862:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
    8864:	69fb      	ldr	r3, [r7, #28]
    8866:	005b      	lsls	r3, r3, #1
    8868:	2203      	movs	r2, #3
    886a:	fa02 f303 	lsl.w	r3, r2, r3
    886e:	43db      	mvns	r3, r3
    8870:	69ba      	ldr	r2, [r7, #24]
    8872:	4013      	ands	r3, r2
    8874:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
    8876:	683b      	ldr	r3, [r7, #0]
    8878:	68da      	ldr	r2, [r3, #12]
    887a:	69fb      	ldr	r3, [r7, #28]
    887c:	005b      	lsls	r3, r3, #1
    887e:	fa02 f303 	lsl.w	r3, r2, r3
    8882:	69ba      	ldr	r2, [r7, #24]
    8884:	4313      	orrs	r3, r2
    8886:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
    8888:	687b      	ldr	r3, [r7, #4]
    888a:	69ba      	ldr	r2, [r7, #24]
    888c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
    888e:	687b      	ldr	r3, [r7, #4]
    8890:	685b      	ldr	r3, [r3, #4]
    8892:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
    8894:	2201      	movs	r2, #1
    8896:	69fb      	ldr	r3, [r7, #28]
    8898:	fa02 f303 	lsl.w	r3, r2, r3
    889c:	43db      	mvns	r3, r3
    889e:	69ba      	ldr	r2, [r7, #24]
    88a0:	4013      	ands	r3, r2
    88a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
    88a4:	683b      	ldr	r3, [r7, #0]
    88a6:	685b      	ldr	r3, [r3, #4]
    88a8:	091b      	lsrs	r3, r3, #4
    88aa:	f003 0201 	and.w	r2, r3, #1
    88ae:	69fb      	ldr	r3, [r7, #28]
    88b0:	fa02 f303 	lsl.w	r3, r2, r3
    88b4:	69ba      	ldr	r2, [r7, #24]
    88b6:	4313      	orrs	r3, r2
    88b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
    88ba:	687b      	ldr	r3, [r7, #4]
    88bc:	69ba      	ldr	r2, [r7, #24]
    88be:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
    88c0:	687b      	ldr	r3, [r7, #4]
    88c2:	68db      	ldr	r3, [r3, #12]
    88c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
    88c6:	69fb      	ldr	r3, [r7, #28]
    88c8:	005b      	lsls	r3, r3, #1
    88ca:	2203      	movs	r2, #3
    88cc:	fa02 f303 	lsl.w	r3, r2, r3
    88d0:	43db      	mvns	r3, r3
    88d2:	69ba      	ldr	r2, [r7, #24]
    88d4:	4013      	ands	r3, r2
    88d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
    88d8:	683b      	ldr	r3, [r7, #0]
    88da:	689a      	ldr	r2, [r3, #8]
    88dc:	69fb      	ldr	r3, [r7, #28]
    88de:	005b      	lsls	r3, r3, #1
    88e0:	fa02 f303 	lsl.w	r3, r2, r3
    88e4:	69ba      	ldr	r2, [r7, #24]
    88e6:	4313      	orrs	r3, r2
    88e8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
    88ea:	687b      	ldr	r3, [r7, #4]
    88ec:	69ba      	ldr	r2, [r7, #24]
    88ee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
    88f0:	683b      	ldr	r3, [r7, #0]
    88f2:	685b      	ldr	r3, [r3, #4]
    88f4:	2b02      	cmp	r3, #2
    88f6:	d003      	beq.n	8900 <HAL_GPIO_Init+0xfc>
    88f8:	683b      	ldr	r3, [r7, #0]
    88fa:	685b      	ldr	r3, [r3, #4]
    88fc:	2b12      	cmp	r3, #18
    88fe:	d123      	bne.n	8948 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
    8900:	69fb      	ldr	r3, [r7, #28]
    8902:	08da      	lsrs	r2, r3, #3
    8904:	687b      	ldr	r3, [r7, #4]
    8906:	3208      	adds	r2, #8
    8908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    890c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
    890e:	69fb      	ldr	r3, [r7, #28]
    8910:	f003 0307 	and.w	r3, r3, #7
    8914:	009b      	lsls	r3, r3, #2
    8916:	220f      	movs	r2, #15
    8918:	fa02 f303 	lsl.w	r3, r2, r3
    891c:	43db      	mvns	r3, r3
    891e:	69ba      	ldr	r2, [r7, #24]
    8920:	4013      	ands	r3, r2
    8922:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
    8924:	683b      	ldr	r3, [r7, #0]
    8926:	691a      	ldr	r2, [r3, #16]
    8928:	69fb      	ldr	r3, [r7, #28]
    892a:	f003 0307 	and.w	r3, r3, #7
    892e:	009b      	lsls	r3, r3, #2
    8930:	fa02 f303 	lsl.w	r3, r2, r3
    8934:	69ba      	ldr	r2, [r7, #24]
    8936:	4313      	orrs	r3, r2
    8938:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
    893a:	69fb      	ldr	r3, [r7, #28]
    893c:	08da      	lsrs	r2, r3, #3
    893e:	687b      	ldr	r3, [r7, #4]
    8940:	3208      	adds	r2, #8
    8942:	69b9      	ldr	r1, [r7, #24]
    8944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
    8948:	687b      	ldr	r3, [r7, #4]
    894a:	681b      	ldr	r3, [r3, #0]
    894c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
    894e:	69fb      	ldr	r3, [r7, #28]
    8950:	005b      	lsls	r3, r3, #1
    8952:	2203      	movs	r2, #3
    8954:	fa02 f303 	lsl.w	r3, r2, r3
    8958:	43db      	mvns	r3, r3
    895a:	69ba      	ldr	r2, [r7, #24]
    895c:	4013      	ands	r3, r2
    895e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
    8960:	683b      	ldr	r3, [r7, #0]
    8962:	685b      	ldr	r3, [r3, #4]
    8964:	f003 0203 	and.w	r2, r3, #3
    8968:	69fb      	ldr	r3, [r7, #28]
    896a:	005b      	lsls	r3, r3, #1
    896c:	fa02 f303 	lsl.w	r3, r2, r3
    8970:	69ba      	ldr	r2, [r7, #24]
    8972:	4313      	orrs	r3, r2
    8974:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
    8976:	687b      	ldr	r3, [r7, #4]
    8978:	69ba      	ldr	r2, [r7, #24]
    897a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
    897c:	683b      	ldr	r3, [r7, #0]
    897e:	685b      	ldr	r3, [r3, #4]
    8980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    8984:	2b00      	cmp	r3, #0
    8986:	f000 80a2 	beq.w	8ace <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
    898a:	2300      	movs	r3, #0
    898c:	60fb      	str	r3, [r7, #12]
    898e:	4b56      	ldr	r3, [pc, #344]	; (8ae8 <HAL_GPIO_Init+0x2e4>)
    8990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    8992:	4a55      	ldr	r2, [pc, #340]	; (8ae8 <HAL_GPIO_Init+0x2e4>)
    8994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    8998:	6453      	str	r3, [r2, #68]	; 0x44
    899a:	4b53      	ldr	r3, [pc, #332]	; (8ae8 <HAL_GPIO_Init+0x2e4>)
    899c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    899e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    89a2:	60fb      	str	r3, [r7, #12]
    89a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
    89a6:	4a51      	ldr	r2, [pc, #324]	; (8aec <HAL_GPIO_Init+0x2e8>)
    89a8:	69fb      	ldr	r3, [r7, #28]
    89aa:	089b      	lsrs	r3, r3, #2
    89ac:	3302      	adds	r3, #2
    89ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    89b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
    89b4:	69fb      	ldr	r3, [r7, #28]
    89b6:	f003 0303 	and.w	r3, r3, #3
    89ba:	009b      	lsls	r3, r3, #2
    89bc:	220f      	movs	r2, #15
    89be:	fa02 f303 	lsl.w	r3, r2, r3
    89c2:	43db      	mvns	r3, r3
    89c4:	69ba      	ldr	r2, [r7, #24]
    89c6:	4013      	ands	r3, r2
    89c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
    89ca:	687b      	ldr	r3, [r7, #4]
    89cc:	4a48      	ldr	r2, [pc, #288]	; (8af0 <HAL_GPIO_Init+0x2ec>)
    89ce:	4293      	cmp	r3, r2
    89d0:	d019      	beq.n	8a06 <HAL_GPIO_Init+0x202>
    89d2:	687b      	ldr	r3, [r7, #4]
    89d4:	4a47      	ldr	r2, [pc, #284]	; (8af4 <HAL_GPIO_Init+0x2f0>)
    89d6:	4293      	cmp	r3, r2
    89d8:	d013      	beq.n	8a02 <HAL_GPIO_Init+0x1fe>
    89da:	687b      	ldr	r3, [r7, #4]
    89dc:	4a46      	ldr	r2, [pc, #280]	; (8af8 <HAL_GPIO_Init+0x2f4>)
    89de:	4293      	cmp	r3, r2
    89e0:	d00d      	beq.n	89fe <HAL_GPIO_Init+0x1fa>
    89e2:	687b      	ldr	r3, [r7, #4]
    89e4:	4a45      	ldr	r2, [pc, #276]	; (8afc <HAL_GPIO_Init+0x2f8>)
    89e6:	4293      	cmp	r3, r2
    89e8:	d007      	beq.n	89fa <HAL_GPIO_Init+0x1f6>
    89ea:	687b      	ldr	r3, [r7, #4]
    89ec:	4a44      	ldr	r2, [pc, #272]	; (8b00 <HAL_GPIO_Init+0x2fc>)
    89ee:	4293      	cmp	r3, r2
    89f0:	d101      	bne.n	89f6 <HAL_GPIO_Init+0x1f2>
    89f2:	2304      	movs	r3, #4
    89f4:	e008      	b.n	8a08 <HAL_GPIO_Init+0x204>
    89f6:	2307      	movs	r3, #7
    89f8:	e006      	b.n	8a08 <HAL_GPIO_Init+0x204>
    89fa:	2303      	movs	r3, #3
    89fc:	e004      	b.n	8a08 <HAL_GPIO_Init+0x204>
    89fe:	2302      	movs	r3, #2
    8a00:	e002      	b.n	8a08 <HAL_GPIO_Init+0x204>
    8a02:	2301      	movs	r3, #1
    8a04:	e000      	b.n	8a08 <HAL_GPIO_Init+0x204>
    8a06:	2300      	movs	r3, #0
    8a08:	69fa      	ldr	r2, [r7, #28]
    8a0a:	f002 0203 	and.w	r2, r2, #3
    8a0e:	0092      	lsls	r2, r2, #2
    8a10:	4093      	lsls	r3, r2
    8a12:	69ba      	ldr	r2, [r7, #24]
    8a14:	4313      	orrs	r3, r2
    8a16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
    8a18:	4934      	ldr	r1, [pc, #208]	; (8aec <HAL_GPIO_Init+0x2e8>)
    8a1a:	69fb      	ldr	r3, [r7, #28]
    8a1c:	089b      	lsrs	r3, r3, #2
    8a1e:	3302      	adds	r3, #2
    8a20:	69ba      	ldr	r2, [r7, #24]
    8a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
    8a26:	4b37      	ldr	r3, [pc, #220]	; (8b04 <HAL_GPIO_Init+0x300>)
    8a28:	681b      	ldr	r3, [r3, #0]
    8a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
    8a2c:	693b      	ldr	r3, [r7, #16]
    8a2e:	43db      	mvns	r3, r3
    8a30:	69ba      	ldr	r2, [r7, #24]
    8a32:	4013      	ands	r3, r2
    8a34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
    8a36:	683b      	ldr	r3, [r7, #0]
    8a38:	685b      	ldr	r3, [r3, #4]
    8a3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    8a3e:	2b00      	cmp	r3, #0
    8a40:	d003      	beq.n	8a4a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
    8a42:	69ba      	ldr	r2, [r7, #24]
    8a44:	693b      	ldr	r3, [r7, #16]
    8a46:	4313      	orrs	r3, r2
    8a48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
    8a4a:	4a2e      	ldr	r2, [pc, #184]	; (8b04 <HAL_GPIO_Init+0x300>)
    8a4c:	69bb      	ldr	r3, [r7, #24]
    8a4e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
    8a50:	4b2c      	ldr	r3, [pc, #176]	; (8b04 <HAL_GPIO_Init+0x300>)
    8a52:	685b      	ldr	r3, [r3, #4]
    8a54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
    8a56:	693b      	ldr	r3, [r7, #16]
    8a58:	43db      	mvns	r3, r3
    8a5a:	69ba      	ldr	r2, [r7, #24]
    8a5c:	4013      	ands	r3, r2
    8a5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
    8a60:	683b      	ldr	r3, [r7, #0]
    8a62:	685b      	ldr	r3, [r3, #4]
    8a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    8a68:	2b00      	cmp	r3, #0
    8a6a:	d003      	beq.n	8a74 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
    8a6c:	69ba      	ldr	r2, [r7, #24]
    8a6e:	693b      	ldr	r3, [r7, #16]
    8a70:	4313      	orrs	r3, r2
    8a72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
    8a74:	4a23      	ldr	r2, [pc, #140]	; (8b04 <HAL_GPIO_Init+0x300>)
    8a76:	69bb      	ldr	r3, [r7, #24]
    8a78:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
    8a7a:	4b22      	ldr	r3, [pc, #136]	; (8b04 <HAL_GPIO_Init+0x300>)
    8a7c:	689b      	ldr	r3, [r3, #8]
    8a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
    8a80:	693b      	ldr	r3, [r7, #16]
    8a82:	43db      	mvns	r3, r3
    8a84:	69ba      	ldr	r2, [r7, #24]
    8a86:	4013      	ands	r3, r2
    8a88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
    8a8a:	683b      	ldr	r3, [r7, #0]
    8a8c:	685b      	ldr	r3, [r3, #4]
    8a8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    8a92:	2b00      	cmp	r3, #0
    8a94:	d003      	beq.n	8a9e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
    8a96:	69ba      	ldr	r2, [r7, #24]
    8a98:	693b      	ldr	r3, [r7, #16]
    8a9a:	4313      	orrs	r3, r2
    8a9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
    8a9e:	4a19      	ldr	r2, [pc, #100]	; (8b04 <HAL_GPIO_Init+0x300>)
    8aa0:	69bb      	ldr	r3, [r7, #24]
    8aa2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
    8aa4:	4b17      	ldr	r3, [pc, #92]	; (8b04 <HAL_GPIO_Init+0x300>)
    8aa6:	68db      	ldr	r3, [r3, #12]
    8aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
    8aaa:	693b      	ldr	r3, [r7, #16]
    8aac:	43db      	mvns	r3, r3
    8aae:	69ba      	ldr	r2, [r7, #24]
    8ab0:	4013      	ands	r3, r2
    8ab2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
    8ab4:	683b      	ldr	r3, [r7, #0]
    8ab6:	685b      	ldr	r3, [r3, #4]
    8ab8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    8abc:	2b00      	cmp	r3, #0
    8abe:	d003      	beq.n	8ac8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
    8ac0:	69ba      	ldr	r2, [r7, #24]
    8ac2:	693b      	ldr	r3, [r7, #16]
    8ac4:	4313      	orrs	r3, r2
    8ac6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
    8ac8:	4a0e      	ldr	r2, [pc, #56]	; (8b04 <HAL_GPIO_Init+0x300>)
    8aca:	69bb      	ldr	r3, [r7, #24]
    8acc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
    8ace:	69fb      	ldr	r3, [r7, #28]
    8ad0:	3301      	adds	r3, #1
    8ad2:	61fb      	str	r3, [r7, #28]
    8ad4:	69fb      	ldr	r3, [r7, #28]
    8ad6:	2b0f      	cmp	r3, #15
    8ad8:	f67f aea2 	bls.w	8820 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
    8adc:	bf00      	nop
    8ade:	3724      	adds	r7, #36	; 0x24
    8ae0:	46bd      	mov	sp, r7
    8ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ae6:	4770      	bx	lr
    8ae8:	40023800 	.word	0x40023800
    8aec:	40013800 	.word	0x40013800
    8af0:	40020000 	.word	0x40020000
    8af4:	40020400 	.word	0x40020400
    8af8:	40020800 	.word	0x40020800
    8afc:	40020c00 	.word	0x40020c00
    8b00:	40021000 	.word	0x40021000
    8b04:	40013c00 	.word	0x40013c00

00008b08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
    8b08:	b480      	push	{r7}
    8b0a:	b083      	sub	sp, #12
    8b0c:	af00      	add	r7, sp, #0
    8b0e:	6078      	str	r0, [r7, #4]
    8b10:	460b      	mov	r3, r1
    8b12:	807b      	strh	r3, [r7, #2]
    8b14:	4613      	mov	r3, r2
    8b16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
    8b18:	787b      	ldrb	r3, [r7, #1]
    8b1a:	2b00      	cmp	r3, #0
    8b1c:	d003      	beq.n	8b26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    8b1e:	887a      	ldrh	r2, [r7, #2]
    8b20:	687b      	ldr	r3, [r7, #4]
    8b22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
    8b24:	e003      	b.n	8b2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
    8b26:	887b      	ldrh	r3, [r7, #2]
    8b28:	041a      	lsls	r2, r3, #16
    8b2a:	687b      	ldr	r3, [r7, #4]
    8b2c:	619a      	str	r2, [r3, #24]
}
    8b2e:	bf00      	nop
    8b30:	370c      	adds	r7, #12
    8b32:	46bd      	mov	sp, r7
    8b34:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b38:	4770      	bx	lr

00008b3a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    8b3a:	b480      	push	{r7}
    8b3c:	b083      	sub	sp, #12
    8b3e:	af00      	add	r7, sp, #0
    8b40:	6078      	str	r0, [r7, #4]
    8b42:	460b      	mov	r3, r1
    8b44:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
    8b46:	687b      	ldr	r3, [r7, #4]
    8b48:	695a      	ldr	r2, [r3, #20]
    8b4a:	887b      	ldrh	r3, [r7, #2]
    8b4c:	401a      	ands	r2, r3
    8b4e:	887b      	ldrh	r3, [r7, #2]
    8b50:	429a      	cmp	r2, r3
    8b52:	d104      	bne.n	8b5e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
    8b54:	887b      	ldrh	r3, [r7, #2]
    8b56:	041a      	lsls	r2, r3, #16
    8b58:	687b      	ldr	r3, [r7, #4]
    8b5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
    8b5c:	e002      	b.n	8b64 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
    8b5e:	887a      	ldrh	r2, [r7, #2]
    8b60:	687b      	ldr	r3, [r7, #4]
    8b62:	619a      	str	r2, [r3, #24]
}
    8b64:	bf00      	nop
    8b66:	370c      	adds	r7, #12
    8b68:	46bd      	mov	sp, r7
    8b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b6e:	4770      	bx	lr

00008b70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
    8b70:	b580      	push	{r7, lr}
    8b72:	b086      	sub	sp, #24
    8b74:	af00      	add	r7, sp, #0
    8b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
    8b78:	687b      	ldr	r3, [r7, #4]
    8b7a:	2b00      	cmp	r3, #0
    8b7c:	d101      	bne.n	8b82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
    8b7e:	2301      	movs	r3, #1
    8b80:	e25b      	b.n	903a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
    8b82:	687b      	ldr	r3, [r7, #4]
    8b84:	681b      	ldr	r3, [r3, #0]
    8b86:	f003 0301 	and.w	r3, r3, #1
    8b8a:	2b00      	cmp	r3, #0
    8b8c:	d075      	beq.n	8c7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
    8b8e:	4ba3      	ldr	r3, [pc, #652]	; (8e1c <HAL_RCC_OscConfig+0x2ac>)
    8b90:	689b      	ldr	r3, [r3, #8]
    8b92:	f003 030c 	and.w	r3, r3, #12
    8b96:	2b04      	cmp	r3, #4
    8b98:	d00c      	beq.n	8bb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
    8b9a:	4ba0      	ldr	r3, [pc, #640]	; (8e1c <HAL_RCC_OscConfig+0x2ac>)
    8b9c:	689b      	ldr	r3, [r3, #8]
    8b9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
    8ba2:	2b08      	cmp	r3, #8
    8ba4:	d112      	bne.n	8bcc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
    8ba6:	4b9d      	ldr	r3, [pc, #628]	; (8e1c <HAL_RCC_OscConfig+0x2ac>)
    8ba8:	685b      	ldr	r3, [r3, #4]
    8baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    8bae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    8bb2:	d10b      	bne.n	8bcc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
    8bb4:	4b99      	ldr	r3, [pc, #612]	; (8e1c <HAL_RCC_OscConfig+0x2ac>)
    8bb6:	681b      	ldr	r3, [r3, #0]
    8bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    8bbc:	2b00      	cmp	r3, #0
    8bbe:	d05b      	beq.n	8c78 <HAL_RCC_OscConfig+0x108>
    8bc0:	687b      	ldr	r3, [r7, #4]
    8bc2:	685b      	ldr	r3, [r3, #4]
    8bc4:	2b00      	cmp	r3, #0
    8bc6:	d157      	bne.n	8c78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
    8bc8:	2301      	movs	r3, #1
    8bca:	e236      	b.n	903a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
    8bcc:	687b      	ldr	r3, [r7, #4]
    8bce:	685b      	ldr	r3, [r3, #4]
    8bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    8bd4:	d106      	bne.n	8be4 <HAL_RCC_OscConfig+0x74>
    8bd6:	4b91      	ldr	r3, [pc, #580]	; (8e1c <HAL_RCC_OscConfig+0x2ac>)
    8bd8:	681b      	ldr	r3, [r3, #0]
    8bda:	4a90      	ldr	r2, [pc, #576]	; (8e1c <HAL_RCC_OscConfig+0x2ac>)
    8bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8be0:	6013      	str	r3, [r2, #0]
    8be2:	e01d      	b.n	8c20 <HAL_RCC_OscConfig+0xb0>
    8be4:	687b      	ldr	r3, [r7, #4]
    8be6:	685b      	ldr	r3, [r3, #4]
    8be8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
    8bec:	d10c      	bne.n	8c08 <HAL_RCC_OscConfig+0x98>
    8bee:	4b8b      	ldr	r3, [pc, #556]	; (8e1c <HAL_RCC_OscConfig+0x2ac>)
    8bf0:	681b      	ldr	r3, [r3, #0]
    8bf2:	4a8a      	ldr	r2, [pc, #552]	; (8e1c <HAL_RCC_OscConfig+0x2ac>)
    8bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    8bf8:	6013      	str	r3, [r2, #0]
    8bfa:	4b88      	ldr	r3, [pc, #544]	; (8e1c <HAL_RCC_OscConfig+0x2ac>)
    8bfc:	681b      	ldr	r3, [r3, #0]
    8bfe:	4a87      	ldr	r2, [pc, #540]	; (8e1c <HAL_RCC_OscConfig+0x2ac>)
    8c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8c04:	6013      	str	r3, [r2, #0]
    8c06:	e00b      	b.n	8c20 <HAL_RCC_OscConfig+0xb0>
    8c08:	4b84      	ldr	r3, [pc, #528]	; (8e1c <HAL_RCC_OscConfig+0x2ac>)
    8c0a:	681b      	ldr	r3, [r3, #0]
    8c0c:	4a83      	ldr	r2, [pc, #524]	; (8e1c <HAL_RCC_OscConfig+0x2ac>)
    8c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    8c12:	6013      	str	r3, [r2, #0]
    8c14:	4b81      	ldr	r3, [pc, #516]	; (8e1c <HAL_RCC_OscConfig+0x2ac>)
    8c16:	681b      	ldr	r3, [r3, #0]
    8c18:	4a80      	ldr	r2, [pc, #512]	; (8e1c <HAL_RCC_OscConfig+0x2ac>)
    8c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    8c1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
    8c20:	687b      	ldr	r3, [r7, #4]
    8c22:	685b      	ldr	r3, [r3, #4]
    8c24:	2b00      	cmp	r3, #0
    8c26:	d013      	beq.n	8c50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
    8c28:	f7ff fcdc 	bl	85e4 <HAL_GetTick>
    8c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
    8c2e:	e008      	b.n	8c42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
    8c30:	f7ff fcd8 	bl	85e4 <HAL_GetTick>
    8c34:	4602      	mov	r2, r0
    8c36:	693b      	ldr	r3, [r7, #16]
    8c38:	1ad3      	subs	r3, r2, r3
    8c3a:	2b64      	cmp	r3, #100	; 0x64
    8c3c:	d901      	bls.n	8c42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
    8c3e:	2303      	movs	r3, #3
    8c40:	e1fb      	b.n	903a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
    8c42:	4b76      	ldr	r3, [pc, #472]	; (8e1c <HAL_RCC_OscConfig+0x2ac>)
    8c44:	681b      	ldr	r3, [r3, #0]
    8c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    8c4a:	2b00      	cmp	r3, #0
    8c4c:	d0f0      	beq.n	8c30 <HAL_RCC_OscConfig+0xc0>
    8c4e:	e014      	b.n	8c7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
    8c50:	f7ff fcc8 	bl	85e4 <HAL_GetTick>
    8c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
    8c56:	e008      	b.n	8c6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
    8c58:	f7ff fcc4 	bl	85e4 <HAL_GetTick>
    8c5c:	4602      	mov	r2, r0
    8c5e:	693b      	ldr	r3, [r7, #16]
    8c60:	1ad3      	subs	r3, r2, r3
    8c62:	2b64      	cmp	r3, #100	; 0x64
    8c64:	d901      	bls.n	8c6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
    8c66:	2303      	movs	r3, #3
    8c68:	e1e7      	b.n	903a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
    8c6a:	4b6c      	ldr	r3, [pc, #432]	; (8e1c <HAL_RCC_OscConfig+0x2ac>)
    8c6c:	681b      	ldr	r3, [r3, #0]
    8c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    8c72:	2b00      	cmp	r3, #0
    8c74:	d1f0      	bne.n	8c58 <HAL_RCC_OscConfig+0xe8>
    8c76:	e000      	b.n	8c7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
    8c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
    8c7a:	687b      	ldr	r3, [r7, #4]
    8c7c:	681b      	ldr	r3, [r3, #0]
    8c7e:	f003 0302 	and.w	r3, r3, #2
    8c82:	2b00      	cmp	r3, #0
    8c84:	d063      	beq.n	8d4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
    8c86:	4b65      	ldr	r3, [pc, #404]	; (8e1c <HAL_RCC_OscConfig+0x2ac>)
    8c88:	689b      	ldr	r3, [r3, #8]
    8c8a:	f003 030c 	and.w	r3, r3, #12
    8c8e:	2b00      	cmp	r3, #0
    8c90:	d00b      	beq.n	8caa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    8c92:	4b62      	ldr	r3, [pc, #392]	; (8e1c <HAL_RCC_OscConfig+0x2ac>)
    8c94:	689b      	ldr	r3, [r3, #8]
    8c96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
    8c9a:	2b08      	cmp	r3, #8
    8c9c:	d11c      	bne.n	8cd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    8c9e:	4b5f      	ldr	r3, [pc, #380]	; (8e1c <HAL_RCC_OscConfig+0x2ac>)
    8ca0:	685b      	ldr	r3, [r3, #4]
    8ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    8ca6:	2b00      	cmp	r3, #0
    8ca8:	d116      	bne.n	8cd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
    8caa:	4b5c      	ldr	r3, [pc, #368]	; (8e1c <HAL_RCC_OscConfig+0x2ac>)
    8cac:	681b      	ldr	r3, [r3, #0]
    8cae:	f003 0302 	and.w	r3, r3, #2
    8cb2:	2b00      	cmp	r3, #0
    8cb4:	d005      	beq.n	8cc2 <HAL_RCC_OscConfig+0x152>
    8cb6:	687b      	ldr	r3, [r7, #4]
    8cb8:	68db      	ldr	r3, [r3, #12]
    8cba:	2b01      	cmp	r3, #1
    8cbc:	d001      	beq.n	8cc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
    8cbe:	2301      	movs	r3, #1
    8cc0:	e1bb      	b.n	903a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
    8cc2:	4b56      	ldr	r3, [pc, #344]	; (8e1c <HAL_RCC_OscConfig+0x2ac>)
    8cc4:	681b      	ldr	r3, [r3, #0]
    8cc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
    8cca:	687b      	ldr	r3, [r7, #4]
    8ccc:	691b      	ldr	r3, [r3, #16]
    8cce:	00db      	lsls	r3, r3, #3
    8cd0:	4952      	ldr	r1, [pc, #328]	; (8e1c <HAL_RCC_OscConfig+0x2ac>)
    8cd2:	4313      	orrs	r3, r2
    8cd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
    8cd6:	e03a      	b.n	8d4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
    8cd8:	687b      	ldr	r3, [r7, #4]
    8cda:	68db      	ldr	r3, [r3, #12]
    8cdc:	2b00      	cmp	r3, #0
    8cde:	d020      	beq.n	8d22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
    8ce0:	4b4f      	ldr	r3, [pc, #316]	; (8e20 <HAL_RCC_OscConfig+0x2b0>)
    8ce2:	2201      	movs	r2, #1
    8ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
    8ce6:	f7ff fc7d 	bl	85e4 <HAL_GetTick>
    8cea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
    8cec:	e008      	b.n	8d00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
    8cee:	f7ff fc79 	bl	85e4 <HAL_GetTick>
    8cf2:	4602      	mov	r2, r0
    8cf4:	693b      	ldr	r3, [r7, #16]
    8cf6:	1ad3      	subs	r3, r2, r3
    8cf8:	2b02      	cmp	r3, #2
    8cfa:	d901      	bls.n	8d00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
    8cfc:	2303      	movs	r3, #3
    8cfe:	e19c      	b.n	903a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
    8d00:	4b46      	ldr	r3, [pc, #280]	; (8e1c <HAL_RCC_OscConfig+0x2ac>)
    8d02:	681b      	ldr	r3, [r3, #0]
    8d04:	f003 0302 	and.w	r3, r3, #2
    8d08:	2b00      	cmp	r3, #0
    8d0a:	d0f0      	beq.n	8cee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
    8d0c:	4b43      	ldr	r3, [pc, #268]	; (8e1c <HAL_RCC_OscConfig+0x2ac>)
    8d0e:	681b      	ldr	r3, [r3, #0]
    8d10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
    8d14:	687b      	ldr	r3, [r7, #4]
    8d16:	691b      	ldr	r3, [r3, #16]
    8d18:	00db      	lsls	r3, r3, #3
    8d1a:	4940      	ldr	r1, [pc, #256]	; (8e1c <HAL_RCC_OscConfig+0x2ac>)
    8d1c:	4313      	orrs	r3, r2
    8d1e:	600b      	str	r3, [r1, #0]
    8d20:	e015      	b.n	8d4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
    8d22:	4b3f      	ldr	r3, [pc, #252]	; (8e20 <HAL_RCC_OscConfig+0x2b0>)
    8d24:	2200      	movs	r2, #0
    8d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
    8d28:	f7ff fc5c 	bl	85e4 <HAL_GetTick>
    8d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
    8d2e:	e008      	b.n	8d42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
    8d30:	f7ff fc58 	bl	85e4 <HAL_GetTick>
    8d34:	4602      	mov	r2, r0
    8d36:	693b      	ldr	r3, [r7, #16]
    8d38:	1ad3      	subs	r3, r2, r3
    8d3a:	2b02      	cmp	r3, #2
    8d3c:	d901      	bls.n	8d42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
    8d3e:	2303      	movs	r3, #3
    8d40:	e17b      	b.n	903a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
    8d42:	4b36      	ldr	r3, [pc, #216]	; (8e1c <HAL_RCC_OscConfig+0x2ac>)
    8d44:	681b      	ldr	r3, [r3, #0]
    8d46:	f003 0302 	and.w	r3, r3, #2
    8d4a:	2b00      	cmp	r3, #0
    8d4c:	d1f0      	bne.n	8d30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
    8d4e:	687b      	ldr	r3, [r7, #4]
    8d50:	681b      	ldr	r3, [r3, #0]
    8d52:	f003 0308 	and.w	r3, r3, #8
    8d56:	2b00      	cmp	r3, #0
    8d58:	d030      	beq.n	8dbc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
    8d5a:	687b      	ldr	r3, [r7, #4]
    8d5c:	695b      	ldr	r3, [r3, #20]
    8d5e:	2b00      	cmp	r3, #0
    8d60:	d016      	beq.n	8d90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
    8d62:	4b30      	ldr	r3, [pc, #192]	; (8e24 <HAL_RCC_OscConfig+0x2b4>)
    8d64:	2201      	movs	r2, #1
    8d66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
    8d68:	f7ff fc3c 	bl	85e4 <HAL_GetTick>
    8d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
    8d6e:	e008      	b.n	8d82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
    8d70:	f7ff fc38 	bl	85e4 <HAL_GetTick>
    8d74:	4602      	mov	r2, r0
    8d76:	693b      	ldr	r3, [r7, #16]
    8d78:	1ad3      	subs	r3, r2, r3
    8d7a:	2b02      	cmp	r3, #2
    8d7c:	d901      	bls.n	8d82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
    8d7e:	2303      	movs	r3, #3
    8d80:	e15b      	b.n	903a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
    8d82:	4b26      	ldr	r3, [pc, #152]	; (8e1c <HAL_RCC_OscConfig+0x2ac>)
    8d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    8d86:	f003 0302 	and.w	r3, r3, #2
    8d8a:	2b00      	cmp	r3, #0
    8d8c:	d0f0      	beq.n	8d70 <HAL_RCC_OscConfig+0x200>
    8d8e:	e015      	b.n	8dbc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
    8d90:	4b24      	ldr	r3, [pc, #144]	; (8e24 <HAL_RCC_OscConfig+0x2b4>)
    8d92:	2200      	movs	r2, #0
    8d94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
    8d96:	f7ff fc25 	bl	85e4 <HAL_GetTick>
    8d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
    8d9c:	e008      	b.n	8db0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
    8d9e:	f7ff fc21 	bl	85e4 <HAL_GetTick>
    8da2:	4602      	mov	r2, r0
    8da4:	693b      	ldr	r3, [r7, #16]
    8da6:	1ad3      	subs	r3, r2, r3
    8da8:	2b02      	cmp	r3, #2
    8daa:	d901      	bls.n	8db0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
    8dac:	2303      	movs	r3, #3
    8dae:	e144      	b.n	903a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
    8db0:	4b1a      	ldr	r3, [pc, #104]	; (8e1c <HAL_RCC_OscConfig+0x2ac>)
    8db2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    8db4:	f003 0302 	and.w	r3, r3, #2
    8db8:	2b00      	cmp	r3, #0
    8dba:	d1f0      	bne.n	8d9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
    8dbc:	687b      	ldr	r3, [r7, #4]
    8dbe:	681b      	ldr	r3, [r3, #0]
    8dc0:	f003 0304 	and.w	r3, r3, #4
    8dc4:	2b00      	cmp	r3, #0
    8dc6:	f000 80a0 	beq.w	8f0a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
    8dca:	2300      	movs	r3, #0
    8dcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
    8dce:	4b13      	ldr	r3, [pc, #76]	; (8e1c <HAL_RCC_OscConfig+0x2ac>)
    8dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    8dd6:	2b00      	cmp	r3, #0
    8dd8:	d10f      	bne.n	8dfa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
    8dda:	2300      	movs	r3, #0
    8ddc:	60bb      	str	r3, [r7, #8]
    8dde:	4b0f      	ldr	r3, [pc, #60]	; (8e1c <HAL_RCC_OscConfig+0x2ac>)
    8de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8de2:	4a0e      	ldr	r2, [pc, #56]	; (8e1c <HAL_RCC_OscConfig+0x2ac>)
    8de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    8de8:	6413      	str	r3, [r2, #64]	; 0x40
    8dea:	4b0c      	ldr	r3, [pc, #48]	; (8e1c <HAL_RCC_OscConfig+0x2ac>)
    8dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    8df2:	60bb      	str	r3, [r7, #8]
    8df4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
    8df6:	2301      	movs	r3, #1
    8df8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    8dfa:	4b0b      	ldr	r3, [pc, #44]	; (8e28 <HAL_RCC_OscConfig+0x2b8>)
    8dfc:	681b      	ldr	r3, [r3, #0]
    8dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
    8e02:	2b00      	cmp	r3, #0
    8e04:	d121      	bne.n	8e4a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
    8e06:	4b08      	ldr	r3, [pc, #32]	; (8e28 <HAL_RCC_OscConfig+0x2b8>)
    8e08:	681b      	ldr	r3, [r3, #0]
    8e0a:	4a07      	ldr	r2, [pc, #28]	; (8e28 <HAL_RCC_OscConfig+0x2b8>)
    8e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    8e10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
    8e12:	f7ff fbe7 	bl	85e4 <HAL_GetTick>
    8e16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    8e18:	e011      	b.n	8e3e <HAL_RCC_OscConfig+0x2ce>
    8e1a:	bf00      	nop
    8e1c:	40023800 	.word	0x40023800
    8e20:	42470000 	.word	0x42470000
    8e24:	42470e80 	.word	0x42470e80
    8e28:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
    8e2c:	f7ff fbda 	bl	85e4 <HAL_GetTick>
    8e30:	4602      	mov	r2, r0
    8e32:	693b      	ldr	r3, [r7, #16]
    8e34:	1ad3      	subs	r3, r2, r3
    8e36:	2b02      	cmp	r3, #2
    8e38:	d901      	bls.n	8e3e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
    8e3a:	2303      	movs	r3, #3
    8e3c:	e0fd      	b.n	903a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    8e3e:	4b81      	ldr	r3, [pc, #516]	; (9044 <HAL_RCC_OscConfig+0x4d4>)
    8e40:	681b      	ldr	r3, [r3, #0]
    8e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
    8e46:	2b00      	cmp	r3, #0
    8e48:	d0f0      	beq.n	8e2c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    8e4a:	687b      	ldr	r3, [r7, #4]
    8e4c:	689b      	ldr	r3, [r3, #8]
    8e4e:	2b01      	cmp	r3, #1
    8e50:	d106      	bne.n	8e60 <HAL_RCC_OscConfig+0x2f0>
    8e52:	4b7d      	ldr	r3, [pc, #500]	; (9048 <HAL_RCC_OscConfig+0x4d8>)
    8e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    8e56:	4a7c      	ldr	r2, [pc, #496]	; (9048 <HAL_RCC_OscConfig+0x4d8>)
    8e58:	f043 0301 	orr.w	r3, r3, #1
    8e5c:	6713      	str	r3, [r2, #112]	; 0x70
    8e5e:	e01c      	b.n	8e9a <HAL_RCC_OscConfig+0x32a>
    8e60:	687b      	ldr	r3, [r7, #4]
    8e62:	689b      	ldr	r3, [r3, #8]
    8e64:	2b05      	cmp	r3, #5
    8e66:	d10c      	bne.n	8e82 <HAL_RCC_OscConfig+0x312>
    8e68:	4b77      	ldr	r3, [pc, #476]	; (9048 <HAL_RCC_OscConfig+0x4d8>)
    8e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    8e6c:	4a76      	ldr	r2, [pc, #472]	; (9048 <HAL_RCC_OscConfig+0x4d8>)
    8e6e:	f043 0304 	orr.w	r3, r3, #4
    8e72:	6713      	str	r3, [r2, #112]	; 0x70
    8e74:	4b74      	ldr	r3, [pc, #464]	; (9048 <HAL_RCC_OscConfig+0x4d8>)
    8e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    8e78:	4a73      	ldr	r2, [pc, #460]	; (9048 <HAL_RCC_OscConfig+0x4d8>)
    8e7a:	f043 0301 	orr.w	r3, r3, #1
    8e7e:	6713      	str	r3, [r2, #112]	; 0x70
    8e80:	e00b      	b.n	8e9a <HAL_RCC_OscConfig+0x32a>
    8e82:	4b71      	ldr	r3, [pc, #452]	; (9048 <HAL_RCC_OscConfig+0x4d8>)
    8e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    8e86:	4a70      	ldr	r2, [pc, #448]	; (9048 <HAL_RCC_OscConfig+0x4d8>)
    8e88:	f023 0301 	bic.w	r3, r3, #1
    8e8c:	6713      	str	r3, [r2, #112]	; 0x70
    8e8e:	4b6e      	ldr	r3, [pc, #440]	; (9048 <HAL_RCC_OscConfig+0x4d8>)
    8e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    8e92:	4a6d      	ldr	r2, [pc, #436]	; (9048 <HAL_RCC_OscConfig+0x4d8>)
    8e94:	f023 0304 	bic.w	r3, r3, #4
    8e98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    8e9a:	687b      	ldr	r3, [r7, #4]
    8e9c:	689b      	ldr	r3, [r3, #8]
    8e9e:	2b00      	cmp	r3, #0
    8ea0:	d015      	beq.n	8ece <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
    8ea2:	f7ff fb9f 	bl	85e4 <HAL_GetTick>
    8ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
    8ea8:	e00a      	b.n	8ec0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
    8eaa:	f7ff fb9b 	bl	85e4 <HAL_GetTick>
    8eae:	4602      	mov	r2, r0
    8eb0:	693b      	ldr	r3, [r7, #16]
    8eb2:	1ad3      	subs	r3, r2, r3
    8eb4:	f241 3288 	movw	r2, #5000	; 0x1388
    8eb8:	4293      	cmp	r3, r2
    8eba:	d901      	bls.n	8ec0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
    8ebc:	2303      	movs	r3, #3
    8ebe:	e0bc      	b.n	903a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
    8ec0:	4b61      	ldr	r3, [pc, #388]	; (9048 <HAL_RCC_OscConfig+0x4d8>)
    8ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    8ec4:	f003 0302 	and.w	r3, r3, #2
    8ec8:	2b00      	cmp	r3, #0
    8eca:	d0ee      	beq.n	8eaa <HAL_RCC_OscConfig+0x33a>
    8ecc:	e014      	b.n	8ef8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
    8ece:	f7ff fb89 	bl	85e4 <HAL_GetTick>
    8ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
    8ed4:	e00a      	b.n	8eec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
    8ed6:	f7ff fb85 	bl	85e4 <HAL_GetTick>
    8eda:	4602      	mov	r2, r0
    8edc:	693b      	ldr	r3, [r7, #16]
    8ede:	1ad3      	subs	r3, r2, r3
    8ee0:	f241 3288 	movw	r2, #5000	; 0x1388
    8ee4:	4293      	cmp	r3, r2
    8ee6:	d901      	bls.n	8eec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
    8ee8:	2303      	movs	r3, #3
    8eea:	e0a6      	b.n	903a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
    8eec:	4b56      	ldr	r3, [pc, #344]	; (9048 <HAL_RCC_OscConfig+0x4d8>)
    8eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    8ef0:	f003 0302 	and.w	r3, r3, #2
    8ef4:	2b00      	cmp	r3, #0
    8ef6:	d1ee      	bne.n	8ed6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
    8ef8:	7dfb      	ldrb	r3, [r7, #23]
    8efa:	2b01      	cmp	r3, #1
    8efc:	d105      	bne.n	8f0a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
    8efe:	4b52      	ldr	r3, [pc, #328]	; (9048 <HAL_RCC_OscConfig+0x4d8>)
    8f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8f02:	4a51      	ldr	r2, [pc, #324]	; (9048 <HAL_RCC_OscConfig+0x4d8>)
    8f04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    8f08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
    8f0a:	687b      	ldr	r3, [r7, #4]
    8f0c:	699b      	ldr	r3, [r3, #24]
    8f0e:	2b00      	cmp	r3, #0
    8f10:	f000 8092 	beq.w	9038 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    8f14:	4b4c      	ldr	r3, [pc, #304]	; (9048 <HAL_RCC_OscConfig+0x4d8>)
    8f16:	689b      	ldr	r3, [r3, #8]
    8f18:	f003 030c 	and.w	r3, r3, #12
    8f1c:	2b08      	cmp	r3, #8
    8f1e:	d05c      	beq.n	8fda <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
    8f20:	687b      	ldr	r3, [r7, #4]
    8f22:	699b      	ldr	r3, [r3, #24]
    8f24:	2b02      	cmp	r3, #2
    8f26:	d141      	bne.n	8fac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
    8f28:	4b48      	ldr	r3, [pc, #288]	; (904c <HAL_RCC_OscConfig+0x4dc>)
    8f2a:	2200      	movs	r2, #0
    8f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
    8f2e:	f7ff fb59 	bl	85e4 <HAL_GetTick>
    8f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
    8f34:	e008      	b.n	8f48 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
    8f36:	f7ff fb55 	bl	85e4 <HAL_GetTick>
    8f3a:	4602      	mov	r2, r0
    8f3c:	693b      	ldr	r3, [r7, #16]
    8f3e:	1ad3      	subs	r3, r2, r3
    8f40:	2b02      	cmp	r3, #2
    8f42:	d901      	bls.n	8f48 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
    8f44:	2303      	movs	r3, #3
    8f46:	e078      	b.n	903a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
    8f48:	4b3f      	ldr	r3, [pc, #252]	; (9048 <HAL_RCC_OscConfig+0x4d8>)
    8f4a:	681b      	ldr	r3, [r3, #0]
    8f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    8f50:	2b00      	cmp	r3, #0
    8f52:	d1f0      	bne.n	8f36 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
    8f54:	687b      	ldr	r3, [r7, #4]
    8f56:	69da      	ldr	r2, [r3, #28]
    8f58:	687b      	ldr	r3, [r7, #4]
    8f5a:	6a1b      	ldr	r3, [r3, #32]
    8f5c:	431a      	orrs	r2, r3
    8f5e:	687b      	ldr	r3, [r7, #4]
    8f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8f62:	019b      	lsls	r3, r3, #6
    8f64:	431a      	orrs	r2, r3
    8f66:	687b      	ldr	r3, [r7, #4]
    8f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8f6a:	085b      	lsrs	r3, r3, #1
    8f6c:	3b01      	subs	r3, #1
    8f6e:	041b      	lsls	r3, r3, #16
    8f70:	431a      	orrs	r2, r3
    8f72:	687b      	ldr	r3, [r7, #4]
    8f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8f76:	061b      	lsls	r3, r3, #24
    8f78:	4933      	ldr	r1, [pc, #204]	; (9048 <HAL_RCC_OscConfig+0x4d8>)
    8f7a:	4313      	orrs	r3, r2
    8f7c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
    8f7e:	4b33      	ldr	r3, [pc, #204]	; (904c <HAL_RCC_OscConfig+0x4dc>)
    8f80:	2201      	movs	r2, #1
    8f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
    8f84:	f7ff fb2e 	bl	85e4 <HAL_GetTick>
    8f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
    8f8a:	e008      	b.n	8f9e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
    8f8c:	f7ff fb2a 	bl	85e4 <HAL_GetTick>
    8f90:	4602      	mov	r2, r0
    8f92:	693b      	ldr	r3, [r7, #16]
    8f94:	1ad3      	subs	r3, r2, r3
    8f96:	2b02      	cmp	r3, #2
    8f98:	d901      	bls.n	8f9e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
    8f9a:	2303      	movs	r3, #3
    8f9c:	e04d      	b.n	903a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
    8f9e:	4b2a      	ldr	r3, [pc, #168]	; (9048 <HAL_RCC_OscConfig+0x4d8>)
    8fa0:	681b      	ldr	r3, [r3, #0]
    8fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    8fa6:	2b00      	cmp	r3, #0
    8fa8:	d0f0      	beq.n	8f8c <HAL_RCC_OscConfig+0x41c>
    8faa:	e045      	b.n	9038 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
    8fac:	4b27      	ldr	r3, [pc, #156]	; (904c <HAL_RCC_OscConfig+0x4dc>)
    8fae:	2200      	movs	r2, #0
    8fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
    8fb2:	f7ff fb17 	bl	85e4 <HAL_GetTick>
    8fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
    8fb8:	e008      	b.n	8fcc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
    8fba:	f7ff fb13 	bl	85e4 <HAL_GetTick>
    8fbe:	4602      	mov	r2, r0
    8fc0:	693b      	ldr	r3, [r7, #16]
    8fc2:	1ad3      	subs	r3, r2, r3
    8fc4:	2b02      	cmp	r3, #2
    8fc6:	d901      	bls.n	8fcc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
    8fc8:	2303      	movs	r3, #3
    8fca:	e036      	b.n	903a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
    8fcc:	4b1e      	ldr	r3, [pc, #120]	; (9048 <HAL_RCC_OscConfig+0x4d8>)
    8fce:	681b      	ldr	r3, [r3, #0]
    8fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    8fd4:	2b00      	cmp	r3, #0
    8fd6:	d1f0      	bne.n	8fba <HAL_RCC_OscConfig+0x44a>
    8fd8:	e02e      	b.n	9038 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
    8fda:	687b      	ldr	r3, [r7, #4]
    8fdc:	699b      	ldr	r3, [r3, #24]
    8fde:	2b01      	cmp	r3, #1
    8fe0:	d101      	bne.n	8fe6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
    8fe2:	2301      	movs	r3, #1
    8fe4:	e029      	b.n	903a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
    8fe6:	4b18      	ldr	r3, [pc, #96]	; (9048 <HAL_RCC_OscConfig+0x4d8>)
    8fe8:	685b      	ldr	r3, [r3, #4]
    8fea:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
    8fec:	68fb      	ldr	r3, [r7, #12]
    8fee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
    8ff2:	687b      	ldr	r3, [r7, #4]
    8ff4:	69db      	ldr	r3, [r3, #28]
    8ff6:	429a      	cmp	r2, r3
    8ff8:	d11c      	bne.n	9034 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
    8ffa:	68fb      	ldr	r3, [r7, #12]
    8ffc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    9000:	687b      	ldr	r3, [r7, #4]
    9002:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
    9004:	429a      	cmp	r2, r3
    9006:	d115      	bne.n	9034 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
    9008:	68fa      	ldr	r2, [r7, #12]
    900a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
    900e:	4013      	ands	r3, r2
    9010:	687a      	ldr	r2, [r7, #4]
    9012:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
    9014:	4293      	cmp	r3, r2
    9016:	d10d      	bne.n	9034 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
    9018:	68fb      	ldr	r3, [r7, #12]
    901a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
    901e:	687b      	ldr	r3, [r7, #4]
    9020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
    9022:	429a      	cmp	r2, r3
    9024:	d106      	bne.n	9034 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
    9026:	68fb      	ldr	r3, [r7, #12]
    9028:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
    902c:	687b      	ldr	r3, [r7, #4]
    902e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
    9030:	429a      	cmp	r2, r3
    9032:	d001      	beq.n	9038 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
    9034:	2301      	movs	r3, #1
    9036:	e000      	b.n	903a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
    9038:	2300      	movs	r3, #0
}
    903a:	4618      	mov	r0, r3
    903c:	3718      	adds	r7, #24
    903e:	46bd      	mov	sp, r7
    9040:	bd80      	pop	{r7, pc}
    9042:	bf00      	nop
    9044:	40007000 	.word	0x40007000
    9048:	40023800 	.word	0x40023800
    904c:	42470060 	.word	0x42470060

00009050 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
    9050:	b580      	push	{r7, lr}
    9052:	b084      	sub	sp, #16
    9054:	af00      	add	r7, sp, #0
    9056:	6078      	str	r0, [r7, #4]
    9058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
    905a:	687b      	ldr	r3, [r7, #4]
    905c:	2b00      	cmp	r3, #0
    905e:	d101      	bne.n	9064 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
    9060:	2301      	movs	r3, #1
    9062:	e0cc      	b.n	91fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
    9064:	4b68      	ldr	r3, [pc, #416]	; (9208 <HAL_RCC_ClockConfig+0x1b8>)
    9066:	681b      	ldr	r3, [r3, #0]
    9068:	f003 030f 	and.w	r3, r3, #15
    906c:	683a      	ldr	r2, [r7, #0]
    906e:	429a      	cmp	r2, r3
    9070:	d90c      	bls.n	908c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
    9072:	4b65      	ldr	r3, [pc, #404]	; (9208 <HAL_RCC_ClockConfig+0x1b8>)
    9074:	683a      	ldr	r2, [r7, #0]
    9076:	b2d2      	uxtb	r2, r2
    9078:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
    907a:	4b63      	ldr	r3, [pc, #396]	; (9208 <HAL_RCC_ClockConfig+0x1b8>)
    907c:	681b      	ldr	r3, [r3, #0]
    907e:	f003 030f 	and.w	r3, r3, #15
    9082:	683a      	ldr	r2, [r7, #0]
    9084:	429a      	cmp	r2, r3
    9086:	d001      	beq.n	908c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
    9088:	2301      	movs	r3, #1
    908a:	e0b8      	b.n	91fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
    908c:	687b      	ldr	r3, [r7, #4]
    908e:	681b      	ldr	r3, [r3, #0]
    9090:	f003 0302 	and.w	r3, r3, #2
    9094:	2b00      	cmp	r3, #0
    9096:	d020      	beq.n	90da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
    9098:	687b      	ldr	r3, [r7, #4]
    909a:	681b      	ldr	r3, [r3, #0]
    909c:	f003 0304 	and.w	r3, r3, #4
    90a0:	2b00      	cmp	r3, #0
    90a2:	d005      	beq.n	90b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
    90a4:	4b59      	ldr	r3, [pc, #356]	; (920c <HAL_RCC_ClockConfig+0x1bc>)
    90a6:	689b      	ldr	r3, [r3, #8]
    90a8:	4a58      	ldr	r2, [pc, #352]	; (920c <HAL_RCC_ClockConfig+0x1bc>)
    90aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
    90ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
    90b0:	687b      	ldr	r3, [r7, #4]
    90b2:	681b      	ldr	r3, [r3, #0]
    90b4:	f003 0308 	and.w	r3, r3, #8
    90b8:	2b00      	cmp	r3, #0
    90ba:	d005      	beq.n	90c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
    90bc:	4b53      	ldr	r3, [pc, #332]	; (920c <HAL_RCC_ClockConfig+0x1bc>)
    90be:	689b      	ldr	r3, [r3, #8]
    90c0:	4a52      	ldr	r2, [pc, #328]	; (920c <HAL_RCC_ClockConfig+0x1bc>)
    90c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
    90c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    90c8:	4b50      	ldr	r3, [pc, #320]	; (920c <HAL_RCC_ClockConfig+0x1bc>)
    90ca:	689b      	ldr	r3, [r3, #8]
    90cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
    90d0:	687b      	ldr	r3, [r7, #4]
    90d2:	689b      	ldr	r3, [r3, #8]
    90d4:	494d      	ldr	r1, [pc, #308]	; (920c <HAL_RCC_ClockConfig+0x1bc>)
    90d6:	4313      	orrs	r3, r2
    90d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    90da:	687b      	ldr	r3, [r7, #4]
    90dc:	681b      	ldr	r3, [r3, #0]
    90de:	f003 0301 	and.w	r3, r3, #1
    90e2:	2b00      	cmp	r3, #0
    90e4:	d044      	beq.n	9170 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    90e6:	687b      	ldr	r3, [r7, #4]
    90e8:	685b      	ldr	r3, [r3, #4]
    90ea:	2b01      	cmp	r3, #1
    90ec:	d107      	bne.n	90fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
    90ee:	4b47      	ldr	r3, [pc, #284]	; (920c <HAL_RCC_ClockConfig+0x1bc>)
    90f0:	681b      	ldr	r3, [r3, #0]
    90f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    90f6:	2b00      	cmp	r3, #0
    90f8:	d119      	bne.n	912e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
    90fa:	2301      	movs	r3, #1
    90fc:	e07f      	b.n	91fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
    90fe:	687b      	ldr	r3, [r7, #4]
    9100:	685b      	ldr	r3, [r3, #4]
    9102:	2b02      	cmp	r3, #2
    9104:	d003      	beq.n	910e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    9106:	687b      	ldr	r3, [r7, #4]
    9108:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
    910a:	2b03      	cmp	r3, #3
    910c:	d107      	bne.n	911e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
    910e:	4b3f      	ldr	r3, [pc, #252]	; (920c <HAL_RCC_ClockConfig+0x1bc>)
    9110:	681b      	ldr	r3, [r3, #0]
    9112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    9116:	2b00      	cmp	r3, #0
    9118:	d109      	bne.n	912e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
    911a:	2301      	movs	r3, #1
    911c:	e06f      	b.n	91fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
    911e:	4b3b      	ldr	r3, [pc, #236]	; (920c <HAL_RCC_ClockConfig+0x1bc>)
    9120:	681b      	ldr	r3, [r3, #0]
    9122:	f003 0302 	and.w	r3, r3, #2
    9126:	2b00      	cmp	r3, #0
    9128:	d101      	bne.n	912e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
    912a:	2301      	movs	r3, #1
    912c:	e067      	b.n	91fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    912e:	4b37      	ldr	r3, [pc, #220]	; (920c <HAL_RCC_ClockConfig+0x1bc>)
    9130:	689b      	ldr	r3, [r3, #8]
    9132:	f023 0203 	bic.w	r2, r3, #3
    9136:	687b      	ldr	r3, [r7, #4]
    9138:	685b      	ldr	r3, [r3, #4]
    913a:	4934      	ldr	r1, [pc, #208]	; (920c <HAL_RCC_ClockConfig+0x1bc>)
    913c:	4313      	orrs	r3, r2
    913e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
    9140:	f7ff fa50 	bl	85e4 <HAL_GetTick>
    9144:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
    9146:	e00a      	b.n	915e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
    9148:	f7ff fa4c 	bl	85e4 <HAL_GetTick>
    914c:	4602      	mov	r2, r0
    914e:	68fb      	ldr	r3, [r7, #12]
    9150:	1ad3      	subs	r3, r2, r3
    9152:	f241 3288 	movw	r2, #5000	; 0x1388
    9156:	4293      	cmp	r3, r2
    9158:	d901      	bls.n	915e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
    915a:	2303      	movs	r3, #3
    915c:	e04f      	b.n	91fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
    915e:	4b2b      	ldr	r3, [pc, #172]	; (920c <HAL_RCC_ClockConfig+0x1bc>)
    9160:	689b      	ldr	r3, [r3, #8]
    9162:	f003 020c 	and.w	r2, r3, #12
    9166:	687b      	ldr	r3, [r7, #4]
    9168:	685b      	ldr	r3, [r3, #4]
    916a:	009b      	lsls	r3, r3, #2
    916c:	429a      	cmp	r2, r3
    916e:	d1eb      	bne.n	9148 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
    9170:	4b25      	ldr	r3, [pc, #148]	; (9208 <HAL_RCC_ClockConfig+0x1b8>)
    9172:	681b      	ldr	r3, [r3, #0]
    9174:	f003 030f 	and.w	r3, r3, #15
    9178:	683a      	ldr	r2, [r7, #0]
    917a:	429a      	cmp	r2, r3
    917c:	d20c      	bcs.n	9198 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
    917e:	4b22      	ldr	r3, [pc, #136]	; (9208 <HAL_RCC_ClockConfig+0x1b8>)
    9180:	683a      	ldr	r2, [r7, #0]
    9182:	b2d2      	uxtb	r2, r2
    9184:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
    9186:	4b20      	ldr	r3, [pc, #128]	; (9208 <HAL_RCC_ClockConfig+0x1b8>)
    9188:	681b      	ldr	r3, [r3, #0]
    918a:	f003 030f 	and.w	r3, r3, #15
    918e:	683a      	ldr	r2, [r7, #0]
    9190:	429a      	cmp	r2, r3
    9192:	d001      	beq.n	9198 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
    9194:	2301      	movs	r3, #1
    9196:	e032      	b.n	91fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
    9198:	687b      	ldr	r3, [r7, #4]
    919a:	681b      	ldr	r3, [r3, #0]
    919c:	f003 0304 	and.w	r3, r3, #4
    91a0:	2b00      	cmp	r3, #0
    91a2:	d008      	beq.n	91b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
    91a4:	4b19      	ldr	r3, [pc, #100]	; (920c <HAL_RCC_ClockConfig+0x1bc>)
    91a6:	689b      	ldr	r3, [r3, #8]
    91a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
    91ac:	687b      	ldr	r3, [r7, #4]
    91ae:	68db      	ldr	r3, [r3, #12]
    91b0:	4916      	ldr	r1, [pc, #88]	; (920c <HAL_RCC_ClockConfig+0x1bc>)
    91b2:	4313      	orrs	r3, r2
    91b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
    91b6:	687b      	ldr	r3, [r7, #4]
    91b8:	681b      	ldr	r3, [r3, #0]
    91ba:	f003 0308 	and.w	r3, r3, #8
    91be:	2b00      	cmp	r3, #0
    91c0:	d009      	beq.n	91d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
    91c2:	4b12      	ldr	r3, [pc, #72]	; (920c <HAL_RCC_ClockConfig+0x1bc>)
    91c4:	689b      	ldr	r3, [r3, #8]
    91c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
    91ca:	687b      	ldr	r3, [r7, #4]
    91cc:	691b      	ldr	r3, [r3, #16]
    91ce:	00db      	lsls	r3, r3, #3
    91d0:	490e      	ldr	r1, [pc, #56]	; (920c <HAL_RCC_ClockConfig+0x1bc>)
    91d2:	4313      	orrs	r3, r2
    91d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
    91d6:	f000 f821 	bl	921c <HAL_RCC_GetSysClockFreq>
    91da:	4601      	mov	r1, r0
    91dc:	4b0b      	ldr	r3, [pc, #44]	; (920c <HAL_RCC_ClockConfig+0x1bc>)
    91de:	689b      	ldr	r3, [r3, #8]
    91e0:	091b      	lsrs	r3, r3, #4
    91e2:	f003 030f 	and.w	r3, r3, #15
    91e6:	4a0a      	ldr	r2, [pc, #40]	; (9210 <HAL_RCC_ClockConfig+0x1c0>)
    91e8:	5cd3      	ldrb	r3, [r2, r3]
    91ea:	fa21 f303 	lsr.w	r3, r1, r3
    91ee:	4a09      	ldr	r2, [pc, #36]	; (9214 <HAL_RCC_ClockConfig+0x1c4>)
    91f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
    91f2:	4b09      	ldr	r3, [pc, #36]	; (9218 <HAL_RCC_ClockConfig+0x1c8>)
    91f4:	681b      	ldr	r3, [r3, #0]
    91f6:	4618      	mov	r0, r3
    91f8:	f7ff f97a 	bl	84f0 <HAL_InitTick>

  return HAL_OK;
    91fc:	2300      	movs	r3, #0
}
    91fe:	4618      	mov	r0, r3
    9200:	3710      	adds	r7, #16
    9202:	46bd      	mov	sp, r7
    9204:	bd80      	pop	{r7, pc}
    9206:	bf00      	nop
    9208:	40023c00 	.word	0x40023c00
    920c:	40023800 	.word	0x40023800
    9210:	0000a210 	.word	0x0000a210
    9214:	0001a248 	.word	0x0001a248
    9218:	0001a24c 	.word	0x0001a24c

0000921c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
    921c:	b5f0      	push	{r4, r5, r6, r7, lr}
    921e:	b085      	sub	sp, #20
    9220:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
    9222:	2300      	movs	r3, #0
    9224:	607b      	str	r3, [r7, #4]
    9226:	2300      	movs	r3, #0
    9228:	60fb      	str	r3, [r7, #12]
    922a:	2300      	movs	r3, #0
    922c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
    922e:	2300      	movs	r3, #0
    9230:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
    9232:	4b63      	ldr	r3, [pc, #396]	; (93c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
    9234:	689b      	ldr	r3, [r3, #8]
    9236:	f003 030c 	and.w	r3, r3, #12
    923a:	2b04      	cmp	r3, #4
    923c:	d007      	beq.n	924e <HAL_RCC_GetSysClockFreq+0x32>
    923e:	2b08      	cmp	r3, #8
    9240:	d008      	beq.n	9254 <HAL_RCC_GetSysClockFreq+0x38>
    9242:	2b00      	cmp	r3, #0
    9244:	f040 80b4 	bne.w	93b0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
    9248:	4b5e      	ldr	r3, [pc, #376]	; (93c4 <HAL_RCC_GetSysClockFreq+0x1a8>)
    924a:	60bb      	str	r3, [r7, #8]
       break;
    924c:	e0b3      	b.n	93b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
    924e:	4b5e      	ldr	r3, [pc, #376]	; (93c8 <HAL_RCC_GetSysClockFreq+0x1ac>)
    9250:	60bb      	str	r3, [r7, #8]
      break;
    9252:	e0b0      	b.n	93b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
    9254:	4b5a      	ldr	r3, [pc, #360]	; (93c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
    9256:	685b      	ldr	r3, [r3, #4]
    9258:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    925c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
    925e:	4b58      	ldr	r3, [pc, #352]	; (93c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
    9260:	685b      	ldr	r3, [r3, #4]
    9262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    9266:	2b00      	cmp	r3, #0
    9268:	d04a      	beq.n	9300 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
    926a:	4b55      	ldr	r3, [pc, #340]	; (93c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
    926c:	685b      	ldr	r3, [r3, #4]
    926e:	099b      	lsrs	r3, r3, #6
    9270:	f04f 0400 	mov.w	r4, #0
    9274:	f240 11ff 	movw	r1, #511	; 0x1ff
    9278:	f04f 0200 	mov.w	r2, #0
    927c:	ea03 0501 	and.w	r5, r3, r1
    9280:	ea04 0602 	and.w	r6, r4, r2
    9284:	4629      	mov	r1, r5
    9286:	4632      	mov	r2, r6
    9288:	f04f 0300 	mov.w	r3, #0
    928c:	f04f 0400 	mov.w	r4, #0
    9290:	0154      	lsls	r4, r2, #5
    9292:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
    9296:	014b      	lsls	r3, r1, #5
    9298:	4619      	mov	r1, r3
    929a:	4622      	mov	r2, r4
    929c:	1b49      	subs	r1, r1, r5
    929e:	eb62 0206 	sbc.w	r2, r2, r6
    92a2:	f04f 0300 	mov.w	r3, #0
    92a6:	f04f 0400 	mov.w	r4, #0
    92aa:	0194      	lsls	r4, r2, #6
    92ac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
    92b0:	018b      	lsls	r3, r1, #6
    92b2:	1a5b      	subs	r3, r3, r1
    92b4:	eb64 0402 	sbc.w	r4, r4, r2
    92b8:	f04f 0100 	mov.w	r1, #0
    92bc:	f04f 0200 	mov.w	r2, #0
    92c0:	00e2      	lsls	r2, r4, #3
    92c2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    92c6:	00d9      	lsls	r1, r3, #3
    92c8:	460b      	mov	r3, r1
    92ca:	4614      	mov	r4, r2
    92cc:	195b      	adds	r3, r3, r5
    92ce:	eb44 0406 	adc.w	r4, r4, r6
    92d2:	f04f 0100 	mov.w	r1, #0
    92d6:	f04f 0200 	mov.w	r2, #0
    92da:	0262      	lsls	r2, r4, #9
    92dc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
    92e0:	0259      	lsls	r1, r3, #9
    92e2:	460b      	mov	r3, r1
    92e4:	4614      	mov	r4, r2
    92e6:	4618      	mov	r0, r3
    92e8:	4621      	mov	r1, r4
    92ea:	687b      	ldr	r3, [r7, #4]
    92ec:	f04f 0400 	mov.w	r4, #0
    92f0:	461a      	mov	r2, r3
    92f2:	4623      	mov	r3, r4
    92f4:	f000 fdfc 	bl	9ef0 <__aeabi_uldivmod>
    92f8:	4603      	mov	r3, r0
    92fa:	460c      	mov	r4, r1
    92fc:	60fb      	str	r3, [r7, #12]
    92fe:	e049      	b.n	9394 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
    9300:	4b2f      	ldr	r3, [pc, #188]	; (93c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
    9302:	685b      	ldr	r3, [r3, #4]
    9304:	099b      	lsrs	r3, r3, #6
    9306:	f04f 0400 	mov.w	r4, #0
    930a:	f240 11ff 	movw	r1, #511	; 0x1ff
    930e:	f04f 0200 	mov.w	r2, #0
    9312:	ea03 0501 	and.w	r5, r3, r1
    9316:	ea04 0602 	and.w	r6, r4, r2
    931a:	4629      	mov	r1, r5
    931c:	4632      	mov	r2, r6
    931e:	f04f 0300 	mov.w	r3, #0
    9322:	f04f 0400 	mov.w	r4, #0
    9326:	0154      	lsls	r4, r2, #5
    9328:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
    932c:	014b      	lsls	r3, r1, #5
    932e:	4619      	mov	r1, r3
    9330:	4622      	mov	r2, r4
    9332:	1b49      	subs	r1, r1, r5
    9334:	eb62 0206 	sbc.w	r2, r2, r6
    9338:	f04f 0300 	mov.w	r3, #0
    933c:	f04f 0400 	mov.w	r4, #0
    9340:	0194      	lsls	r4, r2, #6
    9342:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
    9346:	018b      	lsls	r3, r1, #6
    9348:	1a5b      	subs	r3, r3, r1
    934a:	eb64 0402 	sbc.w	r4, r4, r2
    934e:	f04f 0100 	mov.w	r1, #0
    9352:	f04f 0200 	mov.w	r2, #0
    9356:	00e2      	lsls	r2, r4, #3
    9358:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    935c:	00d9      	lsls	r1, r3, #3
    935e:	460b      	mov	r3, r1
    9360:	4614      	mov	r4, r2
    9362:	195b      	adds	r3, r3, r5
    9364:	eb44 0406 	adc.w	r4, r4, r6
    9368:	f04f 0100 	mov.w	r1, #0
    936c:	f04f 0200 	mov.w	r2, #0
    9370:	02a2      	lsls	r2, r4, #10
    9372:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
    9376:	0299      	lsls	r1, r3, #10
    9378:	460b      	mov	r3, r1
    937a:	4614      	mov	r4, r2
    937c:	4618      	mov	r0, r3
    937e:	4621      	mov	r1, r4
    9380:	687b      	ldr	r3, [r7, #4]
    9382:	f04f 0400 	mov.w	r4, #0
    9386:	461a      	mov	r2, r3
    9388:	4623      	mov	r3, r4
    938a:	f000 fdb1 	bl	9ef0 <__aeabi_uldivmod>
    938e:	4603      	mov	r3, r0
    9390:	460c      	mov	r4, r1
    9392:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
    9394:	4b0a      	ldr	r3, [pc, #40]	; (93c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
    9396:	685b      	ldr	r3, [r3, #4]
    9398:	0c1b      	lsrs	r3, r3, #16
    939a:	f003 0303 	and.w	r3, r3, #3
    939e:	3301      	adds	r3, #1
    93a0:	005b      	lsls	r3, r3, #1
    93a2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
    93a4:	68fa      	ldr	r2, [r7, #12]
    93a6:	683b      	ldr	r3, [r7, #0]
    93a8:	fbb2 f3f3 	udiv	r3, r2, r3
    93ac:	60bb      	str	r3, [r7, #8]
      break;
    93ae:	e002      	b.n	93b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
    93b0:	4b04      	ldr	r3, [pc, #16]	; (93c4 <HAL_RCC_GetSysClockFreq+0x1a8>)
    93b2:	60bb      	str	r3, [r7, #8]
      break;
    93b4:	bf00      	nop
    }
  }
  return sysclockfreq;
    93b6:	68bb      	ldr	r3, [r7, #8]
}
    93b8:	4618      	mov	r0, r3
    93ba:	3714      	adds	r7, #20
    93bc:	46bd      	mov	sp, r7
    93be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    93c0:	40023800 	.word	0x40023800
    93c4:	00f42400 	.word	0x00f42400
    93c8:	007a1200 	.word	0x007a1200

000093cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
    93cc:	b480      	push	{r7}
    93ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
    93d0:	4b03      	ldr	r3, [pc, #12]	; (93e0 <HAL_RCC_GetHCLKFreq+0x14>)
    93d2:	681b      	ldr	r3, [r3, #0]
}
    93d4:	4618      	mov	r0, r3
    93d6:	46bd      	mov	sp, r7
    93d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    93dc:	4770      	bx	lr
    93de:	bf00      	nop
    93e0:	0001a248 	.word	0x0001a248

000093e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
    93e4:	b580      	push	{r7, lr}
    93e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
    93e8:	f7ff fff0 	bl	93cc <HAL_RCC_GetHCLKFreq>
    93ec:	4601      	mov	r1, r0
    93ee:	4b05      	ldr	r3, [pc, #20]	; (9404 <HAL_RCC_GetPCLK1Freq+0x20>)
    93f0:	689b      	ldr	r3, [r3, #8]
    93f2:	0a9b      	lsrs	r3, r3, #10
    93f4:	f003 0307 	and.w	r3, r3, #7
    93f8:	4a03      	ldr	r2, [pc, #12]	; (9408 <HAL_RCC_GetPCLK1Freq+0x24>)
    93fa:	5cd3      	ldrb	r3, [r2, r3]
    93fc:	fa21 f303 	lsr.w	r3, r1, r3
}
    9400:	4618      	mov	r0, r3
    9402:	bd80      	pop	{r7, pc}
    9404:	40023800 	.word	0x40023800
    9408:	0000a220 	.word	0x0000a220

0000940c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
    940c:	b580      	push	{r7, lr}
    940e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
    9410:	f7ff ffdc 	bl	93cc <HAL_RCC_GetHCLKFreq>
    9414:	4601      	mov	r1, r0
    9416:	4b05      	ldr	r3, [pc, #20]	; (942c <HAL_RCC_GetPCLK2Freq+0x20>)
    9418:	689b      	ldr	r3, [r3, #8]
    941a:	0b5b      	lsrs	r3, r3, #13
    941c:	f003 0307 	and.w	r3, r3, #7
    9420:	4a03      	ldr	r2, [pc, #12]	; (9430 <HAL_RCC_GetPCLK2Freq+0x24>)
    9422:	5cd3      	ldrb	r3, [r2, r3]
    9424:	fa21 f303 	lsr.w	r3, r1, r3
}
    9428:	4618      	mov	r0, r3
    942a:	bd80      	pop	{r7, pc}
    942c:	40023800 	.word	0x40023800
    9430:	0000a220 	.word	0x0000a220

00009434 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
    9434:	b480      	push	{r7}
    9436:	b083      	sub	sp, #12
    9438:	af00      	add	r7, sp, #0
    943a:	6078      	str	r0, [r7, #4]
    943c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    943e:	687b      	ldr	r3, [r7, #4]
    9440:	220f      	movs	r2, #15
    9442:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
    9444:	4b12      	ldr	r3, [pc, #72]	; (9490 <HAL_RCC_GetClockConfig+0x5c>)
    9446:	689b      	ldr	r3, [r3, #8]
    9448:	f003 0203 	and.w	r2, r3, #3
    944c:	687b      	ldr	r3, [r7, #4]
    944e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
    9450:	4b0f      	ldr	r3, [pc, #60]	; (9490 <HAL_RCC_GetClockConfig+0x5c>)
    9452:	689b      	ldr	r3, [r3, #8]
    9454:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    9458:	687b      	ldr	r3, [r7, #4]
    945a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
    945c:	4b0c      	ldr	r3, [pc, #48]	; (9490 <HAL_RCC_GetClockConfig+0x5c>)
    945e:	689b      	ldr	r3, [r3, #8]
    9460:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
    9464:	687b      	ldr	r3, [r7, #4]
    9466:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
    9468:	4b09      	ldr	r3, [pc, #36]	; (9490 <HAL_RCC_GetClockConfig+0x5c>)
    946a:	689b      	ldr	r3, [r3, #8]
    946c:	08db      	lsrs	r3, r3, #3
    946e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
    9472:	687b      	ldr	r3, [r7, #4]
    9474:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
    9476:	4b07      	ldr	r3, [pc, #28]	; (9494 <HAL_RCC_GetClockConfig+0x60>)
    9478:	681b      	ldr	r3, [r3, #0]
    947a:	f003 020f 	and.w	r2, r3, #15
    947e:	683b      	ldr	r3, [r7, #0]
    9480:	601a      	str	r2, [r3, #0]
}
    9482:	bf00      	nop
    9484:	370c      	adds	r7, #12
    9486:	46bd      	mov	sp, r7
    9488:	f85d 7b04 	ldr.w	r7, [sp], #4
    948c:	4770      	bx	lr
    948e:	bf00      	nop
    9490:	40023800 	.word	0x40023800
    9494:	40023c00 	.word	0x40023c00

00009498 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
    9498:	b580      	push	{r7, lr}
    949a:	b082      	sub	sp, #8
    949c:	af00      	add	r7, sp, #0
    949e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
    94a0:	687b      	ldr	r3, [r7, #4]
    94a2:	2b00      	cmp	r3, #0
    94a4:	d101      	bne.n	94aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
    94a6:	2301      	movs	r3, #1
    94a8:	e01d      	b.n	94e6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
    94aa:	687b      	ldr	r3, [r7, #4]
    94ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    94b0:	b2db      	uxtb	r3, r3
    94b2:	2b00      	cmp	r3, #0
    94b4:	d106      	bne.n	94c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
    94b6:	687b      	ldr	r3, [r7, #4]
    94b8:	2200      	movs	r2, #0
    94ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
    94be:	6878      	ldr	r0, [r7, #4]
    94c0:	f000 f815 	bl	94ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
    94c4:	687b      	ldr	r3, [r7, #4]
    94c6:	2202      	movs	r2, #2
    94c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
    94cc:	687b      	ldr	r3, [r7, #4]
    94ce:	681a      	ldr	r2, [r3, #0]
    94d0:	687b      	ldr	r3, [r7, #4]
    94d2:	3304      	adds	r3, #4
    94d4:	4619      	mov	r1, r3
    94d6:	4610      	mov	r0, r2
    94d8:	f000 f838 	bl	954c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
    94dc:	687b      	ldr	r3, [r7, #4]
    94de:	2201      	movs	r2, #1
    94e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
    94e4:	2300      	movs	r3, #0
}
    94e6:	4618      	mov	r0, r3
    94e8:	3708      	adds	r7, #8
    94ea:	46bd      	mov	sp, r7
    94ec:	bd80      	pop	{r7, pc}

000094ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
    94ee:	b480      	push	{r7}
    94f0:	b083      	sub	sp, #12
    94f2:	af00      	add	r7, sp, #0
    94f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
    94f6:	bf00      	nop
    94f8:	370c      	adds	r7, #12
    94fa:	46bd      	mov	sp, r7
    94fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    9500:	4770      	bx	lr

00009502 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
    9502:	b480      	push	{r7}
    9504:	b085      	sub	sp, #20
    9506:	af00      	add	r7, sp, #0
    9508:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
    950a:	687b      	ldr	r3, [r7, #4]
    950c:	681b      	ldr	r3, [r3, #0]
    950e:	68da      	ldr	r2, [r3, #12]
    9510:	687b      	ldr	r3, [r7, #4]
    9512:	681b      	ldr	r3, [r3, #0]
    9514:	f042 0201 	orr.w	r2, r2, #1
    9518:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
    951a:	687b      	ldr	r3, [r7, #4]
    951c:	681b      	ldr	r3, [r3, #0]
    951e:	689b      	ldr	r3, [r3, #8]
    9520:	f003 0307 	and.w	r3, r3, #7
    9524:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
    9526:	68fb      	ldr	r3, [r7, #12]
    9528:	2b06      	cmp	r3, #6
    952a:	d007      	beq.n	953c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
    952c:	687b      	ldr	r3, [r7, #4]
    952e:	681b      	ldr	r3, [r3, #0]
    9530:	681a      	ldr	r2, [r3, #0]
    9532:	687b      	ldr	r3, [r7, #4]
    9534:	681b      	ldr	r3, [r3, #0]
    9536:	f042 0201 	orr.w	r2, r2, #1
    953a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
    953c:	2300      	movs	r3, #0
}
    953e:	4618      	mov	r0, r3
    9540:	3714      	adds	r7, #20
    9542:	46bd      	mov	sp, r7
    9544:	f85d 7b04 	ldr.w	r7, [sp], #4
    9548:	4770      	bx	lr
	...

0000954c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
    954c:	b480      	push	{r7}
    954e:	b085      	sub	sp, #20
    9550:	af00      	add	r7, sp, #0
    9552:	6078      	str	r0, [r7, #4]
    9554:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
    9556:	687b      	ldr	r3, [r7, #4]
    9558:	681b      	ldr	r3, [r3, #0]
    955a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
    955c:	687b      	ldr	r3, [r7, #4]
    955e:	4a34      	ldr	r2, [pc, #208]	; (9630 <TIM_Base_SetConfig+0xe4>)
    9560:	4293      	cmp	r3, r2
    9562:	d00f      	beq.n	9584 <TIM_Base_SetConfig+0x38>
    9564:	687b      	ldr	r3, [r7, #4]
    9566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    956a:	d00b      	beq.n	9584 <TIM_Base_SetConfig+0x38>
    956c:	687b      	ldr	r3, [r7, #4]
    956e:	4a31      	ldr	r2, [pc, #196]	; (9634 <TIM_Base_SetConfig+0xe8>)
    9570:	4293      	cmp	r3, r2
    9572:	d007      	beq.n	9584 <TIM_Base_SetConfig+0x38>
    9574:	687b      	ldr	r3, [r7, #4]
    9576:	4a30      	ldr	r2, [pc, #192]	; (9638 <TIM_Base_SetConfig+0xec>)
    9578:	4293      	cmp	r3, r2
    957a:	d003      	beq.n	9584 <TIM_Base_SetConfig+0x38>
    957c:	687b      	ldr	r3, [r7, #4]
    957e:	4a2f      	ldr	r2, [pc, #188]	; (963c <TIM_Base_SetConfig+0xf0>)
    9580:	4293      	cmp	r3, r2
    9582:	d108      	bne.n	9596 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    9584:	68fb      	ldr	r3, [r7, #12]
    9586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    958a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
    958c:	683b      	ldr	r3, [r7, #0]
    958e:	685b      	ldr	r3, [r3, #4]
    9590:	68fa      	ldr	r2, [r7, #12]
    9592:	4313      	orrs	r3, r2
    9594:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
    9596:	687b      	ldr	r3, [r7, #4]
    9598:	4a25      	ldr	r2, [pc, #148]	; (9630 <TIM_Base_SetConfig+0xe4>)
    959a:	4293      	cmp	r3, r2
    959c:	d01b      	beq.n	95d6 <TIM_Base_SetConfig+0x8a>
    959e:	687b      	ldr	r3, [r7, #4]
    95a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    95a4:	d017      	beq.n	95d6 <TIM_Base_SetConfig+0x8a>
    95a6:	687b      	ldr	r3, [r7, #4]
    95a8:	4a22      	ldr	r2, [pc, #136]	; (9634 <TIM_Base_SetConfig+0xe8>)
    95aa:	4293      	cmp	r3, r2
    95ac:	d013      	beq.n	95d6 <TIM_Base_SetConfig+0x8a>
    95ae:	687b      	ldr	r3, [r7, #4]
    95b0:	4a21      	ldr	r2, [pc, #132]	; (9638 <TIM_Base_SetConfig+0xec>)
    95b2:	4293      	cmp	r3, r2
    95b4:	d00f      	beq.n	95d6 <TIM_Base_SetConfig+0x8a>
    95b6:	687b      	ldr	r3, [r7, #4]
    95b8:	4a20      	ldr	r2, [pc, #128]	; (963c <TIM_Base_SetConfig+0xf0>)
    95ba:	4293      	cmp	r3, r2
    95bc:	d00b      	beq.n	95d6 <TIM_Base_SetConfig+0x8a>
    95be:	687b      	ldr	r3, [r7, #4]
    95c0:	4a1f      	ldr	r2, [pc, #124]	; (9640 <TIM_Base_SetConfig+0xf4>)
    95c2:	4293      	cmp	r3, r2
    95c4:	d007      	beq.n	95d6 <TIM_Base_SetConfig+0x8a>
    95c6:	687b      	ldr	r3, [r7, #4]
    95c8:	4a1e      	ldr	r2, [pc, #120]	; (9644 <TIM_Base_SetConfig+0xf8>)
    95ca:	4293      	cmp	r3, r2
    95cc:	d003      	beq.n	95d6 <TIM_Base_SetConfig+0x8a>
    95ce:	687b      	ldr	r3, [r7, #4]
    95d0:	4a1d      	ldr	r2, [pc, #116]	; (9648 <TIM_Base_SetConfig+0xfc>)
    95d2:	4293      	cmp	r3, r2
    95d4:	d108      	bne.n	95e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    95d6:	68fb      	ldr	r3, [r7, #12]
    95d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    95dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
    95de:	683b      	ldr	r3, [r7, #0]
    95e0:	68db      	ldr	r3, [r3, #12]
    95e2:	68fa      	ldr	r2, [r7, #12]
    95e4:	4313      	orrs	r3, r2
    95e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
    95e8:	68fb      	ldr	r3, [r7, #12]
    95ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    95ee:	683b      	ldr	r3, [r7, #0]
    95f0:	695b      	ldr	r3, [r3, #20]
    95f2:	4313      	orrs	r3, r2
    95f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
    95f6:	687b      	ldr	r3, [r7, #4]
    95f8:	68fa      	ldr	r2, [r7, #12]
    95fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
    95fc:	683b      	ldr	r3, [r7, #0]
    95fe:	689a      	ldr	r2, [r3, #8]
    9600:	687b      	ldr	r3, [r7, #4]
    9602:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
    9604:	683b      	ldr	r3, [r7, #0]
    9606:	681a      	ldr	r2, [r3, #0]
    9608:	687b      	ldr	r3, [r7, #4]
    960a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
    960c:	687b      	ldr	r3, [r7, #4]
    960e:	4a08      	ldr	r2, [pc, #32]	; (9630 <TIM_Base_SetConfig+0xe4>)
    9610:	4293      	cmp	r3, r2
    9612:	d103      	bne.n	961c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
    9614:	683b      	ldr	r3, [r7, #0]
    9616:	691a      	ldr	r2, [r3, #16]
    9618:	687b      	ldr	r3, [r7, #4]
    961a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
    961c:	687b      	ldr	r3, [r7, #4]
    961e:	2201      	movs	r2, #1
    9620:	615a      	str	r2, [r3, #20]
}
    9622:	bf00      	nop
    9624:	3714      	adds	r7, #20
    9626:	46bd      	mov	sp, r7
    9628:	f85d 7b04 	ldr.w	r7, [sp], #4
    962c:	4770      	bx	lr
    962e:	bf00      	nop
    9630:	40010000 	.word	0x40010000
    9634:	40000400 	.word	0x40000400
    9638:	40000800 	.word	0x40000800
    963c:	40000c00 	.word	0x40000c00
    9640:	40014000 	.word	0x40014000
    9644:	40014400 	.word	0x40014400
    9648:	40014800 	.word	0x40014800

0000964c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
    964c:	b580      	push	{r7, lr}
    964e:	b082      	sub	sp, #8
    9650:	af00      	add	r7, sp, #0
    9652:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
    9654:	687b      	ldr	r3, [r7, #4]
    9656:	2b00      	cmp	r3, #0
    9658:	d101      	bne.n	965e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
    965a:	2301      	movs	r3, #1
    965c:	e03f      	b.n	96de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
    965e:	687b      	ldr	r3, [r7, #4]
    9660:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
    9664:	b2db      	uxtb	r3, r3
    9666:	2b00      	cmp	r3, #0
    9668:	d106      	bne.n	9678 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
    966a:	687b      	ldr	r3, [r7, #4]
    966c:	2200      	movs	r2, #0
    966e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
    9672:	6878      	ldr	r0, [r7, #4]
    9674:	f7fe fef4 	bl	8460 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
    9678:	687b      	ldr	r3, [r7, #4]
    967a:	2224      	movs	r2, #36	; 0x24
    967c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
    9680:	687b      	ldr	r3, [r7, #4]
    9682:	681b      	ldr	r3, [r3, #0]
    9684:	68da      	ldr	r2, [r3, #12]
    9686:	687b      	ldr	r3, [r7, #4]
    9688:	681b      	ldr	r3, [r3, #0]
    968a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
    968e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
    9690:	6878      	ldr	r0, [r7, #4]
    9692:	f000 f829 	bl	96e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
    9696:	687b      	ldr	r3, [r7, #4]
    9698:	681b      	ldr	r3, [r3, #0]
    969a:	691a      	ldr	r2, [r3, #16]
    969c:	687b      	ldr	r3, [r7, #4]
    969e:	681b      	ldr	r3, [r3, #0]
    96a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
    96a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
    96a6:	687b      	ldr	r3, [r7, #4]
    96a8:	681b      	ldr	r3, [r3, #0]
    96aa:	695a      	ldr	r2, [r3, #20]
    96ac:	687b      	ldr	r3, [r7, #4]
    96ae:	681b      	ldr	r3, [r3, #0]
    96b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
    96b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
    96b6:	687b      	ldr	r3, [r7, #4]
    96b8:	681b      	ldr	r3, [r3, #0]
    96ba:	68da      	ldr	r2, [r3, #12]
    96bc:	687b      	ldr	r3, [r7, #4]
    96be:	681b      	ldr	r3, [r3, #0]
    96c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    96c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
    96c6:	687b      	ldr	r3, [r7, #4]
    96c8:	2200      	movs	r2, #0
    96ca:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
    96cc:	687b      	ldr	r3, [r7, #4]
    96ce:	2220      	movs	r2, #32
    96d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
    96d4:	687b      	ldr	r3, [r7, #4]
    96d6:	2220      	movs	r2, #32
    96d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
    96dc:	2300      	movs	r3, #0
}
    96de:	4618      	mov	r0, r3
    96e0:	3708      	adds	r7, #8
    96e2:	46bd      	mov	sp, r7
    96e4:	bd80      	pop	{r7, pc}
	...

000096e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
    96e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    96ec:	b085      	sub	sp, #20
    96ee:	af00      	add	r7, sp, #0
    96f0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
    96f2:	687b      	ldr	r3, [r7, #4]
    96f4:	681b      	ldr	r3, [r3, #0]
    96f6:	691b      	ldr	r3, [r3, #16]
    96f8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
    96fc:	687b      	ldr	r3, [r7, #4]
    96fe:	68da      	ldr	r2, [r3, #12]
    9700:	687b      	ldr	r3, [r7, #4]
    9702:	681b      	ldr	r3, [r3, #0]
    9704:	430a      	orrs	r2, r1
    9706:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
    9708:	687b      	ldr	r3, [r7, #4]
    970a:	689a      	ldr	r2, [r3, #8]
    970c:	687b      	ldr	r3, [r7, #4]
    970e:	691b      	ldr	r3, [r3, #16]
    9710:	431a      	orrs	r2, r3
    9712:	687b      	ldr	r3, [r7, #4]
    9714:	695b      	ldr	r3, [r3, #20]
    9716:	431a      	orrs	r2, r3
    9718:	687b      	ldr	r3, [r7, #4]
    971a:	69db      	ldr	r3, [r3, #28]
    971c:	4313      	orrs	r3, r2
    971e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
    9720:	687b      	ldr	r3, [r7, #4]
    9722:	681b      	ldr	r3, [r3, #0]
    9724:	68db      	ldr	r3, [r3, #12]
    9726:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
    972a:	f023 030c 	bic.w	r3, r3, #12
    972e:	687a      	ldr	r2, [r7, #4]
    9730:	6812      	ldr	r2, [r2, #0]
    9732:	68f9      	ldr	r1, [r7, #12]
    9734:	430b      	orrs	r3, r1
    9736:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
    9738:	687b      	ldr	r3, [r7, #4]
    973a:	681b      	ldr	r3, [r3, #0]
    973c:	695b      	ldr	r3, [r3, #20]
    973e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
    9742:	687b      	ldr	r3, [r7, #4]
    9744:	699a      	ldr	r2, [r3, #24]
    9746:	687b      	ldr	r3, [r7, #4]
    9748:	681b      	ldr	r3, [r3, #0]
    974a:	430a      	orrs	r2, r1
    974c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
    974e:	687b      	ldr	r3, [r7, #4]
    9750:	69db      	ldr	r3, [r3, #28]
    9752:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    9756:	f040 818b 	bne.w	9a70 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
    975a:	687b      	ldr	r3, [r7, #4]
    975c:	681b      	ldr	r3, [r3, #0]
    975e:	4ac1      	ldr	r2, [pc, #772]	; (9a64 <UART_SetConfig+0x37c>)
    9760:	4293      	cmp	r3, r2
    9762:	d005      	beq.n	9770 <UART_SetConfig+0x88>
    9764:	687b      	ldr	r3, [r7, #4]
    9766:	681b      	ldr	r3, [r3, #0]
    9768:	4abf      	ldr	r2, [pc, #764]	; (9a68 <UART_SetConfig+0x380>)
    976a:	4293      	cmp	r3, r2
    976c:	f040 80bd 	bne.w	98ea <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    9770:	f7ff fe4c 	bl	940c <HAL_RCC_GetPCLK2Freq>
    9774:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    9776:	68bb      	ldr	r3, [r7, #8]
    9778:	461d      	mov	r5, r3
    977a:	f04f 0600 	mov.w	r6, #0
    977e:	46a8      	mov	r8, r5
    9780:	46b1      	mov	r9, r6
    9782:	eb18 0308 	adds.w	r3, r8, r8
    9786:	eb49 0409 	adc.w	r4, r9, r9
    978a:	4698      	mov	r8, r3
    978c:	46a1      	mov	r9, r4
    978e:	eb18 0805 	adds.w	r8, r8, r5
    9792:	eb49 0906 	adc.w	r9, r9, r6
    9796:	f04f 0100 	mov.w	r1, #0
    979a:	f04f 0200 	mov.w	r2, #0
    979e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
    97a2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
    97a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
    97aa:	4688      	mov	r8, r1
    97ac:	4691      	mov	r9, r2
    97ae:	eb18 0005 	adds.w	r0, r8, r5
    97b2:	eb49 0106 	adc.w	r1, r9, r6
    97b6:	687b      	ldr	r3, [r7, #4]
    97b8:	685b      	ldr	r3, [r3, #4]
    97ba:	461d      	mov	r5, r3
    97bc:	f04f 0600 	mov.w	r6, #0
    97c0:	196b      	adds	r3, r5, r5
    97c2:	eb46 0406 	adc.w	r4, r6, r6
    97c6:	461a      	mov	r2, r3
    97c8:	4623      	mov	r3, r4
    97ca:	f000 fb91 	bl	9ef0 <__aeabi_uldivmod>
    97ce:	4603      	mov	r3, r0
    97d0:	460c      	mov	r4, r1
    97d2:	461a      	mov	r2, r3
    97d4:	4ba5      	ldr	r3, [pc, #660]	; (9a6c <UART_SetConfig+0x384>)
    97d6:	fba3 2302 	umull	r2, r3, r3, r2
    97da:	095b      	lsrs	r3, r3, #5
    97dc:	ea4f 1803 	mov.w	r8, r3, lsl #4
    97e0:	68bb      	ldr	r3, [r7, #8]
    97e2:	461d      	mov	r5, r3
    97e4:	f04f 0600 	mov.w	r6, #0
    97e8:	46a9      	mov	r9, r5
    97ea:	46b2      	mov	sl, r6
    97ec:	eb19 0309 	adds.w	r3, r9, r9
    97f0:	eb4a 040a 	adc.w	r4, sl, sl
    97f4:	4699      	mov	r9, r3
    97f6:	46a2      	mov	sl, r4
    97f8:	eb19 0905 	adds.w	r9, r9, r5
    97fc:	eb4a 0a06 	adc.w	sl, sl, r6
    9800:	f04f 0100 	mov.w	r1, #0
    9804:	f04f 0200 	mov.w	r2, #0
    9808:	ea4f 02ca 	mov.w	r2, sl, lsl #3
    980c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
    9810:	ea4f 01c9 	mov.w	r1, r9, lsl #3
    9814:	4689      	mov	r9, r1
    9816:	4692      	mov	sl, r2
    9818:	eb19 0005 	adds.w	r0, r9, r5
    981c:	eb4a 0106 	adc.w	r1, sl, r6
    9820:	687b      	ldr	r3, [r7, #4]
    9822:	685b      	ldr	r3, [r3, #4]
    9824:	461d      	mov	r5, r3
    9826:	f04f 0600 	mov.w	r6, #0
    982a:	196b      	adds	r3, r5, r5
    982c:	eb46 0406 	adc.w	r4, r6, r6
    9830:	461a      	mov	r2, r3
    9832:	4623      	mov	r3, r4
    9834:	f000 fb5c 	bl	9ef0 <__aeabi_uldivmod>
    9838:	4603      	mov	r3, r0
    983a:	460c      	mov	r4, r1
    983c:	461a      	mov	r2, r3
    983e:	4b8b      	ldr	r3, [pc, #556]	; (9a6c <UART_SetConfig+0x384>)
    9840:	fba3 1302 	umull	r1, r3, r3, r2
    9844:	095b      	lsrs	r3, r3, #5
    9846:	2164      	movs	r1, #100	; 0x64
    9848:	fb01 f303 	mul.w	r3, r1, r3
    984c:	1ad3      	subs	r3, r2, r3
    984e:	00db      	lsls	r3, r3, #3
    9850:	3332      	adds	r3, #50	; 0x32
    9852:	4a86      	ldr	r2, [pc, #536]	; (9a6c <UART_SetConfig+0x384>)
    9854:	fba2 2303 	umull	r2, r3, r2, r3
    9858:	095b      	lsrs	r3, r3, #5
    985a:	005b      	lsls	r3, r3, #1
    985c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
    9860:	4498      	add	r8, r3
    9862:	68bb      	ldr	r3, [r7, #8]
    9864:	461d      	mov	r5, r3
    9866:	f04f 0600 	mov.w	r6, #0
    986a:	46a9      	mov	r9, r5
    986c:	46b2      	mov	sl, r6
    986e:	eb19 0309 	adds.w	r3, r9, r9
    9872:	eb4a 040a 	adc.w	r4, sl, sl
    9876:	4699      	mov	r9, r3
    9878:	46a2      	mov	sl, r4
    987a:	eb19 0905 	adds.w	r9, r9, r5
    987e:	eb4a 0a06 	adc.w	sl, sl, r6
    9882:	f04f 0100 	mov.w	r1, #0
    9886:	f04f 0200 	mov.w	r2, #0
    988a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
    988e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
    9892:	ea4f 01c9 	mov.w	r1, r9, lsl #3
    9896:	4689      	mov	r9, r1
    9898:	4692      	mov	sl, r2
    989a:	eb19 0005 	adds.w	r0, r9, r5
    989e:	eb4a 0106 	adc.w	r1, sl, r6
    98a2:	687b      	ldr	r3, [r7, #4]
    98a4:	685b      	ldr	r3, [r3, #4]
    98a6:	461d      	mov	r5, r3
    98a8:	f04f 0600 	mov.w	r6, #0
    98ac:	196b      	adds	r3, r5, r5
    98ae:	eb46 0406 	adc.w	r4, r6, r6
    98b2:	461a      	mov	r2, r3
    98b4:	4623      	mov	r3, r4
    98b6:	f000 fb1b 	bl	9ef0 <__aeabi_uldivmod>
    98ba:	4603      	mov	r3, r0
    98bc:	460c      	mov	r4, r1
    98be:	461a      	mov	r2, r3
    98c0:	4b6a      	ldr	r3, [pc, #424]	; (9a6c <UART_SetConfig+0x384>)
    98c2:	fba3 1302 	umull	r1, r3, r3, r2
    98c6:	095b      	lsrs	r3, r3, #5
    98c8:	2164      	movs	r1, #100	; 0x64
    98ca:	fb01 f303 	mul.w	r3, r1, r3
    98ce:	1ad3      	subs	r3, r2, r3
    98d0:	00db      	lsls	r3, r3, #3
    98d2:	3332      	adds	r3, #50	; 0x32
    98d4:	4a65      	ldr	r2, [pc, #404]	; (9a6c <UART_SetConfig+0x384>)
    98d6:	fba2 2303 	umull	r2, r3, r2, r3
    98da:	095b      	lsrs	r3, r3, #5
    98dc:	f003 0207 	and.w	r2, r3, #7
    98e0:	687b      	ldr	r3, [r7, #4]
    98e2:	681b      	ldr	r3, [r3, #0]
    98e4:	4442      	add	r2, r8
    98e6:	609a      	str	r2, [r3, #8]
    98e8:	e26f      	b.n	9dca <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    98ea:	f7ff fd7b 	bl	93e4 <HAL_RCC_GetPCLK1Freq>
    98ee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    98f0:	68bb      	ldr	r3, [r7, #8]
    98f2:	461d      	mov	r5, r3
    98f4:	f04f 0600 	mov.w	r6, #0
    98f8:	46a8      	mov	r8, r5
    98fa:	46b1      	mov	r9, r6
    98fc:	eb18 0308 	adds.w	r3, r8, r8
    9900:	eb49 0409 	adc.w	r4, r9, r9
    9904:	4698      	mov	r8, r3
    9906:	46a1      	mov	r9, r4
    9908:	eb18 0805 	adds.w	r8, r8, r5
    990c:	eb49 0906 	adc.w	r9, r9, r6
    9910:	f04f 0100 	mov.w	r1, #0
    9914:	f04f 0200 	mov.w	r2, #0
    9918:	ea4f 02c9 	mov.w	r2, r9, lsl #3
    991c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
    9920:	ea4f 01c8 	mov.w	r1, r8, lsl #3
    9924:	4688      	mov	r8, r1
    9926:	4691      	mov	r9, r2
    9928:	eb18 0005 	adds.w	r0, r8, r5
    992c:	eb49 0106 	adc.w	r1, r9, r6
    9930:	687b      	ldr	r3, [r7, #4]
    9932:	685b      	ldr	r3, [r3, #4]
    9934:	461d      	mov	r5, r3
    9936:	f04f 0600 	mov.w	r6, #0
    993a:	196b      	adds	r3, r5, r5
    993c:	eb46 0406 	adc.w	r4, r6, r6
    9940:	461a      	mov	r2, r3
    9942:	4623      	mov	r3, r4
    9944:	f000 fad4 	bl	9ef0 <__aeabi_uldivmod>
    9948:	4603      	mov	r3, r0
    994a:	460c      	mov	r4, r1
    994c:	461a      	mov	r2, r3
    994e:	4b47      	ldr	r3, [pc, #284]	; (9a6c <UART_SetConfig+0x384>)
    9950:	fba3 2302 	umull	r2, r3, r3, r2
    9954:	095b      	lsrs	r3, r3, #5
    9956:	ea4f 1803 	mov.w	r8, r3, lsl #4
    995a:	68bb      	ldr	r3, [r7, #8]
    995c:	461d      	mov	r5, r3
    995e:	f04f 0600 	mov.w	r6, #0
    9962:	46a9      	mov	r9, r5
    9964:	46b2      	mov	sl, r6
    9966:	eb19 0309 	adds.w	r3, r9, r9
    996a:	eb4a 040a 	adc.w	r4, sl, sl
    996e:	4699      	mov	r9, r3
    9970:	46a2      	mov	sl, r4
    9972:	eb19 0905 	adds.w	r9, r9, r5
    9976:	eb4a 0a06 	adc.w	sl, sl, r6
    997a:	f04f 0100 	mov.w	r1, #0
    997e:	f04f 0200 	mov.w	r2, #0
    9982:	ea4f 02ca 	mov.w	r2, sl, lsl #3
    9986:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
    998a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
    998e:	4689      	mov	r9, r1
    9990:	4692      	mov	sl, r2
    9992:	eb19 0005 	adds.w	r0, r9, r5
    9996:	eb4a 0106 	adc.w	r1, sl, r6
    999a:	687b      	ldr	r3, [r7, #4]
    999c:	685b      	ldr	r3, [r3, #4]
    999e:	461d      	mov	r5, r3
    99a0:	f04f 0600 	mov.w	r6, #0
    99a4:	196b      	adds	r3, r5, r5
    99a6:	eb46 0406 	adc.w	r4, r6, r6
    99aa:	461a      	mov	r2, r3
    99ac:	4623      	mov	r3, r4
    99ae:	f000 fa9f 	bl	9ef0 <__aeabi_uldivmod>
    99b2:	4603      	mov	r3, r0
    99b4:	460c      	mov	r4, r1
    99b6:	461a      	mov	r2, r3
    99b8:	4b2c      	ldr	r3, [pc, #176]	; (9a6c <UART_SetConfig+0x384>)
    99ba:	fba3 1302 	umull	r1, r3, r3, r2
    99be:	095b      	lsrs	r3, r3, #5
    99c0:	2164      	movs	r1, #100	; 0x64
    99c2:	fb01 f303 	mul.w	r3, r1, r3
    99c6:	1ad3      	subs	r3, r2, r3
    99c8:	00db      	lsls	r3, r3, #3
    99ca:	3332      	adds	r3, #50	; 0x32
    99cc:	4a27      	ldr	r2, [pc, #156]	; (9a6c <UART_SetConfig+0x384>)
    99ce:	fba2 2303 	umull	r2, r3, r2, r3
    99d2:	095b      	lsrs	r3, r3, #5
    99d4:	005b      	lsls	r3, r3, #1
    99d6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
    99da:	4498      	add	r8, r3
    99dc:	68bb      	ldr	r3, [r7, #8]
    99de:	461d      	mov	r5, r3
    99e0:	f04f 0600 	mov.w	r6, #0
    99e4:	46a9      	mov	r9, r5
    99e6:	46b2      	mov	sl, r6
    99e8:	eb19 0309 	adds.w	r3, r9, r9
    99ec:	eb4a 040a 	adc.w	r4, sl, sl
    99f0:	4699      	mov	r9, r3
    99f2:	46a2      	mov	sl, r4
    99f4:	eb19 0905 	adds.w	r9, r9, r5
    99f8:	eb4a 0a06 	adc.w	sl, sl, r6
    99fc:	f04f 0100 	mov.w	r1, #0
    9a00:	f04f 0200 	mov.w	r2, #0
    9a04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
    9a08:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
    9a0c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
    9a10:	4689      	mov	r9, r1
    9a12:	4692      	mov	sl, r2
    9a14:	eb19 0005 	adds.w	r0, r9, r5
    9a18:	eb4a 0106 	adc.w	r1, sl, r6
    9a1c:	687b      	ldr	r3, [r7, #4]
    9a1e:	685b      	ldr	r3, [r3, #4]
    9a20:	461d      	mov	r5, r3
    9a22:	f04f 0600 	mov.w	r6, #0
    9a26:	196b      	adds	r3, r5, r5
    9a28:	eb46 0406 	adc.w	r4, r6, r6
    9a2c:	461a      	mov	r2, r3
    9a2e:	4623      	mov	r3, r4
    9a30:	f000 fa5e 	bl	9ef0 <__aeabi_uldivmod>
    9a34:	4603      	mov	r3, r0
    9a36:	460c      	mov	r4, r1
    9a38:	461a      	mov	r2, r3
    9a3a:	4b0c      	ldr	r3, [pc, #48]	; (9a6c <UART_SetConfig+0x384>)
    9a3c:	fba3 1302 	umull	r1, r3, r3, r2
    9a40:	095b      	lsrs	r3, r3, #5
    9a42:	2164      	movs	r1, #100	; 0x64
    9a44:	fb01 f303 	mul.w	r3, r1, r3
    9a48:	1ad3      	subs	r3, r2, r3
    9a4a:	00db      	lsls	r3, r3, #3
    9a4c:	3332      	adds	r3, #50	; 0x32
    9a4e:	4a07      	ldr	r2, [pc, #28]	; (9a6c <UART_SetConfig+0x384>)
    9a50:	fba2 2303 	umull	r2, r3, r2, r3
    9a54:	095b      	lsrs	r3, r3, #5
    9a56:	f003 0207 	and.w	r2, r3, #7
    9a5a:	687b      	ldr	r3, [r7, #4]
    9a5c:	681b      	ldr	r3, [r3, #0]
    9a5e:	4442      	add	r2, r8
    9a60:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
    9a62:	e1b2      	b.n	9dca <UART_SetConfig+0x6e2>
    9a64:	40011000 	.word	0x40011000
    9a68:	40011400 	.word	0x40011400
    9a6c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
    9a70:	687b      	ldr	r3, [r7, #4]
    9a72:	681b      	ldr	r3, [r3, #0]
    9a74:	4ad7      	ldr	r2, [pc, #860]	; (9dd4 <UART_SetConfig+0x6ec>)
    9a76:	4293      	cmp	r3, r2
    9a78:	d005      	beq.n	9a86 <UART_SetConfig+0x39e>
    9a7a:	687b      	ldr	r3, [r7, #4]
    9a7c:	681b      	ldr	r3, [r3, #0]
    9a7e:	4ad6      	ldr	r2, [pc, #856]	; (9dd8 <UART_SetConfig+0x6f0>)
    9a80:	4293      	cmp	r3, r2
    9a82:	f040 80d1 	bne.w	9c28 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
    9a86:	f7ff fcc1 	bl	940c <HAL_RCC_GetPCLK2Freq>
    9a8a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    9a8c:	68bb      	ldr	r3, [r7, #8]
    9a8e:	469a      	mov	sl, r3
    9a90:	f04f 0b00 	mov.w	fp, #0
    9a94:	46d0      	mov	r8, sl
    9a96:	46d9      	mov	r9, fp
    9a98:	eb18 0308 	adds.w	r3, r8, r8
    9a9c:	eb49 0409 	adc.w	r4, r9, r9
    9aa0:	4698      	mov	r8, r3
    9aa2:	46a1      	mov	r9, r4
    9aa4:	eb18 080a 	adds.w	r8, r8, sl
    9aa8:	eb49 090b 	adc.w	r9, r9, fp
    9aac:	f04f 0100 	mov.w	r1, #0
    9ab0:	f04f 0200 	mov.w	r2, #0
    9ab4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
    9ab8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
    9abc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
    9ac0:	4688      	mov	r8, r1
    9ac2:	4691      	mov	r9, r2
    9ac4:	eb1a 0508 	adds.w	r5, sl, r8
    9ac8:	eb4b 0609 	adc.w	r6, fp, r9
    9acc:	687b      	ldr	r3, [r7, #4]
    9ace:	685b      	ldr	r3, [r3, #4]
    9ad0:	4619      	mov	r1, r3
    9ad2:	f04f 0200 	mov.w	r2, #0
    9ad6:	f04f 0300 	mov.w	r3, #0
    9ada:	f04f 0400 	mov.w	r4, #0
    9ade:	0094      	lsls	r4, r2, #2
    9ae0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
    9ae4:	008b      	lsls	r3, r1, #2
    9ae6:	461a      	mov	r2, r3
    9ae8:	4623      	mov	r3, r4
    9aea:	4628      	mov	r0, r5
    9aec:	4631      	mov	r1, r6
    9aee:	f000 f9ff 	bl	9ef0 <__aeabi_uldivmod>
    9af2:	4603      	mov	r3, r0
    9af4:	460c      	mov	r4, r1
    9af6:	461a      	mov	r2, r3
    9af8:	4bb8      	ldr	r3, [pc, #736]	; (9ddc <UART_SetConfig+0x6f4>)
    9afa:	fba3 2302 	umull	r2, r3, r3, r2
    9afe:	095b      	lsrs	r3, r3, #5
    9b00:	ea4f 1803 	mov.w	r8, r3, lsl #4
    9b04:	68bb      	ldr	r3, [r7, #8]
    9b06:	469b      	mov	fp, r3
    9b08:	f04f 0c00 	mov.w	ip, #0
    9b0c:	46d9      	mov	r9, fp
    9b0e:	46e2      	mov	sl, ip
    9b10:	eb19 0309 	adds.w	r3, r9, r9
    9b14:	eb4a 040a 	adc.w	r4, sl, sl
    9b18:	4699      	mov	r9, r3
    9b1a:	46a2      	mov	sl, r4
    9b1c:	eb19 090b 	adds.w	r9, r9, fp
    9b20:	eb4a 0a0c 	adc.w	sl, sl, ip
    9b24:	f04f 0100 	mov.w	r1, #0
    9b28:	f04f 0200 	mov.w	r2, #0
    9b2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
    9b30:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
    9b34:	ea4f 01c9 	mov.w	r1, r9, lsl #3
    9b38:	4689      	mov	r9, r1
    9b3a:	4692      	mov	sl, r2
    9b3c:	eb1b 0509 	adds.w	r5, fp, r9
    9b40:	eb4c 060a 	adc.w	r6, ip, sl
    9b44:	687b      	ldr	r3, [r7, #4]
    9b46:	685b      	ldr	r3, [r3, #4]
    9b48:	4619      	mov	r1, r3
    9b4a:	f04f 0200 	mov.w	r2, #0
    9b4e:	f04f 0300 	mov.w	r3, #0
    9b52:	f04f 0400 	mov.w	r4, #0
    9b56:	0094      	lsls	r4, r2, #2
    9b58:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
    9b5c:	008b      	lsls	r3, r1, #2
    9b5e:	461a      	mov	r2, r3
    9b60:	4623      	mov	r3, r4
    9b62:	4628      	mov	r0, r5
    9b64:	4631      	mov	r1, r6
    9b66:	f000 f9c3 	bl	9ef0 <__aeabi_uldivmod>
    9b6a:	4603      	mov	r3, r0
    9b6c:	460c      	mov	r4, r1
    9b6e:	461a      	mov	r2, r3
    9b70:	4b9a      	ldr	r3, [pc, #616]	; (9ddc <UART_SetConfig+0x6f4>)
    9b72:	fba3 1302 	umull	r1, r3, r3, r2
    9b76:	095b      	lsrs	r3, r3, #5
    9b78:	2164      	movs	r1, #100	; 0x64
    9b7a:	fb01 f303 	mul.w	r3, r1, r3
    9b7e:	1ad3      	subs	r3, r2, r3
    9b80:	011b      	lsls	r3, r3, #4
    9b82:	3332      	adds	r3, #50	; 0x32
    9b84:	4a95      	ldr	r2, [pc, #596]	; (9ddc <UART_SetConfig+0x6f4>)
    9b86:	fba2 2303 	umull	r2, r3, r2, r3
    9b8a:	095b      	lsrs	r3, r3, #5
    9b8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    9b90:	4498      	add	r8, r3
    9b92:	68bb      	ldr	r3, [r7, #8]
    9b94:	469b      	mov	fp, r3
    9b96:	f04f 0c00 	mov.w	ip, #0
    9b9a:	46d9      	mov	r9, fp
    9b9c:	46e2      	mov	sl, ip
    9b9e:	eb19 0309 	adds.w	r3, r9, r9
    9ba2:	eb4a 040a 	adc.w	r4, sl, sl
    9ba6:	4699      	mov	r9, r3
    9ba8:	46a2      	mov	sl, r4
    9baa:	eb19 090b 	adds.w	r9, r9, fp
    9bae:	eb4a 0a0c 	adc.w	sl, sl, ip
    9bb2:	f04f 0100 	mov.w	r1, #0
    9bb6:	f04f 0200 	mov.w	r2, #0
    9bba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
    9bbe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
    9bc2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
    9bc6:	4689      	mov	r9, r1
    9bc8:	4692      	mov	sl, r2
    9bca:	eb1b 0509 	adds.w	r5, fp, r9
    9bce:	eb4c 060a 	adc.w	r6, ip, sl
    9bd2:	687b      	ldr	r3, [r7, #4]
    9bd4:	685b      	ldr	r3, [r3, #4]
    9bd6:	4619      	mov	r1, r3
    9bd8:	f04f 0200 	mov.w	r2, #0
    9bdc:	f04f 0300 	mov.w	r3, #0
    9be0:	f04f 0400 	mov.w	r4, #0
    9be4:	0094      	lsls	r4, r2, #2
    9be6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
    9bea:	008b      	lsls	r3, r1, #2
    9bec:	461a      	mov	r2, r3
    9bee:	4623      	mov	r3, r4
    9bf0:	4628      	mov	r0, r5
    9bf2:	4631      	mov	r1, r6
    9bf4:	f000 f97c 	bl	9ef0 <__aeabi_uldivmod>
    9bf8:	4603      	mov	r3, r0
    9bfa:	460c      	mov	r4, r1
    9bfc:	461a      	mov	r2, r3
    9bfe:	4b77      	ldr	r3, [pc, #476]	; (9ddc <UART_SetConfig+0x6f4>)
    9c00:	fba3 1302 	umull	r1, r3, r3, r2
    9c04:	095b      	lsrs	r3, r3, #5
    9c06:	2164      	movs	r1, #100	; 0x64
    9c08:	fb01 f303 	mul.w	r3, r1, r3
    9c0c:	1ad3      	subs	r3, r2, r3
    9c0e:	011b      	lsls	r3, r3, #4
    9c10:	3332      	adds	r3, #50	; 0x32
    9c12:	4a72      	ldr	r2, [pc, #456]	; (9ddc <UART_SetConfig+0x6f4>)
    9c14:	fba2 2303 	umull	r2, r3, r2, r3
    9c18:	095b      	lsrs	r3, r3, #5
    9c1a:	f003 020f 	and.w	r2, r3, #15
    9c1e:	687b      	ldr	r3, [r7, #4]
    9c20:	681b      	ldr	r3, [r3, #0]
    9c22:	4442      	add	r2, r8
    9c24:	609a      	str	r2, [r3, #8]
    9c26:	e0d0      	b.n	9dca <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
    9c28:	f7ff fbdc 	bl	93e4 <HAL_RCC_GetPCLK1Freq>
    9c2c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    9c2e:	68bb      	ldr	r3, [r7, #8]
    9c30:	469a      	mov	sl, r3
    9c32:	f04f 0b00 	mov.w	fp, #0
    9c36:	46d0      	mov	r8, sl
    9c38:	46d9      	mov	r9, fp
    9c3a:	eb18 0308 	adds.w	r3, r8, r8
    9c3e:	eb49 0409 	adc.w	r4, r9, r9
    9c42:	4698      	mov	r8, r3
    9c44:	46a1      	mov	r9, r4
    9c46:	eb18 080a 	adds.w	r8, r8, sl
    9c4a:	eb49 090b 	adc.w	r9, r9, fp
    9c4e:	f04f 0100 	mov.w	r1, #0
    9c52:	f04f 0200 	mov.w	r2, #0
    9c56:	ea4f 02c9 	mov.w	r2, r9, lsl #3
    9c5a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
    9c5e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
    9c62:	4688      	mov	r8, r1
    9c64:	4691      	mov	r9, r2
    9c66:	eb1a 0508 	adds.w	r5, sl, r8
    9c6a:	eb4b 0609 	adc.w	r6, fp, r9
    9c6e:	687b      	ldr	r3, [r7, #4]
    9c70:	685b      	ldr	r3, [r3, #4]
    9c72:	4619      	mov	r1, r3
    9c74:	f04f 0200 	mov.w	r2, #0
    9c78:	f04f 0300 	mov.w	r3, #0
    9c7c:	f04f 0400 	mov.w	r4, #0
    9c80:	0094      	lsls	r4, r2, #2
    9c82:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
    9c86:	008b      	lsls	r3, r1, #2
    9c88:	461a      	mov	r2, r3
    9c8a:	4623      	mov	r3, r4
    9c8c:	4628      	mov	r0, r5
    9c8e:	4631      	mov	r1, r6
    9c90:	f000 f92e 	bl	9ef0 <__aeabi_uldivmod>
    9c94:	4603      	mov	r3, r0
    9c96:	460c      	mov	r4, r1
    9c98:	461a      	mov	r2, r3
    9c9a:	4b50      	ldr	r3, [pc, #320]	; (9ddc <UART_SetConfig+0x6f4>)
    9c9c:	fba3 2302 	umull	r2, r3, r3, r2
    9ca0:	095b      	lsrs	r3, r3, #5
    9ca2:	ea4f 1803 	mov.w	r8, r3, lsl #4
    9ca6:	68bb      	ldr	r3, [r7, #8]
    9ca8:	469b      	mov	fp, r3
    9caa:	f04f 0c00 	mov.w	ip, #0
    9cae:	46d9      	mov	r9, fp
    9cb0:	46e2      	mov	sl, ip
    9cb2:	eb19 0309 	adds.w	r3, r9, r9
    9cb6:	eb4a 040a 	adc.w	r4, sl, sl
    9cba:	4699      	mov	r9, r3
    9cbc:	46a2      	mov	sl, r4
    9cbe:	eb19 090b 	adds.w	r9, r9, fp
    9cc2:	eb4a 0a0c 	adc.w	sl, sl, ip
    9cc6:	f04f 0100 	mov.w	r1, #0
    9cca:	f04f 0200 	mov.w	r2, #0
    9cce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
    9cd2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
    9cd6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
    9cda:	4689      	mov	r9, r1
    9cdc:	4692      	mov	sl, r2
    9cde:	eb1b 0509 	adds.w	r5, fp, r9
    9ce2:	eb4c 060a 	adc.w	r6, ip, sl
    9ce6:	687b      	ldr	r3, [r7, #4]
    9ce8:	685b      	ldr	r3, [r3, #4]
    9cea:	4619      	mov	r1, r3
    9cec:	f04f 0200 	mov.w	r2, #0
    9cf0:	f04f 0300 	mov.w	r3, #0
    9cf4:	f04f 0400 	mov.w	r4, #0
    9cf8:	0094      	lsls	r4, r2, #2
    9cfa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
    9cfe:	008b      	lsls	r3, r1, #2
    9d00:	461a      	mov	r2, r3
    9d02:	4623      	mov	r3, r4
    9d04:	4628      	mov	r0, r5
    9d06:	4631      	mov	r1, r6
    9d08:	f000 f8f2 	bl	9ef0 <__aeabi_uldivmod>
    9d0c:	4603      	mov	r3, r0
    9d0e:	460c      	mov	r4, r1
    9d10:	461a      	mov	r2, r3
    9d12:	4b32      	ldr	r3, [pc, #200]	; (9ddc <UART_SetConfig+0x6f4>)
    9d14:	fba3 1302 	umull	r1, r3, r3, r2
    9d18:	095b      	lsrs	r3, r3, #5
    9d1a:	2164      	movs	r1, #100	; 0x64
    9d1c:	fb01 f303 	mul.w	r3, r1, r3
    9d20:	1ad3      	subs	r3, r2, r3
    9d22:	011b      	lsls	r3, r3, #4
    9d24:	3332      	adds	r3, #50	; 0x32
    9d26:	4a2d      	ldr	r2, [pc, #180]	; (9ddc <UART_SetConfig+0x6f4>)
    9d28:	fba2 2303 	umull	r2, r3, r2, r3
    9d2c:	095b      	lsrs	r3, r3, #5
    9d2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    9d32:	4498      	add	r8, r3
    9d34:	68bb      	ldr	r3, [r7, #8]
    9d36:	469b      	mov	fp, r3
    9d38:	f04f 0c00 	mov.w	ip, #0
    9d3c:	46d9      	mov	r9, fp
    9d3e:	46e2      	mov	sl, ip
    9d40:	eb19 0309 	adds.w	r3, r9, r9
    9d44:	eb4a 040a 	adc.w	r4, sl, sl
    9d48:	4699      	mov	r9, r3
    9d4a:	46a2      	mov	sl, r4
    9d4c:	eb19 090b 	adds.w	r9, r9, fp
    9d50:	eb4a 0a0c 	adc.w	sl, sl, ip
    9d54:	f04f 0100 	mov.w	r1, #0
    9d58:	f04f 0200 	mov.w	r2, #0
    9d5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
    9d60:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
    9d64:	ea4f 01c9 	mov.w	r1, r9, lsl #3
    9d68:	4689      	mov	r9, r1
    9d6a:	4692      	mov	sl, r2
    9d6c:	eb1b 0509 	adds.w	r5, fp, r9
    9d70:	eb4c 060a 	adc.w	r6, ip, sl
    9d74:	687b      	ldr	r3, [r7, #4]
    9d76:	685b      	ldr	r3, [r3, #4]
    9d78:	4619      	mov	r1, r3
    9d7a:	f04f 0200 	mov.w	r2, #0
    9d7e:	f04f 0300 	mov.w	r3, #0
    9d82:	f04f 0400 	mov.w	r4, #0
    9d86:	0094      	lsls	r4, r2, #2
    9d88:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
    9d8c:	008b      	lsls	r3, r1, #2
    9d8e:	461a      	mov	r2, r3
    9d90:	4623      	mov	r3, r4
    9d92:	4628      	mov	r0, r5
    9d94:	4631      	mov	r1, r6
    9d96:	f000 f8ab 	bl	9ef0 <__aeabi_uldivmod>
    9d9a:	4603      	mov	r3, r0
    9d9c:	460c      	mov	r4, r1
    9d9e:	461a      	mov	r2, r3
    9da0:	4b0e      	ldr	r3, [pc, #56]	; (9ddc <UART_SetConfig+0x6f4>)
    9da2:	fba3 1302 	umull	r1, r3, r3, r2
    9da6:	095b      	lsrs	r3, r3, #5
    9da8:	2164      	movs	r1, #100	; 0x64
    9daa:	fb01 f303 	mul.w	r3, r1, r3
    9dae:	1ad3      	subs	r3, r2, r3
    9db0:	011b      	lsls	r3, r3, #4
    9db2:	3332      	adds	r3, #50	; 0x32
    9db4:	4a09      	ldr	r2, [pc, #36]	; (9ddc <UART_SetConfig+0x6f4>)
    9db6:	fba2 2303 	umull	r2, r3, r2, r3
    9dba:	095b      	lsrs	r3, r3, #5
    9dbc:	f003 020f 	and.w	r2, r3, #15
    9dc0:	687b      	ldr	r3, [r7, #4]
    9dc2:	681b      	ldr	r3, [r3, #0]
    9dc4:	4442      	add	r2, r8
    9dc6:	609a      	str	r2, [r3, #8]
}
    9dc8:	e7ff      	b.n	9dca <UART_SetConfig+0x6e2>
    9dca:	bf00      	nop
    9dcc:	3714      	adds	r7, #20
    9dce:	46bd      	mov	sp, r7
    9dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9dd4:	40011000 	.word	0x40011000
    9dd8:	40011400 	.word	0x40011400
    9ddc:	51eb851f 	.word	0x51eb851f

00009de0 <_ZdlPvj>:
    9de0:	f000 b800 	b.w	9de4 <_ZdlPv>

00009de4 <_ZdlPv>:
    9de4:	f000 b824 	b.w	9e30 <free>

00009de8 <__libc_init_array>:
    9de8:	b570      	push	{r4, r5, r6, lr}
    9dea:	4e0d      	ldr	r6, [pc, #52]	; (9e20 <__libc_init_array+0x38>)
    9dec:	4c0d      	ldr	r4, [pc, #52]	; (9e24 <__libc_init_array+0x3c>)
    9dee:	1ba4      	subs	r4, r4, r6
    9df0:	10a4      	asrs	r4, r4, #2
    9df2:	2500      	movs	r5, #0
    9df4:	42a5      	cmp	r5, r4
    9df6:	d109      	bne.n	9e0c <__libc_init_array+0x24>
    9df8:	4e0b      	ldr	r6, [pc, #44]	; (9e28 <__libc_init_array+0x40>)
    9dfa:	4c0c      	ldr	r4, [pc, #48]	; (9e2c <__libc_init_array+0x44>)
    9dfc:	f7fe f900 	bl	8000 <_init>
    9e00:	1ba4      	subs	r4, r4, r6
    9e02:	10a4      	asrs	r4, r4, #2
    9e04:	2500      	movs	r5, #0
    9e06:	42a5      	cmp	r5, r4
    9e08:	d105      	bne.n	9e16 <__libc_init_array+0x2e>
    9e0a:	bd70      	pop	{r4, r5, r6, pc}
    9e0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    9e10:	4798      	blx	r3
    9e12:	3501      	adds	r5, #1
    9e14:	e7ee      	b.n	9df4 <__libc_init_array+0xc>
    9e16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    9e1a:	4798      	blx	r3
    9e1c:	3501      	adds	r5, #1
    9e1e:	e7f2      	b.n	9e06 <__libc_init_array+0x1e>
    9e20:	0001a238 	.word	0x0001a238
    9e24:	0001a238 	.word	0x0001a238
    9e28:	0001a238 	.word	0x0001a238
    9e2c:	0001a240 	.word	0x0001a240

00009e30 <free>:
    9e30:	4b02      	ldr	r3, [pc, #8]	; (9e3c <free+0xc>)
    9e32:	4601      	mov	r1, r0
    9e34:	6818      	ldr	r0, [r3, #0]
    9e36:	f000 b80b 	b.w	9e50 <_free_r>
    9e3a:	bf00      	nop
    9e3c:	0001a254 	.word	0x0001a254

00009e40 <memset>:
    9e40:	4402      	add	r2, r0
    9e42:	4603      	mov	r3, r0
    9e44:	4293      	cmp	r3, r2
    9e46:	d100      	bne.n	9e4a <memset+0xa>
    9e48:	4770      	bx	lr
    9e4a:	f803 1b01 	strb.w	r1, [r3], #1
    9e4e:	e7f9      	b.n	9e44 <memset+0x4>

00009e50 <_free_r>:
    9e50:	b538      	push	{r3, r4, r5, lr}
    9e52:	4605      	mov	r5, r0
    9e54:	2900      	cmp	r1, #0
    9e56:	d045      	beq.n	9ee4 <_free_r+0x94>
    9e58:	f851 3c04 	ldr.w	r3, [r1, #-4]
    9e5c:	1f0c      	subs	r4, r1, #4
    9e5e:	2b00      	cmp	r3, #0
    9e60:	bfb8      	it	lt
    9e62:	18e4      	addlt	r4, r4, r3
    9e64:	f000 f842 	bl	9eec <__malloc_lock>
    9e68:	4a1f      	ldr	r2, [pc, #124]	; (9ee8 <_free_r+0x98>)
    9e6a:	6813      	ldr	r3, [r2, #0]
    9e6c:	4610      	mov	r0, r2
    9e6e:	b933      	cbnz	r3, 9e7e <_free_r+0x2e>
    9e70:	6063      	str	r3, [r4, #4]
    9e72:	6014      	str	r4, [r2, #0]
    9e74:	4628      	mov	r0, r5
    9e76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9e7a:	f000 b838 	b.w	9eee <__malloc_unlock>
    9e7e:	42a3      	cmp	r3, r4
    9e80:	d90c      	bls.n	9e9c <_free_r+0x4c>
    9e82:	6821      	ldr	r1, [r4, #0]
    9e84:	1862      	adds	r2, r4, r1
    9e86:	4293      	cmp	r3, r2
    9e88:	bf04      	itt	eq
    9e8a:	681a      	ldreq	r2, [r3, #0]
    9e8c:	685b      	ldreq	r3, [r3, #4]
    9e8e:	6063      	str	r3, [r4, #4]
    9e90:	bf04      	itt	eq
    9e92:	1852      	addeq	r2, r2, r1
    9e94:	6022      	streq	r2, [r4, #0]
    9e96:	6004      	str	r4, [r0, #0]
    9e98:	e7ec      	b.n	9e74 <_free_r+0x24>
    9e9a:	4613      	mov	r3, r2
    9e9c:	685a      	ldr	r2, [r3, #4]
    9e9e:	b10a      	cbz	r2, 9ea4 <_free_r+0x54>
    9ea0:	42a2      	cmp	r2, r4
    9ea2:	d9fa      	bls.n	9e9a <_free_r+0x4a>
    9ea4:	6819      	ldr	r1, [r3, #0]
    9ea6:	1858      	adds	r0, r3, r1
    9ea8:	42a0      	cmp	r0, r4
    9eaa:	d10b      	bne.n	9ec4 <_free_r+0x74>
    9eac:	6820      	ldr	r0, [r4, #0]
    9eae:	4401      	add	r1, r0
    9eb0:	1858      	adds	r0, r3, r1
    9eb2:	4282      	cmp	r2, r0
    9eb4:	6019      	str	r1, [r3, #0]
    9eb6:	d1dd      	bne.n	9e74 <_free_r+0x24>
    9eb8:	6810      	ldr	r0, [r2, #0]
    9eba:	6852      	ldr	r2, [r2, #4]
    9ebc:	605a      	str	r2, [r3, #4]
    9ebe:	4401      	add	r1, r0
    9ec0:	6019      	str	r1, [r3, #0]
    9ec2:	e7d7      	b.n	9e74 <_free_r+0x24>
    9ec4:	d902      	bls.n	9ecc <_free_r+0x7c>
    9ec6:	230c      	movs	r3, #12
    9ec8:	602b      	str	r3, [r5, #0]
    9eca:	e7d3      	b.n	9e74 <_free_r+0x24>
    9ecc:	6820      	ldr	r0, [r4, #0]
    9ece:	1821      	adds	r1, r4, r0
    9ed0:	428a      	cmp	r2, r1
    9ed2:	bf04      	itt	eq
    9ed4:	6811      	ldreq	r1, [r2, #0]
    9ed6:	6852      	ldreq	r2, [r2, #4]
    9ed8:	6062      	str	r2, [r4, #4]
    9eda:	bf04      	itt	eq
    9edc:	1809      	addeq	r1, r1, r0
    9ede:	6021      	streq	r1, [r4, #0]
    9ee0:	605c      	str	r4, [r3, #4]
    9ee2:	e7c7      	b.n	9e74 <_free_r+0x24>
    9ee4:	bd38      	pop	{r3, r4, r5, pc}
    9ee6:	bf00      	nop
    9ee8:	0001a374 	.word	0x0001a374

00009eec <__malloc_lock>:
    9eec:	4770      	bx	lr

00009eee <__malloc_unlock>:
    9eee:	4770      	bx	lr

00009ef0 <__aeabi_uldivmod>:
    9ef0:	b953      	cbnz	r3, 9f08 <__aeabi_uldivmod+0x18>
    9ef2:	b94a      	cbnz	r2, 9f08 <__aeabi_uldivmod+0x18>
    9ef4:	2900      	cmp	r1, #0
    9ef6:	bf08      	it	eq
    9ef8:	2800      	cmpeq	r0, #0
    9efa:	bf1c      	itt	ne
    9efc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    9f00:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    9f04:	f000 b972 	b.w	a1ec <__aeabi_idiv0>
    9f08:	f1ad 0c08 	sub.w	ip, sp, #8
    9f0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    9f10:	f000 f806 	bl	9f20 <__udivmoddi4>
    9f14:	f8dd e004 	ldr.w	lr, [sp, #4]
    9f18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    9f1c:	b004      	add	sp, #16
    9f1e:	4770      	bx	lr

00009f20 <__udivmoddi4>:
    9f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9f24:	9e08      	ldr	r6, [sp, #32]
    9f26:	4604      	mov	r4, r0
    9f28:	4688      	mov	r8, r1
    9f2a:	2b00      	cmp	r3, #0
    9f2c:	d14b      	bne.n	9fc6 <__udivmoddi4+0xa6>
    9f2e:	428a      	cmp	r2, r1
    9f30:	4615      	mov	r5, r2
    9f32:	d967      	bls.n	a004 <__udivmoddi4+0xe4>
    9f34:	fab2 f282 	clz	r2, r2
    9f38:	b14a      	cbz	r2, 9f4e <__udivmoddi4+0x2e>
    9f3a:	f1c2 0720 	rsb	r7, r2, #32
    9f3e:	fa01 f302 	lsl.w	r3, r1, r2
    9f42:	fa20 f707 	lsr.w	r7, r0, r7
    9f46:	4095      	lsls	r5, r2
    9f48:	ea47 0803 	orr.w	r8, r7, r3
    9f4c:	4094      	lsls	r4, r2
    9f4e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    9f52:	0c23      	lsrs	r3, r4, #16
    9f54:	fbb8 f7fe 	udiv	r7, r8, lr
    9f58:	fa1f fc85 	uxth.w	ip, r5
    9f5c:	fb0e 8817 	mls	r8, lr, r7, r8
    9f60:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    9f64:	fb07 f10c 	mul.w	r1, r7, ip
    9f68:	4299      	cmp	r1, r3
    9f6a:	d909      	bls.n	9f80 <__udivmoddi4+0x60>
    9f6c:	18eb      	adds	r3, r5, r3
    9f6e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
    9f72:	f080 811b 	bcs.w	a1ac <__udivmoddi4+0x28c>
    9f76:	4299      	cmp	r1, r3
    9f78:	f240 8118 	bls.w	a1ac <__udivmoddi4+0x28c>
    9f7c:	3f02      	subs	r7, #2
    9f7e:	442b      	add	r3, r5
    9f80:	1a5b      	subs	r3, r3, r1
    9f82:	b2a4      	uxth	r4, r4
    9f84:	fbb3 f0fe 	udiv	r0, r3, lr
    9f88:	fb0e 3310 	mls	r3, lr, r0, r3
    9f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    9f90:	fb00 fc0c 	mul.w	ip, r0, ip
    9f94:	45a4      	cmp	ip, r4
    9f96:	d909      	bls.n	9fac <__udivmoddi4+0x8c>
    9f98:	192c      	adds	r4, r5, r4
    9f9a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    9f9e:	f080 8107 	bcs.w	a1b0 <__udivmoddi4+0x290>
    9fa2:	45a4      	cmp	ip, r4
    9fa4:	f240 8104 	bls.w	a1b0 <__udivmoddi4+0x290>
    9fa8:	3802      	subs	r0, #2
    9faa:	442c      	add	r4, r5
    9fac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    9fb0:	eba4 040c 	sub.w	r4, r4, ip
    9fb4:	2700      	movs	r7, #0
    9fb6:	b11e      	cbz	r6, 9fc0 <__udivmoddi4+0xa0>
    9fb8:	40d4      	lsrs	r4, r2
    9fba:	2300      	movs	r3, #0
    9fbc:	e9c6 4300 	strd	r4, r3, [r6]
    9fc0:	4639      	mov	r1, r7
    9fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9fc6:	428b      	cmp	r3, r1
    9fc8:	d909      	bls.n	9fde <__udivmoddi4+0xbe>
    9fca:	2e00      	cmp	r6, #0
    9fcc:	f000 80eb 	beq.w	a1a6 <__udivmoddi4+0x286>
    9fd0:	2700      	movs	r7, #0
    9fd2:	e9c6 0100 	strd	r0, r1, [r6]
    9fd6:	4638      	mov	r0, r7
    9fd8:	4639      	mov	r1, r7
    9fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9fde:	fab3 f783 	clz	r7, r3
    9fe2:	2f00      	cmp	r7, #0
    9fe4:	d147      	bne.n	a076 <__udivmoddi4+0x156>
    9fe6:	428b      	cmp	r3, r1
    9fe8:	d302      	bcc.n	9ff0 <__udivmoddi4+0xd0>
    9fea:	4282      	cmp	r2, r0
    9fec:	f200 80fa 	bhi.w	a1e4 <__udivmoddi4+0x2c4>
    9ff0:	1a84      	subs	r4, r0, r2
    9ff2:	eb61 0303 	sbc.w	r3, r1, r3
    9ff6:	2001      	movs	r0, #1
    9ff8:	4698      	mov	r8, r3
    9ffa:	2e00      	cmp	r6, #0
    9ffc:	d0e0      	beq.n	9fc0 <__udivmoddi4+0xa0>
    9ffe:	e9c6 4800 	strd	r4, r8, [r6]
    a002:	e7dd      	b.n	9fc0 <__udivmoddi4+0xa0>
    a004:	b902      	cbnz	r2, a008 <__udivmoddi4+0xe8>
    a006:	deff      	udf	#255	; 0xff
    a008:	fab2 f282 	clz	r2, r2
    a00c:	2a00      	cmp	r2, #0
    a00e:	f040 808f 	bne.w	a130 <__udivmoddi4+0x210>
    a012:	1b49      	subs	r1, r1, r5
    a014:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    a018:	fa1f f885 	uxth.w	r8, r5
    a01c:	2701      	movs	r7, #1
    a01e:	fbb1 fcfe 	udiv	ip, r1, lr
    a022:	0c23      	lsrs	r3, r4, #16
    a024:	fb0e 111c 	mls	r1, lr, ip, r1
    a028:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    a02c:	fb08 f10c 	mul.w	r1, r8, ip
    a030:	4299      	cmp	r1, r3
    a032:	d907      	bls.n	a044 <__udivmoddi4+0x124>
    a034:	18eb      	adds	r3, r5, r3
    a036:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    a03a:	d202      	bcs.n	a042 <__udivmoddi4+0x122>
    a03c:	4299      	cmp	r1, r3
    a03e:	f200 80cd 	bhi.w	a1dc <__udivmoddi4+0x2bc>
    a042:	4684      	mov	ip, r0
    a044:	1a59      	subs	r1, r3, r1
    a046:	b2a3      	uxth	r3, r4
    a048:	fbb1 f0fe 	udiv	r0, r1, lr
    a04c:	fb0e 1410 	mls	r4, lr, r0, r1
    a050:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    a054:	fb08 f800 	mul.w	r8, r8, r0
    a058:	45a0      	cmp	r8, r4
    a05a:	d907      	bls.n	a06c <__udivmoddi4+0x14c>
    a05c:	192c      	adds	r4, r5, r4
    a05e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    a062:	d202      	bcs.n	a06a <__udivmoddi4+0x14a>
    a064:	45a0      	cmp	r8, r4
    a066:	f200 80b6 	bhi.w	a1d6 <__udivmoddi4+0x2b6>
    a06a:	4618      	mov	r0, r3
    a06c:	eba4 0408 	sub.w	r4, r4, r8
    a070:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    a074:	e79f      	b.n	9fb6 <__udivmoddi4+0x96>
    a076:	f1c7 0c20 	rsb	ip, r7, #32
    a07a:	40bb      	lsls	r3, r7
    a07c:	fa22 fe0c 	lsr.w	lr, r2, ip
    a080:	ea4e 0e03 	orr.w	lr, lr, r3
    a084:	fa01 f407 	lsl.w	r4, r1, r7
    a088:	fa20 f50c 	lsr.w	r5, r0, ip
    a08c:	fa21 f30c 	lsr.w	r3, r1, ip
    a090:	ea4f 481e 	mov.w	r8, lr, lsr #16
    a094:	4325      	orrs	r5, r4
    a096:	fbb3 f9f8 	udiv	r9, r3, r8
    a09a:	0c2c      	lsrs	r4, r5, #16
    a09c:	fb08 3319 	mls	r3, r8, r9, r3
    a0a0:	fa1f fa8e 	uxth.w	sl, lr
    a0a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
    a0a8:	fb09 f40a 	mul.w	r4, r9, sl
    a0ac:	429c      	cmp	r4, r3
    a0ae:	fa02 f207 	lsl.w	r2, r2, r7
    a0b2:	fa00 f107 	lsl.w	r1, r0, r7
    a0b6:	d90b      	bls.n	a0d0 <__udivmoddi4+0x1b0>
    a0b8:	eb1e 0303 	adds.w	r3, lr, r3
    a0bc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    a0c0:	f080 8087 	bcs.w	a1d2 <__udivmoddi4+0x2b2>
    a0c4:	429c      	cmp	r4, r3
    a0c6:	f240 8084 	bls.w	a1d2 <__udivmoddi4+0x2b2>
    a0ca:	f1a9 0902 	sub.w	r9, r9, #2
    a0ce:	4473      	add	r3, lr
    a0d0:	1b1b      	subs	r3, r3, r4
    a0d2:	b2ad      	uxth	r5, r5
    a0d4:	fbb3 f0f8 	udiv	r0, r3, r8
    a0d8:	fb08 3310 	mls	r3, r8, r0, r3
    a0dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
    a0e0:	fb00 fa0a 	mul.w	sl, r0, sl
    a0e4:	45a2      	cmp	sl, r4
    a0e6:	d908      	bls.n	a0fa <__udivmoddi4+0x1da>
    a0e8:	eb1e 0404 	adds.w	r4, lr, r4
    a0ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    a0f0:	d26b      	bcs.n	a1ca <__udivmoddi4+0x2aa>
    a0f2:	45a2      	cmp	sl, r4
    a0f4:	d969      	bls.n	a1ca <__udivmoddi4+0x2aa>
    a0f6:	3802      	subs	r0, #2
    a0f8:	4474      	add	r4, lr
    a0fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    a0fe:	fba0 8902 	umull	r8, r9, r0, r2
    a102:	eba4 040a 	sub.w	r4, r4, sl
    a106:	454c      	cmp	r4, r9
    a108:	46c2      	mov	sl, r8
    a10a:	464b      	mov	r3, r9
    a10c:	d354      	bcc.n	a1b8 <__udivmoddi4+0x298>
    a10e:	d051      	beq.n	a1b4 <__udivmoddi4+0x294>
    a110:	2e00      	cmp	r6, #0
    a112:	d069      	beq.n	a1e8 <__udivmoddi4+0x2c8>
    a114:	ebb1 050a 	subs.w	r5, r1, sl
    a118:	eb64 0403 	sbc.w	r4, r4, r3
    a11c:	fa04 fc0c 	lsl.w	ip, r4, ip
    a120:	40fd      	lsrs	r5, r7
    a122:	40fc      	lsrs	r4, r7
    a124:	ea4c 0505 	orr.w	r5, ip, r5
    a128:	e9c6 5400 	strd	r5, r4, [r6]
    a12c:	2700      	movs	r7, #0
    a12e:	e747      	b.n	9fc0 <__udivmoddi4+0xa0>
    a130:	f1c2 0320 	rsb	r3, r2, #32
    a134:	fa20 f703 	lsr.w	r7, r0, r3
    a138:	4095      	lsls	r5, r2
    a13a:	fa01 f002 	lsl.w	r0, r1, r2
    a13e:	fa21 f303 	lsr.w	r3, r1, r3
    a142:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    a146:	4338      	orrs	r0, r7
    a148:	0c01      	lsrs	r1, r0, #16
    a14a:	fbb3 f7fe 	udiv	r7, r3, lr
    a14e:	fa1f f885 	uxth.w	r8, r5
    a152:	fb0e 3317 	mls	r3, lr, r7, r3
    a156:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    a15a:	fb07 f308 	mul.w	r3, r7, r8
    a15e:	428b      	cmp	r3, r1
    a160:	fa04 f402 	lsl.w	r4, r4, r2
    a164:	d907      	bls.n	a176 <__udivmoddi4+0x256>
    a166:	1869      	adds	r1, r5, r1
    a168:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
    a16c:	d22f      	bcs.n	a1ce <__udivmoddi4+0x2ae>
    a16e:	428b      	cmp	r3, r1
    a170:	d92d      	bls.n	a1ce <__udivmoddi4+0x2ae>
    a172:	3f02      	subs	r7, #2
    a174:	4429      	add	r1, r5
    a176:	1acb      	subs	r3, r1, r3
    a178:	b281      	uxth	r1, r0
    a17a:	fbb3 f0fe 	udiv	r0, r3, lr
    a17e:	fb0e 3310 	mls	r3, lr, r0, r3
    a182:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    a186:	fb00 f308 	mul.w	r3, r0, r8
    a18a:	428b      	cmp	r3, r1
    a18c:	d907      	bls.n	a19e <__udivmoddi4+0x27e>
    a18e:	1869      	adds	r1, r5, r1
    a190:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    a194:	d217      	bcs.n	a1c6 <__udivmoddi4+0x2a6>
    a196:	428b      	cmp	r3, r1
    a198:	d915      	bls.n	a1c6 <__udivmoddi4+0x2a6>
    a19a:	3802      	subs	r0, #2
    a19c:	4429      	add	r1, r5
    a19e:	1ac9      	subs	r1, r1, r3
    a1a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
    a1a4:	e73b      	b.n	a01e <__udivmoddi4+0xfe>
    a1a6:	4637      	mov	r7, r6
    a1a8:	4630      	mov	r0, r6
    a1aa:	e709      	b.n	9fc0 <__udivmoddi4+0xa0>
    a1ac:	4607      	mov	r7, r0
    a1ae:	e6e7      	b.n	9f80 <__udivmoddi4+0x60>
    a1b0:	4618      	mov	r0, r3
    a1b2:	e6fb      	b.n	9fac <__udivmoddi4+0x8c>
    a1b4:	4541      	cmp	r1, r8
    a1b6:	d2ab      	bcs.n	a110 <__udivmoddi4+0x1f0>
    a1b8:	ebb8 0a02 	subs.w	sl, r8, r2
    a1bc:	eb69 020e 	sbc.w	r2, r9, lr
    a1c0:	3801      	subs	r0, #1
    a1c2:	4613      	mov	r3, r2
    a1c4:	e7a4      	b.n	a110 <__udivmoddi4+0x1f0>
    a1c6:	4660      	mov	r0, ip
    a1c8:	e7e9      	b.n	a19e <__udivmoddi4+0x27e>
    a1ca:	4618      	mov	r0, r3
    a1cc:	e795      	b.n	a0fa <__udivmoddi4+0x1da>
    a1ce:	4667      	mov	r7, ip
    a1d0:	e7d1      	b.n	a176 <__udivmoddi4+0x256>
    a1d2:	4681      	mov	r9, r0
    a1d4:	e77c      	b.n	a0d0 <__udivmoddi4+0x1b0>
    a1d6:	3802      	subs	r0, #2
    a1d8:	442c      	add	r4, r5
    a1da:	e747      	b.n	a06c <__udivmoddi4+0x14c>
    a1dc:	f1ac 0c02 	sub.w	ip, ip, #2
    a1e0:	442b      	add	r3, r5
    a1e2:	e72f      	b.n	a044 <__udivmoddi4+0x124>
    a1e4:	4638      	mov	r0, r7
    a1e6:	e708      	b.n	9ffa <__udivmoddi4+0xda>
    a1e8:	4637      	mov	r7, r6
    a1ea:	e6e9      	b.n	9fc0 <__udivmoddi4+0xa0>

0000a1ec <__aeabi_idiv0>:
    a1ec:	4770      	bx	lr
    a1ee:	bf00      	nop

0000a1f0 <_exit>:
    a1f0:	e7fe      	b.n	a1f0 <_exit>

Disassembly of section .fini:

0000a1f4 <_fini>:
    a1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a1f6:	bf00      	nop
    a1f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    a1fa:	bc08      	pop	{r3}
    a1fc:	469e      	mov	lr, r3
    a1fe:	4770      	bx	lr
