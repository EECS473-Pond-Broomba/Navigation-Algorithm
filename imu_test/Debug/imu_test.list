
imu_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .init         0000000c  00008000  00008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00004d1a  0000800c  0000800c  0000800c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .fini         0000000c  0000cd28  0000cd28  0000cd28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000064  0000cd34  0000cd34  0000cd34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.exidx    00000008  0000cd98  0000cd98  0000cd98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .eh_frame     00000004  0000cda0  0000cda0  0000cda0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000004  0001cda4  0001cda4  0000cda4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0001cda8  0001cda8  0000cda8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  0001cdac  0001cdac  0000cdac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a40  0001ce18  0001ce18  0000ce18  2**2
                  ALLOC
 10 .comment      0000007b  00000000  00000000  0000ce18  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00001360  00000000  00000000  0000ce93  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   00017631  00000000  00000000  0000e1f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a1e  00000000  00000000  00025824  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000e62f  00000000  00000000  00028242  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000053fc  00000000  00000000  00036874  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00096f34  00000000  00000000  0003bc70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001268  00000000  00000000  000d2ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00002f77  00000000  00000000  000d3e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .ARM.attributes 00000030  00000000  00000000  000d6d83  2**0
                  CONTENTS, READONLY

Disassembly of section .init:

00008000 <_init>:
    8000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8002:	bf00      	nop
    8004:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8006:	bc08      	pop	{r3}
    8008:	469e      	mov	lr, r3
    800a:	4770      	bx	lr

Disassembly of section .text:

0000800c <exit>:
    800c:	b508      	push	{r3, lr}
    800e:	4b07      	ldr	r3, [pc, #28]	; (802c <exit+0x20>)
    8010:	4604      	mov	r4, r0
    8012:	b113      	cbz	r3, 801a <exit+0xe>
    8014:	2100      	movs	r1, #0
    8016:	f3af 8000 	nop.w
    801a:	4b05      	ldr	r3, [pc, #20]	; (8030 <exit+0x24>)
    801c:	6818      	ldr	r0, [r3, #0]
    801e:	6a83      	ldr	r3, [r0, #40]	; 0x28
    8020:	b103      	cbz	r3, 8024 <exit+0x18>
    8022:	4798      	blx	r3
    8024:	4620      	mov	r0, r4
    8026:	f004 fe7d 	bl	cd24 <_exit>
    802a:	bf00      	nop
    802c:	00000000 	.word	0x00000000
    8030:	0000cd94 	.word	0x0000cd94

00008034 <__do_global_dtors_aux>:
    8034:	b510      	push	{r4, lr}
    8036:	4c05      	ldr	r4, [pc, #20]	; (804c <__do_global_dtors_aux+0x18>)
    8038:	7823      	ldrb	r3, [r4, #0]
    803a:	b933      	cbnz	r3, 804a <__do_global_dtors_aux+0x16>
    803c:	4b04      	ldr	r3, [pc, #16]	; (8050 <__do_global_dtors_aux+0x1c>)
    803e:	b113      	cbz	r3, 8046 <__do_global_dtors_aux+0x12>
    8040:	4804      	ldr	r0, [pc, #16]	; (8054 <__do_global_dtors_aux+0x20>)
    8042:	f3af 8000 	nop.w
    8046:	2301      	movs	r3, #1
    8048:	7023      	strb	r3, [r4, #0]
    804a:	bd10      	pop	{r4, pc}
    804c:	0001ce18 	.word	0x0001ce18
    8050:	00000000 	.word	0x00000000
    8054:	0000cda0 	.word	0x0000cda0

00008058 <frame_dummy>:
    8058:	b508      	push	{r3, lr}
    805a:	4b03      	ldr	r3, [pc, #12]	; (8068 <frame_dummy+0x10>)
    805c:	b11b      	cbz	r3, 8066 <frame_dummy+0xe>
    805e:	4903      	ldr	r1, [pc, #12]	; (806c <frame_dummy+0x14>)
    8060:	4803      	ldr	r0, [pc, #12]	; (8070 <frame_dummy+0x18>)
    8062:	f3af 8000 	nop.w
    8066:	bd08      	pop	{r3, pc}
    8068:	00000000 	.word	0x00000000
    806c:	0001ce1c 	.word	0x0001ce1c
    8070:	0000cda0 	.word	0x0000cda0

00008074 <_mainCRTStartup>:
    8074:	4b15      	ldr	r3, [pc, #84]	; (80cc <_mainCRTStartup+0x58>)
    8076:	2b00      	cmp	r3, #0
    8078:	bf08      	it	eq
    807a:	4b13      	ldreq	r3, [pc, #76]	; (80c8 <_mainCRTStartup+0x54>)
    807c:	469d      	mov	sp, r3
    807e:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
    8082:	2100      	movs	r1, #0
    8084:	468b      	mov	fp, r1
    8086:	460f      	mov	r7, r1
    8088:	4813      	ldr	r0, [pc, #76]	; (80d8 <_mainCRTStartup+0x64>)
    808a:	4a14      	ldr	r2, [pc, #80]	; (80dc <_mainCRTStartup+0x68>)
    808c:	1a12      	subs	r2, r2, r0
    808e:	f004 fcc0 	bl	ca12 <memset>
    8092:	4b0f      	ldr	r3, [pc, #60]	; (80d0 <_mainCRTStartup+0x5c>)
    8094:	2b00      	cmp	r3, #0
    8096:	d000      	beq.n	809a <_mainCRTStartup+0x26>
    8098:	4798      	blx	r3
    809a:	4b0e      	ldr	r3, [pc, #56]	; (80d4 <_mainCRTStartup+0x60>)
    809c:	2b00      	cmp	r3, #0
    809e:	d000      	beq.n	80a2 <_mainCRTStartup+0x2e>
    80a0:	4798      	blx	r3
    80a2:	2000      	movs	r0, #0
    80a4:	2100      	movs	r1, #0
    80a6:	0004      	movs	r4, r0
    80a8:	000d      	movs	r5, r1
    80aa:	480d      	ldr	r0, [pc, #52]	; (80e0 <_mainCRTStartup+0x6c>)
    80ac:	2800      	cmp	r0, #0
    80ae:	d002      	beq.n	80b6 <_mainCRTStartup+0x42>
    80b0:	480c      	ldr	r0, [pc, #48]	; (80e4 <_mainCRTStartup+0x70>)
    80b2:	f3af 8000 	nop.w
    80b6:	f004 fc7d 	bl	c9b4 <__libc_init_array>
    80ba:	0020      	movs	r0, r4
    80bc:	0029      	movs	r1, r5
    80be:	f000 f813 	bl	80e8 <main>
    80c2:	f7ff ffa3 	bl	800c <exit>
    80c6:	bf00      	nop
    80c8:	00080000 	.word	0x00080000
	...
    80d8:	0001ce18 	.word	0x0001ce18
    80dc:	00021858 	.word	0x00021858
	...

000080e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
    80e8:	b580      	push	{r7, lr}
    80ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
    80ec:	f000 fa70 	bl	85d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
    80f0:	f000 f81a 	bl	8128 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
    80f4:	f000 f8dc 	bl	82b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
    80f8:	f000 f8b0 	bl	825c <MX_USART2_UART_Init>
  MX_I2C1_Init();
    80fc:	f000 f880 	bl	8200 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
    8100:	f001 ff8a 	bl	a018 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
    8104:	4a05      	ldr	r2, [pc, #20]	; (811c <main+0x34>)
    8106:	2100      	movs	r1, #0
    8108:	4805      	ldr	r0, [pc, #20]	; (8120 <main+0x38>)
    810a:	f001 ffef 	bl	a0ec <osThreadNew>
    810e:	4602      	mov	r2, r0
    8110:	4b04      	ldr	r3, [pc, #16]	; (8124 <main+0x3c>)
    8112:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
    8114:	f001 ffb4 	bl	a080 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
    8118:	e7fe      	b.n	8118 <main+0x30>
    811a:	bf00      	nop
    811c:	0000cd40 	.word	0x0000cd40
    8120:	00008391 	.word	0x00008391
    8124:	0002173c 	.word	0x0002173c

00008128 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
    8128:	b580      	push	{r7, lr}
    812a:	b094      	sub	sp, #80	; 0x50
    812c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    812e:	f107 0320 	add.w	r3, r7, #32
    8132:	2230      	movs	r2, #48	; 0x30
    8134:	2100      	movs	r1, #0
    8136:	4618      	mov	r0, r3
    8138:	f004 fc6b 	bl	ca12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
    813c:	f107 030c 	add.w	r3, r7, #12
    8140:	2200      	movs	r2, #0
    8142:	601a      	str	r2, [r3, #0]
    8144:	605a      	str	r2, [r3, #4]
    8146:	609a      	str	r2, [r3, #8]
    8148:	60da      	str	r2, [r3, #12]
    814a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
    814c:	2300      	movs	r3, #0
    814e:	60bb      	str	r3, [r7, #8]
    8150:	4b29      	ldr	r3, [pc, #164]	; (81f8 <SystemClock_Config+0xd0>)
    8152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8154:	4a28      	ldr	r2, [pc, #160]	; (81f8 <SystemClock_Config+0xd0>)
    8156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    815a:	6413      	str	r3, [r2, #64]	; 0x40
    815c:	4b26      	ldr	r3, [pc, #152]	; (81f8 <SystemClock_Config+0xd0>)
    815e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    8164:	60bb      	str	r3, [r7, #8]
    8166:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
    8168:	2300      	movs	r3, #0
    816a:	607b      	str	r3, [r7, #4]
    816c:	4b23      	ldr	r3, [pc, #140]	; (81fc <SystemClock_Config+0xd4>)
    816e:	681b      	ldr	r3, [r3, #0]
    8170:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
    8174:	4a21      	ldr	r2, [pc, #132]	; (81fc <SystemClock_Config+0xd4>)
    8176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    817a:	6013      	str	r3, [r2, #0]
    817c:	4b1f      	ldr	r3, [pc, #124]	; (81fc <SystemClock_Config+0xd4>)
    817e:	681b      	ldr	r3, [r3, #0]
    8180:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    8184:	607b      	str	r3, [r7, #4]
    8186:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
    8188:	2302      	movs	r3, #2
    818a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    818c:	2301      	movs	r3, #1
    818e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
    8190:	2310      	movs	r3, #16
    8192:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    8194:	2302      	movs	r3, #2
    8196:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
    8198:	2300      	movs	r3, #0
    819a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
    819c:	2310      	movs	r3, #16
    819e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
    81a0:	f44f 73a8 	mov.w	r3, #336	; 0x150
    81a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
    81a6:	2304      	movs	r3, #4
    81a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
    81aa:	2307      	movs	r3, #7
    81ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
    81ae:	f107 0320 	add.w	r3, r7, #32
    81b2:	4618      	mov	r0, r3
    81b4:	f000 fdf0 	bl	8d98 <HAL_RCC_OscConfig>
    81b8:	4603      	mov	r3, r0
    81ba:	2b00      	cmp	r3, #0
    81bc:	d001      	beq.n	81c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
    81be:	f000 f8ef 	bl	83a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
    81c2:	230f      	movs	r3, #15
    81c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    81c6:	2302      	movs	r3, #2
    81c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    81ca:	2300      	movs	r3, #0
    81cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
    81ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    81d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
    81d4:	2300      	movs	r3, #0
    81d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
    81d8:	f107 030c 	add.w	r3, r7, #12
    81dc:	2102      	movs	r1, #2
    81de:	4618      	mov	r0, r3
    81e0:	f001 f84a 	bl	9278 <HAL_RCC_ClockConfig>
    81e4:	4603      	mov	r3, r0
    81e6:	2b00      	cmp	r3, #0
    81e8:	d001      	beq.n	81ee <SystemClock_Config+0xc6>
  {
    Error_Handler();
    81ea:	f000 f8d9 	bl	83a0 <Error_Handler>
  }
}
    81ee:	bf00      	nop
    81f0:	3750      	adds	r7, #80	; 0x50
    81f2:	46bd      	mov	sp, r7
    81f4:	bd80      	pop	{r7, pc}
    81f6:	bf00      	nop
    81f8:	40023800 	.word	0x40023800
    81fc:	40007000 	.word	0x40007000

00008200 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
    8200:	b580      	push	{r7, lr}
    8202:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
    8204:	4b12      	ldr	r3, [pc, #72]	; (8250 <MX_I2C1_Init+0x50>)
    8206:	4a13      	ldr	r2, [pc, #76]	; (8254 <MX_I2C1_Init+0x54>)
    8208:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
    820a:	4b11      	ldr	r3, [pc, #68]	; (8250 <MX_I2C1_Init+0x50>)
    820c:	4a12      	ldr	r2, [pc, #72]	; (8258 <MX_I2C1_Init+0x58>)
    820e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
    8210:	4b0f      	ldr	r3, [pc, #60]	; (8250 <MX_I2C1_Init+0x50>)
    8212:	2200      	movs	r2, #0
    8214:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
    8216:	4b0e      	ldr	r3, [pc, #56]	; (8250 <MX_I2C1_Init+0x50>)
    8218:	2200      	movs	r2, #0
    821a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
    821c:	4b0c      	ldr	r3, [pc, #48]	; (8250 <MX_I2C1_Init+0x50>)
    821e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    8222:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
    8224:	4b0a      	ldr	r3, [pc, #40]	; (8250 <MX_I2C1_Init+0x50>)
    8226:	2200      	movs	r2, #0
    8228:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
    822a:	4b09      	ldr	r3, [pc, #36]	; (8250 <MX_I2C1_Init+0x50>)
    822c:	2200      	movs	r2, #0
    822e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
    8230:	4b07      	ldr	r3, [pc, #28]	; (8250 <MX_I2C1_Init+0x50>)
    8232:	2200      	movs	r2, #0
    8234:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
    8236:	4b06      	ldr	r3, [pc, #24]	; (8250 <MX_I2C1_Init+0x50>)
    8238:	2200      	movs	r2, #0
    823a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
    823c:	4804      	ldr	r0, [pc, #16]	; (8250 <MX_I2C1_Init+0x50>)
    823e:	f000 fc73 	bl	8b28 <HAL_I2C_Init>
    8242:	4603      	mov	r3, r0
    8244:	2b00      	cmp	r3, #0
    8246:	d001      	beq.n	824c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
    8248:	f000 f8aa 	bl	83a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
    824c:	bf00      	nop
    824e:	bd80      	pop	{r7, pc}
    8250:	00021740 	.word	0x00021740
    8254:	40005400 	.word	0x40005400
    8258:	000186a0 	.word	0x000186a0

0000825c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
    825c:	b580      	push	{r7, lr}
    825e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
    8260:	4b11      	ldr	r3, [pc, #68]	; (82a8 <MX_USART2_UART_Init+0x4c>)
    8262:	4a12      	ldr	r2, [pc, #72]	; (82ac <MX_USART2_UART_Init+0x50>)
    8264:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
    8266:	4b10      	ldr	r3, [pc, #64]	; (82a8 <MX_USART2_UART_Init+0x4c>)
    8268:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
    826c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
    826e:	4b0e      	ldr	r3, [pc, #56]	; (82a8 <MX_USART2_UART_Init+0x4c>)
    8270:	2200      	movs	r2, #0
    8272:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
    8274:	4b0c      	ldr	r3, [pc, #48]	; (82a8 <MX_USART2_UART_Init+0x4c>)
    8276:	2200      	movs	r2, #0
    8278:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
    827a:	4b0b      	ldr	r3, [pc, #44]	; (82a8 <MX_USART2_UART_Init+0x4c>)
    827c:	2200      	movs	r2, #0
    827e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
    8280:	4b09      	ldr	r3, [pc, #36]	; (82a8 <MX_USART2_UART_Init+0x4c>)
    8282:	220c      	movs	r2, #12
    8284:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
    8286:	4b08      	ldr	r3, [pc, #32]	; (82a8 <MX_USART2_UART_Init+0x4c>)
    8288:	2200      	movs	r2, #0
    828a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
    828c:	4b06      	ldr	r3, [pc, #24]	; (82a8 <MX_USART2_UART_Init+0x4c>)
    828e:	2200      	movs	r2, #0
    8290:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
    8292:	4805      	ldr	r0, [pc, #20]	; (82a8 <MX_USART2_UART_Init+0x4c>)
    8294:	f001 faee 	bl	9874 <HAL_UART_Init>
    8298:	4603      	mov	r3, r0
    829a:	2b00      	cmp	r3, #0
    829c:	d001      	beq.n	82a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
    829e:	f000 f87f 	bl	83a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
    82a2:	bf00      	nop
    82a4:	bd80      	pop	{r7, pc}
    82a6:	bf00      	nop
    82a8:	00021794 	.word	0x00021794
    82ac:	40004400 	.word	0x40004400

000082b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
    82b0:	b580      	push	{r7, lr}
    82b2:	b08a      	sub	sp, #40	; 0x28
    82b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
    82b6:	f107 0314 	add.w	r3, r7, #20
    82ba:	2200      	movs	r2, #0
    82bc:	601a      	str	r2, [r3, #0]
    82be:	605a      	str	r2, [r3, #4]
    82c0:	609a      	str	r2, [r3, #8]
    82c2:	60da      	str	r2, [r3, #12]
    82c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
    82c6:	2300      	movs	r3, #0
    82c8:	613b      	str	r3, [r7, #16]
    82ca:	4b2d      	ldr	r3, [pc, #180]	; (8380 <MX_GPIO_Init+0xd0>)
    82cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    82ce:	4a2c      	ldr	r2, [pc, #176]	; (8380 <MX_GPIO_Init+0xd0>)
    82d0:	f043 0304 	orr.w	r3, r3, #4
    82d4:	6313      	str	r3, [r2, #48]	; 0x30
    82d6:	4b2a      	ldr	r3, [pc, #168]	; (8380 <MX_GPIO_Init+0xd0>)
    82d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    82da:	f003 0304 	and.w	r3, r3, #4
    82de:	613b      	str	r3, [r7, #16]
    82e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
    82e2:	2300      	movs	r3, #0
    82e4:	60fb      	str	r3, [r7, #12]
    82e6:	4b26      	ldr	r3, [pc, #152]	; (8380 <MX_GPIO_Init+0xd0>)
    82e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    82ea:	4a25      	ldr	r2, [pc, #148]	; (8380 <MX_GPIO_Init+0xd0>)
    82ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    82f0:	6313      	str	r3, [r2, #48]	; 0x30
    82f2:	4b23      	ldr	r3, [pc, #140]	; (8380 <MX_GPIO_Init+0xd0>)
    82f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    82f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    82fa:	60fb      	str	r3, [r7, #12]
    82fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
    82fe:	2300      	movs	r3, #0
    8300:	60bb      	str	r3, [r7, #8]
    8302:	4b1f      	ldr	r3, [pc, #124]	; (8380 <MX_GPIO_Init+0xd0>)
    8304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8306:	4a1e      	ldr	r2, [pc, #120]	; (8380 <MX_GPIO_Init+0xd0>)
    8308:	f043 0301 	orr.w	r3, r3, #1
    830c:	6313      	str	r3, [r2, #48]	; 0x30
    830e:	4b1c      	ldr	r3, [pc, #112]	; (8380 <MX_GPIO_Init+0xd0>)
    8310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8312:	f003 0301 	and.w	r3, r3, #1
    8316:	60bb      	str	r3, [r7, #8]
    8318:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
    831a:	2300      	movs	r3, #0
    831c:	607b      	str	r3, [r7, #4]
    831e:	4b18      	ldr	r3, [pc, #96]	; (8380 <MX_GPIO_Init+0xd0>)
    8320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8322:	4a17      	ldr	r2, [pc, #92]	; (8380 <MX_GPIO_Init+0xd0>)
    8324:	f043 0302 	orr.w	r3, r3, #2
    8328:	6313      	str	r3, [r2, #48]	; 0x30
    832a:	4b15      	ldr	r3, [pc, #84]	; (8380 <MX_GPIO_Init+0xd0>)
    832c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    832e:	f003 0302 	and.w	r3, r3, #2
    8332:	607b      	str	r3, [r7, #4]
    8334:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
    8336:	2200      	movs	r2, #0
    8338:	2120      	movs	r1, #32
    833a:	4812      	ldr	r0, [pc, #72]	; (8384 <MX_GPIO_Init+0xd4>)
    833c:	f000 fbda 	bl	8af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
    8340:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    8344:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
    8346:	4b10      	ldr	r3, [pc, #64]	; (8388 <MX_GPIO_Init+0xd8>)
    8348:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
    834a:	2300      	movs	r3, #0
    834c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
    834e:	f107 0314 	add.w	r3, r7, #20
    8352:	4619      	mov	r1, r3
    8354:	480d      	ldr	r0, [pc, #52]	; (838c <MX_GPIO_Init+0xdc>)
    8356:	f000 fa4b 	bl	87f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
    835a:	2320      	movs	r3, #32
    835c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    835e:	2301      	movs	r3, #1
    8360:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
    8362:	2300      	movs	r3, #0
    8364:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    8366:	2300      	movs	r3, #0
    8368:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
    836a:	f107 0314 	add.w	r3, r7, #20
    836e:	4619      	mov	r1, r3
    8370:	4804      	ldr	r0, [pc, #16]	; (8384 <MX_GPIO_Init+0xd4>)
    8372:	f000 fa3d 	bl	87f0 <HAL_GPIO_Init>

}
    8376:	bf00      	nop
    8378:	3728      	adds	r7, #40	; 0x28
    837a:	46bd      	mov	sp, r7
    837c:	bd80      	pop	{r7, pc}
    837e:	bf00      	nop
    8380:	40023800 	.word	0x40023800
    8384:	40020000 	.word	0x40020000
    8388:	10210000 	.word	0x10210000
    838c:	40020800 	.word	0x40020800

00008390 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
    8390:	b580      	push	{r7, lr}
    8392:	b082      	sub	sp, #8
    8394:	af00      	add	r7, sp, #0
    8396:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
    8398:	2001      	movs	r0, #1
    839a:	f001 ff4d 	bl	a238 <osDelay>
    839e:	e7fb      	b.n	8398 <StartDefaultTask+0x8>

000083a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
    83a0:	b480      	push	{r7}
    83a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
    83a4:	bf00      	nop
    83a6:	46bd      	mov	sp, r7
    83a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    83ac:	4770      	bx	lr
	...

000083b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
    83b0:	b580      	push	{r7, lr}
    83b2:	b082      	sub	sp, #8
    83b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
    83b6:	2300      	movs	r3, #0
    83b8:	607b      	str	r3, [r7, #4]
    83ba:	4b10      	ldr	r3, [pc, #64]	; (83fc <HAL_MspInit+0x4c>)
    83bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    83be:	4a0f      	ldr	r2, [pc, #60]	; (83fc <HAL_MspInit+0x4c>)
    83c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    83c4:	6453      	str	r3, [r2, #68]	; 0x44
    83c6:	4b0d      	ldr	r3, [pc, #52]	; (83fc <HAL_MspInit+0x4c>)
    83c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    83ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    83ce:	607b      	str	r3, [r7, #4]
    83d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
    83d2:	2300      	movs	r3, #0
    83d4:	603b      	str	r3, [r7, #0]
    83d6:	4b09      	ldr	r3, [pc, #36]	; (83fc <HAL_MspInit+0x4c>)
    83d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    83da:	4a08      	ldr	r2, [pc, #32]	; (83fc <HAL_MspInit+0x4c>)
    83dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    83e0:	6413      	str	r3, [r2, #64]	; 0x40
    83e2:	4b06      	ldr	r3, [pc, #24]	; (83fc <HAL_MspInit+0x4c>)
    83e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    83e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    83ea:	603b      	str	r3, [r7, #0]
    83ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
    83ee:	2007      	movs	r0, #7
    83f0:	f000 f9c9 	bl	8786 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
    83f4:	bf00      	nop
    83f6:	3708      	adds	r7, #8
    83f8:	46bd      	mov	sp, r7
    83fa:	bd80      	pop	{r7, pc}
    83fc:	40023800 	.word	0x40023800

00008400 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
    8400:	b580      	push	{r7, lr}
    8402:	b08a      	sub	sp, #40	; 0x28
    8404:	af00      	add	r7, sp, #0
    8406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
    8408:	f107 0314 	add.w	r3, r7, #20
    840c:	2200      	movs	r2, #0
    840e:	601a      	str	r2, [r3, #0]
    8410:	605a      	str	r2, [r3, #4]
    8412:	609a      	str	r2, [r3, #8]
    8414:	60da      	str	r2, [r3, #12]
    8416:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
    8418:	687b      	ldr	r3, [r7, #4]
    841a:	681b      	ldr	r3, [r3, #0]
    841c:	4a19      	ldr	r2, [pc, #100]	; (8484 <HAL_I2C_MspInit+0x84>)
    841e:	4293      	cmp	r3, r2
    8420:	d12c      	bne.n	847c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
    8422:	2300      	movs	r3, #0
    8424:	613b      	str	r3, [r7, #16]
    8426:	4b18      	ldr	r3, [pc, #96]	; (8488 <HAL_I2C_MspInit+0x88>)
    8428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    842a:	4a17      	ldr	r2, [pc, #92]	; (8488 <HAL_I2C_MspInit+0x88>)
    842c:	f043 0302 	orr.w	r3, r3, #2
    8430:	6313      	str	r3, [r2, #48]	; 0x30
    8432:	4b15      	ldr	r3, [pc, #84]	; (8488 <HAL_I2C_MspInit+0x88>)
    8434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8436:	f003 0302 	and.w	r3, r3, #2
    843a:	613b      	str	r3, [r7, #16]
    843c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    843e:	f44f 7340 	mov.w	r3, #768	; 0x300
    8442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    8444:	2312      	movs	r3, #18
    8446:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    8448:	2301      	movs	r3, #1
    844a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    844c:	2303      	movs	r3, #3
    844e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    8450:	2304      	movs	r3, #4
    8452:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
    8454:	f107 0314 	add.w	r3, r7, #20
    8458:	4619      	mov	r1, r3
    845a:	480c      	ldr	r0, [pc, #48]	; (848c <HAL_I2C_MspInit+0x8c>)
    845c:	f000 f9c8 	bl	87f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
    8460:	2300      	movs	r3, #0
    8462:	60fb      	str	r3, [r7, #12]
    8464:	4b08      	ldr	r3, [pc, #32]	; (8488 <HAL_I2C_MspInit+0x88>)
    8466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8468:	4a07      	ldr	r2, [pc, #28]	; (8488 <HAL_I2C_MspInit+0x88>)
    846a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    846e:	6413      	str	r3, [r2, #64]	; 0x40
    8470:	4b05      	ldr	r3, [pc, #20]	; (8488 <HAL_I2C_MspInit+0x88>)
    8472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8474:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    8478:	60fb      	str	r3, [r7, #12]
    847a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
    847c:	bf00      	nop
    847e:	3728      	adds	r7, #40	; 0x28
    8480:	46bd      	mov	sp, r7
    8482:	bd80      	pop	{r7, pc}
    8484:	40005400 	.word	0x40005400
    8488:	40023800 	.word	0x40023800
    848c:	40020400 	.word	0x40020400

00008490 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
    8490:	b580      	push	{r7, lr}
    8492:	b08a      	sub	sp, #40	; 0x28
    8494:	af00      	add	r7, sp, #0
    8496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
    8498:	f107 0314 	add.w	r3, r7, #20
    849c:	2200      	movs	r2, #0
    849e:	601a      	str	r2, [r3, #0]
    84a0:	605a      	str	r2, [r3, #4]
    84a2:	609a      	str	r2, [r3, #8]
    84a4:	60da      	str	r2, [r3, #12]
    84a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
    84a8:	687b      	ldr	r3, [r7, #4]
    84aa:	681b      	ldr	r3, [r3, #0]
    84ac:	4a19      	ldr	r2, [pc, #100]	; (8514 <HAL_UART_MspInit+0x84>)
    84ae:	4293      	cmp	r3, r2
    84b0:	d12b      	bne.n	850a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
    84b2:	2300      	movs	r3, #0
    84b4:	613b      	str	r3, [r7, #16]
    84b6:	4b18      	ldr	r3, [pc, #96]	; (8518 <HAL_UART_MspInit+0x88>)
    84b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    84ba:	4a17      	ldr	r2, [pc, #92]	; (8518 <HAL_UART_MspInit+0x88>)
    84bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    84c0:	6413      	str	r3, [r2, #64]	; 0x40
    84c2:	4b15      	ldr	r3, [pc, #84]	; (8518 <HAL_UART_MspInit+0x88>)
    84c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    84c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    84ca:	613b      	str	r3, [r7, #16]
    84cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
    84ce:	2300      	movs	r3, #0
    84d0:	60fb      	str	r3, [r7, #12]
    84d2:	4b11      	ldr	r3, [pc, #68]	; (8518 <HAL_UART_MspInit+0x88>)
    84d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    84d6:	4a10      	ldr	r2, [pc, #64]	; (8518 <HAL_UART_MspInit+0x88>)
    84d8:	f043 0301 	orr.w	r3, r3, #1
    84dc:	6313      	str	r3, [r2, #48]	; 0x30
    84de:	4b0e      	ldr	r3, [pc, #56]	; (8518 <HAL_UART_MspInit+0x88>)
    84e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    84e2:	f003 0301 	and.w	r3, r3, #1
    84e6:	60fb      	str	r3, [r7, #12]
    84e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    84ea:	230c      	movs	r3, #12
    84ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    84ee:	2302      	movs	r3, #2
    84f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    84f2:	2300      	movs	r3, #0
    84f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    84f6:	2300      	movs	r3, #0
    84f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    84fa:	2307      	movs	r3, #7
    84fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
    84fe:	f107 0314 	add.w	r3, r7, #20
    8502:	4619      	mov	r1, r3
    8504:	4805      	ldr	r0, [pc, #20]	; (851c <HAL_UART_MspInit+0x8c>)
    8506:	f000 f973 	bl	87f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
    850a:	bf00      	nop
    850c:	3728      	adds	r7, #40	; 0x28
    850e:	46bd      	mov	sp, r7
    8510:	bd80      	pop	{r7, pc}
    8512:	bf00      	nop
    8514:	40004400 	.word	0x40004400
    8518:	40023800 	.word	0x40023800
    851c:	40020000 	.word	0x40020000

00008520 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
    8520:	b580      	push	{r7, lr}
    8522:	b08c      	sub	sp, #48	; 0x30
    8524:	af00      	add	r7, sp, #0
    8526:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
    8528:	2300      	movs	r3, #0
    852a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
    852c:	2300      	movs	r3, #0
    852e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
    8530:	2200      	movs	r2, #0
    8532:	6879      	ldr	r1, [r7, #4]
    8534:	2019      	movs	r0, #25
    8536:	f000 f931 	bl	879c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
    853a:	2019      	movs	r0, #25
    853c:	f000 f94a 	bl	87d4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
    8540:	2300      	movs	r3, #0
    8542:	60fb      	str	r3, [r7, #12]
    8544:	4b1e      	ldr	r3, [pc, #120]	; (85c0 <HAL_InitTick+0xa0>)
    8546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    8548:	4a1d      	ldr	r2, [pc, #116]	; (85c0 <HAL_InitTick+0xa0>)
    854a:	f043 0301 	orr.w	r3, r3, #1
    854e:	6453      	str	r3, [r2, #68]	; 0x44
    8550:	4b1b      	ldr	r3, [pc, #108]	; (85c0 <HAL_InitTick+0xa0>)
    8552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    8554:	f003 0301 	and.w	r3, r3, #1
    8558:	60fb      	str	r3, [r7, #12]
    855a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
    855c:	f107 0210 	add.w	r2, r7, #16
    8560:	f107 0314 	add.w	r3, r7, #20
    8564:	4611      	mov	r1, r2
    8566:	4618      	mov	r0, r3
    8568:	f001 f878 	bl	965c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
    856c:	f001 f862 	bl	9634 <HAL_RCC_GetPCLK2Freq>
    8570:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
    8572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8574:	4a13      	ldr	r2, [pc, #76]	; (85c4 <HAL_InitTick+0xa4>)
    8576:	fba2 2303 	umull	r2, r3, r2, r3
    857a:	0c9b      	lsrs	r3, r3, #18
    857c:	3b01      	subs	r3, #1
    857e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
    8580:	4b11      	ldr	r3, [pc, #68]	; (85c8 <HAL_InitTick+0xa8>)
    8582:	4a12      	ldr	r2, [pc, #72]	; (85cc <HAL_InitTick+0xac>)
    8584:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
    8586:	4b10      	ldr	r3, [pc, #64]	; (85c8 <HAL_InitTick+0xa8>)
    8588:	f240 32e7 	movw	r2, #999	; 0x3e7
    858c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
    858e:	4a0e      	ldr	r2, [pc, #56]	; (85c8 <HAL_InitTick+0xa8>)
    8590:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8592:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
    8594:	4b0c      	ldr	r3, [pc, #48]	; (85c8 <HAL_InitTick+0xa8>)
    8596:	2200      	movs	r2, #0
    8598:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
    859a:	4b0b      	ldr	r3, [pc, #44]	; (85c8 <HAL_InitTick+0xa8>)
    859c:	2200      	movs	r2, #0
    859e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
    85a0:	4809      	ldr	r0, [pc, #36]	; (85c8 <HAL_InitTick+0xa8>)
    85a2:	f001 f88d 	bl	96c0 <HAL_TIM_Base_Init>
    85a6:	4603      	mov	r3, r0
    85a8:	2b00      	cmp	r3, #0
    85aa:	d104      	bne.n	85b6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
    85ac:	4806      	ldr	r0, [pc, #24]	; (85c8 <HAL_InitTick+0xa8>)
    85ae:	f001 f8bc 	bl	972a <HAL_TIM_Base_Start_IT>
    85b2:	4603      	mov	r3, r0
    85b4:	e000      	b.n	85b8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
    85b6:	2301      	movs	r3, #1
}
    85b8:	4618      	mov	r0, r3
    85ba:	3730      	adds	r7, #48	; 0x30
    85bc:	46bd      	mov	sp, r7
    85be:	bd80      	pop	{r7, pc}
    85c0:	40023800 	.word	0x40023800
    85c4:	431bde83 	.word	0x431bde83
    85c8:	000217d4 	.word	0x000217d4
    85cc:	40010000 	.word	0x40010000

000085d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
    85d0:	b580      	push	{r7, lr}
    85d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
    85d4:	4b0e      	ldr	r3, [pc, #56]	; (8610 <HAL_Init+0x40>)
    85d6:	681b      	ldr	r3, [r3, #0]
    85d8:	4a0d      	ldr	r2, [pc, #52]	; (8610 <HAL_Init+0x40>)
    85da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    85de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
    85e0:	4b0b      	ldr	r3, [pc, #44]	; (8610 <HAL_Init+0x40>)
    85e2:	681b      	ldr	r3, [r3, #0]
    85e4:	4a0a      	ldr	r2, [pc, #40]	; (8610 <HAL_Init+0x40>)
    85e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    85ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
    85ec:	4b08      	ldr	r3, [pc, #32]	; (8610 <HAL_Init+0x40>)
    85ee:	681b      	ldr	r3, [r3, #0]
    85f0:	4a07      	ldr	r2, [pc, #28]	; (8610 <HAL_Init+0x40>)
    85f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    85f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
    85f8:	2003      	movs	r0, #3
    85fa:	f000 f8c4 	bl	8786 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
    85fe:	2000      	movs	r0, #0
    8600:	f7ff ff8e 	bl	8520 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
    8604:	f7ff fed4 	bl	83b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
    8608:	2300      	movs	r3, #0
}
    860a:	4618      	mov	r0, r3
    860c:	bd80      	pop	{r7, pc}
    860e:	bf00      	nop
    8610:	40023c00 	.word	0x40023c00

00008614 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
    8614:	b480      	push	{r7}
    8616:	af00      	add	r7, sp, #0
  return uwTick;
    8618:	4b03      	ldr	r3, [pc, #12]	; (8628 <HAL_GetTick+0x14>)
    861a:	681b      	ldr	r3, [r3, #0]
}
    861c:	4618      	mov	r0, r3
    861e:	46bd      	mov	sp, r7
    8620:	f85d 7b04 	ldr.w	r7, [sp], #4
    8624:	4770      	bx	lr
    8626:	bf00      	nop
    8628:	00021814 	.word	0x00021814

0000862c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
    862c:	b480      	push	{r7}
    862e:	b085      	sub	sp, #20
    8630:	af00      	add	r7, sp, #0
    8632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
    8634:	687b      	ldr	r3, [r7, #4]
    8636:	f003 0307 	and.w	r3, r3, #7
    863a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
    863c:	4b0c      	ldr	r3, [pc, #48]	; (8670 <__NVIC_SetPriorityGrouping+0x44>)
    863e:	68db      	ldr	r3, [r3, #12]
    8640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
    8642:	68ba      	ldr	r2, [r7, #8]
    8644:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
    8648:	4013      	ands	r3, r2
    864a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
    864c:	68fb      	ldr	r3, [r7, #12]
    864e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
    8650:	68bb      	ldr	r3, [r7, #8]
    8652:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
    8654:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    8658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    865c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
    865e:	4a04      	ldr	r2, [pc, #16]	; (8670 <__NVIC_SetPriorityGrouping+0x44>)
    8660:	68bb      	ldr	r3, [r7, #8]
    8662:	60d3      	str	r3, [r2, #12]
}
    8664:	bf00      	nop
    8666:	3714      	adds	r7, #20
    8668:	46bd      	mov	sp, r7
    866a:	f85d 7b04 	ldr.w	r7, [sp], #4
    866e:	4770      	bx	lr
    8670:	e000ed00 	.word	0xe000ed00

00008674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
    8674:	b480      	push	{r7}
    8676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
    8678:	4b04      	ldr	r3, [pc, #16]	; (868c <__NVIC_GetPriorityGrouping+0x18>)
    867a:	68db      	ldr	r3, [r3, #12]
    867c:	0a1b      	lsrs	r3, r3, #8
    867e:	f003 0307 	and.w	r3, r3, #7
}
    8682:	4618      	mov	r0, r3
    8684:	46bd      	mov	sp, r7
    8686:	f85d 7b04 	ldr.w	r7, [sp], #4
    868a:	4770      	bx	lr
    868c:	e000ed00 	.word	0xe000ed00

00008690 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    8690:	b480      	push	{r7}
    8692:	b083      	sub	sp, #12
    8694:	af00      	add	r7, sp, #0
    8696:	4603      	mov	r3, r0
    8698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    869a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    869e:	2b00      	cmp	r3, #0
    86a0:	db0b      	blt.n	86ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    86a2:	79fb      	ldrb	r3, [r7, #7]
    86a4:	f003 021f 	and.w	r2, r3, #31
    86a8:	4907      	ldr	r1, [pc, #28]	; (86c8 <__NVIC_EnableIRQ+0x38>)
    86aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
    86ae:	095b      	lsrs	r3, r3, #5
    86b0:	2001      	movs	r0, #1
    86b2:	fa00 f202 	lsl.w	r2, r0, r2
    86b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    86ba:	bf00      	nop
    86bc:	370c      	adds	r7, #12
    86be:	46bd      	mov	sp, r7
    86c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    86c4:	4770      	bx	lr
    86c6:	bf00      	nop
    86c8:	e000e100 	.word	0xe000e100

000086cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    86cc:	b480      	push	{r7}
    86ce:	b083      	sub	sp, #12
    86d0:	af00      	add	r7, sp, #0
    86d2:	4603      	mov	r3, r0
    86d4:	6039      	str	r1, [r7, #0]
    86d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    86d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
    86dc:	2b00      	cmp	r3, #0
    86de:	db0a      	blt.n	86f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    86e0:	683b      	ldr	r3, [r7, #0]
    86e2:	b2da      	uxtb	r2, r3
    86e4:	490c      	ldr	r1, [pc, #48]	; (8718 <__NVIC_SetPriority+0x4c>)
    86e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
    86ea:	0112      	lsls	r2, r2, #4
    86ec:	b2d2      	uxtb	r2, r2
    86ee:	440b      	add	r3, r1
    86f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
    86f4:	e00a      	b.n	870c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    86f6:	683b      	ldr	r3, [r7, #0]
    86f8:	b2da      	uxtb	r2, r3
    86fa:	4908      	ldr	r1, [pc, #32]	; (871c <__NVIC_SetPriority+0x50>)
    86fc:	79fb      	ldrb	r3, [r7, #7]
    86fe:	f003 030f 	and.w	r3, r3, #15
    8702:	3b04      	subs	r3, #4
    8704:	0112      	lsls	r2, r2, #4
    8706:	b2d2      	uxtb	r2, r2
    8708:	440b      	add	r3, r1
    870a:	761a      	strb	r2, [r3, #24]
}
    870c:	bf00      	nop
    870e:	370c      	adds	r7, #12
    8710:	46bd      	mov	sp, r7
    8712:	f85d 7b04 	ldr.w	r7, [sp], #4
    8716:	4770      	bx	lr
    8718:	e000e100 	.word	0xe000e100
    871c:	e000ed00 	.word	0xe000ed00

00008720 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
    8720:	b480      	push	{r7}
    8722:	b089      	sub	sp, #36	; 0x24
    8724:	af00      	add	r7, sp, #0
    8726:	60f8      	str	r0, [r7, #12]
    8728:	60b9      	str	r1, [r7, #8]
    872a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
    872c:	68fb      	ldr	r3, [r7, #12]
    872e:	f003 0307 	and.w	r3, r3, #7
    8732:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
    8734:	69fb      	ldr	r3, [r7, #28]
    8736:	f1c3 0307 	rsb	r3, r3, #7
    873a:	2b04      	cmp	r3, #4
    873c:	bf28      	it	cs
    873e:	2304      	movcs	r3, #4
    8740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
    8742:	69fb      	ldr	r3, [r7, #28]
    8744:	3304      	adds	r3, #4
    8746:	2b06      	cmp	r3, #6
    8748:	d902      	bls.n	8750 <NVIC_EncodePriority+0x30>
    874a:	69fb      	ldr	r3, [r7, #28]
    874c:	3b03      	subs	r3, #3
    874e:	e000      	b.n	8752 <NVIC_EncodePriority+0x32>
    8750:	2300      	movs	r3, #0
    8752:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
    8754:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8758:	69bb      	ldr	r3, [r7, #24]
    875a:	fa02 f303 	lsl.w	r3, r2, r3
    875e:	43da      	mvns	r2, r3
    8760:	68bb      	ldr	r3, [r7, #8]
    8762:	401a      	ands	r2, r3
    8764:	697b      	ldr	r3, [r7, #20]
    8766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
    8768:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    876c:	697b      	ldr	r3, [r7, #20]
    876e:	fa01 f303 	lsl.w	r3, r1, r3
    8772:	43d9      	mvns	r1, r3
    8774:	687b      	ldr	r3, [r7, #4]
    8776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
    8778:	4313      	orrs	r3, r2
         );
}
    877a:	4618      	mov	r0, r3
    877c:	3724      	adds	r7, #36	; 0x24
    877e:	46bd      	mov	sp, r7
    8780:	f85d 7b04 	ldr.w	r7, [sp], #4
    8784:	4770      	bx	lr

00008786 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
    8786:	b580      	push	{r7, lr}
    8788:	b082      	sub	sp, #8
    878a:	af00      	add	r7, sp, #0
    878c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
    878e:	6878      	ldr	r0, [r7, #4]
    8790:	f7ff ff4c 	bl	862c <__NVIC_SetPriorityGrouping>
}
    8794:	bf00      	nop
    8796:	3708      	adds	r7, #8
    8798:	46bd      	mov	sp, r7
    879a:	bd80      	pop	{r7, pc}

0000879c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
    879c:	b580      	push	{r7, lr}
    879e:	b086      	sub	sp, #24
    87a0:	af00      	add	r7, sp, #0
    87a2:	4603      	mov	r3, r0
    87a4:	60b9      	str	r1, [r7, #8]
    87a6:	607a      	str	r2, [r7, #4]
    87a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
    87aa:	2300      	movs	r3, #0
    87ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
    87ae:	f7ff ff61 	bl	8674 <__NVIC_GetPriorityGrouping>
    87b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
    87b4:	687a      	ldr	r2, [r7, #4]
    87b6:	68b9      	ldr	r1, [r7, #8]
    87b8:	6978      	ldr	r0, [r7, #20]
    87ba:	f7ff ffb1 	bl	8720 <NVIC_EncodePriority>
    87be:	4602      	mov	r2, r0
    87c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    87c4:	4611      	mov	r1, r2
    87c6:	4618      	mov	r0, r3
    87c8:	f7ff ff80 	bl	86cc <__NVIC_SetPriority>
}
    87cc:	bf00      	nop
    87ce:	3718      	adds	r7, #24
    87d0:	46bd      	mov	sp, r7
    87d2:	bd80      	pop	{r7, pc}

000087d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
    87d4:	b580      	push	{r7, lr}
    87d6:	b082      	sub	sp, #8
    87d8:	af00      	add	r7, sp, #0
    87da:	4603      	mov	r3, r0
    87dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
    87de:	f997 3007 	ldrsb.w	r3, [r7, #7]
    87e2:	4618      	mov	r0, r3
    87e4:	f7ff ff54 	bl	8690 <__NVIC_EnableIRQ>
}
    87e8:	bf00      	nop
    87ea:	3708      	adds	r7, #8
    87ec:	46bd      	mov	sp, r7
    87ee:	bd80      	pop	{r7, pc}

000087f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
    87f0:	b480      	push	{r7}
    87f2:	b089      	sub	sp, #36	; 0x24
    87f4:	af00      	add	r7, sp, #0
    87f6:	6078      	str	r0, [r7, #4]
    87f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
    87fa:	2300      	movs	r3, #0
    87fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
    87fe:	2300      	movs	r3, #0
    8800:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
    8802:	2300      	movs	r3, #0
    8804:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
    8806:	2300      	movs	r3, #0
    8808:	61fb      	str	r3, [r7, #28]
    880a:	e159      	b.n	8ac0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    880c:	2201      	movs	r2, #1
    880e:	69fb      	ldr	r3, [r7, #28]
    8810:	fa02 f303 	lsl.w	r3, r2, r3
    8814:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
    8816:	683b      	ldr	r3, [r7, #0]
    8818:	681b      	ldr	r3, [r3, #0]
    881a:	697a      	ldr	r2, [r7, #20]
    881c:	4013      	ands	r3, r2
    881e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
    8820:	693a      	ldr	r2, [r7, #16]
    8822:	697b      	ldr	r3, [r7, #20]
    8824:	429a      	cmp	r2, r3
    8826:	f040 8148 	bne.w	8aba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
    882a:	683b      	ldr	r3, [r7, #0]
    882c:	685b      	ldr	r3, [r3, #4]
    882e:	2b01      	cmp	r3, #1
    8830:	d00b      	beq.n	884a <HAL_GPIO_Init+0x5a>
    8832:	683b      	ldr	r3, [r7, #0]
    8834:	685b      	ldr	r3, [r3, #4]
    8836:	2b02      	cmp	r3, #2
    8838:	d007      	beq.n	884a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
    883a:	683b      	ldr	r3, [r7, #0]
    883c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
    883e:	2b11      	cmp	r3, #17
    8840:	d003      	beq.n	884a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
    8842:	683b      	ldr	r3, [r7, #0]
    8844:	685b      	ldr	r3, [r3, #4]
    8846:	2b12      	cmp	r3, #18
    8848:	d130      	bne.n	88ac <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
    884a:	687b      	ldr	r3, [r7, #4]
    884c:	689b      	ldr	r3, [r3, #8]
    884e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
    8850:	69fb      	ldr	r3, [r7, #28]
    8852:	005b      	lsls	r3, r3, #1
    8854:	2203      	movs	r2, #3
    8856:	fa02 f303 	lsl.w	r3, r2, r3
    885a:	43db      	mvns	r3, r3
    885c:	69ba      	ldr	r2, [r7, #24]
    885e:	4013      	ands	r3, r2
    8860:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
    8862:	683b      	ldr	r3, [r7, #0]
    8864:	68da      	ldr	r2, [r3, #12]
    8866:	69fb      	ldr	r3, [r7, #28]
    8868:	005b      	lsls	r3, r3, #1
    886a:	fa02 f303 	lsl.w	r3, r2, r3
    886e:	69ba      	ldr	r2, [r7, #24]
    8870:	4313      	orrs	r3, r2
    8872:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
    8874:	687b      	ldr	r3, [r7, #4]
    8876:	69ba      	ldr	r2, [r7, #24]
    8878:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
    887a:	687b      	ldr	r3, [r7, #4]
    887c:	685b      	ldr	r3, [r3, #4]
    887e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
    8880:	2201      	movs	r2, #1
    8882:	69fb      	ldr	r3, [r7, #28]
    8884:	fa02 f303 	lsl.w	r3, r2, r3
    8888:	43db      	mvns	r3, r3
    888a:	69ba      	ldr	r2, [r7, #24]
    888c:	4013      	ands	r3, r2
    888e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
    8890:	683b      	ldr	r3, [r7, #0]
    8892:	685b      	ldr	r3, [r3, #4]
    8894:	091b      	lsrs	r3, r3, #4
    8896:	f003 0201 	and.w	r2, r3, #1
    889a:	69fb      	ldr	r3, [r7, #28]
    889c:	fa02 f303 	lsl.w	r3, r2, r3
    88a0:	69ba      	ldr	r2, [r7, #24]
    88a2:	4313      	orrs	r3, r2
    88a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
    88a6:	687b      	ldr	r3, [r7, #4]
    88a8:	69ba      	ldr	r2, [r7, #24]
    88aa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
    88ac:	687b      	ldr	r3, [r7, #4]
    88ae:	68db      	ldr	r3, [r3, #12]
    88b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
    88b2:	69fb      	ldr	r3, [r7, #28]
    88b4:	005b      	lsls	r3, r3, #1
    88b6:	2203      	movs	r2, #3
    88b8:	fa02 f303 	lsl.w	r3, r2, r3
    88bc:	43db      	mvns	r3, r3
    88be:	69ba      	ldr	r2, [r7, #24]
    88c0:	4013      	ands	r3, r2
    88c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
    88c4:	683b      	ldr	r3, [r7, #0]
    88c6:	689a      	ldr	r2, [r3, #8]
    88c8:	69fb      	ldr	r3, [r7, #28]
    88ca:	005b      	lsls	r3, r3, #1
    88cc:	fa02 f303 	lsl.w	r3, r2, r3
    88d0:	69ba      	ldr	r2, [r7, #24]
    88d2:	4313      	orrs	r3, r2
    88d4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
    88d6:	687b      	ldr	r3, [r7, #4]
    88d8:	69ba      	ldr	r2, [r7, #24]
    88da:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
    88dc:	683b      	ldr	r3, [r7, #0]
    88de:	685b      	ldr	r3, [r3, #4]
    88e0:	2b02      	cmp	r3, #2
    88e2:	d003      	beq.n	88ec <HAL_GPIO_Init+0xfc>
    88e4:	683b      	ldr	r3, [r7, #0]
    88e6:	685b      	ldr	r3, [r3, #4]
    88e8:	2b12      	cmp	r3, #18
    88ea:	d123      	bne.n	8934 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
    88ec:	69fb      	ldr	r3, [r7, #28]
    88ee:	08da      	lsrs	r2, r3, #3
    88f0:	687b      	ldr	r3, [r7, #4]
    88f2:	3208      	adds	r2, #8
    88f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    88f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
    88fa:	69fb      	ldr	r3, [r7, #28]
    88fc:	f003 0307 	and.w	r3, r3, #7
    8900:	009b      	lsls	r3, r3, #2
    8902:	220f      	movs	r2, #15
    8904:	fa02 f303 	lsl.w	r3, r2, r3
    8908:	43db      	mvns	r3, r3
    890a:	69ba      	ldr	r2, [r7, #24]
    890c:	4013      	ands	r3, r2
    890e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
    8910:	683b      	ldr	r3, [r7, #0]
    8912:	691a      	ldr	r2, [r3, #16]
    8914:	69fb      	ldr	r3, [r7, #28]
    8916:	f003 0307 	and.w	r3, r3, #7
    891a:	009b      	lsls	r3, r3, #2
    891c:	fa02 f303 	lsl.w	r3, r2, r3
    8920:	69ba      	ldr	r2, [r7, #24]
    8922:	4313      	orrs	r3, r2
    8924:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
    8926:	69fb      	ldr	r3, [r7, #28]
    8928:	08da      	lsrs	r2, r3, #3
    892a:	687b      	ldr	r3, [r7, #4]
    892c:	3208      	adds	r2, #8
    892e:	69b9      	ldr	r1, [r7, #24]
    8930:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
    8934:	687b      	ldr	r3, [r7, #4]
    8936:	681b      	ldr	r3, [r3, #0]
    8938:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
    893a:	69fb      	ldr	r3, [r7, #28]
    893c:	005b      	lsls	r3, r3, #1
    893e:	2203      	movs	r2, #3
    8940:	fa02 f303 	lsl.w	r3, r2, r3
    8944:	43db      	mvns	r3, r3
    8946:	69ba      	ldr	r2, [r7, #24]
    8948:	4013      	ands	r3, r2
    894a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
    894c:	683b      	ldr	r3, [r7, #0]
    894e:	685b      	ldr	r3, [r3, #4]
    8950:	f003 0203 	and.w	r2, r3, #3
    8954:	69fb      	ldr	r3, [r7, #28]
    8956:	005b      	lsls	r3, r3, #1
    8958:	fa02 f303 	lsl.w	r3, r2, r3
    895c:	69ba      	ldr	r2, [r7, #24]
    895e:	4313      	orrs	r3, r2
    8960:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
    8962:	687b      	ldr	r3, [r7, #4]
    8964:	69ba      	ldr	r2, [r7, #24]
    8966:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
    8968:	683b      	ldr	r3, [r7, #0]
    896a:	685b      	ldr	r3, [r3, #4]
    896c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    8970:	2b00      	cmp	r3, #0
    8972:	f000 80a2 	beq.w	8aba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
    8976:	2300      	movs	r3, #0
    8978:	60fb      	str	r3, [r7, #12]
    897a:	4b56      	ldr	r3, [pc, #344]	; (8ad4 <HAL_GPIO_Init+0x2e4>)
    897c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    897e:	4a55      	ldr	r2, [pc, #340]	; (8ad4 <HAL_GPIO_Init+0x2e4>)
    8980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    8984:	6453      	str	r3, [r2, #68]	; 0x44
    8986:	4b53      	ldr	r3, [pc, #332]	; (8ad4 <HAL_GPIO_Init+0x2e4>)
    8988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    898a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    898e:	60fb      	str	r3, [r7, #12]
    8990:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
    8992:	4a51      	ldr	r2, [pc, #324]	; (8ad8 <HAL_GPIO_Init+0x2e8>)
    8994:	69fb      	ldr	r3, [r7, #28]
    8996:	089b      	lsrs	r3, r3, #2
    8998:	3302      	adds	r3, #2
    899a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    899e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
    89a0:	69fb      	ldr	r3, [r7, #28]
    89a2:	f003 0303 	and.w	r3, r3, #3
    89a6:	009b      	lsls	r3, r3, #2
    89a8:	220f      	movs	r2, #15
    89aa:	fa02 f303 	lsl.w	r3, r2, r3
    89ae:	43db      	mvns	r3, r3
    89b0:	69ba      	ldr	r2, [r7, #24]
    89b2:	4013      	ands	r3, r2
    89b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
    89b6:	687b      	ldr	r3, [r7, #4]
    89b8:	4a48      	ldr	r2, [pc, #288]	; (8adc <HAL_GPIO_Init+0x2ec>)
    89ba:	4293      	cmp	r3, r2
    89bc:	d019      	beq.n	89f2 <HAL_GPIO_Init+0x202>
    89be:	687b      	ldr	r3, [r7, #4]
    89c0:	4a47      	ldr	r2, [pc, #284]	; (8ae0 <HAL_GPIO_Init+0x2f0>)
    89c2:	4293      	cmp	r3, r2
    89c4:	d013      	beq.n	89ee <HAL_GPIO_Init+0x1fe>
    89c6:	687b      	ldr	r3, [r7, #4]
    89c8:	4a46      	ldr	r2, [pc, #280]	; (8ae4 <HAL_GPIO_Init+0x2f4>)
    89ca:	4293      	cmp	r3, r2
    89cc:	d00d      	beq.n	89ea <HAL_GPIO_Init+0x1fa>
    89ce:	687b      	ldr	r3, [r7, #4]
    89d0:	4a45      	ldr	r2, [pc, #276]	; (8ae8 <HAL_GPIO_Init+0x2f8>)
    89d2:	4293      	cmp	r3, r2
    89d4:	d007      	beq.n	89e6 <HAL_GPIO_Init+0x1f6>
    89d6:	687b      	ldr	r3, [r7, #4]
    89d8:	4a44      	ldr	r2, [pc, #272]	; (8aec <HAL_GPIO_Init+0x2fc>)
    89da:	4293      	cmp	r3, r2
    89dc:	d101      	bne.n	89e2 <HAL_GPIO_Init+0x1f2>
    89de:	2304      	movs	r3, #4
    89e0:	e008      	b.n	89f4 <HAL_GPIO_Init+0x204>
    89e2:	2307      	movs	r3, #7
    89e4:	e006      	b.n	89f4 <HAL_GPIO_Init+0x204>
    89e6:	2303      	movs	r3, #3
    89e8:	e004      	b.n	89f4 <HAL_GPIO_Init+0x204>
    89ea:	2302      	movs	r3, #2
    89ec:	e002      	b.n	89f4 <HAL_GPIO_Init+0x204>
    89ee:	2301      	movs	r3, #1
    89f0:	e000      	b.n	89f4 <HAL_GPIO_Init+0x204>
    89f2:	2300      	movs	r3, #0
    89f4:	69fa      	ldr	r2, [r7, #28]
    89f6:	f002 0203 	and.w	r2, r2, #3
    89fa:	0092      	lsls	r2, r2, #2
    89fc:	4093      	lsls	r3, r2
    89fe:	69ba      	ldr	r2, [r7, #24]
    8a00:	4313      	orrs	r3, r2
    8a02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
    8a04:	4934      	ldr	r1, [pc, #208]	; (8ad8 <HAL_GPIO_Init+0x2e8>)
    8a06:	69fb      	ldr	r3, [r7, #28]
    8a08:	089b      	lsrs	r3, r3, #2
    8a0a:	3302      	adds	r3, #2
    8a0c:	69ba      	ldr	r2, [r7, #24]
    8a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
    8a12:	4b37      	ldr	r3, [pc, #220]	; (8af0 <HAL_GPIO_Init+0x300>)
    8a14:	681b      	ldr	r3, [r3, #0]
    8a16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
    8a18:	693b      	ldr	r3, [r7, #16]
    8a1a:	43db      	mvns	r3, r3
    8a1c:	69ba      	ldr	r2, [r7, #24]
    8a1e:	4013      	ands	r3, r2
    8a20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
    8a22:	683b      	ldr	r3, [r7, #0]
    8a24:	685b      	ldr	r3, [r3, #4]
    8a26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    8a2a:	2b00      	cmp	r3, #0
    8a2c:	d003      	beq.n	8a36 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
    8a2e:	69ba      	ldr	r2, [r7, #24]
    8a30:	693b      	ldr	r3, [r7, #16]
    8a32:	4313      	orrs	r3, r2
    8a34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
    8a36:	4a2e      	ldr	r2, [pc, #184]	; (8af0 <HAL_GPIO_Init+0x300>)
    8a38:	69bb      	ldr	r3, [r7, #24]
    8a3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
    8a3c:	4b2c      	ldr	r3, [pc, #176]	; (8af0 <HAL_GPIO_Init+0x300>)
    8a3e:	685b      	ldr	r3, [r3, #4]
    8a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
    8a42:	693b      	ldr	r3, [r7, #16]
    8a44:	43db      	mvns	r3, r3
    8a46:	69ba      	ldr	r2, [r7, #24]
    8a48:	4013      	ands	r3, r2
    8a4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
    8a4c:	683b      	ldr	r3, [r7, #0]
    8a4e:	685b      	ldr	r3, [r3, #4]
    8a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    8a54:	2b00      	cmp	r3, #0
    8a56:	d003      	beq.n	8a60 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
    8a58:	69ba      	ldr	r2, [r7, #24]
    8a5a:	693b      	ldr	r3, [r7, #16]
    8a5c:	4313      	orrs	r3, r2
    8a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
    8a60:	4a23      	ldr	r2, [pc, #140]	; (8af0 <HAL_GPIO_Init+0x300>)
    8a62:	69bb      	ldr	r3, [r7, #24]
    8a64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
    8a66:	4b22      	ldr	r3, [pc, #136]	; (8af0 <HAL_GPIO_Init+0x300>)
    8a68:	689b      	ldr	r3, [r3, #8]
    8a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
    8a6c:	693b      	ldr	r3, [r7, #16]
    8a6e:	43db      	mvns	r3, r3
    8a70:	69ba      	ldr	r2, [r7, #24]
    8a72:	4013      	ands	r3, r2
    8a74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
    8a76:	683b      	ldr	r3, [r7, #0]
    8a78:	685b      	ldr	r3, [r3, #4]
    8a7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    8a7e:	2b00      	cmp	r3, #0
    8a80:	d003      	beq.n	8a8a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
    8a82:	69ba      	ldr	r2, [r7, #24]
    8a84:	693b      	ldr	r3, [r7, #16]
    8a86:	4313      	orrs	r3, r2
    8a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
    8a8a:	4a19      	ldr	r2, [pc, #100]	; (8af0 <HAL_GPIO_Init+0x300>)
    8a8c:	69bb      	ldr	r3, [r7, #24]
    8a8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
    8a90:	4b17      	ldr	r3, [pc, #92]	; (8af0 <HAL_GPIO_Init+0x300>)
    8a92:	68db      	ldr	r3, [r3, #12]
    8a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
    8a96:	693b      	ldr	r3, [r7, #16]
    8a98:	43db      	mvns	r3, r3
    8a9a:	69ba      	ldr	r2, [r7, #24]
    8a9c:	4013      	ands	r3, r2
    8a9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
    8aa0:	683b      	ldr	r3, [r7, #0]
    8aa2:	685b      	ldr	r3, [r3, #4]
    8aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    8aa8:	2b00      	cmp	r3, #0
    8aaa:	d003      	beq.n	8ab4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
    8aac:	69ba      	ldr	r2, [r7, #24]
    8aae:	693b      	ldr	r3, [r7, #16]
    8ab0:	4313      	orrs	r3, r2
    8ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
    8ab4:	4a0e      	ldr	r2, [pc, #56]	; (8af0 <HAL_GPIO_Init+0x300>)
    8ab6:	69bb      	ldr	r3, [r7, #24]
    8ab8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
    8aba:	69fb      	ldr	r3, [r7, #28]
    8abc:	3301      	adds	r3, #1
    8abe:	61fb      	str	r3, [r7, #28]
    8ac0:	69fb      	ldr	r3, [r7, #28]
    8ac2:	2b0f      	cmp	r3, #15
    8ac4:	f67f aea2 	bls.w	880c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
    8ac8:	bf00      	nop
    8aca:	3724      	adds	r7, #36	; 0x24
    8acc:	46bd      	mov	sp, r7
    8ace:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ad2:	4770      	bx	lr
    8ad4:	40023800 	.word	0x40023800
    8ad8:	40013800 	.word	0x40013800
    8adc:	40020000 	.word	0x40020000
    8ae0:	40020400 	.word	0x40020400
    8ae4:	40020800 	.word	0x40020800
    8ae8:	40020c00 	.word	0x40020c00
    8aec:	40021000 	.word	0x40021000
    8af0:	40013c00 	.word	0x40013c00

00008af4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
    8af4:	b480      	push	{r7}
    8af6:	b083      	sub	sp, #12
    8af8:	af00      	add	r7, sp, #0
    8afa:	6078      	str	r0, [r7, #4]
    8afc:	460b      	mov	r3, r1
    8afe:	807b      	strh	r3, [r7, #2]
    8b00:	4613      	mov	r3, r2
    8b02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
    8b04:	787b      	ldrb	r3, [r7, #1]
    8b06:	2b00      	cmp	r3, #0
    8b08:	d003      	beq.n	8b12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    8b0a:	887a      	ldrh	r2, [r7, #2]
    8b0c:	687b      	ldr	r3, [r7, #4]
    8b0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
    8b10:	e003      	b.n	8b1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
    8b12:	887b      	ldrh	r3, [r7, #2]
    8b14:	041a      	lsls	r2, r3, #16
    8b16:	687b      	ldr	r3, [r7, #4]
    8b18:	619a      	str	r2, [r3, #24]
}
    8b1a:	bf00      	nop
    8b1c:	370c      	adds	r7, #12
    8b1e:	46bd      	mov	sp, r7
    8b20:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b24:	4770      	bx	lr
	...

00008b28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
    8b28:	b580      	push	{r7, lr}
    8b2a:	b084      	sub	sp, #16
    8b2c:	af00      	add	r7, sp, #0
    8b2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
    8b30:	687b      	ldr	r3, [r7, #4]
    8b32:	2b00      	cmp	r3, #0
    8b34:	d101      	bne.n	8b3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
    8b36:	2301      	movs	r3, #1
    8b38:	e11f      	b.n	8d7a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
    8b3a:	687b      	ldr	r3, [r7, #4]
    8b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    8b40:	b2db      	uxtb	r3, r3
    8b42:	2b00      	cmp	r3, #0
    8b44:	d106      	bne.n	8b54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
    8b46:	687b      	ldr	r3, [r7, #4]
    8b48:	2200      	movs	r2, #0
    8b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
    8b4e:	6878      	ldr	r0, [r7, #4]
    8b50:	f7ff fc56 	bl	8400 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
    8b54:	687b      	ldr	r3, [r7, #4]
    8b56:	2224      	movs	r2, #36	; 0x24
    8b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
    8b5c:	687b      	ldr	r3, [r7, #4]
    8b5e:	681b      	ldr	r3, [r3, #0]
    8b60:	681a      	ldr	r2, [r3, #0]
    8b62:	687b      	ldr	r3, [r7, #4]
    8b64:	681b      	ldr	r3, [r3, #0]
    8b66:	f022 0201 	bic.w	r2, r2, #1
    8b6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
    8b6c:	687b      	ldr	r3, [r7, #4]
    8b6e:	681b      	ldr	r3, [r3, #0]
    8b70:	681a      	ldr	r2, [r3, #0]
    8b72:	687b      	ldr	r3, [r7, #4]
    8b74:	681b      	ldr	r3, [r3, #0]
    8b76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    8b7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
    8b7c:	687b      	ldr	r3, [r7, #4]
    8b7e:	681b      	ldr	r3, [r3, #0]
    8b80:	681a      	ldr	r2, [r3, #0]
    8b82:	687b      	ldr	r3, [r7, #4]
    8b84:	681b      	ldr	r3, [r3, #0]
    8b86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    8b8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
    8b8c:	f000 fd3e 	bl	960c <HAL_RCC_GetPCLK1Freq>
    8b90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
    8b92:	687b      	ldr	r3, [r7, #4]
    8b94:	685b      	ldr	r3, [r3, #4]
    8b96:	4a7b      	ldr	r2, [pc, #492]	; (8d84 <HAL_I2C_Init+0x25c>)
    8b98:	4293      	cmp	r3, r2
    8b9a:	d807      	bhi.n	8bac <HAL_I2C_Init+0x84>
    8b9c:	68fb      	ldr	r3, [r7, #12]
    8b9e:	4a7a      	ldr	r2, [pc, #488]	; (8d88 <HAL_I2C_Init+0x260>)
    8ba0:	4293      	cmp	r3, r2
    8ba2:	bf94      	ite	ls
    8ba4:	2301      	movls	r3, #1
    8ba6:	2300      	movhi	r3, #0
    8ba8:	b2db      	uxtb	r3, r3
    8baa:	e006      	b.n	8bba <HAL_I2C_Init+0x92>
    8bac:	68fb      	ldr	r3, [r7, #12]
    8bae:	4a77      	ldr	r2, [pc, #476]	; (8d8c <HAL_I2C_Init+0x264>)
    8bb0:	4293      	cmp	r3, r2
    8bb2:	bf94      	ite	ls
    8bb4:	2301      	movls	r3, #1
    8bb6:	2300      	movhi	r3, #0
    8bb8:	b2db      	uxtb	r3, r3
    8bba:	2b00      	cmp	r3, #0
    8bbc:	d001      	beq.n	8bc2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
    8bbe:	2301      	movs	r3, #1
    8bc0:	e0db      	b.n	8d7a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
    8bc2:	68fb      	ldr	r3, [r7, #12]
    8bc4:	4a72      	ldr	r2, [pc, #456]	; (8d90 <HAL_I2C_Init+0x268>)
    8bc6:	fba2 2303 	umull	r2, r3, r2, r3
    8bca:	0c9b      	lsrs	r3, r3, #18
    8bcc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
    8bce:	687b      	ldr	r3, [r7, #4]
    8bd0:	681b      	ldr	r3, [r3, #0]
    8bd2:	685b      	ldr	r3, [r3, #4]
    8bd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
    8bd8:	687b      	ldr	r3, [r7, #4]
    8bda:	681b      	ldr	r3, [r3, #0]
    8bdc:	68ba      	ldr	r2, [r7, #8]
    8bde:	430a      	orrs	r2, r1
    8be0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
    8be2:	687b      	ldr	r3, [r7, #4]
    8be4:	681b      	ldr	r3, [r3, #0]
    8be6:	6a1b      	ldr	r3, [r3, #32]
    8be8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
    8bec:	687b      	ldr	r3, [r7, #4]
    8bee:	685b      	ldr	r3, [r3, #4]
    8bf0:	4a64      	ldr	r2, [pc, #400]	; (8d84 <HAL_I2C_Init+0x25c>)
    8bf2:	4293      	cmp	r3, r2
    8bf4:	d802      	bhi.n	8bfc <HAL_I2C_Init+0xd4>
    8bf6:	68bb      	ldr	r3, [r7, #8]
    8bf8:	3301      	adds	r3, #1
    8bfa:	e009      	b.n	8c10 <HAL_I2C_Init+0xe8>
    8bfc:	68bb      	ldr	r3, [r7, #8]
    8bfe:	f44f 7296 	mov.w	r2, #300	; 0x12c
    8c02:	fb02 f303 	mul.w	r3, r2, r3
    8c06:	4a63      	ldr	r2, [pc, #396]	; (8d94 <HAL_I2C_Init+0x26c>)
    8c08:	fba2 2303 	umull	r2, r3, r2, r3
    8c0c:	099b      	lsrs	r3, r3, #6
    8c0e:	3301      	adds	r3, #1
    8c10:	687a      	ldr	r2, [r7, #4]
    8c12:	6812      	ldr	r2, [r2, #0]
    8c14:	430b      	orrs	r3, r1
    8c16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
    8c18:	687b      	ldr	r3, [r7, #4]
    8c1a:	681b      	ldr	r3, [r3, #0]
    8c1c:	69db      	ldr	r3, [r3, #28]
    8c1e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
    8c22:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    8c26:	687b      	ldr	r3, [r7, #4]
    8c28:	685b      	ldr	r3, [r3, #4]
    8c2a:	4956      	ldr	r1, [pc, #344]	; (8d84 <HAL_I2C_Init+0x25c>)
    8c2c:	428b      	cmp	r3, r1
    8c2e:	d80d      	bhi.n	8c4c <HAL_I2C_Init+0x124>
    8c30:	68fb      	ldr	r3, [r7, #12]
    8c32:	1e59      	subs	r1, r3, #1
    8c34:	687b      	ldr	r3, [r7, #4]
    8c36:	685b      	ldr	r3, [r3, #4]
    8c38:	005b      	lsls	r3, r3, #1
    8c3a:	fbb1 f3f3 	udiv	r3, r1, r3
    8c3e:	3301      	adds	r3, #1
    8c40:	f3c3 030b 	ubfx	r3, r3, #0, #12
    8c44:	2b04      	cmp	r3, #4
    8c46:	bf38      	it	cc
    8c48:	2304      	movcc	r3, #4
    8c4a:	e04f      	b.n	8cec <HAL_I2C_Init+0x1c4>
    8c4c:	687b      	ldr	r3, [r7, #4]
    8c4e:	689b      	ldr	r3, [r3, #8]
    8c50:	2b00      	cmp	r3, #0
    8c52:	d111      	bne.n	8c78 <HAL_I2C_Init+0x150>
    8c54:	68fb      	ldr	r3, [r7, #12]
    8c56:	1e58      	subs	r0, r3, #1
    8c58:	687b      	ldr	r3, [r7, #4]
    8c5a:	6859      	ldr	r1, [r3, #4]
    8c5c:	460b      	mov	r3, r1
    8c5e:	005b      	lsls	r3, r3, #1
    8c60:	440b      	add	r3, r1
    8c62:	fbb0 f3f3 	udiv	r3, r0, r3
    8c66:	3301      	adds	r3, #1
    8c68:	f3c3 030b 	ubfx	r3, r3, #0, #12
    8c6c:	2b00      	cmp	r3, #0
    8c6e:	bf0c      	ite	eq
    8c70:	2301      	moveq	r3, #1
    8c72:	2300      	movne	r3, #0
    8c74:	b2db      	uxtb	r3, r3
    8c76:	e012      	b.n	8c9e <HAL_I2C_Init+0x176>
    8c78:	68fb      	ldr	r3, [r7, #12]
    8c7a:	1e58      	subs	r0, r3, #1
    8c7c:	687b      	ldr	r3, [r7, #4]
    8c7e:	6859      	ldr	r1, [r3, #4]
    8c80:	460b      	mov	r3, r1
    8c82:	009b      	lsls	r3, r3, #2
    8c84:	440b      	add	r3, r1
    8c86:	0099      	lsls	r1, r3, #2
    8c88:	440b      	add	r3, r1
    8c8a:	fbb0 f3f3 	udiv	r3, r0, r3
    8c8e:	3301      	adds	r3, #1
    8c90:	f3c3 030b 	ubfx	r3, r3, #0, #12
    8c94:	2b00      	cmp	r3, #0
    8c96:	bf0c      	ite	eq
    8c98:	2301      	moveq	r3, #1
    8c9a:	2300      	movne	r3, #0
    8c9c:	b2db      	uxtb	r3, r3
    8c9e:	2b00      	cmp	r3, #0
    8ca0:	d001      	beq.n	8ca6 <HAL_I2C_Init+0x17e>
    8ca2:	2301      	movs	r3, #1
    8ca4:	e022      	b.n	8cec <HAL_I2C_Init+0x1c4>
    8ca6:	687b      	ldr	r3, [r7, #4]
    8ca8:	689b      	ldr	r3, [r3, #8]
    8caa:	2b00      	cmp	r3, #0
    8cac:	d10e      	bne.n	8ccc <HAL_I2C_Init+0x1a4>
    8cae:	68fb      	ldr	r3, [r7, #12]
    8cb0:	1e58      	subs	r0, r3, #1
    8cb2:	687b      	ldr	r3, [r7, #4]
    8cb4:	6859      	ldr	r1, [r3, #4]
    8cb6:	460b      	mov	r3, r1
    8cb8:	005b      	lsls	r3, r3, #1
    8cba:	440b      	add	r3, r1
    8cbc:	fbb0 f3f3 	udiv	r3, r0, r3
    8cc0:	3301      	adds	r3, #1
    8cc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    8cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    8cca:	e00f      	b.n	8cec <HAL_I2C_Init+0x1c4>
    8ccc:	68fb      	ldr	r3, [r7, #12]
    8cce:	1e58      	subs	r0, r3, #1
    8cd0:	687b      	ldr	r3, [r7, #4]
    8cd2:	6859      	ldr	r1, [r3, #4]
    8cd4:	460b      	mov	r3, r1
    8cd6:	009b      	lsls	r3, r3, #2
    8cd8:	440b      	add	r3, r1
    8cda:	0099      	lsls	r1, r3, #2
    8cdc:	440b      	add	r3, r1
    8cde:	fbb0 f3f3 	udiv	r3, r0, r3
    8ce2:	3301      	adds	r3, #1
    8ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
    8ce8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
    8cec:	6879      	ldr	r1, [r7, #4]
    8cee:	6809      	ldr	r1, [r1, #0]
    8cf0:	4313      	orrs	r3, r2
    8cf2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
    8cf4:	687b      	ldr	r3, [r7, #4]
    8cf6:	681b      	ldr	r3, [r3, #0]
    8cf8:	681b      	ldr	r3, [r3, #0]
    8cfa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
    8cfe:	687b      	ldr	r3, [r7, #4]
    8d00:	69da      	ldr	r2, [r3, #28]
    8d02:	687b      	ldr	r3, [r7, #4]
    8d04:	6a1b      	ldr	r3, [r3, #32]
    8d06:	431a      	orrs	r2, r3
    8d08:	687b      	ldr	r3, [r7, #4]
    8d0a:	681b      	ldr	r3, [r3, #0]
    8d0c:	430a      	orrs	r2, r1
    8d0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
    8d10:	687b      	ldr	r3, [r7, #4]
    8d12:	681b      	ldr	r3, [r3, #0]
    8d14:	689b      	ldr	r3, [r3, #8]
    8d16:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
    8d1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    8d1e:	687a      	ldr	r2, [r7, #4]
    8d20:	6911      	ldr	r1, [r2, #16]
    8d22:	687a      	ldr	r2, [r7, #4]
    8d24:	68d2      	ldr	r2, [r2, #12]
    8d26:	4311      	orrs	r1, r2
    8d28:	687a      	ldr	r2, [r7, #4]
    8d2a:	6812      	ldr	r2, [r2, #0]
    8d2c:	430b      	orrs	r3, r1
    8d2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
    8d30:	687b      	ldr	r3, [r7, #4]
    8d32:	681b      	ldr	r3, [r3, #0]
    8d34:	68db      	ldr	r3, [r3, #12]
    8d36:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    8d3a:	687b      	ldr	r3, [r7, #4]
    8d3c:	695a      	ldr	r2, [r3, #20]
    8d3e:	687b      	ldr	r3, [r7, #4]
    8d40:	699b      	ldr	r3, [r3, #24]
    8d42:	431a      	orrs	r2, r3
    8d44:	687b      	ldr	r3, [r7, #4]
    8d46:	681b      	ldr	r3, [r3, #0]
    8d48:	430a      	orrs	r2, r1
    8d4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
    8d4c:	687b      	ldr	r3, [r7, #4]
    8d4e:	681b      	ldr	r3, [r3, #0]
    8d50:	681a      	ldr	r2, [r3, #0]
    8d52:	687b      	ldr	r3, [r7, #4]
    8d54:	681b      	ldr	r3, [r3, #0]
    8d56:	f042 0201 	orr.w	r2, r2, #1
    8d5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
    8d5c:	687b      	ldr	r3, [r7, #4]
    8d5e:	2200      	movs	r2, #0
    8d60:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
    8d62:	687b      	ldr	r3, [r7, #4]
    8d64:	2220      	movs	r2, #32
    8d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
    8d6a:	687b      	ldr	r3, [r7, #4]
    8d6c:	2200      	movs	r2, #0
    8d6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
    8d70:	687b      	ldr	r3, [r7, #4]
    8d72:	2200      	movs	r2, #0
    8d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
    8d78:	2300      	movs	r3, #0
}
    8d7a:	4618      	mov	r0, r3
    8d7c:	3710      	adds	r7, #16
    8d7e:	46bd      	mov	sp, r7
    8d80:	bd80      	pop	{r7, pc}
    8d82:	bf00      	nop
    8d84:	000186a0 	.word	0x000186a0
    8d88:	001e847f 	.word	0x001e847f
    8d8c:	003d08ff 	.word	0x003d08ff
    8d90:	431bde83 	.word	0x431bde83
    8d94:	10624dd3 	.word	0x10624dd3

00008d98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
    8d98:	b580      	push	{r7, lr}
    8d9a:	b086      	sub	sp, #24
    8d9c:	af00      	add	r7, sp, #0
    8d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
    8da0:	687b      	ldr	r3, [r7, #4]
    8da2:	2b00      	cmp	r3, #0
    8da4:	d101      	bne.n	8daa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
    8da6:	2301      	movs	r3, #1
    8da8:	e25b      	b.n	9262 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
    8daa:	687b      	ldr	r3, [r7, #4]
    8dac:	681b      	ldr	r3, [r3, #0]
    8dae:	f003 0301 	and.w	r3, r3, #1
    8db2:	2b00      	cmp	r3, #0
    8db4:	d075      	beq.n	8ea2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
    8db6:	4ba3      	ldr	r3, [pc, #652]	; (9044 <HAL_RCC_OscConfig+0x2ac>)
    8db8:	689b      	ldr	r3, [r3, #8]
    8dba:	f003 030c 	and.w	r3, r3, #12
    8dbe:	2b04      	cmp	r3, #4
    8dc0:	d00c      	beq.n	8ddc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
    8dc2:	4ba0      	ldr	r3, [pc, #640]	; (9044 <HAL_RCC_OscConfig+0x2ac>)
    8dc4:	689b      	ldr	r3, [r3, #8]
    8dc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
    8dca:	2b08      	cmp	r3, #8
    8dcc:	d112      	bne.n	8df4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
    8dce:	4b9d      	ldr	r3, [pc, #628]	; (9044 <HAL_RCC_OscConfig+0x2ac>)
    8dd0:	685b      	ldr	r3, [r3, #4]
    8dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    8dd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    8dda:	d10b      	bne.n	8df4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
    8ddc:	4b99      	ldr	r3, [pc, #612]	; (9044 <HAL_RCC_OscConfig+0x2ac>)
    8dde:	681b      	ldr	r3, [r3, #0]
    8de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    8de4:	2b00      	cmp	r3, #0
    8de6:	d05b      	beq.n	8ea0 <HAL_RCC_OscConfig+0x108>
    8de8:	687b      	ldr	r3, [r7, #4]
    8dea:	685b      	ldr	r3, [r3, #4]
    8dec:	2b00      	cmp	r3, #0
    8dee:	d157      	bne.n	8ea0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
    8df0:	2301      	movs	r3, #1
    8df2:	e236      	b.n	9262 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
    8df4:	687b      	ldr	r3, [r7, #4]
    8df6:	685b      	ldr	r3, [r3, #4]
    8df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    8dfc:	d106      	bne.n	8e0c <HAL_RCC_OscConfig+0x74>
    8dfe:	4b91      	ldr	r3, [pc, #580]	; (9044 <HAL_RCC_OscConfig+0x2ac>)
    8e00:	681b      	ldr	r3, [r3, #0]
    8e02:	4a90      	ldr	r2, [pc, #576]	; (9044 <HAL_RCC_OscConfig+0x2ac>)
    8e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8e08:	6013      	str	r3, [r2, #0]
    8e0a:	e01d      	b.n	8e48 <HAL_RCC_OscConfig+0xb0>
    8e0c:	687b      	ldr	r3, [r7, #4]
    8e0e:	685b      	ldr	r3, [r3, #4]
    8e10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
    8e14:	d10c      	bne.n	8e30 <HAL_RCC_OscConfig+0x98>
    8e16:	4b8b      	ldr	r3, [pc, #556]	; (9044 <HAL_RCC_OscConfig+0x2ac>)
    8e18:	681b      	ldr	r3, [r3, #0]
    8e1a:	4a8a      	ldr	r2, [pc, #552]	; (9044 <HAL_RCC_OscConfig+0x2ac>)
    8e1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    8e20:	6013      	str	r3, [r2, #0]
    8e22:	4b88      	ldr	r3, [pc, #544]	; (9044 <HAL_RCC_OscConfig+0x2ac>)
    8e24:	681b      	ldr	r3, [r3, #0]
    8e26:	4a87      	ldr	r2, [pc, #540]	; (9044 <HAL_RCC_OscConfig+0x2ac>)
    8e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8e2c:	6013      	str	r3, [r2, #0]
    8e2e:	e00b      	b.n	8e48 <HAL_RCC_OscConfig+0xb0>
    8e30:	4b84      	ldr	r3, [pc, #528]	; (9044 <HAL_RCC_OscConfig+0x2ac>)
    8e32:	681b      	ldr	r3, [r3, #0]
    8e34:	4a83      	ldr	r2, [pc, #524]	; (9044 <HAL_RCC_OscConfig+0x2ac>)
    8e36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    8e3a:	6013      	str	r3, [r2, #0]
    8e3c:	4b81      	ldr	r3, [pc, #516]	; (9044 <HAL_RCC_OscConfig+0x2ac>)
    8e3e:	681b      	ldr	r3, [r3, #0]
    8e40:	4a80      	ldr	r2, [pc, #512]	; (9044 <HAL_RCC_OscConfig+0x2ac>)
    8e42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    8e46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
    8e48:	687b      	ldr	r3, [r7, #4]
    8e4a:	685b      	ldr	r3, [r3, #4]
    8e4c:	2b00      	cmp	r3, #0
    8e4e:	d013      	beq.n	8e78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
    8e50:	f7ff fbe0 	bl	8614 <HAL_GetTick>
    8e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
    8e56:	e008      	b.n	8e6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
    8e58:	f7ff fbdc 	bl	8614 <HAL_GetTick>
    8e5c:	4602      	mov	r2, r0
    8e5e:	693b      	ldr	r3, [r7, #16]
    8e60:	1ad3      	subs	r3, r2, r3
    8e62:	2b64      	cmp	r3, #100	; 0x64
    8e64:	d901      	bls.n	8e6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
    8e66:	2303      	movs	r3, #3
    8e68:	e1fb      	b.n	9262 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
    8e6a:	4b76      	ldr	r3, [pc, #472]	; (9044 <HAL_RCC_OscConfig+0x2ac>)
    8e6c:	681b      	ldr	r3, [r3, #0]
    8e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    8e72:	2b00      	cmp	r3, #0
    8e74:	d0f0      	beq.n	8e58 <HAL_RCC_OscConfig+0xc0>
    8e76:	e014      	b.n	8ea2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
    8e78:	f7ff fbcc 	bl	8614 <HAL_GetTick>
    8e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
    8e7e:	e008      	b.n	8e92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
    8e80:	f7ff fbc8 	bl	8614 <HAL_GetTick>
    8e84:	4602      	mov	r2, r0
    8e86:	693b      	ldr	r3, [r7, #16]
    8e88:	1ad3      	subs	r3, r2, r3
    8e8a:	2b64      	cmp	r3, #100	; 0x64
    8e8c:	d901      	bls.n	8e92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
    8e8e:	2303      	movs	r3, #3
    8e90:	e1e7      	b.n	9262 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
    8e92:	4b6c      	ldr	r3, [pc, #432]	; (9044 <HAL_RCC_OscConfig+0x2ac>)
    8e94:	681b      	ldr	r3, [r3, #0]
    8e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    8e9a:	2b00      	cmp	r3, #0
    8e9c:	d1f0      	bne.n	8e80 <HAL_RCC_OscConfig+0xe8>
    8e9e:	e000      	b.n	8ea2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
    8ea0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
    8ea2:	687b      	ldr	r3, [r7, #4]
    8ea4:	681b      	ldr	r3, [r3, #0]
    8ea6:	f003 0302 	and.w	r3, r3, #2
    8eaa:	2b00      	cmp	r3, #0
    8eac:	d063      	beq.n	8f76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
    8eae:	4b65      	ldr	r3, [pc, #404]	; (9044 <HAL_RCC_OscConfig+0x2ac>)
    8eb0:	689b      	ldr	r3, [r3, #8]
    8eb2:	f003 030c 	and.w	r3, r3, #12
    8eb6:	2b00      	cmp	r3, #0
    8eb8:	d00b      	beq.n	8ed2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    8eba:	4b62      	ldr	r3, [pc, #392]	; (9044 <HAL_RCC_OscConfig+0x2ac>)
    8ebc:	689b      	ldr	r3, [r3, #8]
    8ebe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
    8ec2:	2b08      	cmp	r3, #8
    8ec4:	d11c      	bne.n	8f00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    8ec6:	4b5f      	ldr	r3, [pc, #380]	; (9044 <HAL_RCC_OscConfig+0x2ac>)
    8ec8:	685b      	ldr	r3, [r3, #4]
    8eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    8ece:	2b00      	cmp	r3, #0
    8ed0:	d116      	bne.n	8f00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
    8ed2:	4b5c      	ldr	r3, [pc, #368]	; (9044 <HAL_RCC_OscConfig+0x2ac>)
    8ed4:	681b      	ldr	r3, [r3, #0]
    8ed6:	f003 0302 	and.w	r3, r3, #2
    8eda:	2b00      	cmp	r3, #0
    8edc:	d005      	beq.n	8eea <HAL_RCC_OscConfig+0x152>
    8ede:	687b      	ldr	r3, [r7, #4]
    8ee0:	68db      	ldr	r3, [r3, #12]
    8ee2:	2b01      	cmp	r3, #1
    8ee4:	d001      	beq.n	8eea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
    8ee6:	2301      	movs	r3, #1
    8ee8:	e1bb      	b.n	9262 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
    8eea:	4b56      	ldr	r3, [pc, #344]	; (9044 <HAL_RCC_OscConfig+0x2ac>)
    8eec:	681b      	ldr	r3, [r3, #0]
    8eee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
    8ef2:	687b      	ldr	r3, [r7, #4]
    8ef4:	691b      	ldr	r3, [r3, #16]
    8ef6:	00db      	lsls	r3, r3, #3
    8ef8:	4952      	ldr	r1, [pc, #328]	; (9044 <HAL_RCC_OscConfig+0x2ac>)
    8efa:	4313      	orrs	r3, r2
    8efc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
    8efe:	e03a      	b.n	8f76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
    8f00:	687b      	ldr	r3, [r7, #4]
    8f02:	68db      	ldr	r3, [r3, #12]
    8f04:	2b00      	cmp	r3, #0
    8f06:	d020      	beq.n	8f4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
    8f08:	4b4f      	ldr	r3, [pc, #316]	; (9048 <HAL_RCC_OscConfig+0x2b0>)
    8f0a:	2201      	movs	r2, #1
    8f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
    8f0e:	f7ff fb81 	bl	8614 <HAL_GetTick>
    8f12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
    8f14:	e008      	b.n	8f28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
    8f16:	f7ff fb7d 	bl	8614 <HAL_GetTick>
    8f1a:	4602      	mov	r2, r0
    8f1c:	693b      	ldr	r3, [r7, #16]
    8f1e:	1ad3      	subs	r3, r2, r3
    8f20:	2b02      	cmp	r3, #2
    8f22:	d901      	bls.n	8f28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
    8f24:	2303      	movs	r3, #3
    8f26:	e19c      	b.n	9262 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
    8f28:	4b46      	ldr	r3, [pc, #280]	; (9044 <HAL_RCC_OscConfig+0x2ac>)
    8f2a:	681b      	ldr	r3, [r3, #0]
    8f2c:	f003 0302 	and.w	r3, r3, #2
    8f30:	2b00      	cmp	r3, #0
    8f32:	d0f0      	beq.n	8f16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
    8f34:	4b43      	ldr	r3, [pc, #268]	; (9044 <HAL_RCC_OscConfig+0x2ac>)
    8f36:	681b      	ldr	r3, [r3, #0]
    8f38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
    8f3c:	687b      	ldr	r3, [r7, #4]
    8f3e:	691b      	ldr	r3, [r3, #16]
    8f40:	00db      	lsls	r3, r3, #3
    8f42:	4940      	ldr	r1, [pc, #256]	; (9044 <HAL_RCC_OscConfig+0x2ac>)
    8f44:	4313      	orrs	r3, r2
    8f46:	600b      	str	r3, [r1, #0]
    8f48:	e015      	b.n	8f76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
    8f4a:	4b3f      	ldr	r3, [pc, #252]	; (9048 <HAL_RCC_OscConfig+0x2b0>)
    8f4c:	2200      	movs	r2, #0
    8f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
    8f50:	f7ff fb60 	bl	8614 <HAL_GetTick>
    8f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
    8f56:	e008      	b.n	8f6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
    8f58:	f7ff fb5c 	bl	8614 <HAL_GetTick>
    8f5c:	4602      	mov	r2, r0
    8f5e:	693b      	ldr	r3, [r7, #16]
    8f60:	1ad3      	subs	r3, r2, r3
    8f62:	2b02      	cmp	r3, #2
    8f64:	d901      	bls.n	8f6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
    8f66:	2303      	movs	r3, #3
    8f68:	e17b      	b.n	9262 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
    8f6a:	4b36      	ldr	r3, [pc, #216]	; (9044 <HAL_RCC_OscConfig+0x2ac>)
    8f6c:	681b      	ldr	r3, [r3, #0]
    8f6e:	f003 0302 	and.w	r3, r3, #2
    8f72:	2b00      	cmp	r3, #0
    8f74:	d1f0      	bne.n	8f58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
    8f76:	687b      	ldr	r3, [r7, #4]
    8f78:	681b      	ldr	r3, [r3, #0]
    8f7a:	f003 0308 	and.w	r3, r3, #8
    8f7e:	2b00      	cmp	r3, #0
    8f80:	d030      	beq.n	8fe4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
    8f82:	687b      	ldr	r3, [r7, #4]
    8f84:	695b      	ldr	r3, [r3, #20]
    8f86:	2b00      	cmp	r3, #0
    8f88:	d016      	beq.n	8fb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
    8f8a:	4b30      	ldr	r3, [pc, #192]	; (904c <HAL_RCC_OscConfig+0x2b4>)
    8f8c:	2201      	movs	r2, #1
    8f8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
    8f90:	f7ff fb40 	bl	8614 <HAL_GetTick>
    8f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
    8f96:	e008      	b.n	8faa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
    8f98:	f7ff fb3c 	bl	8614 <HAL_GetTick>
    8f9c:	4602      	mov	r2, r0
    8f9e:	693b      	ldr	r3, [r7, #16]
    8fa0:	1ad3      	subs	r3, r2, r3
    8fa2:	2b02      	cmp	r3, #2
    8fa4:	d901      	bls.n	8faa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
    8fa6:	2303      	movs	r3, #3
    8fa8:	e15b      	b.n	9262 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
    8faa:	4b26      	ldr	r3, [pc, #152]	; (9044 <HAL_RCC_OscConfig+0x2ac>)
    8fac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    8fae:	f003 0302 	and.w	r3, r3, #2
    8fb2:	2b00      	cmp	r3, #0
    8fb4:	d0f0      	beq.n	8f98 <HAL_RCC_OscConfig+0x200>
    8fb6:	e015      	b.n	8fe4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
    8fb8:	4b24      	ldr	r3, [pc, #144]	; (904c <HAL_RCC_OscConfig+0x2b4>)
    8fba:	2200      	movs	r2, #0
    8fbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
    8fbe:	f7ff fb29 	bl	8614 <HAL_GetTick>
    8fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
    8fc4:	e008      	b.n	8fd8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
    8fc6:	f7ff fb25 	bl	8614 <HAL_GetTick>
    8fca:	4602      	mov	r2, r0
    8fcc:	693b      	ldr	r3, [r7, #16]
    8fce:	1ad3      	subs	r3, r2, r3
    8fd0:	2b02      	cmp	r3, #2
    8fd2:	d901      	bls.n	8fd8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
    8fd4:	2303      	movs	r3, #3
    8fd6:	e144      	b.n	9262 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
    8fd8:	4b1a      	ldr	r3, [pc, #104]	; (9044 <HAL_RCC_OscConfig+0x2ac>)
    8fda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    8fdc:	f003 0302 	and.w	r3, r3, #2
    8fe0:	2b00      	cmp	r3, #0
    8fe2:	d1f0      	bne.n	8fc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
    8fe4:	687b      	ldr	r3, [r7, #4]
    8fe6:	681b      	ldr	r3, [r3, #0]
    8fe8:	f003 0304 	and.w	r3, r3, #4
    8fec:	2b00      	cmp	r3, #0
    8fee:	f000 80a0 	beq.w	9132 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
    8ff2:	2300      	movs	r3, #0
    8ff4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
    8ff6:	4b13      	ldr	r3, [pc, #76]	; (9044 <HAL_RCC_OscConfig+0x2ac>)
    8ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    8ffe:	2b00      	cmp	r3, #0
    9000:	d10f      	bne.n	9022 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
    9002:	2300      	movs	r3, #0
    9004:	60bb      	str	r3, [r7, #8]
    9006:	4b0f      	ldr	r3, [pc, #60]	; (9044 <HAL_RCC_OscConfig+0x2ac>)
    9008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    900a:	4a0e      	ldr	r2, [pc, #56]	; (9044 <HAL_RCC_OscConfig+0x2ac>)
    900c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    9010:	6413      	str	r3, [r2, #64]	; 0x40
    9012:	4b0c      	ldr	r3, [pc, #48]	; (9044 <HAL_RCC_OscConfig+0x2ac>)
    9014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    901a:	60bb      	str	r3, [r7, #8]
    901c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
    901e:	2301      	movs	r3, #1
    9020:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    9022:	4b0b      	ldr	r3, [pc, #44]	; (9050 <HAL_RCC_OscConfig+0x2b8>)
    9024:	681b      	ldr	r3, [r3, #0]
    9026:	f403 7380 	and.w	r3, r3, #256	; 0x100
    902a:	2b00      	cmp	r3, #0
    902c:	d121      	bne.n	9072 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
    902e:	4b08      	ldr	r3, [pc, #32]	; (9050 <HAL_RCC_OscConfig+0x2b8>)
    9030:	681b      	ldr	r3, [r3, #0]
    9032:	4a07      	ldr	r2, [pc, #28]	; (9050 <HAL_RCC_OscConfig+0x2b8>)
    9034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    9038:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
    903a:	f7ff faeb 	bl	8614 <HAL_GetTick>
    903e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    9040:	e011      	b.n	9066 <HAL_RCC_OscConfig+0x2ce>
    9042:	bf00      	nop
    9044:	40023800 	.word	0x40023800
    9048:	42470000 	.word	0x42470000
    904c:	42470e80 	.word	0x42470e80
    9050:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
    9054:	f7ff fade 	bl	8614 <HAL_GetTick>
    9058:	4602      	mov	r2, r0
    905a:	693b      	ldr	r3, [r7, #16]
    905c:	1ad3      	subs	r3, r2, r3
    905e:	2b02      	cmp	r3, #2
    9060:	d901      	bls.n	9066 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
    9062:	2303      	movs	r3, #3
    9064:	e0fd      	b.n	9262 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    9066:	4b81      	ldr	r3, [pc, #516]	; (926c <HAL_RCC_OscConfig+0x4d4>)
    9068:	681b      	ldr	r3, [r3, #0]
    906a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    906e:	2b00      	cmp	r3, #0
    9070:	d0f0      	beq.n	9054 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    9072:	687b      	ldr	r3, [r7, #4]
    9074:	689b      	ldr	r3, [r3, #8]
    9076:	2b01      	cmp	r3, #1
    9078:	d106      	bne.n	9088 <HAL_RCC_OscConfig+0x2f0>
    907a:	4b7d      	ldr	r3, [pc, #500]	; (9270 <HAL_RCC_OscConfig+0x4d8>)
    907c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    907e:	4a7c      	ldr	r2, [pc, #496]	; (9270 <HAL_RCC_OscConfig+0x4d8>)
    9080:	f043 0301 	orr.w	r3, r3, #1
    9084:	6713      	str	r3, [r2, #112]	; 0x70
    9086:	e01c      	b.n	90c2 <HAL_RCC_OscConfig+0x32a>
    9088:	687b      	ldr	r3, [r7, #4]
    908a:	689b      	ldr	r3, [r3, #8]
    908c:	2b05      	cmp	r3, #5
    908e:	d10c      	bne.n	90aa <HAL_RCC_OscConfig+0x312>
    9090:	4b77      	ldr	r3, [pc, #476]	; (9270 <HAL_RCC_OscConfig+0x4d8>)
    9092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    9094:	4a76      	ldr	r2, [pc, #472]	; (9270 <HAL_RCC_OscConfig+0x4d8>)
    9096:	f043 0304 	orr.w	r3, r3, #4
    909a:	6713      	str	r3, [r2, #112]	; 0x70
    909c:	4b74      	ldr	r3, [pc, #464]	; (9270 <HAL_RCC_OscConfig+0x4d8>)
    909e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    90a0:	4a73      	ldr	r2, [pc, #460]	; (9270 <HAL_RCC_OscConfig+0x4d8>)
    90a2:	f043 0301 	orr.w	r3, r3, #1
    90a6:	6713      	str	r3, [r2, #112]	; 0x70
    90a8:	e00b      	b.n	90c2 <HAL_RCC_OscConfig+0x32a>
    90aa:	4b71      	ldr	r3, [pc, #452]	; (9270 <HAL_RCC_OscConfig+0x4d8>)
    90ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    90ae:	4a70      	ldr	r2, [pc, #448]	; (9270 <HAL_RCC_OscConfig+0x4d8>)
    90b0:	f023 0301 	bic.w	r3, r3, #1
    90b4:	6713      	str	r3, [r2, #112]	; 0x70
    90b6:	4b6e      	ldr	r3, [pc, #440]	; (9270 <HAL_RCC_OscConfig+0x4d8>)
    90b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    90ba:	4a6d      	ldr	r2, [pc, #436]	; (9270 <HAL_RCC_OscConfig+0x4d8>)
    90bc:	f023 0304 	bic.w	r3, r3, #4
    90c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    90c2:	687b      	ldr	r3, [r7, #4]
    90c4:	689b      	ldr	r3, [r3, #8]
    90c6:	2b00      	cmp	r3, #0
    90c8:	d015      	beq.n	90f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
    90ca:	f7ff faa3 	bl	8614 <HAL_GetTick>
    90ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
    90d0:	e00a      	b.n	90e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
    90d2:	f7ff fa9f 	bl	8614 <HAL_GetTick>
    90d6:	4602      	mov	r2, r0
    90d8:	693b      	ldr	r3, [r7, #16]
    90da:	1ad3      	subs	r3, r2, r3
    90dc:	f241 3288 	movw	r2, #5000	; 0x1388
    90e0:	4293      	cmp	r3, r2
    90e2:	d901      	bls.n	90e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
    90e4:	2303      	movs	r3, #3
    90e6:	e0bc      	b.n	9262 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
    90e8:	4b61      	ldr	r3, [pc, #388]	; (9270 <HAL_RCC_OscConfig+0x4d8>)
    90ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    90ec:	f003 0302 	and.w	r3, r3, #2
    90f0:	2b00      	cmp	r3, #0
    90f2:	d0ee      	beq.n	90d2 <HAL_RCC_OscConfig+0x33a>
    90f4:	e014      	b.n	9120 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
    90f6:	f7ff fa8d 	bl	8614 <HAL_GetTick>
    90fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
    90fc:	e00a      	b.n	9114 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
    90fe:	f7ff fa89 	bl	8614 <HAL_GetTick>
    9102:	4602      	mov	r2, r0
    9104:	693b      	ldr	r3, [r7, #16]
    9106:	1ad3      	subs	r3, r2, r3
    9108:	f241 3288 	movw	r2, #5000	; 0x1388
    910c:	4293      	cmp	r3, r2
    910e:	d901      	bls.n	9114 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
    9110:	2303      	movs	r3, #3
    9112:	e0a6      	b.n	9262 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
    9114:	4b56      	ldr	r3, [pc, #344]	; (9270 <HAL_RCC_OscConfig+0x4d8>)
    9116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    9118:	f003 0302 	and.w	r3, r3, #2
    911c:	2b00      	cmp	r3, #0
    911e:	d1ee      	bne.n	90fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
    9120:	7dfb      	ldrb	r3, [r7, #23]
    9122:	2b01      	cmp	r3, #1
    9124:	d105      	bne.n	9132 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
    9126:	4b52      	ldr	r3, [pc, #328]	; (9270 <HAL_RCC_OscConfig+0x4d8>)
    9128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    912a:	4a51      	ldr	r2, [pc, #324]	; (9270 <HAL_RCC_OscConfig+0x4d8>)
    912c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    9130:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
    9132:	687b      	ldr	r3, [r7, #4]
    9134:	699b      	ldr	r3, [r3, #24]
    9136:	2b00      	cmp	r3, #0
    9138:	f000 8092 	beq.w	9260 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    913c:	4b4c      	ldr	r3, [pc, #304]	; (9270 <HAL_RCC_OscConfig+0x4d8>)
    913e:	689b      	ldr	r3, [r3, #8]
    9140:	f003 030c 	and.w	r3, r3, #12
    9144:	2b08      	cmp	r3, #8
    9146:	d05c      	beq.n	9202 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
    9148:	687b      	ldr	r3, [r7, #4]
    914a:	699b      	ldr	r3, [r3, #24]
    914c:	2b02      	cmp	r3, #2
    914e:	d141      	bne.n	91d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
    9150:	4b48      	ldr	r3, [pc, #288]	; (9274 <HAL_RCC_OscConfig+0x4dc>)
    9152:	2200      	movs	r2, #0
    9154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
    9156:	f7ff fa5d 	bl	8614 <HAL_GetTick>
    915a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
    915c:	e008      	b.n	9170 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
    915e:	f7ff fa59 	bl	8614 <HAL_GetTick>
    9162:	4602      	mov	r2, r0
    9164:	693b      	ldr	r3, [r7, #16]
    9166:	1ad3      	subs	r3, r2, r3
    9168:	2b02      	cmp	r3, #2
    916a:	d901      	bls.n	9170 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
    916c:	2303      	movs	r3, #3
    916e:	e078      	b.n	9262 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
    9170:	4b3f      	ldr	r3, [pc, #252]	; (9270 <HAL_RCC_OscConfig+0x4d8>)
    9172:	681b      	ldr	r3, [r3, #0]
    9174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    9178:	2b00      	cmp	r3, #0
    917a:	d1f0      	bne.n	915e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
    917c:	687b      	ldr	r3, [r7, #4]
    917e:	69da      	ldr	r2, [r3, #28]
    9180:	687b      	ldr	r3, [r7, #4]
    9182:	6a1b      	ldr	r3, [r3, #32]
    9184:	431a      	orrs	r2, r3
    9186:	687b      	ldr	r3, [r7, #4]
    9188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    918a:	019b      	lsls	r3, r3, #6
    918c:	431a      	orrs	r2, r3
    918e:	687b      	ldr	r3, [r7, #4]
    9190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9192:	085b      	lsrs	r3, r3, #1
    9194:	3b01      	subs	r3, #1
    9196:	041b      	lsls	r3, r3, #16
    9198:	431a      	orrs	r2, r3
    919a:	687b      	ldr	r3, [r7, #4]
    919c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    919e:	061b      	lsls	r3, r3, #24
    91a0:	4933      	ldr	r1, [pc, #204]	; (9270 <HAL_RCC_OscConfig+0x4d8>)
    91a2:	4313      	orrs	r3, r2
    91a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
    91a6:	4b33      	ldr	r3, [pc, #204]	; (9274 <HAL_RCC_OscConfig+0x4dc>)
    91a8:	2201      	movs	r2, #1
    91aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
    91ac:	f7ff fa32 	bl	8614 <HAL_GetTick>
    91b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
    91b2:	e008      	b.n	91c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
    91b4:	f7ff fa2e 	bl	8614 <HAL_GetTick>
    91b8:	4602      	mov	r2, r0
    91ba:	693b      	ldr	r3, [r7, #16]
    91bc:	1ad3      	subs	r3, r2, r3
    91be:	2b02      	cmp	r3, #2
    91c0:	d901      	bls.n	91c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
    91c2:	2303      	movs	r3, #3
    91c4:	e04d      	b.n	9262 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
    91c6:	4b2a      	ldr	r3, [pc, #168]	; (9270 <HAL_RCC_OscConfig+0x4d8>)
    91c8:	681b      	ldr	r3, [r3, #0]
    91ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    91ce:	2b00      	cmp	r3, #0
    91d0:	d0f0      	beq.n	91b4 <HAL_RCC_OscConfig+0x41c>
    91d2:	e045      	b.n	9260 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
    91d4:	4b27      	ldr	r3, [pc, #156]	; (9274 <HAL_RCC_OscConfig+0x4dc>)
    91d6:	2200      	movs	r2, #0
    91d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
    91da:	f7ff fa1b 	bl	8614 <HAL_GetTick>
    91de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
    91e0:	e008      	b.n	91f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
    91e2:	f7ff fa17 	bl	8614 <HAL_GetTick>
    91e6:	4602      	mov	r2, r0
    91e8:	693b      	ldr	r3, [r7, #16]
    91ea:	1ad3      	subs	r3, r2, r3
    91ec:	2b02      	cmp	r3, #2
    91ee:	d901      	bls.n	91f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
    91f0:	2303      	movs	r3, #3
    91f2:	e036      	b.n	9262 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
    91f4:	4b1e      	ldr	r3, [pc, #120]	; (9270 <HAL_RCC_OscConfig+0x4d8>)
    91f6:	681b      	ldr	r3, [r3, #0]
    91f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    91fc:	2b00      	cmp	r3, #0
    91fe:	d1f0      	bne.n	91e2 <HAL_RCC_OscConfig+0x44a>
    9200:	e02e      	b.n	9260 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
    9202:	687b      	ldr	r3, [r7, #4]
    9204:	699b      	ldr	r3, [r3, #24]
    9206:	2b01      	cmp	r3, #1
    9208:	d101      	bne.n	920e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
    920a:	2301      	movs	r3, #1
    920c:	e029      	b.n	9262 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
    920e:	4b18      	ldr	r3, [pc, #96]	; (9270 <HAL_RCC_OscConfig+0x4d8>)
    9210:	685b      	ldr	r3, [r3, #4]
    9212:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
    9214:	68fb      	ldr	r3, [r7, #12]
    9216:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
    921a:	687b      	ldr	r3, [r7, #4]
    921c:	69db      	ldr	r3, [r3, #28]
    921e:	429a      	cmp	r2, r3
    9220:	d11c      	bne.n	925c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
    9222:	68fb      	ldr	r3, [r7, #12]
    9224:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    9228:	687b      	ldr	r3, [r7, #4]
    922a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
    922c:	429a      	cmp	r2, r3
    922e:	d115      	bne.n	925c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
    9230:	68fa      	ldr	r2, [r7, #12]
    9232:	f647 73c0 	movw	r3, #32704	; 0x7fc0
    9236:	4013      	ands	r3, r2
    9238:	687a      	ldr	r2, [r7, #4]
    923a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
    923c:	4293      	cmp	r3, r2
    923e:	d10d      	bne.n	925c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
    9240:	68fb      	ldr	r3, [r7, #12]
    9242:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
    9246:	687b      	ldr	r3, [r7, #4]
    9248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
    924a:	429a      	cmp	r2, r3
    924c:	d106      	bne.n	925c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
    924e:	68fb      	ldr	r3, [r7, #12]
    9250:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
    9254:	687b      	ldr	r3, [r7, #4]
    9256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
    9258:	429a      	cmp	r2, r3
    925a:	d001      	beq.n	9260 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
    925c:	2301      	movs	r3, #1
    925e:	e000      	b.n	9262 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
    9260:	2300      	movs	r3, #0
}
    9262:	4618      	mov	r0, r3
    9264:	3718      	adds	r7, #24
    9266:	46bd      	mov	sp, r7
    9268:	bd80      	pop	{r7, pc}
    926a:	bf00      	nop
    926c:	40007000 	.word	0x40007000
    9270:	40023800 	.word	0x40023800
    9274:	42470060 	.word	0x42470060

00009278 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
    9278:	b580      	push	{r7, lr}
    927a:	b084      	sub	sp, #16
    927c:	af00      	add	r7, sp, #0
    927e:	6078      	str	r0, [r7, #4]
    9280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
    9282:	687b      	ldr	r3, [r7, #4]
    9284:	2b00      	cmp	r3, #0
    9286:	d101      	bne.n	928c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
    9288:	2301      	movs	r3, #1
    928a:	e0cc      	b.n	9426 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
    928c:	4b68      	ldr	r3, [pc, #416]	; (9430 <HAL_RCC_ClockConfig+0x1b8>)
    928e:	681b      	ldr	r3, [r3, #0]
    9290:	f003 030f 	and.w	r3, r3, #15
    9294:	683a      	ldr	r2, [r7, #0]
    9296:	429a      	cmp	r2, r3
    9298:	d90c      	bls.n	92b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
    929a:	4b65      	ldr	r3, [pc, #404]	; (9430 <HAL_RCC_ClockConfig+0x1b8>)
    929c:	683a      	ldr	r2, [r7, #0]
    929e:	b2d2      	uxtb	r2, r2
    92a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
    92a2:	4b63      	ldr	r3, [pc, #396]	; (9430 <HAL_RCC_ClockConfig+0x1b8>)
    92a4:	681b      	ldr	r3, [r3, #0]
    92a6:	f003 030f 	and.w	r3, r3, #15
    92aa:	683a      	ldr	r2, [r7, #0]
    92ac:	429a      	cmp	r2, r3
    92ae:	d001      	beq.n	92b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
    92b0:	2301      	movs	r3, #1
    92b2:	e0b8      	b.n	9426 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
    92b4:	687b      	ldr	r3, [r7, #4]
    92b6:	681b      	ldr	r3, [r3, #0]
    92b8:	f003 0302 	and.w	r3, r3, #2
    92bc:	2b00      	cmp	r3, #0
    92be:	d020      	beq.n	9302 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
    92c0:	687b      	ldr	r3, [r7, #4]
    92c2:	681b      	ldr	r3, [r3, #0]
    92c4:	f003 0304 	and.w	r3, r3, #4
    92c8:	2b00      	cmp	r3, #0
    92ca:	d005      	beq.n	92d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
    92cc:	4b59      	ldr	r3, [pc, #356]	; (9434 <HAL_RCC_ClockConfig+0x1bc>)
    92ce:	689b      	ldr	r3, [r3, #8]
    92d0:	4a58      	ldr	r2, [pc, #352]	; (9434 <HAL_RCC_ClockConfig+0x1bc>)
    92d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
    92d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
    92d8:	687b      	ldr	r3, [r7, #4]
    92da:	681b      	ldr	r3, [r3, #0]
    92dc:	f003 0308 	and.w	r3, r3, #8
    92e0:	2b00      	cmp	r3, #0
    92e2:	d005      	beq.n	92f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
    92e4:	4b53      	ldr	r3, [pc, #332]	; (9434 <HAL_RCC_ClockConfig+0x1bc>)
    92e6:	689b      	ldr	r3, [r3, #8]
    92e8:	4a52      	ldr	r2, [pc, #328]	; (9434 <HAL_RCC_ClockConfig+0x1bc>)
    92ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
    92ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    92f0:	4b50      	ldr	r3, [pc, #320]	; (9434 <HAL_RCC_ClockConfig+0x1bc>)
    92f2:	689b      	ldr	r3, [r3, #8]
    92f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
    92f8:	687b      	ldr	r3, [r7, #4]
    92fa:	689b      	ldr	r3, [r3, #8]
    92fc:	494d      	ldr	r1, [pc, #308]	; (9434 <HAL_RCC_ClockConfig+0x1bc>)
    92fe:	4313      	orrs	r3, r2
    9300:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    9302:	687b      	ldr	r3, [r7, #4]
    9304:	681b      	ldr	r3, [r3, #0]
    9306:	f003 0301 	and.w	r3, r3, #1
    930a:	2b00      	cmp	r3, #0
    930c:	d044      	beq.n	9398 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    930e:	687b      	ldr	r3, [r7, #4]
    9310:	685b      	ldr	r3, [r3, #4]
    9312:	2b01      	cmp	r3, #1
    9314:	d107      	bne.n	9326 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
    9316:	4b47      	ldr	r3, [pc, #284]	; (9434 <HAL_RCC_ClockConfig+0x1bc>)
    9318:	681b      	ldr	r3, [r3, #0]
    931a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    931e:	2b00      	cmp	r3, #0
    9320:	d119      	bne.n	9356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
    9322:	2301      	movs	r3, #1
    9324:	e07f      	b.n	9426 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
    9326:	687b      	ldr	r3, [r7, #4]
    9328:	685b      	ldr	r3, [r3, #4]
    932a:	2b02      	cmp	r3, #2
    932c:	d003      	beq.n	9336 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    932e:	687b      	ldr	r3, [r7, #4]
    9330:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
    9332:	2b03      	cmp	r3, #3
    9334:	d107      	bne.n	9346 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
    9336:	4b3f      	ldr	r3, [pc, #252]	; (9434 <HAL_RCC_ClockConfig+0x1bc>)
    9338:	681b      	ldr	r3, [r3, #0]
    933a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    933e:	2b00      	cmp	r3, #0
    9340:	d109      	bne.n	9356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
    9342:	2301      	movs	r3, #1
    9344:	e06f      	b.n	9426 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
    9346:	4b3b      	ldr	r3, [pc, #236]	; (9434 <HAL_RCC_ClockConfig+0x1bc>)
    9348:	681b      	ldr	r3, [r3, #0]
    934a:	f003 0302 	and.w	r3, r3, #2
    934e:	2b00      	cmp	r3, #0
    9350:	d101      	bne.n	9356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
    9352:	2301      	movs	r3, #1
    9354:	e067      	b.n	9426 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    9356:	4b37      	ldr	r3, [pc, #220]	; (9434 <HAL_RCC_ClockConfig+0x1bc>)
    9358:	689b      	ldr	r3, [r3, #8]
    935a:	f023 0203 	bic.w	r2, r3, #3
    935e:	687b      	ldr	r3, [r7, #4]
    9360:	685b      	ldr	r3, [r3, #4]
    9362:	4934      	ldr	r1, [pc, #208]	; (9434 <HAL_RCC_ClockConfig+0x1bc>)
    9364:	4313      	orrs	r3, r2
    9366:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
    9368:	f7ff f954 	bl	8614 <HAL_GetTick>
    936c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
    936e:	e00a      	b.n	9386 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
    9370:	f7ff f950 	bl	8614 <HAL_GetTick>
    9374:	4602      	mov	r2, r0
    9376:	68fb      	ldr	r3, [r7, #12]
    9378:	1ad3      	subs	r3, r2, r3
    937a:	f241 3288 	movw	r2, #5000	; 0x1388
    937e:	4293      	cmp	r3, r2
    9380:	d901      	bls.n	9386 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
    9382:	2303      	movs	r3, #3
    9384:	e04f      	b.n	9426 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
    9386:	4b2b      	ldr	r3, [pc, #172]	; (9434 <HAL_RCC_ClockConfig+0x1bc>)
    9388:	689b      	ldr	r3, [r3, #8]
    938a:	f003 020c 	and.w	r2, r3, #12
    938e:	687b      	ldr	r3, [r7, #4]
    9390:	685b      	ldr	r3, [r3, #4]
    9392:	009b      	lsls	r3, r3, #2
    9394:	429a      	cmp	r2, r3
    9396:	d1eb      	bne.n	9370 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
    9398:	4b25      	ldr	r3, [pc, #148]	; (9430 <HAL_RCC_ClockConfig+0x1b8>)
    939a:	681b      	ldr	r3, [r3, #0]
    939c:	f003 030f 	and.w	r3, r3, #15
    93a0:	683a      	ldr	r2, [r7, #0]
    93a2:	429a      	cmp	r2, r3
    93a4:	d20c      	bcs.n	93c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
    93a6:	4b22      	ldr	r3, [pc, #136]	; (9430 <HAL_RCC_ClockConfig+0x1b8>)
    93a8:	683a      	ldr	r2, [r7, #0]
    93aa:	b2d2      	uxtb	r2, r2
    93ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
    93ae:	4b20      	ldr	r3, [pc, #128]	; (9430 <HAL_RCC_ClockConfig+0x1b8>)
    93b0:	681b      	ldr	r3, [r3, #0]
    93b2:	f003 030f 	and.w	r3, r3, #15
    93b6:	683a      	ldr	r2, [r7, #0]
    93b8:	429a      	cmp	r2, r3
    93ba:	d001      	beq.n	93c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
    93bc:	2301      	movs	r3, #1
    93be:	e032      	b.n	9426 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
    93c0:	687b      	ldr	r3, [r7, #4]
    93c2:	681b      	ldr	r3, [r3, #0]
    93c4:	f003 0304 	and.w	r3, r3, #4
    93c8:	2b00      	cmp	r3, #0
    93ca:	d008      	beq.n	93de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
    93cc:	4b19      	ldr	r3, [pc, #100]	; (9434 <HAL_RCC_ClockConfig+0x1bc>)
    93ce:	689b      	ldr	r3, [r3, #8]
    93d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
    93d4:	687b      	ldr	r3, [r7, #4]
    93d6:	68db      	ldr	r3, [r3, #12]
    93d8:	4916      	ldr	r1, [pc, #88]	; (9434 <HAL_RCC_ClockConfig+0x1bc>)
    93da:	4313      	orrs	r3, r2
    93dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
    93de:	687b      	ldr	r3, [r7, #4]
    93e0:	681b      	ldr	r3, [r3, #0]
    93e2:	f003 0308 	and.w	r3, r3, #8
    93e6:	2b00      	cmp	r3, #0
    93e8:	d009      	beq.n	93fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
    93ea:	4b12      	ldr	r3, [pc, #72]	; (9434 <HAL_RCC_ClockConfig+0x1bc>)
    93ec:	689b      	ldr	r3, [r3, #8]
    93ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
    93f2:	687b      	ldr	r3, [r7, #4]
    93f4:	691b      	ldr	r3, [r3, #16]
    93f6:	00db      	lsls	r3, r3, #3
    93f8:	490e      	ldr	r1, [pc, #56]	; (9434 <HAL_RCC_ClockConfig+0x1bc>)
    93fa:	4313      	orrs	r3, r2
    93fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
    93fe:	f000 f821 	bl	9444 <HAL_RCC_GetSysClockFreq>
    9402:	4601      	mov	r1, r0
    9404:	4b0b      	ldr	r3, [pc, #44]	; (9434 <HAL_RCC_ClockConfig+0x1bc>)
    9406:	689b      	ldr	r3, [r3, #8]
    9408:	091b      	lsrs	r3, r3, #4
    940a:	f003 030f 	and.w	r3, r3, #15
    940e:	4a0a      	ldr	r2, [pc, #40]	; (9438 <HAL_RCC_ClockConfig+0x1c0>)
    9410:	5cd3      	ldrb	r3, [r2, r3]
    9412:	fa21 f303 	lsr.w	r3, r1, r3
    9416:	4a09      	ldr	r2, [pc, #36]	; (943c <HAL_RCC_ClockConfig+0x1c4>)
    9418:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
    941a:	4b09      	ldr	r3, [pc, #36]	; (9440 <HAL_RCC_ClockConfig+0x1c8>)
    941c:	681b      	ldr	r3, [r3, #0]
    941e:	4618      	mov	r0, r3
    9420:	f7ff f87e 	bl	8520 <HAL_InitTick>

  return HAL_OK;
    9424:	2300      	movs	r3, #0
}
    9426:	4618      	mov	r0, r3
    9428:	3710      	adds	r7, #16
    942a:	46bd      	mov	sp, r7
    942c:	bd80      	pop	{r7, pc}
    942e:	bf00      	nop
    9430:	40023c00 	.word	0x40023c00
    9434:	40023800 	.word	0x40023800
    9438:	0000cd64 	.word	0x0000cd64
    943c:	0001cdac 	.word	0x0001cdac
    9440:	0001cdb0 	.word	0x0001cdb0

00009444 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
    9444:	b5f0      	push	{r4, r5, r6, r7, lr}
    9446:	b085      	sub	sp, #20
    9448:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
    944a:	2300      	movs	r3, #0
    944c:	607b      	str	r3, [r7, #4]
    944e:	2300      	movs	r3, #0
    9450:	60fb      	str	r3, [r7, #12]
    9452:	2300      	movs	r3, #0
    9454:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
    9456:	2300      	movs	r3, #0
    9458:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
    945a:	4b63      	ldr	r3, [pc, #396]	; (95e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
    945c:	689b      	ldr	r3, [r3, #8]
    945e:	f003 030c 	and.w	r3, r3, #12
    9462:	2b04      	cmp	r3, #4
    9464:	d007      	beq.n	9476 <HAL_RCC_GetSysClockFreq+0x32>
    9466:	2b08      	cmp	r3, #8
    9468:	d008      	beq.n	947c <HAL_RCC_GetSysClockFreq+0x38>
    946a:	2b00      	cmp	r3, #0
    946c:	f040 80b4 	bne.w	95d8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
    9470:	4b5e      	ldr	r3, [pc, #376]	; (95ec <HAL_RCC_GetSysClockFreq+0x1a8>)
    9472:	60bb      	str	r3, [r7, #8]
       break;
    9474:	e0b3      	b.n	95de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
    9476:	4b5e      	ldr	r3, [pc, #376]	; (95f0 <HAL_RCC_GetSysClockFreq+0x1ac>)
    9478:	60bb      	str	r3, [r7, #8]
      break;
    947a:	e0b0      	b.n	95de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
    947c:	4b5a      	ldr	r3, [pc, #360]	; (95e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
    947e:	685b      	ldr	r3, [r3, #4]
    9480:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9484:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
    9486:	4b58      	ldr	r3, [pc, #352]	; (95e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
    9488:	685b      	ldr	r3, [r3, #4]
    948a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    948e:	2b00      	cmp	r3, #0
    9490:	d04a      	beq.n	9528 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
    9492:	4b55      	ldr	r3, [pc, #340]	; (95e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
    9494:	685b      	ldr	r3, [r3, #4]
    9496:	099b      	lsrs	r3, r3, #6
    9498:	f04f 0400 	mov.w	r4, #0
    949c:	f240 11ff 	movw	r1, #511	; 0x1ff
    94a0:	f04f 0200 	mov.w	r2, #0
    94a4:	ea03 0501 	and.w	r5, r3, r1
    94a8:	ea04 0602 	and.w	r6, r4, r2
    94ac:	4629      	mov	r1, r5
    94ae:	4632      	mov	r2, r6
    94b0:	f04f 0300 	mov.w	r3, #0
    94b4:	f04f 0400 	mov.w	r4, #0
    94b8:	0154      	lsls	r4, r2, #5
    94ba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
    94be:	014b      	lsls	r3, r1, #5
    94c0:	4619      	mov	r1, r3
    94c2:	4622      	mov	r2, r4
    94c4:	1b49      	subs	r1, r1, r5
    94c6:	eb62 0206 	sbc.w	r2, r2, r6
    94ca:	f04f 0300 	mov.w	r3, #0
    94ce:	f04f 0400 	mov.w	r4, #0
    94d2:	0194      	lsls	r4, r2, #6
    94d4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
    94d8:	018b      	lsls	r3, r1, #6
    94da:	1a5b      	subs	r3, r3, r1
    94dc:	eb64 0402 	sbc.w	r4, r4, r2
    94e0:	f04f 0100 	mov.w	r1, #0
    94e4:	f04f 0200 	mov.w	r2, #0
    94e8:	00e2      	lsls	r2, r4, #3
    94ea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    94ee:	00d9      	lsls	r1, r3, #3
    94f0:	460b      	mov	r3, r1
    94f2:	4614      	mov	r4, r2
    94f4:	195b      	adds	r3, r3, r5
    94f6:	eb44 0406 	adc.w	r4, r4, r6
    94fa:	f04f 0100 	mov.w	r1, #0
    94fe:	f04f 0200 	mov.w	r2, #0
    9502:	0262      	lsls	r2, r4, #9
    9504:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
    9508:	0259      	lsls	r1, r3, #9
    950a:	460b      	mov	r3, r1
    950c:	4614      	mov	r4, r2
    950e:	4618      	mov	r0, r3
    9510:	4621      	mov	r1, r4
    9512:	687b      	ldr	r3, [r7, #4]
    9514:	f04f 0400 	mov.w	r4, #0
    9518:	461a      	mov	r2, r3
    951a:	4623      	mov	r3, r4
    951c:	f003 fa82 	bl	ca24 <__aeabi_uldivmod>
    9520:	4603      	mov	r3, r0
    9522:	460c      	mov	r4, r1
    9524:	60fb      	str	r3, [r7, #12]
    9526:	e049      	b.n	95bc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
    9528:	4b2f      	ldr	r3, [pc, #188]	; (95e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
    952a:	685b      	ldr	r3, [r3, #4]
    952c:	099b      	lsrs	r3, r3, #6
    952e:	f04f 0400 	mov.w	r4, #0
    9532:	f240 11ff 	movw	r1, #511	; 0x1ff
    9536:	f04f 0200 	mov.w	r2, #0
    953a:	ea03 0501 	and.w	r5, r3, r1
    953e:	ea04 0602 	and.w	r6, r4, r2
    9542:	4629      	mov	r1, r5
    9544:	4632      	mov	r2, r6
    9546:	f04f 0300 	mov.w	r3, #0
    954a:	f04f 0400 	mov.w	r4, #0
    954e:	0154      	lsls	r4, r2, #5
    9550:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
    9554:	014b      	lsls	r3, r1, #5
    9556:	4619      	mov	r1, r3
    9558:	4622      	mov	r2, r4
    955a:	1b49      	subs	r1, r1, r5
    955c:	eb62 0206 	sbc.w	r2, r2, r6
    9560:	f04f 0300 	mov.w	r3, #0
    9564:	f04f 0400 	mov.w	r4, #0
    9568:	0194      	lsls	r4, r2, #6
    956a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
    956e:	018b      	lsls	r3, r1, #6
    9570:	1a5b      	subs	r3, r3, r1
    9572:	eb64 0402 	sbc.w	r4, r4, r2
    9576:	f04f 0100 	mov.w	r1, #0
    957a:	f04f 0200 	mov.w	r2, #0
    957e:	00e2      	lsls	r2, r4, #3
    9580:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    9584:	00d9      	lsls	r1, r3, #3
    9586:	460b      	mov	r3, r1
    9588:	4614      	mov	r4, r2
    958a:	195b      	adds	r3, r3, r5
    958c:	eb44 0406 	adc.w	r4, r4, r6
    9590:	f04f 0100 	mov.w	r1, #0
    9594:	f04f 0200 	mov.w	r2, #0
    9598:	02a2      	lsls	r2, r4, #10
    959a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
    959e:	0299      	lsls	r1, r3, #10
    95a0:	460b      	mov	r3, r1
    95a2:	4614      	mov	r4, r2
    95a4:	4618      	mov	r0, r3
    95a6:	4621      	mov	r1, r4
    95a8:	687b      	ldr	r3, [r7, #4]
    95aa:	f04f 0400 	mov.w	r4, #0
    95ae:	461a      	mov	r2, r3
    95b0:	4623      	mov	r3, r4
    95b2:	f003 fa37 	bl	ca24 <__aeabi_uldivmod>
    95b6:	4603      	mov	r3, r0
    95b8:	460c      	mov	r4, r1
    95ba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
    95bc:	4b0a      	ldr	r3, [pc, #40]	; (95e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
    95be:	685b      	ldr	r3, [r3, #4]
    95c0:	0c1b      	lsrs	r3, r3, #16
    95c2:	f003 0303 	and.w	r3, r3, #3
    95c6:	3301      	adds	r3, #1
    95c8:	005b      	lsls	r3, r3, #1
    95ca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
    95cc:	68fa      	ldr	r2, [r7, #12]
    95ce:	683b      	ldr	r3, [r7, #0]
    95d0:	fbb2 f3f3 	udiv	r3, r2, r3
    95d4:	60bb      	str	r3, [r7, #8]
      break;
    95d6:	e002      	b.n	95de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
    95d8:	4b04      	ldr	r3, [pc, #16]	; (95ec <HAL_RCC_GetSysClockFreq+0x1a8>)
    95da:	60bb      	str	r3, [r7, #8]
      break;
    95dc:	bf00      	nop
    }
  }
  return sysclockfreq;
    95de:	68bb      	ldr	r3, [r7, #8]
}
    95e0:	4618      	mov	r0, r3
    95e2:	3714      	adds	r7, #20
    95e4:	46bd      	mov	sp, r7
    95e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    95e8:	40023800 	.word	0x40023800
    95ec:	00f42400 	.word	0x00f42400
    95f0:	007a1200 	.word	0x007a1200

000095f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
    95f4:	b480      	push	{r7}
    95f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
    95f8:	4b03      	ldr	r3, [pc, #12]	; (9608 <HAL_RCC_GetHCLKFreq+0x14>)
    95fa:	681b      	ldr	r3, [r3, #0]
}
    95fc:	4618      	mov	r0, r3
    95fe:	46bd      	mov	sp, r7
    9600:	f85d 7b04 	ldr.w	r7, [sp], #4
    9604:	4770      	bx	lr
    9606:	bf00      	nop
    9608:	0001cdac 	.word	0x0001cdac

0000960c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
    960c:	b580      	push	{r7, lr}
    960e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
    9610:	f7ff fff0 	bl	95f4 <HAL_RCC_GetHCLKFreq>
    9614:	4601      	mov	r1, r0
    9616:	4b05      	ldr	r3, [pc, #20]	; (962c <HAL_RCC_GetPCLK1Freq+0x20>)
    9618:	689b      	ldr	r3, [r3, #8]
    961a:	0a9b      	lsrs	r3, r3, #10
    961c:	f003 0307 	and.w	r3, r3, #7
    9620:	4a03      	ldr	r2, [pc, #12]	; (9630 <HAL_RCC_GetPCLK1Freq+0x24>)
    9622:	5cd3      	ldrb	r3, [r2, r3]
    9624:	fa21 f303 	lsr.w	r3, r1, r3
}
    9628:	4618      	mov	r0, r3
    962a:	bd80      	pop	{r7, pc}
    962c:	40023800 	.word	0x40023800
    9630:	0000cd74 	.word	0x0000cd74

00009634 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
    9634:	b580      	push	{r7, lr}
    9636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
    9638:	f7ff ffdc 	bl	95f4 <HAL_RCC_GetHCLKFreq>
    963c:	4601      	mov	r1, r0
    963e:	4b05      	ldr	r3, [pc, #20]	; (9654 <HAL_RCC_GetPCLK2Freq+0x20>)
    9640:	689b      	ldr	r3, [r3, #8]
    9642:	0b5b      	lsrs	r3, r3, #13
    9644:	f003 0307 	and.w	r3, r3, #7
    9648:	4a03      	ldr	r2, [pc, #12]	; (9658 <HAL_RCC_GetPCLK2Freq+0x24>)
    964a:	5cd3      	ldrb	r3, [r2, r3]
    964c:	fa21 f303 	lsr.w	r3, r1, r3
}
    9650:	4618      	mov	r0, r3
    9652:	bd80      	pop	{r7, pc}
    9654:	40023800 	.word	0x40023800
    9658:	0000cd74 	.word	0x0000cd74

0000965c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
    965c:	b480      	push	{r7}
    965e:	b083      	sub	sp, #12
    9660:	af00      	add	r7, sp, #0
    9662:	6078      	str	r0, [r7, #4]
    9664:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    9666:	687b      	ldr	r3, [r7, #4]
    9668:	220f      	movs	r2, #15
    966a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
    966c:	4b12      	ldr	r3, [pc, #72]	; (96b8 <HAL_RCC_GetClockConfig+0x5c>)
    966e:	689b      	ldr	r3, [r3, #8]
    9670:	f003 0203 	and.w	r2, r3, #3
    9674:	687b      	ldr	r3, [r7, #4]
    9676:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
    9678:	4b0f      	ldr	r3, [pc, #60]	; (96b8 <HAL_RCC_GetClockConfig+0x5c>)
    967a:	689b      	ldr	r3, [r3, #8]
    967c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    9680:	687b      	ldr	r3, [r7, #4]
    9682:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
    9684:	4b0c      	ldr	r3, [pc, #48]	; (96b8 <HAL_RCC_GetClockConfig+0x5c>)
    9686:	689b      	ldr	r3, [r3, #8]
    9688:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
    968c:	687b      	ldr	r3, [r7, #4]
    968e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
    9690:	4b09      	ldr	r3, [pc, #36]	; (96b8 <HAL_RCC_GetClockConfig+0x5c>)
    9692:	689b      	ldr	r3, [r3, #8]
    9694:	08db      	lsrs	r3, r3, #3
    9696:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
    969a:	687b      	ldr	r3, [r7, #4]
    969c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
    969e:	4b07      	ldr	r3, [pc, #28]	; (96bc <HAL_RCC_GetClockConfig+0x60>)
    96a0:	681b      	ldr	r3, [r3, #0]
    96a2:	f003 020f 	and.w	r2, r3, #15
    96a6:	683b      	ldr	r3, [r7, #0]
    96a8:	601a      	str	r2, [r3, #0]
}
    96aa:	bf00      	nop
    96ac:	370c      	adds	r7, #12
    96ae:	46bd      	mov	sp, r7
    96b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    96b4:	4770      	bx	lr
    96b6:	bf00      	nop
    96b8:	40023800 	.word	0x40023800
    96bc:	40023c00 	.word	0x40023c00

000096c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
    96c0:	b580      	push	{r7, lr}
    96c2:	b082      	sub	sp, #8
    96c4:	af00      	add	r7, sp, #0
    96c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
    96c8:	687b      	ldr	r3, [r7, #4]
    96ca:	2b00      	cmp	r3, #0
    96cc:	d101      	bne.n	96d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
    96ce:	2301      	movs	r3, #1
    96d0:	e01d      	b.n	970e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
    96d2:	687b      	ldr	r3, [r7, #4]
    96d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    96d8:	b2db      	uxtb	r3, r3
    96da:	2b00      	cmp	r3, #0
    96dc:	d106      	bne.n	96ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
    96de:	687b      	ldr	r3, [r7, #4]
    96e0:	2200      	movs	r2, #0
    96e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
    96e6:	6878      	ldr	r0, [r7, #4]
    96e8:	f000 f815 	bl	9716 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
    96ec:	687b      	ldr	r3, [r7, #4]
    96ee:	2202      	movs	r2, #2
    96f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
    96f4:	687b      	ldr	r3, [r7, #4]
    96f6:	681a      	ldr	r2, [r3, #0]
    96f8:	687b      	ldr	r3, [r7, #4]
    96fa:	3304      	adds	r3, #4
    96fc:	4619      	mov	r1, r3
    96fe:	4610      	mov	r0, r2
    9700:	f000 f838 	bl	9774 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
    9704:	687b      	ldr	r3, [r7, #4]
    9706:	2201      	movs	r2, #1
    9708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
    970c:	2300      	movs	r3, #0
}
    970e:	4618      	mov	r0, r3
    9710:	3708      	adds	r7, #8
    9712:	46bd      	mov	sp, r7
    9714:	bd80      	pop	{r7, pc}

00009716 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
    9716:	b480      	push	{r7}
    9718:	b083      	sub	sp, #12
    971a:	af00      	add	r7, sp, #0
    971c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
    971e:	bf00      	nop
    9720:	370c      	adds	r7, #12
    9722:	46bd      	mov	sp, r7
    9724:	f85d 7b04 	ldr.w	r7, [sp], #4
    9728:	4770      	bx	lr

0000972a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
    972a:	b480      	push	{r7}
    972c:	b085      	sub	sp, #20
    972e:	af00      	add	r7, sp, #0
    9730:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
    9732:	687b      	ldr	r3, [r7, #4]
    9734:	681b      	ldr	r3, [r3, #0]
    9736:	68da      	ldr	r2, [r3, #12]
    9738:	687b      	ldr	r3, [r7, #4]
    973a:	681b      	ldr	r3, [r3, #0]
    973c:	f042 0201 	orr.w	r2, r2, #1
    9740:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
    9742:	687b      	ldr	r3, [r7, #4]
    9744:	681b      	ldr	r3, [r3, #0]
    9746:	689b      	ldr	r3, [r3, #8]
    9748:	f003 0307 	and.w	r3, r3, #7
    974c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
    974e:	68fb      	ldr	r3, [r7, #12]
    9750:	2b06      	cmp	r3, #6
    9752:	d007      	beq.n	9764 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
    9754:	687b      	ldr	r3, [r7, #4]
    9756:	681b      	ldr	r3, [r3, #0]
    9758:	681a      	ldr	r2, [r3, #0]
    975a:	687b      	ldr	r3, [r7, #4]
    975c:	681b      	ldr	r3, [r3, #0]
    975e:	f042 0201 	orr.w	r2, r2, #1
    9762:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
    9764:	2300      	movs	r3, #0
}
    9766:	4618      	mov	r0, r3
    9768:	3714      	adds	r7, #20
    976a:	46bd      	mov	sp, r7
    976c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9770:	4770      	bx	lr
	...

00009774 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
    9774:	b480      	push	{r7}
    9776:	b085      	sub	sp, #20
    9778:	af00      	add	r7, sp, #0
    977a:	6078      	str	r0, [r7, #4]
    977c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
    977e:	687b      	ldr	r3, [r7, #4]
    9780:	681b      	ldr	r3, [r3, #0]
    9782:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
    9784:	687b      	ldr	r3, [r7, #4]
    9786:	4a34      	ldr	r2, [pc, #208]	; (9858 <TIM_Base_SetConfig+0xe4>)
    9788:	4293      	cmp	r3, r2
    978a:	d00f      	beq.n	97ac <TIM_Base_SetConfig+0x38>
    978c:	687b      	ldr	r3, [r7, #4]
    978e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    9792:	d00b      	beq.n	97ac <TIM_Base_SetConfig+0x38>
    9794:	687b      	ldr	r3, [r7, #4]
    9796:	4a31      	ldr	r2, [pc, #196]	; (985c <TIM_Base_SetConfig+0xe8>)
    9798:	4293      	cmp	r3, r2
    979a:	d007      	beq.n	97ac <TIM_Base_SetConfig+0x38>
    979c:	687b      	ldr	r3, [r7, #4]
    979e:	4a30      	ldr	r2, [pc, #192]	; (9860 <TIM_Base_SetConfig+0xec>)
    97a0:	4293      	cmp	r3, r2
    97a2:	d003      	beq.n	97ac <TIM_Base_SetConfig+0x38>
    97a4:	687b      	ldr	r3, [r7, #4]
    97a6:	4a2f      	ldr	r2, [pc, #188]	; (9864 <TIM_Base_SetConfig+0xf0>)
    97a8:	4293      	cmp	r3, r2
    97aa:	d108      	bne.n	97be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    97ac:	68fb      	ldr	r3, [r7, #12]
    97ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    97b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
    97b4:	683b      	ldr	r3, [r7, #0]
    97b6:	685b      	ldr	r3, [r3, #4]
    97b8:	68fa      	ldr	r2, [r7, #12]
    97ba:	4313      	orrs	r3, r2
    97bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
    97be:	687b      	ldr	r3, [r7, #4]
    97c0:	4a25      	ldr	r2, [pc, #148]	; (9858 <TIM_Base_SetConfig+0xe4>)
    97c2:	4293      	cmp	r3, r2
    97c4:	d01b      	beq.n	97fe <TIM_Base_SetConfig+0x8a>
    97c6:	687b      	ldr	r3, [r7, #4]
    97c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    97cc:	d017      	beq.n	97fe <TIM_Base_SetConfig+0x8a>
    97ce:	687b      	ldr	r3, [r7, #4]
    97d0:	4a22      	ldr	r2, [pc, #136]	; (985c <TIM_Base_SetConfig+0xe8>)
    97d2:	4293      	cmp	r3, r2
    97d4:	d013      	beq.n	97fe <TIM_Base_SetConfig+0x8a>
    97d6:	687b      	ldr	r3, [r7, #4]
    97d8:	4a21      	ldr	r2, [pc, #132]	; (9860 <TIM_Base_SetConfig+0xec>)
    97da:	4293      	cmp	r3, r2
    97dc:	d00f      	beq.n	97fe <TIM_Base_SetConfig+0x8a>
    97de:	687b      	ldr	r3, [r7, #4]
    97e0:	4a20      	ldr	r2, [pc, #128]	; (9864 <TIM_Base_SetConfig+0xf0>)
    97e2:	4293      	cmp	r3, r2
    97e4:	d00b      	beq.n	97fe <TIM_Base_SetConfig+0x8a>
    97e6:	687b      	ldr	r3, [r7, #4]
    97e8:	4a1f      	ldr	r2, [pc, #124]	; (9868 <TIM_Base_SetConfig+0xf4>)
    97ea:	4293      	cmp	r3, r2
    97ec:	d007      	beq.n	97fe <TIM_Base_SetConfig+0x8a>
    97ee:	687b      	ldr	r3, [r7, #4]
    97f0:	4a1e      	ldr	r2, [pc, #120]	; (986c <TIM_Base_SetConfig+0xf8>)
    97f2:	4293      	cmp	r3, r2
    97f4:	d003      	beq.n	97fe <TIM_Base_SetConfig+0x8a>
    97f6:	687b      	ldr	r3, [r7, #4]
    97f8:	4a1d      	ldr	r2, [pc, #116]	; (9870 <TIM_Base_SetConfig+0xfc>)
    97fa:	4293      	cmp	r3, r2
    97fc:	d108      	bne.n	9810 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    97fe:	68fb      	ldr	r3, [r7, #12]
    9800:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    9804:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
    9806:	683b      	ldr	r3, [r7, #0]
    9808:	68db      	ldr	r3, [r3, #12]
    980a:	68fa      	ldr	r2, [r7, #12]
    980c:	4313      	orrs	r3, r2
    980e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
    9810:	68fb      	ldr	r3, [r7, #12]
    9812:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    9816:	683b      	ldr	r3, [r7, #0]
    9818:	695b      	ldr	r3, [r3, #20]
    981a:	4313      	orrs	r3, r2
    981c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
    981e:	687b      	ldr	r3, [r7, #4]
    9820:	68fa      	ldr	r2, [r7, #12]
    9822:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
    9824:	683b      	ldr	r3, [r7, #0]
    9826:	689a      	ldr	r2, [r3, #8]
    9828:	687b      	ldr	r3, [r7, #4]
    982a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
    982c:	683b      	ldr	r3, [r7, #0]
    982e:	681a      	ldr	r2, [r3, #0]
    9830:	687b      	ldr	r3, [r7, #4]
    9832:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
    9834:	687b      	ldr	r3, [r7, #4]
    9836:	4a08      	ldr	r2, [pc, #32]	; (9858 <TIM_Base_SetConfig+0xe4>)
    9838:	4293      	cmp	r3, r2
    983a:	d103      	bne.n	9844 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
    983c:	683b      	ldr	r3, [r7, #0]
    983e:	691a      	ldr	r2, [r3, #16]
    9840:	687b      	ldr	r3, [r7, #4]
    9842:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
    9844:	687b      	ldr	r3, [r7, #4]
    9846:	2201      	movs	r2, #1
    9848:	615a      	str	r2, [r3, #20]
}
    984a:	bf00      	nop
    984c:	3714      	adds	r7, #20
    984e:	46bd      	mov	sp, r7
    9850:	f85d 7b04 	ldr.w	r7, [sp], #4
    9854:	4770      	bx	lr
    9856:	bf00      	nop
    9858:	40010000 	.word	0x40010000
    985c:	40000400 	.word	0x40000400
    9860:	40000800 	.word	0x40000800
    9864:	40000c00 	.word	0x40000c00
    9868:	40014000 	.word	0x40014000
    986c:	40014400 	.word	0x40014400
    9870:	40014800 	.word	0x40014800

00009874 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
    9874:	b580      	push	{r7, lr}
    9876:	b082      	sub	sp, #8
    9878:	af00      	add	r7, sp, #0
    987a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
    987c:	687b      	ldr	r3, [r7, #4]
    987e:	2b00      	cmp	r3, #0
    9880:	d101      	bne.n	9886 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
    9882:	2301      	movs	r3, #1
    9884:	e03f      	b.n	9906 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
    9886:	687b      	ldr	r3, [r7, #4]
    9888:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
    988c:	b2db      	uxtb	r3, r3
    988e:	2b00      	cmp	r3, #0
    9890:	d106      	bne.n	98a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
    9892:	687b      	ldr	r3, [r7, #4]
    9894:	2200      	movs	r2, #0
    9896:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
    989a:	6878      	ldr	r0, [r7, #4]
    989c:	f7fe fdf8 	bl	8490 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
    98a0:	687b      	ldr	r3, [r7, #4]
    98a2:	2224      	movs	r2, #36	; 0x24
    98a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
    98a8:	687b      	ldr	r3, [r7, #4]
    98aa:	681b      	ldr	r3, [r3, #0]
    98ac:	68da      	ldr	r2, [r3, #12]
    98ae:	687b      	ldr	r3, [r7, #4]
    98b0:	681b      	ldr	r3, [r3, #0]
    98b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
    98b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
    98b8:	6878      	ldr	r0, [r7, #4]
    98ba:	f000 f829 	bl	9910 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
    98be:	687b      	ldr	r3, [r7, #4]
    98c0:	681b      	ldr	r3, [r3, #0]
    98c2:	691a      	ldr	r2, [r3, #16]
    98c4:	687b      	ldr	r3, [r7, #4]
    98c6:	681b      	ldr	r3, [r3, #0]
    98c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
    98cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
    98ce:	687b      	ldr	r3, [r7, #4]
    98d0:	681b      	ldr	r3, [r3, #0]
    98d2:	695a      	ldr	r2, [r3, #20]
    98d4:	687b      	ldr	r3, [r7, #4]
    98d6:	681b      	ldr	r3, [r3, #0]
    98d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
    98dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
    98de:	687b      	ldr	r3, [r7, #4]
    98e0:	681b      	ldr	r3, [r3, #0]
    98e2:	68da      	ldr	r2, [r3, #12]
    98e4:	687b      	ldr	r3, [r7, #4]
    98e6:	681b      	ldr	r3, [r3, #0]
    98e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    98ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
    98ee:	687b      	ldr	r3, [r7, #4]
    98f0:	2200      	movs	r2, #0
    98f2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
    98f4:	687b      	ldr	r3, [r7, #4]
    98f6:	2220      	movs	r2, #32
    98f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
    98fc:	687b      	ldr	r3, [r7, #4]
    98fe:	2220      	movs	r2, #32
    9900:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
    9904:	2300      	movs	r3, #0
}
    9906:	4618      	mov	r0, r3
    9908:	3708      	adds	r7, #8
    990a:	46bd      	mov	sp, r7
    990c:	bd80      	pop	{r7, pc}
	...

00009910 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
    9910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9914:	b085      	sub	sp, #20
    9916:	af00      	add	r7, sp, #0
    9918:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
    991a:	687b      	ldr	r3, [r7, #4]
    991c:	681b      	ldr	r3, [r3, #0]
    991e:	691b      	ldr	r3, [r3, #16]
    9920:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
    9924:	687b      	ldr	r3, [r7, #4]
    9926:	68da      	ldr	r2, [r3, #12]
    9928:	687b      	ldr	r3, [r7, #4]
    992a:	681b      	ldr	r3, [r3, #0]
    992c:	430a      	orrs	r2, r1
    992e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
    9930:	687b      	ldr	r3, [r7, #4]
    9932:	689a      	ldr	r2, [r3, #8]
    9934:	687b      	ldr	r3, [r7, #4]
    9936:	691b      	ldr	r3, [r3, #16]
    9938:	431a      	orrs	r2, r3
    993a:	687b      	ldr	r3, [r7, #4]
    993c:	695b      	ldr	r3, [r3, #20]
    993e:	431a      	orrs	r2, r3
    9940:	687b      	ldr	r3, [r7, #4]
    9942:	69db      	ldr	r3, [r3, #28]
    9944:	4313      	orrs	r3, r2
    9946:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
    9948:	687b      	ldr	r3, [r7, #4]
    994a:	681b      	ldr	r3, [r3, #0]
    994c:	68db      	ldr	r3, [r3, #12]
    994e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
    9952:	f023 030c 	bic.w	r3, r3, #12
    9956:	687a      	ldr	r2, [r7, #4]
    9958:	6812      	ldr	r2, [r2, #0]
    995a:	68f9      	ldr	r1, [r7, #12]
    995c:	430b      	orrs	r3, r1
    995e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
    9960:	687b      	ldr	r3, [r7, #4]
    9962:	681b      	ldr	r3, [r3, #0]
    9964:	695b      	ldr	r3, [r3, #20]
    9966:	f423 7140 	bic.w	r1, r3, #768	; 0x300
    996a:	687b      	ldr	r3, [r7, #4]
    996c:	699a      	ldr	r2, [r3, #24]
    996e:	687b      	ldr	r3, [r7, #4]
    9970:	681b      	ldr	r3, [r3, #0]
    9972:	430a      	orrs	r2, r1
    9974:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
    9976:	687b      	ldr	r3, [r7, #4]
    9978:	69db      	ldr	r3, [r3, #28]
    997a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    997e:	f040 818b 	bne.w	9c98 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
    9982:	687b      	ldr	r3, [r7, #4]
    9984:	681b      	ldr	r3, [r3, #0]
    9986:	4ac1      	ldr	r2, [pc, #772]	; (9c8c <UART_SetConfig+0x37c>)
    9988:	4293      	cmp	r3, r2
    998a:	d005      	beq.n	9998 <UART_SetConfig+0x88>
    998c:	687b      	ldr	r3, [r7, #4]
    998e:	681b      	ldr	r3, [r3, #0]
    9990:	4abf      	ldr	r2, [pc, #764]	; (9c90 <UART_SetConfig+0x380>)
    9992:	4293      	cmp	r3, r2
    9994:	f040 80bd 	bne.w	9b12 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    9998:	f7ff fe4c 	bl	9634 <HAL_RCC_GetPCLK2Freq>
    999c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    999e:	68bb      	ldr	r3, [r7, #8]
    99a0:	461d      	mov	r5, r3
    99a2:	f04f 0600 	mov.w	r6, #0
    99a6:	46a8      	mov	r8, r5
    99a8:	46b1      	mov	r9, r6
    99aa:	eb18 0308 	adds.w	r3, r8, r8
    99ae:	eb49 0409 	adc.w	r4, r9, r9
    99b2:	4698      	mov	r8, r3
    99b4:	46a1      	mov	r9, r4
    99b6:	eb18 0805 	adds.w	r8, r8, r5
    99ba:	eb49 0906 	adc.w	r9, r9, r6
    99be:	f04f 0100 	mov.w	r1, #0
    99c2:	f04f 0200 	mov.w	r2, #0
    99c6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
    99ca:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
    99ce:	ea4f 01c8 	mov.w	r1, r8, lsl #3
    99d2:	4688      	mov	r8, r1
    99d4:	4691      	mov	r9, r2
    99d6:	eb18 0005 	adds.w	r0, r8, r5
    99da:	eb49 0106 	adc.w	r1, r9, r6
    99de:	687b      	ldr	r3, [r7, #4]
    99e0:	685b      	ldr	r3, [r3, #4]
    99e2:	461d      	mov	r5, r3
    99e4:	f04f 0600 	mov.w	r6, #0
    99e8:	196b      	adds	r3, r5, r5
    99ea:	eb46 0406 	adc.w	r4, r6, r6
    99ee:	461a      	mov	r2, r3
    99f0:	4623      	mov	r3, r4
    99f2:	f003 f817 	bl	ca24 <__aeabi_uldivmod>
    99f6:	4603      	mov	r3, r0
    99f8:	460c      	mov	r4, r1
    99fa:	461a      	mov	r2, r3
    99fc:	4ba5      	ldr	r3, [pc, #660]	; (9c94 <UART_SetConfig+0x384>)
    99fe:	fba3 2302 	umull	r2, r3, r3, r2
    9a02:	095b      	lsrs	r3, r3, #5
    9a04:	ea4f 1803 	mov.w	r8, r3, lsl #4
    9a08:	68bb      	ldr	r3, [r7, #8]
    9a0a:	461d      	mov	r5, r3
    9a0c:	f04f 0600 	mov.w	r6, #0
    9a10:	46a9      	mov	r9, r5
    9a12:	46b2      	mov	sl, r6
    9a14:	eb19 0309 	adds.w	r3, r9, r9
    9a18:	eb4a 040a 	adc.w	r4, sl, sl
    9a1c:	4699      	mov	r9, r3
    9a1e:	46a2      	mov	sl, r4
    9a20:	eb19 0905 	adds.w	r9, r9, r5
    9a24:	eb4a 0a06 	adc.w	sl, sl, r6
    9a28:	f04f 0100 	mov.w	r1, #0
    9a2c:	f04f 0200 	mov.w	r2, #0
    9a30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
    9a34:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
    9a38:	ea4f 01c9 	mov.w	r1, r9, lsl #3
    9a3c:	4689      	mov	r9, r1
    9a3e:	4692      	mov	sl, r2
    9a40:	eb19 0005 	adds.w	r0, r9, r5
    9a44:	eb4a 0106 	adc.w	r1, sl, r6
    9a48:	687b      	ldr	r3, [r7, #4]
    9a4a:	685b      	ldr	r3, [r3, #4]
    9a4c:	461d      	mov	r5, r3
    9a4e:	f04f 0600 	mov.w	r6, #0
    9a52:	196b      	adds	r3, r5, r5
    9a54:	eb46 0406 	adc.w	r4, r6, r6
    9a58:	461a      	mov	r2, r3
    9a5a:	4623      	mov	r3, r4
    9a5c:	f002 ffe2 	bl	ca24 <__aeabi_uldivmod>
    9a60:	4603      	mov	r3, r0
    9a62:	460c      	mov	r4, r1
    9a64:	461a      	mov	r2, r3
    9a66:	4b8b      	ldr	r3, [pc, #556]	; (9c94 <UART_SetConfig+0x384>)
    9a68:	fba3 1302 	umull	r1, r3, r3, r2
    9a6c:	095b      	lsrs	r3, r3, #5
    9a6e:	2164      	movs	r1, #100	; 0x64
    9a70:	fb01 f303 	mul.w	r3, r1, r3
    9a74:	1ad3      	subs	r3, r2, r3
    9a76:	00db      	lsls	r3, r3, #3
    9a78:	3332      	adds	r3, #50	; 0x32
    9a7a:	4a86      	ldr	r2, [pc, #536]	; (9c94 <UART_SetConfig+0x384>)
    9a7c:	fba2 2303 	umull	r2, r3, r2, r3
    9a80:	095b      	lsrs	r3, r3, #5
    9a82:	005b      	lsls	r3, r3, #1
    9a84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
    9a88:	4498      	add	r8, r3
    9a8a:	68bb      	ldr	r3, [r7, #8]
    9a8c:	461d      	mov	r5, r3
    9a8e:	f04f 0600 	mov.w	r6, #0
    9a92:	46a9      	mov	r9, r5
    9a94:	46b2      	mov	sl, r6
    9a96:	eb19 0309 	adds.w	r3, r9, r9
    9a9a:	eb4a 040a 	adc.w	r4, sl, sl
    9a9e:	4699      	mov	r9, r3
    9aa0:	46a2      	mov	sl, r4
    9aa2:	eb19 0905 	adds.w	r9, r9, r5
    9aa6:	eb4a 0a06 	adc.w	sl, sl, r6
    9aaa:	f04f 0100 	mov.w	r1, #0
    9aae:	f04f 0200 	mov.w	r2, #0
    9ab2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
    9ab6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
    9aba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
    9abe:	4689      	mov	r9, r1
    9ac0:	4692      	mov	sl, r2
    9ac2:	eb19 0005 	adds.w	r0, r9, r5
    9ac6:	eb4a 0106 	adc.w	r1, sl, r6
    9aca:	687b      	ldr	r3, [r7, #4]
    9acc:	685b      	ldr	r3, [r3, #4]
    9ace:	461d      	mov	r5, r3
    9ad0:	f04f 0600 	mov.w	r6, #0
    9ad4:	196b      	adds	r3, r5, r5
    9ad6:	eb46 0406 	adc.w	r4, r6, r6
    9ada:	461a      	mov	r2, r3
    9adc:	4623      	mov	r3, r4
    9ade:	f002 ffa1 	bl	ca24 <__aeabi_uldivmod>
    9ae2:	4603      	mov	r3, r0
    9ae4:	460c      	mov	r4, r1
    9ae6:	461a      	mov	r2, r3
    9ae8:	4b6a      	ldr	r3, [pc, #424]	; (9c94 <UART_SetConfig+0x384>)
    9aea:	fba3 1302 	umull	r1, r3, r3, r2
    9aee:	095b      	lsrs	r3, r3, #5
    9af0:	2164      	movs	r1, #100	; 0x64
    9af2:	fb01 f303 	mul.w	r3, r1, r3
    9af6:	1ad3      	subs	r3, r2, r3
    9af8:	00db      	lsls	r3, r3, #3
    9afa:	3332      	adds	r3, #50	; 0x32
    9afc:	4a65      	ldr	r2, [pc, #404]	; (9c94 <UART_SetConfig+0x384>)
    9afe:	fba2 2303 	umull	r2, r3, r2, r3
    9b02:	095b      	lsrs	r3, r3, #5
    9b04:	f003 0207 	and.w	r2, r3, #7
    9b08:	687b      	ldr	r3, [r7, #4]
    9b0a:	681b      	ldr	r3, [r3, #0]
    9b0c:	4442      	add	r2, r8
    9b0e:	609a      	str	r2, [r3, #8]
    9b10:	e26f      	b.n	9ff2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    9b12:	f7ff fd7b 	bl	960c <HAL_RCC_GetPCLK1Freq>
    9b16:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    9b18:	68bb      	ldr	r3, [r7, #8]
    9b1a:	461d      	mov	r5, r3
    9b1c:	f04f 0600 	mov.w	r6, #0
    9b20:	46a8      	mov	r8, r5
    9b22:	46b1      	mov	r9, r6
    9b24:	eb18 0308 	adds.w	r3, r8, r8
    9b28:	eb49 0409 	adc.w	r4, r9, r9
    9b2c:	4698      	mov	r8, r3
    9b2e:	46a1      	mov	r9, r4
    9b30:	eb18 0805 	adds.w	r8, r8, r5
    9b34:	eb49 0906 	adc.w	r9, r9, r6
    9b38:	f04f 0100 	mov.w	r1, #0
    9b3c:	f04f 0200 	mov.w	r2, #0
    9b40:	ea4f 02c9 	mov.w	r2, r9, lsl #3
    9b44:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
    9b48:	ea4f 01c8 	mov.w	r1, r8, lsl #3
    9b4c:	4688      	mov	r8, r1
    9b4e:	4691      	mov	r9, r2
    9b50:	eb18 0005 	adds.w	r0, r8, r5
    9b54:	eb49 0106 	adc.w	r1, r9, r6
    9b58:	687b      	ldr	r3, [r7, #4]
    9b5a:	685b      	ldr	r3, [r3, #4]
    9b5c:	461d      	mov	r5, r3
    9b5e:	f04f 0600 	mov.w	r6, #0
    9b62:	196b      	adds	r3, r5, r5
    9b64:	eb46 0406 	adc.w	r4, r6, r6
    9b68:	461a      	mov	r2, r3
    9b6a:	4623      	mov	r3, r4
    9b6c:	f002 ff5a 	bl	ca24 <__aeabi_uldivmod>
    9b70:	4603      	mov	r3, r0
    9b72:	460c      	mov	r4, r1
    9b74:	461a      	mov	r2, r3
    9b76:	4b47      	ldr	r3, [pc, #284]	; (9c94 <UART_SetConfig+0x384>)
    9b78:	fba3 2302 	umull	r2, r3, r3, r2
    9b7c:	095b      	lsrs	r3, r3, #5
    9b7e:	ea4f 1803 	mov.w	r8, r3, lsl #4
    9b82:	68bb      	ldr	r3, [r7, #8]
    9b84:	461d      	mov	r5, r3
    9b86:	f04f 0600 	mov.w	r6, #0
    9b8a:	46a9      	mov	r9, r5
    9b8c:	46b2      	mov	sl, r6
    9b8e:	eb19 0309 	adds.w	r3, r9, r9
    9b92:	eb4a 040a 	adc.w	r4, sl, sl
    9b96:	4699      	mov	r9, r3
    9b98:	46a2      	mov	sl, r4
    9b9a:	eb19 0905 	adds.w	r9, r9, r5
    9b9e:	eb4a 0a06 	adc.w	sl, sl, r6
    9ba2:	f04f 0100 	mov.w	r1, #0
    9ba6:	f04f 0200 	mov.w	r2, #0
    9baa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
    9bae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
    9bb2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
    9bb6:	4689      	mov	r9, r1
    9bb8:	4692      	mov	sl, r2
    9bba:	eb19 0005 	adds.w	r0, r9, r5
    9bbe:	eb4a 0106 	adc.w	r1, sl, r6
    9bc2:	687b      	ldr	r3, [r7, #4]
    9bc4:	685b      	ldr	r3, [r3, #4]
    9bc6:	461d      	mov	r5, r3
    9bc8:	f04f 0600 	mov.w	r6, #0
    9bcc:	196b      	adds	r3, r5, r5
    9bce:	eb46 0406 	adc.w	r4, r6, r6
    9bd2:	461a      	mov	r2, r3
    9bd4:	4623      	mov	r3, r4
    9bd6:	f002 ff25 	bl	ca24 <__aeabi_uldivmod>
    9bda:	4603      	mov	r3, r0
    9bdc:	460c      	mov	r4, r1
    9bde:	461a      	mov	r2, r3
    9be0:	4b2c      	ldr	r3, [pc, #176]	; (9c94 <UART_SetConfig+0x384>)
    9be2:	fba3 1302 	umull	r1, r3, r3, r2
    9be6:	095b      	lsrs	r3, r3, #5
    9be8:	2164      	movs	r1, #100	; 0x64
    9bea:	fb01 f303 	mul.w	r3, r1, r3
    9bee:	1ad3      	subs	r3, r2, r3
    9bf0:	00db      	lsls	r3, r3, #3
    9bf2:	3332      	adds	r3, #50	; 0x32
    9bf4:	4a27      	ldr	r2, [pc, #156]	; (9c94 <UART_SetConfig+0x384>)
    9bf6:	fba2 2303 	umull	r2, r3, r2, r3
    9bfa:	095b      	lsrs	r3, r3, #5
    9bfc:	005b      	lsls	r3, r3, #1
    9bfe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
    9c02:	4498      	add	r8, r3
    9c04:	68bb      	ldr	r3, [r7, #8]
    9c06:	461d      	mov	r5, r3
    9c08:	f04f 0600 	mov.w	r6, #0
    9c0c:	46a9      	mov	r9, r5
    9c0e:	46b2      	mov	sl, r6
    9c10:	eb19 0309 	adds.w	r3, r9, r9
    9c14:	eb4a 040a 	adc.w	r4, sl, sl
    9c18:	4699      	mov	r9, r3
    9c1a:	46a2      	mov	sl, r4
    9c1c:	eb19 0905 	adds.w	r9, r9, r5
    9c20:	eb4a 0a06 	adc.w	sl, sl, r6
    9c24:	f04f 0100 	mov.w	r1, #0
    9c28:	f04f 0200 	mov.w	r2, #0
    9c2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
    9c30:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
    9c34:	ea4f 01c9 	mov.w	r1, r9, lsl #3
    9c38:	4689      	mov	r9, r1
    9c3a:	4692      	mov	sl, r2
    9c3c:	eb19 0005 	adds.w	r0, r9, r5
    9c40:	eb4a 0106 	adc.w	r1, sl, r6
    9c44:	687b      	ldr	r3, [r7, #4]
    9c46:	685b      	ldr	r3, [r3, #4]
    9c48:	461d      	mov	r5, r3
    9c4a:	f04f 0600 	mov.w	r6, #0
    9c4e:	196b      	adds	r3, r5, r5
    9c50:	eb46 0406 	adc.w	r4, r6, r6
    9c54:	461a      	mov	r2, r3
    9c56:	4623      	mov	r3, r4
    9c58:	f002 fee4 	bl	ca24 <__aeabi_uldivmod>
    9c5c:	4603      	mov	r3, r0
    9c5e:	460c      	mov	r4, r1
    9c60:	461a      	mov	r2, r3
    9c62:	4b0c      	ldr	r3, [pc, #48]	; (9c94 <UART_SetConfig+0x384>)
    9c64:	fba3 1302 	umull	r1, r3, r3, r2
    9c68:	095b      	lsrs	r3, r3, #5
    9c6a:	2164      	movs	r1, #100	; 0x64
    9c6c:	fb01 f303 	mul.w	r3, r1, r3
    9c70:	1ad3      	subs	r3, r2, r3
    9c72:	00db      	lsls	r3, r3, #3
    9c74:	3332      	adds	r3, #50	; 0x32
    9c76:	4a07      	ldr	r2, [pc, #28]	; (9c94 <UART_SetConfig+0x384>)
    9c78:	fba2 2303 	umull	r2, r3, r2, r3
    9c7c:	095b      	lsrs	r3, r3, #5
    9c7e:	f003 0207 	and.w	r2, r3, #7
    9c82:	687b      	ldr	r3, [r7, #4]
    9c84:	681b      	ldr	r3, [r3, #0]
    9c86:	4442      	add	r2, r8
    9c88:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
    9c8a:	e1b2      	b.n	9ff2 <UART_SetConfig+0x6e2>
    9c8c:	40011000 	.word	0x40011000
    9c90:	40011400 	.word	0x40011400
    9c94:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
    9c98:	687b      	ldr	r3, [r7, #4]
    9c9a:	681b      	ldr	r3, [r3, #0]
    9c9c:	4ad7      	ldr	r2, [pc, #860]	; (9ffc <UART_SetConfig+0x6ec>)
    9c9e:	4293      	cmp	r3, r2
    9ca0:	d005      	beq.n	9cae <UART_SetConfig+0x39e>
    9ca2:	687b      	ldr	r3, [r7, #4]
    9ca4:	681b      	ldr	r3, [r3, #0]
    9ca6:	4ad6      	ldr	r2, [pc, #856]	; (a000 <UART_SetConfig+0x6f0>)
    9ca8:	4293      	cmp	r3, r2
    9caa:	f040 80d1 	bne.w	9e50 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
    9cae:	f7ff fcc1 	bl	9634 <HAL_RCC_GetPCLK2Freq>
    9cb2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    9cb4:	68bb      	ldr	r3, [r7, #8]
    9cb6:	469a      	mov	sl, r3
    9cb8:	f04f 0b00 	mov.w	fp, #0
    9cbc:	46d0      	mov	r8, sl
    9cbe:	46d9      	mov	r9, fp
    9cc0:	eb18 0308 	adds.w	r3, r8, r8
    9cc4:	eb49 0409 	adc.w	r4, r9, r9
    9cc8:	4698      	mov	r8, r3
    9cca:	46a1      	mov	r9, r4
    9ccc:	eb18 080a 	adds.w	r8, r8, sl
    9cd0:	eb49 090b 	adc.w	r9, r9, fp
    9cd4:	f04f 0100 	mov.w	r1, #0
    9cd8:	f04f 0200 	mov.w	r2, #0
    9cdc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
    9ce0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
    9ce4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
    9ce8:	4688      	mov	r8, r1
    9cea:	4691      	mov	r9, r2
    9cec:	eb1a 0508 	adds.w	r5, sl, r8
    9cf0:	eb4b 0609 	adc.w	r6, fp, r9
    9cf4:	687b      	ldr	r3, [r7, #4]
    9cf6:	685b      	ldr	r3, [r3, #4]
    9cf8:	4619      	mov	r1, r3
    9cfa:	f04f 0200 	mov.w	r2, #0
    9cfe:	f04f 0300 	mov.w	r3, #0
    9d02:	f04f 0400 	mov.w	r4, #0
    9d06:	0094      	lsls	r4, r2, #2
    9d08:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
    9d0c:	008b      	lsls	r3, r1, #2
    9d0e:	461a      	mov	r2, r3
    9d10:	4623      	mov	r3, r4
    9d12:	4628      	mov	r0, r5
    9d14:	4631      	mov	r1, r6
    9d16:	f002 fe85 	bl	ca24 <__aeabi_uldivmod>
    9d1a:	4603      	mov	r3, r0
    9d1c:	460c      	mov	r4, r1
    9d1e:	461a      	mov	r2, r3
    9d20:	4bb8      	ldr	r3, [pc, #736]	; (a004 <UART_SetConfig+0x6f4>)
    9d22:	fba3 2302 	umull	r2, r3, r3, r2
    9d26:	095b      	lsrs	r3, r3, #5
    9d28:	ea4f 1803 	mov.w	r8, r3, lsl #4
    9d2c:	68bb      	ldr	r3, [r7, #8]
    9d2e:	469b      	mov	fp, r3
    9d30:	f04f 0c00 	mov.w	ip, #0
    9d34:	46d9      	mov	r9, fp
    9d36:	46e2      	mov	sl, ip
    9d38:	eb19 0309 	adds.w	r3, r9, r9
    9d3c:	eb4a 040a 	adc.w	r4, sl, sl
    9d40:	4699      	mov	r9, r3
    9d42:	46a2      	mov	sl, r4
    9d44:	eb19 090b 	adds.w	r9, r9, fp
    9d48:	eb4a 0a0c 	adc.w	sl, sl, ip
    9d4c:	f04f 0100 	mov.w	r1, #0
    9d50:	f04f 0200 	mov.w	r2, #0
    9d54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
    9d58:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
    9d5c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
    9d60:	4689      	mov	r9, r1
    9d62:	4692      	mov	sl, r2
    9d64:	eb1b 0509 	adds.w	r5, fp, r9
    9d68:	eb4c 060a 	adc.w	r6, ip, sl
    9d6c:	687b      	ldr	r3, [r7, #4]
    9d6e:	685b      	ldr	r3, [r3, #4]
    9d70:	4619      	mov	r1, r3
    9d72:	f04f 0200 	mov.w	r2, #0
    9d76:	f04f 0300 	mov.w	r3, #0
    9d7a:	f04f 0400 	mov.w	r4, #0
    9d7e:	0094      	lsls	r4, r2, #2
    9d80:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
    9d84:	008b      	lsls	r3, r1, #2
    9d86:	461a      	mov	r2, r3
    9d88:	4623      	mov	r3, r4
    9d8a:	4628      	mov	r0, r5
    9d8c:	4631      	mov	r1, r6
    9d8e:	f002 fe49 	bl	ca24 <__aeabi_uldivmod>
    9d92:	4603      	mov	r3, r0
    9d94:	460c      	mov	r4, r1
    9d96:	461a      	mov	r2, r3
    9d98:	4b9a      	ldr	r3, [pc, #616]	; (a004 <UART_SetConfig+0x6f4>)
    9d9a:	fba3 1302 	umull	r1, r3, r3, r2
    9d9e:	095b      	lsrs	r3, r3, #5
    9da0:	2164      	movs	r1, #100	; 0x64
    9da2:	fb01 f303 	mul.w	r3, r1, r3
    9da6:	1ad3      	subs	r3, r2, r3
    9da8:	011b      	lsls	r3, r3, #4
    9daa:	3332      	adds	r3, #50	; 0x32
    9dac:	4a95      	ldr	r2, [pc, #596]	; (a004 <UART_SetConfig+0x6f4>)
    9dae:	fba2 2303 	umull	r2, r3, r2, r3
    9db2:	095b      	lsrs	r3, r3, #5
    9db4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    9db8:	4498      	add	r8, r3
    9dba:	68bb      	ldr	r3, [r7, #8]
    9dbc:	469b      	mov	fp, r3
    9dbe:	f04f 0c00 	mov.w	ip, #0
    9dc2:	46d9      	mov	r9, fp
    9dc4:	46e2      	mov	sl, ip
    9dc6:	eb19 0309 	adds.w	r3, r9, r9
    9dca:	eb4a 040a 	adc.w	r4, sl, sl
    9dce:	4699      	mov	r9, r3
    9dd0:	46a2      	mov	sl, r4
    9dd2:	eb19 090b 	adds.w	r9, r9, fp
    9dd6:	eb4a 0a0c 	adc.w	sl, sl, ip
    9dda:	f04f 0100 	mov.w	r1, #0
    9dde:	f04f 0200 	mov.w	r2, #0
    9de2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
    9de6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
    9dea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
    9dee:	4689      	mov	r9, r1
    9df0:	4692      	mov	sl, r2
    9df2:	eb1b 0509 	adds.w	r5, fp, r9
    9df6:	eb4c 060a 	adc.w	r6, ip, sl
    9dfa:	687b      	ldr	r3, [r7, #4]
    9dfc:	685b      	ldr	r3, [r3, #4]
    9dfe:	4619      	mov	r1, r3
    9e00:	f04f 0200 	mov.w	r2, #0
    9e04:	f04f 0300 	mov.w	r3, #0
    9e08:	f04f 0400 	mov.w	r4, #0
    9e0c:	0094      	lsls	r4, r2, #2
    9e0e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
    9e12:	008b      	lsls	r3, r1, #2
    9e14:	461a      	mov	r2, r3
    9e16:	4623      	mov	r3, r4
    9e18:	4628      	mov	r0, r5
    9e1a:	4631      	mov	r1, r6
    9e1c:	f002 fe02 	bl	ca24 <__aeabi_uldivmod>
    9e20:	4603      	mov	r3, r0
    9e22:	460c      	mov	r4, r1
    9e24:	461a      	mov	r2, r3
    9e26:	4b77      	ldr	r3, [pc, #476]	; (a004 <UART_SetConfig+0x6f4>)
    9e28:	fba3 1302 	umull	r1, r3, r3, r2
    9e2c:	095b      	lsrs	r3, r3, #5
    9e2e:	2164      	movs	r1, #100	; 0x64
    9e30:	fb01 f303 	mul.w	r3, r1, r3
    9e34:	1ad3      	subs	r3, r2, r3
    9e36:	011b      	lsls	r3, r3, #4
    9e38:	3332      	adds	r3, #50	; 0x32
    9e3a:	4a72      	ldr	r2, [pc, #456]	; (a004 <UART_SetConfig+0x6f4>)
    9e3c:	fba2 2303 	umull	r2, r3, r2, r3
    9e40:	095b      	lsrs	r3, r3, #5
    9e42:	f003 020f 	and.w	r2, r3, #15
    9e46:	687b      	ldr	r3, [r7, #4]
    9e48:	681b      	ldr	r3, [r3, #0]
    9e4a:	4442      	add	r2, r8
    9e4c:	609a      	str	r2, [r3, #8]
    9e4e:	e0d0      	b.n	9ff2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
    9e50:	f7ff fbdc 	bl	960c <HAL_RCC_GetPCLK1Freq>
    9e54:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    9e56:	68bb      	ldr	r3, [r7, #8]
    9e58:	469a      	mov	sl, r3
    9e5a:	f04f 0b00 	mov.w	fp, #0
    9e5e:	46d0      	mov	r8, sl
    9e60:	46d9      	mov	r9, fp
    9e62:	eb18 0308 	adds.w	r3, r8, r8
    9e66:	eb49 0409 	adc.w	r4, r9, r9
    9e6a:	4698      	mov	r8, r3
    9e6c:	46a1      	mov	r9, r4
    9e6e:	eb18 080a 	adds.w	r8, r8, sl
    9e72:	eb49 090b 	adc.w	r9, r9, fp
    9e76:	f04f 0100 	mov.w	r1, #0
    9e7a:	f04f 0200 	mov.w	r2, #0
    9e7e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
    9e82:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
    9e86:	ea4f 01c8 	mov.w	r1, r8, lsl #3
    9e8a:	4688      	mov	r8, r1
    9e8c:	4691      	mov	r9, r2
    9e8e:	eb1a 0508 	adds.w	r5, sl, r8
    9e92:	eb4b 0609 	adc.w	r6, fp, r9
    9e96:	687b      	ldr	r3, [r7, #4]
    9e98:	685b      	ldr	r3, [r3, #4]
    9e9a:	4619      	mov	r1, r3
    9e9c:	f04f 0200 	mov.w	r2, #0
    9ea0:	f04f 0300 	mov.w	r3, #0
    9ea4:	f04f 0400 	mov.w	r4, #0
    9ea8:	0094      	lsls	r4, r2, #2
    9eaa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
    9eae:	008b      	lsls	r3, r1, #2
    9eb0:	461a      	mov	r2, r3
    9eb2:	4623      	mov	r3, r4
    9eb4:	4628      	mov	r0, r5
    9eb6:	4631      	mov	r1, r6
    9eb8:	f002 fdb4 	bl	ca24 <__aeabi_uldivmod>
    9ebc:	4603      	mov	r3, r0
    9ebe:	460c      	mov	r4, r1
    9ec0:	461a      	mov	r2, r3
    9ec2:	4b50      	ldr	r3, [pc, #320]	; (a004 <UART_SetConfig+0x6f4>)
    9ec4:	fba3 2302 	umull	r2, r3, r3, r2
    9ec8:	095b      	lsrs	r3, r3, #5
    9eca:	ea4f 1803 	mov.w	r8, r3, lsl #4
    9ece:	68bb      	ldr	r3, [r7, #8]
    9ed0:	469b      	mov	fp, r3
    9ed2:	f04f 0c00 	mov.w	ip, #0
    9ed6:	46d9      	mov	r9, fp
    9ed8:	46e2      	mov	sl, ip
    9eda:	eb19 0309 	adds.w	r3, r9, r9
    9ede:	eb4a 040a 	adc.w	r4, sl, sl
    9ee2:	4699      	mov	r9, r3
    9ee4:	46a2      	mov	sl, r4
    9ee6:	eb19 090b 	adds.w	r9, r9, fp
    9eea:	eb4a 0a0c 	adc.w	sl, sl, ip
    9eee:	f04f 0100 	mov.w	r1, #0
    9ef2:	f04f 0200 	mov.w	r2, #0
    9ef6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
    9efa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
    9efe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
    9f02:	4689      	mov	r9, r1
    9f04:	4692      	mov	sl, r2
    9f06:	eb1b 0509 	adds.w	r5, fp, r9
    9f0a:	eb4c 060a 	adc.w	r6, ip, sl
    9f0e:	687b      	ldr	r3, [r7, #4]
    9f10:	685b      	ldr	r3, [r3, #4]
    9f12:	4619      	mov	r1, r3
    9f14:	f04f 0200 	mov.w	r2, #0
    9f18:	f04f 0300 	mov.w	r3, #0
    9f1c:	f04f 0400 	mov.w	r4, #0
    9f20:	0094      	lsls	r4, r2, #2
    9f22:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
    9f26:	008b      	lsls	r3, r1, #2
    9f28:	461a      	mov	r2, r3
    9f2a:	4623      	mov	r3, r4
    9f2c:	4628      	mov	r0, r5
    9f2e:	4631      	mov	r1, r6
    9f30:	f002 fd78 	bl	ca24 <__aeabi_uldivmod>
    9f34:	4603      	mov	r3, r0
    9f36:	460c      	mov	r4, r1
    9f38:	461a      	mov	r2, r3
    9f3a:	4b32      	ldr	r3, [pc, #200]	; (a004 <UART_SetConfig+0x6f4>)
    9f3c:	fba3 1302 	umull	r1, r3, r3, r2
    9f40:	095b      	lsrs	r3, r3, #5
    9f42:	2164      	movs	r1, #100	; 0x64
    9f44:	fb01 f303 	mul.w	r3, r1, r3
    9f48:	1ad3      	subs	r3, r2, r3
    9f4a:	011b      	lsls	r3, r3, #4
    9f4c:	3332      	adds	r3, #50	; 0x32
    9f4e:	4a2d      	ldr	r2, [pc, #180]	; (a004 <UART_SetConfig+0x6f4>)
    9f50:	fba2 2303 	umull	r2, r3, r2, r3
    9f54:	095b      	lsrs	r3, r3, #5
    9f56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    9f5a:	4498      	add	r8, r3
    9f5c:	68bb      	ldr	r3, [r7, #8]
    9f5e:	469b      	mov	fp, r3
    9f60:	f04f 0c00 	mov.w	ip, #0
    9f64:	46d9      	mov	r9, fp
    9f66:	46e2      	mov	sl, ip
    9f68:	eb19 0309 	adds.w	r3, r9, r9
    9f6c:	eb4a 040a 	adc.w	r4, sl, sl
    9f70:	4699      	mov	r9, r3
    9f72:	46a2      	mov	sl, r4
    9f74:	eb19 090b 	adds.w	r9, r9, fp
    9f78:	eb4a 0a0c 	adc.w	sl, sl, ip
    9f7c:	f04f 0100 	mov.w	r1, #0
    9f80:	f04f 0200 	mov.w	r2, #0
    9f84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
    9f88:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
    9f8c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
    9f90:	4689      	mov	r9, r1
    9f92:	4692      	mov	sl, r2
    9f94:	eb1b 0509 	adds.w	r5, fp, r9
    9f98:	eb4c 060a 	adc.w	r6, ip, sl
    9f9c:	687b      	ldr	r3, [r7, #4]
    9f9e:	685b      	ldr	r3, [r3, #4]
    9fa0:	4619      	mov	r1, r3
    9fa2:	f04f 0200 	mov.w	r2, #0
    9fa6:	f04f 0300 	mov.w	r3, #0
    9faa:	f04f 0400 	mov.w	r4, #0
    9fae:	0094      	lsls	r4, r2, #2
    9fb0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
    9fb4:	008b      	lsls	r3, r1, #2
    9fb6:	461a      	mov	r2, r3
    9fb8:	4623      	mov	r3, r4
    9fba:	4628      	mov	r0, r5
    9fbc:	4631      	mov	r1, r6
    9fbe:	f002 fd31 	bl	ca24 <__aeabi_uldivmod>
    9fc2:	4603      	mov	r3, r0
    9fc4:	460c      	mov	r4, r1
    9fc6:	461a      	mov	r2, r3
    9fc8:	4b0e      	ldr	r3, [pc, #56]	; (a004 <UART_SetConfig+0x6f4>)
    9fca:	fba3 1302 	umull	r1, r3, r3, r2
    9fce:	095b      	lsrs	r3, r3, #5
    9fd0:	2164      	movs	r1, #100	; 0x64
    9fd2:	fb01 f303 	mul.w	r3, r1, r3
    9fd6:	1ad3      	subs	r3, r2, r3
    9fd8:	011b      	lsls	r3, r3, #4
    9fda:	3332      	adds	r3, #50	; 0x32
    9fdc:	4a09      	ldr	r2, [pc, #36]	; (a004 <UART_SetConfig+0x6f4>)
    9fde:	fba2 2303 	umull	r2, r3, r2, r3
    9fe2:	095b      	lsrs	r3, r3, #5
    9fe4:	f003 020f 	and.w	r2, r3, #15
    9fe8:	687b      	ldr	r3, [r7, #4]
    9fea:	681b      	ldr	r3, [r3, #0]
    9fec:	4442      	add	r2, r8
    9fee:	609a      	str	r2, [r3, #8]
}
    9ff0:	e7ff      	b.n	9ff2 <UART_SetConfig+0x6e2>
    9ff2:	bf00      	nop
    9ff4:	3714      	adds	r7, #20
    9ff6:	46bd      	mov	sp, r7
    9ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9ffc:	40011000 	.word	0x40011000
    a000:	40011400 	.word	0x40011400
    a004:	51eb851f 	.word	0x51eb851f

0000a008 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
    a008:	b480      	push	{r7}
    a00a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
    a00c:	bf00      	nop
    a00e:	46bd      	mov	sp, r7
    a010:	f85d 7b04 	ldr.w	r7, [sp], #4
    a014:	4770      	bx	lr
	...

0000a018 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
    a018:	b480      	push	{r7}
    a01a:	b085      	sub	sp, #20
    a01c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    a01e:	f3ef 8305 	mrs	r3, IPSR
    a022:	60bb      	str	r3, [r7, #8]
  return(result);
    a024:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
    a026:	2b00      	cmp	r3, #0
    a028:	d10f      	bne.n	a04a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    a02a:	f3ef 8310 	mrs	r3, PRIMASK
    a02e:	607b      	str	r3, [r7, #4]
  return(result);
    a030:	687b      	ldr	r3, [r7, #4]
    a032:	2b00      	cmp	r3, #0
    a034:	d105      	bne.n	a042 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
    a036:	f3ef 8311 	mrs	r3, BASEPRI
    a03a:	603b      	str	r3, [r7, #0]
  return(result);
    a03c:	683b      	ldr	r3, [r7, #0]
    a03e:	2b00      	cmp	r3, #0
    a040:	d007      	beq.n	a052 <osKernelInitialize+0x3a>
    a042:	4b0e      	ldr	r3, [pc, #56]	; (a07c <osKernelInitialize+0x64>)
    a044:	681b      	ldr	r3, [r3, #0]
    a046:	2b02      	cmp	r3, #2
    a048:	d103      	bne.n	a052 <osKernelInitialize+0x3a>
    stat = osErrorISR;
    a04a:	f06f 0305 	mvn.w	r3, #5
    a04e:	60fb      	str	r3, [r7, #12]
    a050:	e00c      	b.n	a06c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
    a052:	4b0a      	ldr	r3, [pc, #40]	; (a07c <osKernelInitialize+0x64>)
    a054:	681b      	ldr	r3, [r3, #0]
    a056:	2b00      	cmp	r3, #0
    a058:	d105      	bne.n	a066 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
    a05a:	4b08      	ldr	r3, [pc, #32]	; (a07c <osKernelInitialize+0x64>)
    a05c:	2201      	movs	r2, #1
    a05e:	601a      	str	r2, [r3, #0]
      stat = osOK;
    a060:	2300      	movs	r3, #0
    a062:	60fb      	str	r3, [r7, #12]
    a064:	e002      	b.n	a06c <osKernelInitialize+0x54>
    } else {
      stat = osError;
    a066:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a06a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
    a06c:	68fb      	ldr	r3, [r7, #12]
}
    a06e:	4618      	mov	r0, r3
    a070:	3714      	adds	r7, #20
    a072:	46bd      	mov	sp, r7
    a074:	f85d 7b04 	ldr.w	r7, [sp], #4
    a078:	4770      	bx	lr
    a07a:	bf00      	nop
    a07c:	0001ce34 	.word	0x0001ce34

0000a080 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
    a080:	b580      	push	{r7, lr}
    a082:	b084      	sub	sp, #16
    a084:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    a086:	f3ef 8305 	mrs	r3, IPSR
    a08a:	60bb      	str	r3, [r7, #8]
  return(result);
    a08c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
    a08e:	2b00      	cmp	r3, #0
    a090:	d10f      	bne.n	a0b2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    a092:	f3ef 8310 	mrs	r3, PRIMASK
    a096:	607b      	str	r3, [r7, #4]
  return(result);
    a098:	687b      	ldr	r3, [r7, #4]
    a09a:	2b00      	cmp	r3, #0
    a09c:	d105      	bne.n	a0aa <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
    a09e:	f3ef 8311 	mrs	r3, BASEPRI
    a0a2:	603b      	str	r3, [r7, #0]
  return(result);
    a0a4:	683b      	ldr	r3, [r7, #0]
    a0a6:	2b00      	cmp	r3, #0
    a0a8:	d007      	beq.n	a0ba <osKernelStart+0x3a>
    a0aa:	4b0f      	ldr	r3, [pc, #60]	; (a0e8 <osKernelStart+0x68>)
    a0ac:	681b      	ldr	r3, [r3, #0]
    a0ae:	2b02      	cmp	r3, #2
    a0b0:	d103      	bne.n	a0ba <osKernelStart+0x3a>
    stat = osErrorISR;
    a0b2:	f06f 0305 	mvn.w	r3, #5
    a0b6:	60fb      	str	r3, [r7, #12]
    a0b8:	e010      	b.n	a0dc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
    a0ba:	4b0b      	ldr	r3, [pc, #44]	; (a0e8 <osKernelStart+0x68>)
    a0bc:	681b      	ldr	r3, [r3, #0]
    a0be:	2b01      	cmp	r3, #1
    a0c0:	d109      	bne.n	a0d6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
    a0c2:	f7ff ffa1 	bl	a008 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
    a0c6:	4b08      	ldr	r3, [pc, #32]	; (a0e8 <osKernelStart+0x68>)
    a0c8:	2202      	movs	r2, #2
    a0ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
    a0cc:	f001 f870 	bl	b1b0 <vTaskStartScheduler>
      stat = osOK;
    a0d0:	2300      	movs	r3, #0
    a0d2:	60fb      	str	r3, [r7, #12]
    a0d4:	e002      	b.n	a0dc <osKernelStart+0x5c>
    } else {
      stat = osError;
    a0d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a0da:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
    a0dc:	68fb      	ldr	r3, [r7, #12]
}
    a0de:	4618      	mov	r0, r3
    a0e0:	3710      	adds	r7, #16
    a0e2:	46bd      	mov	sp, r7
    a0e4:	bd80      	pop	{r7, pc}
    a0e6:	bf00      	nop
    a0e8:	0001ce34 	.word	0x0001ce34

0000a0ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
    a0ec:	b580      	push	{r7, lr}
    a0ee:	b090      	sub	sp, #64	; 0x40
    a0f0:	af04      	add	r7, sp, #16
    a0f2:	60f8      	str	r0, [r7, #12]
    a0f4:	60b9      	str	r1, [r7, #8]
    a0f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
    a0f8:	2300      	movs	r3, #0
    a0fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    a0fc:	f3ef 8305 	mrs	r3, IPSR
    a100:	61fb      	str	r3, [r7, #28]
  return(result);
    a102:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
    a104:	2b00      	cmp	r3, #0
    a106:	f040 808f 	bne.w	a228 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    a10a:	f3ef 8310 	mrs	r3, PRIMASK
    a10e:	61bb      	str	r3, [r7, #24]
  return(result);
    a110:	69bb      	ldr	r3, [r7, #24]
    a112:	2b00      	cmp	r3, #0
    a114:	d105      	bne.n	a122 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
    a116:	f3ef 8311 	mrs	r3, BASEPRI
    a11a:	617b      	str	r3, [r7, #20]
  return(result);
    a11c:	697b      	ldr	r3, [r7, #20]
    a11e:	2b00      	cmp	r3, #0
    a120:	d003      	beq.n	a12a <osThreadNew+0x3e>
    a122:	4b44      	ldr	r3, [pc, #272]	; (a234 <osThreadNew+0x148>)
    a124:	681b      	ldr	r3, [r3, #0]
    a126:	2b02      	cmp	r3, #2
    a128:	d07e      	beq.n	a228 <osThreadNew+0x13c>
    a12a:	68fb      	ldr	r3, [r7, #12]
    a12c:	2b00      	cmp	r3, #0
    a12e:	d07b      	beq.n	a228 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
    a130:	2380      	movs	r3, #128	; 0x80
    a132:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
    a134:	2318      	movs	r3, #24
    a136:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
    a138:	2300      	movs	r3, #0
    a13a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
    a13c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a140:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
    a142:	687b      	ldr	r3, [r7, #4]
    a144:	2b00      	cmp	r3, #0
    a146:	d045      	beq.n	a1d4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
    a148:	687b      	ldr	r3, [r7, #4]
    a14a:	681b      	ldr	r3, [r3, #0]
    a14c:	2b00      	cmp	r3, #0
    a14e:	d002      	beq.n	a156 <osThreadNew+0x6a>
        name = attr->name;
    a150:	687b      	ldr	r3, [r7, #4]
    a152:	681b      	ldr	r3, [r3, #0]
    a154:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
    a156:	687b      	ldr	r3, [r7, #4]
    a158:	699b      	ldr	r3, [r3, #24]
    a15a:	2b00      	cmp	r3, #0
    a15c:	d002      	beq.n	a164 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
    a15e:	687b      	ldr	r3, [r7, #4]
    a160:	699b      	ldr	r3, [r3, #24]
    a162:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
    a164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a166:	2b00      	cmp	r3, #0
    a168:	d008      	beq.n	a17c <osThreadNew+0x90>
    a16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a16c:	2b38      	cmp	r3, #56	; 0x38
    a16e:	d805      	bhi.n	a17c <osThreadNew+0x90>
    a170:	687b      	ldr	r3, [r7, #4]
    a172:	685b      	ldr	r3, [r3, #4]
    a174:	f003 0301 	and.w	r3, r3, #1
    a178:	2b00      	cmp	r3, #0
    a17a:	d001      	beq.n	a180 <osThreadNew+0x94>
        return (NULL);
    a17c:	2300      	movs	r3, #0
    a17e:	e054      	b.n	a22a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
    a180:	687b      	ldr	r3, [r7, #4]
    a182:	695b      	ldr	r3, [r3, #20]
    a184:	2b00      	cmp	r3, #0
    a186:	d003      	beq.n	a190 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
    a188:	687b      	ldr	r3, [r7, #4]
    a18a:	695b      	ldr	r3, [r3, #20]
    a18c:	089b      	lsrs	r3, r3, #2
    a18e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
    a190:	687b      	ldr	r3, [r7, #4]
    a192:	689b      	ldr	r3, [r3, #8]
    a194:	2b00      	cmp	r3, #0
    a196:	d00e      	beq.n	a1b6 <osThreadNew+0xca>
    a198:	687b      	ldr	r3, [r7, #4]
    a19a:	68db      	ldr	r3, [r3, #12]
    a19c:	2b5b      	cmp	r3, #91	; 0x5b
    a19e:	d90a      	bls.n	a1b6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
    a1a0:	687b      	ldr	r3, [r7, #4]
    a1a2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
    a1a4:	2b00      	cmp	r3, #0
    a1a6:	d006      	beq.n	a1b6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
    a1a8:	687b      	ldr	r3, [r7, #4]
    a1aa:	695b      	ldr	r3, [r3, #20]
    a1ac:	2b00      	cmp	r3, #0
    a1ae:	d002      	beq.n	a1b6 <osThreadNew+0xca>
        mem = 1;
    a1b0:	2301      	movs	r3, #1
    a1b2:	623b      	str	r3, [r7, #32]
    a1b4:	e010      	b.n	a1d8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
    a1b6:	687b      	ldr	r3, [r7, #4]
    a1b8:	689b      	ldr	r3, [r3, #8]
    a1ba:	2b00      	cmp	r3, #0
    a1bc:	d10c      	bne.n	a1d8 <osThreadNew+0xec>
    a1be:	687b      	ldr	r3, [r7, #4]
    a1c0:	68db      	ldr	r3, [r3, #12]
    a1c2:	2b00      	cmp	r3, #0
    a1c4:	d108      	bne.n	a1d8 <osThreadNew+0xec>
    a1c6:	687b      	ldr	r3, [r7, #4]
    a1c8:	691b      	ldr	r3, [r3, #16]
    a1ca:	2b00      	cmp	r3, #0
    a1cc:	d104      	bne.n	a1d8 <osThreadNew+0xec>
          mem = 0;
    a1ce:	2300      	movs	r3, #0
    a1d0:	623b      	str	r3, [r7, #32]
    a1d2:	e001      	b.n	a1d8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
    a1d4:	2300      	movs	r3, #0
    a1d6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
    a1d8:	6a3b      	ldr	r3, [r7, #32]
    a1da:	2b01      	cmp	r3, #1
    a1dc:	d110      	bne.n	a200 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
    a1de:	687b      	ldr	r3, [r7, #4]
    a1e0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
    a1e2:	687a      	ldr	r2, [r7, #4]
    a1e4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
    a1e6:	9202      	str	r2, [sp, #8]
    a1e8:	9301      	str	r3, [sp, #4]
    a1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a1ec:	9300      	str	r3, [sp, #0]
    a1ee:	68bb      	ldr	r3, [r7, #8]
    a1f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
    a1f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    a1f4:	68f8      	ldr	r0, [r7, #12]
    a1f6:	f000 fe09 	bl	ae0c <xTaskCreateStatic>
    a1fa:	4603      	mov	r3, r0
    a1fc:	613b      	str	r3, [r7, #16]
    a1fe:	e013      	b.n	a228 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
    a200:	6a3b      	ldr	r3, [r7, #32]
    a202:	2b00      	cmp	r3, #0
    a204:	d110      	bne.n	a228 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
    a206:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a208:	b29a      	uxth	r2, r3
    a20a:	f107 0310 	add.w	r3, r7, #16
    a20e:	9301      	str	r3, [sp, #4]
    a210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a212:	9300      	str	r3, [sp, #0]
    a214:	68bb      	ldr	r3, [r7, #8]
    a216:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    a218:	68f8      	ldr	r0, [r7, #12]
    a21a:	f000 fe51 	bl	aec0 <xTaskCreate>
    a21e:	4603      	mov	r3, r0
    a220:	2b01      	cmp	r3, #1
    a222:	d001      	beq.n	a228 <osThreadNew+0x13c>
          hTask = NULL;
    a224:	2300      	movs	r3, #0
    a226:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
    a228:	693b      	ldr	r3, [r7, #16]
}
    a22a:	4618      	mov	r0, r3
    a22c:	3730      	adds	r7, #48	; 0x30
    a22e:	46bd      	mov	sp, r7
    a230:	bd80      	pop	{r7, pc}
    a232:	bf00      	nop
    a234:	0001ce34 	.word	0x0001ce34

0000a238 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
    a238:	b580      	push	{r7, lr}
    a23a:	b086      	sub	sp, #24
    a23c:	af00      	add	r7, sp, #0
    a23e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    a240:	f3ef 8305 	mrs	r3, IPSR
    a244:	613b      	str	r3, [r7, #16]
  return(result);
    a246:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
    a248:	2b00      	cmp	r3, #0
    a24a:	d10f      	bne.n	a26c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    a24c:	f3ef 8310 	mrs	r3, PRIMASK
    a250:	60fb      	str	r3, [r7, #12]
  return(result);
    a252:	68fb      	ldr	r3, [r7, #12]
    a254:	2b00      	cmp	r3, #0
    a256:	d105      	bne.n	a264 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
    a258:	f3ef 8311 	mrs	r3, BASEPRI
    a25c:	60bb      	str	r3, [r7, #8]
  return(result);
    a25e:	68bb      	ldr	r3, [r7, #8]
    a260:	2b00      	cmp	r3, #0
    a262:	d007      	beq.n	a274 <osDelay+0x3c>
    a264:	4b0a      	ldr	r3, [pc, #40]	; (a290 <osDelay+0x58>)
    a266:	681b      	ldr	r3, [r3, #0]
    a268:	2b02      	cmp	r3, #2
    a26a:	d103      	bne.n	a274 <osDelay+0x3c>
    stat = osErrorISR;
    a26c:	f06f 0305 	mvn.w	r3, #5
    a270:	617b      	str	r3, [r7, #20]
    a272:	e007      	b.n	a284 <osDelay+0x4c>
  }
  else {
    stat = osOK;
    a274:	2300      	movs	r3, #0
    a276:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
    a278:	687b      	ldr	r3, [r7, #4]
    a27a:	2b00      	cmp	r3, #0
    a27c:	d002      	beq.n	a284 <osDelay+0x4c>
      vTaskDelay(ticks);
    a27e:	6878      	ldr	r0, [r7, #4]
    a280:	f000 ff62 	bl	b148 <vTaskDelay>
    }
  }

  return (stat);
    a284:	697b      	ldr	r3, [r7, #20]
}
    a286:	4618      	mov	r0, r3
    a288:	3718      	adds	r7, #24
    a28a:	46bd      	mov	sp, r7
    a28c:	bd80      	pop	{r7, pc}
    a28e:	bf00      	nop
    a290:	0001ce34 	.word	0x0001ce34

0000a294 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
    a294:	b480      	push	{r7}
    a296:	b085      	sub	sp, #20
    a298:	af00      	add	r7, sp, #0
    a29a:	60f8      	str	r0, [r7, #12]
    a29c:	60b9      	str	r1, [r7, #8]
    a29e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
    a2a0:	68fb      	ldr	r3, [r7, #12]
    a2a2:	4a07      	ldr	r2, [pc, #28]	; (a2c0 <vApplicationGetIdleTaskMemory+0x2c>)
    a2a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
    a2a6:	68bb      	ldr	r3, [r7, #8]
    a2a8:	4a06      	ldr	r2, [pc, #24]	; (a2c4 <vApplicationGetIdleTaskMemory+0x30>)
    a2aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
    a2ac:	687b      	ldr	r3, [r7, #4]
    a2ae:	2280      	movs	r2, #128	; 0x80
    a2b0:	601a      	str	r2, [r3, #0]
}
    a2b2:	bf00      	nop
    a2b4:	3714      	adds	r7, #20
    a2b6:	46bd      	mov	sp, r7
    a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    a2bc:	4770      	bx	lr
    a2be:	bf00      	nop
    a2c0:	0001ce38 	.word	0x0001ce38
    a2c4:	0001ce94 	.word	0x0001ce94

0000a2c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
    a2c8:	b480      	push	{r7}
    a2ca:	b085      	sub	sp, #20
    a2cc:	af00      	add	r7, sp, #0
    a2ce:	60f8      	str	r0, [r7, #12]
    a2d0:	60b9      	str	r1, [r7, #8]
    a2d2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
    a2d4:	68fb      	ldr	r3, [r7, #12]
    a2d6:	4a07      	ldr	r2, [pc, #28]	; (a2f4 <vApplicationGetTimerTaskMemory+0x2c>)
    a2d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
    a2da:	68bb      	ldr	r3, [r7, #8]
    a2dc:	4a06      	ldr	r2, [pc, #24]	; (a2f8 <vApplicationGetTimerTaskMemory+0x30>)
    a2de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
    a2e0:	687b      	ldr	r3, [r7, #4]
    a2e2:	f44f 7280 	mov.w	r2, #256	; 0x100
    a2e6:	601a      	str	r2, [r3, #0]
}
    a2e8:	bf00      	nop
    a2ea:	3714      	adds	r7, #20
    a2ec:	46bd      	mov	sp, r7
    a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    a2f2:	4770      	bx	lr
    a2f4:	0001d094 	.word	0x0001d094
    a2f8:	0001d0f0 	.word	0x0001d0f0

0000a2fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    a2fc:	b480      	push	{r7}
    a2fe:	b083      	sub	sp, #12
    a300:	af00      	add	r7, sp, #0
    a302:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    a304:	687b      	ldr	r3, [r7, #4]
    a306:	f103 0208 	add.w	r2, r3, #8
    a30a:	687b      	ldr	r3, [r7, #4]
    a30c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    a30e:	687b      	ldr	r3, [r7, #4]
    a310:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a314:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    a316:	687b      	ldr	r3, [r7, #4]
    a318:	f103 0208 	add.w	r2, r3, #8
    a31c:	687b      	ldr	r3, [r7, #4]
    a31e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    a320:	687b      	ldr	r3, [r7, #4]
    a322:	f103 0208 	add.w	r2, r3, #8
    a326:	687b      	ldr	r3, [r7, #4]
    a328:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    a32a:	687b      	ldr	r3, [r7, #4]
    a32c:	2200      	movs	r2, #0
    a32e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    a330:	bf00      	nop
    a332:	370c      	adds	r7, #12
    a334:	46bd      	mov	sp, r7
    a336:	f85d 7b04 	ldr.w	r7, [sp], #4
    a33a:	4770      	bx	lr

0000a33c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    a33c:	b480      	push	{r7}
    a33e:	b083      	sub	sp, #12
    a340:	af00      	add	r7, sp, #0
    a342:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
    a344:	687b      	ldr	r3, [r7, #4]
    a346:	2200      	movs	r2, #0
    a348:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    a34a:	bf00      	nop
    a34c:	370c      	adds	r7, #12
    a34e:	46bd      	mov	sp, r7
    a350:	f85d 7b04 	ldr.w	r7, [sp], #4
    a354:	4770      	bx	lr

0000a356 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    a356:	b480      	push	{r7}
    a358:	b085      	sub	sp, #20
    a35a:	af00      	add	r7, sp, #0
    a35c:	6078      	str	r0, [r7, #4]
    a35e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
    a360:	687b      	ldr	r3, [r7, #4]
    a362:	685b      	ldr	r3, [r3, #4]
    a364:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    a366:	683b      	ldr	r3, [r7, #0]
    a368:	68fa      	ldr	r2, [r7, #12]
    a36a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    a36c:	68fb      	ldr	r3, [r7, #12]
    a36e:	689a      	ldr	r2, [r3, #8]
    a370:	683b      	ldr	r3, [r7, #0]
    a372:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    a374:	68fb      	ldr	r3, [r7, #12]
    a376:	689b      	ldr	r3, [r3, #8]
    a378:	683a      	ldr	r2, [r7, #0]
    a37a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
    a37c:	68fb      	ldr	r3, [r7, #12]
    a37e:	683a      	ldr	r2, [r7, #0]
    a380:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
    a382:	683b      	ldr	r3, [r7, #0]
    a384:	687a      	ldr	r2, [r7, #4]
    a386:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    a388:	687b      	ldr	r3, [r7, #4]
    a38a:	681b      	ldr	r3, [r3, #0]
    a38c:	1c5a      	adds	r2, r3, #1
    a38e:	687b      	ldr	r3, [r7, #4]
    a390:	601a      	str	r2, [r3, #0]
}
    a392:	bf00      	nop
    a394:	3714      	adds	r7, #20
    a396:	46bd      	mov	sp, r7
    a398:	f85d 7b04 	ldr.w	r7, [sp], #4
    a39c:	4770      	bx	lr

0000a39e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    a39e:	b480      	push	{r7}
    a3a0:	b085      	sub	sp, #20
    a3a2:	af00      	add	r7, sp, #0
    a3a4:	6078      	str	r0, [r7, #4]
    a3a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    a3a8:	683b      	ldr	r3, [r7, #0]
    a3aa:	681b      	ldr	r3, [r3, #0]
    a3ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    a3ae:	68bb      	ldr	r3, [r7, #8]
    a3b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    a3b4:	d103      	bne.n	a3be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    a3b6:	687b      	ldr	r3, [r7, #4]
    a3b8:	691b      	ldr	r3, [r3, #16]
    a3ba:	60fb      	str	r3, [r7, #12]
    a3bc:	e00c      	b.n	a3d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    a3be:	687b      	ldr	r3, [r7, #4]
    a3c0:	3308      	adds	r3, #8
    a3c2:	60fb      	str	r3, [r7, #12]
    a3c4:	e002      	b.n	a3cc <vListInsert+0x2e>
    a3c6:	68fb      	ldr	r3, [r7, #12]
    a3c8:	685b      	ldr	r3, [r3, #4]
    a3ca:	60fb      	str	r3, [r7, #12]
    a3cc:	68fb      	ldr	r3, [r7, #12]
    a3ce:	685b      	ldr	r3, [r3, #4]
    a3d0:	681b      	ldr	r3, [r3, #0]
    a3d2:	68ba      	ldr	r2, [r7, #8]
    a3d4:	429a      	cmp	r2, r3
    a3d6:	d2f6      	bcs.n	a3c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    a3d8:	68fb      	ldr	r3, [r7, #12]
    a3da:	685a      	ldr	r2, [r3, #4]
    a3dc:	683b      	ldr	r3, [r7, #0]
    a3de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    a3e0:	683b      	ldr	r3, [r7, #0]
    a3e2:	685b      	ldr	r3, [r3, #4]
    a3e4:	683a      	ldr	r2, [r7, #0]
    a3e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    a3e8:	683b      	ldr	r3, [r7, #0]
    a3ea:	68fa      	ldr	r2, [r7, #12]
    a3ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
    a3ee:	68fb      	ldr	r3, [r7, #12]
    a3f0:	683a      	ldr	r2, [r7, #0]
    a3f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
    a3f4:	683b      	ldr	r3, [r7, #0]
    a3f6:	687a      	ldr	r2, [r7, #4]
    a3f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    a3fa:	687b      	ldr	r3, [r7, #4]
    a3fc:	681b      	ldr	r3, [r3, #0]
    a3fe:	1c5a      	adds	r2, r3, #1
    a400:	687b      	ldr	r3, [r7, #4]
    a402:	601a      	str	r2, [r3, #0]
}
    a404:	bf00      	nop
    a406:	3714      	adds	r7, #20
    a408:	46bd      	mov	sp, r7
    a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a40e:	4770      	bx	lr

0000a410 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    a410:	b480      	push	{r7}
    a412:	b085      	sub	sp, #20
    a414:	af00      	add	r7, sp, #0
    a416:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    a418:	687b      	ldr	r3, [r7, #4]
    a41a:	691b      	ldr	r3, [r3, #16]
    a41c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    a41e:	687b      	ldr	r3, [r7, #4]
    a420:	685b      	ldr	r3, [r3, #4]
    a422:	687a      	ldr	r2, [r7, #4]
    a424:	6892      	ldr	r2, [r2, #8]
    a426:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    a428:	687b      	ldr	r3, [r7, #4]
    a42a:	689b      	ldr	r3, [r3, #8]
    a42c:	687a      	ldr	r2, [r7, #4]
    a42e:	6852      	ldr	r2, [r2, #4]
    a430:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    a432:	68fb      	ldr	r3, [r7, #12]
    a434:	685b      	ldr	r3, [r3, #4]
    a436:	687a      	ldr	r2, [r7, #4]
    a438:	429a      	cmp	r2, r3
    a43a:	d103      	bne.n	a444 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    a43c:	687b      	ldr	r3, [r7, #4]
    a43e:	689a      	ldr	r2, [r3, #8]
    a440:	68fb      	ldr	r3, [r7, #12]
    a442:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
    a444:	687b      	ldr	r3, [r7, #4]
    a446:	2200      	movs	r2, #0
    a448:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    a44a:	68fb      	ldr	r3, [r7, #12]
    a44c:	681b      	ldr	r3, [r3, #0]
    a44e:	1e5a      	subs	r2, r3, #1
    a450:	68fb      	ldr	r3, [r7, #12]
    a452:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    a454:	68fb      	ldr	r3, [r7, #12]
    a456:	681b      	ldr	r3, [r3, #0]
}
    a458:	4618      	mov	r0, r3
    a45a:	3714      	adds	r7, #20
    a45c:	46bd      	mov	sp, r7
    a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a462:	4770      	bx	lr

0000a464 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    a464:	b580      	push	{r7, lr}
    a466:	b084      	sub	sp, #16
    a468:	af00      	add	r7, sp, #0
    a46a:	6078      	str	r0, [r7, #4]
    a46c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
    a46e:	687b      	ldr	r3, [r7, #4]
    a470:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
    a472:	68fb      	ldr	r3, [r7, #12]
    a474:	2b00      	cmp	r3, #0
    a476:	d109      	bne.n	a48c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
    a478:	f04f 0350 	mov.w	r3, #80	; 0x50
    a47c:	f383 8811 	msr	BASEPRI, r3
    a480:	f3bf 8f6f 	isb	sy
    a484:	f3bf 8f4f 	dsb	sy
    a488:	60bb      	str	r3, [r7, #8]
    a48a:	e7fe      	b.n	a48a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
    a48c:	f001 fffa 	bl	c484 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    a490:	68fb      	ldr	r3, [r7, #12]
    a492:	681a      	ldr	r2, [r3, #0]
    a494:	68fb      	ldr	r3, [r7, #12]
    a496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    a498:	68f9      	ldr	r1, [r7, #12]
    a49a:	6c09      	ldr	r1, [r1, #64]	; 0x40
    a49c:	fb01 f303 	mul.w	r3, r1, r3
    a4a0:	441a      	add	r2, r3
    a4a2:	68fb      	ldr	r3, [r7, #12]
    a4a4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    a4a6:	68fb      	ldr	r3, [r7, #12]
    a4a8:	2200      	movs	r2, #0
    a4aa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    a4ac:	68fb      	ldr	r3, [r7, #12]
    a4ae:	681a      	ldr	r2, [r3, #0]
    a4b0:	68fb      	ldr	r3, [r7, #12]
    a4b2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    a4b4:	68fb      	ldr	r3, [r7, #12]
    a4b6:	681a      	ldr	r2, [r3, #0]
    a4b8:	68fb      	ldr	r3, [r7, #12]
    a4ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    a4bc:	3b01      	subs	r3, #1
    a4be:	68f9      	ldr	r1, [r7, #12]
    a4c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
    a4c2:	fb01 f303 	mul.w	r3, r1, r3
    a4c6:	441a      	add	r2, r3
    a4c8:	68fb      	ldr	r3, [r7, #12]
    a4ca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    a4cc:	68fb      	ldr	r3, [r7, #12]
    a4ce:	22ff      	movs	r2, #255	; 0xff
    a4d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
    a4d4:	68fb      	ldr	r3, [r7, #12]
    a4d6:	22ff      	movs	r2, #255	; 0xff
    a4d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
    a4dc:	683b      	ldr	r3, [r7, #0]
    a4de:	2b00      	cmp	r3, #0
    a4e0:	d114      	bne.n	a50c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    a4e2:	68fb      	ldr	r3, [r7, #12]
    a4e4:	691b      	ldr	r3, [r3, #16]
    a4e6:	2b00      	cmp	r3, #0
    a4e8:	d01a      	beq.n	a520 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    a4ea:	68fb      	ldr	r3, [r7, #12]
    a4ec:	3310      	adds	r3, #16
    a4ee:	4618      	mov	r0, r3
    a4f0:	f001 f8de 	bl	b6b0 <xTaskRemoveFromEventList>
    a4f4:	4603      	mov	r3, r0
    a4f6:	2b00      	cmp	r3, #0
    a4f8:	d012      	beq.n	a520 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
    a4fa:	4b0d      	ldr	r3, [pc, #52]	; (a530 <xQueueGenericReset+0xcc>)
    a4fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    a500:	601a      	str	r2, [r3, #0]
    a502:	f3bf 8f4f 	dsb	sy
    a506:	f3bf 8f6f 	isb	sy
    a50a:	e009      	b.n	a520 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    a50c:	68fb      	ldr	r3, [r7, #12]
    a50e:	3310      	adds	r3, #16
    a510:	4618      	mov	r0, r3
    a512:	f7ff fef3 	bl	a2fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    a516:	68fb      	ldr	r3, [r7, #12]
    a518:	3324      	adds	r3, #36	; 0x24
    a51a:	4618      	mov	r0, r3
    a51c:	f7ff feee 	bl	a2fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    a520:	f001 ffde 	bl	c4e0 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    a524:	2301      	movs	r3, #1
}
    a526:	4618      	mov	r0, r3
    a528:	3710      	adds	r7, #16
    a52a:	46bd      	mov	sp, r7
    a52c:	bd80      	pop	{r7, pc}
    a52e:	bf00      	nop
    a530:	e000ed04 	.word	0xe000ed04

0000a534 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
    a534:	b580      	push	{r7, lr}
    a536:	b08e      	sub	sp, #56	; 0x38
    a538:	af02      	add	r7, sp, #8
    a53a:	60f8      	str	r0, [r7, #12]
    a53c:	60b9      	str	r1, [r7, #8]
    a53e:	607a      	str	r2, [r7, #4]
    a540:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    a542:	68fb      	ldr	r3, [r7, #12]
    a544:	2b00      	cmp	r3, #0
    a546:	d109      	bne.n	a55c <xQueueGenericCreateStatic+0x28>
    a548:	f04f 0350 	mov.w	r3, #80	; 0x50
    a54c:	f383 8811 	msr	BASEPRI, r3
    a550:	f3bf 8f6f 	isb	sy
    a554:	f3bf 8f4f 	dsb	sy
    a558:	62bb      	str	r3, [r7, #40]	; 0x28
    a55a:	e7fe      	b.n	a55a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
    a55c:	683b      	ldr	r3, [r7, #0]
    a55e:	2b00      	cmp	r3, #0
    a560:	d109      	bne.n	a576 <xQueueGenericCreateStatic+0x42>
    a562:	f04f 0350 	mov.w	r3, #80	; 0x50
    a566:	f383 8811 	msr	BASEPRI, r3
    a56a:	f3bf 8f6f 	isb	sy
    a56e:	f3bf 8f4f 	dsb	sy
    a572:	627b      	str	r3, [r7, #36]	; 0x24
    a574:	e7fe      	b.n	a574 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
    a576:	687b      	ldr	r3, [r7, #4]
    a578:	2b00      	cmp	r3, #0
    a57a:	d002      	beq.n	a582 <xQueueGenericCreateStatic+0x4e>
    a57c:	68bb      	ldr	r3, [r7, #8]
    a57e:	2b00      	cmp	r3, #0
    a580:	d001      	beq.n	a586 <xQueueGenericCreateStatic+0x52>
    a582:	2301      	movs	r3, #1
    a584:	e000      	b.n	a588 <xQueueGenericCreateStatic+0x54>
    a586:	2300      	movs	r3, #0
    a588:	2b00      	cmp	r3, #0
    a58a:	d109      	bne.n	a5a0 <xQueueGenericCreateStatic+0x6c>
    a58c:	f04f 0350 	mov.w	r3, #80	; 0x50
    a590:	f383 8811 	msr	BASEPRI, r3
    a594:	f3bf 8f6f 	isb	sy
    a598:	f3bf 8f4f 	dsb	sy
    a59c:	623b      	str	r3, [r7, #32]
    a59e:	e7fe      	b.n	a59e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
    a5a0:	687b      	ldr	r3, [r7, #4]
    a5a2:	2b00      	cmp	r3, #0
    a5a4:	d102      	bne.n	a5ac <xQueueGenericCreateStatic+0x78>
    a5a6:	68bb      	ldr	r3, [r7, #8]
    a5a8:	2b00      	cmp	r3, #0
    a5aa:	d101      	bne.n	a5b0 <xQueueGenericCreateStatic+0x7c>
    a5ac:	2301      	movs	r3, #1
    a5ae:	e000      	b.n	a5b2 <xQueueGenericCreateStatic+0x7e>
    a5b0:	2300      	movs	r3, #0
    a5b2:	2b00      	cmp	r3, #0
    a5b4:	d109      	bne.n	a5ca <xQueueGenericCreateStatic+0x96>
    a5b6:	f04f 0350 	mov.w	r3, #80	; 0x50
    a5ba:	f383 8811 	msr	BASEPRI, r3
    a5be:	f3bf 8f6f 	isb	sy
    a5c2:	f3bf 8f4f 	dsb	sy
    a5c6:	61fb      	str	r3, [r7, #28]
    a5c8:	e7fe      	b.n	a5c8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
    a5ca:	2350      	movs	r3, #80	; 0x50
    a5cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
    a5ce:	697b      	ldr	r3, [r7, #20]
    a5d0:	2b50      	cmp	r3, #80	; 0x50
    a5d2:	d009      	beq.n	a5e8 <xQueueGenericCreateStatic+0xb4>
    a5d4:	f04f 0350 	mov.w	r3, #80	; 0x50
    a5d8:	f383 8811 	msr	BASEPRI, r3
    a5dc:	f3bf 8f6f 	isb	sy
    a5e0:	f3bf 8f4f 	dsb	sy
    a5e4:	61bb      	str	r3, [r7, #24]
    a5e6:	e7fe      	b.n	a5e6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
    a5e8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
    a5ea:	683b      	ldr	r3, [r7, #0]
    a5ec:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
    a5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a5f0:	2b00      	cmp	r3, #0
    a5f2:	d00d      	beq.n	a610 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
    a5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a5f6:	2201      	movs	r2, #1
    a5f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    a5fc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
    a600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a602:	9300      	str	r3, [sp, #0]
    a604:	4613      	mov	r3, r2
    a606:	687a      	ldr	r2, [r7, #4]
    a608:	68b9      	ldr	r1, [r7, #8]
    a60a:	68f8      	ldr	r0, [r7, #12]
    a60c:	f000 f805 	bl	a61a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
    a610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
    a612:	4618      	mov	r0, r3
    a614:	3730      	adds	r7, #48	; 0x30
    a616:	46bd      	mov	sp, r7
    a618:	bd80      	pop	{r7, pc}

0000a61a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    a61a:	b580      	push	{r7, lr}
    a61c:	b084      	sub	sp, #16
    a61e:	af00      	add	r7, sp, #0
    a620:	60f8      	str	r0, [r7, #12]
    a622:	60b9      	str	r1, [r7, #8]
    a624:	607a      	str	r2, [r7, #4]
    a626:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    a628:	68bb      	ldr	r3, [r7, #8]
    a62a:	2b00      	cmp	r3, #0
    a62c:	d103      	bne.n	a636 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    a62e:	69bb      	ldr	r3, [r7, #24]
    a630:	69ba      	ldr	r2, [r7, #24]
    a632:	601a      	str	r2, [r3, #0]
    a634:	e002      	b.n	a63c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    a636:	69bb      	ldr	r3, [r7, #24]
    a638:	687a      	ldr	r2, [r7, #4]
    a63a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    a63c:	69bb      	ldr	r3, [r7, #24]
    a63e:	68fa      	ldr	r2, [r7, #12]
    a640:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    a642:	69bb      	ldr	r3, [r7, #24]
    a644:	68ba      	ldr	r2, [r7, #8]
    a646:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    a648:	2101      	movs	r1, #1
    a64a:	69b8      	ldr	r0, [r7, #24]
    a64c:	f7ff ff0a 	bl	a464 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
    a650:	69bb      	ldr	r3, [r7, #24]
    a652:	78fa      	ldrb	r2, [r7, #3]
    a654:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
    a658:	bf00      	nop
    a65a:	3710      	adds	r7, #16
    a65c:	46bd      	mov	sp, r7
    a65e:	bd80      	pop	{r7, pc}

0000a660 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    a660:	b580      	push	{r7, lr}
    a662:	b08e      	sub	sp, #56	; 0x38
    a664:	af00      	add	r7, sp, #0
    a666:	60f8      	str	r0, [r7, #12]
    a668:	60b9      	str	r1, [r7, #8]
    a66a:	607a      	str	r2, [r7, #4]
    a66c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    a66e:	2300      	movs	r3, #0
    a670:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
    a672:	68fb      	ldr	r3, [r7, #12]
    a674:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
    a676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a678:	2b00      	cmp	r3, #0
    a67a:	d109      	bne.n	a690 <xQueueGenericSend+0x30>
    a67c:	f04f 0350 	mov.w	r3, #80	; 0x50
    a680:	f383 8811 	msr	BASEPRI, r3
    a684:	f3bf 8f6f 	isb	sy
    a688:	f3bf 8f4f 	dsb	sy
    a68c:	62bb      	str	r3, [r7, #40]	; 0x28
    a68e:	e7fe      	b.n	a68e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    a690:	68bb      	ldr	r3, [r7, #8]
    a692:	2b00      	cmp	r3, #0
    a694:	d103      	bne.n	a69e <xQueueGenericSend+0x3e>
    a696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    a69a:	2b00      	cmp	r3, #0
    a69c:	d101      	bne.n	a6a2 <xQueueGenericSend+0x42>
    a69e:	2301      	movs	r3, #1
    a6a0:	e000      	b.n	a6a4 <xQueueGenericSend+0x44>
    a6a2:	2300      	movs	r3, #0
    a6a4:	2b00      	cmp	r3, #0
    a6a6:	d109      	bne.n	a6bc <xQueueGenericSend+0x5c>
    a6a8:	f04f 0350 	mov.w	r3, #80	; 0x50
    a6ac:	f383 8811 	msr	BASEPRI, r3
    a6b0:	f3bf 8f6f 	isb	sy
    a6b4:	f3bf 8f4f 	dsb	sy
    a6b8:	627b      	str	r3, [r7, #36]	; 0x24
    a6ba:	e7fe      	b.n	a6ba <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    a6bc:	683b      	ldr	r3, [r7, #0]
    a6be:	2b02      	cmp	r3, #2
    a6c0:	d103      	bne.n	a6ca <xQueueGenericSend+0x6a>
    a6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a6c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    a6c6:	2b01      	cmp	r3, #1
    a6c8:	d101      	bne.n	a6ce <xQueueGenericSend+0x6e>
    a6ca:	2301      	movs	r3, #1
    a6cc:	e000      	b.n	a6d0 <xQueueGenericSend+0x70>
    a6ce:	2300      	movs	r3, #0
    a6d0:	2b00      	cmp	r3, #0
    a6d2:	d109      	bne.n	a6e8 <xQueueGenericSend+0x88>
    a6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
    a6d8:	f383 8811 	msr	BASEPRI, r3
    a6dc:	f3bf 8f6f 	isb	sy
    a6e0:	f3bf 8f4f 	dsb	sy
    a6e4:	623b      	str	r3, [r7, #32]
    a6e6:	e7fe      	b.n	a6e6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    a6e8:	f001 f998 	bl	ba1c <xTaskGetSchedulerState>
    a6ec:	4603      	mov	r3, r0
    a6ee:	2b00      	cmp	r3, #0
    a6f0:	d102      	bne.n	a6f8 <xQueueGenericSend+0x98>
    a6f2:	687b      	ldr	r3, [r7, #4]
    a6f4:	2b00      	cmp	r3, #0
    a6f6:	d101      	bne.n	a6fc <xQueueGenericSend+0x9c>
    a6f8:	2301      	movs	r3, #1
    a6fa:	e000      	b.n	a6fe <xQueueGenericSend+0x9e>
    a6fc:	2300      	movs	r3, #0
    a6fe:	2b00      	cmp	r3, #0
    a700:	d109      	bne.n	a716 <xQueueGenericSend+0xb6>
    a702:	f04f 0350 	mov.w	r3, #80	; 0x50
    a706:	f383 8811 	msr	BASEPRI, r3
    a70a:	f3bf 8f6f 	isb	sy
    a70e:	f3bf 8f4f 	dsb	sy
    a712:	61fb      	str	r3, [r7, #28]
    a714:	e7fe      	b.n	a714 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    a716:	f001 feb5 	bl	c484 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    a71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a71c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    a71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    a722:	429a      	cmp	r2, r3
    a724:	d302      	bcc.n	a72c <xQueueGenericSend+0xcc>
    a726:	683b      	ldr	r3, [r7, #0]
    a728:	2b02      	cmp	r3, #2
    a72a:	d129      	bne.n	a780 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    a72c:	683a      	ldr	r2, [r7, #0]
    a72e:	68b9      	ldr	r1, [r7, #8]
    a730:	6b38      	ldr	r0, [r7, #48]	; 0x30
    a732:	f000 f9ff 	bl	ab34 <prvCopyDataToQueue>
    a736:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    a738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a73c:	2b00      	cmp	r3, #0
    a73e:	d010      	beq.n	a762 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    a740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a742:	3324      	adds	r3, #36	; 0x24
    a744:	4618      	mov	r0, r3
    a746:	f000 ffb3 	bl	b6b0 <xTaskRemoveFromEventList>
    a74a:	4603      	mov	r3, r0
    a74c:	2b00      	cmp	r3, #0
    a74e:	d013      	beq.n	a778 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
    a750:	4b3f      	ldr	r3, [pc, #252]	; (a850 <xQueueGenericSend+0x1f0>)
    a752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    a756:	601a      	str	r2, [r3, #0]
    a758:	f3bf 8f4f 	dsb	sy
    a75c:	f3bf 8f6f 	isb	sy
    a760:	e00a      	b.n	a778 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    a762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a764:	2b00      	cmp	r3, #0
    a766:	d007      	beq.n	a778 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    a768:	4b39      	ldr	r3, [pc, #228]	; (a850 <xQueueGenericSend+0x1f0>)
    a76a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    a76e:	601a      	str	r2, [r3, #0]
    a770:	f3bf 8f4f 	dsb	sy
    a774:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    a778:	f001 feb2 	bl	c4e0 <vPortExitCritical>
				return pdPASS;
    a77c:	2301      	movs	r3, #1
    a77e:	e063      	b.n	a848 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    a780:	687b      	ldr	r3, [r7, #4]
    a782:	2b00      	cmp	r3, #0
    a784:	d103      	bne.n	a78e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    a786:	f001 feab 	bl	c4e0 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    a78a:	2300      	movs	r3, #0
    a78c:	e05c      	b.n	a848 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
    a78e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a790:	2b00      	cmp	r3, #0
    a792:	d106      	bne.n	a7a2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    a794:	f107 0314 	add.w	r3, r7, #20
    a798:	4618      	mov	r0, r3
    a79a:	f000 ffeb 	bl	b774 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    a79e:	2301      	movs	r3, #1
    a7a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    a7a2:	f001 fe9d 	bl	c4e0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    a7a6:	f000 fd67 	bl	b278 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    a7aa:	f001 fe6b 	bl	c484 <vPortEnterCritical>
    a7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a7b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    a7b4:	b25b      	sxtb	r3, r3
    a7b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    a7ba:	d103      	bne.n	a7c4 <xQueueGenericSend+0x164>
    a7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a7be:	2200      	movs	r2, #0
    a7c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    a7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a7c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    a7ca:	b25b      	sxtb	r3, r3
    a7cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    a7d0:	d103      	bne.n	a7da <xQueueGenericSend+0x17a>
    a7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a7d4:	2200      	movs	r2, #0
    a7d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    a7da:	f001 fe81 	bl	c4e0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    a7de:	1d3a      	adds	r2, r7, #4
    a7e0:	f107 0314 	add.w	r3, r7, #20
    a7e4:	4611      	mov	r1, r2
    a7e6:	4618      	mov	r0, r3
    a7e8:	f000 ffda 	bl	b7a0 <xTaskCheckForTimeOut>
    a7ec:	4603      	mov	r3, r0
    a7ee:	2b00      	cmp	r3, #0
    a7f0:	d124      	bne.n	a83c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    a7f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
    a7f4:	f000 fa96 	bl	ad24 <prvIsQueueFull>
    a7f8:	4603      	mov	r3, r0
    a7fa:	2b00      	cmp	r3, #0
    a7fc:	d018      	beq.n	a830 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    a7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a800:	3310      	adds	r3, #16
    a802:	687a      	ldr	r2, [r7, #4]
    a804:	4611      	mov	r1, r2
    a806:	4618      	mov	r0, r3
    a808:	f000 ff04 	bl	b614 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    a80c:	6b38      	ldr	r0, [r7, #48]	; 0x30
    a80e:	f000 fa21 	bl	ac54 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    a812:	f000 fd3f 	bl	b294 <xTaskResumeAll>
    a816:	4603      	mov	r3, r0
    a818:	2b00      	cmp	r3, #0
    a81a:	f47f af7c 	bne.w	a716 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
    a81e:	4b0c      	ldr	r3, [pc, #48]	; (a850 <xQueueGenericSend+0x1f0>)
    a820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    a824:	601a      	str	r2, [r3, #0]
    a826:	f3bf 8f4f 	dsb	sy
    a82a:	f3bf 8f6f 	isb	sy
    a82e:	e772      	b.n	a716 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    a830:	6b38      	ldr	r0, [r7, #48]	; 0x30
    a832:	f000 fa0f 	bl	ac54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    a836:	f000 fd2d 	bl	b294 <xTaskResumeAll>
    a83a:	e76c      	b.n	a716 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    a83c:	6b38      	ldr	r0, [r7, #48]	; 0x30
    a83e:	f000 fa09 	bl	ac54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    a842:	f000 fd27 	bl	b294 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    a846:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
    a848:	4618      	mov	r0, r3
    a84a:	3738      	adds	r7, #56	; 0x38
    a84c:	46bd      	mov	sp, r7
    a84e:	bd80      	pop	{r7, pc}
    a850:	e000ed04 	.word	0xe000ed04

0000a854 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    a854:	b580      	push	{r7, lr}
    a856:	b08e      	sub	sp, #56	; 0x38
    a858:	af00      	add	r7, sp, #0
    a85a:	60f8      	str	r0, [r7, #12]
    a85c:	60b9      	str	r1, [r7, #8]
    a85e:	607a      	str	r2, [r7, #4]
    a860:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
    a862:	68fb      	ldr	r3, [r7, #12]
    a864:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
    a866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a868:	2b00      	cmp	r3, #0
    a86a:	d109      	bne.n	a880 <xQueueGenericSendFromISR+0x2c>
    a86c:	f04f 0350 	mov.w	r3, #80	; 0x50
    a870:	f383 8811 	msr	BASEPRI, r3
    a874:	f3bf 8f6f 	isb	sy
    a878:	f3bf 8f4f 	dsb	sy
    a87c:	627b      	str	r3, [r7, #36]	; 0x24
    a87e:	e7fe      	b.n	a87e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    a880:	68bb      	ldr	r3, [r7, #8]
    a882:	2b00      	cmp	r3, #0
    a884:	d103      	bne.n	a88e <xQueueGenericSendFromISR+0x3a>
    a886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    a88a:	2b00      	cmp	r3, #0
    a88c:	d101      	bne.n	a892 <xQueueGenericSendFromISR+0x3e>
    a88e:	2301      	movs	r3, #1
    a890:	e000      	b.n	a894 <xQueueGenericSendFromISR+0x40>
    a892:	2300      	movs	r3, #0
    a894:	2b00      	cmp	r3, #0
    a896:	d109      	bne.n	a8ac <xQueueGenericSendFromISR+0x58>
    a898:	f04f 0350 	mov.w	r3, #80	; 0x50
    a89c:	f383 8811 	msr	BASEPRI, r3
    a8a0:	f3bf 8f6f 	isb	sy
    a8a4:	f3bf 8f4f 	dsb	sy
    a8a8:	623b      	str	r3, [r7, #32]
    a8aa:	e7fe      	b.n	a8aa <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    a8ac:	683b      	ldr	r3, [r7, #0]
    a8ae:	2b02      	cmp	r3, #2
    a8b0:	d103      	bne.n	a8ba <xQueueGenericSendFromISR+0x66>
    a8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a8b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    a8b6:	2b01      	cmp	r3, #1
    a8b8:	d101      	bne.n	a8be <xQueueGenericSendFromISR+0x6a>
    a8ba:	2301      	movs	r3, #1
    a8bc:	e000      	b.n	a8c0 <xQueueGenericSendFromISR+0x6c>
    a8be:	2300      	movs	r3, #0
    a8c0:	2b00      	cmp	r3, #0
    a8c2:	d109      	bne.n	a8d8 <xQueueGenericSendFromISR+0x84>
    a8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
    a8c8:	f383 8811 	msr	BASEPRI, r3
    a8cc:	f3bf 8f6f 	isb	sy
    a8d0:	f3bf 8f4f 	dsb	sy
    a8d4:	61fb      	str	r3, [r7, #28]
    a8d6:	e7fe      	b.n	a8d6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    a8d8:	f001 fe58 	bl	c58c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
    a8dc:	f3ef 8211 	mrs	r2, BASEPRI
    a8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
    a8e4:	f383 8811 	msr	BASEPRI, r3
    a8e8:	f3bf 8f6f 	isb	sy
    a8ec:	f3bf 8f4f 	dsb	sy
    a8f0:	61ba      	str	r2, [r7, #24]
    a8f2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
    a8f4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    a8f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    a8f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a8fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    a8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a8fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    a900:	429a      	cmp	r2, r3
    a902:	d302      	bcc.n	a90a <xQueueGenericSendFromISR+0xb6>
    a904:	683b      	ldr	r3, [r7, #0]
    a906:	2b02      	cmp	r3, #2
    a908:	d12c      	bne.n	a964 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    a90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a90c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    a910:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    a914:	683a      	ldr	r2, [r7, #0]
    a916:	68b9      	ldr	r1, [r7, #8]
    a918:	6b38      	ldr	r0, [r7, #48]	; 0x30
    a91a:	f000 f90b 	bl	ab34 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    a91e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
    a922:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    a926:	d112      	bne.n	a94e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    a928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a92a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a92c:	2b00      	cmp	r3, #0
    a92e:	d016      	beq.n	a95e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    a930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a932:	3324      	adds	r3, #36	; 0x24
    a934:	4618      	mov	r0, r3
    a936:	f000 febb 	bl	b6b0 <xTaskRemoveFromEventList>
    a93a:	4603      	mov	r3, r0
    a93c:	2b00      	cmp	r3, #0
    a93e:	d00e      	beq.n	a95e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    a940:	687b      	ldr	r3, [r7, #4]
    a942:	2b00      	cmp	r3, #0
    a944:	d00b      	beq.n	a95e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    a946:	687b      	ldr	r3, [r7, #4]
    a948:	2201      	movs	r2, #1
    a94a:	601a      	str	r2, [r3, #0]
    a94c:	e007      	b.n	a95e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    a94e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    a952:	3301      	adds	r3, #1
    a954:	b2db      	uxtb	r3, r3
    a956:	b25a      	sxtb	r2, r3
    a958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a95a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
    a95e:	2301      	movs	r3, #1
    a960:	637b      	str	r3, [r7, #52]	; 0x34
		{
    a962:	e001      	b.n	a968 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    a964:	2300      	movs	r3, #0
    a966:	637b      	str	r3, [r7, #52]	; 0x34
    a968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a96a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
    a96c:	693b      	ldr	r3, [r7, #16]
    a96e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    a972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    a974:	4618      	mov	r0, r3
    a976:	3738      	adds	r7, #56	; 0x38
    a978:	46bd      	mov	sp, r7
    a97a:	bd80      	pop	{r7, pc}

0000a97c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
    a97c:	b580      	push	{r7, lr}
    a97e:	b08c      	sub	sp, #48	; 0x30
    a980:	af00      	add	r7, sp, #0
    a982:	60f8      	str	r0, [r7, #12]
    a984:	60b9      	str	r1, [r7, #8]
    a986:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
    a988:	2300      	movs	r3, #0
    a98a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
    a98c:	68fb      	ldr	r3, [r7, #12]
    a98e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
    a990:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a992:	2b00      	cmp	r3, #0
    a994:	d109      	bne.n	a9aa <xQueueReceive+0x2e>
	__asm volatile
    a996:	f04f 0350 	mov.w	r3, #80	; 0x50
    a99a:	f383 8811 	msr	BASEPRI, r3
    a99e:	f3bf 8f6f 	isb	sy
    a9a2:	f3bf 8f4f 	dsb	sy
    a9a6:	623b      	str	r3, [r7, #32]
    a9a8:	e7fe      	b.n	a9a8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    a9aa:	68bb      	ldr	r3, [r7, #8]
    a9ac:	2b00      	cmp	r3, #0
    a9ae:	d103      	bne.n	a9b8 <xQueueReceive+0x3c>
    a9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a9b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    a9b4:	2b00      	cmp	r3, #0
    a9b6:	d101      	bne.n	a9bc <xQueueReceive+0x40>
    a9b8:	2301      	movs	r3, #1
    a9ba:	e000      	b.n	a9be <xQueueReceive+0x42>
    a9bc:	2300      	movs	r3, #0
    a9be:	2b00      	cmp	r3, #0
    a9c0:	d109      	bne.n	a9d6 <xQueueReceive+0x5a>
    a9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
    a9c6:	f383 8811 	msr	BASEPRI, r3
    a9ca:	f3bf 8f6f 	isb	sy
    a9ce:	f3bf 8f4f 	dsb	sy
    a9d2:	61fb      	str	r3, [r7, #28]
    a9d4:	e7fe      	b.n	a9d4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    a9d6:	f001 f821 	bl	ba1c <xTaskGetSchedulerState>
    a9da:	4603      	mov	r3, r0
    a9dc:	2b00      	cmp	r3, #0
    a9de:	d102      	bne.n	a9e6 <xQueueReceive+0x6a>
    a9e0:	687b      	ldr	r3, [r7, #4]
    a9e2:	2b00      	cmp	r3, #0
    a9e4:	d101      	bne.n	a9ea <xQueueReceive+0x6e>
    a9e6:	2301      	movs	r3, #1
    a9e8:	e000      	b.n	a9ec <xQueueReceive+0x70>
    a9ea:	2300      	movs	r3, #0
    a9ec:	2b00      	cmp	r3, #0
    a9ee:	d109      	bne.n	aa04 <xQueueReceive+0x88>
    a9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
    a9f4:	f383 8811 	msr	BASEPRI, r3
    a9f8:	f3bf 8f6f 	isb	sy
    a9fc:	f3bf 8f4f 	dsb	sy
    aa00:	61bb      	str	r3, [r7, #24]
    aa02:	e7fe      	b.n	aa02 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    aa04:	f001 fd3e 	bl	c484 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    aa08:	6abb      	ldr	r3, [r7, #40]	; 0x28
    aa0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    aa0c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    aa0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    aa10:	2b00      	cmp	r3, #0
    aa12:	d01f      	beq.n	aa54 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    aa14:	68b9      	ldr	r1, [r7, #8]
    aa16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    aa18:	f000 f8f6 	bl	ac08 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    aa1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    aa1e:	1e5a      	subs	r2, r3, #1
    aa20:	6abb      	ldr	r3, [r7, #40]	; 0x28
    aa22:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    aa24:	6abb      	ldr	r3, [r7, #40]	; 0x28
    aa26:	691b      	ldr	r3, [r3, #16]
    aa28:	2b00      	cmp	r3, #0
    aa2a:	d00f      	beq.n	aa4c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    aa2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    aa2e:	3310      	adds	r3, #16
    aa30:	4618      	mov	r0, r3
    aa32:	f000 fe3d 	bl	b6b0 <xTaskRemoveFromEventList>
    aa36:	4603      	mov	r3, r0
    aa38:	2b00      	cmp	r3, #0
    aa3a:	d007      	beq.n	aa4c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
    aa3c:	4b3c      	ldr	r3, [pc, #240]	; (ab30 <xQueueReceive+0x1b4>)
    aa3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    aa42:	601a      	str	r2, [r3, #0]
    aa44:	f3bf 8f4f 	dsb	sy
    aa48:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    aa4c:	f001 fd48 	bl	c4e0 <vPortExitCritical>
				return pdPASS;
    aa50:	2301      	movs	r3, #1
    aa52:	e069      	b.n	ab28 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    aa54:	687b      	ldr	r3, [r7, #4]
    aa56:	2b00      	cmp	r3, #0
    aa58:	d103      	bne.n	aa62 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    aa5a:	f001 fd41 	bl	c4e0 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    aa5e:	2300      	movs	r3, #0
    aa60:	e062      	b.n	ab28 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
    aa62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    aa64:	2b00      	cmp	r3, #0
    aa66:	d106      	bne.n	aa76 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    aa68:	f107 0310 	add.w	r3, r7, #16
    aa6c:	4618      	mov	r0, r3
    aa6e:	f000 fe81 	bl	b774 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    aa72:	2301      	movs	r3, #1
    aa74:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    aa76:	f001 fd33 	bl	c4e0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    aa7a:	f000 fbfd 	bl	b278 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    aa7e:	f001 fd01 	bl	c484 <vPortEnterCritical>
    aa82:	6abb      	ldr	r3, [r7, #40]	; 0x28
    aa84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    aa88:	b25b      	sxtb	r3, r3
    aa8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    aa8e:	d103      	bne.n	aa98 <xQueueReceive+0x11c>
    aa90:	6abb      	ldr	r3, [r7, #40]	; 0x28
    aa92:	2200      	movs	r2, #0
    aa94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    aa98:	6abb      	ldr	r3, [r7, #40]	; 0x28
    aa9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    aa9e:	b25b      	sxtb	r3, r3
    aaa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    aaa4:	d103      	bne.n	aaae <xQueueReceive+0x132>
    aaa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    aaa8:	2200      	movs	r2, #0
    aaaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    aaae:	f001 fd17 	bl	c4e0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    aab2:	1d3a      	adds	r2, r7, #4
    aab4:	f107 0310 	add.w	r3, r7, #16
    aab8:	4611      	mov	r1, r2
    aaba:	4618      	mov	r0, r3
    aabc:	f000 fe70 	bl	b7a0 <xTaskCheckForTimeOut>
    aac0:	4603      	mov	r3, r0
    aac2:	2b00      	cmp	r3, #0
    aac4:	d123      	bne.n	ab0e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    aac6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    aac8:	f000 f916 	bl	acf8 <prvIsQueueEmpty>
    aacc:	4603      	mov	r3, r0
    aace:	2b00      	cmp	r3, #0
    aad0:	d017      	beq.n	ab02 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    aad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    aad4:	3324      	adds	r3, #36	; 0x24
    aad6:	687a      	ldr	r2, [r7, #4]
    aad8:	4611      	mov	r1, r2
    aada:	4618      	mov	r0, r3
    aadc:	f000 fd9a 	bl	b614 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    aae0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    aae2:	f000 f8b7 	bl	ac54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    aae6:	f000 fbd5 	bl	b294 <xTaskResumeAll>
    aaea:	4603      	mov	r3, r0
    aaec:	2b00      	cmp	r3, #0
    aaee:	d189      	bne.n	aa04 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
    aaf0:	4b0f      	ldr	r3, [pc, #60]	; (ab30 <xQueueReceive+0x1b4>)
    aaf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    aaf6:	601a      	str	r2, [r3, #0]
    aaf8:	f3bf 8f4f 	dsb	sy
    aafc:	f3bf 8f6f 	isb	sy
    ab00:	e780      	b.n	aa04 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
    ab02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ab04:	f000 f8a6 	bl	ac54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    ab08:	f000 fbc4 	bl	b294 <xTaskResumeAll>
    ab0c:	e77a      	b.n	aa04 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
    ab0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ab10:	f000 f8a0 	bl	ac54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    ab14:	f000 fbbe 	bl	b294 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    ab18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ab1a:	f000 f8ed 	bl	acf8 <prvIsQueueEmpty>
    ab1e:	4603      	mov	r3, r0
    ab20:	2b00      	cmp	r3, #0
    ab22:	f43f af6f 	beq.w	aa04 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    ab26:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
    ab28:	4618      	mov	r0, r3
    ab2a:	3730      	adds	r7, #48	; 0x30
    ab2c:	46bd      	mov	sp, r7
    ab2e:	bd80      	pop	{r7, pc}
    ab30:	e000ed04 	.word	0xe000ed04

0000ab34 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    ab34:	b580      	push	{r7, lr}
    ab36:	b086      	sub	sp, #24
    ab38:	af00      	add	r7, sp, #0
    ab3a:	60f8      	str	r0, [r7, #12]
    ab3c:	60b9      	str	r1, [r7, #8]
    ab3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
    ab40:	2300      	movs	r3, #0
    ab42:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    ab44:	68fb      	ldr	r3, [r7, #12]
    ab46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    ab48:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    ab4a:	68fb      	ldr	r3, [r7, #12]
    ab4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    ab4e:	2b00      	cmp	r3, #0
    ab50:	d10d      	bne.n	ab6e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    ab52:	68fb      	ldr	r3, [r7, #12]
    ab54:	681b      	ldr	r3, [r3, #0]
    ab56:	2b00      	cmp	r3, #0
    ab58:	d14d      	bne.n	abf6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
    ab5a:	68fb      	ldr	r3, [r7, #12]
    ab5c:	689b      	ldr	r3, [r3, #8]
    ab5e:	4618      	mov	r0, r3
    ab60:	f000 ff7a 	bl	ba58 <xTaskPriorityDisinherit>
    ab64:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
    ab66:	68fb      	ldr	r3, [r7, #12]
    ab68:	2200      	movs	r2, #0
    ab6a:	609a      	str	r2, [r3, #8]
    ab6c:	e043      	b.n	abf6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    ab6e:	687b      	ldr	r3, [r7, #4]
    ab70:	2b00      	cmp	r3, #0
    ab72:	d119      	bne.n	aba8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
    ab74:	68fb      	ldr	r3, [r7, #12]
    ab76:	6858      	ldr	r0, [r3, #4]
    ab78:	68fb      	ldr	r3, [r7, #12]
    ab7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    ab7c:	461a      	mov	r2, r3
    ab7e:	68b9      	ldr	r1, [r7, #8]
    ab80:	f001 ff3c 	bl	c9fc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
    ab84:	68fb      	ldr	r3, [r7, #12]
    ab86:	685a      	ldr	r2, [r3, #4]
    ab88:	68fb      	ldr	r3, [r7, #12]
    ab8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    ab8c:	441a      	add	r2, r3
    ab8e:	68fb      	ldr	r3, [r7, #12]
    ab90:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    ab92:	68fb      	ldr	r3, [r7, #12]
    ab94:	685a      	ldr	r2, [r3, #4]
    ab96:	68fb      	ldr	r3, [r7, #12]
    ab98:	689b      	ldr	r3, [r3, #8]
    ab9a:	429a      	cmp	r2, r3
    ab9c:	d32b      	bcc.n	abf6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    ab9e:	68fb      	ldr	r3, [r7, #12]
    aba0:	681a      	ldr	r2, [r3, #0]
    aba2:	68fb      	ldr	r3, [r7, #12]
    aba4:	605a      	str	r2, [r3, #4]
    aba6:	e026      	b.n	abf6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
    aba8:	68fb      	ldr	r3, [r7, #12]
    abaa:	68d8      	ldr	r0, [r3, #12]
    abac:	68fb      	ldr	r3, [r7, #12]
    abae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    abb0:	461a      	mov	r2, r3
    abb2:	68b9      	ldr	r1, [r7, #8]
    abb4:	f001 ff22 	bl	c9fc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
    abb8:	68fb      	ldr	r3, [r7, #12]
    abba:	68da      	ldr	r2, [r3, #12]
    abbc:	68fb      	ldr	r3, [r7, #12]
    abbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    abc0:	425b      	negs	r3, r3
    abc2:	441a      	add	r2, r3
    abc4:	68fb      	ldr	r3, [r7, #12]
    abc6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    abc8:	68fb      	ldr	r3, [r7, #12]
    abca:	68da      	ldr	r2, [r3, #12]
    abcc:	68fb      	ldr	r3, [r7, #12]
    abce:	681b      	ldr	r3, [r3, #0]
    abd0:	429a      	cmp	r2, r3
    abd2:	d207      	bcs.n	abe4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
    abd4:	68fb      	ldr	r3, [r7, #12]
    abd6:	689a      	ldr	r2, [r3, #8]
    abd8:	68fb      	ldr	r3, [r7, #12]
    abda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    abdc:	425b      	negs	r3, r3
    abde:	441a      	add	r2, r3
    abe0:	68fb      	ldr	r3, [r7, #12]
    abe2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    abe4:	687b      	ldr	r3, [r7, #4]
    abe6:	2b02      	cmp	r3, #2
    abe8:	d105      	bne.n	abf6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    abea:	693b      	ldr	r3, [r7, #16]
    abec:	2b00      	cmp	r3, #0
    abee:	d002      	beq.n	abf6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    abf0:	693b      	ldr	r3, [r7, #16]
    abf2:	3b01      	subs	r3, #1
    abf4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    abf6:	693b      	ldr	r3, [r7, #16]
    abf8:	1c5a      	adds	r2, r3, #1
    abfa:	68fb      	ldr	r3, [r7, #12]
    abfc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
    abfe:	697b      	ldr	r3, [r7, #20]
}
    ac00:	4618      	mov	r0, r3
    ac02:	3718      	adds	r7, #24
    ac04:	46bd      	mov	sp, r7
    ac06:	bd80      	pop	{r7, pc}

0000ac08 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    ac08:	b580      	push	{r7, lr}
    ac0a:	b082      	sub	sp, #8
    ac0c:	af00      	add	r7, sp, #0
    ac0e:	6078      	str	r0, [r7, #4]
    ac10:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    ac12:	687b      	ldr	r3, [r7, #4]
    ac14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    ac16:	2b00      	cmp	r3, #0
    ac18:	d018      	beq.n	ac4c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
    ac1a:	687b      	ldr	r3, [r7, #4]
    ac1c:	68da      	ldr	r2, [r3, #12]
    ac1e:	687b      	ldr	r3, [r7, #4]
    ac20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    ac22:	441a      	add	r2, r3
    ac24:	687b      	ldr	r3, [r7, #4]
    ac26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    ac28:	687b      	ldr	r3, [r7, #4]
    ac2a:	68da      	ldr	r2, [r3, #12]
    ac2c:	687b      	ldr	r3, [r7, #4]
    ac2e:	689b      	ldr	r3, [r3, #8]
    ac30:	429a      	cmp	r2, r3
    ac32:	d303      	bcc.n	ac3c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
    ac34:	687b      	ldr	r3, [r7, #4]
    ac36:	681a      	ldr	r2, [r3, #0]
    ac38:	687b      	ldr	r3, [r7, #4]
    ac3a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
    ac3c:	687b      	ldr	r3, [r7, #4]
    ac3e:	68d9      	ldr	r1, [r3, #12]
    ac40:	687b      	ldr	r3, [r7, #4]
    ac42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    ac44:	461a      	mov	r2, r3
    ac46:	6838      	ldr	r0, [r7, #0]
    ac48:	f001 fed8 	bl	c9fc <memcpy>
	}
}
    ac4c:	bf00      	nop
    ac4e:	3708      	adds	r7, #8
    ac50:	46bd      	mov	sp, r7
    ac52:	bd80      	pop	{r7, pc}

0000ac54 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    ac54:	b580      	push	{r7, lr}
    ac56:	b084      	sub	sp, #16
    ac58:	af00      	add	r7, sp, #0
    ac5a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    ac5c:	f001 fc12 	bl	c484 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
    ac60:	687b      	ldr	r3, [r7, #4]
    ac62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    ac66:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    ac68:	e011      	b.n	ac8e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    ac6a:	687b      	ldr	r3, [r7, #4]
    ac6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ac6e:	2b00      	cmp	r3, #0
    ac70:	d012      	beq.n	ac98 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    ac72:	687b      	ldr	r3, [r7, #4]
    ac74:	3324      	adds	r3, #36	; 0x24
    ac76:	4618      	mov	r0, r3
    ac78:	f000 fd1a 	bl	b6b0 <xTaskRemoveFromEventList>
    ac7c:	4603      	mov	r3, r0
    ac7e:	2b00      	cmp	r3, #0
    ac80:	d001      	beq.n	ac86 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
    ac82:	f000 fded 	bl	b860 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    ac86:	7bfb      	ldrb	r3, [r7, #15]
    ac88:	3b01      	subs	r3, #1
    ac8a:	b2db      	uxtb	r3, r3
    ac8c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
    ac8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    ac92:	2b00      	cmp	r3, #0
    ac94:	dce9      	bgt.n	ac6a <prvUnlockQueue+0x16>
    ac96:	e000      	b.n	ac9a <prvUnlockQueue+0x46>
					break;
    ac98:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
    ac9a:	687b      	ldr	r3, [r7, #4]
    ac9c:	22ff      	movs	r2, #255	; 0xff
    ac9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
    aca2:	f001 fc1d 	bl	c4e0 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    aca6:	f001 fbed 	bl	c484 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
    acaa:	687b      	ldr	r3, [r7, #4]
    acac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    acb0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
    acb2:	e011      	b.n	acd8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    acb4:	687b      	ldr	r3, [r7, #4]
    acb6:	691b      	ldr	r3, [r3, #16]
    acb8:	2b00      	cmp	r3, #0
    acba:	d012      	beq.n	ace2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    acbc:	687b      	ldr	r3, [r7, #4]
    acbe:	3310      	adds	r3, #16
    acc0:	4618      	mov	r0, r3
    acc2:	f000 fcf5 	bl	b6b0 <xTaskRemoveFromEventList>
    acc6:	4603      	mov	r3, r0
    acc8:	2b00      	cmp	r3, #0
    acca:	d001      	beq.n	acd0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
    accc:	f000 fdc8 	bl	b860 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    acd0:	7bbb      	ldrb	r3, [r7, #14]
    acd2:	3b01      	subs	r3, #1
    acd4:	b2db      	uxtb	r3, r3
    acd6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
    acd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
    acdc:	2b00      	cmp	r3, #0
    acde:	dce9      	bgt.n	acb4 <prvUnlockQueue+0x60>
    ace0:	e000      	b.n	ace4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
    ace2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    ace4:	687b      	ldr	r3, [r7, #4]
    ace6:	22ff      	movs	r2, #255	; 0xff
    ace8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    acec:	f001 fbf8 	bl	c4e0 <vPortExitCritical>
}
    acf0:	bf00      	nop
    acf2:	3710      	adds	r7, #16
    acf4:	46bd      	mov	sp, r7
    acf6:	bd80      	pop	{r7, pc}

0000acf8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    acf8:	b580      	push	{r7, lr}
    acfa:	b084      	sub	sp, #16
    acfc:	af00      	add	r7, sp, #0
    acfe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    ad00:	f001 fbc0 	bl	c484 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    ad04:	687b      	ldr	r3, [r7, #4]
    ad06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    ad08:	2b00      	cmp	r3, #0
    ad0a:	d102      	bne.n	ad12 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
    ad0c:	2301      	movs	r3, #1
    ad0e:	60fb      	str	r3, [r7, #12]
    ad10:	e001      	b.n	ad16 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
    ad12:	2300      	movs	r3, #0
    ad14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    ad16:	f001 fbe3 	bl	c4e0 <vPortExitCritical>

	return xReturn;
    ad1a:	68fb      	ldr	r3, [r7, #12]
}
    ad1c:	4618      	mov	r0, r3
    ad1e:	3710      	adds	r7, #16
    ad20:	46bd      	mov	sp, r7
    ad22:	bd80      	pop	{r7, pc}

0000ad24 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    ad24:	b580      	push	{r7, lr}
    ad26:	b084      	sub	sp, #16
    ad28:	af00      	add	r7, sp, #0
    ad2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    ad2c:	f001 fbaa 	bl	c484 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    ad30:	687b      	ldr	r3, [r7, #4]
    ad32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    ad34:	687b      	ldr	r3, [r7, #4]
    ad36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    ad38:	429a      	cmp	r2, r3
    ad3a:	d102      	bne.n	ad42 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
    ad3c:	2301      	movs	r3, #1
    ad3e:	60fb      	str	r3, [r7, #12]
    ad40:	e001      	b.n	ad46 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
    ad42:	2300      	movs	r3, #0
    ad44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    ad46:	f001 fbcb 	bl	c4e0 <vPortExitCritical>

	return xReturn;
    ad4a:	68fb      	ldr	r3, [r7, #12]
}
    ad4c:	4618      	mov	r0, r3
    ad4e:	3710      	adds	r7, #16
    ad50:	46bd      	mov	sp, r7
    ad52:	bd80      	pop	{r7, pc}

0000ad54 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    ad54:	b480      	push	{r7}
    ad56:	b085      	sub	sp, #20
    ad58:	af00      	add	r7, sp, #0
    ad5a:	6078      	str	r0, [r7, #4]
    ad5c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    ad5e:	2300      	movs	r3, #0
    ad60:	60fb      	str	r3, [r7, #12]
    ad62:	e014      	b.n	ad8e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
    ad64:	4a0e      	ldr	r2, [pc, #56]	; (ada0 <vQueueAddToRegistry+0x4c>)
    ad66:	68fb      	ldr	r3, [r7, #12]
    ad68:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    ad6c:	2b00      	cmp	r3, #0
    ad6e:	d10b      	bne.n	ad88 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
    ad70:	490b      	ldr	r1, [pc, #44]	; (ada0 <vQueueAddToRegistry+0x4c>)
    ad72:	68fb      	ldr	r3, [r7, #12]
    ad74:	683a      	ldr	r2, [r7, #0]
    ad76:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
    ad7a:	4a09      	ldr	r2, [pc, #36]	; (ada0 <vQueueAddToRegistry+0x4c>)
    ad7c:	68fb      	ldr	r3, [r7, #12]
    ad7e:	00db      	lsls	r3, r3, #3
    ad80:	4413      	add	r3, r2
    ad82:	687a      	ldr	r2, [r7, #4]
    ad84:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
    ad86:	e005      	b.n	ad94 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    ad88:	68fb      	ldr	r3, [r7, #12]
    ad8a:	3301      	adds	r3, #1
    ad8c:	60fb      	str	r3, [r7, #12]
    ad8e:	68fb      	ldr	r3, [r7, #12]
    ad90:	2b07      	cmp	r3, #7
    ad92:	d9e7      	bls.n	ad64 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    ad94:	bf00      	nop
    ad96:	3714      	adds	r7, #20
    ad98:	46bd      	mov	sp, r7
    ad9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad9e:	4770      	bx	lr
    ada0:	00021818 	.word	0x00021818

0000ada4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    ada4:	b580      	push	{r7, lr}
    ada6:	b086      	sub	sp, #24
    ada8:	af00      	add	r7, sp, #0
    adaa:	60f8      	str	r0, [r7, #12]
    adac:	60b9      	str	r1, [r7, #8]
    adae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
    adb0:	68fb      	ldr	r3, [r7, #12]
    adb2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    adb4:	f001 fb66 	bl	c484 <vPortEnterCritical>
    adb8:	697b      	ldr	r3, [r7, #20]
    adba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    adbe:	b25b      	sxtb	r3, r3
    adc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    adc4:	d103      	bne.n	adce <vQueueWaitForMessageRestricted+0x2a>
    adc6:	697b      	ldr	r3, [r7, #20]
    adc8:	2200      	movs	r2, #0
    adca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    adce:	697b      	ldr	r3, [r7, #20]
    add0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    add4:	b25b      	sxtb	r3, r3
    add6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    adda:	d103      	bne.n	ade4 <vQueueWaitForMessageRestricted+0x40>
    addc:	697b      	ldr	r3, [r7, #20]
    adde:	2200      	movs	r2, #0
    ade0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    ade4:	f001 fb7c 	bl	c4e0 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    ade8:	697b      	ldr	r3, [r7, #20]
    adea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    adec:	2b00      	cmp	r3, #0
    adee:	d106      	bne.n	adfe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    adf0:	697b      	ldr	r3, [r7, #20]
    adf2:	3324      	adds	r3, #36	; 0x24
    adf4:	687a      	ldr	r2, [r7, #4]
    adf6:	68b9      	ldr	r1, [r7, #8]
    adf8:	4618      	mov	r0, r3
    adfa:	f000 fc2f 	bl	b65c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    adfe:	6978      	ldr	r0, [r7, #20]
    ae00:	f7ff ff28 	bl	ac54 <prvUnlockQueue>
	}
    ae04:	bf00      	nop
    ae06:	3718      	adds	r7, #24
    ae08:	46bd      	mov	sp, r7
    ae0a:	bd80      	pop	{r7, pc}

0000ae0c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
    ae0c:	b580      	push	{r7, lr}
    ae0e:	b08e      	sub	sp, #56	; 0x38
    ae10:	af04      	add	r7, sp, #16
    ae12:	60f8      	str	r0, [r7, #12]
    ae14:	60b9      	str	r1, [r7, #8]
    ae16:	607a      	str	r2, [r7, #4]
    ae18:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
    ae1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ae1c:	2b00      	cmp	r3, #0
    ae1e:	d109      	bne.n	ae34 <xTaskCreateStatic+0x28>
    ae20:	f04f 0350 	mov.w	r3, #80	; 0x50
    ae24:	f383 8811 	msr	BASEPRI, r3
    ae28:	f3bf 8f6f 	isb	sy
    ae2c:	f3bf 8f4f 	dsb	sy
    ae30:	623b      	str	r3, [r7, #32]
    ae32:	e7fe      	b.n	ae32 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
    ae34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ae36:	2b00      	cmp	r3, #0
    ae38:	d109      	bne.n	ae4e <xTaskCreateStatic+0x42>
    ae3a:	f04f 0350 	mov.w	r3, #80	; 0x50
    ae3e:	f383 8811 	msr	BASEPRI, r3
    ae42:	f3bf 8f6f 	isb	sy
    ae46:	f3bf 8f4f 	dsb	sy
    ae4a:	61fb      	str	r3, [r7, #28]
    ae4c:	e7fe      	b.n	ae4c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
    ae4e:	235c      	movs	r3, #92	; 0x5c
    ae50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
    ae52:	693b      	ldr	r3, [r7, #16]
    ae54:	2b5c      	cmp	r3, #92	; 0x5c
    ae56:	d009      	beq.n	ae6c <xTaskCreateStatic+0x60>
    ae58:	f04f 0350 	mov.w	r3, #80	; 0x50
    ae5c:	f383 8811 	msr	BASEPRI, r3
    ae60:	f3bf 8f6f 	isb	sy
    ae64:	f3bf 8f4f 	dsb	sy
    ae68:	61bb      	str	r3, [r7, #24]
    ae6a:	e7fe      	b.n	ae6a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
    ae6c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
    ae6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ae70:	2b00      	cmp	r3, #0
    ae72:	d01e      	beq.n	aeb2 <xTaskCreateStatic+0xa6>
    ae74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ae76:	2b00      	cmp	r3, #0
    ae78:	d01b      	beq.n	aeb2 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
    ae7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ae7c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
    ae7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ae80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    ae82:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
    ae84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ae86:	2202      	movs	r2, #2
    ae88:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
    ae8c:	2300      	movs	r3, #0
    ae8e:	9303      	str	r3, [sp, #12]
    ae90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ae92:	9302      	str	r3, [sp, #8]
    ae94:	f107 0314 	add.w	r3, r7, #20
    ae98:	9301      	str	r3, [sp, #4]
    ae9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ae9c:	9300      	str	r3, [sp, #0]
    ae9e:	683b      	ldr	r3, [r7, #0]
    aea0:	687a      	ldr	r2, [r7, #4]
    aea2:	68b9      	ldr	r1, [r7, #8]
    aea4:	68f8      	ldr	r0, [r7, #12]
    aea6:	f000 f850 	bl	af4a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
    aeaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
    aeac:	f000 f8dc 	bl	b068 <prvAddNewTaskToReadyList>
    aeb0:	e001      	b.n	aeb6 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
    aeb2:	2300      	movs	r3, #0
    aeb4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
    aeb6:	697b      	ldr	r3, [r7, #20]
	}
    aeb8:	4618      	mov	r0, r3
    aeba:	3728      	adds	r7, #40	; 0x28
    aebc:	46bd      	mov	sp, r7
    aebe:	bd80      	pop	{r7, pc}

0000aec0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
    aec0:	b580      	push	{r7, lr}
    aec2:	b08c      	sub	sp, #48	; 0x30
    aec4:	af04      	add	r7, sp, #16
    aec6:	60f8      	str	r0, [r7, #12]
    aec8:	60b9      	str	r1, [r7, #8]
    aeca:	603b      	str	r3, [r7, #0]
    aecc:	4613      	mov	r3, r2
    aece:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
    aed0:	88fb      	ldrh	r3, [r7, #6]
    aed2:	009b      	lsls	r3, r3, #2
    aed4:	4618      	mov	r0, r3
    aed6:	f001 fb97 	bl	c608 <pvPortMalloc>
    aeda:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
    aedc:	697b      	ldr	r3, [r7, #20]
    aede:	2b00      	cmp	r3, #0
    aee0:	d00e      	beq.n	af00 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
    aee2:	205c      	movs	r0, #92	; 0x5c
    aee4:	f001 fb90 	bl	c608 <pvPortMalloc>
    aee8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
    aeea:	69fb      	ldr	r3, [r7, #28]
    aeec:	2b00      	cmp	r3, #0
    aeee:	d003      	beq.n	aef8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    aef0:	69fb      	ldr	r3, [r7, #28]
    aef2:	697a      	ldr	r2, [r7, #20]
    aef4:	631a      	str	r2, [r3, #48]	; 0x30
    aef6:	e005      	b.n	af04 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    aef8:	6978      	ldr	r0, [r7, #20]
    aefa:	f001 fc47 	bl	c78c <vPortFree>
    aefe:	e001      	b.n	af04 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
    af00:	2300      	movs	r3, #0
    af02:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    af04:	69fb      	ldr	r3, [r7, #28]
    af06:	2b00      	cmp	r3, #0
    af08:	d017      	beq.n	af3a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
    af0a:	69fb      	ldr	r3, [r7, #28]
    af0c:	2200      	movs	r2, #0
    af0e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    af12:	88fa      	ldrh	r2, [r7, #6]
    af14:	2300      	movs	r3, #0
    af16:	9303      	str	r3, [sp, #12]
    af18:	69fb      	ldr	r3, [r7, #28]
    af1a:	9302      	str	r3, [sp, #8]
    af1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    af1e:	9301      	str	r3, [sp, #4]
    af20:	6abb      	ldr	r3, [r7, #40]	; 0x28
    af22:	9300      	str	r3, [sp, #0]
    af24:	683b      	ldr	r3, [r7, #0]
    af26:	68b9      	ldr	r1, [r7, #8]
    af28:	68f8      	ldr	r0, [r7, #12]
    af2a:	f000 f80e 	bl	af4a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
    af2e:	69f8      	ldr	r0, [r7, #28]
    af30:	f000 f89a 	bl	b068 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
    af34:	2301      	movs	r3, #1
    af36:	61bb      	str	r3, [r7, #24]
    af38:	e002      	b.n	af40 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    af3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    af3e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
    af40:	69bb      	ldr	r3, [r7, #24]
	}
    af42:	4618      	mov	r0, r3
    af44:	3720      	adds	r7, #32
    af46:	46bd      	mov	sp, r7
    af48:	bd80      	pop	{r7, pc}

0000af4a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
    af4a:	b580      	push	{r7, lr}
    af4c:	b088      	sub	sp, #32
    af4e:	af00      	add	r7, sp, #0
    af50:	60f8      	str	r0, [r7, #12]
    af52:	60b9      	str	r1, [r7, #8]
    af54:	607a      	str	r2, [r7, #4]
    af56:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    af58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    af5a:	6b18      	ldr	r0, [r3, #48]	; 0x30
    af5c:	687b      	ldr	r3, [r7, #4]
    af5e:	009b      	lsls	r3, r3, #2
    af60:	461a      	mov	r2, r3
    af62:	21a5      	movs	r1, #165	; 0xa5
    af64:	f001 fd55 	bl	ca12 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
    af68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    af6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    af6c:	687b      	ldr	r3, [r7, #4]
    af6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    af72:	3b01      	subs	r3, #1
    af74:	009b      	lsls	r3, r3, #2
    af76:	4413      	add	r3, r2
    af78:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
    af7a:	69bb      	ldr	r3, [r7, #24]
    af7c:	f023 0307 	bic.w	r3, r3, #7
    af80:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
    af82:	69bb      	ldr	r3, [r7, #24]
    af84:	f003 0307 	and.w	r3, r3, #7
    af88:	2b00      	cmp	r3, #0
    af8a:	d009      	beq.n	afa0 <prvInitialiseNewTask+0x56>
    af8c:	f04f 0350 	mov.w	r3, #80	; 0x50
    af90:	f383 8811 	msr	BASEPRI, r3
    af94:	f3bf 8f6f 	isb	sy
    af98:	f3bf 8f4f 	dsb	sy
    af9c:	617b      	str	r3, [r7, #20]
    af9e:	e7fe      	b.n	af9e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
    afa0:	68bb      	ldr	r3, [r7, #8]
    afa2:	2b00      	cmp	r3, #0
    afa4:	d01f      	beq.n	afe6 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    afa6:	2300      	movs	r3, #0
    afa8:	61fb      	str	r3, [r7, #28]
    afaa:	e012      	b.n	afd2 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    afac:	68ba      	ldr	r2, [r7, #8]
    afae:	69fb      	ldr	r3, [r7, #28]
    afb0:	4413      	add	r3, r2
    afb2:	7819      	ldrb	r1, [r3, #0]
    afb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    afb6:	69fb      	ldr	r3, [r7, #28]
    afb8:	4413      	add	r3, r2
    afba:	3334      	adds	r3, #52	; 0x34
    afbc:	460a      	mov	r2, r1
    afbe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
    afc0:	68ba      	ldr	r2, [r7, #8]
    afc2:	69fb      	ldr	r3, [r7, #28]
    afc4:	4413      	add	r3, r2
    afc6:	781b      	ldrb	r3, [r3, #0]
    afc8:	2b00      	cmp	r3, #0
    afca:	d006      	beq.n	afda <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    afcc:	69fb      	ldr	r3, [r7, #28]
    afce:	3301      	adds	r3, #1
    afd0:	61fb      	str	r3, [r7, #28]
    afd2:	69fb      	ldr	r3, [r7, #28]
    afd4:	2b0f      	cmp	r3, #15
    afd6:	d9e9      	bls.n	afac <prvInitialiseNewTask+0x62>
    afd8:	e000      	b.n	afdc <prvInitialiseNewTask+0x92>
			{
				break;
    afda:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    afdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    afde:	2200      	movs	r2, #0
    afe0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    afe4:	e003      	b.n	afee <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
    afe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    afe8:	2200      	movs	r2, #0
    afea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    afee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    aff0:	2b37      	cmp	r3, #55	; 0x37
    aff2:	d901      	bls.n	aff8 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    aff4:	2337      	movs	r3, #55	; 0x37
    aff6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    aff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    affa:	6aba      	ldr	r2, [r7, #40]	; 0x28
    affc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    affe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b000:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b002:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
    b004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b006:	2200      	movs	r2, #0
    b008:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    b00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b00c:	3304      	adds	r3, #4
    b00e:	4618      	mov	r0, r3
    b010:	f7ff f994 	bl	a33c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    b014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b016:	3318      	adds	r3, #24
    b018:	4618      	mov	r0, r3
    b01a:	f7ff f98f 	bl	a33c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    b01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    b022:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    b024:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b026:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
    b02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b02c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    b02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    b032:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    b034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b036:	2200      	movs	r2, #0
    b038:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    b03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b03c:	2200      	movs	r2, #0
    b03e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    b042:	683a      	ldr	r2, [r7, #0]
    b044:	68f9      	ldr	r1, [r7, #12]
    b046:	69b8      	ldr	r0, [r7, #24]
    b048:	f001 f90c 	bl	c264 <pxPortInitialiseStack>
    b04c:	4602      	mov	r2, r0
    b04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b050:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
    b052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b054:	2b00      	cmp	r3, #0
    b056:	d002      	beq.n	b05e <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    b058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b05a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    b05c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    b05e:	bf00      	nop
    b060:	3720      	adds	r7, #32
    b062:	46bd      	mov	sp, r7
    b064:	bd80      	pop	{r7, pc}
	...

0000b068 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    b068:	b580      	push	{r7, lr}
    b06a:	b082      	sub	sp, #8
    b06c:	af00      	add	r7, sp, #0
    b06e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    b070:	f001 fa08 	bl	c484 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
    b074:	4b2d      	ldr	r3, [pc, #180]	; (b12c <prvAddNewTaskToReadyList+0xc4>)
    b076:	681b      	ldr	r3, [r3, #0]
    b078:	3301      	adds	r3, #1
    b07a:	4a2c      	ldr	r2, [pc, #176]	; (b12c <prvAddNewTaskToReadyList+0xc4>)
    b07c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
    b07e:	4b2c      	ldr	r3, [pc, #176]	; (b130 <prvAddNewTaskToReadyList+0xc8>)
    b080:	681b      	ldr	r3, [r3, #0]
    b082:	2b00      	cmp	r3, #0
    b084:	d109      	bne.n	b09a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    b086:	4a2a      	ldr	r2, [pc, #168]	; (b130 <prvAddNewTaskToReadyList+0xc8>)
    b088:	687b      	ldr	r3, [r7, #4]
    b08a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    b08c:	4b27      	ldr	r3, [pc, #156]	; (b12c <prvAddNewTaskToReadyList+0xc4>)
    b08e:	681b      	ldr	r3, [r3, #0]
    b090:	2b01      	cmp	r3, #1
    b092:	d110      	bne.n	b0b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    b094:	f000 fc08 	bl	b8a8 <prvInitialiseTaskLists>
    b098:	e00d      	b.n	b0b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    b09a:	4b26      	ldr	r3, [pc, #152]	; (b134 <prvAddNewTaskToReadyList+0xcc>)
    b09c:	681b      	ldr	r3, [r3, #0]
    b09e:	2b00      	cmp	r3, #0
    b0a0:	d109      	bne.n	b0b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    b0a2:	4b23      	ldr	r3, [pc, #140]	; (b130 <prvAddNewTaskToReadyList+0xc8>)
    b0a4:	681b      	ldr	r3, [r3, #0]
    b0a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b0a8:	687b      	ldr	r3, [r7, #4]
    b0aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b0ac:	429a      	cmp	r2, r3
    b0ae:	d802      	bhi.n	b0b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
    b0b0:	4a1f      	ldr	r2, [pc, #124]	; (b130 <prvAddNewTaskToReadyList+0xc8>)
    b0b2:	687b      	ldr	r3, [r7, #4]
    b0b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    b0b6:	4b20      	ldr	r3, [pc, #128]	; (b138 <prvAddNewTaskToReadyList+0xd0>)
    b0b8:	681b      	ldr	r3, [r3, #0]
    b0ba:	3301      	adds	r3, #1
    b0bc:	4a1e      	ldr	r2, [pc, #120]	; (b138 <prvAddNewTaskToReadyList+0xd0>)
    b0be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    b0c0:	4b1d      	ldr	r3, [pc, #116]	; (b138 <prvAddNewTaskToReadyList+0xd0>)
    b0c2:	681a      	ldr	r2, [r3, #0]
    b0c4:	687b      	ldr	r3, [r7, #4]
    b0c6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    b0c8:	687b      	ldr	r3, [r7, #4]
    b0ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b0cc:	4b1b      	ldr	r3, [pc, #108]	; (b13c <prvAddNewTaskToReadyList+0xd4>)
    b0ce:	681b      	ldr	r3, [r3, #0]
    b0d0:	429a      	cmp	r2, r3
    b0d2:	d903      	bls.n	b0dc <prvAddNewTaskToReadyList+0x74>
    b0d4:	687b      	ldr	r3, [r7, #4]
    b0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b0d8:	4a18      	ldr	r2, [pc, #96]	; (b13c <prvAddNewTaskToReadyList+0xd4>)
    b0da:	6013      	str	r3, [r2, #0]
    b0dc:	687b      	ldr	r3, [r7, #4]
    b0de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b0e0:	4613      	mov	r3, r2
    b0e2:	009b      	lsls	r3, r3, #2
    b0e4:	4413      	add	r3, r2
    b0e6:	009b      	lsls	r3, r3, #2
    b0e8:	4a15      	ldr	r2, [pc, #84]	; (b140 <prvAddNewTaskToReadyList+0xd8>)
    b0ea:	441a      	add	r2, r3
    b0ec:	687b      	ldr	r3, [r7, #4]
    b0ee:	3304      	adds	r3, #4
    b0f0:	4619      	mov	r1, r3
    b0f2:	4610      	mov	r0, r2
    b0f4:	f7ff f92f 	bl	a356 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    b0f8:	f001 f9f2 	bl	c4e0 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
    b0fc:	4b0d      	ldr	r3, [pc, #52]	; (b134 <prvAddNewTaskToReadyList+0xcc>)
    b0fe:	681b      	ldr	r3, [r3, #0]
    b100:	2b00      	cmp	r3, #0
    b102:	d00e      	beq.n	b122 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    b104:	4b0a      	ldr	r3, [pc, #40]	; (b130 <prvAddNewTaskToReadyList+0xc8>)
    b106:	681b      	ldr	r3, [r3, #0]
    b108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b10a:	687b      	ldr	r3, [r7, #4]
    b10c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b10e:	429a      	cmp	r2, r3
    b110:	d207      	bcs.n	b122 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
    b112:	4b0c      	ldr	r3, [pc, #48]	; (b144 <prvAddNewTaskToReadyList+0xdc>)
    b114:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    b118:	601a      	str	r2, [r3, #0]
    b11a:	f3bf 8f4f 	dsb	sy
    b11e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    b122:	bf00      	nop
    b124:	3708      	adds	r7, #8
    b126:	46bd      	mov	sp, r7
    b128:	bd80      	pop	{r7, pc}
    b12a:	bf00      	nop
    b12c:	0001d9c4 	.word	0x0001d9c4
    b130:	0001d4f0 	.word	0x0001d4f0
    b134:	0001d9d0 	.word	0x0001d9d0
    b138:	0001d9e0 	.word	0x0001d9e0
    b13c:	0001d9cc 	.word	0x0001d9cc
    b140:	0001d4f4 	.word	0x0001d4f4
    b144:	e000ed04 	.word	0xe000ed04

0000b148 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    b148:	b580      	push	{r7, lr}
    b14a:	b084      	sub	sp, #16
    b14c:	af00      	add	r7, sp, #0
    b14e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
    b150:	2300      	movs	r3, #0
    b152:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    b154:	687b      	ldr	r3, [r7, #4]
    b156:	2b00      	cmp	r3, #0
    b158:	d016      	beq.n	b188 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
    b15a:	4b13      	ldr	r3, [pc, #76]	; (b1a8 <vTaskDelay+0x60>)
    b15c:	681b      	ldr	r3, [r3, #0]
    b15e:	2b00      	cmp	r3, #0
    b160:	d009      	beq.n	b176 <vTaskDelay+0x2e>
    b162:	f04f 0350 	mov.w	r3, #80	; 0x50
    b166:	f383 8811 	msr	BASEPRI, r3
    b16a:	f3bf 8f6f 	isb	sy
    b16e:	f3bf 8f4f 	dsb	sy
    b172:	60bb      	str	r3, [r7, #8]
    b174:	e7fe      	b.n	b174 <vTaskDelay+0x2c>
			vTaskSuspendAll();
    b176:	f000 f87f 	bl	b278 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    b17a:	2100      	movs	r1, #0
    b17c:	6878      	ldr	r0, [r7, #4]
    b17e:	f000 fcd7 	bl	bb30 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    b182:	f000 f887 	bl	b294 <xTaskResumeAll>
    b186:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    b188:	68fb      	ldr	r3, [r7, #12]
    b18a:	2b00      	cmp	r3, #0
    b18c:	d107      	bne.n	b19e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
    b18e:	4b07      	ldr	r3, [pc, #28]	; (b1ac <vTaskDelay+0x64>)
    b190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    b194:	601a      	str	r2, [r3, #0]
    b196:	f3bf 8f4f 	dsb	sy
    b19a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    b19e:	bf00      	nop
    b1a0:	3710      	adds	r7, #16
    b1a2:	46bd      	mov	sp, r7
    b1a4:	bd80      	pop	{r7, pc}
    b1a6:	bf00      	nop
    b1a8:	0001d9ec 	.word	0x0001d9ec
    b1ac:	e000ed04 	.word	0xe000ed04

0000b1b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    b1b0:	b580      	push	{r7, lr}
    b1b2:	b08a      	sub	sp, #40	; 0x28
    b1b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
    b1b6:	2300      	movs	r3, #0
    b1b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
    b1ba:	2300      	movs	r3, #0
    b1bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
    b1be:	463a      	mov	r2, r7
    b1c0:	1d39      	adds	r1, r7, #4
    b1c2:	f107 0308 	add.w	r3, r7, #8
    b1c6:	4618      	mov	r0, r3
    b1c8:	f7ff f864 	bl	a294 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
    b1cc:	6839      	ldr	r1, [r7, #0]
    b1ce:	687b      	ldr	r3, [r7, #4]
    b1d0:	68ba      	ldr	r2, [r7, #8]
    b1d2:	9202      	str	r2, [sp, #8]
    b1d4:	9301      	str	r3, [sp, #4]
    b1d6:	2300      	movs	r3, #0
    b1d8:	9300      	str	r3, [sp, #0]
    b1da:	2300      	movs	r3, #0
    b1dc:	460a      	mov	r2, r1
    b1de:	4920      	ldr	r1, [pc, #128]	; (b260 <vTaskStartScheduler+0xb0>)
    b1e0:	4820      	ldr	r0, [pc, #128]	; (b264 <vTaskStartScheduler+0xb4>)
    b1e2:	f7ff fe13 	bl	ae0c <xTaskCreateStatic>
    b1e6:	4602      	mov	r2, r0
    b1e8:	4b1f      	ldr	r3, [pc, #124]	; (b268 <vTaskStartScheduler+0xb8>)
    b1ea:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
    b1ec:	4b1e      	ldr	r3, [pc, #120]	; (b268 <vTaskStartScheduler+0xb8>)
    b1ee:	681b      	ldr	r3, [r3, #0]
    b1f0:	2b00      	cmp	r3, #0
    b1f2:	d002      	beq.n	b1fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
    b1f4:	2301      	movs	r3, #1
    b1f6:	617b      	str	r3, [r7, #20]
    b1f8:	e001      	b.n	b1fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
    b1fa:	2300      	movs	r3, #0
    b1fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    b1fe:	697b      	ldr	r3, [r7, #20]
    b200:	2b01      	cmp	r3, #1
    b202:	d102      	bne.n	b20a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
    b204:	f000 fce8 	bl	bbd8 <xTimerCreateTimerTask>
    b208:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    b20a:	697b      	ldr	r3, [r7, #20]
    b20c:	2b01      	cmp	r3, #1
    b20e:	d115      	bne.n	b23c <vTaskStartScheduler+0x8c>
    b210:	f04f 0350 	mov.w	r3, #80	; 0x50
    b214:	f383 8811 	msr	BASEPRI, r3
    b218:	f3bf 8f6f 	isb	sy
    b21c:	f3bf 8f4f 	dsb	sy
    b220:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    b222:	4b12      	ldr	r3, [pc, #72]	; (b26c <vTaskStartScheduler+0xbc>)
    b224:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b228:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    b22a:	4b11      	ldr	r3, [pc, #68]	; (b270 <vTaskStartScheduler+0xc0>)
    b22c:	2201      	movs	r2, #1
    b22e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
    b230:	4b10      	ldr	r3, [pc, #64]	; (b274 <vTaskStartScheduler+0xc4>)
    b232:	2200      	movs	r2, #0
    b234:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    b236:	f001 f887 	bl	c348 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    b23a:	e00d      	b.n	b258 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    b23c:	697b      	ldr	r3, [r7, #20]
    b23e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    b242:	d109      	bne.n	b258 <vTaskStartScheduler+0xa8>
    b244:	f04f 0350 	mov.w	r3, #80	; 0x50
    b248:	f383 8811 	msr	BASEPRI, r3
    b24c:	f3bf 8f6f 	isb	sy
    b250:	f3bf 8f4f 	dsb	sy
    b254:	60fb      	str	r3, [r7, #12]
    b256:	e7fe      	b.n	b256 <vTaskStartScheduler+0xa6>
}
    b258:	bf00      	nop
    b25a:	3718      	adds	r7, #24
    b25c:	46bd      	mov	sp, r7
    b25e:	bd80      	pop	{r7, pc}
    b260:	0000cd7c 	.word	0x0000cd7c
    b264:	0000b879 	.word	0x0000b879
    b268:	0001d9e8 	.word	0x0001d9e8
    b26c:	0001d9e4 	.word	0x0001d9e4
    b270:	0001d9d0 	.word	0x0001d9d0
    b274:	0001d9c8 	.word	0x0001d9c8

0000b278 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    b278:	b480      	push	{r7}
    b27a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    b27c:	4b04      	ldr	r3, [pc, #16]	; (b290 <vTaskSuspendAll+0x18>)
    b27e:	681b      	ldr	r3, [r3, #0]
    b280:	3301      	adds	r3, #1
    b282:	4a03      	ldr	r2, [pc, #12]	; (b290 <vTaskSuspendAll+0x18>)
    b284:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
    b286:	bf00      	nop
    b288:	46bd      	mov	sp, r7
    b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b28e:	4770      	bx	lr
    b290:	0001d9ec 	.word	0x0001d9ec

0000b294 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    b294:	b580      	push	{r7, lr}
    b296:	b084      	sub	sp, #16
    b298:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
    b29a:	2300      	movs	r3, #0
    b29c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
    b29e:	2300      	movs	r3, #0
    b2a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    b2a2:	4b41      	ldr	r3, [pc, #260]	; (b3a8 <xTaskResumeAll+0x114>)
    b2a4:	681b      	ldr	r3, [r3, #0]
    b2a6:	2b00      	cmp	r3, #0
    b2a8:	d109      	bne.n	b2be <xTaskResumeAll+0x2a>
    b2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
    b2ae:	f383 8811 	msr	BASEPRI, r3
    b2b2:	f3bf 8f6f 	isb	sy
    b2b6:	f3bf 8f4f 	dsb	sy
    b2ba:	603b      	str	r3, [r7, #0]
    b2bc:	e7fe      	b.n	b2bc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    b2be:	f001 f8e1 	bl	c484 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    b2c2:	4b39      	ldr	r3, [pc, #228]	; (b3a8 <xTaskResumeAll+0x114>)
    b2c4:	681b      	ldr	r3, [r3, #0]
    b2c6:	3b01      	subs	r3, #1
    b2c8:	4a37      	ldr	r2, [pc, #220]	; (b3a8 <xTaskResumeAll+0x114>)
    b2ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    b2cc:	4b36      	ldr	r3, [pc, #216]	; (b3a8 <xTaskResumeAll+0x114>)
    b2ce:	681b      	ldr	r3, [r3, #0]
    b2d0:	2b00      	cmp	r3, #0
    b2d2:	d162      	bne.n	b39a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    b2d4:	4b35      	ldr	r3, [pc, #212]	; (b3ac <xTaskResumeAll+0x118>)
    b2d6:	681b      	ldr	r3, [r3, #0]
    b2d8:	2b00      	cmp	r3, #0
    b2da:	d05e      	beq.n	b39a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    b2dc:	e02f      	b.n	b33e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    b2de:	4b34      	ldr	r3, [pc, #208]	; (b3b0 <xTaskResumeAll+0x11c>)
    b2e0:	68db      	ldr	r3, [r3, #12]
    b2e2:	68db      	ldr	r3, [r3, #12]
    b2e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    b2e6:	68fb      	ldr	r3, [r7, #12]
    b2e8:	3318      	adds	r3, #24
    b2ea:	4618      	mov	r0, r3
    b2ec:	f7ff f890 	bl	a410 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    b2f0:	68fb      	ldr	r3, [r7, #12]
    b2f2:	3304      	adds	r3, #4
    b2f4:	4618      	mov	r0, r3
    b2f6:	f7ff f88b 	bl	a410 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    b2fa:	68fb      	ldr	r3, [r7, #12]
    b2fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b2fe:	4b2d      	ldr	r3, [pc, #180]	; (b3b4 <xTaskResumeAll+0x120>)
    b300:	681b      	ldr	r3, [r3, #0]
    b302:	429a      	cmp	r2, r3
    b304:	d903      	bls.n	b30e <xTaskResumeAll+0x7a>
    b306:	68fb      	ldr	r3, [r7, #12]
    b308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b30a:	4a2a      	ldr	r2, [pc, #168]	; (b3b4 <xTaskResumeAll+0x120>)
    b30c:	6013      	str	r3, [r2, #0]
    b30e:	68fb      	ldr	r3, [r7, #12]
    b310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b312:	4613      	mov	r3, r2
    b314:	009b      	lsls	r3, r3, #2
    b316:	4413      	add	r3, r2
    b318:	009b      	lsls	r3, r3, #2
    b31a:	4a27      	ldr	r2, [pc, #156]	; (b3b8 <xTaskResumeAll+0x124>)
    b31c:	441a      	add	r2, r3
    b31e:	68fb      	ldr	r3, [r7, #12]
    b320:	3304      	adds	r3, #4
    b322:	4619      	mov	r1, r3
    b324:	4610      	mov	r0, r2
    b326:	f7ff f816 	bl	a356 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    b32a:	68fb      	ldr	r3, [r7, #12]
    b32c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b32e:	4b23      	ldr	r3, [pc, #140]	; (b3bc <xTaskResumeAll+0x128>)
    b330:	681b      	ldr	r3, [r3, #0]
    b332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b334:	429a      	cmp	r2, r3
    b336:	d302      	bcc.n	b33e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
    b338:	4b21      	ldr	r3, [pc, #132]	; (b3c0 <xTaskResumeAll+0x12c>)
    b33a:	2201      	movs	r2, #1
    b33c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    b33e:	4b1c      	ldr	r3, [pc, #112]	; (b3b0 <xTaskResumeAll+0x11c>)
    b340:	681b      	ldr	r3, [r3, #0]
    b342:	2b00      	cmp	r3, #0
    b344:	d1cb      	bne.n	b2de <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    b346:	68fb      	ldr	r3, [r7, #12]
    b348:	2b00      	cmp	r3, #0
    b34a:	d001      	beq.n	b350 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    b34c:	f000 fb46 	bl	b9dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    b350:	4b1c      	ldr	r3, [pc, #112]	; (b3c4 <xTaskResumeAll+0x130>)
    b352:	681b      	ldr	r3, [r3, #0]
    b354:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    b356:	687b      	ldr	r3, [r7, #4]
    b358:	2b00      	cmp	r3, #0
    b35a:	d010      	beq.n	b37e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    b35c:	f000 f846 	bl	b3ec <xTaskIncrementTick>
    b360:	4603      	mov	r3, r0
    b362:	2b00      	cmp	r3, #0
    b364:	d002      	beq.n	b36c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
    b366:	4b16      	ldr	r3, [pc, #88]	; (b3c0 <xTaskResumeAll+0x12c>)
    b368:	2201      	movs	r2, #1
    b36a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    b36c:	687b      	ldr	r3, [r7, #4]
    b36e:	3b01      	subs	r3, #1
    b370:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    b372:	687b      	ldr	r3, [r7, #4]
    b374:	2b00      	cmp	r3, #0
    b376:	d1f1      	bne.n	b35c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
    b378:	4b12      	ldr	r3, [pc, #72]	; (b3c4 <xTaskResumeAll+0x130>)
    b37a:	2200      	movs	r2, #0
    b37c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    b37e:	4b10      	ldr	r3, [pc, #64]	; (b3c0 <xTaskResumeAll+0x12c>)
    b380:	681b      	ldr	r3, [r3, #0]
    b382:	2b00      	cmp	r3, #0
    b384:	d009      	beq.n	b39a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    b386:	2301      	movs	r3, #1
    b388:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    b38a:	4b0f      	ldr	r3, [pc, #60]	; (b3c8 <xTaskResumeAll+0x134>)
    b38c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    b390:	601a      	str	r2, [r3, #0]
    b392:	f3bf 8f4f 	dsb	sy
    b396:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    b39a:	f001 f8a1 	bl	c4e0 <vPortExitCritical>

	return xAlreadyYielded;
    b39e:	68bb      	ldr	r3, [r7, #8]
}
    b3a0:	4618      	mov	r0, r3
    b3a2:	3710      	adds	r7, #16
    b3a4:	46bd      	mov	sp, r7
    b3a6:	bd80      	pop	{r7, pc}
    b3a8:	0001d9ec 	.word	0x0001d9ec
    b3ac:	0001d9c4 	.word	0x0001d9c4
    b3b0:	0001d984 	.word	0x0001d984
    b3b4:	0001d9cc 	.word	0x0001d9cc
    b3b8:	0001d4f4 	.word	0x0001d4f4
    b3bc:	0001d4f0 	.word	0x0001d4f0
    b3c0:	0001d9d8 	.word	0x0001d9d8
    b3c4:	0001d9d4 	.word	0x0001d9d4
    b3c8:	e000ed04 	.word	0xe000ed04

0000b3cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    b3cc:	b480      	push	{r7}
    b3ce:	b083      	sub	sp, #12
    b3d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    b3d2:	4b05      	ldr	r3, [pc, #20]	; (b3e8 <xTaskGetTickCount+0x1c>)
    b3d4:	681b      	ldr	r3, [r3, #0]
    b3d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
    b3d8:	687b      	ldr	r3, [r7, #4]
}
    b3da:	4618      	mov	r0, r3
    b3dc:	370c      	adds	r7, #12
    b3de:	46bd      	mov	sp, r7
    b3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    b3e4:	4770      	bx	lr
    b3e6:	bf00      	nop
    b3e8:	0001d9c8 	.word	0x0001d9c8

0000b3ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    b3ec:	b580      	push	{r7, lr}
    b3ee:	b086      	sub	sp, #24
    b3f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    b3f2:	2300      	movs	r3, #0
    b3f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    b3f6:	4b4e      	ldr	r3, [pc, #312]	; (b530 <xTaskIncrementTick+0x144>)
    b3f8:	681b      	ldr	r3, [r3, #0]
    b3fa:	2b00      	cmp	r3, #0
    b3fc:	f040 8088 	bne.w	b510 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    b400:	4b4c      	ldr	r3, [pc, #304]	; (b534 <xTaskIncrementTick+0x148>)
    b402:	681b      	ldr	r3, [r3, #0]
    b404:	3301      	adds	r3, #1
    b406:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    b408:	4a4a      	ldr	r2, [pc, #296]	; (b534 <xTaskIncrementTick+0x148>)
    b40a:	693b      	ldr	r3, [r7, #16]
    b40c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    b40e:	693b      	ldr	r3, [r7, #16]
    b410:	2b00      	cmp	r3, #0
    b412:	d11f      	bne.n	b454 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
    b414:	4b48      	ldr	r3, [pc, #288]	; (b538 <xTaskIncrementTick+0x14c>)
    b416:	681b      	ldr	r3, [r3, #0]
    b418:	681b      	ldr	r3, [r3, #0]
    b41a:	2b00      	cmp	r3, #0
    b41c:	d009      	beq.n	b432 <xTaskIncrementTick+0x46>
    b41e:	f04f 0350 	mov.w	r3, #80	; 0x50
    b422:	f383 8811 	msr	BASEPRI, r3
    b426:	f3bf 8f6f 	isb	sy
    b42a:	f3bf 8f4f 	dsb	sy
    b42e:	603b      	str	r3, [r7, #0]
    b430:	e7fe      	b.n	b430 <xTaskIncrementTick+0x44>
    b432:	4b41      	ldr	r3, [pc, #260]	; (b538 <xTaskIncrementTick+0x14c>)
    b434:	681b      	ldr	r3, [r3, #0]
    b436:	60fb      	str	r3, [r7, #12]
    b438:	4b40      	ldr	r3, [pc, #256]	; (b53c <xTaskIncrementTick+0x150>)
    b43a:	681b      	ldr	r3, [r3, #0]
    b43c:	4a3e      	ldr	r2, [pc, #248]	; (b538 <xTaskIncrementTick+0x14c>)
    b43e:	6013      	str	r3, [r2, #0]
    b440:	4a3e      	ldr	r2, [pc, #248]	; (b53c <xTaskIncrementTick+0x150>)
    b442:	68fb      	ldr	r3, [r7, #12]
    b444:	6013      	str	r3, [r2, #0]
    b446:	4b3e      	ldr	r3, [pc, #248]	; (b540 <xTaskIncrementTick+0x154>)
    b448:	681b      	ldr	r3, [r3, #0]
    b44a:	3301      	adds	r3, #1
    b44c:	4a3c      	ldr	r2, [pc, #240]	; (b540 <xTaskIncrementTick+0x154>)
    b44e:	6013      	str	r3, [r2, #0]
    b450:	f000 fac4 	bl	b9dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    b454:	4b3b      	ldr	r3, [pc, #236]	; (b544 <xTaskIncrementTick+0x158>)
    b456:	681b      	ldr	r3, [r3, #0]
    b458:	693a      	ldr	r2, [r7, #16]
    b45a:	429a      	cmp	r2, r3
    b45c:	d349      	bcc.n	b4f2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    b45e:	4b36      	ldr	r3, [pc, #216]	; (b538 <xTaskIncrementTick+0x14c>)
    b460:	681b      	ldr	r3, [r3, #0]
    b462:	681b      	ldr	r3, [r3, #0]
    b464:	2b00      	cmp	r3, #0
    b466:	d104      	bne.n	b472 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    b468:	4b36      	ldr	r3, [pc, #216]	; (b544 <xTaskIncrementTick+0x158>)
    b46a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b46e:	601a      	str	r2, [r3, #0]
					break;
    b470:	e03f      	b.n	b4f2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    b472:	4b31      	ldr	r3, [pc, #196]	; (b538 <xTaskIncrementTick+0x14c>)
    b474:	681b      	ldr	r3, [r3, #0]
    b476:	68db      	ldr	r3, [r3, #12]
    b478:	68db      	ldr	r3, [r3, #12]
    b47a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    b47c:	68bb      	ldr	r3, [r7, #8]
    b47e:	685b      	ldr	r3, [r3, #4]
    b480:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
    b482:	693a      	ldr	r2, [r7, #16]
    b484:	687b      	ldr	r3, [r7, #4]
    b486:	429a      	cmp	r2, r3
    b488:	d203      	bcs.n	b492 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    b48a:	4a2e      	ldr	r2, [pc, #184]	; (b544 <xTaskIncrementTick+0x158>)
    b48c:	687b      	ldr	r3, [r7, #4]
    b48e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
    b490:	e02f      	b.n	b4f2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    b492:	68bb      	ldr	r3, [r7, #8]
    b494:	3304      	adds	r3, #4
    b496:	4618      	mov	r0, r3
    b498:	f7fe ffba 	bl	a410 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    b49c:	68bb      	ldr	r3, [r7, #8]
    b49e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b4a0:	2b00      	cmp	r3, #0
    b4a2:	d004      	beq.n	b4ae <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    b4a4:	68bb      	ldr	r3, [r7, #8]
    b4a6:	3318      	adds	r3, #24
    b4a8:	4618      	mov	r0, r3
    b4aa:	f7fe ffb1 	bl	a410 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    b4ae:	68bb      	ldr	r3, [r7, #8]
    b4b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b4b2:	4b25      	ldr	r3, [pc, #148]	; (b548 <xTaskIncrementTick+0x15c>)
    b4b4:	681b      	ldr	r3, [r3, #0]
    b4b6:	429a      	cmp	r2, r3
    b4b8:	d903      	bls.n	b4c2 <xTaskIncrementTick+0xd6>
    b4ba:	68bb      	ldr	r3, [r7, #8]
    b4bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b4be:	4a22      	ldr	r2, [pc, #136]	; (b548 <xTaskIncrementTick+0x15c>)
    b4c0:	6013      	str	r3, [r2, #0]
    b4c2:	68bb      	ldr	r3, [r7, #8]
    b4c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b4c6:	4613      	mov	r3, r2
    b4c8:	009b      	lsls	r3, r3, #2
    b4ca:	4413      	add	r3, r2
    b4cc:	009b      	lsls	r3, r3, #2
    b4ce:	4a1f      	ldr	r2, [pc, #124]	; (b54c <xTaskIncrementTick+0x160>)
    b4d0:	441a      	add	r2, r3
    b4d2:	68bb      	ldr	r3, [r7, #8]
    b4d4:	3304      	adds	r3, #4
    b4d6:	4619      	mov	r1, r3
    b4d8:	4610      	mov	r0, r2
    b4da:	f7fe ff3c 	bl	a356 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    b4de:	68bb      	ldr	r3, [r7, #8]
    b4e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b4e2:	4b1b      	ldr	r3, [pc, #108]	; (b550 <xTaskIncrementTick+0x164>)
    b4e4:	681b      	ldr	r3, [r3, #0]
    b4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b4e8:	429a      	cmp	r2, r3
    b4ea:	d3b8      	bcc.n	b45e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
    b4ec:	2301      	movs	r3, #1
    b4ee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    b4f0:	e7b5      	b.n	b45e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    b4f2:	4b17      	ldr	r3, [pc, #92]	; (b550 <xTaskIncrementTick+0x164>)
    b4f4:	681b      	ldr	r3, [r3, #0]
    b4f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b4f8:	4914      	ldr	r1, [pc, #80]	; (b54c <xTaskIncrementTick+0x160>)
    b4fa:	4613      	mov	r3, r2
    b4fc:	009b      	lsls	r3, r3, #2
    b4fe:	4413      	add	r3, r2
    b500:	009b      	lsls	r3, r3, #2
    b502:	440b      	add	r3, r1
    b504:	681b      	ldr	r3, [r3, #0]
    b506:	2b01      	cmp	r3, #1
    b508:	d907      	bls.n	b51a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
    b50a:	2301      	movs	r3, #1
    b50c:	617b      	str	r3, [r7, #20]
    b50e:	e004      	b.n	b51a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    b510:	4b10      	ldr	r3, [pc, #64]	; (b554 <xTaskIncrementTick+0x168>)
    b512:	681b      	ldr	r3, [r3, #0]
    b514:	3301      	adds	r3, #1
    b516:	4a0f      	ldr	r2, [pc, #60]	; (b554 <xTaskIncrementTick+0x168>)
    b518:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    b51a:	4b0f      	ldr	r3, [pc, #60]	; (b558 <xTaskIncrementTick+0x16c>)
    b51c:	681b      	ldr	r3, [r3, #0]
    b51e:	2b00      	cmp	r3, #0
    b520:	d001      	beq.n	b526 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
    b522:	2301      	movs	r3, #1
    b524:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    b526:	697b      	ldr	r3, [r7, #20]
}
    b528:	4618      	mov	r0, r3
    b52a:	3718      	adds	r7, #24
    b52c:	46bd      	mov	sp, r7
    b52e:	bd80      	pop	{r7, pc}
    b530:	0001d9ec 	.word	0x0001d9ec
    b534:	0001d9c8 	.word	0x0001d9c8
    b538:	0001d97c 	.word	0x0001d97c
    b53c:	0001d980 	.word	0x0001d980
    b540:	0001d9dc 	.word	0x0001d9dc
    b544:	0001d9e4 	.word	0x0001d9e4
    b548:	0001d9cc 	.word	0x0001d9cc
    b54c:	0001d4f4 	.word	0x0001d4f4
    b550:	0001d4f0 	.word	0x0001d4f0
    b554:	0001d9d4 	.word	0x0001d9d4
    b558:	0001d9d8 	.word	0x0001d9d8

0000b55c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    b55c:	b480      	push	{r7}
    b55e:	b085      	sub	sp, #20
    b560:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    b562:	4b27      	ldr	r3, [pc, #156]	; (b600 <vTaskSwitchContext+0xa4>)
    b564:	681b      	ldr	r3, [r3, #0]
    b566:	2b00      	cmp	r3, #0
    b568:	d003      	beq.n	b572 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    b56a:	4b26      	ldr	r3, [pc, #152]	; (b604 <vTaskSwitchContext+0xa8>)
    b56c:	2201      	movs	r2, #1
    b56e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    b570:	e040      	b.n	b5f4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
    b572:	4b24      	ldr	r3, [pc, #144]	; (b604 <vTaskSwitchContext+0xa8>)
    b574:	2200      	movs	r2, #0
    b576:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    b578:	4b23      	ldr	r3, [pc, #140]	; (b608 <vTaskSwitchContext+0xac>)
    b57a:	681b      	ldr	r3, [r3, #0]
    b57c:	60fb      	str	r3, [r7, #12]
    b57e:	e00f      	b.n	b5a0 <vTaskSwitchContext+0x44>
    b580:	68fb      	ldr	r3, [r7, #12]
    b582:	2b00      	cmp	r3, #0
    b584:	d109      	bne.n	b59a <vTaskSwitchContext+0x3e>
    b586:	f04f 0350 	mov.w	r3, #80	; 0x50
    b58a:	f383 8811 	msr	BASEPRI, r3
    b58e:	f3bf 8f6f 	isb	sy
    b592:	f3bf 8f4f 	dsb	sy
    b596:	607b      	str	r3, [r7, #4]
    b598:	e7fe      	b.n	b598 <vTaskSwitchContext+0x3c>
    b59a:	68fb      	ldr	r3, [r7, #12]
    b59c:	3b01      	subs	r3, #1
    b59e:	60fb      	str	r3, [r7, #12]
    b5a0:	491a      	ldr	r1, [pc, #104]	; (b60c <vTaskSwitchContext+0xb0>)
    b5a2:	68fa      	ldr	r2, [r7, #12]
    b5a4:	4613      	mov	r3, r2
    b5a6:	009b      	lsls	r3, r3, #2
    b5a8:	4413      	add	r3, r2
    b5aa:	009b      	lsls	r3, r3, #2
    b5ac:	440b      	add	r3, r1
    b5ae:	681b      	ldr	r3, [r3, #0]
    b5b0:	2b00      	cmp	r3, #0
    b5b2:	d0e5      	beq.n	b580 <vTaskSwitchContext+0x24>
    b5b4:	68fa      	ldr	r2, [r7, #12]
    b5b6:	4613      	mov	r3, r2
    b5b8:	009b      	lsls	r3, r3, #2
    b5ba:	4413      	add	r3, r2
    b5bc:	009b      	lsls	r3, r3, #2
    b5be:	4a13      	ldr	r2, [pc, #76]	; (b60c <vTaskSwitchContext+0xb0>)
    b5c0:	4413      	add	r3, r2
    b5c2:	60bb      	str	r3, [r7, #8]
    b5c4:	68bb      	ldr	r3, [r7, #8]
    b5c6:	685b      	ldr	r3, [r3, #4]
    b5c8:	685a      	ldr	r2, [r3, #4]
    b5ca:	68bb      	ldr	r3, [r7, #8]
    b5cc:	605a      	str	r2, [r3, #4]
    b5ce:	68bb      	ldr	r3, [r7, #8]
    b5d0:	685a      	ldr	r2, [r3, #4]
    b5d2:	68bb      	ldr	r3, [r7, #8]
    b5d4:	3308      	adds	r3, #8
    b5d6:	429a      	cmp	r2, r3
    b5d8:	d104      	bne.n	b5e4 <vTaskSwitchContext+0x88>
    b5da:	68bb      	ldr	r3, [r7, #8]
    b5dc:	685b      	ldr	r3, [r3, #4]
    b5de:	685a      	ldr	r2, [r3, #4]
    b5e0:	68bb      	ldr	r3, [r7, #8]
    b5e2:	605a      	str	r2, [r3, #4]
    b5e4:	68bb      	ldr	r3, [r7, #8]
    b5e6:	685b      	ldr	r3, [r3, #4]
    b5e8:	68db      	ldr	r3, [r3, #12]
    b5ea:	4a09      	ldr	r2, [pc, #36]	; (b610 <vTaskSwitchContext+0xb4>)
    b5ec:	6013      	str	r3, [r2, #0]
    b5ee:	4a06      	ldr	r2, [pc, #24]	; (b608 <vTaskSwitchContext+0xac>)
    b5f0:	68fb      	ldr	r3, [r7, #12]
    b5f2:	6013      	str	r3, [r2, #0]
}
    b5f4:	bf00      	nop
    b5f6:	3714      	adds	r7, #20
    b5f8:	46bd      	mov	sp, r7
    b5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    b5fe:	4770      	bx	lr
    b600:	0001d9ec 	.word	0x0001d9ec
    b604:	0001d9d8 	.word	0x0001d9d8
    b608:	0001d9cc 	.word	0x0001d9cc
    b60c:	0001d4f4 	.word	0x0001d4f4
    b610:	0001d4f0 	.word	0x0001d4f0

0000b614 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    b614:	b580      	push	{r7, lr}
    b616:	b084      	sub	sp, #16
    b618:	af00      	add	r7, sp, #0
    b61a:	6078      	str	r0, [r7, #4]
    b61c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
    b61e:	687b      	ldr	r3, [r7, #4]
    b620:	2b00      	cmp	r3, #0
    b622:	d109      	bne.n	b638 <vTaskPlaceOnEventList+0x24>
    b624:	f04f 0350 	mov.w	r3, #80	; 0x50
    b628:	f383 8811 	msr	BASEPRI, r3
    b62c:	f3bf 8f6f 	isb	sy
    b630:	f3bf 8f4f 	dsb	sy
    b634:	60fb      	str	r3, [r7, #12]
    b636:	e7fe      	b.n	b636 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    b638:	4b07      	ldr	r3, [pc, #28]	; (b658 <vTaskPlaceOnEventList+0x44>)
    b63a:	681b      	ldr	r3, [r3, #0]
    b63c:	3318      	adds	r3, #24
    b63e:	4619      	mov	r1, r3
    b640:	6878      	ldr	r0, [r7, #4]
    b642:	f7fe feac 	bl	a39e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    b646:	2101      	movs	r1, #1
    b648:	6838      	ldr	r0, [r7, #0]
    b64a:	f000 fa71 	bl	bb30 <prvAddCurrentTaskToDelayedList>
}
    b64e:	bf00      	nop
    b650:	3710      	adds	r7, #16
    b652:	46bd      	mov	sp, r7
    b654:	bd80      	pop	{r7, pc}
    b656:	bf00      	nop
    b658:	0001d4f0 	.word	0x0001d4f0

0000b65c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    b65c:	b580      	push	{r7, lr}
    b65e:	b086      	sub	sp, #24
    b660:	af00      	add	r7, sp, #0
    b662:	60f8      	str	r0, [r7, #12]
    b664:	60b9      	str	r1, [r7, #8]
    b666:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
    b668:	68fb      	ldr	r3, [r7, #12]
    b66a:	2b00      	cmp	r3, #0
    b66c:	d109      	bne.n	b682 <vTaskPlaceOnEventListRestricted+0x26>
    b66e:	f04f 0350 	mov.w	r3, #80	; 0x50
    b672:	f383 8811 	msr	BASEPRI, r3
    b676:	f3bf 8f6f 	isb	sy
    b67a:	f3bf 8f4f 	dsb	sy
    b67e:	617b      	str	r3, [r7, #20]
    b680:	e7fe      	b.n	b680 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    b682:	4b0a      	ldr	r3, [pc, #40]	; (b6ac <vTaskPlaceOnEventListRestricted+0x50>)
    b684:	681b      	ldr	r3, [r3, #0]
    b686:	3318      	adds	r3, #24
    b688:	4619      	mov	r1, r3
    b68a:	68f8      	ldr	r0, [r7, #12]
    b68c:	f7fe fe63 	bl	a356 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
    b690:	687b      	ldr	r3, [r7, #4]
    b692:	2b00      	cmp	r3, #0
    b694:	d002      	beq.n	b69c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
    b696:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b69a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    b69c:	6879      	ldr	r1, [r7, #4]
    b69e:	68b8      	ldr	r0, [r7, #8]
    b6a0:	f000 fa46 	bl	bb30 <prvAddCurrentTaskToDelayedList>
	}
    b6a4:	bf00      	nop
    b6a6:	3718      	adds	r7, #24
    b6a8:	46bd      	mov	sp, r7
    b6aa:	bd80      	pop	{r7, pc}
    b6ac:	0001d4f0 	.word	0x0001d4f0

0000b6b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    b6b0:	b580      	push	{r7, lr}
    b6b2:	b086      	sub	sp, #24
    b6b4:	af00      	add	r7, sp, #0
    b6b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    b6b8:	687b      	ldr	r3, [r7, #4]
    b6ba:	68db      	ldr	r3, [r3, #12]
    b6bc:	68db      	ldr	r3, [r3, #12]
    b6be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
    b6c0:	693b      	ldr	r3, [r7, #16]
    b6c2:	2b00      	cmp	r3, #0
    b6c4:	d109      	bne.n	b6da <xTaskRemoveFromEventList+0x2a>
    b6c6:	f04f 0350 	mov.w	r3, #80	; 0x50
    b6ca:	f383 8811 	msr	BASEPRI, r3
    b6ce:	f3bf 8f6f 	isb	sy
    b6d2:	f3bf 8f4f 	dsb	sy
    b6d6:	60fb      	str	r3, [r7, #12]
    b6d8:	e7fe      	b.n	b6d8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    b6da:	693b      	ldr	r3, [r7, #16]
    b6dc:	3318      	adds	r3, #24
    b6de:	4618      	mov	r0, r3
    b6e0:	f7fe fe96 	bl	a410 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    b6e4:	4b1d      	ldr	r3, [pc, #116]	; (b75c <xTaskRemoveFromEventList+0xac>)
    b6e6:	681b      	ldr	r3, [r3, #0]
    b6e8:	2b00      	cmp	r3, #0
    b6ea:	d11d      	bne.n	b728 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    b6ec:	693b      	ldr	r3, [r7, #16]
    b6ee:	3304      	adds	r3, #4
    b6f0:	4618      	mov	r0, r3
    b6f2:	f7fe fe8d 	bl	a410 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    b6f6:	693b      	ldr	r3, [r7, #16]
    b6f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b6fa:	4b19      	ldr	r3, [pc, #100]	; (b760 <xTaskRemoveFromEventList+0xb0>)
    b6fc:	681b      	ldr	r3, [r3, #0]
    b6fe:	429a      	cmp	r2, r3
    b700:	d903      	bls.n	b70a <xTaskRemoveFromEventList+0x5a>
    b702:	693b      	ldr	r3, [r7, #16]
    b704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b706:	4a16      	ldr	r2, [pc, #88]	; (b760 <xTaskRemoveFromEventList+0xb0>)
    b708:	6013      	str	r3, [r2, #0]
    b70a:	693b      	ldr	r3, [r7, #16]
    b70c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b70e:	4613      	mov	r3, r2
    b710:	009b      	lsls	r3, r3, #2
    b712:	4413      	add	r3, r2
    b714:	009b      	lsls	r3, r3, #2
    b716:	4a13      	ldr	r2, [pc, #76]	; (b764 <xTaskRemoveFromEventList+0xb4>)
    b718:	441a      	add	r2, r3
    b71a:	693b      	ldr	r3, [r7, #16]
    b71c:	3304      	adds	r3, #4
    b71e:	4619      	mov	r1, r3
    b720:	4610      	mov	r0, r2
    b722:	f7fe fe18 	bl	a356 <vListInsertEnd>
    b726:	e005      	b.n	b734 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    b728:	693b      	ldr	r3, [r7, #16]
    b72a:	3318      	adds	r3, #24
    b72c:	4619      	mov	r1, r3
    b72e:	480e      	ldr	r0, [pc, #56]	; (b768 <xTaskRemoveFromEventList+0xb8>)
    b730:	f7fe fe11 	bl	a356 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    b734:	693b      	ldr	r3, [r7, #16]
    b736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b738:	4b0c      	ldr	r3, [pc, #48]	; (b76c <xTaskRemoveFromEventList+0xbc>)
    b73a:	681b      	ldr	r3, [r3, #0]
    b73c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b73e:	429a      	cmp	r2, r3
    b740:	d905      	bls.n	b74e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    b742:	2301      	movs	r3, #1
    b744:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    b746:	4b0a      	ldr	r3, [pc, #40]	; (b770 <xTaskRemoveFromEventList+0xc0>)
    b748:	2201      	movs	r2, #1
    b74a:	601a      	str	r2, [r3, #0]
    b74c:	e001      	b.n	b752 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
    b74e:	2300      	movs	r3, #0
    b750:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
    b752:	697b      	ldr	r3, [r7, #20]
}
    b754:	4618      	mov	r0, r3
    b756:	3718      	adds	r7, #24
    b758:	46bd      	mov	sp, r7
    b75a:	bd80      	pop	{r7, pc}
    b75c:	0001d9ec 	.word	0x0001d9ec
    b760:	0001d9cc 	.word	0x0001d9cc
    b764:	0001d4f4 	.word	0x0001d4f4
    b768:	0001d984 	.word	0x0001d984
    b76c:	0001d4f0 	.word	0x0001d4f0
    b770:	0001d9d8 	.word	0x0001d9d8

0000b774 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    b774:	b480      	push	{r7}
    b776:	b083      	sub	sp, #12
    b778:	af00      	add	r7, sp, #0
    b77a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    b77c:	4b06      	ldr	r3, [pc, #24]	; (b798 <vTaskInternalSetTimeOutState+0x24>)
    b77e:	681a      	ldr	r2, [r3, #0]
    b780:	687b      	ldr	r3, [r7, #4]
    b782:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    b784:	4b05      	ldr	r3, [pc, #20]	; (b79c <vTaskInternalSetTimeOutState+0x28>)
    b786:	681a      	ldr	r2, [r3, #0]
    b788:	687b      	ldr	r3, [r7, #4]
    b78a:	605a      	str	r2, [r3, #4]
}
    b78c:	bf00      	nop
    b78e:	370c      	adds	r7, #12
    b790:	46bd      	mov	sp, r7
    b792:	f85d 7b04 	ldr.w	r7, [sp], #4
    b796:	4770      	bx	lr
    b798:	0001d9dc 	.word	0x0001d9dc
    b79c:	0001d9c8 	.word	0x0001d9c8

0000b7a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    b7a0:	b580      	push	{r7, lr}
    b7a2:	b088      	sub	sp, #32
    b7a4:	af00      	add	r7, sp, #0
    b7a6:	6078      	str	r0, [r7, #4]
    b7a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    b7aa:	687b      	ldr	r3, [r7, #4]
    b7ac:	2b00      	cmp	r3, #0
    b7ae:	d109      	bne.n	b7c4 <xTaskCheckForTimeOut+0x24>
    b7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
    b7b4:	f383 8811 	msr	BASEPRI, r3
    b7b8:	f3bf 8f6f 	isb	sy
    b7bc:	f3bf 8f4f 	dsb	sy
    b7c0:	613b      	str	r3, [r7, #16]
    b7c2:	e7fe      	b.n	b7c2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
    b7c4:	683b      	ldr	r3, [r7, #0]
    b7c6:	2b00      	cmp	r3, #0
    b7c8:	d109      	bne.n	b7de <xTaskCheckForTimeOut+0x3e>
    b7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
    b7ce:	f383 8811 	msr	BASEPRI, r3
    b7d2:	f3bf 8f6f 	isb	sy
    b7d6:	f3bf 8f4f 	dsb	sy
    b7da:	60fb      	str	r3, [r7, #12]
    b7dc:	e7fe      	b.n	b7dc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
    b7de:	f000 fe51 	bl	c484 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    b7e2:	4b1d      	ldr	r3, [pc, #116]	; (b858 <xTaskCheckForTimeOut+0xb8>)
    b7e4:	681b      	ldr	r3, [r3, #0]
    b7e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    b7e8:	687b      	ldr	r3, [r7, #4]
    b7ea:	685b      	ldr	r3, [r3, #4]
    b7ec:	69ba      	ldr	r2, [r7, #24]
    b7ee:	1ad3      	subs	r3, r2, r3
    b7f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    b7f2:	683b      	ldr	r3, [r7, #0]
    b7f4:	681b      	ldr	r3, [r3, #0]
    b7f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    b7fa:	d102      	bne.n	b802 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    b7fc:	2300      	movs	r3, #0
    b7fe:	61fb      	str	r3, [r7, #28]
    b800:	e023      	b.n	b84a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    b802:	687b      	ldr	r3, [r7, #4]
    b804:	681a      	ldr	r2, [r3, #0]
    b806:	4b15      	ldr	r3, [pc, #84]	; (b85c <xTaskCheckForTimeOut+0xbc>)
    b808:	681b      	ldr	r3, [r3, #0]
    b80a:	429a      	cmp	r2, r3
    b80c:	d007      	beq.n	b81e <xTaskCheckForTimeOut+0x7e>
    b80e:	687b      	ldr	r3, [r7, #4]
    b810:	685b      	ldr	r3, [r3, #4]
    b812:	69ba      	ldr	r2, [r7, #24]
    b814:	429a      	cmp	r2, r3
    b816:	d302      	bcc.n	b81e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    b818:	2301      	movs	r3, #1
    b81a:	61fb      	str	r3, [r7, #28]
    b81c:	e015      	b.n	b84a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    b81e:	683b      	ldr	r3, [r7, #0]
    b820:	681b      	ldr	r3, [r3, #0]
    b822:	697a      	ldr	r2, [r7, #20]
    b824:	429a      	cmp	r2, r3
    b826:	d20b      	bcs.n	b840 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
    b828:	683b      	ldr	r3, [r7, #0]
    b82a:	681a      	ldr	r2, [r3, #0]
    b82c:	697b      	ldr	r3, [r7, #20]
    b82e:	1ad2      	subs	r2, r2, r3
    b830:	683b      	ldr	r3, [r7, #0]
    b832:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
    b834:	6878      	ldr	r0, [r7, #4]
    b836:	f7ff ff9d 	bl	b774 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
    b83a:	2300      	movs	r3, #0
    b83c:	61fb      	str	r3, [r7, #28]
    b83e:	e004      	b.n	b84a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
    b840:	683b      	ldr	r3, [r7, #0]
    b842:	2200      	movs	r2, #0
    b844:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
    b846:	2301      	movs	r3, #1
    b848:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
    b84a:	f000 fe49 	bl	c4e0 <vPortExitCritical>

	return xReturn;
    b84e:	69fb      	ldr	r3, [r7, #28]
}
    b850:	4618      	mov	r0, r3
    b852:	3720      	adds	r7, #32
    b854:	46bd      	mov	sp, r7
    b856:	bd80      	pop	{r7, pc}
    b858:	0001d9c8 	.word	0x0001d9c8
    b85c:	0001d9dc 	.word	0x0001d9dc

0000b860 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    b860:	b480      	push	{r7}
    b862:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
    b864:	4b03      	ldr	r3, [pc, #12]	; (b874 <vTaskMissedYield+0x14>)
    b866:	2201      	movs	r2, #1
    b868:	601a      	str	r2, [r3, #0]
}
    b86a:	bf00      	nop
    b86c:	46bd      	mov	sp, r7
    b86e:	f85d 7b04 	ldr.w	r7, [sp], #4
    b872:	4770      	bx	lr
    b874:	0001d9d8 	.word	0x0001d9d8

0000b878 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    b878:	b580      	push	{r7, lr}
    b87a:	b082      	sub	sp, #8
    b87c:	af00      	add	r7, sp, #0
    b87e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    b880:	f000 f852 	bl	b928 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    b884:	4b06      	ldr	r3, [pc, #24]	; (b8a0 <prvIdleTask+0x28>)
    b886:	681b      	ldr	r3, [r3, #0]
    b888:	2b01      	cmp	r3, #1
    b88a:	d9f9      	bls.n	b880 <prvIdleTask+0x8>
			{
				taskYIELD();
    b88c:	4b05      	ldr	r3, [pc, #20]	; (b8a4 <prvIdleTask+0x2c>)
    b88e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    b892:	601a      	str	r2, [r3, #0]
    b894:	f3bf 8f4f 	dsb	sy
    b898:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
    b89c:	e7f0      	b.n	b880 <prvIdleTask+0x8>
    b89e:	bf00      	nop
    b8a0:	0001d4f4 	.word	0x0001d4f4
    b8a4:	e000ed04 	.word	0xe000ed04

0000b8a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    b8a8:	b580      	push	{r7, lr}
    b8aa:	b082      	sub	sp, #8
    b8ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    b8ae:	2300      	movs	r3, #0
    b8b0:	607b      	str	r3, [r7, #4]
    b8b2:	e00c      	b.n	b8ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    b8b4:	687a      	ldr	r2, [r7, #4]
    b8b6:	4613      	mov	r3, r2
    b8b8:	009b      	lsls	r3, r3, #2
    b8ba:	4413      	add	r3, r2
    b8bc:	009b      	lsls	r3, r3, #2
    b8be:	4a12      	ldr	r2, [pc, #72]	; (b908 <prvInitialiseTaskLists+0x60>)
    b8c0:	4413      	add	r3, r2
    b8c2:	4618      	mov	r0, r3
    b8c4:	f7fe fd1a 	bl	a2fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    b8c8:	687b      	ldr	r3, [r7, #4]
    b8ca:	3301      	adds	r3, #1
    b8cc:	607b      	str	r3, [r7, #4]
    b8ce:	687b      	ldr	r3, [r7, #4]
    b8d0:	2b37      	cmp	r3, #55	; 0x37
    b8d2:	d9ef      	bls.n	b8b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
    b8d4:	480d      	ldr	r0, [pc, #52]	; (b90c <prvInitialiseTaskLists+0x64>)
    b8d6:	f7fe fd11 	bl	a2fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    b8da:	480d      	ldr	r0, [pc, #52]	; (b910 <prvInitialiseTaskLists+0x68>)
    b8dc:	f7fe fd0e 	bl	a2fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
    b8e0:	480c      	ldr	r0, [pc, #48]	; (b914 <prvInitialiseTaskLists+0x6c>)
    b8e2:	f7fe fd0b 	bl	a2fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    b8e6:	480c      	ldr	r0, [pc, #48]	; (b918 <prvInitialiseTaskLists+0x70>)
    b8e8:	f7fe fd08 	bl	a2fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    b8ec:	480b      	ldr	r0, [pc, #44]	; (b91c <prvInitialiseTaskLists+0x74>)
    b8ee:	f7fe fd05 	bl	a2fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    b8f2:	4b0b      	ldr	r3, [pc, #44]	; (b920 <prvInitialiseTaskLists+0x78>)
    b8f4:	4a05      	ldr	r2, [pc, #20]	; (b90c <prvInitialiseTaskLists+0x64>)
    b8f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    b8f8:	4b0a      	ldr	r3, [pc, #40]	; (b924 <prvInitialiseTaskLists+0x7c>)
    b8fa:	4a05      	ldr	r2, [pc, #20]	; (b910 <prvInitialiseTaskLists+0x68>)
    b8fc:	601a      	str	r2, [r3, #0]
}
    b8fe:	bf00      	nop
    b900:	3708      	adds	r7, #8
    b902:	46bd      	mov	sp, r7
    b904:	bd80      	pop	{r7, pc}
    b906:	bf00      	nop
    b908:	0001d4f4 	.word	0x0001d4f4
    b90c:	0001d954 	.word	0x0001d954
    b910:	0001d968 	.word	0x0001d968
    b914:	0001d984 	.word	0x0001d984
    b918:	0001d998 	.word	0x0001d998
    b91c:	0001d9b0 	.word	0x0001d9b0
    b920:	0001d97c 	.word	0x0001d97c
    b924:	0001d980 	.word	0x0001d980

0000b928 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    b928:	b580      	push	{r7, lr}
    b92a:	b082      	sub	sp, #8
    b92c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    b92e:	e019      	b.n	b964 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
    b930:	f000 fda8 	bl	c484 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    b934:	4b0f      	ldr	r3, [pc, #60]	; (b974 <prvCheckTasksWaitingTermination+0x4c>)
    b936:	68db      	ldr	r3, [r3, #12]
    b938:	68db      	ldr	r3, [r3, #12]
    b93a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    b93c:	687b      	ldr	r3, [r7, #4]
    b93e:	3304      	adds	r3, #4
    b940:	4618      	mov	r0, r3
    b942:	f7fe fd65 	bl	a410 <uxListRemove>
				--uxCurrentNumberOfTasks;
    b946:	4b0c      	ldr	r3, [pc, #48]	; (b978 <prvCheckTasksWaitingTermination+0x50>)
    b948:	681b      	ldr	r3, [r3, #0]
    b94a:	3b01      	subs	r3, #1
    b94c:	4a0a      	ldr	r2, [pc, #40]	; (b978 <prvCheckTasksWaitingTermination+0x50>)
    b94e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
    b950:	4b0a      	ldr	r3, [pc, #40]	; (b97c <prvCheckTasksWaitingTermination+0x54>)
    b952:	681b      	ldr	r3, [r3, #0]
    b954:	3b01      	subs	r3, #1
    b956:	4a09      	ldr	r2, [pc, #36]	; (b97c <prvCheckTasksWaitingTermination+0x54>)
    b958:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
    b95a:	f000 fdc1 	bl	c4e0 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
    b95e:	6878      	ldr	r0, [r7, #4]
    b960:	f000 f80e 	bl	b980 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    b964:	4b05      	ldr	r3, [pc, #20]	; (b97c <prvCheckTasksWaitingTermination+0x54>)
    b966:	681b      	ldr	r3, [r3, #0]
    b968:	2b00      	cmp	r3, #0
    b96a:	d1e1      	bne.n	b930 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    b96c:	bf00      	nop
    b96e:	3708      	adds	r7, #8
    b970:	46bd      	mov	sp, r7
    b972:	bd80      	pop	{r7, pc}
    b974:	0001d998 	.word	0x0001d998
    b978:	0001d9c4 	.word	0x0001d9c4
    b97c:	0001d9ac 	.word	0x0001d9ac

0000b980 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    b980:	b580      	push	{r7, lr}
    b982:	b084      	sub	sp, #16
    b984:	af00      	add	r7, sp, #0
    b986:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
    b988:	687b      	ldr	r3, [r7, #4]
    b98a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
    b98e:	2b00      	cmp	r3, #0
    b990:	d108      	bne.n	b9a4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
    b992:	687b      	ldr	r3, [r7, #4]
    b994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    b996:	4618      	mov	r0, r3
    b998:	f000 fef8 	bl	c78c <vPortFree>
				vPortFree( pxTCB );
    b99c:	6878      	ldr	r0, [r7, #4]
    b99e:	f000 fef5 	bl	c78c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    b9a2:	e017      	b.n	b9d4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
    b9a4:	687b      	ldr	r3, [r7, #4]
    b9a6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
    b9aa:	2b01      	cmp	r3, #1
    b9ac:	d103      	bne.n	b9b6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
    b9ae:	6878      	ldr	r0, [r7, #4]
    b9b0:	f000 feec 	bl	c78c <vPortFree>
	}
    b9b4:	e00e      	b.n	b9d4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
    b9b6:	687b      	ldr	r3, [r7, #4]
    b9b8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
    b9bc:	2b02      	cmp	r3, #2
    b9be:	d009      	beq.n	b9d4 <prvDeleteTCB+0x54>
    b9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
    b9c4:	f383 8811 	msr	BASEPRI, r3
    b9c8:	f3bf 8f6f 	isb	sy
    b9cc:	f3bf 8f4f 	dsb	sy
    b9d0:	60fb      	str	r3, [r7, #12]
    b9d2:	e7fe      	b.n	b9d2 <prvDeleteTCB+0x52>
	}
    b9d4:	bf00      	nop
    b9d6:	3710      	adds	r7, #16
    b9d8:	46bd      	mov	sp, r7
    b9da:	bd80      	pop	{r7, pc}

0000b9dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    b9dc:	b480      	push	{r7}
    b9de:	b083      	sub	sp, #12
    b9e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    b9e2:	4b0c      	ldr	r3, [pc, #48]	; (ba14 <prvResetNextTaskUnblockTime+0x38>)
    b9e4:	681b      	ldr	r3, [r3, #0]
    b9e6:	681b      	ldr	r3, [r3, #0]
    b9e8:	2b00      	cmp	r3, #0
    b9ea:	d104      	bne.n	b9f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    b9ec:	4b0a      	ldr	r3, [pc, #40]	; (ba18 <prvResetNextTaskUnblockTime+0x3c>)
    b9ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b9f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
    b9f4:	e008      	b.n	ba08 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    b9f6:	4b07      	ldr	r3, [pc, #28]	; (ba14 <prvResetNextTaskUnblockTime+0x38>)
    b9f8:	681b      	ldr	r3, [r3, #0]
    b9fa:	68db      	ldr	r3, [r3, #12]
    b9fc:	68db      	ldr	r3, [r3, #12]
    b9fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    ba00:	687b      	ldr	r3, [r7, #4]
    ba02:	685b      	ldr	r3, [r3, #4]
    ba04:	4a04      	ldr	r2, [pc, #16]	; (ba18 <prvResetNextTaskUnblockTime+0x3c>)
    ba06:	6013      	str	r3, [r2, #0]
}
    ba08:	bf00      	nop
    ba0a:	370c      	adds	r7, #12
    ba0c:	46bd      	mov	sp, r7
    ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba12:	4770      	bx	lr
    ba14:	0001d97c 	.word	0x0001d97c
    ba18:	0001d9e4 	.word	0x0001d9e4

0000ba1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
    ba1c:	b480      	push	{r7}
    ba1e:	b083      	sub	sp, #12
    ba20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    ba22:	4b0b      	ldr	r3, [pc, #44]	; (ba50 <xTaskGetSchedulerState+0x34>)
    ba24:	681b      	ldr	r3, [r3, #0]
    ba26:	2b00      	cmp	r3, #0
    ba28:	d102      	bne.n	ba30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    ba2a:	2301      	movs	r3, #1
    ba2c:	607b      	str	r3, [r7, #4]
    ba2e:	e008      	b.n	ba42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    ba30:	4b08      	ldr	r3, [pc, #32]	; (ba54 <xTaskGetSchedulerState+0x38>)
    ba32:	681b      	ldr	r3, [r3, #0]
    ba34:	2b00      	cmp	r3, #0
    ba36:	d102      	bne.n	ba3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
    ba38:	2302      	movs	r3, #2
    ba3a:	607b      	str	r3, [r7, #4]
    ba3c:	e001      	b.n	ba42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    ba3e:	2300      	movs	r3, #0
    ba40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
    ba42:	687b      	ldr	r3, [r7, #4]
	}
    ba44:	4618      	mov	r0, r3
    ba46:	370c      	adds	r7, #12
    ba48:	46bd      	mov	sp, r7
    ba4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba4e:	4770      	bx	lr
    ba50:	0001d9d0 	.word	0x0001d9d0
    ba54:	0001d9ec 	.word	0x0001d9ec

0000ba58 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    ba58:	b580      	push	{r7, lr}
    ba5a:	b086      	sub	sp, #24
    ba5c:	af00      	add	r7, sp, #0
    ba5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
    ba60:	687b      	ldr	r3, [r7, #4]
    ba62:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
    ba64:	2300      	movs	r3, #0
    ba66:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
    ba68:	687b      	ldr	r3, [r7, #4]
    ba6a:	2b00      	cmp	r3, #0
    ba6c:	d054      	beq.n	bb18 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
    ba6e:	4b2d      	ldr	r3, [pc, #180]	; (bb24 <xTaskPriorityDisinherit+0xcc>)
    ba70:	681b      	ldr	r3, [r3, #0]
    ba72:	693a      	ldr	r2, [r7, #16]
    ba74:	429a      	cmp	r2, r3
    ba76:	d009      	beq.n	ba8c <xTaskPriorityDisinherit+0x34>
    ba78:	f04f 0350 	mov.w	r3, #80	; 0x50
    ba7c:	f383 8811 	msr	BASEPRI, r3
    ba80:	f3bf 8f6f 	isb	sy
    ba84:	f3bf 8f4f 	dsb	sy
    ba88:	60fb      	str	r3, [r7, #12]
    ba8a:	e7fe      	b.n	ba8a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
    ba8c:	693b      	ldr	r3, [r7, #16]
    ba8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    ba90:	2b00      	cmp	r3, #0
    ba92:	d109      	bne.n	baa8 <xTaskPriorityDisinherit+0x50>
    ba94:	f04f 0350 	mov.w	r3, #80	; 0x50
    ba98:	f383 8811 	msr	BASEPRI, r3
    ba9c:	f3bf 8f6f 	isb	sy
    baa0:	f3bf 8f4f 	dsb	sy
    baa4:	60bb      	str	r3, [r7, #8]
    baa6:	e7fe      	b.n	baa6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
    baa8:	693b      	ldr	r3, [r7, #16]
    baaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    baac:	1e5a      	subs	r2, r3, #1
    baae:	693b      	ldr	r3, [r7, #16]
    bab0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    bab2:	693b      	ldr	r3, [r7, #16]
    bab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bab6:	693b      	ldr	r3, [r7, #16]
    bab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    baba:	429a      	cmp	r2, r3
    babc:	d02c      	beq.n	bb18 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    babe:	693b      	ldr	r3, [r7, #16]
    bac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bac2:	2b00      	cmp	r3, #0
    bac4:	d128      	bne.n	bb18 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    bac6:	693b      	ldr	r3, [r7, #16]
    bac8:	3304      	adds	r3, #4
    baca:	4618      	mov	r0, r3
    bacc:	f7fe fca0 	bl	a410 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    bad0:	693b      	ldr	r3, [r7, #16]
    bad2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    bad4:	693b      	ldr	r3, [r7, #16]
    bad6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    bad8:	693b      	ldr	r3, [r7, #16]
    bada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    badc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
    bae0:	693b      	ldr	r3, [r7, #16]
    bae2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
    bae4:	693b      	ldr	r3, [r7, #16]
    bae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bae8:	4b0f      	ldr	r3, [pc, #60]	; (bb28 <xTaskPriorityDisinherit+0xd0>)
    baea:	681b      	ldr	r3, [r3, #0]
    baec:	429a      	cmp	r2, r3
    baee:	d903      	bls.n	baf8 <xTaskPriorityDisinherit+0xa0>
    baf0:	693b      	ldr	r3, [r7, #16]
    baf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    baf4:	4a0c      	ldr	r2, [pc, #48]	; (bb28 <xTaskPriorityDisinherit+0xd0>)
    baf6:	6013      	str	r3, [r2, #0]
    baf8:	693b      	ldr	r3, [r7, #16]
    bafa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bafc:	4613      	mov	r3, r2
    bafe:	009b      	lsls	r3, r3, #2
    bb00:	4413      	add	r3, r2
    bb02:	009b      	lsls	r3, r3, #2
    bb04:	4a09      	ldr	r2, [pc, #36]	; (bb2c <xTaskPriorityDisinherit+0xd4>)
    bb06:	441a      	add	r2, r3
    bb08:	693b      	ldr	r3, [r7, #16]
    bb0a:	3304      	adds	r3, #4
    bb0c:	4619      	mov	r1, r3
    bb0e:	4610      	mov	r0, r2
    bb10:	f7fe fc21 	bl	a356 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    bb14:	2301      	movs	r3, #1
    bb16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    bb18:	697b      	ldr	r3, [r7, #20]
	}
    bb1a:	4618      	mov	r0, r3
    bb1c:	3718      	adds	r7, #24
    bb1e:	46bd      	mov	sp, r7
    bb20:	bd80      	pop	{r7, pc}
    bb22:	bf00      	nop
    bb24:	0001d4f0 	.word	0x0001d4f0
    bb28:	0001d9cc 	.word	0x0001d9cc
    bb2c:	0001d4f4 	.word	0x0001d4f4

0000bb30 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    bb30:	b580      	push	{r7, lr}
    bb32:	b084      	sub	sp, #16
    bb34:	af00      	add	r7, sp, #0
    bb36:	6078      	str	r0, [r7, #4]
    bb38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    bb3a:	4b21      	ldr	r3, [pc, #132]	; (bbc0 <prvAddCurrentTaskToDelayedList+0x90>)
    bb3c:	681b      	ldr	r3, [r3, #0]
    bb3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    bb40:	4b20      	ldr	r3, [pc, #128]	; (bbc4 <prvAddCurrentTaskToDelayedList+0x94>)
    bb42:	681b      	ldr	r3, [r3, #0]
    bb44:	3304      	adds	r3, #4
    bb46:	4618      	mov	r0, r3
    bb48:	f7fe fc62 	bl	a410 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    bb4c:	687b      	ldr	r3, [r7, #4]
    bb4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    bb52:	d10a      	bne.n	bb6a <prvAddCurrentTaskToDelayedList+0x3a>
    bb54:	683b      	ldr	r3, [r7, #0]
    bb56:	2b00      	cmp	r3, #0
    bb58:	d007      	beq.n	bb6a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    bb5a:	4b1a      	ldr	r3, [pc, #104]	; (bbc4 <prvAddCurrentTaskToDelayedList+0x94>)
    bb5c:	681b      	ldr	r3, [r3, #0]
    bb5e:	3304      	adds	r3, #4
    bb60:	4619      	mov	r1, r3
    bb62:	4819      	ldr	r0, [pc, #100]	; (bbc8 <prvAddCurrentTaskToDelayedList+0x98>)
    bb64:	f7fe fbf7 	bl	a356 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    bb68:	e026      	b.n	bbb8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
    bb6a:	68fa      	ldr	r2, [r7, #12]
    bb6c:	687b      	ldr	r3, [r7, #4]
    bb6e:	4413      	add	r3, r2
    bb70:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    bb72:	4b14      	ldr	r3, [pc, #80]	; (bbc4 <prvAddCurrentTaskToDelayedList+0x94>)
    bb74:	681b      	ldr	r3, [r3, #0]
    bb76:	68ba      	ldr	r2, [r7, #8]
    bb78:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
    bb7a:	68ba      	ldr	r2, [r7, #8]
    bb7c:	68fb      	ldr	r3, [r7, #12]
    bb7e:	429a      	cmp	r2, r3
    bb80:	d209      	bcs.n	bb96 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    bb82:	4b12      	ldr	r3, [pc, #72]	; (bbcc <prvAddCurrentTaskToDelayedList+0x9c>)
    bb84:	681a      	ldr	r2, [r3, #0]
    bb86:	4b0f      	ldr	r3, [pc, #60]	; (bbc4 <prvAddCurrentTaskToDelayedList+0x94>)
    bb88:	681b      	ldr	r3, [r3, #0]
    bb8a:	3304      	adds	r3, #4
    bb8c:	4619      	mov	r1, r3
    bb8e:	4610      	mov	r0, r2
    bb90:	f7fe fc05 	bl	a39e <vListInsert>
}
    bb94:	e010      	b.n	bbb8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    bb96:	4b0e      	ldr	r3, [pc, #56]	; (bbd0 <prvAddCurrentTaskToDelayedList+0xa0>)
    bb98:	681a      	ldr	r2, [r3, #0]
    bb9a:	4b0a      	ldr	r3, [pc, #40]	; (bbc4 <prvAddCurrentTaskToDelayedList+0x94>)
    bb9c:	681b      	ldr	r3, [r3, #0]
    bb9e:	3304      	adds	r3, #4
    bba0:	4619      	mov	r1, r3
    bba2:	4610      	mov	r0, r2
    bba4:	f7fe fbfb 	bl	a39e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
    bba8:	4b0a      	ldr	r3, [pc, #40]	; (bbd4 <prvAddCurrentTaskToDelayedList+0xa4>)
    bbaa:	681b      	ldr	r3, [r3, #0]
    bbac:	68ba      	ldr	r2, [r7, #8]
    bbae:	429a      	cmp	r2, r3
    bbb0:	d202      	bcs.n	bbb8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
    bbb2:	4a08      	ldr	r2, [pc, #32]	; (bbd4 <prvAddCurrentTaskToDelayedList+0xa4>)
    bbb4:	68bb      	ldr	r3, [r7, #8]
    bbb6:	6013      	str	r3, [r2, #0]
}
    bbb8:	bf00      	nop
    bbba:	3710      	adds	r7, #16
    bbbc:	46bd      	mov	sp, r7
    bbbe:	bd80      	pop	{r7, pc}
    bbc0:	0001d9c8 	.word	0x0001d9c8
    bbc4:	0001d4f0 	.word	0x0001d4f0
    bbc8:	0001d9b0 	.word	0x0001d9b0
    bbcc:	0001d980 	.word	0x0001d980
    bbd0:	0001d97c 	.word	0x0001d97c
    bbd4:	0001d9e4 	.word	0x0001d9e4

0000bbd8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    bbd8:	b580      	push	{r7, lr}
    bbda:	b08a      	sub	sp, #40	; 0x28
    bbdc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
    bbde:	2300      	movs	r3, #0
    bbe0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    bbe2:	f000 faff 	bl	c1e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
    bbe6:	4b1c      	ldr	r3, [pc, #112]	; (bc58 <xTimerCreateTimerTask+0x80>)
    bbe8:	681b      	ldr	r3, [r3, #0]
    bbea:	2b00      	cmp	r3, #0
    bbec:	d021      	beq.n	bc32 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
    bbee:	2300      	movs	r3, #0
    bbf0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
    bbf2:	2300      	movs	r3, #0
    bbf4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
    bbf6:	1d3a      	adds	r2, r7, #4
    bbf8:	f107 0108 	add.w	r1, r7, #8
    bbfc:	f107 030c 	add.w	r3, r7, #12
    bc00:	4618      	mov	r0, r3
    bc02:	f7fe fb61 	bl	a2c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
    bc06:	6879      	ldr	r1, [r7, #4]
    bc08:	68bb      	ldr	r3, [r7, #8]
    bc0a:	68fa      	ldr	r2, [r7, #12]
    bc0c:	9202      	str	r2, [sp, #8]
    bc0e:	9301      	str	r3, [sp, #4]
    bc10:	2302      	movs	r3, #2
    bc12:	9300      	str	r3, [sp, #0]
    bc14:	2300      	movs	r3, #0
    bc16:	460a      	mov	r2, r1
    bc18:	4910      	ldr	r1, [pc, #64]	; (bc5c <xTimerCreateTimerTask+0x84>)
    bc1a:	4811      	ldr	r0, [pc, #68]	; (bc60 <xTimerCreateTimerTask+0x88>)
    bc1c:	f7ff f8f6 	bl	ae0c <xTaskCreateStatic>
    bc20:	4602      	mov	r2, r0
    bc22:	4b10      	ldr	r3, [pc, #64]	; (bc64 <xTimerCreateTimerTask+0x8c>)
    bc24:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
    bc26:	4b0f      	ldr	r3, [pc, #60]	; (bc64 <xTimerCreateTimerTask+0x8c>)
    bc28:	681b      	ldr	r3, [r3, #0]
    bc2a:	2b00      	cmp	r3, #0
    bc2c:	d001      	beq.n	bc32 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
    bc2e:	2301      	movs	r3, #1
    bc30:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    bc32:	697b      	ldr	r3, [r7, #20]
    bc34:	2b00      	cmp	r3, #0
    bc36:	d109      	bne.n	bc4c <xTimerCreateTimerTask+0x74>
    bc38:	f04f 0350 	mov.w	r3, #80	; 0x50
    bc3c:	f383 8811 	msr	BASEPRI, r3
    bc40:	f3bf 8f6f 	isb	sy
    bc44:	f3bf 8f4f 	dsb	sy
    bc48:	613b      	str	r3, [r7, #16]
    bc4a:	e7fe      	b.n	bc4a <xTimerCreateTimerTask+0x72>
	return xReturn;
    bc4c:	697b      	ldr	r3, [r7, #20]
}
    bc4e:	4618      	mov	r0, r3
    bc50:	3718      	adds	r7, #24
    bc52:	46bd      	mov	sp, r7
    bc54:	bd80      	pop	{r7, pc}
    bc56:	bf00      	nop
    bc58:	0001da20 	.word	0x0001da20
    bc5c:	0000cd84 	.word	0x0000cd84
    bc60:	0000bd99 	.word	0x0000bd99
    bc64:	0001da24 	.word	0x0001da24

0000bc68 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    bc68:	b580      	push	{r7, lr}
    bc6a:	b08a      	sub	sp, #40	; 0x28
    bc6c:	af00      	add	r7, sp, #0
    bc6e:	60f8      	str	r0, [r7, #12]
    bc70:	60b9      	str	r1, [r7, #8]
    bc72:	607a      	str	r2, [r7, #4]
    bc74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
    bc76:	2300      	movs	r3, #0
    bc78:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
    bc7a:	68fb      	ldr	r3, [r7, #12]
    bc7c:	2b00      	cmp	r3, #0
    bc7e:	d109      	bne.n	bc94 <xTimerGenericCommand+0x2c>
    bc80:	f04f 0350 	mov.w	r3, #80	; 0x50
    bc84:	f383 8811 	msr	BASEPRI, r3
    bc88:	f3bf 8f6f 	isb	sy
    bc8c:	f3bf 8f4f 	dsb	sy
    bc90:	623b      	str	r3, [r7, #32]
    bc92:	e7fe      	b.n	bc92 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    bc94:	4b19      	ldr	r3, [pc, #100]	; (bcfc <xTimerGenericCommand+0x94>)
    bc96:	681b      	ldr	r3, [r3, #0]
    bc98:	2b00      	cmp	r3, #0
    bc9a:	d02a      	beq.n	bcf2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    bc9c:	68bb      	ldr	r3, [r7, #8]
    bc9e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    bca0:	687b      	ldr	r3, [r7, #4]
    bca2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
    bca4:	68fb      	ldr	r3, [r7, #12]
    bca6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    bca8:	68bb      	ldr	r3, [r7, #8]
    bcaa:	2b05      	cmp	r3, #5
    bcac:	dc18      	bgt.n	bce0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    bcae:	f7ff feb5 	bl	ba1c <xTaskGetSchedulerState>
    bcb2:	4603      	mov	r3, r0
    bcb4:	2b02      	cmp	r3, #2
    bcb6:	d109      	bne.n	bccc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    bcb8:	4b10      	ldr	r3, [pc, #64]	; (bcfc <xTimerGenericCommand+0x94>)
    bcba:	6818      	ldr	r0, [r3, #0]
    bcbc:	f107 0110 	add.w	r1, r7, #16
    bcc0:	2300      	movs	r3, #0
    bcc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    bcc4:	f7fe fccc 	bl	a660 <xQueueGenericSend>
    bcc8:	6278      	str	r0, [r7, #36]	; 0x24
    bcca:	e012      	b.n	bcf2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    bccc:	4b0b      	ldr	r3, [pc, #44]	; (bcfc <xTimerGenericCommand+0x94>)
    bcce:	6818      	ldr	r0, [r3, #0]
    bcd0:	f107 0110 	add.w	r1, r7, #16
    bcd4:	2300      	movs	r3, #0
    bcd6:	2200      	movs	r2, #0
    bcd8:	f7fe fcc2 	bl	a660 <xQueueGenericSend>
    bcdc:	6278      	str	r0, [r7, #36]	; 0x24
    bcde:	e008      	b.n	bcf2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    bce0:	4b06      	ldr	r3, [pc, #24]	; (bcfc <xTimerGenericCommand+0x94>)
    bce2:	6818      	ldr	r0, [r3, #0]
    bce4:	f107 0110 	add.w	r1, r7, #16
    bce8:	2300      	movs	r3, #0
    bcea:	683a      	ldr	r2, [r7, #0]
    bcec:	f7fe fdb2 	bl	a854 <xQueueGenericSendFromISR>
    bcf0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    bcf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    bcf4:	4618      	mov	r0, r3
    bcf6:	3728      	adds	r7, #40	; 0x28
    bcf8:	46bd      	mov	sp, r7
    bcfa:	bd80      	pop	{r7, pc}
    bcfc:	0001da20 	.word	0x0001da20

0000bd00 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    bd00:	b580      	push	{r7, lr}
    bd02:	b088      	sub	sp, #32
    bd04:	af02      	add	r7, sp, #8
    bd06:	6078      	str	r0, [r7, #4]
    bd08:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    bd0a:	4b22      	ldr	r3, [pc, #136]	; (bd94 <prvProcessExpiredTimer+0x94>)
    bd0c:	681b      	ldr	r3, [r3, #0]
    bd0e:	68db      	ldr	r3, [r3, #12]
    bd10:	68db      	ldr	r3, [r3, #12]
    bd12:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    bd14:	697b      	ldr	r3, [r7, #20]
    bd16:	3304      	adds	r3, #4
    bd18:	4618      	mov	r0, r3
    bd1a:	f7fe fb79 	bl	a410 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    bd1e:	697b      	ldr	r3, [r7, #20]
    bd20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    bd24:	f003 0304 	and.w	r3, r3, #4
    bd28:	2b00      	cmp	r3, #0
    bd2a:	d021      	beq.n	bd70 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    bd2c:	697b      	ldr	r3, [r7, #20]
    bd2e:	699a      	ldr	r2, [r3, #24]
    bd30:	687b      	ldr	r3, [r7, #4]
    bd32:	18d1      	adds	r1, r2, r3
    bd34:	687b      	ldr	r3, [r7, #4]
    bd36:	683a      	ldr	r2, [r7, #0]
    bd38:	6978      	ldr	r0, [r7, #20]
    bd3a:	f000 f8d1 	bl	bee0 <prvInsertTimerInActiveList>
    bd3e:	4603      	mov	r3, r0
    bd40:	2b00      	cmp	r3, #0
    bd42:	d01e      	beq.n	bd82 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    bd44:	2300      	movs	r3, #0
    bd46:	9300      	str	r3, [sp, #0]
    bd48:	2300      	movs	r3, #0
    bd4a:	687a      	ldr	r2, [r7, #4]
    bd4c:	2100      	movs	r1, #0
    bd4e:	6978      	ldr	r0, [r7, #20]
    bd50:	f7ff ff8a 	bl	bc68 <xTimerGenericCommand>
    bd54:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
    bd56:	693b      	ldr	r3, [r7, #16]
    bd58:	2b00      	cmp	r3, #0
    bd5a:	d112      	bne.n	bd82 <prvProcessExpiredTimer+0x82>
    bd5c:	f04f 0350 	mov.w	r3, #80	; 0x50
    bd60:	f383 8811 	msr	BASEPRI, r3
    bd64:	f3bf 8f6f 	isb	sy
    bd68:	f3bf 8f4f 	dsb	sy
    bd6c:	60fb      	str	r3, [r7, #12]
    bd6e:	e7fe      	b.n	bd6e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    bd70:	697b      	ldr	r3, [r7, #20]
    bd72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    bd76:	f023 0301 	bic.w	r3, r3, #1
    bd7a:	b2da      	uxtb	r2, r3
    bd7c:	697b      	ldr	r3, [r7, #20]
    bd7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    bd82:	697b      	ldr	r3, [r7, #20]
    bd84:	6a1b      	ldr	r3, [r3, #32]
    bd86:	6978      	ldr	r0, [r7, #20]
    bd88:	4798      	blx	r3
}
    bd8a:	bf00      	nop
    bd8c:	3718      	adds	r7, #24
    bd8e:	46bd      	mov	sp, r7
    bd90:	bd80      	pop	{r7, pc}
    bd92:	bf00      	nop
    bd94:	0001da18 	.word	0x0001da18

0000bd98 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
    bd98:	b580      	push	{r7, lr}
    bd9a:	b084      	sub	sp, #16
    bd9c:	af00      	add	r7, sp, #0
    bd9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    bda0:	f107 0308 	add.w	r3, r7, #8
    bda4:	4618      	mov	r0, r3
    bda6:	f000 f857 	bl	be58 <prvGetNextExpireTime>
    bdaa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    bdac:	68bb      	ldr	r3, [r7, #8]
    bdae:	4619      	mov	r1, r3
    bdb0:	68f8      	ldr	r0, [r7, #12]
    bdb2:	f000 f803 	bl	bdbc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
    bdb6:	f000 f8d5 	bl	bf64 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    bdba:	e7f1      	b.n	bda0 <prvTimerTask+0x8>

0000bdbc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
    bdbc:	b580      	push	{r7, lr}
    bdbe:	b084      	sub	sp, #16
    bdc0:	af00      	add	r7, sp, #0
    bdc2:	6078      	str	r0, [r7, #4]
    bdc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    bdc6:	f7ff fa57 	bl	b278 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    bdca:	f107 0308 	add.w	r3, r7, #8
    bdce:	4618      	mov	r0, r3
    bdd0:	f000 f866 	bl	bea0 <prvSampleTimeNow>
    bdd4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
    bdd6:	68bb      	ldr	r3, [r7, #8]
    bdd8:	2b00      	cmp	r3, #0
    bdda:	d130      	bne.n	be3e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    bddc:	683b      	ldr	r3, [r7, #0]
    bdde:	2b00      	cmp	r3, #0
    bde0:	d10a      	bne.n	bdf8 <prvProcessTimerOrBlockTask+0x3c>
    bde2:	687a      	ldr	r2, [r7, #4]
    bde4:	68fb      	ldr	r3, [r7, #12]
    bde6:	429a      	cmp	r2, r3
    bde8:	d806      	bhi.n	bdf8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
    bdea:	f7ff fa53 	bl	b294 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    bdee:	68f9      	ldr	r1, [r7, #12]
    bdf0:	6878      	ldr	r0, [r7, #4]
    bdf2:	f7ff ff85 	bl	bd00 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    bdf6:	e024      	b.n	be42 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
    bdf8:	683b      	ldr	r3, [r7, #0]
    bdfa:	2b00      	cmp	r3, #0
    bdfc:	d008      	beq.n	be10 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    bdfe:	4b13      	ldr	r3, [pc, #76]	; (be4c <prvProcessTimerOrBlockTask+0x90>)
    be00:	681b      	ldr	r3, [r3, #0]
    be02:	681b      	ldr	r3, [r3, #0]
    be04:	2b00      	cmp	r3, #0
    be06:	d101      	bne.n	be0c <prvProcessTimerOrBlockTask+0x50>
    be08:	2301      	movs	r3, #1
    be0a:	e000      	b.n	be0e <prvProcessTimerOrBlockTask+0x52>
    be0c:	2300      	movs	r3, #0
    be0e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    be10:	4b0f      	ldr	r3, [pc, #60]	; (be50 <prvProcessTimerOrBlockTask+0x94>)
    be12:	6818      	ldr	r0, [r3, #0]
    be14:	687a      	ldr	r2, [r7, #4]
    be16:	68fb      	ldr	r3, [r7, #12]
    be18:	1ad3      	subs	r3, r2, r3
    be1a:	683a      	ldr	r2, [r7, #0]
    be1c:	4619      	mov	r1, r3
    be1e:	f7fe ffc1 	bl	ada4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
    be22:	f7ff fa37 	bl	b294 <xTaskResumeAll>
    be26:	4603      	mov	r3, r0
    be28:	2b00      	cmp	r3, #0
    be2a:	d10a      	bne.n	be42 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
    be2c:	4b09      	ldr	r3, [pc, #36]	; (be54 <prvProcessTimerOrBlockTask+0x98>)
    be2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    be32:	601a      	str	r2, [r3, #0]
    be34:	f3bf 8f4f 	dsb	sy
    be38:	f3bf 8f6f 	isb	sy
}
    be3c:	e001      	b.n	be42 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
    be3e:	f7ff fa29 	bl	b294 <xTaskResumeAll>
}
    be42:	bf00      	nop
    be44:	3710      	adds	r7, #16
    be46:	46bd      	mov	sp, r7
    be48:	bd80      	pop	{r7, pc}
    be4a:	bf00      	nop
    be4c:	0001da1c 	.word	0x0001da1c
    be50:	0001da20 	.word	0x0001da20
    be54:	e000ed04 	.word	0xe000ed04

0000be58 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    be58:	b480      	push	{r7}
    be5a:	b085      	sub	sp, #20
    be5c:	af00      	add	r7, sp, #0
    be5e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    be60:	4b0e      	ldr	r3, [pc, #56]	; (be9c <prvGetNextExpireTime+0x44>)
    be62:	681b      	ldr	r3, [r3, #0]
    be64:	681b      	ldr	r3, [r3, #0]
    be66:	2b00      	cmp	r3, #0
    be68:	d101      	bne.n	be6e <prvGetNextExpireTime+0x16>
    be6a:	2201      	movs	r2, #1
    be6c:	e000      	b.n	be70 <prvGetNextExpireTime+0x18>
    be6e:	2200      	movs	r2, #0
    be70:	687b      	ldr	r3, [r7, #4]
    be72:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    be74:	687b      	ldr	r3, [r7, #4]
    be76:	681b      	ldr	r3, [r3, #0]
    be78:	2b00      	cmp	r3, #0
    be7a:	d105      	bne.n	be88 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    be7c:	4b07      	ldr	r3, [pc, #28]	; (be9c <prvGetNextExpireTime+0x44>)
    be7e:	681b      	ldr	r3, [r3, #0]
    be80:	68db      	ldr	r3, [r3, #12]
    be82:	681b      	ldr	r3, [r3, #0]
    be84:	60fb      	str	r3, [r7, #12]
    be86:	e001      	b.n	be8c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    be88:	2300      	movs	r3, #0
    be8a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
    be8c:	68fb      	ldr	r3, [r7, #12]
}
    be8e:	4618      	mov	r0, r3
    be90:	3714      	adds	r7, #20
    be92:	46bd      	mov	sp, r7
    be94:	f85d 7b04 	ldr.w	r7, [sp], #4
    be98:	4770      	bx	lr
    be9a:	bf00      	nop
    be9c:	0001da18 	.word	0x0001da18

0000bea0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    bea0:	b580      	push	{r7, lr}
    bea2:	b084      	sub	sp, #16
    bea4:	af00      	add	r7, sp, #0
    bea6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    bea8:	f7ff fa90 	bl	b3cc <xTaskGetTickCount>
    beac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
    beae:	4b0b      	ldr	r3, [pc, #44]	; (bedc <prvSampleTimeNow+0x3c>)
    beb0:	681b      	ldr	r3, [r3, #0]
    beb2:	68fa      	ldr	r2, [r7, #12]
    beb4:	429a      	cmp	r2, r3
    beb6:	d205      	bcs.n	bec4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
    beb8:	f000 f930 	bl	c11c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
    bebc:	687b      	ldr	r3, [r7, #4]
    bebe:	2201      	movs	r2, #1
    bec0:	601a      	str	r2, [r3, #0]
    bec2:	e002      	b.n	beca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    bec4:	687b      	ldr	r3, [r7, #4]
    bec6:	2200      	movs	r2, #0
    bec8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
    beca:	4a04      	ldr	r2, [pc, #16]	; (bedc <prvSampleTimeNow+0x3c>)
    becc:	68fb      	ldr	r3, [r7, #12]
    bece:	6013      	str	r3, [r2, #0]

	return xTimeNow;
    bed0:	68fb      	ldr	r3, [r7, #12]
}
    bed2:	4618      	mov	r0, r3
    bed4:	3710      	adds	r7, #16
    bed6:	46bd      	mov	sp, r7
    bed8:	bd80      	pop	{r7, pc}
    beda:	bf00      	nop
    bedc:	0001da28 	.word	0x0001da28

0000bee0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    bee0:	b580      	push	{r7, lr}
    bee2:	b086      	sub	sp, #24
    bee4:	af00      	add	r7, sp, #0
    bee6:	60f8      	str	r0, [r7, #12]
    bee8:	60b9      	str	r1, [r7, #8]
    beea:	607a      	str	r2, [r7, #4]
    beec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
    beee:	2300      	movs	r3, #0
    bef0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    bef2:	68fb      	ldr	r3, [r7, #12]
    bef4:	68ba      	ldr	r2, [r7, #8]
    bef6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    bef8:	68fb      	ldr	r3, [r7, #12]
    befa:	68fa      	ldr	r2, [r7, #12]
    befc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
    befe:	68ba      	ldr	r2, [r7, #8]
    bf00:	687b      	ldr	r3, [r7, #4]
    bf02:	429a      	cmp	r2, r3
    bf04:	d812      	bhi.n	bf2c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    bf06:	687a      	ldr	r2, [r7, #4]
    bf08:	683b      	ldr	r3, [r7, #0]
    bf0a:	1ad2      	subs	r2, r2, r3
    bf0c:	68fb      	ldr	r3, [r7, #12]
    bf0e:	699b      	ldr	r3, [r3, #24]
    bf10:	429a      	cmp	r2, r3
    bf12:	d302      	bcc.n	bf1a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    bf14:	2301      	movs	r3, #1
    bf16:	617b      	str	r3, [r7, #20]
    bf18:	e01b      	b.n	bf52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    bf1a:	4b10      	ldr	r3, [pc, #64]	; (bf5c <prvInsertTimerInActiveList+0x7c>)
    bf1c:	681a      	ldr	r2, [r3, #0]
    bf1e:	68fb      	ldr	r3, [r7, #12]
    bf20:	3304      	adds	r3, #4
    bf22:	4619      	mov	r1, r3
    bf24:	4610      	mov	r0, r2
    bf26:	f7fe fa3a 	bl	a39e <vListInsert>
    bf2a:	e012      	b.n	bf52 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    bf2c:	687a      	ldr	r2, [r7, #4]
    bf2e:	683b      	ldr	r3, [r7, #0]
    bf30:	429a      	cmp	r2, r3
    bf32:	d206      	bcs.n	bf42 <prvInsertTimerInActiveList+0x62>
    bf34:	68ba      	ldr	r2, [r7, #8]
    bf36:	683b      	ldr	r3, [r7, #0]
    bf38:	429a      	cmp	r2, r3
    bf3a:	d302      	bcc.n	bf42 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    bf3c:	2301      	movs	r3, #1
    bf3e:	617b      	str	r3, [r7, #20]
    bf40:	e007      	b.n	bf52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    bf42:	4b07      	ldr	r3, [pc, #28]	; (bf60 <prvInsertTimerInActiveList+0x80>)
    bf44:	681a      	ldr	r2, [r3, #0]
    bf46:	68fb      	ldr	r3, [r7, #12]
    bf48:	3304      	adds	r3, #4
    bf4a:	4619      	mov	r1, r3
    bf4c:	4610      	mov	r0, r2
    bf4e:	f7fe fa26 	bl	a39e <vListInsert>
		}
	}

	return xProcessTimerNow;
    bf52:	697b      	ldr	r3, [r7, #20]
}
    bf54:	4618      	mov	r0, r3
    bf56:	3718      	adds	r7, #24
    bf58:	46bd      	mov	sp, r7
    bf5a:	bd80      	pop	{r7, pc}
    bf5c:	0001da1c 	.word	0x0001da1c
    bf60:	0001da18 	.word	0x0001da18

0000bf64 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
    bf64:	b580      	push	{r7, lr}
    bf66:	b08e      	sub	sp, #56	; 0x38
    bf68:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    bf6a:	e0c6      	b.n	c0fa <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
    bf6c:	687b      	ldr	r3, [r7, #4]
    bf6e:	2b00      	cmp	r3, #0
    bf70:	da17      	bge.n	bfa2 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
    bf72:	1d3b      	adds	r3, r7, #4
    bf74:	3304      	adds	r3, #4
    bf76:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
    bf78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bf7a:	2b00      	cmp	r3, #0
    bf7c:	d109      	bne.n	bf92 <prvProcessReceivedCommands+0x2e>
    bf7e:	f04f 0350 	mov.w	r3, #80	; 0x50
    bf82:	f383 8811 	msr	BASEPRI, r3
    bf86:	f3bf 8f6f 	isb	sy
    bf8a:	f3bf 8f4f 	dsb	sy
    bf8e:	61fb      	str	r3, [r7, #28]
    bf90:	e7fe      	b.n	bf90 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
    bf92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    bf94:	681b      	ldr	r3, [r3, #0]
    bf96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    bf98:	6850      	ldr	r0, [r2, #4]
    bf9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    bf9c:	6892      	ldr	r2, [r2, #8]
    bf9e:	4611      	mov	r1, r2
    bfa0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    bfa2:	687b      	ldr	r3, [r7, #4]
    bfa4:	2b00      	cmp	r3, #0
    bfa6:	f2c0 80a7 	blt.w	c0f8 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    bfaa:	68fb      	ldr	r3, [r7, #12]
    bfac:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    bfae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bfb0:	695b      	ldr	r3, [r3, #20]
    bfb2:	2b00      	cmp	r3, #0
    bfb4:	d004      	beq.n	bfc0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    bfb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bfb8:	3304      	adds	r3, #4
    bfba:	4618      	mov	r0, r3
    bfbc:	f7fe fa28 	bl	a410 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    bfc0:	463b      	mov	r3, r7
    bfc2:	4618      	mov	r0, r3
    bfc4:	f7ff ff6c 	bl	bea0 <prvSampleTimeNow>
    bfc8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
    bfca:	687b      	ldr	r3, [r7, #4]
    bfcc:	2b09      	cmp	r3, #9
    bfce:	f200 8094 	bhi.w	c0fa <prvProcessReceivedCommands+0x196>
    bfd2:	a201      	add	r2, pc, #4	; (adr r2, bfd8 <prvProcessReceivedCommands+0x74>)
    bfd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    bfd8:	0000c001 	.word	0x0000c001
    bfdc:	0000c001 	.word	0x0000c001
    bfe0:	0000c001 	.word	0x0000c001
    bfe4:	0000c073 	.word	0x0000c073
    bfe8:	0000c087 	.word	0x0000c087
    bfec:	0000c0cf 	.word	0x0000c0cf
    bff0:	0000c001 	.word	0x0000c001
    bff4:	0000c001 	.word	0x0000c001
    bff8:	0000c073 	.word	0x0000c073
    bffc:	0000c087 	.word	0x0000c087
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    c000:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c002:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    c006:	f043 0301 	orr.w	r3, r3, #1
    c00a:	b2da      	uxtb	r2, r3
    c00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c00e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    c012:	68ba      	ldr	r2, [r7, #8]
    c014:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c016:	699b      	ldr	r3, [r3, #24]
    c018:	18d1      	adds	r1, r2, r3
    c01a:	68bb      	ldr	r3, [r7, #8]
    c01c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c01e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c020:	f7ff ff5e 	bl	bee0 <prvInsertTimerInActiveList>
    c024:	4603      	mov	r3, r0
    c026:	2b00      	cmp	r3, #0
    c028:	d067      	beq.n	c0fa <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    c02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c02c:	6a1b      	ldr	r3, [r3, #32]
    c02e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c030:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    c032:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c034:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    c038:	f003 0304 	and.w	r3, r3, #4
    c03c:	2b00      	cmp	r3, #0
    c03e:	d05c      	beq.n	c0fa <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    c040:	68ba      	ldr	r2, [r7, #8]
    c042:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c044:	699b      	ldr	r3, [r3, #24]
    c046:	441a      	add	r2, r3
    c048:	2300      	movs	r3, #0
    c04a:	9300      	str	r3, [sp, #0]
    c04c:	2300      	movs	r3, #0
    c04e:	2100      	movs	r1, #0
    c050:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c052:	f7ff fe09 	bl	bc68 <xTimerGenericCommand>
    c056:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
    c058:	6a3b      	ldr	r3, [r7, #32]
    c05a:	2b00      	cmp	r3, #0
    c05c:	d14d      	bne.n	c0fa <prvProcessReceivedCommands+0x196>
    c05e:	f04f 0350 	mov.w	r3, #80	; 0x50
    c062:	f383 8811 	msr	BASEPRI, r3
    c066:	f3bf 8f6f 	isb	sy
    c06a:	f3bf 8f4f 	dsb	sy
    c06e:	61bb      	str	r3, [r7, #24]
    c070:	e7fe      	b.n	c070 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    c072:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c074:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    c078:	f023 0301 	bic.w	r3, r3, #1
    c07c:	b2da      	uxtb	r2, r3
    c07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c080:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
    c084:	e039      	b.n	c0fa <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    c086:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c088:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    c08c:	f043 0301 	orr.w	r3, r3, #1
    c090:	b2da      	uxtb	r2, r3
    c092:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c094:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    c098:	68ba      	ldr	r2, [r7, #8]
    c09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c09c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    c09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c0a0:	699b      	ldr	r3, [r3, #24]
    c0a2:	2b00      	cmp	r3, #0
    c0a4:	d109      	bne.n	c0ba <prvProcessReceivedCommands+0x156>
    c0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
    c0aa:	f383 8811 	msr	BASEPRI, r3
    c0ae:	f3bf 8f6f 	isb	sy
    c0b2:	f3bf 8f4f 	dsb	sy
    c0b6:	617b      	str	r3, [r7, #20]
    c0b8:	e7fe      	b.n	c0b8 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    c0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c0bc:	699a      	ldr	r2, [r3, #24]
    c0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c0c0:	18d1      	adds	r1, r2, r3
    c0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c0c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c0c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c0c8:	f7ff ff0a 	bl	bee0 <prvInsertTimerInActiveList>
					break;
    c0cc:	e015      	b.n	c0fa <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    c0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c0d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    c0d4:	f003 0302 	and.w	r3, r3, #2
    c0d8:	2b00      	cmp	r3, #0
    c0da:	d103      	bne.n	c0e4 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
    c0dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c0de:	f000 fb55 	bl	c78c <vPortFree>
    c0e2:	e00a      	b.n	c0fa <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    c0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c0e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    c0ea:	f023 0301 	bic.w	r3, r3, #1
    c0ee:	b2da      	uxtb	r2, r3
    c0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c0f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
    c0f6:	e000      	b.n	c0fa <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
    c0f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    c0fa:	4b07      	ldr	r3, [pc, #28]	; (c118 <prvProcessReceivedCommands+0x1b4>)
    c0fc:	681b      	ldr	r3, [r3, #0]
    c0fe:	1d39      	adds	r1, r7, #4
    c100:	2200      	movs	r2, #0
    c102:	4618      	mov	r0, r3
    c104:	f7fe fc3a 	bl	a97c <xQueueReceive>
    c108:	4603      	mov	r3, r0
    c10a:	2b00      	cmp	r3, #0
    c10c:	f47f af2e 	bne.w	bf6c <prvProcessReceivedCommands+0x8>
	}
}
    c110:	bf00      	nop
    c112:	3730      	adds	r7, #48	; 0x30
    c114:	46bd      	mov	sp, r7
    c116:	bd80      	pop	{r7, pc}
    c118:	0001da20 	.word	0x0001da20

0000c11c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    c11c:	b580      	push	{r7, lr}
    c11e:	b088      	sub	sp, #32
    c120:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    c122:	e047      	b.n	c1b4 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    c124:	4b2d      	ldr	r3, [pc, #180]	; (c1dc <prvSwitchTimerLists+0xc0>)
    c126:	681b      	ldr	r3, [r3, #0]
    c128:	68db      	ldr	r3, [r3, #12]
    c12a:	681b      	ldr	r3, [r3, #0]
    c12c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    c12e:	4b2b      	ldr	r3, [pc, #172]	; (c1dc <prvSwitchTimerLists+0xc0>)
    c130:	681b      	ldr	r3, [r3, #0]
    c132:	68db      	ldr	r3, [r3, #12]
    c134:	68db      	ldr	r3, [r3, #12]
    c136:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    c138:	68fb      	ldr	r3, [r7, #12]
    c13a:	3304      	adds	r3, #4
    c13c:	4618      	mov	r0, r3
    c13e:	f7fe f967 	bl	a410 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    c142:	68fb      	ldr	r3, [r7, #12]
    c144:	6a1b      	ldr	r3, [r3, #32]
    c146:	68f8      	ldr	r0, [r7, #12]
    c148:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    c14a:	68fb      	ldr	r3, [r7, #12]
    c14c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    c150:	f003 0304 	and.w	r3, r3, #4
    c154:	2b00      	cmp	r3, #0
    c156:	d02d      	beq.n	c1b4 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    c158:	68fb      	ldr	r3, [r7, #12]
    c15a:	699b      	ldr	r3, [r3, #24]
    c15c:	693a      	ldr	r2, [r7, #16]
    c15e:	4413      	add	r3, r2
    c160:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
    c162:	68ba      	ldr	r2, [r7, #8]
    c164:	693b      	ldr	r3, [r7, #16]
    c166:	429a      	cmp	r2, r3
    c168:	d90e      	bls.n	c188 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    c16a:	68fb      	ldr	r3, [r7, #12]
    c16c:	68ba      	ldr	r2, [r7, #8]
    c16e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    c170:	68fb      	ldr	r3, [r7, #12]
    c172:	68fa      	ldr	r2, [r7, #12]
    c174:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    c176:	4b19      	ldr	r3, [pc, #100]	; (c1dc <prvSwitchTimerLists+0xc0>)
    c178:	681a      	ldr	r2, [r3, #0]
    c17a:	68fb      	ldr	r3, [r7, #12]
    c17c:	3304      	adds	r3, #4
    c17e:	4619      	mov	r1, r3
    c180:	4610      	mov	r0, r2
    c182:	f7fe f90c 	bl	a39e <vListInsert>
    c186:	e015      	b.n	c1b4 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    c188:	2300      	movs	r3, #0
    c18a:	9300      	str	r3, [sp, #0]
    c18c:	2300      	movs	r3, #0
    c18e:	693a      	ldr	r2, [r7, #16]
    c190:	2100      	movs	r1, #0
    c192:	68f8      	ldr	r0, [r7, #12]
    c194:	f7ff fd68 	bl	bc68 <xTimerGenericCommand>
    c198:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
    c19a:	687b      	ldr	r3, [r7, #4]
    c19c:	2b00      	cmp	r3, #0
    c19e:	d109      	bne.n	c1b4 <prvSwitchTimerLists+0x98>
    c1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
    c1a4:	f383 8811 	msr	BASEPRI, r3
    c1a8:	f3bf 8f6f 	isb	sy
    c1ac:	f3bf 8f4f 	dsb	sy
    c1b0:	603b      	str	r3, [r7, #0]
    c1b2:	e7fe      	b.n	c1b2 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    c1b4:	4b09      	ldr	r3, [pc, #36]	; (c1dc <prvSwitchTimerLists+0xc0>)
    c1b6:	681b      	ldr	r3, [r3, #0]
    c1b8:	681b      	ldr	r3, [r3, #0]
    c1ba:	2b00      	cmp	r3, #0
    c1bc:	d1b2      	bne.n	c124 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
    c1be:	4b07      	ldr	r3, [pc, #28]	; (c1dc <prvSwitchTimerLists+0xc0>)
    c1c0:	681b      	ldr	r3, [r3, #0]
    c1c2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
    c1c4:	4b06      	ldr	r3, [pc, #24]	; (c1e0 <prvSwitchTimerLists+0xc4>)
    c1c6:	681b      	ldr	r3, [r3, #0]
    c1c8:	4a04      	ldr	r2, [pc, #16]	; (c1dc <prvSwitchTimerLists+0xc0>)
    c1ca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
    c1cc:	4a04      	ldr	r2, [pc, #16]	; (c1e0 <prvSwitchTimerLists+0xc4>)
    c1ce:	697b      	ldr	r3, [r7, #20]
    c1d0:	6013      	str	r3, [r2, #0]
}
    c1d2:	bf00      	nop
    c1d4:	3718      	adds	r7, #24
    c1d6:	46bd      	mov	sp, r7
    c1d8:	bd80      	pop	{r7, pc}
    c1da:	bf00      	nop
    c1dc:	0001da18 	.word	0x0001da18
    c1e0:	0001da1c 	.word	0x0001da1c

0000c1e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    c1e4:	b580      	push	{r7, lr}
    c1e6:	b082      	sub	sp, #8
    c1e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    c1ea:	f000 f94b 	bl	c484 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
    c1ee:	4b15      	ldr	r3, [pc, #84]	; (c244 <prvCheckForValidListAndQueue+0x60>)
    c1f0:	681b      	ldr	r3, [r3, #0]
    c1f2:	2b00      	cmp	r3, #0
    c1f4:	d120      	bne.n	c238 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
    c1f6:	4814      	ldr	r0, [pc, #80]	; (c248 <prvCheckForValidListAndQueue+0x64>)
    c1f8:	f7fe f880 	bl	a2fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
    c1fc:	4813      	ldr	r0, [pc, #76]	; (c24c <prvCheckForValidListAndQueue+0x68>)
    c1fe:	f7fe f87d 	bl	a2fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
    c202:	4b13      	ldr	r3, [pc, #76]	; (c250 <prvCheckForValidListAndQueue+0x6c>)
    c204:	4a10      	ldr	r2, [pc, #64]	; (c248 <prvCheckForValidListAndQueue+0x64>)
    c206:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    c208:	4b12      	ldr	r3, [pc, #72]	; (c254 <prvCheckForValidListAndQueue+0x70>)
    c20a:	4a10      	ldr	r2, [pc, #64]	; (c24c <prvCheckForValidListAndQueue+0x68>)
    c20c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
    c20e:	2300      	movs	r3, #0
    c210:	9300      	str	r3, [sp, #0]
    c212:	4b11      	ldr	r3, [pc, #68]	; (c258 <prvCheckForValidListAndQueue+0x74>)
    c214:	4a11      	ldr	r2, [pc, #68]	; (c25c <prvCheckForValidListAndQueue+0x78>)
    c216:	2110      	movs	r1, #16
    c218:	200a      	movs	r0, #10
    c21a:	f7fe f98b 	bl	a534 <xQueueGenericCreateStatic>
    c21e:	4602      	mov	r2, r0
    c220:	4b08      	ldr	r3, [pc, #32]	; (c244 <prvCheckForValidListAndQueue+0x60>)
    c222:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
    c224:	4b07      	ldr	r3, [pc, #28]	; (c244 <prvCheckForValidListAndQueue+0x60>)
    c226:	681b      	ldr	r3, [r3, #0]
    c228:	2b00      	cmp	r3, #0
    c22a:	d005      	beq.n	c238 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
    c22c:	4b05      	ldr	r3, [pc, #20]	; (c244 <prvCheckForValidListAndQueue+0x60>)
    c22e:	681b      	ldr	r3, [r3, #0]
    c230:	490b      	ldr	r1, [pc, #44]	; (c260 <prvCheckForValidListAndQueue+0x7c>)
    c232:	4618      	mov	r0, r3
    c234:	f7fe fd8e 	bl	ad54 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    c238:	f000 f952 	bl	c4e0 <vPortExitCritical>
}
    c23c:	bf00      	nop
    c23e:	46bd      	mov	sp, r7
    c240:	bd80      	pop	{r7, pc}
    c242:	bf00      	nop
    c244:	0001da20 	.word	0x0001da20
    c248:	0001d9f0 	.word	0x0001d9f0
    c24c:	0001da04 	.word	0x0001da04
    c250:	0001da18 	.word	0x0001da18
    c254:	0001da1c 	.word	0x0001da1c
    c258:	0001dacc 	.word	0x0001dacc
    c25c:	0001da2c 	.word	0x0001da2c
    c260:	0000cd8c 	.word	0x0000cd8c

0000c264 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    c264:	b480      	push	{r7}
    c266:	b085      	sub	sp, #20
    c268:	af00      	add	r7, sp, #0
    c26a:	60f8      	str	r0, [r7, #12]
    c26c:	60b9      	str	r1, [r7, #8]
    c26e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
    c270:	68fb      	ldr	r3, [r7, #12]
    c272:	3b04      	subs	r3, #4
    c274:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    c276:	68fb      	ldr	r3, [r7, #12]
    c278:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    c27c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    c27e:	68fb      	ldr	r3, [r7, #12]
    c280:	3b04      	subs	r3, #4
    c282:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
    c284:	68bb      	ldr	r3, [r7, #8]
    c286:	f023 0201 	bic.w	r2, r3, #1
    c28a:	68fb      	ldr	r3, [r7, #12]
    c28c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    c28e:	68fb      	ldr	r3, [r7, #12]
    c290:	3b04      	subs	r3, #4
    c292:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    c294:	4a0c      	ldr	r2, [pc, #48]	; (c2c8 <pxPortInitialiseStack+0x64>)
    c296:	68fb      	ldr	r3, [r7, #12]
    c298:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    c29a:	68fb      	ldr	r3, [r7, #12]
    c29c:	3b14      	subs	r3, #20
    c29e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    c2a0:	687a      	ldr	r2, [r7, #4]
    c2a2:	68fb      	ldr	r3, [r7, #12]
    c2a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
    c2a6:	68fb      	ldr	r3, [r7, #12]
    c2a8:	3b04      	subs	r3, #4
    c2aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
    c2ac:	68fb      	ldr	r3, [r7, #12]
    c2ae:	f06f 0202 	mvn.w	r2, #2
    c2b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    c2b4:	68fb      	ldr	r3, [r7, #12]
    c2b6:	3b20      	subs	r3, #32
    c2b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    c2ba:	68fb      	ldr	r3, [r7, #12]
}
    c2bc:	4618      	mov	r0, r3
    c2be:	3714      	adds	r7, #20
    c2c0:	46bd      	mov	sp, r7
    c2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    c2c6:	4770      	bx	lr
    c2c8:	0000c2cd 	.word	0x0000c2cd

0000c2cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    c2cc:	b480      	push	{r7}
    c2ce:	b085      	sub	sp, #20
    c2d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
    c2d2:	2300      	movs	r3, #0
    c2d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    c2d6:	4b11      	ldr	r3, [pc, #68]	; (c31c <prvTaskExitError+0x50>)
    c2d8:	681b      	ldr	r3, [r3, #0]
    c2da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    c2de:	d009      	beq.n	c2f4 <prvTaskExitError+0x28>
    c2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
    c2e4:	f383 8811 	msr	BASEPRI, r3
    c2e8:	f3bf 8f6f 	isb	sy
    c2ec:	f3bf 8f4f 	dsb	sy
    c2f0:	60fb      	str	r3, [r7, #12]
    c2f2:	e7fe      	b.n	c2f2 <prvTaskExitError+0x26>
    c2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
    c2f8:	f383 8811 	msr	BASEPRI, r3
    c2fc:	f3bf 8f6f 	isb	sy
    c300:	f3bf 8f4f 	dsb	sy
    c304:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
    c306:	bf00      	nop
    c308:	687b      	ldr	r3, [r7, #4]
    c30a:	2b00      	cmp	r3, #0
    c30c:	d0fc      	beq.n	c308 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    c30e:	bf00      	nop
    c310:	3714      	adds	r7, #20
    c312:	46bd      	mov	sp, r7
    c314:	f85d 7b04 	ldr.w	r7, [sp], #4
    c318:	4770      	bx	lr
    c31a:	bf00      	nop
    c31c:	0001cdb4 	.word	0x0001cdb4

0000c320 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
    c320:	4808      	ldr	r0, [pc, #32]	; (c344 <prvPortStartFirstTask+0x24>)
    c322:	6800      	ldr	r0, [r0, #0]
    c324:	6800      	ldr	r0, [r0, #0]
    c326:	f380 8808 	msr	MSP, r0
    c32a:	f04f 0000 	mov.w	r0, #0
    c32e:	f380 8814 	msr	CONTROL, r0
    c332:	b662      	cpsie	i
    c334:	b661      	cpsie	f
    c336:	f3bf 8f4f 	dsb	sy
    c33a:	f3bf 8f6f 	isb	sy
    c33e:	df00      	svc	0
    c340:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
    c342:	bf00      	nop
    c344:	e000ed08 	.word	0xe000ed08

0000c348 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    c348:	b580      	push	{r7, lr}
    c34a:	b086      	sub	sp, #24
    c34c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
    c34e:	4b44      	ldr	r3, [pc, #272]	; (c460 <xPortStartScheduler+0x118>)
    c350:	681b      	ldr	r3, [r3, #0]
    c352:	4a44      	ldr	r2, [pc, #272]	; (c464 <xPortStartScheduler+0x11c>)
    c354:	4293      	cmp	r3, r2
    c356:	d109      	bne.n	c36c <xPortStartScheduler+0x24>
    c358:	f04f 0350 	mov.w	r3, #80	; 0x50
    c35c:	f383 8811 	msr	BASEPRI, r3
    c360:	f3bf 8f6f 	isb	sy
    c364:	f3bf 8f4f 	dsb	sy
    c368:	613b      	str	r3, [r7, #16]
    c36a:	e7fe      	b.n	c36a <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
    c36c:	4b3c      	ldr	r3, [pc, #240]	; (c460 <xPortStartScheduler+0x118>)
    c36e:	681b      	ldr	r3, [r3, #0]
    c370:	4a3d      	ldr	r2, [pc, #244]	; (c468 <xPortStartScheduler+0x120>)
    c372:	4293      	cmp	r3, r2
    c374:	d109      	bne.n	c38a <xPortStartScheduler+0x42>
    c376:	f04f 0350 	mov.w	r3, #80	; 0x50
    c37a:	f383 8811 	msr	BASEPRI, r3
    c37e:	f3bf 8f6f 	isb	sy
    c382:	f3bf 8f4f 	dsb	sy
    c386:	60fb      	str	r3, [r7, #12]
    c388:	e7fe      	b.n	c388 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
    c38a:	4b38      	ldr	r3, [pc, #224]	; (c46c <xPortStartScheduler+0x124>)
    c38c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
    c38e:	697b      	ldr	r3, [r7, #20]
    c390:	781b      	ldrb	r3, [r3, #0]
    c392:	b2db      	uxtb	r3, r3
    c394:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
    c396:	697b      	ldr	r3, [r7, #20]
    c398:	22ff      	movs	r2, #255	; 0xff
    c39a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
    c39c:	697b      	ldr	r3, [r7, #20]
    c39e:	781b      	ldrb	r3, [r3, #0]
    c3a0:	b2db      	uxtb	r3, r3
    c3a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
    c3a4:	78fb      	ldrb	r3, [r7, #3]
    c3a6:	b2db      	uxtb	r3, r3
    c3a8:	f003 0350 	and.w	r3, r3, #80	; 0x50
    c3ac:	b2da      	uxtb	r2, r3
    c3ae:	4b30      	ldr	r3, [pc, #192]	; (c470 <xPortStartScheduler+0x128>)
    c3b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
    c3b2:	4b30      	ldr	r3, [pc, #192]	; (c474 <xPortStartScheduler+0x12c>)
    c3b4:	2207      	movs	r2, #7
    c3b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
    c3b8:	e009      	b.n	c3ce <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
    c3ba:	4b2e      	ldr	r3, [pc, #184]	; (c474 <xPortStartScheduler+0x12c>)
    c3bc:	681b      	ldr	r3, [r3, #0]
    c3be:	3b01      	subs	r3, #1
    c3c0:	4a2c      	ldr	r2, [pc, #176]	; (c474 <xPortStartScheduler+0x12c>)
    c3c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
    c3c4:	78fb      	ldrb	r3, [r7, #3]
    c3c6:	b2db      	uxtb	r3, r3
    c3c8:	005b      	lsls	r3, r3, #1
    c3ca:	b2db      	uxtb	r3, r3
    c3cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
    c3ce:	78fb      	ldrb	r3, [r7, #3]
    c3d0:	b2db      	uxtb	r3, r3
    c3d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c3d6:	2b80      	cmp	r3, #128	; 0x80
    c3d8:	d0ef      	beq.n	c3ba <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
    c3da:	4b26      	ldr	r3, [pc, #152]	; (c474 <xPortStartScheduler+0x12c>)
    c3dc:	681b      	ldr	r3, [r3, #0]
    c3de:	f1c3 0307 	rsb	r3, r3, #7
    c3e2:	2b04      	cmp	r3, #4
    c3e4:	d009      	beq.n	c3fa <xPortStartScheduler+0xb2>
    c3e6:	f04f 0350 	mov.w	r3, #80	; 0x50
    c3ea:	f383 8811 	msr	BASEPRI, r3
    c3ee:	f3bf 8f6f 	isb	sy
    c3f2:	f3bf 8f4f 	dsb	sy
    c3f6:	60bb      	str	r3, [r7, #8]
    c3f8:	e7fe      	b.n	c3f8 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
    c3fa:	4b1e      	ldr	r3, [pc, #120]	; (c474 <xPortStartScheduler+0x12c>)
    c3fc:	681b      	ldr	r3, [r3, #0]
    c3fe:	021b      	lsls	r3, r3, #8
    c400:	4a1c      	ldr	r2, [pc, #112]	; (c474 <xPortStartScheduler+0x12c>)
    c402:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
    c404:	4b1b      	ldr	r3, [pc, #108]	; (c474 <xPortStartScheduler+0x12c>)
    c406:	681b      	ldr	r3, [r3, #0]
    c408:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    c40c:	4a19      	ldr	r2, [pc, #100]	; (c474 <xPortStartScheduler+0x12c>)
    c40e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
    c410:	687b      	ldr	r3, [r7, #4]
    c412:	b2da      	uxtb	r2, r3
    c414:	697b      	ldr	r3, [r7, #20]
    c416:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
    c418:	4b17      	ldr	r3, [pc, #92]	; (c478 <xPortStartScheduler+0x130>)
    c41a:	681b      	ldr	r3, [r3, #0]
    c41c:	4a16      	ldr	r2, [pc, #88]	; (c478 <xPortStartScheduler+0x130>)
    c41e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    c422:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
    c424:	4b14      	ldr	r3, [pc, #80]	; (c478 <xPortStartScheduler+0x130>)
    c426:	681b      	ldr	r3, [r3, #0]
    c428:	4a13      	ldr	r2, [pc, #76]	; (c478 <xPortStartScheduler+0x130>)
    c42a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
    c42e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
    c430:	f000 f87e 	bl	c530 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    c434:	4b11      	ldr	r3, [pc, #68]	; (c47c <xPortStartScheduler+0x134>)
    c436:	2200      	movs	r2, #0
    c438:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
    c43a:	f000 f89d 	bl	c578 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
    c43e:	4b10      	ldr	r3, [pc, #64]	; (c480 <xPortStartScheduler+0x138>)
    c440:	681b      	ldr	r3, [r3, #0]
    c442:	4a0f      	ldr	r2, [pc, #60]	; (c480 <xPortStartScheduler+0x138>)
    c444:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    c448:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    c44a:	f7ff ff69 	bl	c320 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
    c44e:	f7ff f885 	bl	b55c <vTaskSwitchContext>
	prvTaskExitError();
    c452:	f7ff ff3b 	bl	c2cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
    c456:	2300      	movs	r3, #0
}
    c458:	4618      	mov	r0, r3
    c45a:	3718      	adds	r7, #24
    c45c:	46bd      	mov	sp, r7
    c45e:	bd80      	pop	{r7, pc}
    c460:	e000ed00 	.word	0xe000ed00
    c464:	410fc271 	.word	0x410fc271
    c468:	410fc270 	.word	0x410fc270
    c46c:	e000e400 	.word	0xe000e400
    c470:	0001db1c 	.word	0x0001db1c
    c474:	0001db20 	.word	0x0001db20
    c478:	e000ed20 	.word	0xe000ed20
    c47c:	0001cdb4 	.word	0x0001cdb4
    c480:	e000ef34 	.word	0xe000ef34

0000c484 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    c484:	b480      	push	{r7}
    c486:	b083      	sub	sp, #12
    c488:	af00      	add	r7, sp, #0
    c48a:	f04f 0350 	mov.w	r3, #80	; 0x50
    c48e:	f383 8811 	msr	BASEPRI, r3
    c492:	f3bf 8f6f 	isb	sy
    c496:	f3bf 8f4f 	dsb	sy
    c49a:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
    c49c:	4b0e      	ldr	r3, [pc, #56]	; (c4d8 <vPortEnterCritical+0x54>)
    c49e:	681b      	ldr	r3, [r3, #0]
    c4a0:	3301      	adds	r3, #1
    c4a2:	4a0d      	ldr	r2, [pc, #52]	; (c4d8 <vPortEnterCritical+0x54>)
    c4a4:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
    c4a6:	4b0c      	ldr	r3, [pc, #48]	; (c4d8 <vPortEnterCritical+0x54>)
    c4a8:	681b      	ldr	r3, [r3, #0]
    c4aa:	2b01      	cmp	r3, #1
    c4ac:	d10e      	bne.n	c4cc <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    c4ae:	4b0b      	ldr	r3, [pc, #44]	; (c4dc <vPortEnterCritical+0x58>)
    c4b0:	681b      	ldr	r3, [r3, #0]
    c4b2:	b2db      	uxtb	r3, r3
    c4b4:	2b00      	cmp	r3, #0
    c4b6:	d009      	beq.n	c4cc <vPortEnterCritical+0x48>
    c4b8:	f04f 0350 	mov.w	r3, #80	; 0x50
    c4bc:	f383 8811 	msr	BASEPRI, r3
    c4c0:	f3bf 8f6f 	isb	sy
    c4c4:	f3bf 8f4f 	dsb	sy
    c4c8:	603b      	str	r3, [r7, #0]
    c4ca:	e7fe      	b.n	c4ca <vPortEnterCritical+0x46>
	}
}
    c4cc:	bf00      	nop
    c4ce:	370c      	adds	r7, #12
    c4d0:	46bd      	mov	sp, r7
    c4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    c4d6:	4770      	bx	lr
    c4d8:	0001cdb4 	.word	0x0001cdb4
    c4dc:	e000ed04 	.word	0xe000ed04

0000c4e0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    c4e0:	b480      	push	{r7}
    c4e2:	b083      	sub	sp, #12
    c4e4:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
    c4e6:	4b11      	ldr	r3, [pc, #68]	; (c52c <vPortExitCritical+0x4c>)
    c4e8:	681b      	ldr	r3, [r3, #0]
    c4ea:	2b00      	cmp	r3, #0
    c4ec:	d109      	bne.n	c502 <vPortExitCritical+0x22>
    c4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
    c4f2:	f383 8811 	msr	BASEPRI, r3
    c4f6:	f3bf 8f6f 	isb	sy
    c4fa:	f3bf 8f4f 	dsb	sy
    c4fe:	607b      	str	r3, [r7, #4]
    c500:	e7fe      	b.n	c500 <vPortExitCritical+0x20>
	uxCriticalNesting--;
    c502:	4b0a      	ldr	r3, [pc, #40]	; (c52c <vPortExitCritical+0x4c>)
    c504:	681b      	ldr	r3, [r3, #0]
    c506:	3b01      	subs	r3, #1
    c508:	4a08      	ldr	r2, [pc, #32]	; (c52c <vPortExitCritical+0x4c>)
    c50a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
    c50c:	4b07      	ldr	r3, [pc, #28]	; (c52c <vPortExitCritical+0x4c>)
    c50e:	681b      	ldr	r3, [r3, #0]
    c510:	2b00      	cmp	r3, #0
    c512:	d104      	bne.n	c51e <vPortExitCritical+0x3e>
    c514:	2300      	movs	r3, #0
    c516:	603b      	str	r3, [r7, #0]
	__asm volatile
    c518:	683b      	ldr	r3, [r7, #0]
    c51a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
    c51e:	bf00      	nop
    c520:	370c      	adds	r7, #12
    c522:	46bd      	mov	sp, r7
    c524:	f85d 7b04 	ldr.w	r7, [sp], #4
    c528:	4770      	bx	lr
    c52a:	bf00      	nop
    c52c:	0001cdb4 	.word	0x0001cdb4

0000c530 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
    c530:	b480      	push	{r7}
    c532:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
    c534:	4b0b      	ldr	r3, [pc, #44]	; (c564 <vPortSetupTimerInterrupt+0x34>)
    c536:	2200      	movs	r2, #0
    c538:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
    c53a:	4b0b      	ldr	r3, [pc, #44]	; (c568 <vPortSetupTimerInterrupt+0x38>)
    c53c:	2200      	movs	r2, #0
    c53e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    c540:	4b0a      	ldr	r3, [pc, #40]	; (c56c <vPortSetupTimerInterrupt+0x3c>)
    c542:	681b      	ldr	r3, [r3, #0]
    c544:	4a0a      	ldr	r2, [pc, #40]	; (c570 <vPortSetupTimerInterrupt+0x40>)
    c546:	fba2 2303 	umull	r2, r3, r2, r3
    c54a:	099b      	lsrs	r3, r3, #6
    c54c:	4a09      	ldr	r2, [pc, #36]	; (c574 <vPortSetupTimerInterrupt+0x44>)
    c54e:	3b01      	subs	r3, #1
    c550:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
    c552:	4b04      	ldr	r3, [pc, #16]	; (c564 <vPortSetupTimerInterrupt+0x34>)
    c554:	2207      	movs	r2, #7
    c556:	601a      	str	r2, [r3, #0]
}
    c558:	bf00      	nop
    c55a:	46bd      	mov	sp, r7
    c55c:	f85d 7b04 	ldr.w	r7, [sp], #4
    c560:	4770      	bx	lr
    c562:	bf00      	nop
    c564:	e000e010 	.word	0xe000e010
    c568:	e000e018 	.word	0xe000e018
    c56c:	0001cdac 	.word	0x0001cdac
    c570:	10624dd3 	.word	0x10624dd3
    c574:	e000e014 	.word	0xe000e014

0000c578 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
    c578:	f8df 000c 	ldr.w	r0, [pc, #12]	; c588 <vPortEnableVFP+0x10>
    c57c:	6801      	ldr	r1, [r0, #0]
    c57e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c582:	6001      	str	r1, [r0, #0]
    c584:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
    c586:	bf00      	nop
    c588:	e000ed88 	.word	0xe000ed88

0000c58c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
    c58c:	b480      	push	{r7}
    c58e:	b085      	sub	sp, #20
    c590:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
    c592:	f3ef 8305 	mrs	r3, IPSR
    c596:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
    c598:	68fb      	ldr	r3, [r7, #12]
    c59a:	2b0f      	cmp	r3, #15
    c59c:	d913      	bls.n	c5c6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
    c59e:	4a16      	ldr	r2, [pc, #88]	; (c5f8 <vPortValidateInterruptPriority+0x6c>)
    c5a0:	68fb      	ldr	r3, [r7, #12]
    c5a2:	4413      	add	r3, r2
    c5a4:	781b      	ldrb	r3, [r3, #0]
    c5a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
    c5a8:	4b14      	ldr	r3, [pc, #80]	; (c5fc <vPortValidateInterruptPriority+0x70>)
    c5aa:	781b      	ldrb	r3, [r3, #0]
    c5ac:	7afa      	ldrb	r2, [r7, #11]
    c5ae:	429a      	cmp	r2, r3
    c5b0:	d209      	bcs.n	c5c6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
    c5b2:	f04f 0350 	mov.w	r3, #80	; 0x50
    c5b6:	f383 8811 	msr	BASEPRI, r3
    c5ba:	f3bf 8f6f 	isb	sy
    c5be:	f3bf 8f4f 	dsb	sy
    c5c2:	607b      	str	r3, [r7, #4]
    c5c4:	e7fe      	b.n	c5c4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
    c5c6:	4b0e      	ldr	r3, [pc, #56]	; (c600 <vPortValidateInterruptPriority+0x74>)
    c5c8:	681b      	ldr	r3, [r3, #0]
    c5ca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
    c5ce:	4b0d      	ldr	r3, [pc, #52]	; (c604 <vPortValidateInterruptPriority+0x78>)
    c5d0:	681b      	ldr	r3, [r3, #0]
    c5d2:	429a      	cmp	r2, r3
    c5d4:	d909      	bls.n	c5ea <vPortValidateInterruptPriority+0x5e>
    c5d6:	f04f 0350 	mov.w	r3, #80	; 0x50
    c5da:	f383 8811 	msr	BASEPRI, r3
    c5de:	f3bf 8f6f 	isb	sy
    c5e2:	f3bf 8f4f 	dsb	sy
    c5e6:	603b      	str	r3, [r7, #0]
    c5e8:	e7fe      	b.n	c5e8 <vPortValidateInterruptPriority+0x5c>
	}
    c5ea:	bf00      	nop
    c5ec:	3714      	adds	r7, #20
    c5ee:	46bd      	mov	sp, r7
    c5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    c5f4:	4770      	bx	lr
    c5f6:	bf00      	nop
    c5f8:	e000e3f0 	.word	0xe000e3f0
    c5fc:	0001db1c 	.word	0x0001db1c
    c600:	e000ed0c 	.word	0xe000ed0c
    c604:	0001db20 	.word	0x0001db20

0000c608 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    c608:	b580      	push	{r7, lr}
    c60a:	b08a      	sub	sp, #40	; 0x28
    c60c:	af00      	add	r7, sp, #0
    c60e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
    c610:	2300      	movs	r3, #0
    c612:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
    c614:	f7fe fe30 	bl	b278 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
    c618:	4b57      	ldr	r3, [pc, #348]	; (c778 <pvPortMalloc+0x170>)
    c61a:	681b      	ldr	r3, [r3, #0]
    c61c:	2b00      	cmp	r3, #0
    c61e:	d101      	bne.n	c624 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
    c620:	f000 f90c 	bl	c83c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    c624:	4b55      	ldr	r3, [pc, #340]	; (c77c <pvPortMalloc+0x174>)
    c626:	681a      	ldr	r2, [r3, #0]
    c628:	687b      	ldr	r3, [r7, #4]
    c62a:	4013      	ands	r3, r2
    c62c:	2b00      	cmp	r3, #0
    c62e:	f040 808c 	bne.w	c74a <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
    c632:	687b      	ldr	r3, [r7, #4]
    c634:	2b00      	cmp	r3, #0
    c636:	d01c      	beq.n	c672 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
    c638:	2208      	movs	r2, #8
    c63a:	687b      	ldr	r3, [r7, #4]
    c63c:	4413      	add	r3, r2
    c63e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
    c640:	687b      	ldr	r3, [r7, #4]
    c642:	f003 0307 	and.w	r3, r3, #7
    c646:	2b00      	cmp	r3, #0
    c648:	d013      	beq.n	c672 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    c64a:	687b      	ldr	r3, [r7, #4]
    c64c:	f023 0307 	bic.w	r3, r3, #7
    c650:	3308      	adds	r3, #8
    c652:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
    c654:	687b      	ldr	r3, [r7, #4]
    c656:	f003 0307 	and.w	r3, r3, #7
    c65a:	2b00      	cmp	r3, #0
    c65c:	d009      	beq.n	c672 <pvPortMalloc+0x6a>
    c65e:	f04f 0350 	mov.w	r3, #80	; 0x50
    c662:	f383 8811 	msr	BASEPRI, r3
    c666:	f3bf 8f6f 	isb	sy
    c66a:	f3bf 8f4f 	dsb	sy
    c66e:	617b      	str	r3, [r7, #20]
    c670:	e7fe      	b.n	c670 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    c672:	687b      	ldr	r3, [r7, #4]
    c674:	2b00      	cmp	r3, #0
    c676:	d068      	beq.n	c74a <pvPortMalloc+0x142>
    c678:	4b41      	ldr	r3, [pc, #260]	; (c780 <pvPortMalloc+0x178>)
    c67a:	681b      	ldr	r3, [r3, #0]
    c67c:	687a      	ldr	r2, [r7, #4]
    c67e:	429a      	cmp	r2, r3
    c680:	d863      	bhi.n	c74a <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
    c682:	4b40      	ldr	r3, [pc, #256]	; (c784 <pvPortMalloc+0x17c>)
    c684:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
    c686:	4b3f      	ldr	r3, [pc, #252]	; (c784 <pvPortMalloc+0x17c>)
    c688:	681b      	ldr	r3, [r3, #0]
    c68a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    c68c:	e004      	b.n	c698 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
    c68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c690:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
    c692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c694:	681b      	ldr	r3, [r3, #0]
    c696:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    c698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c69a:	685b      	ldr	r3, [r3, #4]
    c69c:	687a      	ldr	r2, [r7, #4]
    c69e:	429a      	cmp	r2, r3
    c6a0:	d903      	bls.n	c6aa <pvPortMalloc+0xa2>
    c6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c6a4:	681b      	ldr	r3, [r3, #0]
    c6a6:	2b00      	cmp	r3, #0
    c6a8:	d1f1      	bne.n	c68e <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
    c6aa:	4b33      	ldr	r3, [pc, #204]	; (c778 <pvPortMalloc+0x170>)
    c6ac:	681b      	ldr	r3, [r3, #0]
    c6ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c6b0:	429a      	cmp	r2, r3
    c6b2:	d04a      	beq.n	c74a <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    c6b4:	6a3b      	ldr	r3, [r7, #32]
    c6b6:	681b      	ldr	r3, [r3, #0]
    c6b8:	2208      	movs	r2, #8
    c6ba:	4413      	add	r3, r2
    c6bc:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    c6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c6c0:	681a      	ldr	r2, [r3, #0]
    c6c2:	6a3b      	ldr	r3, [r7, #32]
    c6c4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    c6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c6c8:	685a      	ldr	r2, [r3, #4]
    c6ca:	687b      	ldr	r3, [r7, #4]
    c6cc:	1ad2      	subs	r2, r2, r3
    c6ce:	2308      	movs	r3, #8
    c6d0:	005b      	lsls	r3, r3, #1
    c6d2:	429a      	cmp	r2, r3
    c6d4:	d91e      	bls.n	c714 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    c6d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c6d8:	687b      	ldr	r3, [r7, #4]
    c6da:	4413      	add	r3, r2
    c6dc:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
    c6de:	69bb      	ldr	r3, [r7, #24]
    c6e0:	f003 0307 	and.w	r3, r3, #7
    c6e4:	2b00      	cmp	r3, #0
    c6e6:	d009      	beq.n	c6fc <pvPortMalloc+0xf4>
    c6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
    c6ec:	f383 8811 	msr	BASEPRI, r3
    c6f0:	f3bf 8f6f 	isb	sy
    c6f4:	f3bf 8f4f 	dsb	sy
    c6f8:	613b      	str	r3, [r7, #16]
    c6fa:	e7fe      	b.n	c6fa <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    c6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c6fe:	685a      	ldr	r2, [r3, #4]
    c700:	687b      	ldr	r3, [r7, #4]
    c702:	1ad2      	subs	r2, r2, r3
    c704:	69bb      	ldr	r3, [r7, #24]
    c706:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
    c708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c70a:	687a      	ldr	r2, [r7, #4]
    c70c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
    c70e:	69b8      	ldr	r0, [r7, #24]
    c710:	f000 f8f6 	bl	c900 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
    c714:	4b1a      	ldr	r3, [pc, #104]	; (c780 <pvPortMalloc+0x178>)
    c716:	681a      	ldr	r2, [r3, #0]
    c718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c71a:	685b      	ldr	r3, [r3, #4]
    c71c:	1ad3      	subs	r3, r2, r3
    c71e:	4a18      	ldr	r2, [pc, #96]	; (c780 <pvPortMalloc+0x178>)
    c720:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    c722:	4b17      	ldr	r3, [pc, #92]	; (c780 <pvPortMalloc+0x178>)
    c724:	681a      	ldr	r2, [r3, #0]
    c726:	4b18      	ldr	r3, [pc, #96]	; (c788 <pvPortMalloc+0x180>)
    c728:	681b      	ldr	r3, [r3, #0]
    c72a:	429a      	cmp	r2, r3
    c72c:	d203      	bcs.n	c736 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    c72e:	4b14      	ldr	r3, [pc, #80]	; (c780 <pvPortMalloc+0x178>)
    c730:	681b      	ldr	r3, [r3, #0]
    c732:	4a15      	ldr	r2, [pc, #84]	; (c788 <pvPortMalloc+0x180>)
    c734:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
    c736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c738:	685a      	ldr	r2, [r3, #4]
    c73a:	4b10      	ldr	r3, [pc, #64]	; (c77c <pvPortMalloc+0x174>)
    c73c:	681b      	ldr	r3, [r3, #0]
    c73e:	431a      	orrs	r2, r3
    c740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c742:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
    c744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c746:	2200      	movs	r2, #0
    c748:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    c74a:	f7fe fda3 	bl	b294 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    c74e:	69fb      	ldr	r3, [r7, #28]
    c750:	f003 0307 	and.w	r3, r3, #7
    c754:	2b00      	cmp	r3, #0
    c756:	d009      	beq.n	c76c <pvPortMalloc+0x164>
    c758:	f04f 0350 	mov.w	r3, #80	; 0x50
    c75c:	f383 8811 	msr	BASEPRI, r3
    c760:	f3bf 8f6f 	isb	sy
    c764:	f3bf 8f4f 	dsb	sy
    c768:	60fb      	str	r3, [r7, #12]
    c76a:	e7fe      	b.n	c76a <pvPortMalloc+0x162>
	return pvReturn;
    c76c:	69fb      	ldr	r3, [r7, #28]
}
    c76e:	4618      	mov	r0, r3
    c770:	3728      	adds	r7, #40	; 0x28
    c772:	46bd      	mov	sp, r7
    c774:	bd80      	pop	{r7, pc}
    c776:	bf00      	nop
    c778:	0002172c 	.word	0x0002172c
    c77c:	00021738 	.word	0x00021738
    c780:	00021730 	.word	0x00021730
    c784:	00021724 	.word	0x00021724
    c788:	00021734 	.word	0x00021734

0000c78c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    c78c:	b580      	push	{r7, lr}
    c78e:	b086      	sub	sp, #24
    c790:	af00      	add	r7, sp, #0
    c792:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
    c794:	687b      	ldr	r3, [r7, #4]
    c796:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
    c798:	687b      	ldr	r3, [r7, #4]
    c79a:	2b00      	cmp	r3, #0
    c79c:	d046      	beq.n	c82c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
    c79e:	2308      	movs	r3, #8
    c7a0:	425b      	negs	r3, r3
    c7a2:	697a      	ldr	r2, [r7, #20]
    c7a4:	4413      	add	r3, r2
    c7a6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
    c7a8:	697b      	ldr	r3, [r7, #20]
    c7aa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
    c7ac:	693b      	ldr	r3, [r7, #16]
    c7ae:	685a      	ldr	r2, [r3, #4]
    c7b0:	4b20      	ldr	r3, [pc, #128]	; (c834 <vPortFree+0xa8>)
    c7b2:	681b      	ldr	r3, [r3, #0]
    c7b4:	4013      	ands	r3, r2
    c7b6:	2b00      	cmp	r3, #0
    c7b8:	d109      	bne.n	c7ce <vPortFree+0x42>
    c7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
    c7be:	f383 8811 	msr	BASEPRI, r3
    c7c2:	f3bf 8f6f 	isb	sy
    c7c6:	f3bf 8f4f 	dsb	sy
    c7ca:	60fb      	str	r3, [r7, #12]
    c7cc:	e7fe      	b.n	c7cc <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
    c7ce:	693b      	ldr	r3, [r7, #16]
    c7d0:	681b      	ldr	r3, [r3, #0]
    c7d2:	2b00      	cmp	r3, #0
    c7d4:	d009      	beq.n	c7ea <vPortFree+0x5e>
    c7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
    c7da:	f383 8811 	msr	BASEPRI, r3
    c7de:	f3bf 8f6f 	isb	sy
    c7e2:	f3bf 8f4f 	dsb	sy
    c7e6:	60bb      	str	r3, [r7, #8]
    c7e8:	e7fe      	b.n	c7e8 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    c7ea:	693b      	ldr	r3, [r7, #16]
    c7ec:	685a      	ldr	r2, [r3, #4]
    c7ee:	4b11      	ldr	r3, [pc, #68]	; (c834 <vPortFree+0xa8>)
    c7f0:	681b      	ldr	r3, [r3, #0]
    c7f2:	4013      	ands	r3, r2
    c7f4:	2b00      	cmp	r3, #0
    c7f6:	d019      	beq.n	c82c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
    c7f8:	693b      	ldr	r3, [r7, #16]
    c7fa:	681b      	ldr	r3, [r3, #0]
    c7fc:	2b00      	cmp	r3, #0
    c7fe:	d115      	bne.n	c82c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    c800:	693b      	ldr	r3, [r7, #16]
    c802:	685a      	ldr	r2, [r3, #4]
    c804:	4b0b      	ldr	r3, [pc, #44]	; (c834 <vPortFree+0xa8>)
    c806:	681b      	ldr	r3, [r3, #0]
    c808:	43db      	mvns	r3, r3
    c80a:	401a      	ands	r2, r3
    c80c:	693b      	ldr	r3, [r7, #16]
    c80e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
    c810:	f7fe fd32 	bl	b278 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
    c814:	693b      	ldr	r3, [r7, #16]
    c816:	685a      	ldr	r2, [r3, #4]
    c818:	4b07      	ldr	r3, [pc, #28]	; (c838 <vPortFree+0xac>)
    c81a:	681b      	ldr	r3, [r3, #0]
    c81c:	4413      	add	r3, r2
    c81e:	4a06      	ldr	r2, [pc, #24]	; (c838 <vPortFree+0xac>)
    c820:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    c822:	6938      	ldr	r0, [r7, #16]
    c824:	f000 f86c 	bl	c900 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
    c828:	f7fe fd34 	bl	b294 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    c82c:	bf00      	nop
    c82e:	3718      	adds	r7, #24
    c830:	46bd      	mov	sp, r7
    c832:	bd80      	pop	{r7, pc}
    c834:	00021738 	.word	0x00021738
    c838:	00021730 	.word	0x00021730

0000c83c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
    c83c:	b480      	push	{r7}
    c83e:	b085      	sub	sp, #20
    c840:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
    c842:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
    c846:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
    c848:	4b27      	ldr	r3, [pc, #156]	; (c8e8 <prvHeapInit+0xac>)
    c84a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
    c84c:	68fb      	ldr	r3, [r7, #12]
    c84e:	f003 0307 	and.w	r3, r3, #7
    c852:	2b00      	cmp	r3, #0
    c854:	d00c      	beq.n	c870 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
    c856:	68fb      	ldr	r3, [r7, #12]
    c858:	3307      	adds	r3, #7
    c85a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    c85c:	68fb      	ldr	r3, [r7, #12]
    c85e:	f023 0307 	bic.w	r3, r3, #7
    c862:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
    c864:	68ba      	ldr	r2, [r7, #8]
    c866:	68fb      	ldr	r3, [r7, #12]
    c868:	1ad3      	subs	r3, r2, r3
    c86a:	4a1f      	ldr	r2, [pc, #124]	; (c8e8 <prvHeapInit+0xac>)
    c86c:	4413      	add	r3, r2
    c86e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
    c870:	68fb      	ldr	r3, [r7, #12]
    c872:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    c874:	4a1d      	ldr	r2, [pc, #116]	; (c8ec <prvHeapInit+0xb0>)
    c876:	687b      	ldr	r3, [r7, #4]
    c878:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
    c87a:	4b1c      	ldr	r3, [pc, #112]	; (c8ec <prvHeapInit+0xb0>)
    c87c:	2200      	movs	r2, #0
    c87e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    c880:	687b      	ldr	r3, [r7, #4]
    c882:	68ba      	ldr	r2, [r7, #8]
    c884:	4413      	add	r3, r2
    c886:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
    c888:	2208      	movs	r2, #8
    c88a:	68fb      	ldr	r3, [r7, #12]
    c88c:	1a9b      	subs	r3, r3, r2
    c88e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    c890:	68fb      	ldr	r3, [r7, #12]
    c892:	f023 0307 	bic.w	r3, r3, #7
    c896:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
    c898:	68fb      	ldr	r3, [r7, #12]
    c89a:	4a15      	ldr	r2, [pc, #84]	; (c8f0 <prvHeapInit+0xb4>)
    c89c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
    c89e:	4b14      	ldr	r3, [pc, #80]	; (c8f0 <prvHeapInit+0xb4>)
    c8a0:	681b      	ldr	r3, [r3, #0]
    c8a2:	2200      	movs	r2, #0
    c8a4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
    c8a6:	4b12      	ldr	r3, [pc, #72]	; (c8f0 <prvHeapInit+0xb4>)
    c8a8:	681b      	ldr	r3, [r3, #0]
    c8aa:	2200      	movs	r2, #0
    c8ac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    c8ae:	687b      	ldr	r3, [r7, #4]
    c8b0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    c8b2:	683b      	ldr	r3, [r7, #0]
    c8b4:	68fa      	ldr	r2, [r7, #12]
    c8b6:	1ad2      	subs	r2, r2, r3
    c8b8:	683b      	ldr	r3, [r7, #0]
    c8ba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    c8bc:	4b0c      	ldr	r3, [pc, #48]	; (c8f0 <prvHeapInit+0xb4>)
    c8be:	681a      	ldr	r2, [r3, #0]
    c8c0:	683b      	ldr	r3, [r7, #0]
    c8c2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    c8c4:	683b      	ldr	r3, [r7, #0]
    c8c6:	685b      	ldr	r3, [r3, #4]
    c8c8:	4a0a      	ldr	r2, [pc, #40]	; (c8f4 <prvHeapInit+0xb8>)
    c8ca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    c8cc:	683b      	ldr	r3, [r7, #0]
    c8ce:	685b      	ldr	r3, [r3, #4]
    c8d0:	4a09      	ldr	r2, [pc, #36]	; (c8f8 <prvHeapInit+0xbc>)
    c8d2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    c8d4:	4b09      	ldr	r3, [pc, #36]	; (c8fc <prvHeapInit+0xc0>)
    c8d6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    c8da:	601a      	str	r2, [r3, #0]
}
    c8dc:	bf00      	nop
    c8de:	3714      	adds	r7, #20
    c8e0:	46bd      	mov	sp, r7
    c8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    c8e6:	4770      	bx	lr
    c8e8:	0001db24 	.word	0x0001db24
    c8ec:	00021724 	.word	0x00021724
    c8f0:	0002172c 	.word	0x0002172c
    c8f4:	00021734 	.word	0x00021734
    c8f8:	00021730 	.word	0x00021730
    c8fc:	00021738 	.word	0x00021738

0000c900 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
    c900:	b480      	push	{r7}
    c902:	b085      	sub	sp, #20
    c904:	af00      	add	r7, sp, #0
    c906:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    c908:	4b28      	ldr	r3, [pc, #160]	; (c9ac <prvInsertBlockIntoFreeList+0xac>)
    c90a:	60fb      	str	r3, [r7, #12]
    c90c:	e002      	b.n	c914 <prvInsertBlockIntoFreeList+0x14>
    c90e:	68fb      	ldr	r3, [r7, #12]
    c910:	681b      	ldr	r3, [r3, #0]
    c912:	60fb      	str	r3, [r7, #12]
    c914:	68fb      	ldr	r3, [r7, #12]
    c916:	681b      	ldr	r3, [r3, #0]
    c918:	687a      	ldr	r2, [r7, #4]
    c91a:	429a      	cmp	r2, r3
    c91c:	d8f7      	bhi.n	c90e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
    c91e:	68fb      	ldr	r3, [r7, #12]
    c920:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    c922:	68fb      	ldr	r3, [r7, #12]
    c924:	685b      	ldr	r3, [r3, #4]
    c926:	68ba      	ldr	r2, [r7, #8]
    c928:	4413      	add	r3, r2
    c92a:	687a      	ldr	r2, [r7, #4]
    c92c:	429a      	cmp	r2, r3
    c92e:	d108      	bne.n	c942 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    c930:	68fb      	ldr	r3, [r7, #12]
    c932:	685a      	ldr	r2, [r3, #4]
    c934:	687b      	ldr	r3, [r7, #4]
    c936:	685b      	ldr	r3, [r3, #4]
    c938:	441a      	add	r2, r3
    c93a:	68fb      	ldr	r3, [r7, #12]
    c93c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
    c93e:	68fb      	ldr	r3, [r7, #12]
    c940:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
    c942:	687b      	ldr	r3, [r7, #4]
    c944:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    c946:	687b      	ldr	r3, [r7, #4]
    c948:	685b      	ldr	r3, [r3, #4]
    c94a:	68ba      	ldr	r2, [r7, #8]
    c94c:	441a      	add	r2, r3
    c94e:	68fb      	ldr	r3, [r7, #12]
    c950:	681b      	ldr	r3, [r3, #0]
    c952:	429a      	cmp	r2, r3
    c954:	d118      	bne.n	c988 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
    c956:	68fb      	ldr	r3, [r7, #12]
    c958:	681a      	ldr	r2, [r3, #0]
    c95a:	4b15      	ldr	r3, [pc, #84]	; (c9b0 <prvInsertBlockIntoFreeList+0xb0>)
    c95c:	681b      	ldr	r3, [r3, #0]
    c95e:	429a      	cmp	r2, r3
    c960:	d00d      	beq.n	c97e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    c962:	687b      	ldr	r3, [r7, #4]
    c964:	685a      	ldr	r2, [r3, #4]
    c966:	68fb      	ldr	r3, [r7, #12]
    c968:	681b      	ldr	r3, [r3, #0]
    c96a:	685b      	ldr	r3, [r3, #4]
    c96c:	441a      	add	r2, r3
    c96e:	687b      	ldr	r3, [r7, #4]
    c970:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    c972:	68fb      	ldr	r3, [r7, #12]
    c974:	681b      	ldr	r3, [r3, #0]
    c976:	681a      	ldr	r2, [r3, #0]
    c978:	687b      	ldr	r3, [r7, #4]
    c97a:	601a      	str	r2, [r3, #0]
    c97c:	e008      	b.n	c990 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
    c97e:	4b0c      	ldr	r3, [pc, #48]	; (c9b0 <prvInsertBlockIntoFreeList+0xb0>)
    c980:	681a      	ldr	r2, [r3, #0]
    c982:	687b      	ldr	r3, [r7, #4]
    c984:	601a      	str	r2, [r3, #0]
    c986:	e003      	b.n	c990 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    c988:	68fb      	ldr	r3, [r7, #12]
    c98a:	681a      	ldr	r2, [r3, #0]
    c98c:	687b      	ldr	r3, [r7, #4]
    c98e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    c990:	68fa      	ldr	r2, [r7, #12]
    c992:	687b      	ldr	r3, [r7, #4]
    c994:	429a      	cmp	r2, r3
    c996:	d002      	beq.n	c99e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    c998:	68fb      	ldr	r3, [r7, #12]
    c99a:	687a      	ldr	r2, [r7, #4]
    c99c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    c99e:	bf00      	nop
    c9a0:	3714      	adds	r7, #20
    c9a2:	46bd      	mov	sp, r7
    c9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    c9a8:	4770      	bx	lr
    c9aa:	bf00      	nop
    c9ac:	00021724 	.word	0x00021724
    c9b0:	0002172c 	.word	0x0002172c

0000c9b4 <__libc_init_array>:
    c9b4:	b570      	push	{r4, r5, r6, lr}
    c9b6:	4e0d      	ldr	r6, [pc, #52]	; (c9ec <__libc_init_array+0x38>)
    c9b8:	4c0d      	ldr	r4, [pc, #52]	; (c9f0 <__libc_init_array+0x3c>)
    c9ba:	1ba4      	subs	r4, r4, r6
    c9bc:	10a4      	asrs	r4, r4, #2
    c9be:	2500      	movs	r5, #0
    c9c0:	42a5      	cmp	r5, r4
    c9c2:	d109      	bne.n	c9d8 <__libc_init_array+0x24>
    c9c4:	4e0b      	ldr	r6, [pc, #44]	; (c9f4 <__libc_init_array+0x40>)
    c9c6:	4c0c      	ldr	r4, [pc, #48]	; (c9f8 <__libc_init_array+0x44>)
    c9c8:	f7fb fb1a 	bl	8000 <_init>
    c9cc:	1ba4      	subs	r4, r4, r6
    c9ce:	10a4      	asrs	r4, r4, #2
    c9d0:	2500      	movs	r5, #0
    c9d2:	42a5      	cmp	r5, r4
    c9d4:	d105      	bne.n	c9e2 <__libc_init_array+0x2e>
    c9d6:	bd70      	pop	{r4, r5, r6, pc}
    c9d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    c9dc:	4798      	blx	r3
    c9de:	3501      	adds	r5, #1
    c9e0:	e7ee      	b.n	c9c0 <__libc_init_array+0xc>
    c9e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    c9e6:	4798      	blx	r3
    c9e8:	3501      	adds	r5, #1
    c9ea:	e7f2      	b.n	c9d2 <__libc_init_array+0x1e>
    c9ec:	0001cda4 	.word	0x0001cda4
    c9f0:	0001cda4 	.word	0x0001cda4
    c9f4:	0001cda4 	.word	0x0001cda4
    c9f8:	0001cda8 	.word	0x0001cda8

0000c9fc <memcpy>:
    c9fc:	b510      	push	{r4, lr}
    c9fe:	1e43      	subs	r3, r0, #1
    ca00:	440a      	add	r2, r1
    ca02:	4291      	cmp	r1, r2
    ca04:	d100      	bne.n	ca08 <memcpy+0xc>
    ca06:	bd10      	pop	{r4, pc}
    ca08:	f811 4b01 	ldrb.w	r4, [r1], #1
    ca0c:	f803 4f01 	strb.w	r4, [r3, #1]!
    ca10:	e7f7      	b.n	ca02 <memcpy+0x6>

0000ca12 <memset>:
    ca12:	4402      	add	r2, r0
    ca14:	4603      	mov	r3, r0
    ca16:	4293      	cmp	r3, r2
    ca18:	d100      	bne.n	ca1c <memset+0xa>
    ca1a:	4770      	bx	lr
    ca1c:	f803 1b01 	strb.w	r1, [r3], #1
    ca20:	e7f9      	b.n	ca16 <memset+0x4>
	...

0000ca24 <__aeabi_uldivmod>:
    ca24:	b953      	cbnz	r3, ca3c <__aeabi_uldivmod+0x18>
    ca26:	b94a      	cbnz	r2, ca3c <__aeabi_uldivmod+0x18>
    ca28:	2900      	cmp	r1, #0
    ca2a:	bf08      	it	eq
    ca2c:	2800      	cmpeq	r0, #0
    ca2e:	bf1c      	itt	ne
    ca30:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    ca34:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    ca38:	f000 b972 	b.w	cd20 <__aeabi_idiv0>
    ca3c:	f1ad 0c08 	sub.w	ip, sp, #8
    ca40:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    ca44:	f000 f806 	bl	ca54 <__udivmoddi4>
    ca48:	f8dd e004 	ldr.w	lr, [sp, #4]
    ca4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    ca50:	b004      	add	sp, #16
    ca52:	4770      	bx	lr

0000ca54 <__udivmoddi4>:
    ca54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ca58:	9e08      	ldr	r6, [sp, #32]
    ca5a:	4604      	mov	r4, r0
    ca5c:	4688      	mov	r8, r1
    ca5e:	2b00      	cmp	r3, #0
    ca60:	d14b      	bne.n	cafa <__udivmoddi4+0xa6>
    ca62:	428a      	cmp	r2, r1
    ca64:	4615      	mov	r5, r2
    ca66:	d967      	bls.n	cb38 <__udivmoddi4+0xe4>
    ca68:	fab2 f282 	clz	r2, r2
    ca6c:	b14a      	cbz	r2, ca82 <__udivmoddi4+0x2e>
    ca6e:	f1c2 0720 	rsb	r7, r2, #32
    ca72:	fa01 f302 	lsl.w	r3, r1, r2
    ca76:	fa20 f707 	lsr.w	r7, r0, r7
    ca7a:	4095      	lsls	r5, r2
    ca7c:	ea47 0803 	orr.w	r8, r7, r3
    ca80:	4094      	lsls	r4, r2
    ca82:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    ca86:	0c23      	lsrs	r3, r4, #16
    ca88:	fbb8 f7fe 	udiv	r7, r8, lr
    ca8c:	fa1f fc85 	uxth.w	ip, r5
    ca90:	fb0e 8817 	mls	r8, lr, r7, r8
    ca94:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    ca98:	fb07 f10c 	mul.w	r1, r7, ip
    ca9c:	4299      	cmp	r1, r3
    ca9e:	d909      	bls.n	cab4 <__udivmoddi4+0x60>
    caa0:	18eb      	adds	r3, r5, r3
    caa2:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
    caa6:	f080 811b 	bcs.w	cce0 <__udivmoddi4+0x28c>
    caaa:	4299      	cmp	r1, r3
    caac:	f240 8118 	bls.w	cce0 <__udivmoddi4+0x28c>
    cab0:	3f02      	subs	r7, #2
    cab2:	442b      	add	r3, r5
    cab4:	1a5b      	subs	r3, r3, r1
    cab6:	b2a4      	uxth	r4, r4
    cab8:	fbb3 f0fe 	udiv	r0, r3, lr
    cabc:	fb0e 3310 	mls	r3, lr, r0, r3
    cac0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    cac4:	fb00 fc0c 	mul.w	ip, r0, ip
    cac8:	45a4      	cmp	ip, r4
    caca:	d909      	bls.n	cae0 <__udivmoddi4+0x8c>
    cacc:	192c      	adds	r4, r5, r4
    cace:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    cad2:	f080 8107 	bcs.w	cce4 <__udivmoddi4+0x290>
    cad6:	45a4      	cmp	ip, r4
    cad8:	f240 8104 	bls.w	cce4 <__udivmoddi4+0x290>
    cadc:	3802      	subs	r0, #2
    cade:	442c      	add	r4, r5
    cae0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    cae4:	eba4 040c 	sub.w	r4, r4, ip
    cae8:	2700      	movs	r7, #0
    caea:	b11e      	cbz	r6, caf4 <__udivmoddi4+0xa0>
    caec:	40d4      	lsrs	r4, r2
    caee:	2300      	movs	r3, #0
    caf0:	e9c6 4300 	strd	r4, r3, [r6]
    caf4:	4639      	mov	r1, r7
    caf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cafa:	428b      	cmp	r3, r1
    cafc:	d909      	bls.n	cb12 <__udivmoddi4+0xbe>
    cafe:	2e00      	cmp	r6, #0
    cb00:	f000 80eb 	beq.w	ccda <__udivmoddi4+0x286>
    cb04:	2700      	movs	r7, #0
    cb06:	e9c6 0100 	strd	r0, r1, [r6]
    cb0a:	4638      	mov	r0, r7
    cb0c:	4639      	mov	r1, r7
    cb0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cb12:	fab3 f783 	clz	r7, r3
    cb16:	2f00      	cmp	r7, #0
    cb18:	d147      	bne.n	cbaa <__udivmoddi4+0x156>
    cb1a:	428b      	cmp	r3, r1
    cb1c:	d302      	bcc.n	cb24 <__udivmoddi4+0xd0>
    cb1e:	4282      	cmp	r2, r0
    cb20:	f200 80fa 	bhi.w	cd18 <__udivmoddi4+0x2c4>
    cb24:	1a84      	subs	r4, r0, r2
    cb26:	eb61 0303 	sbc.w	r3, r1, r3
    cb2a:	2001      	movs	r0, #1
    cb2c:	4698      	mov	r8, r3
    cb2e:	2e00      	cmp	r6, #0
    cb30:	d0e0      	beq.n	caf4 <__udivmoddi4+0xa0>
    cb32:	e9c6 4800 	strd	r4, r8, [r6]
    cb36:	e7dd      	b.n	caf4 <__udivmoddi4+0xa0>
    cb38:	b902      	cbnz	r2, cb3c <__udivmoddi4+0xe8>
    cb3a:	deff      	udf	#255	; 0xff
    cb3c:	fab2 f282 	clz	r2, r2
    cb40:	2a00      	cmp	r2, #0
    cb42:	f040 808f 	bne.w	cc64 <__udivmoddi4+0x210>
    cb46:	1b49      	subs	r1, r1, r5
    cb48:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    cb4c:	fa1f f885 	uxth.w	r8, r5
    cb50:	2701      	movs	r7, #1
    cb52:	fbb1 fcfe 	udiv	ip, r1, lr
    cb56:	0c23      	lsrs	r3, r4, #16
    cb58:	fb0e 111c 	mls	r1, lr, ip, r1
    cb5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    cb60:	fb08 f10c 	mul.w	r1, r8, ip
    cb64:	4299      	cmp	r1, r3
    cb66:	d907      	bls.n	cb78 <__udivmoddi4+0x124>
    cb68:	18eb      	adds	r3, r5, r3
    cb6a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    cb6e:	d202      	bcs.n	cb76 <__udivmoddi4+0x122>
    cb70:	4299      	cmp	r1, r3
    cb72:	f200 80cd 	bhi.w	cd10 <__udivmoddi4+0x2bc>
    cb76:	4684      	mov	ip, r0
    cb78:	1a59      	subs	r1, r3, r1
    cb7a:	b2a3      	uxth	r3, r4
    cb7c:	fbb1 f0fe 	udiv	r0, r1, lr
    cb80:	fb0e 1410 	mls	r4, lr, r0, r1
    cb84:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    cb88:	fb08 f800 	mul.w	r8, r8, r0
    cb8c:	45a0      	cmp	r8, r4
    cb8e:	d907      	bls.n	cba0 <__udivmoddi4+0x14c>
    cb90:	192c      	adds	r4, r5, r4
    cb92:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    cb96:	d202      	bcs.n	cb9e <__udivmoddi4+0x14a>
    cb98:	45a0      	cmp	r8, r4
    cb9a:	f200 80b6 	bhi.w	cd0a <__udivmoddi4+0x2b6>
    cb9e:	4618      	mov	r0, r3
    cba0:	eba4 0408 	sub.w	r4, r4, r8
    cba4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    cba8:	e79f      	b.n	caea <__udivmoddi4+0x96>
    cbaa:	f1c7 0c20 	rsb	ip, r7, #32
    cbae:	40bb      	lsls	r3, r7
    cbb0:	fa22 fe0c 	lsr.w	lr, r2, ip
    cbb4:	ea4e 0e03 	orr.w	lr, lr, r3
    cbb8:	fa01 f407 	lsl.w	r4, r1, r7
    cbbc:	fa20 f50c 	lsr.w	r5, r0, ip
    cbc0:	fa21 f30c 	lsr.w	r3, r1, ip
    cbc4:	ea4f 481e 	mov.w	r8, lr, lsr #16
    cbc8:	4325      	orrs	r5, r4
    cbca:	fbb3 f9f8 	udiv	r9, r3, r8
    cbce:	0c2c      	lsrs	r4, r5, #16
    cbd0:	fb08 3319 	mls	r3, r8, r9, r3
    cbd4:	fa1f fa8e 	uxth.w	sl, lr
    cbd8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
    cbdc:	fb09 f40a 	mul.w	r4, r9, sl
    cbe0:	429c      	cmp	r4, r3
    cbe2:	fa02 f207 	lsl.w	r2, r2, r7
    cbe6:	fa00 f107 	lsl.w	r1, r0, r7
    cbea:	d90b      	bls.n	cc04 <__udivmoddi4+0x1b0>
    cbec:	eb1e 0303 	adds.w	r3, lr, r3
    cbf0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    cbf4:	f080 8087 	bcs.w	cd06 <__udivmoddi4+0x2b2>
    cbf8:	429c      	cmp	r4, r3
    cbfa:	f240 8084 	bls.w	cd06 <__udivmoddi4+0x2b2>
    cbfe:	f1a9 0902 	sub.w	r9, r9, #2
    cc02:	4473      	add	r3, lr
    cc04:	1b1b      	subs	r3, r3, r4
    cc06:	b2ad      	uxth	r5, r5
    cc08:	fbb3 f0f8 	udiv	r0, r3, r8
    cc0c:	fb08 3310 	mls	r3, r8, r0, r3
    cc10:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
    cc14:	fb00 fa0a 	mul.w	sl, r0, sl
    cc18:	45a2      	cmp	sl, r4
    cc1a:	d908      	bls.n	cc2e <__udivmoddi4+0x1da>
    cc1c:	eb1e 0404 	adds.w	r4, lr, r4
    cc20:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    cc24:	d26b      	bcs.n	ccfe <__udivmoddi4+0x2aa>
    cc26:	45a2      	cmp	sl, r4
    cc28:	d969      	bls.n	ccfe <__udivmoddi4+0x2aa>
    cc2a:	3802      	subs	r0, #2
    cc2c:	4474      	add	r4, lr
    cc2e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    cc32:	fba0 8902 	umull	r8, r9, r0, r2
    cc36:	eba4 040a 	sub.w	r4, r4, sl
    cc3a:	454c      	cmp	r4, r9
    cc3c:	46c2      	mov	sl, r8
    cc3e:	464b      	mov	r3, r9
    cc40:	d354      	bcc.n	ccec <__udivmoddi4+0x298>
    cc42:	d051      	beq.n	cce8 <__udivmoddi4+0x294>
    cc44:	2e00      	cmp	r6, #0
    cc46:	d069      	beq.n	cd1c <__udivmoddi4+0x2c8>
    cc48:	ebb1 050a 	subs.w	r5, r1, sl
    cc4c:	eb64 0403 	sbc.w	r4, r4, r3
    cc50:	fa04 fc0c 	lsl.w	ip, r4, ip
    cc54:	40fd      	lsrs	r5, r7
    cc56:	40fc      	lsrs	r4, r7
    cc58:	ea4c 0505 	orr.w	r5, ip, r5
    cc5c:	e9c6 5400 	strd	r5, r4, [r6]
    cc60:	2700      	movs	r7, #0
    cc62:	e747      	b.n	caf4 <__udivmoddi4+0xa0>
    cc64:	f1c2 0320 	rsb	r3, r2, #32
    cc68:	fa20 f703 	lsr.w	r7, r0, r3
    cc6c:	4095      	lsls	r5, r2
    cc6e:	fa01 f002 	lsl.w	r0, r1, r2
    cc72:	fa21 f303 	lsr.w	r3, r1, r3
    cc76:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    cc7a:	4338      	orrs	r0, r7
    cc7c:	0c01      	lsrs	r1, r0, #16
    cc7e:	fbb3 f7fe 	udiv	r7, r3, lr
    cc82:	fa1f f885 	uxth.w	r8, r5
    cc86:	fb0e 3317 	mls	r3, lr, r7, r3
    cc8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    cc8e:	fb07 f308 	mul.w	r3, r7, r8
    cc92:	428b      	cmp	r3, r1
    cc94:	fa04 f402 	lsl.w	r4, r4, r2
    cc98:	d907      	bls.n	ccaa <__udivmoddi4+0x256>
    cc9a:	1869      	adds	r1, r5, r1
    cc9c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
    cca0:	d22f      	bcs.n	cd02 <__udivmoddi4+0x2ae>
    cca2:	428b      	cmp	r3, r1
    cca4:	d92d      	bls.n	cd02 <__udivmoddi4+0x2ae>
    cca6:	3f02      	subs	r7, #2
    cca8:	4429      	add	r1, r5
    ccaa:	1acb      	subs	r3, r1, r3
    ccac:	b281      	uxth	r1, r0
    ccae:	fbb3 f0fe 	udiv	r0, r3, lr
    ccb2:	fb0e 3310 	mls	r3, lr, r0, r3
    ccb6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    ccba:	fb00 f308 	mul.w	r3, r0, r8
    ccbe:	428b      	cmp	r3, r1
    ccc0:	d907      	bls.n	ccd2 <__udivmoddi4+0x27e>
    ccc2:	1869      	adds	r1, r5, r1
    ccc4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    ccc8:	d217      	bcs.n	ccfa <__udivmoddi4+0x2a6>
    ccca:	428b      	cmp	r3, r1
    cccc:	d915      	bls.n	ccfa <__udivmoddi4+0x2a6>
    ccce:	3802      	subs	r0, #2
    ccd0:	4429      	add	r1, r5
    ccd2:	1ac9      	subs	r1, r1, r3
    ccd4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
    ccd8:	e73b      	b.n	cb52 <__udivmoddi4+0xfe>
    ccda:	4637      	mov	r7, r6
    ccdc:	4630      	mov	r0, r6
    ccde:	e709      	b.n	caf4 <__udivmoddi4+0xa0>
    cce0:	4607      	mov	r7, r0
    cce2:	e6e7      	b.n	cab4 <__udivmoddi4+0x60>
    cce4:	4618      	mov	r0, r3
    cce6:	e6fb      	b.n	cae0 <__udivmoddi4+0x8c>
    cce8:	4541      	cmp	r1, r8
    ccea:	d2ab      	bcs.n	cc44 <__udivmoddi4+0x1f0>
    ccec:	ebb8 0a02 	subs.w	sl, r8, r2
    ccf0:	eb69 020e 	sbc.w	r2, r9, lr
    ccf4:	3801      	subs	r0, #1
    ccf6:	4613      	mov	r3, r2
    ccf8:	e7a4      	b.n	cc44 <__udivmoddi4+0x1f0>
    ccfa:	4660      	mov	r0, ip
    ccfc:	e7e9      	b.n	ccd2 <__udivmoddi4+0x27e>
    ccfe:	4618      	mov	r0, r3
    cd00:	e795      	b.n	cc2e <__udivmoddi4+0x1da>
    cd02:	4667      	mov	r7, ip
    cd04:	e7d1      	b.n	ccaa <__udivmoddi4+0x256>
    cd06:	4681      	mov	r9, r0
    cd08:	e77c      	b.n	cc04 <__udivmoddi4+0x1b0>
    cd0a:	3802      	subs	r0, #2
    cd0c:	442c      	add	r4, r5
    cd0e:	e747      	b.n	cba0 <__udivmoddi4+0x14c>
    cd10:	f1ac 0c02 	sub.w	ip, ip, #2
    cd14:	442b      	add	r3, r5
    cd16:	e72f      	b.n	cb78 <__udivmoddi4+0x124>
    cd18:	4638      	mov	r0, r7
    cd1a:	e708      	b.n	cb2e <__udivmoddi4+0xda>
    cd1c:	4637      	mov	r7, r6
    cd1e:	e6e9      	b.n	caf4 <__udivmoddi4+0xa0>

0000cd20 <__aeabi_idiv0>:
    cd20:	4770      	bx	lr
    cd22:	bf00      	nop

0000cd24 <_exit>:
    cd24:	e7fe      	b.n	cd24 <_exit>

Disassembly of section .fini:

0000cd28 <_fini>:
    cd28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cd2a:	bf00      	nop
    cd2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    cd2e:	bc08      	pop	{r3}
    cd30:	469e      	mov	lr, r3
    cd32:	4770      	bx	lr
