
imu_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .init         0000000c  00008000  00008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         0000510a  0000800c  0000800c  0000800c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .fini         0000000c  0000d118  0000d118  0000d118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000044  0000d124  0000d124  0000d124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.exidx    00000008  0000d168  0000d168  0000d168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .eh_frame     00000004  0000d170  0000d170  0000d170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000008  0001d174  0001d174  0000d174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0001d17c  0001d17c  0000d17c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  0001d184  0001d184  0000d184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e9c  0001d1f4  0001d1f4  0000d1f4  2**2
                  ALLOC
 10 .comment      0000007b  00000000  00000000  0000d1f4  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00001400  00000000  00000000  0000d26f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   00018588  00000000  00000000  0000e66f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d91  00000000  00000000  00026bf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000f049  00000000  00000000  00029988  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00005778  00000000  00000000  000389d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00098510  00000000  00000000  0003e14c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000012f8  00000000  00000000  000d665c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00017f10  00000000  00000000  000d7954  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .ARM.attributes 00000030  00000000  00000000  000ef864  2**0
                  CONTENTS, READONLY

Disassembly of section .init:

00008000 <_init>:
    8000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8002:	bf00      	nop
    8004:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8006:	bc08      	pop	{r3}
    8008:	469e      	mov	lr, r3
    800a:	4770      	bx	lr

Disassembly of section .text:

0000800c <exit>:
    800c:	b508      	push	{r3, lr}
    800e:	4b07      	ldr	r3, [pc, #28]	; (802c <exit+0x20>)
    8010:	4604      	mov	r4, r0
    8012:	b113      	cbz	r3, 801a <exit+0xe>
    8014:	2100      	movs	r1, #0
    8016:	f3af 8000 	nop.w
    801a:	4b05      	ldr	r3, [pc, #20]	; (8030 <exit+0x24>)
    801c:	6818      	ldr	r0, [r3, #0]
    801e:	6a83      	ldr	r3, [r0, #40]	; 0x28
    8020:	b103      	cbz	r3, 8024 <exit+0x18>
    8022:	4798      	blx	r3
    8024:	4620      	mov	r0, r4
    8026:	f005 f875 	bl	d114 <_exit>
    802a:	bf00      	nop
    802c:	00000000 	.word	0x00000000
    8030:	0000d164 	.word	0x0000d164

00008034 <__do_global_dtors_aux>:
    8034:	b510      	push	{r4, lr}
    8036:	4c05      	ldr	r4, [pc, #20]	; (804c <__do_global_dtors_aux+0x18>)
    8038:	7823      	ldrb	r3, [r4, #0]
    803a:	b933      	cbnz	r3, 804a <__do_global_dtors_aux+0x16>
    803c:	4b04      	ldr	r3, [pc, #16]	; (8050 <__do_global_dtors_aux+0x1c>)
    803e:	b113      	cbz	r3, 8046 <__do_global_dtors_aux+0x12>
    8040:	4804      	ldr	r0, [pc, #16]	; (8054 <__do_global_dtors_aux+0x20>)
    8042:	f3af 8000 	nop.w
    8046:	2301      	movs	r3, #1
    8048:	7023      	strb	r3, [r4, #0]
    804a:	bd10      	pop	{r4, pc}
    804c:	0001d1f4 	.word	0x0001d1f4
    8050:	00000000 	.word	0x00000000
    8054:	0000d170 	.word	0x0000d170

00008058 <frame_dummy>:
    8058:	b508      	push	{r3, lr}
    805a:	4b03      	ldr	r3, [pc, #12]	; (8068 <frame_dummy+0x10>)
    805c:	b11b      	cbz	r3, 8066 <frame_dummy+0xe>
    805e:	4903      	ldr	r1, [pc, #12]	; (806c <frame_dummy+0x14>)
    8060:	4803      	ldr	r0, [pc, #12]	; (8070 <frame_dummy+0x18>)
    8062:	f3af 8000 	nop.w
    8066:	bd08      	pop	{r3, pc}
    8068:	00000000 	.word	0x00000000
    806c:	0001d1f8 	.word	0x0001d1f8
    8070:	0000d170 	.word	0x0000d170

00008074 <_mainCRTStartup>:
    8074:	4b15      	ldr	r3, [pc, #84]	; (80cc <_mainCRTStartup+0x58>)
    8076:	2b00      	cmp	r3, #0
    8078:	bf08      	it	eq
    807a:	4b13      	ldreq	r3, [pc, #76]	; (80c8 <_mainCRTStartup+0x54>)
    807c:	469d      	mov	sp, r3
    807e:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
    8082:	2100      	movs	r1, #0
    8084:	468b      	mov	fp, r1
    8086:	460f      	mov	r7, r1
    8088:	4813      	ldr	r0, [pc, #76]	; (80d8 <_mainCRTStartup+0x64>)
    808a:	4a14      	ldr	r2, [pc, #80]	; (80dc <_mainCRTStartup+0x68>)
    808c:	1a12      	subs	r2, r2, r0
    808e:	f004 fe68 	bl	cd62 <memset>
    8092:	4b0f      	ldr	r3, [pc, #60]	; (80d0 <_mainCRTStartup+0x5c>)
    8094:	2b00      	cmp	r3, #0
    8096:	d000      	beq.n	809a <_mainCRTStartup+0x26>
    8098:	4798      	blx	r3
    809a:	4b0e      	ldr	r3, [pc, #56]	; (80d4 <_mainCRTStartup+0x60>)
    809c:	2b00      	cmp	r3, #0
    809e:	d000      	beq.n	80a2 <_mainCRTStartup+0x2e>
    80a0:	4798      	blx	r3
    80a2:	2000      	movs	r0, #0
    80a4:	2100      	movs	r1, #0
    80a6:	0004      	movs	r4, r0
    80a8:	000d      	movs	r5, r1
    80aa:	480d      	ldr	r0, [pc, #52]	; (80e0 <_mainCRTStartup+0x6c>)
    80ac:	2800      	cmp	r0, #0
    80ae:	d002      	beq.n	80b6 <_mainCRTStartup+0x42>
    80b0:	480c      	ldr	r0, [pc, #48]	; (80e4 <_mainCRTStartup+0x70>)
    80b2:	f3af 8000 	nop.w
    80b6:	f004 fe1d 	bl	ccf4 <__libc_init_array>
    80ba:	0020      	movs	r0, r4
    80bc:	0029      	movs	r1, r5
    80be:	f000 f8ad 	bl	821c <main>
    80c2:	f7ff ffa3 	bl	800c <exit>
    80c6:	bf00      	nop
    80c8:	00080000 	.word	0x00080000
	...
    80d8:	0001d1f4 	.word	0x0001d1f4
    80dc:	0001e090 	.word	0x0001e090
	...

000080e8 <_ZN3IMUC1Ev>:
 *      Author: cy
 */

#include <imu/IMU.h>

IMU::IMU() {
    80e8:	b480      	push	{r7}
    80ea:	b083      	sub	sp, #12
    80ec:	af00      	add	r7, sp, #0
    80ee:	6078      	str	r0, [r7, #4]
    80f0:	4a04      	ldr	r2, [pc, #16]	; (8104 <_ZN3IMUC1Ev+0x1c>)
    80f2:	687b      	ldr	r3, [r7, #4]
    80f4:	601a      	str	r2, [r3, #0]
	// Auto-generated constructor stub
}
    80f6:	687b      	ldr	r3, [r7, #4]
    80f8:	4618      	mov	r0, r3
    80fa:	370c      	adds	r7, #12
    80fc:	46bd      	mov	sp, r7
    80fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    8102:	4770      	bx	lr
    8104:	0000d12c 	.word	0x0000d12c

00008108 <_ZN3IMUD1Ev>:

IMU::~IMU() {
    8108:	b480      	push	{r7}
    810a:	b083      	sub	sp, #12
    810c:	af00      	add	r7, sp, #0
    810e:	6078      	str	r0, [r7, #4]
    8110:	4a04      	ldr	r2, [pc, #16]	; (8124 <_ZN3IMUD1Ev+0x1c>)
    8112:	687b      	ldr	r3, [r7, #4]
    8114:	601a      	str	r2, [r3, #0]
	// Auto-generated destructor stub
}
    8116:	687b      	ldr	r3, [r7, #4]
    8118:	4618      	mov	r0, r3
    811a:	370c      	adds	r7, #12
    811c:	46bd      	mov	sp, r7
    811e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8122:	4770      	bx	lr
    8124:	0000d12c 	.word	0x0000d12c

00008128 <_ZN3IMUD0Ev>:
IMU::~IMU() {
    8128:	b580      	push	{r7, lr}
    812a:	b082      	sub	sp, #8
    812c:	af00      	add	r7, sp, #0
    812e:	6078      	str	r0, [r7, #4]
}
    8130:	6878      	ldr	r0, [r7, #4]
    8132:	f7ff ffe9 	bl	8108 <_ZN3IMUD1Ev>
    8136:	2160      	movs	r1, #96	; 0x60
    8138:	6878      	ldr	r0, [r7, #4]
    813a:	f004 fdd7 	bl	ccec <_ZdlPvj>
    813e:	687b      	ldr	r3, [r7, #4]
    8140:	4618      	mov	r0, r3
    8142:	3708      	adds	r7, #8
    8144:	46bd      	mov	sp, r7
    8146:	bd80      	pop	{r7, pc}

00008148 <_ZN3IMU13initializeIMUERK17I2C_HandleTypeDef>:

void IMU::initializeIMU(const I2C_HandleTypeDef &handle) {
    8148:	b580      	push	{r7, lr}
    814a:	b082      	sub	sp, #8
    814c:	af00      	add	r7, sp, #0
    814e:	6078      	str	r0, [r7, #4]
    8150:	6039      	str	r1, [r7, #0]
	hi2c = handle;
    8152:	687b      	ldr	r3, [r7, #4]
    8154:	683a      	ldr	r2, [r7, #0]
    8156:	3304      	adds	r3, #4
    8158:	4611      	mov	r1, r2
    815a:	2254      	movs	r2, #84	; 0x54
    815c:	4618      	mov	r0, r3
    815e:	f004 fdf5 	bl	cd4c <memcpy>
	// Set mode to NDOF
	setMode(IMU_Mode::OPR_MODE_NDOF);
    8162:	210c      	movs	r1, #12
    8164:	6878      	ldr	r0, [r7, #4]
    8166:	f000 f81c 	bl	81a2 <_ZN3IMU7setModeENS_8IMU_ModeE>
	// Set Euler Angles units to degrees
	eulerAngleUnits = false;
    816a:	687b      	ldr	r3, [r7, #4]
    816c:	2200      	movs	r2, #0
    816e:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	// Set Angular Rate units to Dps
	gyroscopeUnits = false;
    8172:	687b      	ldr	r3, [r7, #4]
    8174:	2200      	movs	r2, #0
    8176:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	// Set Acceleration units to m/s^2
	totalAccelerationUnits = false;
    817a:	687b      	ldr	r3, [r7, #4]
    817c:	2200      	movs	r2, #0
    817e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	// Set Temperature units to C
	tempUnits = false;
    8182:	687b      	ldr	r3, [r7, #4]
    8184:	2200      	movs	r2, #0
    8186:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	// Set data output format to Windows format
	write8(Registers::BNO055_UNIT_SEL_ADDR, 0x00);
    818a:	2200      	movs	r2, #0
    818c:	213b      	movs	r1, #59	; 0x3b
    818e:	6878      	ldr	r0, [r7, #4]
    8190:	f000 f825 	bl	81de <_ZN3IMU6write8Ehh>
	vTaskDelay(20);
    8194:	2014      	movs	r0, #20
    8196:	f003 fa97 	bl	b6c8 <vTaskDelay>
}
    819a:	bf00      	nop
    819c:	3708      	adds	r7, #8
    819e:	46bd      	mov	sp, r7
    81a0:	bd80      	pop	{r7, pc}

000081a2 <_ZN3IMU7setModeENS_8IMU_ModeE>:
	uint16_t data = read16(registerToRead);
	// Section 3.6.5.6 of datasheet for conversion from LSBs to m/s^2
	return (double)data / 100.0;
}

void IMU::setMode(IMU_Mode mode) {
    81a2:	b580      	push	{r7, lr}
    81a4:	b082      	sub	sp, #8
    81a6:	af00      	add	r7, sp, #0
    81a8:	6078      	str	r0, [r7, #4]
    81aa:	460b      	mov	r3, r1
    81ac:	70fb      	strb	r3, [r7, #3]
	write8(Registers::BNO055_OPR_MODE_ADDR, mode);
    81ae:	78fb      	ldrb	r3, [r7, #3]
    81b0:	461a      	mov	r2, r3
    81b2:	213d      	movs	r1, #61	; 0x3d
    81b4:	6878      	ldr	r0, [r7, #4]
    81b6:	f000 f812 	bl	81de <_ZN3IMU6write8Ehh>
	currentMode = mode;
    81ba:	687b      	ldr	r3, [r7, #4]
    81bc:	78fa      	ldrb	r2, [r7, #3]
    81be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	// Time required to switch between operating modes (Datasheet Table 3-6)
	mode == IMU_Mode::OPR_MODE_CONFIGMODE ? vTaskDelay(19) : vTaskDelay(7);
    81c2:	78fb      	ldrb	r3, [r7, #3]
    81c4:	2b00      	cmp	r3, #0
    81c6:	d103      	bne.n	81d0 <_ZN3IMU7setModeENS_8IMU_ModeE+0x2e>
    81c8:	2013      	movs	r0, #19
    81ca:	f003 fa7d 	bl	b6c8 <vTaskDelay>
	return;
    81ce:	e003      	b.n	81d8 <_ZN3IMU7setModeENS_8IMU_ModeE+0x36>
	mode == IMU_Mode::OPR_MODE_CONFIGMODE ? vTaskDelay(19) : vTaskDelay(7);
    81d0:	2007      	movs	r0, #7
    81d2:	f003 fa79 	bl	b6c8 <vTaskDelay>
	return;
    81d6:	bf00      	nop
}
    81d8:	3708      	adds	r7, #8
    81da:	46bd      	mov	sp, r7
    81dc:	bd80      	pop	{r7, pc}

000081de <_ZN3IMU6write8Ehh>:

HAL_StatusTypeDef IMU::write8(uint8_t reg, uint8_t value) {
    81de:	b580      	push	{r7, lr}
    81e0:	b086      	sub	sp, #24
    81e2:	af02      	add	r7, sp, #8
    81e4:	6078      	str	r0, [r7, #4]
    81e6:	460b      	mov	r3, r1
    81e8:	70fb      	strb	r3, [r7, #3]
    81ea:	4613      	mov	r3, r2
    81ec:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef ret;
	// Combine reg and value into a buffer
	uint8_t buffer[2];
	buffer[0] = reg;
    81ee:	78fb      	ldrb	r3, [r7, #3]
    81f0:	733b      	strb	r3, [r7, #12]
	buffer[1] = value;
    81f2:	78bb      	ldrb	r3, [r7, #2]
    81f4:	737b      	strb	r3, [r7, #13]
	// Send buffer over
	ret = HAL_I2C_Master_Transmit(&hi2c, IMU_I2C_ADDR << 1, buffer, 2, HAL_MAX_DELAY);
    81f6:	687b      	ldr	r3, [r7, #4]
    81f8:	1d18      	adds	r0, r3, #4
    81fa:	f107 020c 	add.w	r2, r7, #12
    81fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8202:	9300      	str	r3, [sp, #0]
    8204:	2302      	movs	r3, #2
    8206:	2150      	movs	r1, #80	; 0x50
    8208:	f000 fe98 	bl	8f3c <HAL_I2C_Master_Transmit>
    820c:	4603      	mov	r3, r0
    820e:	73fb      	strb	r3, [r7, #15]
	return ret;
    8210:	7bfb      	ldrb	r3, [r7, #15]
}
    8212:	4618      	mov	r0, r3
    8214:	3710      	adds	r7, #16
    8216:	46bd      	mov	sp, r7
    8218:	bd80      	pop	{r7, pc}
	...

0000821c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
    821c:	b580      	push	{r7, lr}
    821e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
    8220:	f000 faa8 	bl	8774 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
    8224:	f000 f814 	bl	8250 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
    8228:	f000 f8ea 	bl	8400 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
    822c:	f000 f8ba 	bl	83a4 <_ZL19MX_USART2_UART_Initv>
  MX_I2C1_Init();
    8230:	f000 f884 	bl	833c <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */
  imu.initializeIMU(hi2c1);
    8234:	4904      	ldr	r1, [pc, #16]	; (8248 <main+0x2c>)
    8236:	4805      	ldr	r0, [pc, #20]	; (824c <main+0x30>)
    8238:	f7ff ff86 	bl	8148 <_ZN3IMU13initializeIMUERK17I2C_HandleTypeDef>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
    823c:	f002 fac6 	bl	a7cc <osKernelInitialize>
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
    8240:	f002 faf8 	bl	a834 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
    8244:	e7fe      	b.n	8244 <main+0x28>
    8246:	bf00      	nop
    8248:	0001d210 	.word	0x0001d210
    824c:	0001d2a4 	.word	0x0001d2a4

00008250 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
    8250:	b580      	push	{r7, lr}
    8252:	b094      	sub	sp, #80	; 0x50
    8254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    8256:	f107 0320 	add.w	r3, r7, #32
    825a:	2230      	movs	r2, #48	; 0x30
    825c:	2100      	movs	r1, #0
    825e:	4618      	mov	r0, r3
    8260:	f004 fd7f 	bl	cd62 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
    8264:	f107 030c 	add.w	r3, r7, #12
    8268:	2200      	movs	r2, #0
    826a:	601a      	str	r2, [r3, #0]
    826c:	605a      	str	r2, [r3, #4]
    826e:	609a      	str	r2, [r3, #8]
    8270:	60da      	str	r2, [r3, #12]
    8272:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
    8274:	2300      	movs	r3, #0
    8276:	60bb      	str	r3, [r7, #8]
    8278:	4b2e      	ldr	r3, [pc, #184]	; (8334 <_Z18SystemClock_Configv+0xe4>)
    827a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    827c:	4a2d      	ldr	r2, [pc, #180]	; (8334 <_Z18SystemClock_Configv+0xe4>)
    827e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    8282:	6413      	str	r3, [r2, #64]	; 0x40
    8284:	4b2b      	ldr	r3, [pc, #172]	; (8334 <_Z18SystemClock_Configv+0xe4>)
    8286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    828c:	60bb      	str	r3, [r7, #8]
    828e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
    8290:	2300      	movs	r3, #0
    8292:	607b      	str	r3, [r7, #4]
    8294:	4b28      	ldr	r3, [pc, #160]	; (8338 <_Z18SystemClock_Configv+0xe8>)
    8296:	681b      	ldr	r3, [r3, #0]
    8298:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
    829c:	4a26      	ldr	r2, [pc, #152]	; (8338 <_Z18SystemClock_Configv+0xe8>)
    829e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    82a2:	6013      	str	r3, [r2, #0]
    82a4:	4b24      	ldr	r3, [pc, #144]	; (8338 <_Z18SystemClock_Configv+0xe8>)
    82a6:	681b      	ldr	r3, [r3, #0]
    82a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    82ac:	607b      	str	r3, [r7, #4]
    82ae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
    82b0:	2302      	movs	r3, #2
    82b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    82b4:	2301      	movs	r3, #1
    82b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
    82b8:	2310      	movs	r3, #16
    82ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    82bc:	2302      	movs	r3, #2
    82be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
    82c0:	2300      	movs	r3, #0
    82c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
    82c4:	2310      	movs	r3, #16
    82c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
    82c8:	f44f 73a8 	mov.w	r3, #336	; 0x150
    82cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
    82ce:	2304      	movs	r3, #4
    82d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
    82d2:	2307      	movs	r3, #7
    82d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
    82d6:	f107 0320 	add.w	r3, r7, #32
    82da:	4618      	mov	r0, r3
    82dc:	f001 f936 	bl	954c <HAL_RCC_OscConfig>
    82e0:	4603      	mov	r3, r0
    82e2:	2b00      	cmp	r3, #0
    82e4:	bf14      	ite	ne
    82e6:	2301      	movne	r3, #1
    82e8:	2300      	moveq	r3, #0
    82ea:	b2db      	uxtb	r3, r3
    82ec:	2b00      	cmp	r3, #0
    82ee:	d001      	beq.n	82f4 <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
    82f0:	f000 f8f6 	bl	84e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
    82f4:	230f      	movs	r3, #15
    82f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    82f8:	2302      	movs	r3, #2
    82fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    82fc:	2300      	movs	r3, #0
    82fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
    8300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    8304:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
    8306:	2300      	movs	r3, #0
    8308:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
    830a:	f107 030c 	add.w	r3, r7, #12
    830e:	2102      	movs	r1, #2
    8310:	4618      	mov	r0, r3
    8312:	f001 fb8b 	bl	9a2c <HAL_RCC_ClockConfig>
    8316:	4603      	mov	r3, r0
    8318:	2b00      	cmp	r3, #0
    831a:	bf14      	ite	ne
    831c:	2301      	movne	r3, #1
    831e:	2300      	moveq	r3, #0
    8320:	b2db      	uxtb	r3, r3
    8322:	2b00      	cmp	r3, #0
    8324:	d001      	beq.n	832a <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
    8326:	f000 f8db 	bl	84e0 <Error_Handler>
  }
}
    832a:	bf00      	nop
    832c:	3750      	adds	r7, #80	; 0x50
    832e:	46bd      	mov	sp, r7
    8330:	bd80      	pop	{r7, pc}
    8332:	bf00      	nop
    8334:	40023800 	.word	0x40023800
    8338:	40007000 	.word	0x40007000

0000833c <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
    833c:	b580      	push	{r7, lr}
    833e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
    8340:	4b15      	ldr	r3, [pc, #84]	; (8398 <_ZL12MX_I2C1_Initv+0x5c>)
    8342:	4a16      	ldr	r2, [pc, #88]	; (839c <_ZL12MX_I2C1_Initv+0x60>)
    8344:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
    8346:	4b14      	ldr	r3, [pc, #80]	; (8398 <_ZL12MX_I2C1_Initv+0x5c>)
    8348:	4a15      	ldr	r2, [pc, #84]	; (83a0 <_ZL12MX_I2C1_Initv+0x64>)
    834a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
    834c:	4b12      	ldr	r3, [pc, #72]	; (8398 <_ZL12MX_I2C1_Initv+0x5c>)
    834e:	2200      	movs	r2, #0
    8350:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
    8352:	4b11      	ldr	r3, [pc, #68]	; (8398 <_ZL12MX_I2C1_Initv+0x5c>)
    8354:	2200      	movs	r2, #0
    8356:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
    8358:	4b0f      	ldr	r3, [pc, #60]	; (8398 <_ZL12MX_I2C1_Initv+0x5c>)
    835a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    835e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
    8360:	4b0d      	ldr	r3, [pc, #52]	; (8398 <_ZL12MX_I2C1_Initv+0x5c>)
    8362:	2200      	movs	r2, #0
    8364:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
    8366:	4b0c      	ldr	r3, [pc, #48]	; (8398 <_ZL12MX_I2C1_Initv+0x5c>)
    8368:	2200      	movs	r2, #0
    836a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
    836c:	4b0a      	ldr	r3, [pc, #40]	; (8398 <_ZL12MX_I2C1_Initv+0x5c>)
    836e:	2200      	movs	r2, #0
    8370:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
    8372:	4b09      	ldr	r3, [pc, #36]	; (8398 <_ZL12MX_I2C1_Initv+0x5c>)
    8374:	2200      	movs	r2, #0
    8376:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
    8378:	4807      	ldr	r0, [pc, #28]	; (8398 <_ZL12MX_I2C1_Initv+0x5c>)
    837a:	f000 fca7 	bl	8ccc <HAL_I2C_Init>
    837e:	4603      	mov	r3, r0
    8380:	2b00      	cmp	r3, #0
    8382:	bf14      	ite	ne
    8384:	2301      	movne	r3, #1
    8386:	2300      	moveq	r3, #0
    8388:	b2db      	uxtb	r3, r3
    838a:	2b00      	cmp	r3, #0
    838c:	d001      	beq.n	8392 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
    838e:	f000 f8a7 	bl	84e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
    8392:	bf00      	nop
    8394:	bd80      	pop	{r7, pc}
    8396:	bf00      	nop
    8398:	0001d210 	.word	0x0001d210
    839c:	40005400 	.word	0x40005400
    83a0:	000186a0 	.word	0x000186a0

000083a4 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
    83a4:	b580      	push	{r7, lr}
    83a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
    83a8:	4b13      	ldr	r3, [pc, #76]	; (83f8 <_ZL19MX_USART2_UART_Initv+0x54>)
    83aa:	4a14      	ldr	r2, [pc, #80]	; (83fc <_ZL19MX_USART2_UART_Initv+0x58>)
    83ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
    83ae:	4b12      	ldr	r3, [pc, #72]	; (83f8 <_ZL19MX_USART2_UART_Initv+0x54>)
    83b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
    83b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
    83b6:	4b10      	ldr	r3, [pc, #64]	; (83f8 <_ZL19MX_USART2_UART_Initv+0x54>)
    83b8:	2200      	movs	r2, #0
    83ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
    83bc:	4b0e      	ldr	r3, [pc, #56]	; (83f8 <_ZL19MX_USART2_UART_Initv+0x54>)
    83be:	2200      	movs	r2, #0
    83c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
    83c2:	4b0d      	ldr	r3, [pc, #52]	; (83f8 <_ZL19MX_USART2_UART_Initv+0x54>)
    83c4:	2200      	movs	r2, #0
    83c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
    83c8:	4b0b      	ldr	r3, [pc, #44]	; (83f8 <_ZL19MX_USART2_UART_Initv+0x54>)
    83ca:	220c      	movs	r2, #12
    83cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
    83ce:	4b0a      	ldr	r3, [pc, #40]	; (83f8 <_ZL19MX_USART2_UART_Initv+0x54>)
    83d0:	2200      	movs	r2, #0
    83d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
    83d4:	4b08      	ldr	r3, [pc, #32]	; (83f8 <_ZL19MX_USART2_UART_Initv+0x54>)
    83d6:	2200      	movs	r2, #0
    83d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
    83da:	4807      	ldr	r0, [pc, #28]	; (83f8 <_ZL19MX_USART2_UART_Initv+0x54>)
    83dc:	f001 fe24 	bl	a028 <HAL_UART_Init>
    83e0:	4603      	mov	r3, r0
    83e2:	2b00      	cmp	r3, #0
    83e4:	bf14      	ite	ne
    83e6:	2301      	movne	r3, #1
    83e8:	2300      	moveq	r3, #0
    83ea:	b2db      	uxtb	r3, r3
    83ec:	2b00      	cmp	r3, #0
    83ee:	d001      	beq.n	83f4 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
    83f0:	f000 f876 	bl	84e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
    83f4:	bf00      	nop
    83f6:	bd80      	pop	{r7, pc}
    83f8:	0001d264 	.word	0x0001d264
    83fc:	40004400 	.word	0x40004400

00008400 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
    8400:	b580      	push	{r7, lr}
    8402:	b08a      	sub	sp, #40	; 0x28
    8404:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
    8406:	f107 0314 	add.w	r3, r7, #20
    840a:	2200      	movs	r2, #0
    840c:	601a      	str	r2, [r3, #0]
    840e:	605a      	str	r2, [r3, #4]
    8410:	609a      	str	r2, [r3, #8]
    8412:	60da      	str	r2, [r3, #12]
    8414:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
    8416:	2300      	movs	r3, #0
    8418:	613b      	str	r3, [r7, #16]
    841a:	4b2d      	ldr	r3, [pc, #180]	; (84d0 <_ZL12MX_GPIO_Initv+0xd0>)
    841c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    841e:	4a2c      	ldr	r2, [pc, #176]	; (84d0 <_ZL12MX_GPIO_Initv+0xd0>)
    8420:	f043 0304 	orr.w	r3, r3, #4
    8424:	6313      	str	r3, [r2, #48]	; 0x30
    8426:	4b2a      	ldr	r3, [pc, #168]	; (84d0 <_ZL12MX_GPIO_Initv+0xd0>)
    8428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    842a:	f003 0304 	and.w	r3, r3, #4
    842e:	613b      	str	r3, [r7, #16]
    8430:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
    8432:	2300      	movs	r3, #0
    8434:	60fb      	str	r3, [r7, #12]
    8436:	4b26      	ldr	r3, [pc, #152]	; (84d0 <_ZL12MX_GPIO_Initv+0xd0>)
    8438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    843a:	4a25      	ldr	r2, [pc, #148]	; (84d0 <_ZL12MX_GPIO_Initv+0xd0>)
    843c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    8440:	6313      	str	r3, [r2, #48]	; 0x30
    8442:	4b23      	ldr	r3, [pc, #140]	; (84d0 <_ZL12MX_GPIO_Initv+0xd0>)
    8444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8446:	f003 0380 	and.w	r3, r3, #128	; 0x80
    844a:	60fb      	str	r3, [r7, #12]
    844c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
    844e:	2300      	movs	r3, #0
    8450:	60bb      	str	r3, [r7, #8]
    8452:	4b1f      	ldr	r3, [pc, #124]	; (84d0 <_ZL12MX_GPIO_Initv+0xd0>)
    8454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8456:	4a1e      	ldr	r2, [pc, #120]	; (84d0 <_ZL12MX_GPIO_Initv+0xd0>)
    8458:	f043 0301 	orr.w	r3, r3, #1
    845c:	6313      	str	r3, [r2, #48]	; 0x30
    845e:	4b1c      	ldr	r3, [pc, #112]	; (84d0 <_ZL12MX_GPIO_Initv+0xd0>)
    8460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8462:	f003 0301 	and.w	r3, r3, #1
    8466:	60bb      	str	r3, [r7, #8]
    8468:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
    846a:	2300      	movs	r3, #0
    846c:	607b      	str	r3, [r7, #4]
    846e:	4b18      	ldr	r3, [pc, #96]	; (84d0 <_ZL12MX_GPIO_Initv+0xd0>)
    8470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8472:	4a17      	ldr	r2, [pc, #92]	; (84d0 <_ZL12MX_GPIO_Initv+0xd0>)
    8474:	f043 0302 	orr.w	r3, r3, #2
    8478:	6313      	str	r3, [r2, #48]	; 0x30
    847a:	4b15      	ldr	r3, [pc, #84]	; (84d0 <_ZL12MX_GPIO_Initv+0xd0>)
    847c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    847e:	f003 0302 	and.w	r3, r3, #2
    8482:	607b      	str	r3, [r7, #4]
    8484:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
    8486:	2200      	movs	r2, #0
    8488:	2120      	movs	r1, #32
    848a:	4812      	ldr	r0, [pc, #72]	; (84d4 <_ZL12MX_GPIO_Initv+0xd4>)
    848c:	f000 fc04 	bl	8c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
    8490:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    8494:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
    8496:	4b10      	ldr	r3, [pc, #64]	; (84d8 <_ZL12MX_GPIO_Initv+0xd8>)
    8498:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
    849a:	2300      	movs	r3, #0
    849c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
    849e:	f107 0314 	add.w	r3, r7, #20
    84a2:	4619      	mov	r1, r3
    84a4:	480d      	ldr	r0, [pc, #52]	; (84dc <_ZL12MX_GPIO_Initv+0xdc>)
    84a6:	f000 fa75 	bl	8994 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
    84aa:	2320      	movs	r3, #32
    84ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    84ae:	2301      	movs	r3, #1
    84b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
    84b2:	2300      	movs	r3, #0
    84b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    84b6:	2300      	movs	r3, #0
    84b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
    84ba:	f107 0314 	add.w	r3, r7, #20
    84be:	4619      	mov	r1, r3
    84c0:	4804      	ldr	r0, [pc, #16]	; (84d4 <_ZL12MX_GPIO_Initv+0xd4>)
    84c2:	f000 fa67 	bl	8994 <HAL_GPIO_Init>

}
    84c6:	bf00      	nop
    84c8:	3728      	adds	r7, #40	; 0x28
    84ca:	46bd      	mov	sp, r7
    84cc:	bd80      	pop	{r7, pc}
    84ce:	bf00      	nop
    84d0:	40023800 	.word	0x40023800
    84d4:	40020000 	.word	0x40020000
    84d8:	10210000 	.word	0x10210000
    84dc:	40020800 	.word	0x40020800

000084e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
    84e0:	b480      	push	{r7}
    84e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
    84e4:	bf00      	nop
    84e6:	46bd      	mov	sp, r7
    84e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    84ec:	4770      	bx	lr
	...

000084f0 <_Z41__static_initialization_and_destruction_0ii>:
    84f0:	b580      	push	{r7, lr}
    84f2:	b082      	sub	sp, #8
    84f4:	af00      	add	r7, sp, #0
    84f6:	6078      	str	r0, [r7, #4]
    84f8:	6039      	str	r1, [r7, #0]
    84fa:	687b      	ldr	r3, [r7, #4]
    84fc:	2b01      	cmp	r3, #1
    84fe:	d107      	bne.n	8510 <_Z41__static_initialization_and_destruction_0ii+0x20>
    8500:	683b      	ldr	r3, [r7, #0]
    8502:	f64f 72ff 	movw	r2, #65535	; 0xffff
    8506:	4293      	cmp	r3, r2
    8508:	d102      	bne.n	8510 <_Z41__static_initialization_and_destruction_0ii+0x20>
IMU imu;
    850a:	4809      	ldr	r0, [pc, #36]	; (8530 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    850c:	f7ff fdec 	bl	80e8 <_ZN3IMUC1Ev>
    8510:	687b      	ldr	r3, [r7, #4]
    8512:	2b00      	cmp	r3, #0
    8514:	d107      	bne.n	8526 <_Z41__static_initialization_and_destruction_0ii+0x36>
    8516:	683b      	ldr	r3, [r7, #0]
    8518:	f64f 72ff 	movw	r2, #65535	; 0xffff
    851c:	4293      	cmp	r3, r2
    851e:	d102      	bne.n	8526 <_Z41__static_initialization_and_destruction_0ii+0x36>
    8520:	4803      	ldr	r0, [pc, #12]	; (8530 <_Z41__static_initialization_and_destruction_0ii+0x40>)
    8522:	f7ff fdf1 	bl	8108 <_ZN3IMUD1Ev>
}
    8526:	bf00      	nop
    8528:	3708      	adds	r7, #8
    852a:	46bd      	mov	sp, r7
    852c:	bd80      	pop	{r7, pc}
    852e:	bf00      	nop
    8530:	0001d2a4 	.word	0x0001d2a4

00008534 <_GLOBAL__sub_I_hi2c1>:
    8534:	b580      	push	{r7, lr}
    8536:	af00      	add	r7, sp, #0
    8538:	f64f 71ff 	movw	r1, #65535	; 0xffff
    853c:	2001      	movs	r0, #1
    853e:	f7ff ffd7 	bl	84f0 <_Z41__static_initialization_and_destruction_0ii>
    8542:	bd80      	pop	{r7, pc}

00008544 <_GLOBAL__sub_D_hi2c1>:
    8544:	b580      	push	{r7, lr}
    8546:	af00      	add	r7, sp, #0
    8548:	f64f 71ff 	movw	r1, #65535	; 0xffff
    854c:	2000      	movs	r0, #0
    854e:	f7ff ffcf 	bl	84f0 <_Z41__static_initialization_and_destruction_0ii>
    8552:	bd80      	pop	{r7, pc}

00008554 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
    8554:	b580      	push	{r7, lr}
    8556:	b082      	sub	sp, #8
    8558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
    855a:	2300      	movs	r3, #0
    855c:	607b      	str	r3, [r7, #4]
    855e:	4b10      	ldr	r3, [pc, #64]	; (85a0 <HAL_MspInit+0x4c>)
    8560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    8562:	4a0f      	ldr	r2, [pc, #60]	; (85a0 <HAL_MspInit+0x4c>)
    8564:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    8568:	6453      	str	r3, [r2, #68]	; 0x44
    856a:	4b0d      	ldr	r3, [pc, #52]	; (85a0 <HAL_MspInit+0x4c>)
    856c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    856e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    8572:	607b      	str	r3, [r7, #4]
    8574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
    8576:	2300      	movs	r3, #0
    8578:	603b      	str	r3, [r7, #0]
    857a:	4b09      	ldr	r3, [pc, #36]	; (85a0 <HAL_MspInit+0x4c>)
    857c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    857e:	4a08      	ldr	r2, [pc, #32]	; (85a0 <HAL_MspInit+0x4c>)
    8580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    8584:	6413      	str	r3, [r2, #64]	; 0x40
    8586:	4b06      	ldr	r3, [pc, #24]	; (85a0 <HAL_MspInit+0x4c>)
    8588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    858a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    858e:	603b      	str	r3, [r7, #0]
    8590:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
    8592:	2007      	movs	r0, #7
    8594:	f000 f9c9 	bl	892a <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
    8598:	bf00      	nop
    859a:	3708      	adds	r7, #8
    859c:	46bd      	mov	sp, r7
    859e:	bd80      	pop	{r7, pc}
    85a0:	40023800 	.word	0x40023800

000085a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
    85a4:	b580      	push	{r7, lr}
    85a6:	b08a      	sub	sp, #40	; 0x28
    85a8:	af00      	add	r7, sp, #0
    85aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
    85ac:	f107 0314 	add.w	r3, r7, #20
    85b0:	2200      	movs	r2, #0
    85b2:	601a      	str	r2, [r3, #0]
    85b4:	605a      	str	r2, [r3, #4]
    85b6:	609a      	str	r2, [r3, #8]
    85b8:	60da      	str	r2, [r3, #12]
    85ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
    85bc:	687b      	ldr	r3, [r7, #4]
    85be:	681b      	ldr	r3, [r3, #0]
    85c0:	4a19      	ldr	r2, [pc, #100]	; (8628 <HAL_I2C_MspInit+0x84>)
    85c2:	4293      	cmp	r3, r2
    85c4:	d12c      	bne.n	8620 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
    85c6:	2300      	movs	r3, #0
    85c8:	613b      	str	r3, [r7, #16]
    85ca:	4b18      	ldr	r3, [pc, #96]	; (862c <HAL_I2C_MspInit+0x88>)
    85cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    85ce:	4a17      	ldr	r2, [pc, #92]	; (862c <HAL_I2C_MspInit+0x88>)
    85d0:	f043 0302 	orr.w	r3, r3, #2
    85d4:	6313      	str	r3, [r2, #48]	; 0x30
    85d6:	4b15      	ldr	r3, [pc, #84]	; (862c <HAL_I2C_MspInit+0x88>)
    85d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    85da:	f003 0302 	and.w	r3, r3, #2
    85de:	613b      	str	r3, [r7, #16]
    85e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    85e2:	f44f 7340 	mov.w	r3, #768	; 0x300
    85e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    85e8:	2312      	movs	r3, #18
    85ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    85ec:	2301      	movs	r3, #1
    85ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    85f0:	2303      	movs	r3, #3
    85f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    85f4:	2304      	movs	r3, #4
    85f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
    85f8:	f107 0314 	add.w	r3, r7, #20
    85fc:	4619      	mov	r1, r3
    85fe:	480c      	ldr	r0, [pc, #48]	; (8630 <HAL_I2C_MspInit+0x8c>)
    8600:	f000 f9c8 	bl	8994 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
    8604:	2300      	movs	r3, #0
    8606:	60fb      	str	r3, [r7, #12]
    8608:	4b08      	ldr	r3, [pc, #32]	; (862c <HAL_I2C_MspInit+0x88>)
    860a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    860c:	4a07      	ldr	r2, [pc, #28]	; (862c <HAL_I2C_MspInit+0x88>)
    860e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    8612:	6413      	str	r3, [r2, #64]	; 0x40
    8614:	4b05      	ldr	r3, [pc, #20]	; (862c <HAL_I2C_MspInit+0x88>)
    8616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    861c:	60fb      	str	r3, [r7, #12]
    861e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
    8620:	bf00      	nop
    8622:	3728      	adds	r7, #40	; 0x28
    8624:	46bd      	mov	sp, r7
    8626:	bd80      	pop	{r7, pc}
    8628:	40005400 	.word	0x40005400
    862c:	40023800 	.word	0x40023800
    8630:	40020400 	.word	0x40020400

00008634 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
    8634:	b580      	push	{r7, lr}
    8636:	b08a      	sub	sp, #40	; 0x28
    8638:	af00      	add	r7, sp, #0
    863a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
    863c:	f107 0314 	add.w	r3, r7, #20
    8640:	2200      	movs	r2, #0
    8642:	601a      	str	r2, [r3, #0]
    8644:	605a      	str	r2, [r3, #4]
    8646:	609a      	str	r2, [r3, #8]
    8648:	60da      	str	r2, [r3, #12]
    864a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
    864c:	687b      	ldr	r3, [r7, #4]
    864e:	681b      	ldr	r3, [r3, #0]
    8650:	4a19      	ldr	r2, [pc, #100]	; (86b8 <HAL_UART_MspInit+0x84>)
    8652:	4293      	cmp	r3, r2
    8654:	d12b      	bne.n	86ae <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
    8656:	2300      	movs	r3, #0
    8658:	613b      	str	r3, [r7, #16]
    865a:	4b18      	ldr	r3, [pc, #96]	; (86bc <HAL_UART_MspInit+0x88>)
    865c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    865e:	4a17      	ldr	r2, [pc, #92]	; (86bc <HAL_UART_MspInit+0x88>)
    8660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    8664:	6413      	str	r3, [r2, #64]	; 0x40
    8666:	4b15      	ldr	r3, [pc, #84]	; (86bc <HAL_UART_MspInit+0x88>)
    8668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    866a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    866e:	613b      	str	r3, [r7, #16]
    8670:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
    8672:	2300      	movs	r3, #0
    8674:	60fb      	str	r3, [r7, #12]
    8676:	4b11      	ldr	r3, [pc, #68]	; (86bc <HAL_UART_MspInit+0x88>)
    8678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    867a:	4a10      	ldr	r2, [pc, #64]	; (86bc <HAL_UART_MspInit+0x88>)
    867c:	f043 0301 	orr.w	r3, r3, #1
    8680:	6313      	str	r3, [r2, #48]	; 0x30
    8682:	4b0e      	ldr	r3, [pc, #56]	; (86bc <HAL_UART_MspInit+0x88>)
    8684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8686:	f003 0301 	and.w	r3, r3, #1
    868a:	60fb      	str	r3, [r7, #12]
    868c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    868e:	230c      	movs	r3, #12
    8690:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    8692:	2302      	movs	r3, #2
    8694:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    8696:	2300      	movs	r3, #0
    8698:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    869a:	2300      	movs	r3, #0
    869c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    869e:	2307      	movs	r3, #7
    86a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
    86a2:	f107 0314 	add.w	r3, r7, #20
    86a6:	4619      	mov	r1, r3
    86a8:	4805      	ldr	r0, [pc, #20]	; (86c0 <HAL_UART_MspInit+0x8c>)
    86aa:	f000 f973 	bl	8994 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
    86ae:	bf00      	nop
    86b0:	3728      	adds	r7, #40	; 0x28
    86b2:	46bd      	mov	sp, r7
    86b4:	bd80      	pop	{r7, pc}
    86b6:	bf00      	nop
    86b8:	40004400 	.word	0x40004400
    86bc:	40023800 	.word	0x40023800
    86c0:	40020000 	.word	0x40020000

000086c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
    86c4:	b580      	push	{r7, lr}
    86c6:	b08c      	sub	sp, #48	; 0x30
    86c8:	af00      	add	r7, sp, #0
    86ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
    86cc:	2300      	movs	r3, #0
    86ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
    86d0:	2300      	movs	r3, #0
    86d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
    86d4:	2200      	movs	r2, #0
    86d6:	6879      	ldr	r1, [r7, #4]
    86d8:	2019      	movs	r0, #25
    86da:	f000 f931 	bl	8940 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
    86de:	2019      	movs	r0, #25
    86e0:	f000 f94a 	bl	8978 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
    86e4:	2300      	movs	r3, #0
    86e6:	60fb      	str	r3, [r7, #12]
    86e8:	4b1e      	ldr	r3, [pc, #120]	; (8764 <HAL_InitTick+0xa0>)
    86ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    86ec:	4a1d      	ldr	r2, [pc, #116]	; (8764 <HAL_InitTick+0xa0>)
    86ee:	f043 0301 	orr.w	r3, r3, #1
    86f2:	6453      	str	r3, [r2, #68]	; 0x44
    86f4:	4b1b      	ldr	r3, [pc, #108]	; (8764 <HAL_InitTick+0xa0>)
    86f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    86f8:	f003 0301 	and.w	r3, r3, #1
    86fc:	60fb      	str	r3, [r7, #12]
    86fe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
    8700:	f107 0210 	add.w	r2, r7, #16
    8704:	f107 0314 	add.w	r3, r7, #20
    8708:	4611      	mov	r1, r2
    870a:	4618      	mov	r0, r3
    870c:	f001 fb80 	bl	9e10 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
    8710:	f001 fb6a 	bl	9de8 <HAL_RCC_GetPCLK2Freq>
    8714:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
    8716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8718:	4a13      	ldr	r2, [pc, #76]	; (8768 <HAL_InitTick+0xa4>)
    871a:	fba2 2303 	umull	r2, r3, r2, r3
    871e:	0c9b      	lsrs	r3, r3, #18
    8720:	3b01      	subs	r3, #1
    8722:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
    8724:	4b11      	ldr	r3, [pc, #68]	; (876c <HAL_InitTick+0xa8>)
    8726:	4a12      	ldr	r2, [pc, #72]	; (8770 <HAL_InitTick+0xac>)
    8728:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
    872a:	4b10      	ldr	r3, [pc, #64]	; (876c <HAL_InitTick+0xa8>)
    872c:	f240 32e7 	movw	r2, #999	; 0x3e7
    8730:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
    8732:	4a0e      	ldr	r2, [pc, #56]	; (876c <HAL_InitTick+0xa8>)
    8734:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8736:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
    8738:	4b0c      	ldr	r3, [pc, #48]	; (876c <HAL_InitTick+0xa8>)
    873a:	2200      	movs	r2, #0
    873c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
    873e:	4b0b      	ldr	r3, [pc, #44]	; (876c <HAL_InitTick+0xa8>)
    8740:	2200      	movs	r2, #0
    8742:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
    8744:	4809      	ldr	r0, [pc, #36]	; (876c <HAL_InitTick+0xa8>)
    8746:	f001 fb95 	bl	9e74 <HAL_TIM_Base_Init>
    874a:	4603      	mov	r3, r0
    874c:	2b00      	cmp	r3, #0
    874e:	d104      	bne.n	875a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
    8750:	4806      	ldr	r0, [pc, #24]	; (876c <HAL_InitTick+0xa8>)
    8752:	f001 fbc4 	bl	9ede <HAL_TIM_Base_Start_IT>
    8756:	4603      	mov	r3, r0
    8758:	e000      	b.n	875c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
    875a:	2301      	movs	r3, #1
}
    875c:	4618      	mov	r0, r3
    875e:	3730      	adds	r7, #48	; 0x30
    8760:	46bd      	mov	sp, r7
    8762:	bd80      	pop	{r7, pc}
    8764:	40023800 	.word	0x40023800
    8768:	431bde83 	.word	0x431bde83
    876c:	0001e00c 	.word	0x0001e00c
    8770:	40010000 	.word	0x40010000

00008774 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
    8774:	b580      	push	{r7, lr}
    8776:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
    8778:	4b0e      	ldr	r3, [pc, #56]	; (87b4 <HAL_Init+0x40>)
    877a:	681b      	ldr	r3, [r3, #0]
    877c:	4a0d      	ldr	r2, [pc, #52]	; (87b4 <HAL_Init+0x40>)
    877e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    8782:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
    8784:	4b0b      	ldr	r3, [pc, #44]	; (87b4 <HAL_Init+0x40>)
    8786:	681b      	ldr	r3, [r3, #0]
    8788:	4a0a      	ldr	r2, [pc, #40]	; (87b4 <HAL_Init+0x40>)
    878a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    878e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
    8790:	4b08      	ldr	r3, [pc, #32]	; (87b4 <HAL_Init+0x40>)
    8792:	681b      	ldr	r3, [r3, #0]
    8794:	4a07      	ldr	r2, [pc, #28]	; (87b4 <HAL_Init+0x40>)
    8796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    879a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
    879c:	2003      	movs	r0, #3
    879e:	f000 f8c4 	bl	892a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
    87a2:	2000      	movs	r0, #0
    87a4:	f7ff ff8e 	bl	86c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
    87a8:	f7ff fed4 	bl	8554 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
    87ac:	2300      	movs	r3, #0
}
    87ae:	4618      	mov	r0, r3
    87b0:	bd80      	pop	{r7, pc}
    87b2:	bf00      	nop
    87b4:	40023c00 	.word	0x40023c00

000087b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
    87b8:	b480      	push	{r7}
    87ba:	af00      	add	r7, sp, #0
  return uwTick;
    87bc:	4b03      	ldr	r3, [pc, #12]	; (87cc <HAL_GetTick+0x14>)
    87be:	681b      	ldr	r3, [r3, #0]
}
    87c0:	4618      	mov	r0, r3
    87c2:	46bd      	mov	sp, r7
    87c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    87c8:	4770      	bx	lr
    87ca:	bf00      	nop
    87cc:	0001e04c 	.word	0x0001e04c

000087d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
    87d0:	b480      	push	{r7}
    87d2:	b085      	sub	sp, #20
    87d4:	af00      	add	r7, sp, #0
    87d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
    87d8:	687b      	ldr	r3, [r7, #4]
    87da:	f003 0307 	and.w	r3, r3, #7
    87de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
    87e0:	4b0c      	ldr	r3, [pc, #48]	; (8814 <__NVIC_SetPriorityGrouping+0x44>)
    87e2:	68db      	ldr	r3, [r3, #12]
    87e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
    87e6:	68ba      	ldr	r2, [r7, #8]
    87e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
    87ec:	4013      	ands	r3, r2
    87ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
    87f0:	68fb      	ldr	r3, [r7, #12]
    87f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
    87f4:	68bb      	ldr	r3, [r7, #8]
    87f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
    87f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    87fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    8800:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
    8802:	4a04      	ldr	r2, [pc, #16]	; (8814 <__NVIC_SetPriorityGrouping+0x44>)
    8804:	68bb      	ldr	r3, [r7, #8]
    8806:	60d3      	str	r3, [r2, #12]
}
    8808:	bf00      	nop
    880a:	3714      	adds	r7, #20
    880c:	46bd      	mov	sp, r7
    880e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8812:	4770      	bx	lr
    8814:	e000ed00 	.word	0xe000ed00

00008818 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
    8818:	b480      	push	{r7}
    881a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
    881c:	4b04      	ldr	r3, [pc, #16]	; (8830 <__NVIC_GetPriorityGrouping+0x18>)
    881e:	68db      	ldr	r3, [r3, #12]
    8820:	0a1b      	lsrs	r3, r3, #8
    8822:	f003 0307 	and.w	r3, r3, #7
}
    8826:	4618      	mov	r0, r3
    8828:	46bd      	mov	sp, r7
    882a:	f85d 7b04 	ldr.w	r7, [sp], #4
    882e:	4770      	bx	lr
    8830:	e000ed00 	.word	0xe000ed00

00008834 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    8834:	b480      	push	{r7}
    8836:	b083      	sub	sp, #12
    8838:	af00      	add	r7, sp, #0
    883a:	4603      	mov	r3, r0
    883c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    883e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    8842:	2b00      	cmp	r3, #0
    8844:	db0b      	blt.n	885e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8846:	79fb      	ldrb	r3, [r7, #7]
    8848:	f003 021f 	and.w	r2, r3, #31
    884c:	4907      	ldr	r1, [pc, #28]	; (886c <__NVIC_EnableIRQ+0x38>)
    884e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    8852:	095b      	lsrs	r3, r3, #5
    8854:	2001      	movs	r0, #1
    8856:	fa00 f202 	lsl.w	r2, r0, r2
    885a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    885e:	bf00      	nop
    8860:	370c      	adds	r7, #12
    8862:	46bd      	mov	sp, r7
    8864:	f85d 7b04 	ldr.w	r7, [sp], #4
    8868:	4770      	bx	lr
    886a:	bf00      	nop
    886c:	e000e100 	.word	0xe000e100

00008870 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    8870:	b480      	push	{r7}
    8872:	b083      	sub	sp, #12
    8874:	af00      	add	r7, sp, #0
    8876:	4603      	mov	r3, r0
    8878:	6039      	str	r1, [r7, #0]
    887a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    887c:	f997 3007 	ldrsb.w	r3, [r7, #7]
    8880:	2b00      	cmp	r3, #0
    8882:	db0a      	blt.n	889a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    8884:	683b      	ldr	r3, [r7, #0]
    8886:	b2da      	uxtb	r2, r3
    8888:	490c      	ldr	r1, [pc, #48]	; (88bc <__NVIC_SetPriority+0x4c>)
    888a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    888e:	0112      	lsls	r2, r2, #4
    8890:	b2d2      	uxtb	r2, r2
    8892:	440b      	add	r3, r1
    8894:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
    8898:	e00a      	b.n	88b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    889a:	683b      	ldr	r3, [r7, #0]
    889c:	b2da      	uxtb	r2, r3
    889e:	4908      	ldr	r1, [pc, #32]	; (88c0 <__NVIC_SetPriority+0x50>)
    88a0:	79fb      	ldrb	r3, [r7, #7]
    88a2:	f003 030f 	and.w	r3, r3, #15
    88a6:	3b04      	subs	r3, #4
    88a8:	0112      	lsls	r2, r2, #4
    88aa:	b2d2      	uxtb	r2, r2
    88ac:	440b      	add	r3, r1
    88ae:	761a      	strb	r2, [r3, #24]
}
    88b0:	bf00      	nop
    88b2:	370c      	adds	r7, #12
    88b4:	46bd      	mov	sp, r7
    88b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    88ba:	4770      	bx	lr
    88bc:	e000e100 	.word	0xe000e100
    88c0:	e000ed00 	.word	0xe000ed00

000088c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
    88c4:	b480      	push	{r7}
    88c6:	b089      	sub	sp, #36	; 0x24
    88c8:	af00      	add	r7, sp, #0
    88ca:	60f8      	str	r0, [r7, #12]
    88cc:	60b9      	str	r1, [r7, #8]
    88ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
    88d0:	68fb      	ldr	r3, [r7, #12]
    88d2:	f003 0307 	and.w	r3, r3, #7
    88d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
    88d8:	69fb      	ldr	r3, [r7, #28]
    88da:	f1c3 0307 	rsb	r3, r3, #7
    88de:	2b04      	cmp	r3, #4
    88e0:	bf28      	it	cs
    88e2:	2304      	movcs	r3, #4
    88e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
    88e6:	69fb      	ldr	r3, [r7, #28]
    88e8:	3304      	adds	r3, #4
    88ea:	2b06      	cmp	r3, #6
    88ec:	d902      	bls.n	88f4 <NVIC_EncodePriority+0x30>
    88ee:	69fb      	ldr	r3, [r7, #28]
    88f0:	3b03      	subs	r3, #3
    88f2:	e000      	b.n	88f6 <NVIC_EncodePriority+0x32>
    88f4:	2300      	movs	r3, #0
    88f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
    88f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    88fc:	69bb      	ldr	r3, [r7, #24]
    88fe:	fa02 f303 	lsl.w	r3, r2, r3
    8902:	43da      	mvns	r2, r3
    8904:	68bb      	ldr	r3, [r7, #8]
    8906:	401a      	ands	r2, r3
    8908:	697b      	ldr	r3, [r7, #20]
    890a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
    890c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8910:	697b      	ldr	r3, [r7, #20]
    8912:	fa01 f303 	lsl.w	r3, r1, r3
    8916:	43d9      	mvns	r1, r3
    8918:	687b      	ldr	r3, [r7, #4]
    891a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
    891c:	4313      	orrs	r3, r2
         );
}
    891e:	4618      	mov	r0, r3
    8920:	3724      	adds	r7, #36	; 0x24
    8922:	46bd      	mov	sp, r7
    8924:	f85d 7b04 	ldr.w	r7, [sp], #4
    8928:	4770      	bx	lr

0000892a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
    892a:	b580      	push	{r7, lr}
    892c:	b082      	sub	sp, #8
    892e:	af00      	add	r7, sp, #0
    8930:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
    8932:	6878      	ldr	r0, [r7, #4]
    8934:	f7ff ff4c 	bl	87d0 <__NVIC_SetPriorityGrouping>
}
    8938:	bf00      	nop
    893a:	3708      	adds	r7, #8
    893c:	46bd      	mov	sp, r7
    893e:	bd80      	pop	{r7, pc}

00008940 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
    8940:	b580      	push	{r7, lr}
    8942:	b086      	sub	sp, #24
    8944:	af00      	add	r7, sp, #0
    8946:	4603      	mov	r3, r0
    8948:	60b9      	str	r1, [r7, #8]
    894a:	607a      	str	r2, [r7, #4]
    894c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
    894e:	2300      	movs	r3, #0
    8950:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
    8952:	f7ff ff61 	bl	8818 <__NVIC_GetPriorityGrouping>
    8956:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
    8958:	687a      	ldr	r2, [r7, #4]
    895a:	68b9      	ldr	r1, [r7, #8]
    895c:	6978      	ldr	r0, [r7, #20]
    895e:	f7ff ffb1 	bl	88c4 <NVIC_EncodePriority>
    8962:	4602      	mov	r2, r0
    8964:	f997 300f 	ldrsb.w	r3, [r7, #15]
    8968:	4611      	mov	r1, r2
    896a:	4618      	mov	r0, r3
    896c:	f7ff ff80 	bl	8870 <__NVIC_SetPriority>
}
    8970:	bf00      	nop
    8972:	3718      	adds	r7, #24
    8974:	46bd      	mov	sp, r7
    8976:	bd80      	pop	{r7, pc}

00008978 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
    8978:	b580      	push	{r7, lr}
    897a:	b082      	sub	sp, #8
    897c:	af00      	add	r7, sp, #0
    897e:	4603      	mov	r3, r0
    8980:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
    8982:	f997 3007 	ldrsb.w	r3, [r7, #7]
    8986:	4618      	mov	r0, r3
    8988:	f7ff ff54 	bl	8834 <__NVIC_EnableIRQ>
}
    898c:	bf00      	nop
    898e:	3708      	adds	r7, #8
    8990:	46bd      	mov	sp, r7
    8992:	bd80      	pop	{r7, pc}

00008994 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
    8994:	b480      	push	{r7}
    8996:	b089      	sub	sp, #36	; 0x24
    8998:	af00      	add	r7, sp, #0
    899a:	6078      	str	r0, [r7, #4]
    899c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
    899e:	2300      	movs	r3, #0
    89a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
    89a2:	2300      	movs	r3, #0
    89a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
    89a6:	2300      	movs	r3, #0
    89a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
    89aa:	2300      	movs	r3, #0
    89ac:	61fb      	str	r3, [r7, #28]
    89ae:	e159      	b.n	8c64 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    89b0:	2201      	movs	r2, #1
    89b2:	69fb      	ldr	r3, [r7, #28]
    89b4:	fa02 f303 	lsl.w	r3, r2, r3
    89b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
    89ba:	683b      	ldr	r3, [r7, #0]
    89bc:	681b      	ldr	r3, [r3, #0]
    89be:	697a      	ldr	r2, [r7, #20]
    89c0:	4013      	ands	r3, r2
    89c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
    89c4:	693a      	ldr	r2, [r7, #16]
    89c6:	697b      	ldr	r3, [r7, #20]
    89c8:	429a      	cmp	r2, r3
    89ca:	f040 8148 	bne.w	8c5e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
    89ce:	683b      	ldr	r3, [r7, #0]
    89d0:	685b      	ldr	r3, [r3, #4]
    89d2:	2b01      	cmp	r3, #1
    89d4:	d00b      	beq.n	89ee <HAL_GPIO_Init+0x5a>
    89d6:	683b      	ldr	r3, [r7, #0]
    89d8:	685b      	ldr	r3, [r3, #4]
    89da:	2b02      	cmp	r3, #2
    89dc:	d007      	beq.n	89ee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
    89de:	683b      	ldr	r3, [r7, #0]
    89e0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
    89e2:	2b11      	cmp	r3, #17
    89e4:	d003      	beq.n	89ee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
    89e6:	683b      	ldr	r3, [r7, #0]
    89e8:	685b      	ldr	r3, [r3, #4]
    89ea:	2b12      	cmp	r3, #18
    89ec:	d130      	bne.n	8a50 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
    89ee:	687b      	ldr	r3, [r7, #4]
    89f0:	689b      	ldr	r3, [r3, #8]
    89f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
    89f4:	69fb      	ldr	r3, [r7, #28]
    89f6:	005b      	lsls	r3, r3, #1
    89f8:	2203      	movs	r2, #3
    89fa:	fa02 f303 	lsl.w	r3, r2, r3
    89fe:	43db      	mvns	r3, r3
    8a00:	69ba      	ldr	r2, [r7, #24]
    8a02:	4013      	ands	r3, r2
    8a04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
    8a06:	683b      	ldr	r3, [r7, #0]
    8a08:	68da      	ldr	r2, [r3, #12]
    8a0a:	69fb      	ldr	r3, [r7, #28]
    8a0c:	005b      	lsls	r3, r3, #1
    8a0e:	fa02 f303 	lsl.w	r3, r2, r3
    8a12:	69ba      	ldr	r2, [r7, #24]
    8a14:	4313      	orrs	r3, r2
    8a16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
    8a18:	687b      	ldr	r3, [r7, #4]
    8a1a:	69ba      	ldr	r2, [r7, #24]
    8a1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
    8a1e:	687b      	ldr	r3, [r7, #4]
    8a20:	685b      	ldr	r3, [r3, #4]
    8a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
    8a24:	2201      	movs	r2, #1
    8a26:	69fb      	ldr	r3, [r7, #28]
    8a28:	fa02 f303 	lsl.w	r3, r2, r3
    8a2c:	43db      	mvns	r3, r3
    8a2e:	69ba      	ldr	r2, [r7, #24]
    8a30:	4013      	ands	r3, r2
    8a32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
    8a34:	683b      	ldr	r3, [r7, #0]
    8a36:	685b      	ldr	r3, [r3, #4]
    8a38:	091b      	lsrs	r3, r3, #4
    8a3a:	f003 0201 	and.w	r2, r3, #1
    8a3e:	69fb      	ldr	r3, [r7, #28]
    8a40:	fa02 f303 	lsl.w	r3, r2, r3
    8a44:	69ba      	ldr	r2, [r7, #24]
    8a46:	4313      	orrs	r3, r2
    8a48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
    8a4a:	687b      	ldr	r3, [r7, #4]
    8a4c:	69ba      	ldr	r2, [r7, #24]
    8a4e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
    8a50:	687b      	ldr	r3, [r7, #4]
    8a52:	68db      	ldr	r3, [r3, #12]
    8a54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
    8a56:	69fb      	ldr	r3, [r7, #28]
    8a58:	005b      	lsls	r3, r3, #1
    8a5a:	2203      	movs	r2, #3
    8a5c:	fa02 f303 	lsl.w	r3, r2, r3
    8a60:	43db      	mvns	r3, r3
    8a62:	69ba      	ldr	r2, [r7, #24]
    8a64:	4013      	ands	r3, r2
    8a66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
    8a68:	683b      	ldr	r3, [r7, #0]
    8a6a:	689a      	ldr	r2, [r3, #8]
    8a6c:	69fb      	ldr	r3, [r7, #28]
    8a6e:	005b      	lsls	r3, r3, #1
    8a70:	fa02 f303 	lsl.w	r3, r2, r3
    8a74:	69ba      	ldr	r2, [r7, #24]
    8a76:	4313      	orrs	r3, r2
    8a78:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
    8a7a:	687b      	ldr	r3, [r7, #4]
    8a7c:	69ba      	ldr	r2, [r7, #24]
    8a7e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
    8a80:	683b      	ldr	r3, [r7, #0]
    8a82:	685b      	ldr	r3, [r3, #4]
    8a84:	2b02      	cmp	r3, #2
    8a86:	d003      	beq.n	8a90 <HAL_GPIO_Init+0xfc>
    8a88:	683b      	ldr	r3, [r7, #0]
    8a8a:	685b      	ldr	r3, [r3, #4]
    8a8c:	2b12      	cmp	r3, #18
    8a8e:	d123      	bne.n	8ad8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
    8a90:	69fb      	ldr	r3, [r7, #28]
    8a92:	08da      	lsrs	r2, r3, #3
    8a94:	687b      	ldr	r3, [r7, #4]
    8a96:	3208      	adds	r2, #8
    8a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
    8a9e:	69fb      	ldr	r3, [r7, #28]
    8aa0:	f003 0307 	and.w	r3, r3, #7
    8aa4:	009b      	lsls	r3, r3, #2
    8aa6:	220f      	movs	r2, #15
    8aa8:	fa02 f303 	lsl.w	r3, r2, r3
    8aac:	43db      	mvns	r3, r3
    8aae:	69ba      	ldr	r2, [r7, #24]
    8ab0:	4013      	ands	r3, r2
    8ab2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
    8ab4:	683b      	ldr	r3, [r7, #0]
    8ab6:	691a      	ldr	r2, [r3, #16]
    8ab8:	69fb      	ldr	r3, [r7, #28]
    8aba:	f003 0307 	and.w	r3, r3, #7
    8abe:	009b      	lsls	r3, r3, #2
    8ac0:	fa02 f303 	lsl.w	r3, r2, r3
    8ac4:	69ba      	ldr	r2, [r7, #24]
    8ac6:	4313      	orrs	r3, r2
    8ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
    8aca:	69fb      	ldr	r3, [r7, #28]
    8acc:	08da      	lsrs	r2, r3, #3
    8ace:	687b      	ldr	r3, [r7, #4]
    8ad0:	3208      	adds	r2, #8
    8ad2:	69b9      	ldr	r1, [r7, #24]
    8ad4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
    8ad8:	687b      	ldr	r3, [r7, #4]
    8ada:	681b      	ldr	r3, [r3, #0]
    8adc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
    8ade:	69fb      	ldr	r3, [r7, #28]
    8ae0:	005b      	lsls	r3, r3, #1
    8ae2:	2203      	movs	r2, #3
    8ae4:	fa02 f303 	lsl.w	r3, r2, r3
    8ae8:	43db      	mvns	r3, r3
    8aea:	69ba      	ldr	r2, [r7, #24]
    8aec:	4013      	ands	r3, r2
    8aee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
    8af0:	683b      	ldr	r3, [r7, #0]
    8af2:	685b      	ldr	r3, [r3, #4]
    8af4:	f003 0203 	and.w	r2, r3, #3
    8af8:	69fb      	ldr	r3, [r7, #28]
    8afa:	005b      	lsls	r3, r3, #1
    8afc:	fa02 f303 	lsl.w	r3, r2, r3
    8b00:	69ba      	ldr	r2, [r7, #24]
    8b02:	4313      	orrs	r3, r2
    8b04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
    8b06:	687b      	ldr	r3, [r7, #4]
    8b08:	69ba      	ldr	r2, [r7, #24]
    8b0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
    8b0c:	683b      	ldr	r3, [r7, #0]
    8b0e:	685b      	ldr	r3, [r3, #4]
    8b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    8b14:	2b00      	cmp	r3, #0
    8b16:	f000 80a2 	beq.w	8c5e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
    8b1a:	2300      	movs	r3, #0
    8b1c:	60fb      	str	r3, [r7, #12]
    8b1e:	4b56      	ldr	r3, [pc, #344]	; (8c78 <HAL_GPIO_Init+0x2e4>)
    8b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    8b22:	4a55      	ldr	r2, [pc, #340]	; (8c78 <HAL_GPIO_Init+0x2e4>)
    8b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    8b28:	6453      	str	r3, [r2, #68]	; 0x44
    8b2a:	4b53      	ldr	r3, [pc, #332]	; (8c78 <HAL_GPIO_Init+0x2e4>)
    8b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    8b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    8b32:	60fb      	str	r3, [r7, #12]
    8b34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
    8b36:	4a51      	ldr	r2, [pc, #324]	; (8c7c <HAL_GPIO_Init+0x2e8>)
    8b38:	69fb      	ldr	r3, [r7, #28]
    8b3a:	089b      	lsrs	r3, r3, #2
    8b3c:	3302      	adds	r3, #2
    8b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    8b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
    8b44:	69fb      	ldr	r3, [r7, #28]
    8b46:	f003 0303 	and.w	r3, r3, #3
    8b4a:	009b      	lsls	r3, r3, #2
    8b4c:	220f      	movs	r2, #15
    8b4e:	fa02 f303 	lsl.w	r3, r2, r3
    8b52:	43db      	mvns	r3, r3
    8b54:	69ba      	ldr	r2, [r7, #24]
    8b56:	4013      	ands	r3, r2
    8b58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
    8b5a:	687b      	ldr	r3, [r7, #4]
    8b5c:	4a48      	ldr	r2, [pc, #288]	; (8c80 <HAL_GPIO_Init+0x2ec>)
    8b5e:	4293      	cmp	r3, r2
    8b60:	d019      	beq.n	8b96 <HAL_GPIO_Init+0x202>
    8b62:	687b      	ldr	r3, [r7, #4]
    8b64:	4a47      	ldr	r2, [pc, #284]	; (8c84 <HAL_GPIO_Init+0x2f0>)
    8b66:	4293      	cmp	r3, r2
    8b68:	d013      	beq.n	8b92 <HAL_GPIO_Init+0x1fe>
    8b6a:	687b      	ldr	r3, [r7, #4]
    8b6c:	4a46      	ldr	r2, [pc, #280]	; (8c88 <HAL_GPIO_Init+0x2f4>)
    8b6e:	4293      	cmp	r3, r2
    8b70:	d00d      	beq.n	8b8e <HAL_GPIO_Init+0x1fa>
    8b72:	687b      	ldr	r3, [r7, #4]
    8b74:	4a45      	ldr	r2, [pc, #276]	; (8c8c <HAL_GPIO_Init+0x2f8>)
    8b76:	4293      	cmp	r3, r2
    8b78:	d007      	beq.n	8b8a <HAL_GPIO_Init+0x1f6>
    8b7a:	687b      	ldr	r3, [r7, #4]
    8b7c:	4a44      	ldr	r2, [pc, #272]	; (8c90 <HAL_GPIO_Init+0x2fc>)
    8b7e:	4293      	cmp	r3, r2
    8b80:	d101      	bne.n	8b86 <HAL_GPIO_Init+0x1f2>
    8b82:	2304      	movs	r3, #4
    8b84:	e008      	b.n	8b98 <HAL_GPIO_Init+0x204>
    8b86:	2307      	movs	r3, #7
    8b88:	e006      	b.n	8b98 <HAL_GPIO_Init+0x204>
    8b8a:	2303      	movs	r3, #3
    8b8c:	e004      	b.n	8b98 <HAL_GPIO_Init+0x204>
    8b8e:	2302      	movs	r3, #2
    8b90:	e002      	b.n	8b98 <HAL_GPIO_Init+0x204>
    8b92:	2301      	movs	r3, #1
    8b94:	e000      	b.n	8b98 <HAL_GPIO_Init+0x204>
    8b96:	2300      	movs	r3, #0
    8b98:	69fa      	ldr	r2, [r7, #28]
    8b9a:	f002 0203 	and.w	r2, r2, #3
    8b9e:	0092      	lsls	r2, r2, #2
    8ba0:	4093      	lsls	r3, r2
    8ba2:	69ba      	ldr	r2, [r7, #24]
    8ba4:	4313      	orrs	r3, r2
    8ba6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
    8ba8:	4934      	ldr	r1, [pc, #208]	; (8c7c <HAL_GPIO_Init+0x2e8>)
    8baa:	69fb      	ldr	r3, [r7, #28]
    8bac:	089b      	lsrs	r3, r3, #2
    8bae:	3302      	adds	r3, #2
    8bb0:	69ba      	ldr	r2, [r7, #24]
    8bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
    8bb6:	4b37      	ldr	r3, [pc, #220]	; (8c94 <HAL_GPIO_Init+0x300>)
    8bb8:	681b      	ldr	r3, [r3, #0]
    8bba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
    8bbc:	693b      	ldr	r3, [r7, #16]
    8bbe:	43db      	mvns	r3, r3
    8bc0:	69ba      	ldr	r2, [r7, #24]
    8bc2:	4013      	ands	r3, r2
    8bc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
    8bc6:	683b      	ldr	r3, [r7, #0]
    8bc8:	685b      	ldr	r3, [r3, #4]
    8bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    8bce:	2b00      	cmp	r3, #0
    8bd0:	d003      	beq.n	8bda <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
    8bd2:	69ba      	ldr	r2, [r7, #24]
    8bd4:	693b      	ldr	r3, [r7, #16]
    8bd6:	4313      	orrs	r3, r2
    8bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
    8bda:	4a2e      	ldr	r2, [pc, #184]	; (8c94 <HAL_GPIO_Init+0x300>)
    8bdc:	69bb      	ldr	r3, [r7, #24]
    8bde:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
    8be0:	4b2c      	ldr	r3, [pc, #176]	; (8c94 <HAL_GPIO_Init+0x300>)
    8be2:	685b      	ldr	r3, [r3, #4]
    8be4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
    8be6:	693b      	ldr	r3, [r7, #16]
    8be8:	43db      	mvns	r3, r3
    8bea:	69ba      	ldr	r2, [r7, #24]
    8bec:	4013      	ands	r3, r2
    8bee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
    8bf0:	683b      	ldr	r3, [r7, #0]
    8bf2:	685b      	ldr	r3, [r3, #4]
    8bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    8bf8:	2b00      	cmp	r3, #0
    8bfa:	d003      	beq.n	8c04 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
    8bfc:	69ba      	ldr	r2, [r7, #24]
    8bfe:	693b      	ldr	r3, [r7, #16]
    8c00:	4313      	orrs	r3, r2
    8c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
    8c04:	4a23      	ldr	r2, [pc, #140]	; (8c94 <HAL_GPIO_Init+0x300>)
    8c06:	69bb      	ldr	r3, [r7, #24]
    8c08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
    8c0a:	4b22      	ldr	r3, [pc, #136]	; (8c94 <HAL_GPIO_Init+0x300>)
    8c0c:	689b      	ldr	r3, [r3, #8]
    8c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
    8c10:	693b      	ldr	r3, [r7, #16]
    8c12:	43db      	mvns	r3, r3
    8c14:	69ba      	ldr	r2, [r7, #24]
    8c16:	4013      	ands	r3, r2
    8c18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
    8c1a:	683b      	ldr	r3, [r7, #0]
    8c1c:	685b      	ldr	r3, [r3, #4]
    8c1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    8c22:	2b00      	cmp	r3, #0
    8c24:	d003      	beq.n	8c2e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
    8c26:	69ba      	ldr	r2, [r7, #24]
    8c28:	693b      	ldr	r3, [r7, #16]
    8c2a:	4313      	orrs	r3, r2
    8c2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
    8c2e:	4a19      	ldr	r2, [pc, #100]	; (8c94 <HAL_GPIO_Init+0x300>)
    8c30:	69bb      	ldr	r3, [r7, #24]
    8c32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
    8c34:	4b17      	ldr	r3, [pc, #92]	; (8c94 <HAL_GPIO_Init+0x300>)
    8c36:	68db      	ldr	r3, [r3, #12]
    8c38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
    8c3a:	693b      	ldr	r3, [r7, #16]
    8c3c:	43db      	mvns	r3, r3
    8c3e:	69ba      	ldr	r2, [r7, #24]
    8c40:	4013      	ands	r3, r2
    8c42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
    8c44:	683b      	ldr	r3, [r7, #0]
    8c46:	685b      	ldr	r3, [r3, #4]
    8c48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    8c4c:	2b00      	cmp	r3, #0
    8c4e:	d003      	beq.n	8c58 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
    8c50:	69ba      	ldr	r2, [r7, #24]
    8c52:	693b      	ldr	r3, [r7, #16]
    8c54:	4313      	orrs	r3, r2
    8c56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
    8c58:	4a0e      	ldr	r2, [pc, #56]	; (8c94 <HAL_GPIO_Init+0x300>)
    8c5a:	69bb      	ldr	r3, [r7, #24]
    8c5c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
    8c5e:	69fb      	ldr	r3, [r7, #28]
    8c60:	3301      	adds	r3, #1
    8c62:	61fb      	str	r3, [r7, #28]
    8c64:	69fb      	ldr	r3, [r7, #28]
    8c66:	2b0f      	cmp	r3, #15
    8c68:	f67f aea2 	bls.w	89b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
    8c6c:	bf00      	nop
    8c6e:	3724      	adds	r7, #36	; 0x24
    8c70:	46bd      	mov	sp, r7
    8c72:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c76:	4770      	bx	lr
    8c78:	40023800 	.word	0x40023800
    8c7c:	40013800 	.word	0x40013800
    8c80:	40020000 	.word	0x40020000
    8c84:	40020400 	.word	0x40020400
    8c88:	40020800 	.word	0x40020800
    8c8c:	40020c00 	.word	0x40020c00
    8c90:	40021000 	.word	0x40021000
    8c94:	40013c00 	.word	0x40013c00

00008c98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
    8c98:	b480      	push	{r7}
    8c9a:	b083      	sub	sp, #12
    8c9c:	af00      	add	r7, sp, #0
    8c9e:	6078      	str	r0, [r7, #4]
    8ca0:	460b      	mov	r3, r1
    8ca2:	807b      	strh	r3, [r7, #2]
    8ca4:	4613      	mov	r3, r2
    8ca6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
    8ca8:	787b      	ldrb	r3, [r7, #1]
    8caa:	2b00      	cmp	r3, #0
    8cac:	d003      	beq.n	8cb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    8cae:	887a      	ldrh	r2, [r7, #2]
    8cb0:	687b      	ldr	r3, [r7, #4]
    8cb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
    8cb4:	e003      	b.n	8cbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
    8cb6:	887b      	ldrh	r3, [r7, #2]
    8cb8:	041a      	lsls	r2, r3, #16
    8cba:	687b      	ldr	r3, [r7, #4]
    8cbc:	619a      	str	r2, [r3, #24]
}
    8cbe:	bf00      	nop
    8cc0:	370c      	adds	r7, #12
    8cc2:	46bd      	mov	sp, r7
    8cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    8cc8:	4770      	bx	lr
	...

00008ccc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
    8ccc:	b580      	push	{r7, lr}
    8cce:	b084      	sub	sp, #16
    8cd0:	af00      	add	r7, sp, #0
    8cd2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
    8cd4:	687b      	ldr	r3, [r7, #4]
    8cd6:	2b00      	cmp	r3, #0
    8cd8:	d101      	bne.n	8cde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
    8cda:	2301      	movs	r3, #1
    8cdc:	e11f      	b.n	8f1e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
    8cde:	687b      	ldr	r3, [r7, #4]
    8ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    8ce4:	b2db      	uxtb	r3, r3
    8ce6:	2b00      	cmp	r3, #0
    8ce8:	d106      	bne.n	8cf8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
    8cea:	687b      	ldr	r3, [r7, #4]
    8cec:	2200      	movs	r2, #0
    8cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
    8cf2:	6878      	ldr	r0, [r7, #4]
    8cf4:	f7ff fc56 	bl	85a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
    8cf8:	687b      	ldr	r3, [r7, #4]
    8cfa:	2224      	movs	r2, #36	; 0x24
    8cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
    8d00:	687b      	ldr	r3, [r7, #4]
    8d02:	681b      	ldr	r3, [r3, #0]
    8d04:	681a      	ldr	r2, [r3, #0]
    8d06:	687b      	ldr	r3, [r7, #4]
    8d08:	681b      	ldr	r3, [r3, #0]
    8d0a:	f022 0201 	bic.w	r2, r2, #1
    8d0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
    8d10:	687b      	ldr	r3, [r7, #4]
    8d12:	681b      	ldr	r3, [r3, #0]
    8d14:	681a      	ldr	r2, [r3, #0]
    8d16:	687b      	ldr	r3, [r7, #4]
    8d18:	681b      	ldr	r3, [r3, #0]
    8d1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    8d1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
    8d20:	687b      	ldr	r3, [r7, #4]
    8d22:	681b      	ldr	r3, [r3, #0]
    8d24:	681a      	ldr	r2, [r3, #0]
    8d26:	687b      	ldr	r3, [r7, #4]
    8d28:	681b      	ldr	r3, [r3, #0]
    8d2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    8d2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
    8d30:	f001 f846 	bl	9dc0 <HAL_RCC_GetPCLK1Freq>
    8d34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
    8d36:	687b      	ldr	r3, [r7, #4]
    8d38:	685b      	ldr	r3, [r3, #4]
    8d3a:	4a7b      	ldr	r2, [pc, #492]	; (8f28 <HAL_I2C_Init+0x25c>)
    8d3c:	4293      	cmp	r3, r2
    8d3e:	d807      	bhi.n	8d50 <HAL_I2C_Init+0x84>
    8d40:	68fb      	ldr	r3, [r7, #12]
    8d42:	4a7a      	ldr	r2, [pc, #488]	; (8f2c <HAL_I2C_Init+0x260>)
    8d44:	4293      	cmp	r3, r2
    8d46:	bf94      	ite	ls
    8d48:	2301      	movls	r3, #1
    8d4a:	2300      	movhi	r3, #0
    8d4c:	b2db      	uxtb	r3, r3
    8d4e:	e006      	b.n	8d5e <HAL_I2C_Init+0x92>
    8d50:	68fb      	ldr	r3, [r7, #12]
    8d52:	4a77      	ldr	r2, [pc, #476]	; (8f30 <HAL_I2C_Init+0x264>)
    8d54:	4293      	cmp	r3, r2
    8d56:	bf94      	ite	ls
    8d58:	2301      	movls	r3, #1
    8d5a:	2300      	movhi	r3, #0
    8d5c:	b2db      	uxtb	r3, r3
    8d5e:	2b00      	cmp	r3, #0
    8d60:	d001      	beq.n	8d66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
    8d62:	2301      	movs	r3, #1
    8d64:	e0db      	b.n	8f1e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
    8d66:	68fb      	ldr	r3, [r7, #12]
    8d68:	4a72      	ldr	r2, [pc, #456]	; (8f34 <HAL_I2C_Init+0x268>)
    8d6a:	fba2 2303 	umull	r2, r3, r2, r3
    8d6e:	0c9b      	lsrs	r3, r3, #18
    8d70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
    8d72:	687b      	ldr	r3, [r7, #4]
    8d74:	681b      	ldr	r3, [r3, #0]
    8d76:	685b      	ldr	r3, [r3, #4]
    8d78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
    8d7c:	687b      	ldr	r3, [r7, #4]
    8d7e:	681b      	ldr	r3, [r3, #0]
    8d80:	68ba      	ldr	r2, [r7, #8]
    8d82:	430a      	orrs	r2, r1
    8d84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
    8d86:	687b      	ldr	r3, [r7, #4]
    8d88:	681b      	ldr	r3, [r3, #0]
    8d8a:	6a1b      	ldr	r3, [r3, #32]
    8d8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
    8d90:	687b      	ldr	r3, [r7, #4]
    8d92:	685b      	ldr	r3, [r3, #4]
    8d94:	4a64      	ldr	r2, [pc, #400]	; (8f28 <HAL_I2C_Init+0x25c>)
    8d96:	4293      	cmp	r3, r2
    8d98:	d802      	bhi.n	8da0 <HAL_I2C_Init+0xd4>
    8d9a:	68bb      	ldr	r3, [r7, #8]
    8d9c:	3301      	adds	r3, #1
    8d9e:	e009      	b.n	8db4 <HAL_I2C_Init+0xe8>
    8da0:	68bb      	ldr	r3, [r7, #8]
    8da2:	f44f 7296 	mov.w	r2, #300	; 0x12c
    8da6:	fb02 f303 	mul.w	r3, r2, r3
    8daa:	4a63      	ldr	r2, [pc, #396]	; (8f38 <HAL_I2C_Init+0x26c>)
    8dac:	fba2 2303 	umull	r2, r3, r2, r3
    8db0:	099b      	lsrs	r3, r3, #6
    8db2:	3301      	adds	r3, #1
    8db4:	687a      	ldr	r2, [r7, #4]
    8db6:	6812      	ldr	r2, [r2, #0]
    8db8:	430b      	orrs	r3, r1
    8dba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
    8dbc:	687b      	ldr	r3, [r7, #4]
    8dbe:	681b      	ldr	r3, [r3, #0]
    8dc0:	69db      	ldr	r3, [r3, #28]
    8dc2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
    8dc6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    8dca:	687b      	ldr	r3, [r7, #4]
    8dcc:	685b      	ldr	r3, [r3, #4]
    8dce:	4956      	ldr	r1, [pc, #344]	; (8f28 <HAL_I2C_Init+0x25c>)
    8dd0:	428b      	cmp	r3, r1
    8dd2:	d80d      	bhi.n	8df0 <HAL_I2C_Init+0x124>
    8dd4:	68fb      	ldr	r3, [r7, #12]
    8dd6:	1e59      	subs	r1, r3, #1
    8dd8:	687b      	ldr	r3, [r7, #4]
    8dda:	685b      	ldr	r3, [r3, #4]
    8ddc:	005b      	lsls	r3, r3, #1
    8dde:	fbb1 f3f3 	udiv	r3, r1, r3
    8de2:	3301      	adds	r3, #1
    8de4:	f3c3 030b 	ubfx	r3, r3, #0, #12
    8de8:	2b04      	cmp	r3, #4
    8dea:	bf38      	it	cc
    8dec:	2304      	movcc	r3, #4
    8dee:	e04f      	b.n	8e90 <HAL_I2C_Init+0x1c4>
    8df0:	687b      	ldr	r3, [r7, #4]
    8df2:	689b      	ldr	r3, [r3, #8]
    8df4:	2b00      	cmp	r3, #0
    8df6:	d111      	bne.n	8e1c <HAL_I2C_Init+0x150>
    8df8:	68fb      	ldr	r3, [r7, #12]
    8dfa:	1e58      	subs	r0, r3, #1
    8dfc:	687b      	ldr	r3, [r7, #4]
    8dfe:	6859      	ldr	r1, [r3, #4]
    8e00:	460b      	mov	r3, r1
    8e02:	005b      	lsls	r3, r3, #1
    8e04:	440b      	add	r3, r1
    8e06:	fbb0 f3f3 	udiv	r3, r0, r3
    8e0a:	3301      	adds	r3, #1
    8e0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    8e10:	2b00      	cmp	r3, #0
    8e12:	bf0c      	ite	eq
    8e14:	2301      	moveq	r3, #1
    8e16:	2300      	movne	r3, #0
    8e18:	b2db      	uxtb	r3, r3
    8e1a:	e012      	b.n	8e42 <HAL_I2C_Init+0x176>
    8e1c:	68fb      	ldr	r3, [r7, #12]
    8e1e:	1e58      	subs	r0, r3, #1
    8e20:	687b      	ldr	r3, [r7, #4]
    8e22:	6859      	ldr	r1, [r3, #4]
    8e24:	460b      	mov	r3, r1
    8e26:	009b      	lsls	r3, r3, #2
    8e28:	440b      	add	r3, r1
    8e2a:	0099      	lsls	r1, r3, #2
    8e2c:	440b      	add	r3, r1
    8e2e:	fbb0 f3f3 	udiv	r3, r0, r3
    8e32:	3301      	adds	r3, #1
    8e34:	f3c3 030b 	ubfx	r3, r3, #0, #12
    8e38:	2b00      	cmp	r3, #0
    8e3a:	bf0c      	ite	eq
    8e3c:	2301      	moveq	r3, #1
    8e3e:	2300      	movne	r3, #0
    8e40:	b2db      	uxtb	r3, r3
    8e42:	2b00      	cmp	r3, #0
    8e44:	d001      	beq.n	8e4a <HAL_I2C_Init+0x17e>
    8e46:	2301      	movs	r3, #1
    8e48:	e022      	b.n	8e90 <HAL_I2C_Init+0x1c4>
    8e4a:	687b      	ldr	r3, [r7, #4]
    8e4c:	689b      	ldr	r3, [r3, #8]
    8e4e:	2b00      	cmp	r3, #0
    8e50:	d10e      	bne.n	8e70 <HAL_I2C_Init+0x1a4>
    8e52:	68fb      	ldr	r3, [r7, #12]
    8e54:	1e58      	subs	r0, r3, #1
    8e56:	687b      	ldr	r3, [r7, #4]
    8e58:	6859      	ldr	r1, [r3, #4]
    8e5a:	460b      	mov	r3, r1
    8e5c:	005b      	lsls	r3, r3, #1
    8e5e:	440b      	add	r3, r1
    8e60:	fbb0 f3f3 	udiv	r3, r0, r3
    8e64:	3301      	adds	r3, #1
    8e66:	f3c3 030b 	ubfx	r3, r3, #0, #12
    8e6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    8e6e:	e00f      	b.n	8e90 <HAL_I2C_Init+0x1c4>
    8e70:	68fb      	ldr	r3, [r7, #12]
    8e72:	1e58      	subs	r0, r3, #1
    8e74:	687b      	ldr	r3, [r7, #4]
    8e76:	6859      	ldr	r1, [r3, #4]
    8e78:	460b      	mov	r3, r1
    8e7a:	009b      	lsls	r3, r3, #2
    8e7c:	440b      	add	r3, r1
    8e7e:	0099      	lsls	r1, r3, #2
    8e80:	440b      	add	r3, r1
    8e82:	fbb0 f3f3 	udiv	r3, r0, r3
    8e86:	3301      	adds	r3, #1
    8e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
    8e8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
    8e90:	6879      	ldr	r1, [r7, #4]
    8e92:	6809      	ldr	r1, [r1, #0]
    8e94:	4313      	orrs	r3, r2
    8e96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
    8e98:	687b      	ldr	r3, [r7, #4]
    8e9a:	681b      	ldr	r3, [r3, #0]
    8e9c:	681b      	ldr	r3, [r3, #0]
    8e9e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
    8ea2:	687b      	ldr	r3, [r7, #4]
    8ea4:	69da      	ldr	r2, [r3, #28]
    8ea6:	687b      	ldr	r3, [r7, #4]
    8ea8:	6a1b      	ldr	r3, [r3, #32]
    8eaa:	431a      	orrs	r2, r3
    8eac:	687b      	ldr	r3, [r7, #4]
    8eae:	681b      	ldr	r3, [r3, #0]
    8eb0:	430a      	orrs	r2, r1
    8eb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
    8eb4:	687b      	ldr	r3, [r7, #4]
    8eb6:	681b      	ldr	r3, [r3, #0]
    8eb8:	689b      	ldr	r3, [r3, #8]
    8eba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
    8ebe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    8ec2:	687a      	ldr	r2, [r7, #4]
    8ec4:	6911      	ldr	r1, [r2, #16]
    8ec6:	687a      	ldr	r2, [r7, #4]
    8ec8:	68d2      	ldr	r2, [r2, #12]
    8eca:	4311      	orrs	r1, r2
    8ecc:	687a      	ldr	r2, [r7, #4]
    8ece:	6812      	ldr	r2, [r2, #0]
    8ed0:	430b      	orrs	r3, r1
    8ed2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
    8ed4:	687b      	ldr	r3, [r7, #4]
    8ed6:	681b      	ldr	r3, [r3, #0]
    8ed8:	68db      	ldr	r3, [r3, #12]
    8eda:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
    8ede:	687b      	ldr	r3, [r7, #4]
    8ee0:	695a      	ldr	r2, [r3, #20]
    8ee2:	687b      	ldr	r3, [r7, #4]
    8ee4:	699b      	ldr	r3, [r3, #24]
    8ee6:	431a      	orrs	r2, r3
    8ee8:	687b      	ldr	r3, [r7, #4]
    8eea:	681b      	ldr	r3, [r3, #0]
    8eec:	430a      	orrs	r2, r1
    8eee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
    8ef0:	687b      	ldr	r3, [r7, #4]
    8ef2:	681b      	ldr	r3, [r3, #0]
    8ef4:	681a      	ldr	r2, [r3, #0]
    8ef6:	687b      	ldr	r3, [r7, #4]
    8ef8:	681b      	ldr	r3, [r3, #0]
    8efa:	f042 0201 	orr.w	r2, r2, #1
    8efe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
    8f00:	687b      	ldr	r3, [r7, #4]
    8f02:	2200      	movs	r2, #0
    8f04:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
    8f06:	687b      	ldr	r3, [r7, #4]
    8f08:	2220      	movs	r2, #32
    8f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
    8f0e:	687b      	ldr	r3, [r7, #4]
    8f10:	2200      	movs	r2, #0
    8f12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
    8f14:	687b      	ldr	r3, [r7, #4]
    8f16:	2200      	movs	r2, #0
    8f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
    8f1c:	2300      	movs	r3, #0
}
    8f1e:	4618      	mov	r0, r3
    8f20:	3710      	adds	r7, #16
    8f22:	46bd      	mov	sp, r7
    8f24:	bd80      	pop	{r7, pc}
    8f26:	bf00      	nop
    8f28:	000186a0 	.word	0x000186a0
    8f2c:	001e847f 	.word	0x001e847f
    8f30:	003d08ff 	.word	0x003d08ff
    8f34:	431bde83 	.word	0x431bde83
    8f38:	10624dd3 	.word	0x10624dd3

00008f3c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
    8f3c:	b580      	push	{r7, lr}
    8f3e:	b088      	sub	sp, #32
    8f40:	af02      	add	r7, sp, #8
    8f42:	60f8      	str	r0, [r7, #12]
    8f44:	607a      	str	r2, [r7, #4]
    8f46:	461a      	mov	r2, r3
    8f48:	460b      	mov	r3, r1
    8f4a:	817b      	strh	r3, [r7, #10]
    8f4c:	4613      	mov	r3, r2
    8f4e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
    8f50:	f7ff fc32 	bl	87b8 <HAL_GetTick>
    8f54:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
    8f56:	68fb      	ldr	r3, [r7, #12]
    8f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    8f5c:	b2db      	uxtb	r3, r3
    8f5e:	2b20      	cmp	r3, #32
    8f60:	f040 80e0 	bne.w	9124 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
    8f64:	697b      	ldr	r3, [r7, #20]
    8f66:	9300      	str	r3, [sp, #0]
    8f68:	2319      	movs	r3, #25
    8f6a:	2201      	movs	r2, #1
    8f6c:	4970      	ldr	r1, [pc, #448]	; (9130 <HAL_I2C_Master_Transmit+0x1f4>)
    8f6e:	68f8      	ldr	r0, [r7, #12]
    8f70:	f000 f964 	bl	923c <I2C_WaitOnFlagUntilTimeout>
    8f74:	4603      	mov	r3, r0
    8f76:	2b00      	cmp	r3, #0
    8f78:	d001      	beq.n	8f7e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
    8f7a:	2302      	movs	r3, #2
    8f7c:	e0d3      	b.n	9126 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
    8f7e:	68fb      	ldr	r3, [r7, #12]
    8f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
    8f84:	2b01      	cmp	r3, #1
    8f86:	d101      	bne.n	8f8c <HAL_I2C_Master_Transmit+0x50>
    8f88:	2302      	movs	r3, #2
    8f8a:	e0cc      	b.n	9126 <HAL_I2C_Master_Transmit+0x1ea>
    8f8c:	68fb      	ldr	r3, [r7, #12]
    8f8e:	2201      	movs	r2, #1
    8f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
    8f94:	68fb      	ldr	r3, [r7, #12]
    8f96:	681b      	ldr	r3, [r3, #0]
    8f98:	681b      	ldr	r3, [r3, #0]
    8f9a:	f003 0301 	and.w	r3, r3, #1
    8f9e:	2b01      	cmp	r3, #1
    8fa0:	d007      	beq.n	8fb2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
    8fa2:	68fb      	ldr	r3, [r7, #12]
    8fa4:	681b      	ldr	r3, [r3, #0]
    8fa6:	681a      	ldr	r2, [r3, #0]
    8fa8:	68fb      	ldr	r3, [r7, #12]
    8faa:	681b      	ldr	r3, [r3, #0]
    8fac:	f042 0201 	orr.w	r2, r2, #1
    8fb0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
    8fb2:	68fb      	ldr	r3, [r7, #12]
    8fb4:	681b      	ldr	r3, [r3, #0]
    8fb6:	681a      	ldr	r2, [r3, #0]
    8fb8:	68fb      	ldr	r3, [r7, #12]
    8fba:	681b      	ldr	r3, [r3, #0]
    8fbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    8fc0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
    8fc2:	68fb      	ldr	r3, [r7, #12]
    8fc4:	2221      	movs	r2, #33	; 0x21
    8fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
    8fca:	68fb      	ldr	r3, [r7, #12]
    8fcc:	2210      	movs	r2, #16
    8fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
    8fd2:	68fb      	ldr	r3, [r7, #12]
    8fd4:	2200      	movs	r2, #0
    8fd6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    8fd8:	68fb      	ldr	r3, [r7, #12]
    8fda:	687a      	ldr	r2, [r7, #4]
    8fdc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
    8fde:	68fb      	ldr	r3, [r7, #12]
    8fe0:	893a      	ldrh	r2, [r7, #8]
    8fe2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
    8fe4:	68fb      	ldr	r3, [r7, #12]
    8fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    8fe8:	b29a      	uxth	r2, r3
    8fea:	68fb      	ldr	r3, [r7, #12]
    8fec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
    8fee:	68fb      	ldr	r3, [r7, #12]
    8ff0:	4a50      	ldr	r2, [pc, #320]	; (9134 <HAL_I2C_Master_Transmit+0x1f8>)
    8ff2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
    8ff4:	8979      	ldrh	r1, [r7, #10]
    8ff6:	697b      	ldr	r3, [r7, #20]
    8ff8:	6a3a      	ldr	r2, [r7, #32]
    8ffa:	68f8      	ldr	r0, [r7, #12]
    8ffc:	f000 f89c 	bl	9138 <I2C_MasterRequestWrite>
    9000:	4603      	mov	r3, r0
    9002:	2b00      	cmp	r3, #0
    9004:	d001      	beq.n	900a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
    9006:	2301      	movs	r3, #1
    9008:	e08d      	b.n	9126 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
    900a:	2300      	movs	r3, #0
    900c:	613b      	str	r3, [r7, #16]
    900e:	68fb      	ldr	r3, [r7, #12]
    9010:	681b      	ldr	r3, [r3, #0]
    9012:	695b      	ldr	r3, [r3, #20]
    9014:	613b      	str	r3, [r7, #16]
    9016:	68fb      	ldr	r3, [r7, #12]
    9018:	681b      	ldr	r3, [r3, #0]
    901a:	699b      	ldr	r3, [r3, #24]
    901c:	613b      	str	r3, [r7, #16]
    901e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
    9020:	e066      	b.n	90f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
    9022:	697a      	ldr	r2, [r7, #20]
    9024:	6a39      	ldr	r1, [r7, #32]
    9026:	68f8      	ldr	r0, [r7, #12]
    9028:	f000 f9de 	bl	93e8 <I2C_WaitOnTXEFlagUntilTimeout>
    902c:	4603      	mov	r3, r0
    902e:	2b00      	cmp	r3, #0
    9030:	d00d      	beq.n	904e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
    9032:	68fb      	ldr	r3, [r7, #12]
    9034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9036:	2b04      	cmp	r3, #4
    9038:	d107      	bne.n	904a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
    903a:	68fb      	ldr	r3, [r7, #12]
    903c:	681b      	ldr	r3, [r3, #0]
    903e:	681a      	ldr	r2, [r3, #0]
    9040:	68fb      	ldr	r3, [r7, #12]
    9042:	681b      	ldr	r3, [r3, #0]
    9044:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    9048:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
    904a:	2301      	movs	r3, #1
    904c:	e06b      	b.n	9126 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
    904e:	68fb      	ldr	r3, [r7, #12]
    9050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9052:	781a      	ldrb	r2, [r3, #0]
    9054:	68fb      	ldr	r3, [r7, #12]
    9056:	681b      	ldr	r3, [r3, #0]
    9058:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
    905a:	68fb      	ldr	r3, [r7, #12]
    905c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    905e:	1c5a      	adds	r2, r3, #1
    9060:	68fb      	ldr	r3, [r7, #12]
    9062:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
    9064:	68fb      	ldr	r3, [r7, #12]
    9066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    9068:	b29b      	uxth	r3, r3
    906a:	3b01      	subs	r3, #1
    906c:	b29a      	uxth	r2, r3
    906e:	68fb      	ldr	r3, [r7, #12]
    9070:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
    9072:	68fb      	ldr	r3, [r7, #12]
    9074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    9076:	3b01      	subs	r3, #1
    9078:	b29a      	uxth	r2, r3
    907a:	68fb      	ldr	r3, [r7, #12]
    907c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
    907e:	68fb      	ldr	r3, [r7, #12]
    9080:	681b      	ldr	r3, [r3, #0]
    9082:	695b      	ldr	r3, [r3, #20]
    9084:	f003 0304 	and.w	r3, r3, #4
    9088:	2b04      	cmp	r3, #4
    908a:	d11b      	bne.n	90c4 <HAL_I2C_Master_Transmit+0x188>
    908c:	68fb      	ldr	r3, [r7, #12]
    908e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    9090:	2b00      	cmp	r3, #0
    9092:	d017      	beq.n	90c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
    9094:	68fb      	ldr	r3, [r7, #12]
    9096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9098:	781a      	ldrb	r2, [r3, #0]
    909a:	68fb      	ldr	r3, [r7, #12]
    909c:	681b      	ldr	r3, [r3, #0]
    909e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
    90a0:	68fb      	ldr	r3, [r7, #12]
    90a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    90a4:	1c5a      	adds	r2, r3, #1
    90a6:	68fb      	ldr	r3, [r7, #12]
    90a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
    90aa:	68fb      	ldr	r3, [r7, #12]
    90ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    90ae:	b29b      	uxth	r3, r3
    90b0:	3b01      	subs	r3, #1
    90b2:	b29a      	uxth	r2, r3
    90b4:	68fb      	ldr	r3, [r7, #12]
    90b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
    90b8:	68fb      	ldr	r3, [r7, #12]
    90ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    90bc:	3b01      	subs	r3, #1
    90be:	b29a      	uxth	r2, r3
    90c0:	68fb      	ldr	r3, [r7, #12]
    90c2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
    90c4:	697a      	ldr	r2, [r7, #20]
    90c6:	6a39      	ldr	r1, [r7, #32]
    90c8:	68f8      	ldr	r0, [r7, #12]
    90ca:	f000 f9ce 	bl	946a <I2C_WaitOnBTFFlagUntilTimeout>
    90ce:	4603      	mov	r3, r0
    90d0:	2b00      	cmp	r3, #0
    90d2:	d00d      	beq.n	90f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
    90d4:	68fb      	ldr	r3, [r7, #12]
    90d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    90d8:	2b04      	cmp	r3, #4
    90da:	d107      	bne.n	90ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
    90dc:	68fb      	ldr	r3, [r7, #12]
    90de:	681b      	ldr	r3, [r3, #0]
    90e0:	681a      	ldr	r2, [r3, #0]
    90e2:	68fb      	ldr	r3, [r7, #12]
    90e4:	681b      	ldr	r3, [r3, #0]
    90e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    90ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
    90ec:	2301      	movs	r3, #1
    90ee:	e01a      	b.n	9126 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
    90f0:	68fb      	ldr	r3, [r7, #12]
    90f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    90f4:	2b00      	cmp	r3, #0
    90f6:	d194      	bne.n	9022 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
    90f8:	68fb      	ldr	r3, [r7, #12]
    90fa:	681b      	ldr	r3, [r3, #0]
    90fc:	681a      	ldr	r2, [r3, #0]
    90fe:	68fb      	ldr	r3, [r7, #12]
    9100:	681b      	ldr	r3, [r3, #0]
    9102:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    9106:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
    9108:	68fb      	ldr	r3, [r7, #12]
    910a:	2220      	movs	r2, #32
    910c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
    9110:	68fb      	ldr	r3, [r7, #12]
    9112:	2200      	movs	r2, #0
    9114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
    9118:	68fb      	ldr	r3, [r7, #12]
    911a:	2200      	movs	r2, #0
    911c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
    9120:	2300      	movs	r3, #0
    9122:	e000      	b.n	9126 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
    9124:	2302      	movs	r3, #2
  }
}
    9126:	4618      	mov	r0, r3
    9128:	3718      	adds	r7, #24
    912a:	46bd      	mov	sp, r7
    912c:	bd80      	pop	{r7, pc}
    912e:	bf00      	nop
    9130:	00100002 	.word	0x00100002
    9134:	ffff0000 	.word	0xffff0000

00009138 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
    9138:	b580      	push	{r7, lr}
    913a:	b088      	sub	sp, #32
    913c:	af02      	add	r7, sp, #8
    913e:	60f8      	str	r0, [r7, #12]
    9140:	607a      	str	r2, [r7, #4]
    9142:	603b      	str	r3, [r7, #0]
    9144:	460b      	mov	r3, r1
    9146:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
    9148:	68fb      	ldr	r3, [r7, #12]
    914a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    914c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
    914e:	697b      	ldr	r3, [r7, #20]
    9150:	2b08      	cmp	r3, #8
    9152:	d006      	beq.n	9162 <I2C_MasterRequestWrite+0x2a>
    9154:	697b      	ldr	r3, [r7, #20]
    9156:	2b01      	cmp	r3, #1
    9158:	d003      	beq.n	9162 <I2C_MasterRequestWrite+0x2a>
    915a:	697b      	ldr	r3, [r7, #20]
    915c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
    9160:	d108      	bne.n	9174 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
    9162:	68fb      	ldr	r3, [r7, #12]
    9164:	681b      	ldr	r3, [r3, #0]
    9166:	681a      	ldr	r2, [r3, #0]
    9168:	68fb      	ldr	r3, [r7, #12]
    916a:	681b      	ldr	r3, [r3, #0]
    916c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    9170:	601a      	str	r2, [r3, #0]
    9172:	e00b      	b.n	918c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
    9174:	68fb      	ldr	r3, [r7, #12]
    9176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9178:	2b12      	cmp	r3, #18
    917a:	d107      	bne.n	918c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
    917c:	68fb      	ldr	r3, [r7, #12]
    917e:	681b      	ldr	r3, [r3, #0]
    9180:	681a      	ldr	r2, [r3, #0]
    9182:	68fb      	ldr	r3, [r7, #12]
    9184:	681b      	ldr	r3, [r3, #0]
    9186:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    918a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
    918c:	683b      	ldr	r3, [r7, #0]
    918e:	9300      	str	r3, [sp, #0]
    9190:	687b      	ldr	r3, [r7, #4]
    9192:	2200      	movs	r2, #0
    9194:	f04f 1101 	mov.w	r1, #65537	; 0x10001
    9198:	68f8      	ldr	r0, [r7, #12]
    919a:	f000 f84f 	bl	923c <I2C_WaitOnFlagUntilTimeout>
    919e:	4603      	mov	r3, r0
    91a0:	2b00      	cmp	r3, #0
    91a2:	d00d      	beq.n	91c0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
    91a4:	68fb      	ldr	r3, [r7, #12]
    91a6:	681b      	ldr	r3, [r3, #0]
    91a8:	681b      	ldr	r3, [r3, #0]
    91aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
    91ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    91b2:	d103      	bne.n	91bc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
    91b4:	68fb      	ldr	r3, [r7, #12]
    91b6:	f44f 7200 	mov.w	r2, #512	; 0x200
    91ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
    91bc:	2303      	movs	r3, #3
    91be:	e035      	b.n	922c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
    91c0:	68fb      	ldr	r3, [r7, #12]
    91c2:	691b      	ldr	r3, [r3, #16]
    91c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    91c8:	d108      	bne.n	91dc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
    91ca:	897b      	ldrh	r3, [r7, #10]
    91cc:	b2db      	uxtb	r3, r3
    91ce:	461a      	mov	r2, r3
    91d0:	68fb      	ldr	r3, [r7, #12]
    91d2:	681b      	ldr	r3, [r3, #0]
    91d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    91d8:	611a      	str	r2, [r3, #16]
    91da:	e01b      	b.n	9214 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
    91dc:	897b      	ldrh	r3, [r7, #10]
    91de:	11db      	asrs	r3, r3, #7
    91e0:	b2db      	uxtb	r3, r3
    91e2:	f003 0306 	and.w	r3, r3, #6
    91e6:	b2db      	uxtb	r3, r3
    91e8:	f063 030f 	orn	r3, r3, #15
    91ec:	b2da      	uxtb	r2, r3
    91ee:	68fb      	ldr	r3, [r7, #12]
    91f0:	681b      	ldr	r3, [r3, #0]
    91f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
    91f4:	683b      	ldr	r3, [r7, #0]
    91f6:	687a      	ldr	r2, [r7, #4]
    91f8:	490e      	ldr	r1, [pc, #56]	; (9234 <I2C_MasterRequestWrite+0xfc>)
    91fa:	68f8      	ldr	r0, [r7, #12]
    91fc:	f000 f875 	bl	92ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
    9200:	4603      	mov	r3, r0
    9202:	2b00      	cmp	r3, #0
    9204:	d001      	beq.n	920a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
    9206:	2301      	movs	r3, #1
    9208:	e010      	b.n	922c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
    920a:	897b      	ldrh	r3, [r7, #10]
    920c:	b2da      	uxtb	r2, r3
    920e:	68fb      	ldr	r3, [r7, #12]
    9210:	681b      	ldr	r3, [r3, #0]
    9212:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
    9214:	683b      	ldr	r3, [r7, #0]
    9216:	687a      	ldr	r2, [r7, #4]
    9218:	4907      	ldr	r1, [pc, #28]	; (9238 <I2C_MasterRequestWrite+0x100>)
    921a:	68f8      	ldr	r0, [r7, #12]
    921c:	f000 f865 	bl	92ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
    9220:	4603      	mov	r3, r0
    9222:	2b00      	cmp	r3, #0
    9224:	d001      	beq.n	922a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
    9226:	2301      	movs	r3, #1
    9228:	e000      	b.n	922c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
    922a:	2300      	movs	r3, #0
}
    922c:	4618      	mov	r0, r3
    922e:	3718      	adds	r7, #24
    9230:	46bd      	mov	sp, r7
    9232:	bd80      	pop	{r7, pc}
    9234:	00010008 	.word	0x00010008
    9238:	00010002 	.word	0x00010002

0000923c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
    923c:	b580      	push	{r7, lr}
    923e:	b084      	sub	sp, #16
    9240:	af00      	add	r7, sp, #0
    9242:	60f8      	str	r0, [r7, #12]
    9244:	60b9      	str	r1, [r7, #8]
    9246:	603b      	str	r3, [r7, #0]
    9248:	4613      	mov	r3, r2
    924a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
    924c:	e025      	b.n	929a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    924e:	683b      	ldr	r3, [r7, #0]
    9250:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    9254:	d021      	beq.n	929a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
    9256:	f7ff faaf 	bl	87b8 <HAL_GetTick>
    925a:	4602      	mov	r2, r0
    925c:	69bb      	ldr	r3, [r7, #24]
    925e:	1ad3      	subs	r3, r2, r3
    9260:	683a      	ldr	r2, [r7, #0]
    9262:	429a      	cmp	r2, r3
    9264:	d302      	bcc.n	926c <I2C_WaitOnFlagUntilTimeout+0x30>
    9266:	683b      	ldr	r3, [r7, #0]
    9268:	2b00      	cmp	r3, #0
    926a:	d116      	bne.n	929a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
    926c:	68fb      	ldr	r3, [r7, #12]
    926e:	2200      	movs	r2, #0
    9270:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
    9272:	68fb      	ldr	r3, [r7, #12]
    9274:	2220      	movs	r2, #32
    9276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
    927a:	68fb      	ldr	r3, [r7, #12]
    927c:	2200      	movs	r2, #0
    927e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
    9282:	68fb      	ldr	r3, [r7, #12]
    9284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9286:	f043 0220 	orr.w	r2, r3, #32
    928a:	68fb      	ldr	r3, [r7, #12]
    928c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
    928e:	68fb      	ldr	r3, [r7, #12]
    9290:	2200      	movs	r2, #0
    9292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
    9296:	2301      	movs	r3, #1
    9298:	e023      	b.n	92e2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
    929a:	68bb      	ldr	r3, [r7, #8]
    929c:	0c1b      	lsrs	r3, r3, #16
    929e:	b2db      	uxtb	r3, r3
    92a0:	2b01      	cmp	r3, #1
    92a2:	d10d      	bne.n	92c0 <I2C_WaitOnFlagUntilTimeout+0x84>
    92a4:	68fb      	ldr	r3, [r7, #12]
    92a6:	681b      	ldr	r3, [r3, #0]
    92a8:	695b      	ldr	r3, [r3, #20]
    92aa:	43da      	mvns	r2, r3
    92ac:	68bb      	ldr	r3, [r7, #8]
    92ae:	4013      	ands	r3, r2
    92b0:	b29b      	uxth	r3, r3
    92b2:	2b00      	cmp	r3, #0
    92b4:	bf0c      	ite	eq
    92b6:	2301      	moveq	r3, #1
    92b8:	2300      	movne	r3, #0
    92ba:	b2db      	uxtb	r3, r3
    92bc:	461a      	mov	r2, r3
    92be:	e00c      	b.n	92da <I2C_WaitOnFlagUntilTimeout+0x9e>
    92c0:	68fb      	ldr	r3, [r7, #12]
    92c2:	681b      	ldr	r3, [r3, #0]
    92c4:	699b      	ldr	r3, [r3, #24]
    92c6:	43da      	mvns	r2, r3
    92c8:	68bb      	ldr	r3, [r7, #8]
    92ca:	4013      	ands	r3, r2
    92cc:	b29b      	uxth	r3, r3
    92ce:	2b00      	cmp	r3, #0
    92d0:	bf0c      	ite	eq
    92d2:	2301      	moveq	r3, #1
    92d4:	2300      	movne	r3, #0
    92d6:	b2db      	uxtb	r3, r3
    92d8:	461a      	mov	r2, r3
    92da:	79fb      	ldrb	r3, [r7, #7]
    92dc:	429a      	cmp	r2, r3
    92de:	d0b6      	beq.n	924e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
    92e0:	2300      	movs	r3, #0
}
    92e2:	4618      	mov	r0, r3
    92e4:	3710      	adds	r7, #16
    92e6:	46bd      	mov	sp, r7
    92e8:	bd80      	pop	{r7, pc}

000092ea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
    92ea:	b580      	push	{r7, lr}
    92ec:	b084      	sub	sp, #16
    92ee:	af00      	add	r7, sp, #0
    92f0:	60f8      	str	r0, [r7, #12]
    92f2:	60b9      	str	r1, [r7, #8]
    92f4:	607a      	str	r2, [r7, #4]
    92f6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
    92f8:	e051      	b.n	939e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
    92fa:	68fb      	ldr	r3, [r7, #12]
    92fc:	681b      	ldr	r3, [r3, #0]
    92fe:	695b      	ldr	r3, [r3, #20]
    9300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    9304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    9308:	d123      	bne.n	9352 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
    930a:	68fb      	ldr	r3, [r7, #12]
    930c:	681b      	ldr	r3, [r3, #0]
    930e:	681a      	ldr	r2, [r3, #0]
    9310:	68fb      	ldr	r3, [r7, #12]
    9312:	681b      	ldr	r3, [r3, #0]
    9314:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    9318:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
    931a:	68fb      	ldr	r3, [r7, #12]
    931c:	681b      	ldr	r3, [r3, #0]
    931e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
    9322:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
    9324:	68fb      	ldr	r3, [r7, #12]
    9326:	2200      	movs	r2, #0
    9328:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
    932a:	68fb      	ldr	r3, [r7, #12]
    932c:	2220      	movs	r2, #32
    932e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
    9332:	68fb      	ldr	r3, [r7, #12]
    9334:	2200      	movs	r2, #0
    9336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
    933a:	68fb      	ldr	r3, [r7, #12]
    933c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    933e:	f043 0204 	orr.w	r2, r3, #4
    9342:	68fb      	ldr	r3, [r7, #12]
    9344:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
    9346:	68fb      	ldr	r3, [r7, #12]
    9348:	2200      	movs	r2, #0
    934a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
    934e:	2301      	movs	r3, #1
    9350:	e046      	b.n	93e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    9352:	687b      	ldr	r3, [r7, #4]
    9354:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    9358:	d021      	beq.n	939e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
    935a:	f7ff fa2d 	bl	87b8 <HAL_GetTick>
    935e:	4602      	mov	r2, r0
    9360:	683b      	ldr	r3, [r7, #0]
    9362:	1ad3      	subs	r3, r2, r3
    9364:	687a      	ldr	r2, [r7, #4]
    9366:	429a      	cmp	r2, r3
    9368:	d302      	bcc.n	9370 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
    936a:	687b      	ldr	r3, [r7, #4]
    936c:	2b00      	cmp	r3, #0
    936e:	d116      	bne.n	939e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
    9370:	68fb      	ldr	r3, [r7, #12]
    9372:	2200      	movs	r2, #0
    9374:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
    9376:	68fb      	ldr	r3, [r7, #12]
    9378:	2220      	movs	r2, #32
    937a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
    937e:	68fb      	ldr	r3, [r7, #12]
    9380:	2200      	movs	r2, #0
    9382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
    9386:	68fb      	ldr	r3, [r7, #12]
    9388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    938a:	f043 0220 	orr.w	r2, r3, #32
    938e:	68fb      	ldr	r3, [r7, #12]
    9390:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
    9392:	68fb      	ldr	r3, [r7, #12]
    9394:	2200      	movs	r2, #0
    9396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
    939a:	2301      	movs	r3, #1
    939c:	e020      	b.n	93e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
    939e:	68bb      	ldr	r3, [r7, #8]
    93a0:	0c1b      	lsrs	r3, r3, #16
    93a2:	b2db      	uxtb	r3, r3
    93a4:	2b01      	cmp	r3, #1
    93a6:	d10c      	bne.n	93c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
    93a8:	68fb      	ldr	r3, [r7, #12]
    93aa:	681b      	ldr	r3, [r3, #0]
    93ac:	695b      	ldr	r3, [r3, #20]
    93ae:	43da      	mvns	r2, r3
    93b0:	68bb      	ldr	r3, [r7, #8]
    93b2:	4013      	ands	r3, r2
    93b4:	b29b      	uxth	r3, r3
    93b6:	2b00      	cmp	r3, #0
    93b8:	bf14      	ite	ne
    93ba:	2301      	movne	r3, #1
    93bc:	2300      	moveq	r3, #0
    93be:	b2db      	uxtb	r3, r3
    93c0:	e00b      	b.n	93da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
    93c2:	68fb      	ldr	r3, [r7, #12]
    93c4:	681b      	ldr	r3, [r3, #0]
    93c6:	699b      	ldr	r3, [r3, #24]
    93c8:	43da      	mvns	r2, r3
    93ca:	68bb      	ldr	r3, [r7, #8]
    93cc:	4013      	ands	r3, r2
    93ce:	b29b      	uxth	r3, r3
    93d0:	2b00      	cmp	r3, #0
    93d2:	bf14      	ite	ne
    93d4:	2301      	movne	r3, #1
    93d6:	2300      	moveq	r3, #0
    93d8:	b2db      	uxtb	r3, r3
    93da:	2b00      	cmp	r3, #0
    93dc:	d18d      	bne.n	92fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
    93de:	2300      	movs	r3, #0
}
    93e0:	4618      	mov	r0, r3
    93e2:	3710      	adds	r7, #16
    93e4:	46bd      	mov	sp, r7
    93e6:	bd80      	pop	{r7, pc}

000093e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
    93e8:	b580      	push	{r7, lr}
    93ea:	b084      	sub	sp, #16
    93ec:	af00      	add	r7, sp, #0
    93ee:	60f8      	str	r0, [r7, #12]
    93f0:	60b9      	str	r1, [r7, #8]
    93f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
    93f4:	e02d      	b.n	9452 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
    93f6:	68f8      	ldr	r0, [r7, #12]
    93f8:	f000 f878 	bl	94ec <I2C_IsAcknowledgeFailed>
    93fc:	4603      	mov	r3, r0
    93fe:	2b00      	cmp	r3, #0
    9400:	d001      	beq.n	9406 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
    9402:	2301      	movs	r3, #1
    9404:	e02d      	b.n	9462 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    9406:	68bb      	ldr	r3, [r7, #8]
    9408:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    940c:	d021      	beq.n	9452 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
    940e:	f7ff f9d3 	bl	87b8 <HAL_GetTick>
    9412:	4602      	mov	r2, r0
    9414:	687b      	ldr	r3, [r7, #4]
    9416:	1ad3      	subs	r3, r2, r3
    9418:	68ba      	ldr	r2, [r7, #8]
    941a:	429a      	cmp	r2, r3
    941c:	d302      	bcc.n	9424 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
    941e:	68bb      	ldr	r3, [r7, #8]
    9420:	2b00      	cmp	r3, #0
    9422:	d116      	bne.n	9452 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
    9424:	68fb      	ldr	r3, [r7, #12]
    9426:	2200      	movs	r2, #0
    9428:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
    942a:	68fb      	ldr	r3, [r7, #12]
    942c:	2220      	movs	r2, #32
    942e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
    9432:	68fb      	ldr	r3, [r7, #12]
    9434:	2200      	movs	r2, #0
    9436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
    943a:	68fb      	ldr	r3, [r7, #12]
    943c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    943e:	f043 0220 	orr.w	r2, r3, #32
    9442:	68fb      	ldr	r3, [r7, #12]
    9444:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
    9446:	68fb      	ldr	r3, [r7, #12]
    9448:	2200      	movs	r2, #0
    944a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
    944e:	2301      	movs	r3, #1
    9450:	e007      	b.n	9462 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
    9452:	68fb      	ldr	r3, [r7, #12]
    9454:	681b      	ldr	r3, [r3, #0]
    9456:	695b      	ldr	r3, [r3, #20]
    9458:	f003 0380 	and.w	r3, r3, #128	; 0x80
    945c:	2b80      	cmp	r3, #128	; 0x80
    945e:	d1ca      	bne.n	93f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
    9460:	2300      	movs	r3, #0
}
    9462:	4618      	mov	r0, r3
    9464:	3710      	adds	r7, #16
    9466:	46bd      	mov	sp, r7
    9468:	bd80      	pop	{r7, pc}

0000946a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
    946a:	b580      	push	{r7, lr}
    946c:	b084      	sub	sp, #16
    946e:	af00      	add	r7, sp, #0
    9470:	60f8      	str	r0, [r7, #12]
    9472:	60b9      	str	r1, [r7, #8]
    9474:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
    9476:	e02d      	b.n	94d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
    9478:	68f8      	ldr	r0, [r7, #12]
    947a:	f000 f837 	bl	94ec <I2C_IsAcknowledgeFailed>
    947e:	4603      	mov	r3, r0
    9480:	2b00      	cmp	r3, #0
    9482:	d001      	beq.n	9488 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
    9484:	2301      	movs	r3, #1
    9486:	e02d      	b.n	94e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    9488:	68bb      	ldr	r3, [r7, #8]
    948a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    948e:	d021      	beq.n	94d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
    9490:	f7ff f992 	bl	87b8 <HAL_GetTick>
    9494:	4602      	mov	r2, r0
    9496:	687b      	ldr	r3, [r7, #4]
    9498:	1ad3      	subs	r3, r2, r3
    949a:	68ba      	ldr	r2, [r7, #8]
    949c:	429a      	cmp	r2, r3
    949e:	d302      	bcc.n	94a6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
    94a0:	68bb      	ldr	r3, [r7, #8]
    94a2:	2b00      	cmp	r3, #0
    94a4:	d116      	bne.n	94d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
    94a6:	68fb      	ldr	r3, [r7, #12]
    94a8:	2200      	movs	r2, #0
    94aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
    94ac:	68fb      	ldr	r3, [r7, #12]
    94ae:	2220      	movs	r2, #32
    94b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
    94b4:	68fb      	ldr	r3, [r7, #12]
    94b6:	2200      	movs	r2, #0
    94b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
    94bc:	68fb      	ldr	r3, [r7, #12]
    94be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    94c0:	f043 0220 	orr.w	r2, r3, #32
    94c4:	68fb      	ldr	r3, [r7, #12]
    94c6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
    94c8:	68fb      	ldr	r3, [r7, #12]
    94ca:	2200      	movs	r2, #0
    94cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
    94d0:	2301      	movs	r3, #1
    94d2:	e007      	b.n	94e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
    94d4:	68fb      	ldr	r3, [r7, #12]
    94d6:	681b      	ldr	r3, [r3, #0]
    94d8:	695b      	ldr	r3, [r3, #20]
    94da:	f003 0304 	and.w	r3, r3, #4
    94de:	2b04      	cmp	r3, #4
    94e0:	d1ca      	bne.n	9478 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
    94e2:	2300      	movs	r3, #0
}
    94e4:	4618      	mov	r0, r3
    94e6:	3710      	adds	r7, #16
    94e8:	46bd      	mov	sp, r7
    94ea:	bd80      	pop	{r7, pc}

000094ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
    94ec:	b480      	push	{r7}
    94ee:	b083      	sub	sp, #12
    94f0:	af00      	add	r7, sp, #0
    94f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
    94f4:	687b      	ldr	r3, [r7, #4]
    94f6:	681b      	ldr	r3, [r3, #0]
    94f8:	695b      	ldr	r3, [r3, #20]
    94fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    94fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    9502:	d11b      	bne.n	953c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
    9504:	687b      	ldr	r3, [r7, #4]
    9506:	681b      	ldr	r3, [r3, #0]
    9508:	f46f 6280 	mvn.w	r2, #1024	; 0x400
    950c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    950e:	687b      	ldr	r3, [r7, #4]
    9510:	2200      	movs	r2, #0
    9512:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
    9514:	687b      	ldr	r3, [r7, #4]
    9516:	2220      	movs	r2, #32
    9518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
    951c:	687b      	ldr	r3, [r7, #4]
    951e:	2200      	movs	r2, #0
    9520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
    9524:	687b      	ldr	r3, [r7, #4]
    9526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9528:	f043 0204 	orr.w	r2, r3, #4
    952c:	687b      	ldr	r3, [r7, #4]
    952e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
    9530:	687b      	ldr	r3, [r7, #4]
    9532:	2200      	movs	r2, #0
    9534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
    9538:	2301      	movs	r3, #1
    953a:	e000      	b.n	953e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
    953c:	2300      	movs	r3, #0
}
    953e:	4618      	mov	r0, r3
    9540:	370c      	adds	r7, #12
    9542:	46bd      	mov	sp, r7
    9544:	f85d 7b04 	ldr.w	r7, [sp], #4
    9548:	4770      	bx	lr
	...

0000954c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
    954c:	b580      	push	{r7, lr}
    954e:	b086      	sub	sp, #24
    9550:	af00      	add	r7, sp, #0
    9552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
    9554:	687b      	ldr	r3, [r7, #4]
    9556:	2b00      	cmp	r3, #0
    9558:	d101      	bne.n	955e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
    955a:	2301      	movs	r3, #1
    955c:	e25b      	b.n	9a16 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
    955e:	687b      	ldr	r3, [r7, #4]
    9560:	681b      	ldr	r3, [r3, #0]
    9562:	f003 0301 	and.w	r3, r3, #1
    9566:	2b00      	cmp	r3, #0
    9568:	d075      	beq.n	9656 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
    956a:	4ba3      	ldr	r3, [pc, #652]	; (97f8 <HAL_RCC_OscConfig+0x2ac>)
    956c:	689b      	ldr	r3, [r3, #8]
    956e:	f003 030c 	and.w	r3, r3, #12
    9572:	2b04      	cmp	r3, #4
    9574:	d00c      	beq.n	9590 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
    9576:	4ba0      	ldr	r3, [pc, #640]	; (97f8 <HAL_RCC_OscConfig+0x2ac>)
    9578:	689b      	ldr	r3, [r3, #8]
    957a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
    957e:	2b08      	cmp	r3, #8
    9580:	d112      	bne.n	95a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
    9582:	4b9d      	ldr	r3, [pc, #628]	; (97f8 <HAL_RCC_OscConfig+0x2ac>)
    9584:	685b      	ldr	r3, [r3, #4]
    9586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    958a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    958e:	d10b      	bne.n	95a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
    9590:	4b99      	ldr	r3, [pc, #612]	; (97f8 <HAL_RCC_OscConfig+0x2ac>)
    9592:	681b      	ldr	r3, [r3, #0]
    9594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    9598:	2b00      	cmp	r3, #0
    959a:	d05b      	beq.n	9654 <HAL_RCC_OscConfig+0x108>
    959c:	687b      	ldr	r3, [r7, #4]
    959e:	685b      	ldr	r3, [r3, #4]
    95a0:	2b00      	cmp	r3, #0
    95a2:	d157      	bne.n	9654 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
    95a4:	2301      	movs	r3, #1
    95a6:	e236      	b.n	9a16 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
    95a8:	687b      	ldr	r3, [r7, #4]
    95aa:	685b      	ldr	r3, [r3, #4]
    95ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    95b0:	d106      	bne.n	95c0 <HAL_RCC_OscConfig+0x74>
    95b2:	4b91      	ldr	r3, [pc, #580]	; (97f8 <HAL_RCC_OscConfig+0x2ac>)
    95b4:	681b      	ldr	r3, [r3, #0]
    95b6:	4a90      	ldr	r2, [pc, #576]	; (97f8 <HAL_RCC_OscConfig+0x2ac>)
    95b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    95bc:	6013      	str	r3, [r2, #0]
    95be:	e01d      	b.n	95fc <HAL_RCC_OscConfig+0xb0>
    95c0:	687b      	ldr	r3, [r7, #4]
    95c2:	685b      	ldr	r3, [r3, #4]
    95c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
    95c8:	d10c      	bne.n	95e4 <HAL_RCC_OscConfig+0x98>
    95ca:	4b8b      	ldr	r3, [pc, #556]	; (97f8 <HAL_RCC_OscConfig+0x2ac>)
    95cc:	681b      	ldr	r3, [r3, #0]
    95ce:	4a8a      	ldr	r2, [pc, #552]	; (97f8 <HAL_RCC_OscConfig+0x2ac>)
    95d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    95d4:	6013      	str	r3, [r2, #0]
    95d6:	4b88      	ldr	r3, [pc, #544]	; (97f8 <HAL_RCC_OscConfig+0x2ac>)
    95d8:	681b      	ldr	r3, [r3, #0]
    95da:	4a87      	ldr	r2, [pc, #540]	; (97f8 <HAL_RCC_OscConfig+0x2ac>)
    95dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    95e0:	6013      	str	r3, [r2, #0]
    95e2:	e00b      	b.n	95fc <HAL_RCC_OscConfig+0xb0>
    95e4:	4b84      	ldr	r3, [pc, #528]	; (97f8 <HAL_RCC_OscConfig+0x2ac>)
    95e6:	681b      	ldr	r3, [r3, #0]
    95e8:	4a83      	ldr	r2, [pc, #524]	; (97f8 <HAL_RCC_OscConfig+0x2ac>)
    95ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    95ee:	6013      	str	r3, [r2, #0]
    95f0:	4b81      	ldr	r3, [pc, #516]	; (97f8 <HAL_RCC_OscConfig+0x2ac>)
    95f2:	681b      	ldr	r3, [r3, #0]
    95f4:	4a80      	ldr	r2, [pc, #512]	; (97f8 <HAL_RCC_OscConfig+0x2ac>)
    95f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    95fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
    95fc:	687b      	ldr	r3, [r7, #4]
    95fe:	685b      	ldr	r3, [r3, #4]
    9600:	2b00      	cmp	r3, #0
    9602:	d013      	beq.n	962c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
    9604:	f7ff f8d8 	bl	87b8 <HAL_GetTick>
    9608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
    960a:	e008      	b.n	961e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
    960c:	f7ff f8d4 	bl	87b8 <HAL_GetTick>
    9610:	4602      	mov	r2, r0
    9612:	693b      	ldr	r3, [r7, #16]
    9614:	1ad3      	subs	r3, r2, r3
    9616:	2b64      	cmp	r3, #100	; 0x64
    9618:	d901      	bls.n	961e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
    961a:	2303      	movs	r3, #3
    961c:	e1fb      	b.n	9a16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
    961e:	4b76      	ldr	r3, [pc, #472]	; (97f8 <HAL_RCC_OscConfig+0x2ac>)
    9620:	681b      	ldr	r3, [r3, #0]
    9622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    9626:	2b00      	cmp	r3, #0
    9628:	d0f0      	beq.n	960c <HAL_RCC_OscConfig+0xc0>
    962a:	e014      	b.n	9656 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
    962c:	f7ff f8c4 	bl	87b8 <HAL_GetTick>
    9630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
    9632:	e008      	b.n	9646 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
    9634:	f7ff f8c0 	bl	87b8 <HAL_GetTick>
    9638:	4602      	mov	r2, r0
    963a:	693b      	ldr	r3, [r7, #16]
    963c:	1ad3      	subs	r3, r2, r3
    963e:	2b64      	cmp	r3, #100	; 0x64
    9640:	d901      	bls.n	9646 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
    9642:	2303      	movs	r3, #3
    9644:	e1e7      	b.n	9a16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
    9646:	4b6c      	ldr	r3, [pc, #432]	; (97f8 <HAL_RCC_OscConfig+0x2ac>)
    9648:	681b      	ldr	r3, [r3, #0]
    964a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    964e:	2b00      	cmp	r3, #0
    9650:	d1f0      	bne.n	9634 <HAL_RCC_OscConfig+0xe8>
    9652:	e000      	b.n	9656 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
    9654:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
    9656:	687b      	ldr	r3, [r7, #4]
    9658:	681b      	ldr	r3, [r3, #0]
    965a:	f003 0302 	and.w	r3, r3, #2
    965e:	2b00      	cmp	r3, #0
    9660:	d063      	beq.n	972a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
    9662:	4b65      	ldr	r3, [pc, #404]	; (97f8 <HAL_RCC_OscConfig+0x2ac>)
    9664:	689b      	ldr	r3, [r3, #8]
    9666:	f003 030c 	and.w	r3, r3, #12
    966a:	2b00      	cmp	r3, #0
    966c:	d00b      	beq.n	9686 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    966e:	4b62      	ldr	r3, [pc, #392]	; (97f8 <HAL_RCC_OscConfig+0x2ac>)
    9670:	689b      	ldr	r3, [r3, #8]
    9672:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
    9676:	2b08      	cmp	r3, #8
    9678:	d11c      	bne.n	96b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    967a:	4b5f      	ldr	r3, [pc, #380]	; (97f8 <HAL_RCC_OscConfig+0x2ac>)
    967c:	685b      	ldr	r3, [r3, #4]
    967e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    9682:	2b00      	cmp	r3, #0
    9684:	d116      	bne.n	96b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
    9686:	4b5c      	ldr	r3, [pc, #368]	; (97f8 <HAL_RCC_OscConfig+0x2ac>)
    9688:	681b      	ldr	r3, [r3, #0]
    968a:	f003 0302 	and.w	r3, r3, #2
    968e:	2b00      	cmp	r3, #0
    9690:	d005      	beq.n	969e <HAL_RCC_OscConfig+0x152>
    9692:	687b      	ldr	r3, [r7, #4]
    9694:	68db      	ldr	r3, [r3, #12]
    9696:	2b01      	cmp	r3, #1
    9698:	d001      	beq.n	969e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
    969a:	2301      	movs	r3, #1
    969c:	e1bb      	b.n	9a16 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
    969e:	4b56      	ldr	r3, [pc, #344]	; (97f8 <HAL_RCC_OscConfig+0x2ac>)
    96a0:	681b      	ldr	r3, [r3, #0]
    96a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
    96a6:	687b      	ldr	r3, [r7, #4]
    96a8:	691b      	ldr	r3, [r3, #16]
    96aa:	00db      	lsls	r3, r3, #3
    96ac:	4952      	ldr	r1, [pc, #328]	; (97f8 <HAL_RCC_OscConfig+0x2ac>)
    96ae:	4313      	orrs	r3, r2
    96b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
    96b2:	e03a      	b.n	972a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
    96b4:	687b      	ldr	r3, [r7, #4]
    96b6:	68db      	ldr	r3, [r3, #12]
    96b8:	2b00      	cmp	r3, #0
    96ba:	d020      	beq.n	96fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
    96bc:	4b4f      	ldr	r3, [pc, #316]	; (97fc <HAL_RCC_OscConfig+0x2b0>)
    96be:	2201      	movs	r2, #1
    96c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
    96c2:	f7ff f879 	bl	87b8 <HAL_GetTick>
    96c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
    96c8:	e008      	b.n	96dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
    96ca:	f7ff f875 	bl	87b8 <HAL_GetTick>
    96ce:	4602      	mov	r2, r0
    96d0:	693b      	ldr	r3, [r7, #16]
    96d2:	1ad3      	subs	r3, r2, r3
    96d4:	2b02      	cmp	r3, #2
    96d6:	d901      	bls.n	96dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
    96d8:	2303      	movs	r3, #3
    96da:	e19c      	b.n	9a16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
    96dc:	4b46      	ldr	r3, [pc, #280]	; (97f8 <HAL_RCC_OscConfig+0x2ac>)
    96de:	681b      	ldr	r3, [r3, #0]
    96e0:	f003 0302 	and.w	r3, r3, #2
    96e4:	2b00      	cmp	r3, #0
    96e6:	d0f0      	beq.n	96ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
    96e8:	4b43      	ldr	r3, [pc, #268]	; (97f8 <HAL_RCC_OscConfig+0x2ac>)
    96ea:	681b      	ldr	r3, [r3, #0]
    96ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
    96f0:	687b      	ldr	r3, [r7, #4]
    96f2:	691b      	ldr	r3, [r3, #16]
    96f4:	00db      	lsls	r3, r3, #3
    96f6:	4940      	ldr	r1, [pc, #256]	; (97f8 <HAL_RCC_OscConfig+0x2ac>)
    96f8:	4313      	orrs	r3, r2
    96fa:	600b      	str	r3, [r1, #0]
    96fc:	e015      	b.n	972a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
    96fe:	4b3f      	ldr	r3, [pc, #252]	; (97fc <HAL_RCC_OscConfig+0x2b0>)
    9700:	2200      	movs	r2, #0
    9702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
    9704:	f7ff f858 	bl	87b8 <HAL_GetTick>
    9708:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
    970a:	e008      	b.n	971e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
    970c:	f7ff f854 	bl	87b8 <HAL_GetTick>
    9710:	4602      	mov	r2, r0
    9712:	693b      	ldr	r3, [r7, #16]
    9714:	1ad3      	subs	r3, r2, r3
    9716:	2b02      	cmp	r3, #2
    9718:	d901      	bls.n	971e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
    971a:	2303      	movs	r3, #3
    971c:	e17b      	b.n	9a16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
    971e:	4b36      	ldr	r3, [pc, #216]	; (97f8 <HAL_RCC_OscConfig+0x2ac>)
    9720:	681b      	ldr	r3, [r3, #0]
    9722:	f003 0302 	and.w	r3, r3, #2
    9726:	2b00      	cmp	r3, #0
    9728:	d1f0      	bne.n	970c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
    972a:	687b      	ldr	r3, [r7, #4]
    972c:	681b      	ldr	r3, [r3, #0]
    972e:	f003 0308 	and.w	r3, r3, #8
    9732:	2b00      	cmp	r3, #0
    9734:	d030      	beq.n	9798 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
    9736:	687b      	ldr	r3, [r7, #4]
    9738:	695b      	ldr	r3, [r3, #20]
    973a:	2b00      	cmp	r3, #0
    973c:	d016      	beq.n	976c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
    973e:	4b30      	ldr	r3, [pc, #192]	; (9800 <HAL_RCC_OscConfig+0x2b4>)
    9740:	2201      	movs	r2, #1
    9742:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
    9744:	f7ff f838 	bl	87b8 <HAL_GetTick>
    9748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
    974a:	e008      	b.n	975e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
    974c:	f7ff f834 	bl	87b8 <HAL_GetTick>
    9750:	4602      	mov	r2, r0
    9752:	693b      	ldr	r3, [r7, #16]
    9754:	1ad3      	subs	r3, r2, r3
    9756:	2b02      	cmp	r3, #2
    9758:	d901      	bls.n	975e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
    975a:	2303      	movs	r3, #3
    975c:	e15b      	b.n	9a16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
    975e:	4b26      	ldr	r3, [pc, #152]	; (97f8 <HAL_RCC_OscConfig+0x2ac>)
    9760:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    9762:	f003 0302 	and.w	r3, r3, #2
    9766:	2b00      	cmp	r3, #0
    9768:	d0f0      	beq.n	974c <HAL_RCC_OscConfig+0x200>
    976a:	e015      	b.n	9798 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
    976c:	4b24      	ldr	r3, [pc, #144]	; (9800 <HAL_RCC_OscConfig+0x2b4>)
    976e:	2200      	movs	r2, #0
    9770:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
    9772:	f7ff f821 	bl	87b8 <HAL_GetTick>
    9776:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
    9778:	e008      	b.n	978c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
    977a:	f7ff f81d 	bl	87b8 <HAL_GetTick>
    977e:	4602      	mov	r2, r0
    9780:	693b      	ldr	r3, [r7, #16]
    9782:	1ad3      	subs	r3, r2, r3
    9784:	2b02      	cmp	r3, #2
    9786:	d901      	bls.n	978c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
    9788:	2303      	movs	r3, #3
    978a:	e144      	b.n	9a16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
    978c:	4b1a      	ldr	r3, [pc, #104]	; (97f8 <HAL_RCC_OscConfig+0x2ac>)
    978e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    9790:	f003 0302 	and.w	r3, r3, #2
    9794:	2b00      	cmp	r3, #0
    9796:	d1f0      	bne.n	977a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
    9798:	687b      	ldr	r3, [r7, #4]
    979a:	681b      	ldr	r3, [r3, #0]
    979c:	f003 0304 	and.w	r3, r3, #4
    97a0:	2b00      	cmp	r3, #0
    97a2:	f000 80a0 	beq.w	98e6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
    97a6:	2300      	movs	r3, #0
    97a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
    97aa:	4b13      	ldr	r3, [pc, #76]	; (97f8 <HAL_RCC_OscConfig+0x2ac>)
    97ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    97ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    97b2:	2b00      	cmp	r3, #0
    97b4:	d10f      	bne.n	97d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
    97b6:	2300      	movs	r3, #0
    97b8:	60bb      	str	r3, [r7, #8]
    97ba:	4b0f      	ldr	r3, [pc, #60]	; (97f8 <HAL_RCC_OscConfig+0x2ac>)
    97bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    97be:	4a0e      	ldr	r2, [pc, #56]	; (97f8 <HAL_RCC_OscConfig+0x2ac>)
    97c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    97c4:	6413      	str	r3, [r2, #64]	; 0x40
    97c6:	4b0c      	ldr	r3, [pc, #48]	; (97f8 <HAL_RCC_OscConfig+0x2ac>)
    97c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    97ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    97ce:	60bb      	str	r3, [r7, #8]
    97d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
    97d2:	2301      	movs	r3, #1
    97d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    97d6:	4b0b      	ldr	r3, [pc, #44]	; (9804 <HAL_RCC_OscConfig+0x2b8>)
    97d8:	681b      	ldr	r3, [r3, #0]
    97da:	f403 7380 	and.w	r3, r3, #256	; 0x100
    97de:	2b00      	cmp	r3, #0
    97e0:	d121      	bne.n	9826 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
    97e2:	4b08      	ldr	r3, [pc, #32]	; (9804 <HAL_RCC_OscConfig+0x2b8>)
    97e4:	681b      	ldr	r3, [r3, #0]
    97e6:	4a07      	ldr	r2, [pc, #28]	; (9804 <HAL_RCC_OscConfig+0x2b8>)
    97e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    97ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
    97ee:	f7fe ffe3 	bl	87b8 <HAL_GetTick>
    97f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    97f4:	e011      	b.n	981a <HAL_RCC_OscConfig+0x2ce>
    97f6:	bf00      	nop
    97f8:	40023800 	.word	0x40023800
    97fc:	42470000 	.word	0x42470000
    9800:	42470e80 	.word	0x42470e80
    9804:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
    9808:	f7fe ffd6 	bl	87b8 <HAL_GetTick>
    980c:	4602      	mov	r2, r0
    980e:	693b      	ldr	r3, [r7, #16]
    9810:	1ad3      	subs	r3, r2, r3
    9812:	2b02      	cmp	r3, #2
    9814:	d901      	bls.n	981a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
    9816:	2303      	movs	r3, #3
    9818:	e0fd      	b.n	9a16 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    981a:	4b81      	ldr	r3, [pc, #516]	; (9a20 <HAL_RCC_OscConfig+0x4d4>)
    981c:	681b      	ldr	r3, [r3, #0]
    981e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    9822:	2b00      	cmp	r3, #0
    9824:	d0f0      	beq.n	9808 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    9826:	687b      	ldr	r3, [r7, #4]
    9828:	689b      	ldr	r3, [r3, #8]
    982a:	2b01      	cmp	r3, #1
    982c:	d106      	bne.n	983c <HAL_RCC_OscConfig+0x2f0>
    982e:	4b7d      	ldr	r3, [pc, #500]	; (9a24 <HAL_RCC_OscConfig+0x4d8>)
    9830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    9832:	4a7c      	ldr	r2, [pc, #496]	; (9a24 <HAL_RCC_OscConfig+0x4d8>)
    9834:	f043 0301 	orr.w	r3, r3, #1
    9838:	6713      	str	r3, [r2, #112]	; 0x70
    983a:	e01c      	b.n	9876 <HAL_RCC_OscConfig+0x32a>
    983c:	687b      	ldr	r3, [r7, #4]
    983e:	689b      	ldr	r3, [r3, #8]
    9840:	2b05      	cmp	r3, #5
    9842:	d10c      	bne.n	985e <HAL_RCC_OscConfig+0x312>
    9844:	4b77      	ldr	r3, [pc, #476]	; (9a24 <HAL_RCC_OscConfig+0x4d8>)
    9846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    9848:	4a76      	ldr	r2, [pc, #472]	; (9a24 <HAL_RCC_OscConfig+0x4d8>)
    984a:	f043 0304 	orr.w	r3, r3, #4
    984e:	6713      	str	r3, [r2, #112]	; 0x70
    9850:	4b74      	ldr	r3, [pc, #464]	; (9a24 <HAL_RCC_OscConfig+0x4d8>)
    9852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    9854:	4a73      	ldr	r2, [pc, #460]	; (9a24 <HAL_RCC_OscConfig+0x4d8>)
    9856:	f043 0301 	orr.w	r3, r3, #1
    985a:	6713      	str	r3, [r2, #112]	; 0x70
    985c:	e00b      	b.n	9876 <HAL_RCC_OscConfig+0x32a>
    985e:	4b71      	ldr	r3, [pc, #452]	; (9a24 <HAL_RCC_OscConfig+0x4d8>)
    9860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    9862:	4a70      	ldr	r2, [pc, #448]	; (9a24 <HAL_RCC_OscConfig+0x4d8>)
    9864:	f023 0301 	bic.w	r3, r3, #1
    9868:	6713      	str	r3, [r2, #112]	; 0x70
    986a:	4b6e      	ldr	r3, [pc, #440]	; (9a24 <HAL_RCC_OscConfig+0x4d8>)
    986c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    986e:	4a6d      	ldr	r2, [pc, #436]	; (9a24 <HAL_RCC_OscConfig+0x4d8>)
    9870:	f023 0304 	bic.w	r3, r3, #4
    9874:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    9876:	687b      	ldr	r3, [r7, #4]
    9878:	689b      	ldr	r3, [r3, #8]
    987a:	2b00      	cmp	r3, #0
    987c:	d015      	beq.n	98aa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
    987e:	f7fe ff9b 	bl	87b8 <HAL_GetTick>
    9882:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
    9884:	e00a      	b.n	989c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
    9886:	f7fe ff97 	bl	87b8 <HAL_GetTick>
    988a:	4602      	mov	r2, r0
    988c:	693b      	ldr	r3, [r7, #16]
    988e:	1ad3      	subs	r3, r2, r3
    9890:	f241 3288 	movw	r2, #5000	; 0x1388
    9894:	4293      	cmp	r3, r2
    9896:	d901      	bls.n	989c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
    9898:	2303      	movs	r3, #3
    989a:	e0bc      	b.n	9a16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
    989c:	4b61      	ldr	r3, [pc, #388]	; (9a24 <HAL_RCC_OscConfig+0x4d8>)
    989e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    98a0:	f003 0302 	and.w	r3, r3, #2
    98a4:	2b00      	cmp	r3, #0
    98a6:	d0ee      	beq.n	9886 <HAL_RCC_OscConfig+0x33a>
    98a8:	e014      	b.n	98d4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
    98aa:	f7fe ff85 	bl	87b8 <HAL_GetTick>
    98ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
    98b0:	e00a      	b.n	98c8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
    98b2:	f7fe ff81 	bl	87b8 <HAL_GetTick>
    98b6:	4602      	mov	r2, r0
    98b8:	693b      	ldr	r3, [r7, #16]
    98ba:	1ad3      	subs	r3, r2, r3
    98bc:	f241 3288 	movw	r2, #5000	; 0x1388
    98c0:	4293      	cmp	r3, r2
    98c2:	d901      	bls.n	98c8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
    98c4:	2303      	movs	r3, #3
    98c6:	e0a6      	b.n	9a16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
    98c8:	4b56      	ldr	r3, [pc, #344]	; (9a24 <HAL_RCC_OscConfig+0x4d8>)
    98ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    98cc:	f003 0302 	and.w	r3, r3, #2
    98d0:	2b00      	cmp	r3, #0
    98d2:	d1ee      	bne.n	98b2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
    98d4:	7dfb      	ldrb	r3, [r7, #23]
    98d6:	2b01      	cmp	r3, #1
    98d8:	d105      	bne.n	98e6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
    98da:	4b52      	ldr	r3, [pc, #328]	; (9a24 <HAL_RCC_OscConfig+0x4d8>)
    98dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    98de:	4a51      	ldr	r2, [pc, #324]	; (9a24 <HAL_RCC_OscConfig+0x4d8>)
    98e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    98e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
    98e6:	687b      	ldr	r3, [r7, #4]
    98e8:	699b      	ldr	r3, [r3, #24]
    98ea:	2b00      	cmp	r3, #0
    98ec:	f000 8092 	beq.w	9a14 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    98f0:	4b4c      	ldr	r3, [pc, #304]	; (9a24 <HAL_RCC_OscConfig+0x4d8>)
    98f2:	689b      	ldr	r3, [r3, #8]
    98f4:	f003 030c 	and.w	r3, r3, #12
    98f8:	2b08      	cmp	r3, #8
    98fa:	d05c      	beq.n	99b6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
    98fc:	687b      	ldr	r3, [r7, #4]
    98fe:	699b      	ldr	r3, [r3, #24]
    9900:	2b02      	cmp	r3, #2
    9902:	d141      	bne.n	9988 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
    9904:	4b48      	ldr	r3, [pc, #288]	; (9a28 <HAL_RCC_OscConfig+0x4dc>)
    9906:	2200      	movs	r2, #0
    9908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
    990a:	f7fe ff55 	bl	87b8 <HAL_GetTick>
    990e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
    9910:	e008      	b.n	9924 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
    9912:	f7fe ff51 	bl	87b8 <HAL_GetTick>
    9916:	4602      	mov	r2, r0
    9918:	693b      	ldr	r3, [r7, #16]
    991a:	1ad3      	subs	r3, r2, r3
    991c:	2b02      	cmp	r3, #2
    991e:	d901      	bls.n	9924 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
    9920:	2303      	movs	r3, #3
    9922:	e078      	b.n	9a16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
    9924:	4b3f      	ldr	r3, [pc, #252]	; (9a24 <HAL_RCC_OscConfig+0x4d8>)
    9926:	681b      	ldr	r3, [r3, #0]
    9928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    992c:	2b00      	cmp	r3, #0
    992e:	d1f0      	bne.n	9912 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
    9930:	687b      	ldr	r3, [r7, #4]
    9932:	69da      	ldr	r2, [r3, #28]
    9934:	687b      	ldr	r3, [r7, #4]
    9936:	6a1b      	ldr	r3, [r3, #32]
    9938:	431a      	orrs	r2, r3
    993a:	687b      	ldr	r3, [r7, #4]
    993c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    993e:	019b      	lsls	r3, r3, #6
    9940:	431a      	orrs	r2, r3
    9942:	687b      	ldr	r3, [r7, #4]
    9944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9946:	085b      	lsrs	r3, r3, #1
    9948:	3b01      	subs	r3, #1
    994a:	041b      	lsls	r3, r3, #16
    994c:	431a      	orrs	r2, r3
    994e:	687b      	ldr	r3, [r7, #4]
    9950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9952:	061b      	lsls	r3, r3, #24
    9954:	4933      	ldr	r1, [pc, #204]	; (9a24 <HAL_RCC_OscConfig+0x4d8>)
    9956:	4313      	orrs	r3, r2
    9958:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
    995a:	4b33      	ldr	r3, [pc, #204]	; (9a28 <HAL_RCC_OscConfig+0x4dc>)
    995c:	2201      	movs	r2, #1
    995e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
    9960:	f7fe ff2a 	bl	87b8 <HAL_GetTick>
    9964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
    9966:	e008      	b.n	997a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
    9968:	f7fe ff26 	bl	87b8 <HAL_GetTick>
    996c:	4602      	mov	r2, r0
    996e:	693b      	ldr	r3, [r7, #16]
    9970:	1ad3      	subs	r3, r2, r3
    9972:	2b02      	cmp	r3, #2
    9974:	d901      	bls.n	997a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
    9976:	2303      	movs	r3, #3
    9978:	e04d      	b.n	9a16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
    997a:	4b2a      	ldr	r3, [pc, #168]	; (9a24 <HAL_RCC_OscConfig+0x4d8>)
    997c:	681b      	ldr	r3, [r3, #0]
    997e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    9982:	2b00      	cmp	r3, #0
    9984:	d0f0      	beq.n	9968 <HAL_RCC_OscConfig+0x41c>
    9986:	e045      	b.n	9a14 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
    9988:	4b27      	ldr	r3, [pc, #156]	; (9a28 <HAL_RCC_OscConfig+0x4dc>)
    998a:	2200      	movs	r2, #0
    998c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
    998e:	f7fe ff13 	bl	87b8 <HAL_GetTick>
    9992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
    9994:	e008      	b.n	99a8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
    9996:	f7fe ff0f 	bl	87b8 <HAL_GetTick>
    999a:	4602      	mov	r2, r0
    999c:	693b      	ldr	r3, [r7, #16]
    999e:	1ad3      	subs	r3, r2, r3
    99a0:	2b02      	cmp	r3, #2
    99a2:	d901      	bls.n	99a8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
    99a4:	2303      	movs	r3, #3
    99a6:	e036      	b.n	9a16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
    99a8:	4b1e      	ldr	r3, [pc, #120]	; (9a24 <HAL_RCC_OscConfig+0x4d8>)
    99aa:	681b      	ldr	r3, [r3, #0]
    99ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    99b0:	2b00      	cmp	r3, #0
    99b2:	d1f0      	bne.n	9996 <HAL_RCC_OscConfig+0x44a>
    99b4:	e02e      	b.n	9a14 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
    99b6:	687b      	ldr	r3, [r7, #4]
    99b8:	699b      	ldr	r3, [r3, #24]
    99ba:	2b01      	cmp	r3, #1
    99bc:	d101      	bne.n	99c2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
    99be:	2301      	movs	r3, #1
    99c0:	e029      	b.n	9a16 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
    99c2:	4b18      	ldr	r3, [pc, #96]	; (9a24 <HAL_RCC_OscConfig+0x4d8>)
    99c4:	685b      	ldr	r3, [r3, #4]
    99c6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
    99c8:	68fb      	ldr	r3, [r7, #12]
    99ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
    99ce:	687b      	ldr	r3, [r7, #4]
    99d0:	69db      	ldr	r3, [r3, #28]
    99d2:	429a      	cmp	r2, r3
    99d4:	d11c      	bne.n	9a10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
    99d6:	68fb      	ldr	r3, [r7, #12]
    99d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    99dc:	687b      	ldr	r3, [r7, #4]
    99de:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
    99e0:	429a      	cmp	r2, r3
    99e2:	d115      	bne.n	9a10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
    99e4:	68fa      	ldr	r2, [r7, #12]
    99e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
    99ea:	4013      	ands	r3, r2
    99ec:	687a      	ldr	r2, [r7, #4]
    99ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
    99f0:	4293      	cmp	r3, r2
    99f2:	d10d      	bne.n	9a10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
    99f4:	68fb      	ldr	r3, [r7, #12]
    99f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
    99fa:	687b      	ldr	r3, [r7, #4]
    99fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
    99fe:	429a      	cmp	r2, r3
    9a00:	d106      	bne.n	9a10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
    9a02:	68fb      	ldr	r3, [r7, #12]
    9a04:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
    9a08:	687b      	ldr	r3, [r7, #4]
    9a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
    9a0c:	429a      	cmp	r2, r3
    9a0e:	d001      	beq.n	9a14 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
    9a10:	2301      	movs	r3, #1
    9a12:	e000      	b.n	9a16 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
    9a14:	2300      	movs	r3, #0
}
    9a16:	4618      	mov	r0, r3
    9a18:	3718      	adds	r7, #24
    9a1a:	46bd      	mov	sp, r7
    9a1c:	bd80      	pop	{r7, pc}
    9a1e:	bf00      	nop
    9a20:	40007000 	.word	0x40007000
    9a24:	40023800 	.word	0x40023800
    9a28:	42470060 	.word	0x42470060

00009a2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
    9a2c:	b580      	push	{r7, lr}
    9a2e:	b084      	sub	sp, #16
    9a30:	af00      	add	r7, sp, #0
    9a32:	6078      	str	r0, [r7, #4]
    9a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
    9a36:	687b      	ldr	r3, [r7, #4]
    9a38:	2b00      	cmp	r3, #0
    9a3a:	d101      	bne.n	9a40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
    9a3c:	2301      	movs	r3, #1
    9a3e:	e0cc      	b.n	9bda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
    9a40:	4b68      	ldr	r3, [pc, #416]	; (9be4 <HAL_RCC_ClockConfig+0x1b8>)
    9a42:	681b      	ldr	r3, [r3, #0]
    9a44:	f003 030f 	and.w	r3, r3, #15
    9a48:	683a      	ldr	r2, [r7, #0]
    9a4a:	429a      	cmp	r2, r3
    9a4c:	d90c      	bls.n	9a68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
    9a4e:	4b65      	ldr	r3, [pc, #404]	; (9be4 <HAL_RCC_ClockConfig+0x1b8>)
    9a50:	683a      	ldr	r2, [r7, #0]
    9a52:	b2d2      	uxtb	r2, r2
    9a54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
    9a56:	4b63      	ldr	r3, [pc, #396]	; (9be4 <HAL_RCC_ClockConfig+0x1b8>)
    9a58:	681b      	ldr	r3, [r3, #0]
    9a5a:	f003 030f 	and.w	r3, r3, #15
    9a5e:	683a      	ldr	r2, [r7, #0]
    9a60:	429a      	cmp	r2, r3
    9a62:	d001      	beq.n	9a68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
    9a64:	2301      	movs	r3, #1
    9a66:	e0b8      	b.n	9bda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
    9a68:	687b      	ldr	r3, [r7, #4]
    9a6a:	681b      	ldr	r3, [r3, #0]
    9a6c:	f003 0302 	and.w	r3, r3, #2
    9a70:	2b00      	cmp	r3, #0
    9a72:	d020      	beq.n	9ab6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
    9a74:	687b      	ldr	r3, [r7, #4]
    9a76:	681b      	ldr	r3, [r3, #0]
    9a78:	f003 0304 	and.w	r3, r3, #4
    9a7c:	2b00      	cmp	r3, #0
    9a7e:	d005      	beq.n	9a8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
    9a80:	4b59      	ldr	r3, [pc, #356]	; (9be8 <HAL_RCC_ClockConfig+0x1bc>)
    9a82:	689b      	ldr	r3, [r3, #8]
    9a84:	4a58      	ldr	r2, [pc, #352]	; (9be8 <HAL_RCC_ClockConfig+0x1bc>)
    9a86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
    9a8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
    9a8c:	687b      	ldr	r3, [r7, #4]
    9a8e:	681b      	ldr	r3, [r3, #0]
    9a90:	f003 0308 	and.w	r3, r3, #8
    9a94:	2b00      	cmp	r3, #0
    9a96:	d005      	beq.n	9aa4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
    9a98:	4b53      	ldr	r3, [pc, #332]	; (9be8 <HAL_RCC_ClockConfig+0x1bc>)
    9a9a:	689b      	ldr	r3, [r3, #8]
    9a9c:	4a52      	ldr	r2, [pc, #328]	; (9be8 <HAL_RCC_ClockConfig+0x1bc>)
    9a9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
    9aa2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    9aa4:	4b50      	ldr	r3, [pc, #320]	; (9be8 <HAL_RCC_ClockConfig+0x1bc>)
    9aa6:	689b      	ldr	r3, [r3, #8]
    9aa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
    9aac:	687b      	ldr	r3, [r7, #4]
    9aae:	689b      	ldr	r3, [r3, #8]
    9ab0:	494d      	ldr	r1, [pc, #308]	; (9be8 <HAL_RCC_ClockConfig+0x1bc>)
    9ab2:	4313      	orrs	r3, r2
    9ab4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    9ab6:	687b      	ldr	r3, [r7, #4]
    9ab8:	681b      	ldr	r3, [r3, #0]
    9aba:	f003 0301 	and.w	r3, r3, #1
    9abe:	2b00      	cmp	r3, #0
    9ac0:	d044      	beq.n	9b4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    9ac2:	687b      	ldr	r3, [r7, #4]
    9ac4:	685b      	ldr	r3, [r3, #4]
    9ac6:	2b01      	cmp	r3, #1
    9ac8:	d107      	bne.n	9ada <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
    9aca:	4b47      	ldr	r3, [pc, #284]	; (9be8 <HAL_RCC_ClockConfig+0x1bc>)
    9acc:	681b      	ldr	r3, [r3, #0]
    9ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    9ad2:	2b00      	cmp	r3, #0
    9ad4:	d119      	bne.n	9b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
    9ad6:	2301      	movs	r3, #1
    9ad8:	e07f      	b.n	9bda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
    9ada:	687b      	ldr	r3, [r7, #4]
    9adc:	685b      	ldr	r3, [r3, #4]
    9ade:	2b02      	cmp	r3, #2
    9ae0:	d003      	beq.n	9aea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    9ae2:	687b      	ldr	r3, [r7, #4]
    9ae4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
    9ae6:	2b03      	cmp	r3, #3
    9ae8:	d107      	bne.n	9afa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
    9aea:	4b3f      	ldr	r3, [pc, #252]	; (9be8 <HAL_RCC_ClockConfig+0x1bc>)
    9aec:	681b      	ldr	r3, [r3, #0]
    9aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    9af2:	2b00      	cmp	r3, #0
    9af4:	d109      	bne.n	9b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
    9af6:	2301      	movs	r3, #1
    9af8:	e06f      	b.n	9bda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
    9afa:	4b3b      	ldr	r3, [pc, #236]	; (9be8 <HAL_RCC_ClockConfig+0x1bc>)
    9afc:	681b      	ldr	r3, [r3, #0]
    9afe:	f003 0302 	and.w	r3, r3, #2
    9b02:	2b00      	cmp	r3, #0
    9b04:	d101      	bne.n	9b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
    9b06:	2301      	movs	r3, #1
    9b08:	e067      	b.n	9bda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    9b0a:	4b37      	ldr	r3, [pc, #220]	; (9be8 <HAL_RCC_ClockConfig+0x1bc>)
    9b0c:	689b      	ldr	r3, [r3, #8]
    9b0e:	f023 0203 	bic.w	r2, r3, #3
    9b12:	687b      	ldr	r3, [r7, #4]
    9b14:	685b      	ldr	r3, [r3, #4]
    9b16:	4934      	ldr	r1, [pc, #208]	; (9be8 <HAL_RCC_ClockConfig+0x1bc>)
    9b18:	4313      	orrs	r3, r2
    9b1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
    9b1c:	f7fe fe4c 	bl	87b8 <HAL_GetTick>
    9b20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
    9b22:	e00a      	b.n	9b3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
    9b24:	f7fe fe48 	bl	87b8 <HAL_GetTick>
    9b28:	4602      	mov	r2, r0
    9b2a:	68fb      	ldr	r3, [r7, #12]
    9b2c:	1ad3      	subs	r3, r2, r3
    9b2e:	f241 3288 	movw	r2, #5000	; 0x1388
    9b32:	4293      	cmp	r3, r2
    9b34:	d901      	bls.n	9b3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
    9b36:	2303      	movs	r3, #3
    9b38:	e04f      	b.n	9bda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
    9b3a:	4b2b      	ldr	r3, [pc, #172]	; (9be8 <HAL_RCC_ClockConfig+0x1bc>)
    9b3c:	689b      	ldr	r3, [r3, #8]
    9b3e:	f003 020c 	and.w	r2, r3, #12
    9b42:	687b      	ldr	r3, [r7, #4]
    9b44:	685b      	ldr	r3, [r3, #4]
    9b46:	009b      	lsls	r3, r3, #2
    9b48:	429a      	cmp	r2, r3
    9b4a:	d1eb      	bne.n	9b24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
    9b4c:	4b25      	ldr	r3, [pc, #148]	; (9be4 <HAL_RCC_ClockConfig+0x1b8>)
    9b4e:	681b      	ldr	r3, [r3, #0]
    9b50:	f003 030f 	and.w	r3, r3, #15
    9b54:	683a      	ldr	r2, [r7, #0]
    9b56:	429a      	cmp	r2, r3
    9b58:	d20c      	bcs.n	9b74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
    9b5a:	4b22      	ldr	r3, [pc, #136]	; (9be4 <HAL_RCC_ClockConfig+0x1b8>)
    9b5c:	683a      	ldr	r2, [r7, #0]
    9b5e:	b2d2      	uxtb	r2, r2
    9b60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
    9b62:	4b20      	ldr	r3, [pc, #128]	; (9be4 <HAL_RCC_ClockConfig+0x1b8>)
    9b64:	681b      	ldr	r3, [r3, #0]
    9b66:	f003 030f 	and.w	r3, r3, #15
    9b6a:	683a      	ldr	r2, [r7, #0]
    9b6c:	429a      	cmp	r2, r3
    9b6e:	d001      	beq.n	9b74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
    9b70:	2301      	movs	r3, #1
    9b72:	e032      	b.n	9bda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
    9b74:	687b      	ldr	r3, [r7, #4]
    9b76:	681b      	ldr	r3, [r3, #0]
    9b78:	f003 0304 	and.w	r3, r3, #4
    9b7c:	2b00      	cmp	r3, #0
    9b7e:	d008      	beq.n	9b92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
    9b80:	4b19      	ldr	r3, [pc, #100]	; (9be8 <HAL_RCC_ClockConfig+0x1bc>)
    9b82:	689b      	ldr	r3, [r3, #8]
    9b84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
    9b88:	687b      	ldr	r3, [r7, #4]
    9b8a:	68db      	ldr	r3, [r3, #12]
    9b8c:	4916      	ldr	r1, [pc, #88]	; (9be8 <HAL_RCC_ClockConfig+0x1bc>)
    9b8e:	4313      	orrs	r3, r2
    9b90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
    9b92:	687b      	ldr	r3, [r7, #4]
    9b94:	681b      	ldr	r3, [r3, #0]
    9b96:	f003 0308 	and.w	r3, r3, #8
    9b9a:	2b00      	cmp	r3, #0
    9b9c:	d009      	beq.n	9bb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
    9b9e:	4b12      	ldr	r3, [pc, #72]	; (9be8 <HAL_RCC_ClockConfig+0x1bc>)
    9ba0:	689b      	ldr	r3, [r3, #8]
    9ba2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
    9ba6:	687b      	ldr	r3, [r7, #4]
    9ba8:	691b      	ldr	r3, [r3, #16]
    9baa:	00db      	lsls	r3, r3, #3
    9bac:	490e      	ldr	r1, [pc, #56]	; (9be8 <HAL_RCC_ClockConfig+0x1bc>)
    9bae:	4313      	orrs	r3, r2
    9bb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
    9bb2:	f000 f821 	bl	9bf8 <HAL_RCC_GetSysClockFreq>
    9bb6:	4601      	mov	r1, r0
    9bb8:	4b0b      	ldr	r3, [pc, #44]	; (9be8 <HAL_RCC_ClockConfig+0x1bc>)
    9bba:	689b      	ldr	r3, [r3, #8]
    9bbc:	091b      	lsrs	r3, r3, #4
    9bbe:	f003 030f 	and.w	r3, r3, #15
    9bc2:	4a0a      	ldr	r2, [pc, #40]	; (9bec <HAL_RCC_ClockConfig+0x1c0>)
    9bc4:	5cd3      	ldrb	r3, [r2, r3]
    9bc6:	fa21 f303 	lsr.w	r3, r1, r3
    9bca:	4a09      	ldr	r2, [pc, #36]	; (9bf0 <HAL_RCC_ClockConfig+0x1c4>)
    9bcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
    9bce:	4b09      	ldr	r3, [pc, #36]	; (9bf4 <HAL_RCC_ClockConfig+0x1c8>)
    9bd0:	681b      	ldr	r3, [r3, #0]
    9bd2:	4618      	mov	r0, r3
    9bd4:	f7fe fd76 	bl	86c4 <HAL_InitTick>

  return HAL_OK;
    9bd8:	2300      	movs	r3, #0
}
    9bda:	4618      	mov	r0, r3
    9bdc:	3710      	adds	r7, #16
    9bde:	46bd      	mov	sp, r7
    9be0:	bd80      	pop	{r7, pc}
    9be2:	bf00      	nop
    9be4:	40023c00 	.word	0x40023c00
    9be8:	40023800 	.word	0x40023800
    9bec:	0000d134 	.word	0x0000d134
    9bf0:	0001d184 	.word	0x0001d184
    9bf4:	0001d188 	.word	0x0001d188

00009bf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
    9bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    9bfa:	b085      	sub	sp, #20
    9bfc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
    9bfe:	2300      	movs	r3, #0
    9c00:	607b      	str	r3, [r7, #4]
    9c02:	2300      	movs	r3, #0
    9c04:	60fb      	str	r3, [r7, #12]
    9c06:	2300      	movs	r3, #0
    9c08:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
    9c0a:	2300      	movs	r3, #0
    9c0c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
    9c0e:	4b63      	ldr	r3, [pc, #396]	; (9d9c <HAL_RCC_GetSysClockFreq+0x1a4>)
    9c10:	689b      	ldr	r3, [r3, #8]
    9c12:	f003 030c 	and.w	r3, r3, #12
    9c16:	2b04      	cmp	r3, #4
    9c18:	d007      	beq.n	9c2a <HAL_RCC_GetSysClockFreq+0x32>
    9c1a:	2b08      	cmp	r3, #8
    9c1c:	d008      	beq.n	9c30 <HAL_RCC_GetSysClockFreq+0x38>
    9c1e:	2b00      	cmp	r3, #0
    9c20:	f040 80b4 	bne.w	9d8c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
    9c24:	4b5e      	ldr	r3, [pc, #376]	; (9da0 <HAL_RCC_GetSysClockFreq+0x1a8>)
    9c26:	60bb      	str	r3, [r7, #8]
       break;
    9c28:	e0b3      	b.n	9d92 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
    9c2a:	4b5e      	ldr	r3, [pc, #376]	; (9da4 <HAL_RCC_GetSysClockFreq+0x1ac>)
    9c2c:	60bb      	str	r3, [r7, #8]
      break;
    9c2e:	e0b0      	b.n	9d92 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
    9c30:	4b5a      	ldr	r3, [pc, #360]	; (9d9c <HAL_RCC_GetSysClockFreq+0x1a4>)
    9c32:	685b      	ldr	r3, [r3, #4]
    9c34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9c38:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
    9c3a:	4b58      	ldr	r3, [pc, #352]	; (9d9c <HAL_RCC_GetSysClockFreq+0x1a4>)
    9c3c:	685b      	ldr	r3, [r3, #4]
    9c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    9c42:	2b00      	cmp	r3, #0
    9c44:	d04a      	beq.n	9cdc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
    9c46:	4b55      	ldr	r3, [pc, #340]	; (9d9c <HAL_RCC_GetSysClockFreq+0x1a4>)
    9c48:	685b      	ldr	r3, [r3, #4]
    9c4a:	099b      	lsrs	r3, r3, #6
    9c4c:	f04f 0400 	mov.w	r4, #0
    9c50:	f240 11ff 	movw	r1, #511	; 0x1ff
    9c54:	f04f 0200 	mov.w	r2, #0
    9c58:	ea03 0501 	and.w	r5, r3, r1
    9c5c:	ea04 0602 	and.w	r6, r4, r2
    9c60:	4629      	mov	r1, r5
    9c62:	4632      	mov	r2, r6
    9c64:	f04f 0300 	mov.w	r3, #0
    9c68:	f04f 0400 	mov.w	r4, #0
    9c6c:	0154      	lsls	r4, r2, #5
    9c6e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
    9c72:	014b      	lsls	r3, r1, #5
    9c74:	4619      	mov	r1, r3
    9c76:	4622      	mov	r2, r4
    9c78:	1b49      	subs	r1, r1, r5
    9c7a:	eb62 0206 	sbc.w	r2, r2, r6
    9c7e:	f04f 0300 	mov.w	r3, #0
    9c82:	f04f 0400 	mov.w	r4, #0
    9c86:	0194      	lsls	r4, r2, #6
    9c88:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
    9c8c:	018b      	lsls	r3, r1, #6
    9c8e:	1a5b      	subs	r3, r3, r1
    9c90:	eb64 0402 	sbc.w	r4, r4, r2
    9c94:	f04f 0100 	mov.w	r1, #0
    9c98:	f04f 0200 	mov.w	r2, #0
    9c9c:	00e2      	lsls	r2, r4, #3
    9c9e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    9ca2:	00d9      	lsls	r1, r3, #3
    9ca4:	460b      	mov	r3, r1
    9ca6:	4614      	mov	r4, r2
    9ca8:	195b      	adds	r3, r3, r5
    9caa:	eb44 0406 	adc.w	r4, r4, r6
    9cae:	f04f 0100 	mov.w	r1, #0
    9cb2:	f04f 0200 	mov.w	r2, #0
    9cb6:	0262      	lsls	r2, r4, #9
    9cb8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
    9cbc:	0259      	lsls	r1, r3, #9
    9cbe:	460b      	mov	r3, r1
    9cc0:	4614      	mov	r4, r2
    9cc2:	4618      	mov	r0, r3
    9cc4:	4621      	mov	r1, r4
    9cc6:	687b      	ldr	r3, [r7, #4]
    9cc8:	f04f 0400 	mov.w	r4, #0
    9ccc:	461a      	mov	r2, r3
    9cce:	4623      	mov	r3, r4
    9cd0:	f003 f8a0 	bl	ce14 <__aeabi_uldivmod>
    9cd4:	4603      	mov	r3, r0
    9cd6:	460c      	mov	r4, r1
    9cd8:	60fb      	str	r3, [r7, #12]
    9cda:	e049      	b.n	9d70 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
    9cdc:	4b2f      	ldr	r3, [pc, #188]	; (9d9c <HAL_RCC_GetSysClockFreq+0x1a4>)
    9cde:	685b      	ldr	r3, [r3, #4]
    9ce0:	099b      	lsrs	r3, r3, #6
    9ce2:	f04f 0400 	mov.w	r4, #0
    9ce6:	f240 11ff 	movw	r1, #511	; 0x1ff
    9cea:	f04f 0200 	mov.w	r2, #0
    9cee:	ea03 0501 	and.w	r5, r3, r1
    9cf2:	ea04 0602 	and.w	r6, r4, r2
    9cf6:	4629      	mov	r1, r5
    9cf8:	4632      	mov	r2, r6
    9cfa:	f04f 0300 	mov.w	r3, #0
    9cfe:	f04f 0400 	mov.w	r4, #0
    9d02:	0154      	lsls	r4, r2, #5
    9d04:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
    9d08:	014b      	lsls	r3, r1, #5
    9d0a:	4619      	mov	r1, r3
    9d0c:	4622      	mov	r2, r4
    9d0e:	1b49      	subs	r1, r1, r5
    9d10:	eb62 0206 	sbc.w	r2, r2, r6
    9d14:	f04f 0300 	mov.w	r3, #0
    9d18:	f04f 0400 	mov.w	r4, #0
    9d1c:	0194      	lsls	r4, r2, #6
    9d1e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
    9d22:	018b      	lsls	r3, r1, #6
    9d24:	1a5b      	subs	r3, r3, r1
    9d26:	eb64 0402 	sbc.w	r4, r4, r2
    9d2a:	f04f 0100 	mov.w	r1, #0
    9d2e:	f04f 0200 	mov.w	r2, #0
    9d32:	00e2      	lsls	r2, r4, #3
    9d34:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    9d38:	00d9      	lsls	r1, r3, #3
    9d3a:	460b      	mov	r3, r1
    9d3c:	4614      	mov	r4, r2
    9d3e:	195b      	adds	r3, r3, r5
    9d40:	eb44 0406 	adc.w	r4, r4, r6
    9d44:	f04f 0100 	mov.w	r1, #0
    9d48:	f04f 0200 	mov.w	r2, #0
    9d4c:	02a2      	lsls	r2, r4, #10
    9d4e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
    9d52:	0299      	lsls	r1, r3, #10
    9d54:	460b      	mov	r3, r1
    9d56:	4614      	mov	r4, r2
    9d58:	4618      	mov	r0, r3
    9d5a:	4621      	mov	r1, r4
    9d5c:	687b      	ldr	r3, [r7, #4]
    9d5e:	f04f 0400 	mov.w	r4, #0
    9d62:	461a      	mov	r2, r3
    9d64:	4623      	mov	r3, r4
    9d66:	f003 f855 	bl	ce14 <__aeabi_uldivmod>
    9d6a:	4603      	mov	r3, r0
    9d6c:	460c      	mov	r4, r1
    9d6e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
    9d70:	4b0a      	ldr	r3, [pc, #40]	; (9d9c <HAL_RCC_GetSysClockFreq+0x1a4>)
    9d72:	685b      	ldr	r3, [r3, #4]
    9d74:	0c1b      	lsrs	r3, r3, #16
    9d76:	f003 0303 	and.w	r3, r3, #3
    9d7a:	3301      	adds	r3, #1
    9d7c:	005b      	lsls	r3, r3, #1
    9d7e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
    9d80:	68fa      	ldr	r2, [r7, #12]
    9d82:	683b      	ldr	r3, [r7, #0]
    9d84:	fbb2 f3f3 	udiv	r3, r2, r3
    9d88:	60bb      	str	r3, [r7, #8]
      break;
    9d8a:	e002      	b.n	9d92 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
    9d8c:	4b04      	ldr	r3, [pc, #16]	; (9da0 <HAL_RCC_GetSysClockFreq+0x1a8>)
    9d8e:	60bb      	str	r3, [r7, #8]
      break;
    9d90:	bf00      	nop
    }
  }
  return sysclockfreq;
    9d92:	68bb      	ldr	r3, [r7, #8]
}
    9d94:	4618      	mov	r0, r3
    9d96:	3714      	adds	r7, #20
    9d98:	46bd      	mov	sp, r7
    9d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9d9c:	40023800 	.word	0x40023800
    9da0:	00f42400 	.word	0x00f42400
    9da4:	007a1200 	.word	0x007a1200

00009da8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
    9da8:	b480      	push	{r7}
    9daa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
    9dac:	4b03      	ldr	r3, [pc, #12]	; (9dbc <HAL_RCC_GetHCLKFreq+0x14>)
    9dae:	681b      	ldr	r3, [r3, #0]
}
    9db0:	4618      	mov	r0, r3
    9db2:	46bd      	mov	sp, r7
    9db4:	f85d 7b04 	ldr.w	r7, [sp], #4
    9db8:	4770      	bx	lr
    9dba:	bf00      	nop
    9dbc:	0001d184 	.word	0x0001d184

00009dc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
    9dc0:	b580      	push	{r7, lr}
    9dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
    9dc4:	f7ff fff0 	bl	9da8 <HAL_RCC_GetHCLKFreq>
    9dc8:	4601      	mov	r1, r0
    9dca:	4b05      	ldr	r3, [pc, #20]	; (9de0 <HAL_RCC_GetPCLK1Freq+0x20>)
    9dcc:	689b      	ldr	r3, [r3, #8]
    9dce:	0a9b      	lsrs	r3, r3, #10
    9dd0:	f003 0307 	and.w	r3, r3, #7
    9dd4:	4a03      	ldr	r2, [pc, #12]	; (9de4 <HAL_RCC_GetPCLK1Freq+0x24>)
    9dd6:	5cd3      	ldrb	r3, [r2, r3]
    9dd8:	fa21 f303 	lsr.w	r3, r1, r3
}
    9ddc:	4618      	mov	r0, r3
    9dde:	bd80      	pop	{r7, pc}
    9de0:	40023800 	.word	0x40023800
    9de4:	0000d144 	.word	0x0000d144

00009de8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
    9de8:	b580      	push	{r7, lr}
    9dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
    9dec:	f7ff ffdc 	bl	9da8 <HAL_RCC_GetHCLKFreq>
    9df0:	4601      	mov	r1, r0
    9df2:	4b05      	ldr	r3, [pc, #20]	; (9e08 <HAL_RCC_GetPCLK2Freq+0x20>)
    9df4:	689b      	ldr	r3, [r3, #8]
    9df6:	0b5b      	lsrs	r3, r3, #13
    9df8:	f003 0307 	and.w	r3, r3, #7
    9dfc:	4a03      	ldr	r2, [pc, #12]	; (9e0c <HAL_RCC_GetPCLK2Freq+0x24>)
    9dfe:	5cd3      	ldrb	r3, [r2, r3]
    9e00:	fa21 f303 	lsr.w	r3, r1, r3
}
    9e04:	4618      	mov	r0, r3
    9e06:	bd80      	pop	{r7, pc}
    9e08:	40023800 	.word	0x40023800
    9e0c:	0000d144 	.word	0x0000d144

00009e10 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
    9e10:	b480      	push	{r7}
    9e12:	b083      	sub	sp, #12
    9e14:	af00      	add	r7, sp, #0
    9e16:	6078      	str	r0, [r7, #4]
    9e18:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    9e1a:	687b      	ldr	r3, [r7, #4]
    9e1c:	220f      	movs	r2, #15
    9e1e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
    9e20:	4b12      	ldr	r3, [pc, #72]	; (9e6c <HAL_RCC_GetClockConfig+0x5c>)
    9e22:	689b      	ldr	r3, [r3, #8]
    9e24:	f003 0203 	and.w	r2, r3, #3
    9e28:	687b      	ldr	r3, [r7, #4]
    9e2a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
    9e2c:	4b0f      	ldr	r3, [pc, #60]	; (9e6c <HAL_RCC_GetClockConfig+0x5c>)
    9e2e:	689b      	ldr	r3, [r3, #8]
    9e30:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    9e34:	687b      	ldr	r3, [r7, #4]
    9e36:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
    9e38:	4b0c      	ldr	r3, [pc, #48]	; (9e6c <HAL_RCC_GetClockConfig+0x5c>)
    9e3a:	689b      	ldr	r3, [r3, #8]
    9e3c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
    9e40:	687b      	ldr	r3, [r7, #4]
    9e42:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
    9e44:	4b09      	ldr	r3, [pc, #36]	; (9e6c <HAL_RCC_GetClockConfig+0x5c>)
    9e46:	689b      	ldr	r3, [r3, #8]
    9e48:	08db      	lsrs	r3, r3, #3
    9e4a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
    9e4e:	687b      	ldr	r3, [r7, #4]
    9e50:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
    9e52:	4b07      	ldr	r3, [pc, #28]	; (9e70 <HAL_RCC_GetClockConfig+0x60>)
    9e54:	681b      	ldr	r3, [r3, #0]
    9e56:	f003 020f 	and.w	r2, r3, #15
    9e5a:	683b      	ldr	r3, [r7, #0]
    9e5c:	601a      	str	r2, [r3, #0]
}
    9e5e:	bf00      	nop
    9e60:	370c      	adds	r7, #12
    9e62:	46bd      	mov	sp, r7
    9e64:	f85d 7b04 	ldr.w	r7, [sp], #4
    9e68:	4770      	bx	lr
    9e6a:	bf00      	nop
    9e6c:	40023800 	.word	0x40023800
    9e70:	40023c00 	.word	0x40023c00

00009e74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
    9e74:	b580      	push	{r7, lr}
    9e76:	b082      	sub	sp, #8
    9e78:	af00      	add	r7, sp, #0
    9e7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
    9e7c:	687b      	ldr	r3, [r7, #4]
    9e7e:	2b00      	cmp	r3, #0
    9e80:	d101      	bne.n	9e86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
    9e82:	2301      	movs	r3, #1
    9e84:	e01d      	b.n	9ec2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
    9e86:	687b      	ldr	r3, [r7, #4]
    9e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    9e8c:	b2db      	uxtb	r3, r3
    9e8e:	2b00      	cmp	r3, #0
    9e90:	d106      	bne.n	9ea0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
    9e92:	687b      	ldr	r3, [r7, #4]
    9e94:	2200      	movs	r2, #0
    9e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
    9e9a:	6878      	ldr	r0, [r7, #4]
    9e9c:	f000 f815 	bl	9eca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
    9ea0:	687b      	ldr	r3, [r7, #4]
    9ea2:	2202      	movs	r2, #2
    9ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
    9ea8:	687b      	ldr	r3, [r7, #4]
    9eaa:	681a      	ldr	r2, [r3, #0]
    9eac:	687b      	ldr	r3, [r7, #4]
    9eae:	3304      	adds	r3, #4
    9eb0:	4619      	mov	r1, r3
    9eb2:	4610      	mov	r0, r2
    9eb4:	f000 f838 	bl	9f28 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
    9eb8:	687b      	ldr	r3, [r7, #4]
    9eba:	2201      	movs	r2, #1
    9ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
    9ec0:	2300      	movs	r3, #0
}
    9ec2:	4618      	mov	r0, r3
    9ec4:	3708      	adds	r7, #8
    9ec6:	46bd      	mov	sp, r7
    9ec8:	bd80      	pop	{r7, pc}

00009eca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
    9eca:	b480      	push	{r7}
    9ecc:	b083      	sub	sp, #12
    9ece:	af00      	add	r7, sp, #0
    9ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
    9ed2:	bf00      	nop
    9ed4:	370c      	adds	r7, #12
    9ed6:	46bd      	mov	sp, r7
    9ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
    9edc:	4770      	bx	lr

00009ede <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
    9ede:	b480      	push	{r7}
    9ee0:	b085      	sub	sp, #20
    9ee2:	af00      	add	r7, sp, #0
    9ee4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
    9ee6:	687b      	ldr	r3, [r7, #4]
    9ee8:	681b      	ldr	r3, [r3, #0]
    9eea:	68da      	ldr	r2, [r3, #12]
    9eec:	687b      	ldr	r3, [r7, #4]
    9eee:	681b      	ldr	r3, [r3, #0]
    9ef0:	f042 0201 	orr.w	r2, r2, #1
    9ef4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
    9ef6:	687b      	ldr	r3, [r7, #4]
    9ef8:	681b      	ldr	r3, [r3, #0]
    9efa:	689b      	ldr	r3, [r3, #8]
    9efc:	f003 0307 	and.w	r3, r3, #7
    9f00:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
    9f02:	68fb      	ldr	r3, [r7, #12]
    9f04:	2b06      	cmp	r3, #6
    9f06:	d007      	beq.n	9f18 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
    9f08:	687b      	ldr	r3, [r7, #4]
    9f0a:	681b      	ldr	r3, [r3, #0]
    9f0c:	681a      	ldr	r2, [r3, #0]
    9f0e:	687b      	ldr	r3, [r7, #4]
    9f10:	681b      	ldr	r3, [r3, #0]
    9f12:	f042 0201 	orr.w	r2, r2, #1
    9f16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
    9f18:	2300      	movs	r3, #0
}
    9f1a:	4618      	mov	r0, r3
    9f1c:	3714      	adds	r7, #20
    9f1e:	46bd      	mov	sp, r7
    9f20:	f85d 7b04 	ldr.w	r7, [sp], #4
    9f24:	4770      	bx	lr
	...

00009f28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
    9f28:	b480      	push	{r7}
    9f2a:	b085      	sub	sp, #20
    9f2c:	af00      	add	r7, sp, #0
    9f2e:	6078      	str	r0, [r7, #4]
    9f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
    9f32:	687b      	ldr	r3, [r7, #4]
    9f34:	681b      	ldr	r3, [r3, #0]
    9f36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
    9f38:	687b      	ldr	r3, [r7, #4]
    9f3a:	4a34      	ldr	r2, [pc, #208]	; (a00c <TIM_Base_SetConfig+0xe4>)
    9f3c:	4293      	cmp	r3, r2
    9f3e:	d00f      	beq.n	9f60 <TIM_Base_SetConfig+0x38>
    9f40:	687b      	ldr	r3, [r7, #4]
    9f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    9f46:	d00b      	beq.n	9f60 <TIM_Base_SetConfig+0x38>
    9f48:	687b      	ldr	r3, [r7, #4]
    9f4a:	4a31      	ldr	r2, [pc, #196]	; (a010 <TIM_Base_SetConfig+0xe8>)
    9f4c:	4293      	cmp	r3, r2
    9f4e:	d007      	beq.n	9f60 <TIM_Base_SetConfig+0x38>
    9f50:	687b      	ldr	r3, [r7, #4]
    9f52:	4a30      	ldr	r2, [pc, #192]	; (a014 <TIM_Base_SetConfig+0xec>)
    9f54:	4293      	cmp	r3, r2
    9f56:	d003      	beq.n	9f60 <TIM_Base_SetConfig+0x38>
    9f58:	687b      	ldr	r3, [r7, #4]
    9f5a:	4a2f      	ldr	r2, [pc, #188]	; (a018 <TIM_Base_SetConfig+0xf0>)
    9f5c:	4293      	cmp	r3, r2
    9f5e:	d108      	bne.n	9f72 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    9f60:	68fb      	ldr	r3, [r7, #12]
    9f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    9f66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
    9f68:	683b      	ldr	r3, [r7, #0]
    9f6a:	685b      	ldr	r3, [r3, #4]
    9f6c:	68fa      	ldr	r2, [r7, #12]
    9f6e:	4313      	orrs	r3, r2
    9f70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
    9f72:	687b      	ldr	r3, [r7, #4]
    9f74:	4a25      	ldr	r2, [pc, #148]	; (a00c <TIM_Base_SetConfig+0xe4>)
    9f76:	4293      	cmp	r3, r2
    9f78:	d01b      	beq.n	9fb2 <TIM_Base_SetConfig+0x8a>
    9f7a:	687b      	ldr	r3, [r7, #4]
    9f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    9f80:	d017      	beq.n	9fb2 <TIM_Base_SetConfig+0x8a>
    9f82:	687b      	ldr	r3, [r7, #4]
    9f84:	4a22      	ldr	r2, [pc, #136]	; (a010 <TIM_Base_SetConfig+0xe8>)
    9f86:	4293      	cmp	r3, r2
    9f88:	d013      	beq.n	9fb2 <TIM_Base_SetConfig+0x8a>
    9f8a:	687b      	ldr	r3, [r7, #4]
    9f8c:	4a21      	ldr	r2, [pc, #132]	; (a014 <TIM_Base_SetConfig+0xec>)
    9f8e:	4293      	cmp	r3, r2
    9f90:	d00f      	beq.n	9fb2 <TIM_Base_SetConfig+0x8a>
    9f92:	687b      	ldr	r3, [r7, #4]
    9f94:	4a20      	ldr	r2, [pc, #128]	; (a018 <TIM_Base_SetConfig+0xf0>)
    9f96:	4293      	cmp	r3, r2
    9f98:	d00b      	beq.n	9fb2 <TIM_Base_SetConfig+0x8a>
    9f9a:	687b      	ldr	r3, [r7, #4]
    9f9c:	4a1f      	ldr	r2, [pc, #124]	; (a01c <TIM_Base_SetConfig+0xf4>)
    9f9e:	4293      	cmp	r3, r2
    9fa0:	d007      	beq.n	9fb2 <TIM_Base_SetConfig+0x8a>
    9fa2:	687b      	ldr	r3, [r7, #4]
    9fa4:	4a1e      	ldr	r2, [pc, #120]	; (a020 <TIM_Base_SetConfig+0xf8>)
    9fa6:	4293      	cmp	r3, r2
    9fa8:	d003      	beq.n	9fb2 <TIM_Base_SetConfig+0x8a>
    9faa:	687b      	ldr	r3, [r7, #4]
    9fac:	4a1d      	ldr	r2, [pc, #116]	; (a024 <TIM_Base_SetConfig+0xfc>)
    9fae:	4293      	cmp	r3, r2
    9fb0:	d108      	bne.n	9fc4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    9fb2:	68fb      	ldr	r3, [r7, #12]
    9fb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    9fb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
    9fba:	683b      	ldr	r3, [r7, #0]
    9fbc:	68db      	ldr	r3, [r3, #12]
    9fbe:	68fa      	ldr	r2, [r7, #12]
    9fc0:	4313      	orrs	r3, r2
    9fc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
    9fc4:	68fb      	ldr	r3, [r7, #12]
    9fc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    9fca:	683b      	ldr	r3, [r7, #0]
    9fcc:	695b      	ldr	r3, [r3, #20]
    9fce:	4313      	orrs	r3, r2
    9fd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
    9fd2:	687b      	ldr	r3, [r7, #4]
    9fd4:	68fa      	ldr	r2, [r7, #12]
    9fd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
    9fd8:	683b      	ldr	r3, [r7, #0]
    9fda:	689a      	ldr	r2, [r3, #8]
    9fdc:	687b      	ldr	r3, [r7, #4]
    9fde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
    9fe0:	683b      	ldr	r3, [r7, #0]
    9fe2:	681a      	ldr	r2, [r3, #0]
    9fe4:	687b      	ldr	r3, [r7, #4]
    9fe6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
    9fe8:	687b      	ldr	r3, [r7, #4]
    9fea:	4a08      	ldr	r2, [pc, #32]	; (a00c <TIM_Base_SetConfig+0xe4>)
    9fec:	4293      	cmp	r3, r2
    9fee:	d103      	bne.n	9ff8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
    9ff0:	683b      	ldr	r3, [r7, #0]
    9ff2:	691a      	ldr	r2, [r3, #16]
    9ff4:	687b      	ldr	r3, [r7, #4]
    9ff6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
    9ff8:	687b      	ldr	r3, [r7, #4]
    9ffa:	2201      	movs	r2, #1
    9ffc:	615a      	str	r2, [r3, #20]
}
    9ffe:	bf00      	nop
    a000:	3714      	adds	r7, #20
    a002:	46bd      	mov	sp, r7
    a004:	f85d 7b04 	ldr.w	r7, [sp], #4
    a008:	4770      	bx	lr
    a00a:	bf00      	nop
    a00c:	40010000 	.word	0x40010000
    a010:	40000400 	.word	0x40000400
    a014:	40000800 	.word	0x40000800
    a018:	40000c00 	.word	0x40000c00
    a01c:	40014000 	.word	0x40014000
    a020:	40014400 	.word	0x40014400
    a024:	40014800 	.word	0x40014800

0000a028 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
    a028:	b580      	push	{r7, lr}
    a02a:	b082      	sub	sp, #8
    a02c:	af00      	add	r7, sp, #0
    a02e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
    a030:	687b      	ldr	r3, [r7, #4]
    a032:	2b00      	cmp	r3, #0
    a034:	d101      	bne.n	a03a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
    a036:	2301      	movs	r3, #1
    a038:	e03f      	b.n	a0ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
    a03a:	687b      	ldr	r3, [r7, #4]
    a03c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
    a040:	b2db      	uxtb	r3, r3
    a042:	2b00      	cmp	r3, #0
    a044:	d106      	bne.n	a054 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
    a046:	687b      	ldr	r3, [r7, #4]
    a048:	2200      	movs	r2, #0
    a04a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
    a04e:	6878      	ldr	r0, [r7, #4]
    a050:	f7fe faf0 	bl	8634 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
    a054:	687b      	ldr	r3, [r7, #4]
    a056:	2224      	movs	r2, #36	; 0x24
    a058:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
    a05c:	687b      	ldr	r3, [r7, #4]
    a05e:	681b      	ldr	r3, [r3, #0]
    a060:	68da      	ldr	r2, [r3, #12]
    a062:	687b      	ldr	r3, [r7, #4]
    a064:	681b      	ldr	r3, [r3, #0]
    a066:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
    a06a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
    a06c:	6878      	ldr	r0, [r7, #4]
    a06e:	f000 f829 	bl	a0c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
    a072:	687b      	ldr	r3, [r7, #4]
    a074:	681b      	ldr	r3, [r3, #0]
    a076:	691a      	ldr	r2, [r3, #16]
    a078:	687b      	ldr	r3, [r7, #4]
    a07a:	681b      	ldr	r3, [r3, #0]
    a07c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
    a080:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
    a082:	687b      	ldr	r3, [r7, #4]
    a084:	681b      	ldr	r3, [r3, #0]
    a086:	695a      	ldr	r2, [r3, #20]
    a088:	687b      	ldr	r3, [r7, #4]
    a08a:	681b      	ldr	r3, [r3, #0]
    a08c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
    a090:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
    a092:	687b      	ldr	r3, [r7, #4]
    a094:	681b      	ldr	r3, [r3, #0]
    a096:	68da      	ldr	r2, [r3, #12]
    a098:	687b      	ldr	r3, [r7, #4]
    a09a:	681b      	ldr	r3, [r3, #0]
    a09c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    a0a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
    a0a2:	687b      	ldr	r3, [r7, #4]
    a0a4:	2200      	movs	r2, #0
    a0a6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
    a0a8:	687b      	ldr	r3, [r7, #4]
    a0aa:	2220      	movs	r2, #32
    a0ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
    a0b0:	687b      	ldr	r3, [r7, #4]
    a0b2:	2220      	movs	r2, #32
    a0b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
    a0b8:	2300      	movs	r3, #0
}
    a0ba:	4618      	mov	r0, r3
    a0bc:	3708      	adds	r7, #8
    a0be:	46bd      	mov	sp, r7
    a0c0:	bd80      	pop	{r7, pc}
	...

0000a0c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
    a0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a0c8:	b085      	sub	sp, #20
    a0ca:	af00      	add	r7, sp, #0
    a0cc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
    a0ce:	687b      	ldr	r3, [r7, #4]
    a0d0:	681b      	ldr	r3, [r3, #0]
    a0d2:	691b      	ldr	r3, [r3, #16]
    a0d4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
    a0d8:	687b      	ldr	r3, [r7, #4]
    a0da:	68da      	ldr	r2, [r3, #12]
    a0dc:	687b      	ldr	r3, [r7, #4]
    a0de:	681b      	ldr	r3, [r3, #0]
    a0e0:	430a      	orrs	r2, r1
    a0e2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
    a0e4:	687b      	ldr	r3, [r7, #4]
    a0e6:	689a      	ldr	r2, [r3, #8]
    a0e8:	687b      	ldr	r3, [r7, #4]
    a0ea:	691b      	ldr	r3, [r3, #16]
    a0ec:	431a      	orrs	r2, r3
    a0ee:	687b      	ldr	r3, [r7, #4]
    a0f0:	695b      	ldr	r3, [r3, #20]
    a0f2:	431a      	orrs	r2, r3
    a0f4:	687b      	ldr	r3, [r7, #4]
    a0f6:	69db      	ldr	r3, [r3, #28]
    a0f8:	4313      	orrs	r3, r2
    a0fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
    a0fc:	687b      	ldr	r3, [r7, #4]
    a0fe:	681b      	ldr	r3, [r3, #0]
    a100:	68db      	ldr	r3, [r3, #12]
    a102:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
    a106:	f023 030c 	bic.w	r3, r3, #12
    a10a:	687a      	ldr	r2, [r7, #4]
    a10c:	6812      	ldr	r2, [r2, #0]
    a10e:	68f9      	ldr	r1, [r7, #12]
    a110:	430b      	orrs	r3, r1
    a112:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
    a114:	687b      	ldr	r3, [r7, #4]
    a116:	681b      	ldr	r3, [r3, #0]
    a118:	695b      	ldr	r3, [r3, #20]
    a11a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
    a11e:	687b      	ldr	r3, [r7, #4]
    a120:	699a      	ldr	r2, [r3, #24]
    a122:	687b      	ldr	r3, [r7, #4]
    a124:	681b      	ldr	r3, [r3, #0]
    a126:	430a      	orrs	r2, r1
    a128:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
    a12a:	687b      	ldr	r3, [r7, #4]
    a12c:	69db      	ldr	r3, [r3, #28]
    a12e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    a132:	f040 818b 	bne.w	a44c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
    a136:	687b      	ldr	r3, [r7, #4]
    a138:	681b      	ldr	r3, [r3, #0]
    a13a:	4ac1      	ldr	r2, [pc, #772]	; (a440 <UART_SetConfig+0x37c>)
    a13c:	4293      	cmp	r3, r2
    a13e:	d005      	beq.n	a14c <UART_SetConfig+0x88>
    a140:	687b      	ldr	r3, [r7, #4]
    a142:	681b      	ldr	r3, [r3, #0]
    a144:	4abf      	ldr	r2, [pc, #764]	; (a444 <UART_SetConfig+0x380>)
    a146:	4293      	cmp	r3, r2
    a148:	f040 80bd 	bne.w	a2c6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    a14c:	f7ff fe4c 	bl	9de8 <HAL_RCC_GetPCLK2Freq>
    a150:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    a152:	68bb      	ldr	r3, [r7, #8]
    a154:	461d      	mov	r5, r3
    a156:	f04f 0600 	mov.w	r6, #0
    a15a:	46a8      	mov	r8, r5
    a15c:	46b1      	mov	r9, r6
    a15e:	eb18 0308 	adds.w	r3, r8, r8
    a162:	eb49 0409 	adc.w	r4, r9, r9
    a166:	4698      	mov	r8, r3
    a168:	46a1      	mov	r9, r4
    a16a:	eb18 0805 	adds.w	r8, r8, r5
    a16e:	eb49 0906 	adc.w	r9, r9, r6
    a172:	f04f 0100 	mov.w	r1, #0
    a176:	f04f 0200 	mov.w	r2, #0
    a17a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
    a17e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
    a182:	ea4f 01c8 	mov.w	r1, r8, lsl #3
    a186:	4688      	mov	r8, r1
    a188:	4691      	mov	r9, r2
    a18a:	eb18 0005 	adds.w	r0, r8, r5
    a18e:	eb49 0106 	adc.w	r1, r9, r6
    a192:	687b      	ldr	r3, [r7, #4]
    a194:	685b      	ldr	r3, [r3, #4]
    a196:	461d      	mov	r5, r3
    a198:	f04f 0600 	mov.w	r6, #0
    a19c:	196b      	adds	r3, r5, r5
    a19e:	eb46 0406 	adc.w	r4, r6, r6
    a1a2:	461a      	mov	r2, r3
    a1a4:	4623      	mov	r3, r4
    a1a6:	f002 fe35 	bl	ce14 <__aeabi_uldivmod>
    a1aa:	4603      	mov	r3, r0
    a1ac:	460c      	mov	r4, r1
    a1ae:	461a      	mov	r2, r3
    a1b0:	4ba5      	ldr	r3, [pc, #660]	; (a448 <UART_SetConfig+0x384>)
    a1b2:	fba3 2302 	umull	r2, r3, r3, r2
    a1b6:	095b      	lsrs	r3, r3, #5
    a1b8:	ea4f 1803 	mov.w	r8, r3, lsl #4
    a1bc:	68bb      	ldr	r3, [r7, #8]
    a1be:	461d      	mov	r5, r3
    a1c0:	f04f 0600 	mov.w	r6, #0
    a1c4:	46a9      	mov	r9, r5
    a1c6:	46b2      	mov	sl, r6
    a1c8:	eb19 0309 	adds.w	r3, r9, r9
    a1cc:	eb4a 040a 	adc.w	r4, sl, sl
    a1d0:	4699      	mov	r9, r3
    a1d2:	46a2      	mov	sl, r4
    a1d4:	eb19 0905 	adds.w	r9, r9, r5
    a1d8:	eb4a 0a06 	adc.w	sl, sl, r6
    a1dc:	f04f 0100 	mov.w	r1, #0
    a1e0:	f04f 0200 	mov.w	r2, #0
    a1e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
    a1e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
    a1ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
    a1f0:	4689      	mov	r9, r1
    a1f2:	4692      	mov	sl, r2
    a1f4:	eb19 0005 	adds.w	r0, r9, r5
    a1f8:	eb4a 0106 	adc.w	r1, sl, r6
    a1fc:	687b      	ldr	r3, [r7, #4]
    a1fe:	685b      	ldr	r3, [r3, #4]
    a200:	461d      	mov	r5, r3
    a202:	f04f 0600 	mov.w	r6, #0
    a206:	196b      	adds	r3, r5, r5
    a208:	eb46 0406 	adc.w	r4, r6, r6
    a20c:	461a      	mov	r2, r3
    a20e:	4623      	mov	r3, r4
    a210:	f002 fe00 	bl	ce14 <__aeabi_uldivmod>
    a214:	4603      	mov	r3, r0
    a216:	460c      	mov	r4, r1
    a218:	461a      	mov	r2, r3
    a21a:	4b8b      	ldr	r3, [pc, #556]	; (a448 <UART_SetConfig+0x384>)
    a21c:	fba3 1302 	umull	r1, r3, r3, r2
    a220:	095b      	lsrs	r3, r3, #5
    a222:	2164      	movs	r1, #100	; 0x64
    a224:	fb01 f303 	mul.w	r3, r1, r3
    a228:	1ad3      	subs	r3, r2, r3
    a22a:	00db      	lsls	r3, r3, #3
    a22c:	3332      	adds	r3, #50	; 0x32
    a22e:	4a86      	ldr	r2, [pc, #536]	; (a448 <UART_SetConfig+0x384>)
    a230:	fba2 2303 	umull	r2, r3, r2, r3
    a234:	095b      	lsrs	r3, r3, #5
    a236:	005b      	lsls	r3, r3, #1
    a238:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
    a23c:	4498      	add	r8, r3
    a23e:	68bb      	ldr	r3, [r7, #8]
    a240:	461d      	mov	r5, r3
    a242:	f04f 0600 	mov.w	r6, #0
    a246:	46a9      	mov	r9, r5
    a248:	46b2      	mov	sl, r6
    a24a:	eb19 0309 	adds.w	r3, r9, r9
    a24e:	eb4a 040a 	adc.w	r4, sl, sl
    a252:	4699      	mov	r9, r3
    a254:	46a2      	mov	sl, r4
    a256:	eb19 0905 	adds.w	r9, r9, r5
    a25a:	eb4a 0a06 	adc.w	sl, sl, r6
    a25e:	f04f 0100 	mov.w	r1, #0
    a262:	f04f 0200 	mov.w	r2, #0
    a266:	ea4f 02ca 	mov.w	r2, sl, lsl #3
    a26a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
    a26e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
    a272:	4689      	mov	r9, r1
    a274:	4692      	mov	sl, r2
    a276:	eb19 0005 	adds.w	r0, r9, r5
    a27a:	eb4a 0106 	adc.w	r1, sl, r6
    a27e:	687b      	ldr	r3, [r7, #4]
    a280:	685b      	ldr	r3, [r3, #4]
    a282:	461d      	mov	r5, r3
    a284:	f04f 0600 	mov.w	r6, #0
    a288:	196b      	adds	r3, r5, r5
    a28a:	eb46 0406 	adc.w	r4, r6, r6
    a28e:	461a      	mov	r2, r3
    a290:	4623      	mov	r3, r4
    a292:	f002 fdbf 	bl	ce14 <__aeabi_uldivmod>
    a296:	4603      	mov	r3, r0
    a298:	460c      	mov	r4, r1
    a29a:	461a      	mov	r2, r3
    a29c:	4b6a      	ldr	r3, [pc, #424]	; (a448 <UART_SetConfig+0x384>)
    a29e:	fba3 1302 	umull	r1, r3, r3, r2
    a2a2:	095b      	lsrs	r3, r3, #5
    a2a4:	2164      	movs	r1, #100	; 0x64
    a2a6:	fb01 f303 	mul.w	r3, r1, r3
    a2aa:	1ad3      	subs	r3, r2, r3
    a2ac:	00db      	lsls	r3, r3, #3
    a2ae:	3332      	adds	r3, #50	; 0x32
    a2b0:	4a65      	ldr	r2, [pc, #404]	; (a448 <UART_SetConfig+0x384>)
    a2b2:	fba2 2303 	umull	r2, r3, r2, r3
    a2b6:	095b      	lsrs	r3, r3, #5
    a2b8:	f003 0207 	and.w	r2, r3, #7
    a2bc:	687b      	ldr	r3, [r7, #4]
    a2be:	681b      	ldr	r3, [r3, #0]
    a2c0:	4442      	add	r2, r8
    a2c2:	609a      	str	r2, [r3, #8]
    a2c4:	e26f      	b.n	a7a6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    a2c6:	f7ff fd7b 	bl	9dc0 <HAL_RCC_GetPCLK1Freq>
    a2ca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    a2cc:	68bb      	ldr	r3, [r7, #8]
    a2ce:	461d      	mov	r5, r3
    a2d0:	f04f 0600 	mov.w	r6, #0
    a2d4:	46a8      	mov	r8, r5
    a2d6:	46b1      	mov	r9, r6
    a2d8:	eb18 0308 	adds.w	r3, r8, r8
    a2dc:	eb49 0409 	adc.w	r4, r9, r9
    a2e0:	4698      	mov	r8, r3
    a2e2:	46a1      	mov	r9, r4
    a2e4:	eb18 0805 	adds.w	r8, r8, r5
    a2e8:	eb49 0906 	adc.w	r9, r9, r6
    a2ec:	f04f 0100 	mov.w	r1, #0
    a2f0:	f04f 0200 	mov.w	r2, #0
    a2f4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
    a2f8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
    a2fc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
    a300:	4688      	mov	r8, r1
    a302:	4691      	mov	r9, r2
    a304:	eb18 0005 	adds.w	r0, r8, r5
    a308:	eb49 0106 	adc.w	r1, r9, r6
    a30c:	687b      	ldr	r3, [r7, #4]
    a30e:	685b      	ldr	r3, [r3, #4]
    a310:	461d      	mov	r5, r3
    a312:	f04f 0600 	mov.w	r6, #0
    a316:	196b      	adds	r3, r5, r5
    a318:	eb46 0406 	adc.w	r4, r6, r6
    a31c:	461a      	mov	r2, r3
    a31e:	4623      	mov	r3, r4
    a320:	f002 fd78 	bl	ce14 <__aeabi_uldivmod>
    a324:	4603      	mov	r3, r0
    a326:	460c      	mov	r4, r1
    a328:	461a      	mov	r2, r3
    a32a:	4b47      	ldr	r3, [pc, #284]	; (a448 <UART_SetConfig+0x384>)
    a32c:	fba3 2302 	umull	r2, r3, r3, r2
    a330:	095b      	lsrs	r3, r3, #5
    a332:	ea4f 1803 	mov.w	r8, r3, lsl #4
    a336:	68bb      	ldr	r3, [r7, #8]
    a338:	461d      	mov	r5, r3
    a33a:	f04f 0600 	mov.w	r6, #0
    a33e:	46a9      	mov	r9, r5
    a340:	46b2      	mov	sl, r6
    a342:	eb19 0309 	adds.w	r3, r9, r9
    a346:	eb4a 040a 	adc.w	r4, sl, sl
    a34a:	4699      	mov	r9, r3
    a34c:	46a2      	mov	sl, r4
    a34e:	eb19 0905 	adds.w	r9, r9, r5
    a352:	eb4a 0a06 	adc.w	sl, sl, r6
    a356:	f04f 0100 	mov.w	r1, #0
    a35a:	f04f 0200 	mov.w	r2, #0
    a35e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
    a362:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
    a366:	ea4f 01c9 	mov.w	r1, r9, lsl #3
    a36a:	4689      	mov	r9, r1
    a36c:	4692      	mov	sl, r2
    a36e:	eb19 0005 	adds.w	r0, r9, r5
    a372:	eb4a 0106 	adc.w	r1, sl, r6
    a376:	687b      	ldr	r3, [r7, #4]
    a378:	685b      	ldr	r3, [r3, #4]
    a37a:	461d      	mov	r5, r3
    a37c:	f04f 0600 	mov.w	r6, #0
    a380:	196b      	adds	r3, r5, r5
    a382:	eb46 0406 	adc.w	r4, r6, r6
    a386:	461a      	mov	r2, r3
    a388:	4623      	mov	r3, r4
    a38a:	f002 fd43 	bl	ce14 <__aeabi_uldivmod>
    a38e:	4603      	mov	r3, r0
    a390:	460c      	mov	r4, r1
    a392:	461a      	mov	r2, r3
    a394:	4b2c      	ldr	r3, [pc, #176]	; (a448 <UART_SetConfig+0x384>)
    a396:	fba3 1302 	umull	r1, r3, r3, r2
    a39a:	095b      	lsrs	r3, r3, #5
    a39c:	2164      	movs	r1, #100	; 0x64
    a39e:	fb01 f303 	mul.w	r3, r1, r3
    a3a2:	1ad3      	subs	r3, r2, r3
    a3a4:	00db      	lsls	r3, r3, #3
    a3a6:	3332      	adds	r3, #50	; 0x32
    a3a8:	4a27      	ldr	r2, [pc, #156]	; (a448 <UART_SetConfig+0x384>)
    a3aa:	fba2 2303 	umull	r2, r3, r2, r3
    a3ae:	095b      	lsrs	r3, r3, #5
    a3b0:	005b      	lsls	r3, r3, #1
    a3b2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
    a3b6:	4498      	add	r8, r3
    a3b8:	68bb      	ldr	r3, [r7, #8]
    a3ba:	461d      	mov	r5, r3
    a3bc:	f04f 0600 	mov.w	r6, #0
    a3c0:	46a9      	mov	r9, r5
    a3c2:	46b2      	mov	sl, r6
    a3c4:	eb19 0309 	adds.w	r3, r9, r9
    a3c8:	eb4a 040a 	adc.w	r4, sl, sl
    a3cc:	4699      	mov	r9, r3
    a3ce:	46a2      	mov	sl, r4
    a3d0:	eb19 0905 	adds.w	r9, r9, r5
    a3d4:	eb4a 0a06 	adc.w	sl, sl, r6
    a3d8:	f04f 0100 	mov.w	r1, #0
    a3dc:	f04f 0200 	mov.w	r2, #0
    a3e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
    a3e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
    a3e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
    a3ec:	4689      	mov	r9, r1
    a3ee:	4692      	mov	sl, r2
    a3f0:	eb19 0005 	adds.w	r0, r9, r5
    a3f4:	eb4a 0106 	adc.w	r1, sl, r6
    a3f8:	687b      	ldr	r3, [r7, #4]
    a3fa:	685b      	ldr	r3, [r3, #4]
    a3fc:	461d      	mov	r5, r3
    a3fe:	f04f 0600 	mov.w	r6, #0
    a402:	196b      	adds	r3, r5, r5
    a404:	eb46 0406 	adc.w	r4, r6, r6
    a408:	461a      	mov	r2, r3
    a40a:	4623      	mov	r3, r4
    a40c:	f002 fd02 	bl	ce14 <__aeabi_uldivmod>
    a410:	4603      	mov	r3, r0
    a412:	460c      	mov	r4, r1
    a414:	461a      	mov	r2, r3
    a416:	4b0c      	ldr	r3, [pc, #48]	; (a448 <UART_SetConfig+0x384>)
    a418:	fba3 1302 	umull	r1, r3, r3, r2
    a41c:	095b      	lsrs	r3, r3, #5
    a41e:	2164      	movs	r1, #100	; 0x64
    a420:	fb01 f303 	mul.w	r3, r1, r3
    a424:	1ad3      	subs	r3, r2, r3
    a426:	00db      	lsls	r3, r3, #3
    a428:	3332      	adds	r3, #50	; 0x32
    a42a:	4a07      	ldr	r2, [pc, #28]	; (a448 <UART_SetConfig+0x384>)
    a42c:	fba2 2303 	umull	r2, r3, r2, r3
    a430:	095b      	lsrs	r3, r3, #5
    a432:	f003 0207 	and.w	r2, r3, #7
    a436:	687b      	ldr	r3, [r7, #4]
    a438:	681b      	ldr	r3, [r3, #0]
    a43a:	4442      	add	r2, r8
    a43c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
    a43e:	e1b2      	b.n	a7a6 <UART_SetConfig+0x6e2>
    a440:	40011000 	.word	0x40011000
    a444:	40011400 	.word	0x40011400
    a448:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
    a44c:	687b      	ldr	r3, [r7, #4]
    a44e:	681b      	ldr	r3, [r3, #0]
    a450:	4ad7      	ldr	r2, [pc, #860]	; (a7b0 <UART_SetConfig+0x6ec>)
    a452:	4293      	cmp	r3, r2
    a454:	d005      	beq.n	a462 <UART_SetConfig+0x39e>
    a456:	687b      	ldr	r3, [r7, #4]
    a458:	681b      	ldr	r3, [r3, #0]
    a45a:	4ad6      	ldr	r2, [pc, #856]	; (a7b4 <UART_SetConfig+0x6f0>)
    a45c:	4293      	cmp	r3, r2
    a45e:	f040 80d1 	bne.w	a604 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
    a462:	f7ff fcc1 	bl	9de8 <HAL_RCC_GetPCLK2Freq>
    a466:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    a468:	68bb      	ldr	r3, [r7, #8]
    a46a:	469a      	mov	sl, r3
    a46c:	f04f 0b00 	mov.w	fp, #0
    a470:	46d0      	mov	r8, sl
    a472:	46d9      	mov	r9, fp
    a474:	eb18 0308 	adds.w	r3, r8, r8
    a478:	eb49 0409 	adc.w	r4, r9, r9
    a47c:	4698      	mov	r8, r3
    a47e:	46a1      	mov	r9, r4
    a480:	eb18 080a 	adds.w	r8, r8, sl
    a484:	eb49 090b 	adc.w	r9, r9, fp
    a488:	f04f 0100 	mov.w	r1, #0
    a48c:	f04f 0200 	mov.w	r2, #0
    a490:	ea4f 02c9 	mov.w	r2, r9, lsl #3
    a494:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
    a498:	ea4f 01c8 	mov.w	r1, r8, lsl #3
    a49c:	4688      	mov	r8, r1
    a49e:	4691      	mov	r9, r2
    a4a0:	eb1a 0508 	adds.w	r5, sl, r8
    a4a4:	eb4b 0609 	adc.w	r6, fp, r9
    a4a8:	687b      	ldr	r3, [r7, #4]
    a4aa:	685b      	ldr	r3, [r3, #4]
    a4ac:	4619      	mov	r1, r3
    a4ae:	f04f 0200 	mov.w	r2, #0
    a4b2:	f04f 0300 	mov.w	r3, #0
    a4b6:	f04f 0400 	mov.w	r4, #0
    a4ba:	0094      	lsls	r4, r2, #2
    a4bc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
    a4c0:	008b      	lsls	r3, r1, #2
    a4c2:	461a      	mov	r2, r3
    a4c4:	4623      	mov	r3, r4
    a4c6:	4628      	mov	r0, r5
    a4c8:	4631      	mov	r1, r6
    a4ca:	f002 fca3 	bl	ce14 <__aeabi_uldivmod>
    a4ce:	4603      	mov	r3, r0
    a4d0:	460c      	mov	r4, r1
    a4d2:	461a      	mov	r2, r3
    a4d4:	4bb8      	ldr	r3, [pc, #736]	; (a7b8 <UART_SetConfig+0x6f4>)
    a4d6:	fba3 2302 	umull	r2, r3, r3, r2
    a4da:	095b      	lsrs	r3, r3, #5
    a4dc:	ea4f 1803 	mov.w	r8, r3, lsl #4
    a4e0:	68bb      	ldr	r3, [r7, #8]
    a4e2:	469b      	mov	fp, r3
    a4e4:	f04f 0c00 	mov.w	ip, #0
    a4e8:	46d9      	mov	r9, fp
    a4ea:	46e2      	mov	sl, ip
    a4ec:	eb19 0309 	adds.w	r3, r9, r9
    a4f0:	eb4a 040a 	adc.w	r4, sl, sl
    a4f4:	4699      	mov	r9, r3
    a4f6:	46a2      	mov	sl, r4
    a4f8:	eb19 090b 	adds.w	r9, r9, fp
    a4fc:	eb4a 0a0c 	adc.w	sl, sl, ip
    a500:	f04f 0100 	mov.w	r1, #0
    a504:	f04f 0200 	mov.w	r2, #0
    a508:	ea4f 02ca 	mov.w	r2, sl, lsl #3
    a50c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
    a510:	ea4f 01c9 	mov.w	r1, r9, lsl #3
    a514:	4689      	mov	r9, r1
    a516:	4692      	mov	sl, r2
    a518:	eb1b 0509 	adds.w	r5, fp, r9
    a51c:	eb4c 060a 	adc.w	r6, ip, sl
    a520:	687b      	ldr	r3, [r7, #4]
    a522:	685b      	ldr	r3, [r3, #4]
    a524:	4619      	mov	r1, r3
    a526:	f04f 0200 	mov.w	r2, #0
    a52a:	f04f 0300 	mov.w	r3, #0
    a52e:	f04f 0400 	mov.w	r4, #0
    a532:	0094      	lsls	r4, r2, #2
    a534:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
    a538:	008b      	lsls	r3, r1, #2
    a53a:	461a      	mov	r2, r3
    a53c:	4623      	mov	r3, r4
    a53e:	4628      	mov	r0, r5
    a540:	4631      	mov	r1, r6
    a542:	f002 fc67 	bl	ce14 <__aeabi_uldivmod>
    a546:	4603      	mov	r3, r0
    a548:	460c      	mov	r4, r1
    a54a:	461a      	mov	r2, r3
    a54c:	4b9a      	ldr	r3, [pc, #616]	; (a7b8 <UART_SetConfig+0x6f4>)
    a54e:	fba3 1302 	umull	r1, r3, r3, r2
    a552:	095b      	lsrs	r3, r3, #5
    a554:	2164      	movs	r1, #100	; 0x64
    a556:	fb01 f303 	mul.w	r3, r1, r3
    a55a:	1ad3      	subs	r3, r2, r3
    a55c:	011b      	lsls	r3, r3, #4
    a55e:	3332      	adds	r3, #50	; 0x32
    a560:	4a95      	ldr	r2, [pc, #596]	; (a7b8 <UART_SetConfig+0x6f4>)
    a562:	fba2 2303 	umull	r2, r3, r2, r3
    a566:	095b      	lsrs	r3, r3, #5
    a568:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    a56c:	4498      	add	r8, r3
    a56e:	68bb      	ldr	r3, [r7, #8]
    a570:	469b      	mov	fp, r3
    a572:	f04f 0c00 	mov.w	ip, #0
    a576:	46d9      	mov	r9, fp
    a578:	46e2      	mov	sl, ip
    a57a:	eb19 0309 	adds.w	r3, r9, r9
    a57e:	eb4a 040a 	adc.w	r4, sl, sl
    a582:	4699      	mov	r9, r3
    a584:	46a2      	mov	sl, r4
    a586:	eb19 090b 	adds.w	r9, r9, fp
    a58a:	eb4a 0a0c 	adc.w	sl, sl, ip
    a58e:	f04f 0100 	mov.w	r1, #0
    a592:	f04f 0200 	mov.w	r2, #0
    a596:	ea4f 02ca 	mov.w	r2, sl, lsl #3
    a59a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
    a59e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
    a5a2:	4689      	mov	r9, r1
    a5a4:	4692      	mov	sl, r2
    a5a6:	eb1b 0509 	adds.w	r5, fp, r9
    a5aa:	eb4c 060a 	adc.w	r6, ip, sl
    a5ae:	687b      	ldr	r3, [r7, #4]
    a5b0:	685b      	ldr	r3, [r3, #4]
    a5b2:	4619      	mov	r1, r3
    a5b4:	f04f 0200 	mov.w	r2, #0
    a5b8:	f04f 0300 	mov.w	r3, #0
    a5bc:	f04f 0400 	mov.w	r4, #0
    a5c0:	0094      	lsls	r4, r2, #2
    a5c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
    a5c6:	008b      	lsls	r3, r1, #2
    a5c8:	461a      	mov	r2, r3
    a5ca:	4623      	mov	r3, r4
    a5cc:	4628      	mov	r0, r5
    a5ce:	4631      	mov	r1, r6
    a5d0:	f002 fc20 	bl	ce14 <__aeabi_uldivmod>
    a5d4:	4603      	mov	r3, r0
    a5d6:	460c      	mov	r4, r1
    a5d8:	461a      	mov	r2, r3
    a5da:	4b77      	ldr	r3, [pc, #476]	; (a7b8 <UART_SetConfig+0x6f4>)
    a5dc:	fba3 1302 	umull	r1, r3, r3, r2
    a5e0:	095b      	lsrs	r3, r3, #5
    a5e2:	2164      	movs	r1, #100	; 0x64
    a5e4:	fb01 f303 	mul.w	r3, r1, r3
    a5e8:	1ad3      	subs	r3, r2, r3
    a5ea:	011b      	lsls	r3, r3, #4
    a5ec:	3332      	adds	r3, #50	; 0x32
    a5ee:	4a72      	ldr	r2, [pc, #456]	; (a7b8 <UART_SetConfig+0x6f4>)
    a5f0:	fba2 2303 	umull	r2, r3, r2, r3
    a5f4:	095b      	lsrs	r3, r3, #5
    a5f6:	f003 020f 	and.w	r2, r3, #15
    a5fa:	687b      	ldr	r3, [r7, #4]
    a5fc:	681b      	ldr	r3, [r3, #0]
    a5fe:	4442      	add	r2, r8
    a600:	609a      	str	r2, [r3, #8]
    a602:	e0d0      	b.n	a7a6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
    a604:	f7ff fbdc 	bl	9dc0 <HAL_RCC_GetPCLK1Freq>
    a608:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    a60a:	68bb      	ldr	r3, [r7, #8]
    a60c:	469a      	mov	sl, r3
    a60e:	f04f 0b00 	mov.w	fp, #0
    a612:	46d0      	mov	r8, sl
    a614:	46d9      	mov	r9, fp
    a616:	eb18 0308 	adds.w	r3, r8, r8
    a61a:	eb49 0409 	adc.w	r4, r9, r9
    a61e:	4698      	mov	r8, r3
    a620:	46a1      	mov	r9, r4
    a622:	eb18 080a 	adds.w	r8, r8, sl
    a626:	eb49 090b 	adc.w	r9, r9, fp
    a62a:	f04f 0100 	mov.w	r1, #0
    a62e:	f04f 0200 	mov.w	r2, #0
    a632:	ea4f 02c9 	mov.w	r2, r9, lsl #3
    a636:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
    a63a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
    a63e:	4688      	mov	r8, r1
    a640:	4691      	mov	r9, r2
    a642:	eb1a 0508 	adds.w	r5, sl, r8
    a646:	eb4b 0609 	adc.w	r6, fp, r9
    a64a:	687b      	ldr	r3, [r7, #4]
    a64c:	685b      	ldr	r3, [r3, #4]
    a64e:	4619      	mov	r1, r3
    a650:	f04f 0200 	mov.w	r2, #0
    a654:	f04f 0300 	mov.w	r3, #0
    a658:	f04f 0400 	mov.w	r4, #0
    a65c:	0094      	lsls	r4, r2, #2
    a65e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
    a662:	008b      	lsls	r3, r1, #2
    a664:	461a      	mov	r2, r3
    a666:	4623      	mov	r3, r4
    a668:	4628      	mov	r0, r5
    a66a:	4631      	mov	r1, r6
    a66c:	f002 fbd2 	bl	ce14 <__aeabi_uldivmod>
    a670:	4603      	mov	r3, r0
    a672:	460c      	mov	r4, r1
    a674:	461a      	mov	r2, r3
    a676:	4b50      	ldr	r3, [pc, #320]	; (a7b8 <UART_SetConfig+0x6f4>)
    a678:	fba3 2302 	umull	r2, r3, r3, r2
    a67c:	095b      	lsrs	r3, r3, #5
    a67e:	ea4f 1803 	mov.w	r8, r3, lsl #4
    a682:	68bb      	ldr	r3, [r7, #8]
    a684:	469b      	mov	fp, r3
    a686:	f04f 0c00 	mov.w	ip, #0
    a68a:	46d9      	mov	r9, fp
    a68c:	46e2      	mov	sl, ip
    a68e:	eb19 0309 	adds.w	r3, r9, r9
    a692:	eb4a 040a 	adc.w	r4, sl, sl
    a696:	4699      	mov	r9, r3
    a698:	46a2      	mov	sl, r4
    a69a:	eb19 090b 	adds.w	r9, r9, fp
    a69e:	eb4a 0a0c 	adc.w	sl, sl, ip
    a6a2:	f04f 0100 	mov.w	r1, #0
    a6a6:	f04f 0200 	mov.w	r2, #0
    a6aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
    a6ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
    a6b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
    a6b6:	4689      	mov	r9, r1
    a6b8:	4692      	mov	sl, r2
    a6ba:	eb1b 0509 	adds.w	r5, fp, r9
    a6be:	eb4c 060a 	adc.w	r6, ip, sl
    a6c2:	687b      	ldr	r3, [r7, #4]
    a6c4:	685b      	ldr	r3, [r3, #4]
    a6c6:	4619      	mov	r1, r3
    a6c8:	f04f 0200 	mov.w	r2, #0
    a6cc:	f04f 0300 	mov.w	r3, #0
    a6d0:	f04f 0400 	mov.w	r4, #0
    a6d4:	0094      	lsls	r4, r2, #2
    a6d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
    a6da:	008b      	lsls	r3, r1, #2
    a6dc:	461a      	mov	r2, r3
    a6de:	4623      	mov	r3, r4
    a6e0:	4628      	mov	r0, r5
    a6e2:	4631      	mov	r1, r6
    a6e4:	f002 fb96 	bl	ce14 <__aeabi_uldivmod>
    a6e8:	4603      	mov	r3, r0
    a6ea:	460c      	mov	r4, r1
    a6ec:	461a      	mov	r2, r3
    a6ee:	4b32      	ldr	r3, [pc, #200]	; (a7b8 <UART_SetConfig+0x6f4>)
    a6f0:	fba3 1302 	umull	r1, r3, r3, r2
    a6f4:	095b      	lsrs	r3, r3, #5
    a6f6:	2164      	movs	r1, #100	; 0x64
    a6f8:	fb01 f303 	mul.w	r3, r1, r3
    a6fc:	1ad3      	subs	r3, r2, r3
    a6fe:	011b      	lsls	r3, r3, #4
    a700:	3332      	adds	r3, #50	; 0x32
    a702:	4a2d      	ldr	r2, [pc, #180]	; (a7b8 <UART_SetConfig+0x6f4>)
    a704:	fba2 2303 	umull	r2, r3, r2, r3
    a708:	095b      	lsrs	r3, r3, #5
    a70a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    a70e:	4498      	add	r8, r3
    a710:	68bb      	ldr	r3, [r7, #8]
    a712:	469b      	mov	fp, r3
    a714:	f04f 0c00 	mov.w	ip, #0
    a718:	46d9      	mov	r9, fp
    a71a:	46e2      	mov	sl, ip
    a71c:	eb19 0309 	adds.w	r3, r9, r9
    a720:	eb4a 040a 	adc.w	r4, sl, sl
    a724:	4699      	mov	r9, r3
    a726:	46a2      	mov	sl, r4
    a728:	eb19 090b 	adds.w	r9, r9, fp
    a72c:	eb4a 0a0c 	adc.w	sl, sl, ip
    a730:	f04f 0100 	mov.w	r1, #0
    a734:	f04f 0200 	mov.w	r2, #0
    a738:	ea4f 02ca 	mov.w	r2, sl, lsl #3
    a73c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
    a740:	ea4f 01c9 	mov.w	r1, r9, lsl #3
    a744:	4689      	mov	r9, r1
    a746:	4692      	mov	sl, r2
    a748:	eb1b 0509 	adds.w	r5, fp, r9
    a74c:	eb4c 060a 	adc.w	r6, ip, sl
    a750:	687b      	ldr	r3, [r7, #4]
    a752:	685b      	ldr	r3, [r3, #4]
    a754:	4619      	mov	r1, r3
    a756:	f04f 0200 	mov.w	r2, #0
    a75a:	f04f 0300 	mov.w	r3, #0
    a75e:	f04f 0400 	mov.w	r4, #0
    a762:	0094      	lsls	r4, r2, #2
    a764:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
    a768:	008b      	lsls	r3, r1, #2
    a76a:	461a      	mov	r2, r3
    a76c:	4623      	mov	r3, r4
    a76e:	4628      	mov	r0, r5
    a770:	4631      	mov	r1, r6
    a772:	f002 fb4f 	bl	ce14 <__aeabi_uldivmod>
    a776:	4603      	mov	r3, r0
    a778:	460c      	mov	r4, r1
    a77a:	461a      	mov	r2, r3
    a77c:	4b0e      	ldr	r3, [pc, #56]	; (a7b8 <UART_SetConfig+0x6f4>)
    a77e:	fba3 1302 	umull	r1, r3, r3, r2
    a782:	095b      	lsrs	r3, r3, #5
    a784:	2164      	movs	r1, #100	; 0x64
    a786:	fb01 f303 	mul.w	r3, r1, r3
    a78a:	1ad3      	subs	r3, r2, r3
    a78c:	011b      	lsls	r3, r3, #4
    a78e:	3332      	adds	r3, #50	; 0x32
    a790:	4a09      	ldr	r2, [pc, #36]	; (a7b8 <UART_SetConfig+0x6f4>)
    a792:	fba2 2303 	umull	r2, r3, r2, r3
    a796:	095b      	lsrs	r3, r3, #5
    a798:	f003 020f 	and.w	r2, r3, #15
    a79c:	687b      	ldr	r3, [r7, #4]
    a79e:	681b      	ldr	r3, [r3, #0]
    a7a0:	4442      	add	r2, r8
    a7a2:	609a      	str	r2, [r3, #8]
}
    a7a4:	e7ff      	b.n	a7a6 <UART_SetConfig+0x6e2>
    a7a6:	bf00      	nop
    a7a8:	3714      	adds	r7, #20
    a7aa:	46bd      	mov	sp, r7
    a7ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a7b0:	40011000 	.word	0x40011000
    a7b4:	40011400 	.word	0x40011400
    a7b8:	51eb851f 	.word	0x51eb851f

0000a7bc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
    a7bc:	b480      	push	{r7}
    a7be:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
    a7c0:	bf00      	nop
    a7c2:	46bd      	mov	sp, r7
    a7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    a7c8:	4770      	bx	lr
	...

0000a7cc <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
    a7cc:	b480      	push	{r7}
    a7ce:	b085      	sub	sp, #20
    a7d0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    a7d2:	f3ef 8305 	mrs	r3, IPSR
    a7d6:	60bb      	str	r3, [r7, #8]
  return(result);
    a7d8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
    a7da:	2b00      	cmp	r3, #0
    a7dc:	d10f      	bne.n	a7fe <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    a7de:	f3ef 8310 	mrs	r3, PRIMASK
    a7e2:	607b      	str	r3, [r7, #4]
  return(result);
    a7e4:	687b      	ldr	r3, [r7, #4]
    a7e6:	2b00      	cmp	r3, #0
    a7e8:	d105      	bne.n	a7f6 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
    a7ea:	f3ef 8311 	mrs	r3, BASEPRI
    a7ee:	603b      	str	r3, [r7, #0]
  return(result);
    a7f0:	683b      	ldr	r3, [r7, #0]
    a7f2:	2b00      	cmp	r3, #0
    a7f4:	d007      	beq.n	a806 <osKernelInitialize+0x3a>
    a7f6:	4b0e      	ldr	r3, [pc, #56]	; (a830 <osKernelInitialize+0x64>)
    a7f8:	681b      	ldr	r3, [r3, #0]
    a7fa:	2b02      	cmp	r3, #2
    a7fc:	d103      	bne.n	a806 <osKernelInitialize+0x3a>
    stat = osErrorISR;
    a7fe:	f06f 0305 	mvn.w	r3, #5
    a802:	60fb      	str	r3, [r7, #12]
    a804:	e00c      	b.n	a820 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
    a806:	4b0a      	ldr	r3, [pc, #40]	; (a830 <osKernelInitialize+0x64>)
    a808:	681b      	ldr	r3, [r3, #0]
    a80a:	2b00      	cmp	r3, #0
    a80c:	d105      	bne.n	a81a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
    a80e:	4b08      	ldr	r3, [pc, #32]	; (a830 <osKernelInitialize+0x64>)
    a810:	2201      	movs	r2, #1
    a812:	601a      	str	r2, [r3, #0]
      stat = osOK;
    a814:	2300      	movs	r3, #0
    a816:	60fb      	str	r3, [r7, #12]
    a818:	e002      	b.n	a820 <osKernelInitialize+0x54>
    } else {
      stat = osError;
    a81a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a81e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
    a820:	68fb      	ldr	r3, [r7, #12]
}
    a822:	4618      	mov	r0, r3
    a824:	3714      	adds	r7, #20
    a826:	46bd      	mov	sp, r7
    a828:	f85d 7b04 	ldr.w	r7, [sp], #4
    a82c:	4770      	bx	lr
    a82e:	bf00      	nop
    a830:	0001d304 	.word	0x0001d304

0000a834 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
    a834:	b580      	push	{r7, lr}
    a836:	b084      	sub	sp, #16
    a838:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    a83a:	f3ef 8305 	mrs	r3, IPSR
    a83e:	60bb      	str	r3, [r7, #8]
  return(result);
    a840:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
    a842:	2b00      	cmp	r3, #0
    a844:	d10f      	bne.n	a866 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    a846:	f3ef 8310 	mrs	r3, PRIMASK
    a84a:	607b      	str	r3, [r7, #4]
  return(result);
    a84c:	687b      	ldr	r3, [r7, #4]
    a84e:	2b00      	cmp	r3, #0
    a850:	d105      	bne.n	a85e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
    a852:	f3ef 8311 	mrs	r3, BASEPRI
    a856:	603b      	str	r3, [r7, #0]
  return(result);
    a858:	683b      	ldr	r3, [r7, #0]
    a85a:	2b00      	cmp	r3, #0
    a85c:	d007      	beq.n	a86e <osKernelStart+0x3a>
    a85e:	4b0f      	ldr	r3, [pc, #60]	; (a89c <osKernelStart+0x68>)
    a860:	681b      	ldr	r3, [r3, #0]
    a862:	2b02      	cmp	r3, #2
    a864:	d103      	bne.n	a86e <osKernelStart+0x3a>
    stat = osErrorISR;
    a866:	f06f 0305 	mvn.w	r3, #5
    a86a:	60fb      	str	r3, [r7, #12]
    a86c:	e010      	b.n	a890 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
    a86e:	4b0b      	ldr	r3, [pc, #44]	; (a89c <osKernelStart+0x68>)
    a870:	681b      	ldr	r3, [r3, #0]
    a872:	2b01      	cmp	r3, #1
    a874:	d109      	bne.n	a88a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
    a876:	f7ff ffa1 	bl	a7bc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
    a87a:	4b08      	ldr	r3, [pc, #32]	; (a89c <osKernelStart+0x68>)
    a87c:	2202      	movs	r2, #2
    a87e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
    a880:	f000 ff56 	bl	b730 <vTaskStartScheduler>
      stat = osOK;
    a884:	2300      	movs	r3, #0
    a886:	60fb      	str	r3, [r7, #12]
    a888:	e002      	b.n	a890 <osKernelStart+0x5c>
    } else {
      stat = osError;
    a88a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a88e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
    a890:	68fb      	ldr	r3, [r7, #12]
}
    a892:	4618      	mov	r0, r3
    a894:	3710      	adds	r7, #16
    a896:	46bd      	mov	sp, r7
    a898:	bd80      	pop	{r7, pc}
    a89a:	bf00      	nop
    a89c:	0001d304 	.word	0x0001d304

0000a8a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
    a8a0:	b480      	push	{r7}
    a8a2:	b085      	sub	sp, #20
    a8a4:	af00      	add	r7, sp, #0
    a8a6:	60f8      	str	r0, [r7, #12]
    a8a8:	60b9      	str	r1, [r7, #8]
    a8aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
    a8ac:	68fb      	ldr	r3, [r7, #12]
    a8ae:	4a07      	ldr	r2, [pc, #28]	; (a8cc <vApplicationGetIdleTaskMemory+0x2c>)
    a8b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
    a8b2:	68bb      	ldr	r3, [r7, #8]
    a8b4:	4a06      	ldr	r2, [pc, #24]	; (a8d0 <vApplicationGetIdleTaskMemory+0x30>)
    a8b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
    a8b8:	687b      	ldr	r3, [r7, #4]
    a8ba:	2280      	movs	r2, #128	; 0x80
    a8bc:	601a      	str	r2, [r3, #0]
}
    a8be:	bf00      	nop
    a8c0:	3714      	adds	r7, #20
    a8c2:	46bd      	mov	sp, r7
    a8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    a8c8:	4770      	bx	lr
    a8ca:	bf00      	nop
    a8cc:	0001d308 	.word	0x0001d308
    a8d0:	0001d364 	.word	0x0001d364

0000a8d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
    a8d4:	b480      	push	{r7}
    a8d6:	b085      	sub	sp, #20
    a8d8:	af00      	add	r7, sp, #0
    a8da:	60f8      	str	r0, [r7, #12]
    a8dc:	60b9      	str	r1, [r7, #8]
    a8de:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
    a8e0:	68fb      	ldr	r3, [r7, #12]
    a8e2:	4a07      	ldr	r2, [pc, #28]	; (a900 <vApplicationGetTimerTaskMemory+0x2c>)
    a8e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
    a8e6:	68bb      	ldr	r3, [r7, #8]
    a8e8:	4a06      	ldr	r2, [pc, #24]	; (a904 <vApplicationGetTimerTaskMemory+0x30>)
    a8ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
    a8ec:	687b      	ldr	r3, [r7, #4]
    a8ee:	f44f 7280 	mov.w	r2, #256	; 0x100
    a8f2:	601a      	str	r2, [r3, #0]
}
    a8f4:	bf00      	nop
    a8f6:	3714      	adds	r7, #20
    a8f8:	46bd      	mov	sp, r7
    a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    a8fe:	4770      	bx	lr
    a900:	0001d564 	.word	0x0001d564
    a904:	0001d5c0 	.word	0x0001d5c0

0000a908 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    a908:	b480      	push	{r7}
    a90a:	b083      	sub	sp, #12
    a90c:	af00      	add	r7, sp, #0
    a90e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    a910:	687b      	ldr	r3, [r7, #4]
    a912:	f103 0208 	add.w	r2, r3, #8
    a916:	687b      	ldr	r3, [r7, #4]
    a918:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    a91a:	687b      	ldr	r3, [r7, #4]
    a91c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a920:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    a922:	687b      	ldr	r3, [r7, #4]
    a924:	f103 0208 	add.w	r2, r3, #8
    a928:	687b      	ldr	r3, [r7, #4]
    a92a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    a92c:	687b      	ldr	r3, [r7, #4]
    a92e:	f103 0208 	add.w	r2, r3, #8
    a932:	687b      	ldr	r3, [r7, #4]
    a934:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    a936:	687b      	ldr	r3, [r7, #4]
    a938:	2200      	movs	r2, #0
    a93a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    a93c:	bf00      	nop
    a93e:	370c      	adds	r7, #12
    a940:	46bd      	mov	sp, r7
    a942:	f85d 7b04 	ldr.w	r7, [sp], #4
    a946:	4770      	bx	lr

0000a948 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    a948:	b480      	push	{r7}
    a94a:	b083      	sub	sp, #12
    a94c:	af00      	add	r7, sp, #0
    a94e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
    a950:	687b      	ldr	r3, [r7, #4]
    a952:	2200      	movs	r2, #0
    a954:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    a956:	bf00      	nop
    a958:	370c      	adds	r7, #12
    a95a:	46bd      	mov	sp, r7
    a95c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a960:	4770      	bx	lr

0000a962 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    a962:	b480      	push	{r7}
    a964:	b085      	sub	sp, #20
    a966:	af00      	add	r7, sp, #0
    a968:	6078      	str	r0, [r7, #4]
    a96a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
    a96c:	687b      	ldr	r3, [r7, #4]
    a96e:	685b      	ldr	r3, [r3, #4]
    a970:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    a972:	683b      	ldr	r3, [r7, #0]
    a974:	68fa      	ldr	r2, [r7, #12]
    a976:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    a978:	68fb      	ldr	r3, [r7, #12]
    a97a:	689a      	ldr	r2, [r3, #8]
    a97c:	683b      	ldr	r3, [r7, #0]
    a97e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    a980:	68fb      	ldr	r3, [r7, #12]
    a982:	689b      	ldr	r3, [r3, #8]
    a984:	683a      	ldr	r2, [r7, #0]
    a986:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
    a988:	68fb      	ldr	r3, [r7, #12]
    a98a:	683a      	ldr	r2, [r7, #0]
    a98c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
    a98e:	683b      	ldr	r3, [r7, #0]
    a990:	687a      	ldr	r2, [r7, #4]
    a992:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    a994:	687b      	ldr	r3, [r7, #4]
    a996:	681b      	ldr	r3, [r3, #0]
    a998:	1c5a      	adds	r2, r3, #1
    a99a:	687b      	ldr	r3, [r7, #4]
    a99c:	601a      	str	r2, [r3, #0]
}
    a99e:	bf00      	nop
    a9a0:	3714      	adds	r7, #20
    a9a2:	46bd      	mov	sp, r7
    a9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    a9a8:	4770      	bx	lr

0000a9aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    a9aa:	b480      	push	{r7}
    a9ac:	b085      	sub	sp, #20
    a9ae:	af00      	add	r7, sp, #0
    a9b0:	6078      	str	r0, [r7, #4]
    a9b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    a9b4:	683b      	ldr	r3, [r7, #0]
    a9b6:	681b      	ldr	r3, [r3, #0]
    a9b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    a9ba:	68bb      	ldr	r3, [r7, #8]
    a9bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    a9c0:	d103      	bne.n	a9ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    a9c2:	687b      	ldr	r3, [r7, #4]
    a9c4:	691b      	ldr	r3, [r3, #16]
    a9c6:	60fb      	str	r3, [r7, #12]
    a9c8:	e00c      	b.n	a9e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    a9ca:	687b      	ldr	r3, [r7, #4]
    a9cc:	3308      	adds	r3, #8
    a9ce:	60fb      	str	r3, [r7, #12]
    a9d0:	e002      	b.n	a9d8 <vListInsert+0x2e>
    a9d2:	68fb      	ldr	r3, [r7, #12]
    a9d4:	685b      	ldr	r3, [r3, #4]
    a9d6:	60fb      	str	r3, [r7, #12]
    a9d8:	68fb      	ldr	r3, [r7, #12]
    a9da:	685b      	ldr	r3, [r3, #4]
    a9dc:	681b      	ldr	r3, [r3, #0]
    a9de:	68ba      	ldr	r2, [r7, #8]
    a9e0:	429a      	cmp	r2, r3
    a9e2:	d2f6      	bcs.n	a9d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    a9e4:	68fb      	ldr	r3, [r7, #12]
    a9e6:	685a      	ldr	r2, [r3, #4]
    a9e8:	683b      	ldr	r3, [r7, #0]
    a9ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    a9ec:	683b      	ldr	r3, [r7, #0]
    a9ee:	685b      	ldr	r3, [r3, #4]
    a9f0:	683a      	ldr	r2, [r7, #0]
    a9f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    a9f4:	683b      	ldr	r3, [r7, #0]
    a9f6:	68fa      	ldr	r2, [r7, #12]
    a9f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
    a9fa:	68fb      	ldr	r3, [r7, #12]
    a9fc:	683a      	ldr	r2, [r7, #0]
    a9fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
    aa00:	683b      	ldr	r3, [r7, #0]
    aa02:	687a      	ldr	r2, [r7, #4]
    aa04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    aa06:	687b      	ldr	r3, [r7, #4]
    aa08:	681b      	ldr	r3, [r3, #0]
    aa0a:	1c5a      	adds	r2, r3, #1
    aa0c:	687b      	ldr	r3, [r7, #4]
    aa0e:	601a      	str	r2, [r3, #0]
}
    aa10:	bf00      	nop
    aa12:	3714      	adds	r7, #20
    aa14:	46bd      	mov	sp, r7
    aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa1a:	4770      	bx	lr

0000aa1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    aa1c:	b480      	push	{r7}
    aa1e:	b085      	sub	sp, #20
    aa20:	af00      	add	r7, sp, #0
    aa22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    aa24:	687b      	ldr	r3, [r7, #4]
    aa26:	691b      	ldr	r3, [r3, #16]
    aa28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    aa2a:	687b      	ldr	r3, [r7, #4]
    aa2c:	685b      	ldr	r3, [r3, #4]
    aa2e:	687a      	ldr	r2, [r7, #4]
    aa30:	6892      	ldr	r2, [r2, #8]
    aa32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    aa34:	687b      	ldr	r3, [r7, #4]
    aa36:	689b      	ldr	r3, [r3, #8]
    aa38:	687a      	ldr	r2, [r7, #4]
    aa3a:	6852      	ldr	r2, [r2, #4]
    aa3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    aa3e:	68fb      	ldr	r3, [r7, #12]
    aa40:	685b      	ldr	r3, [r3, #4]
    aa42:	687a      	ldr	r2, [r7, #4]
    aa44:	429a      	cmp	r2, r3
    aa46:	d103      	bne.n	aa50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    aa48:	687b      	ldr	r3, [r7, #4]
    aa4a:	689a      	ldr	r2, [r3, #8]
    aa4c:	68fb      	ldr	r3, [r7, #12]
    aa4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
    aa50:	687b      	ldr	r3, [r7, #4]
    aa52:	2200      	movs	r2, #0
    aa54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    aa56:	68fb      	ldr	r3, [r7, #12]
    aa58:	681b      	ldr	r3, [r3, #0]
    aa5a:	1e5a      	subs	r2, r3, #1
    aa5c:	68fb      	ldr	r3, [r7, #12]
    aa5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    aa60:	68fb      	ldr	r3, [r7, #12]
    aa62:	681b      	ldr	r3, [r3, #0]
}
    aa64:	4618      	mov	r0, r3
    aa66:	3714      	adds	r7, #20
    aa68:	46bd      	mov	sp, r7
    aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa6e:	4770      	bx	lr

0000aa70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    aa70:	b580      	push	{r7, lr}
    aa72:	b084      	sub	sp, #16
    aa74:	af00      	add	r7, sp, #0
    aa76:	6078      	str	r0, [r7, #4]
    aa78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
    aa7a:	687b      	ldr	r3, [r7, #4]
    aa7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
    aa7e:	68fb      	ldr	r3, [r7, #12]
    aa80:	2b00      	cmp	r3, #0
    aa82:	d109      	bne.n	aa98 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
    aa84:	f04f 0350 	mov.w	r3, #80	; 0x50
    aa88:	f383 8811 	msr	BASEPRI, r3
    aa8c:	f3bf 8f6f 	isb	sy
    aa90:	f3bf 8f4f 	dsb	sy
    aa94:	60bb      	str	r3, [r7, #8]
    aa96:	e7fe      	b.n	aa96 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
    aa98:	f001 ffb4 	bl	ca04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    aa9c:	68fb      	ldr	r3, [r7, #12]
    aa9e:	681a      	ldr	r2, [r3, #0]
    aaa0:	68fb      	ldr	r3, [r7, #12]
    aaa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    aaa4:	68f9      	ldr	r1, [r7, #12]
    aaa6:	6c09      	ldr	r1, [r1, #64]	; 0x40
    aaa8:	fb01 f303 	mul.w	r3, r1, r3
    aaac:	441a      	add	r2, r3
    aaae:	68fb      	ldr	r3, [r7, #12]
    aab0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    aab2:	68fb      	ldr	r3, [r7, #12]
    aab4:	2200      	movs	r2, #0
    aab6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    aab8:	68fb      	ldr	r3, [r7, #12]
    aaba:	681a      	ldr	r2, [r3, #0]
    aabc:	68fb      	ldr	r3, [r7, #12]
    aabe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
    aac0:	68fb      	ldr	r3, [r7, #12]
    aac2:	681a      	ldr	r2, [r3, #0]
    aac4:	68fb      	ldr	r3, [r7, #12]
    aac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    aac8:	3b01      	subs	r3, #1
    aaca:	68f9      	ldr	r1, [r7, #12]
    aacc:	6c09      	ldr	r1, [r1, #64]	; 0x40
    aace:	fb01 f303 	mul.w	r3, r1, r3
    aad2:	441a      	add	r2, r3
    aad4:	68fb      	ldr	r3, [r7, #12]
    aad6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    aad8:	68fb      	ldr	r3, [r7, #12]
    aada:	22ff      	movs	r2, #255	; 0xff
    aadc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
    aae0:	68fb      	ldr	r3, [r7, #12]
    aae2:	22ff      	movs	r2, #255	; 0xff
    aae4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
    aae8:	683b      	ldr	r3, [r7, #0]
    aaea:	2b00      	cmp	r3, #0
    aaec:	d114      	bne.n	ab18 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    aaee:	68fb      	ldr	r3, [r7, #12]
    aaf0:	691b      	ldr	r3, [r3, #16]
    aaf2:	2b00      	cmp	r3, #0
    aaf4:	d01a      	beq.n	ab2c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    aaf6:	68fb      	ldr	r3, [r7, #12]
    aaf8:	3310      	adds	r3, #16
    aafa:	4618      	mov	r0, r3
    aafc:	f001 f898 	bl	bc30 <xTaskRemoveFromEventList>
    ab00:	4603      	mov	r3, r0
    ab02:	2b00      	cmp	r3, #0
    ab04:	d012      	beq.n	ab2c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
    ab06:	4b0d      	ldr	r3, [pc, #52]	; (ab3c <xQueueGenericReset+0xcc>)
    ab08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    ab0c:	601a      	str	r2, [r3, #0]
    ab0e:	f3bf 8f4f 	dsb	sy
    ab12:	f3bf 8f6f 	isb	sy
    ab16:	e009      	b.n	ab2c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    ab18:	68fb      	ldr	r3, [r7, #12]
    ab1a:	3310      	adds	r3, #16
    ab1c:	4618      	mov	r0, r3
    ab1e:	f7ff fef3 	bl	a908 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    ab22:	68fb      	ldr	r3, [r7, #12]
    ab24:	3324      	adds	r3, #36	; 0x24
    ab26:	4618      	mov	r0, r3
    ab28:	f7ff feee 	bl	a908 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    ab2c:	f001 ff98 	bl	ca60 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    ab30:	2301      	movs	r3, #1
}
    ab32:	4618      	mov	r0, r3
    ab34:	3710      	adds	r7, #16
    ab36:	46bd      	mov	sp, r7
    ab38:	bd80      	pop	{r7, pc}
    ab3a:	bf00      	nop
    ab3c:	e000ed04 	.word	0xe000ed04

0000ab40 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
    ab40:	b580      	push	{r7, lr}
    ab42:	b08e      	sub	sp, #56	; 0x38
    ab44:	af02      	add	r7, sp, #8
    ab46:	60f8      	str	r0, [r7, #12]
    ab48:	60b9      	str	r1, [r7, #8]
    ab4a:	607a      	str	r2, [r7, #4]
    ab4c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    ab4e:	68fb      	ldr	r3, [r7, #12]
    ab50:	2b00      	cmp	r3, #0
    ab52:	d109      	bne.n	ab68 <xQueueGenericCreateStatic+0x28>
    ab54:	f04f 0350 	mov.w	r3, #80	; 0x50
    ab58:	f383 8811 	msr	BASEPRI, r3
    ab5c:	f3bf 8f6f 	isb	sy
    ab60:	f3bf 8f4f 	dsb	sy
    ab64:	62bb      	str	r3, [r7, #40]	; 0x28
    ab66:	e7fe      	b.n	ab66 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
    ab68:	683b      	ldr	r3, [r7, #0]
    ab6a:	2b00      	cmp	r3, #0
    ab6c:	d109      	bne.n	ab82 <xQueueGenericCreateStatic+0x42>
    ab6e:	f04f 0350 	mov.w	r3, #80	; 0x50
    ab72:	f383 8811 	msr	BASEPRI, r3
    ab76:	f3bf 8f6f 	isb	sy
    ab7a:	f3bf 8f4f 	dsb	sy
    ab7e:	627b      	str	r3, [r7, #36]	; 0x24
    ab80:	e7fe      	b.n	ab80 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
    ab82:	687b      	ldr	r3, [r7, #4]
    ab84:	2b00      	cmp	r3, #0
    ab86:	d002      	beq.n	ab8e <xQueueGenericCreateStatic+0x4e>
    ab88:	68bb      	ldr	r3, [r7, #8]
    ab8a:	2b00      	cmp	r3, #0
    ab8c:	d001      	beq.n	ab92 <xQueueGenericCreateStatic+0x52>
    ab8e:	2301      	movs	r3, #1
    ab90:	e000      	b.n	ab94 <xQueueGenericCreateStatic+0x54>
    ab92:	2300      	movs	r3, #0
    ab94:	2b00      	cmp	r3, #0
    ab96:	d109      	bne.n	abac <xQueueGenericCreateStatic+0x6c>
    ab98:	f04f 0350 	mov.w	r3, #80	; 0x50
    ab9c:	f383 8811 	msr	BASEPRI, r3
    aba0:	f3bf 8f6f 	isb	sy
    aba4:	f3bf 8f4f 	dsb	sy
    aba8:	623b      	str	r3, [r7, #32]
    abaa:	e7fe      	b.n	abaa <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
    abac:	687b      	ldr	r3, [r7, #4]
    abae:	2b00      	cmp	r3, #0
    abb0:	d102      	bne.n	abb8 <xQueueGenericCreateStatic+0x78>
    abb2:	68bb      	ldr	r3, [r7, #8]
    abb4:	2b00      	cmp	r3, #0
    abb6:	d101      	bne.n	abbc <xQueueGenericCreateStatic+0x7c>
    abb8:	2301      	movs	r3, #1
    abba:	e000      	b.n	abbe <xQueueGenericCreateStatic+0x7e>
    abbc:	2300      	movs	r3, #0
    abbe:	2b00      	cmp	r3, #0
    abc0:	d109      	bne.n	abd6 <xQueueGenericCreateStatic+0x96>
    abc2:	f04f 0350 	mov.w	r3, #80	; 0x50
    abc6:	f383 8811 	msr	BASEPRI, r3
    abca:	f3bf 8f6f 	isb	sy
    abce:	f3bf 8f4f 	dsb	sy
    abd2:	61fb      	str	r3, [r7, #28]
    abd4:	e7fe      	b.n	abd4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
    abd6:	2350      	movs	r3, #80	; 0x50
    abd8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
    abda:	697b      	ldr	r3, [r7, #20]
    abdc:	2b50      	cmp	r3, #80	; 0x50
    abde:	d009      	beq.n	abf4 <xQueueGenericCreateStatic+0xb4>
    abe0:	f04f 0350 	mov.w	r3, #80	; 0x50
    abe4:	f383 8811 	msr	BASEPRI, r3
    abe8:	f3bf 8f6f 	isb	sy
    abec:	f3bf 8f4f 	dsb	sy
    abf0:	61bb      	str	r3, [r7, #24]
    abf2:	e7fe      	b.n	abf2 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
    abf4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
    abf6:	683b      	ldr	r3, [r7, #0]
    abf8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
    abfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    abfc:	2b00      	cmp	r3, #0
    abfe:	d00d      	beq.n	ac1c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
    ac00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ac02:	2201      	movs	r2, #1
    ac04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    ac08:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
    ac0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ac0e:	9300      	str	r3, [sp, #0]
    ac10:	4613      	mov	r3, r2
    ac12:	687a      	ldr	r2, [r7, #4]
    ac14:	68b9      	ldr	r1, [r7, #8]
    ac16:	68f8      	ldr	r0, [r7, #12]
    ac18:	f000 f805 	bl	ac26 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
    ac1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
    ac1e:	4618      	mov	r0, r3
    ac20:	3730      	adds	r7, #48	; 0x30
    ac22:	46bd      	mov	sp, r7
    ac24:	bd80      	pop	{r7, pc}

0000ac26 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    ac26:	b580      	push	{r7, lr}
    ac28:	b084      	sub	sp, #16
    ac2a:	af00      	add	r7, sp, #0
    ac2c:	60f8      	str	r0, [r7, #12]
    ac2e:	60b9      	str	r1, [r7, #8]
    ac30:	607a      	str	r2, [r7, #4]
    ac32:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    ac34:	68bb      	ldr	r3, [r7, #8]
    ac36:	2b00      	cmp	r3, #0
    ac38:	d103      	bne.n	ac42 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    ac3a:	69bb      	ldr	r3, [r7, #24]
    ac3c:	69ba      	ldr	r2, [r7, #24]
    ac3e:	601a      	str	r2, [r3, #0]
    ac40:	e002      	b.n	ac48 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    ac42:	69bb      	ldr	r3, [r7, #24]
    ac44:	687a      	ldr	r2, [r7, #4]
    ac46:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    ac48:	69bb      	ldr	r3, [r7, #24]
    ac4a:	68fa      	ldr	r2, [r7, #12]
    ac4c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    ac4e:	69bb      	ldr	r3, [r7, #24]
    ac50:	68ba      	ldr	r2, [r7, #8]
    ac52:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    ac54:	2101      	movs	r1, #1
    ac56:	69b8      	ldr	r0, [r7, #24]
    ac58:	f7ff ff0a 	bl	aa70 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
    ac5c:	69bb      	ldr	r3, [r7, #24]
    ac5e:	78fa      	ldrb	r2, [r7, #3]
    ac60:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
    ac64:	bf00      	nop
    ac66:	3710      	adds	r7, #16
    ac68:	46bd      	mov	sp, r7
    ac6a:	bd80      	pop	{r7, pc}

0000ac6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    ac6c:	b580      	push	{r7, lr}
    ac6e:	b08e      	sub	sp, #56	; 0x38
    ac70:	af00      	add	r7, sp, #0
    ac72:	60f8      	str	r0, [r7, #12]
    ac74:	60b9      	str	r1, [r7, #8]
    ac76:	607a      	str	r2, [r7, #4]
    ac78:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    ac7a:	2300      	movs	r3, #0
    ac7c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
    ac7e:	68fb      	ldr	r3, [r7, #12]
    ac80:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
    ac82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ac84:	2b00      	cmp	r3, #0
    ac86:	d109      	bne.n	ac9c <xQueueGenericSend+0x30>
    ac88:	f04f 0350 	mov.w	r3, #80	; 0x50
    ac8c:	f383 8811 	msr	BASEPRI, r3
    ac90:	f3bf 8f6f 	isb	sy
    ac94:	f3bf 8f4f 	dsb	sy
    ac98:	62bb      	str	r3, [r7, #40]	; 0x28
    ac9a:	e7fe      	b.n	ac9a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    ac9c:	68bb      	ldr	r3, [r7, #8]
    ac9e:	2b00      	cmp	r3, #0
    aca0:	d103      	bne.n	acaa <xQueueGenericSend+0x3e>
    aca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    aca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    aca6:	2b00      	cmp	r3, #0
    aca8:	d101      	bne.n	acae <xQueueGenericSend+0x42>
    acaa:	2301      	movs	r3, #1
    acac:	e000      	b.n	acb0 <xQueueGenericSend+0x44>
    acae:	2300      	movs	r3, #0
    acb0:	2b00      	cmp	r3, #0
    acb2:	d109      	bne.n	acc8 <xQueueGenericSend+0x5c>
    acb4:	f04f 0350 	mov.w	r3, #80	; 0x50
    acb8:	f383 8811 	msr	BASEPRI, r3
    acbc:	f3bf 8f6f 	isb	sy
    acc0:	f3bf 8f4f 	dsb	sy
    acc4:	627b      	str	r3, [r7, #36]	; 0x24
    acc6:	e7fe      	b.n	acc6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    acc8:	683b      	ldr	r3, [r7, #0]
    acca:	2b02      	cmp	r3, #2
    accc:	d103      	bne.n	acd6 <xQueueGenericSend+0x6a>
    acce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    acd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    acd2:	2b01      	cmp	r3, #1
    acd4:	d101      	bne.n	acda <xQueueGenericSend+0x6e>
    acd6:	2301      	movs	r3, #1
    acd8:	e000      	b.n	acdc <xQueueGenericSend+0x70>
    acda:	2300      	movs	r3, #0
    acdc:	2b00      	cmp	r3, #0
    acde:	d109      	bne.n	acf4 <xQueueGenericSend+0x88>
    ace0:	f04f 0350 	mov.w	r3, #80	; 0x50
    ace4:	f383 8811 	msr	BASEPRI, r3
    ace8:	f3bf 8f6f 	isb	sy
    acec:	f3bf 8f4f 	dsb	sy
    acf0:	623b      	str	r3, [r7, #32]
    acf2:	e7fe      	b.n	acf2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    acf4:	f001 f952 	bl	bf9c <xTaskGetSchedulerState>
    acf8:	4603      	mov	r3, r0
    acfa:	2b00      	cmp	r3, #0
    acfc:	d102      	bne.n	ad04 <xQueueGenericSend+0x98>
    acfe:	687b      	ldr	r3, [r7, #4]
    ad00:	2b00      	cmp	r3, #0
    ad02:	d101      	bne.n	ad08 <xQueueGenericSend+0x9c>
    ad04:	2301      	movs	r3, #1
    ad06:	e000      	b.n	ad0a <xQueueGenericSend+0x9e>
    ad08:	2300      	movs	r3, #0
    ad0a:	2b00      	cmp	r3, #0
    ad0c:	d109      	bne.n	ad22 <xQueueGenericSend+0xb6>
    ad0e:	f04f 0350 	mov.w	r3, #80	; 0x50
    ad12:	f383 8811 	msr	BASEPRI, r3
    ad16:	f3bf 8f6f 	isb	sy
    ad1a:	f3bf 8f4f 	dsb	sy
    ad1e:	61fb      	str	r3, [r7, #28]
    ad20:	e7fe      	b.n	ad20 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    ad22:	f001 fe6f 	bl	ca04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    ad26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ad28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    ad2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ad2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    ad2e:	429a      	cmp	r2, r3
    ad30:	d302      	bcc.n	ad38 <xQueueGenericSend+0xcc>
    ad32:	683b      	ldr	r3, [r7, #0]
    ad34:	2b02      	cmp	r3, #2
    ad36:	d129      	bne.n	ad8c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    ad38:	683a      	ldr	r2, [r7, #0]
    ad3a:	68b9      	ldr	r1, [r7, #8]
    ad3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
    ad3e:	f000 f9ff 	bl	b140 <prvCopyDataToQueue>
    ad42:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    ad44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ad46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ad48:	2b00      	cmp	r3, #0
    ad4a:	d010      	beq.n	ad6e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    ad4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ad4e:	3324      	adds	r3, #36	; 0x24
    ad50:	4618      	mov	r0, r3
    ad52:	f000 ff6d 	bl	bc30 <xTaskRemoveFromEventList>
    ad56:	4603      	mov	r3, r0
    ad58:	2b00      	cmp	r3, #0
    ad5a:	d013      	beq.n	ad84 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
    ad5c:	4b3f      	ldr	r3, [pc, #252]	; (ae5c <xQueueGenericSend+0x1f0>)
    ad5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    ad62:	601a      	str	r2, [r3, #0]
    ad64:	f3bf 8f4f 	dsb	sy
    ad68:	f3bf 8f6f 	isb	sy
    ad6c:	e00a      	b.n	ad84 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    ad6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ad70:	2b00      	cmp	r3, #0
    ad72:	d007      	beq.n	ad84 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    ad74:	4b39      	ldr	r3, [pc, #228]	; (ae5c <xQueueGenericSend+0x1f0>)
    ad76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    ad7a:	601a      	str	r2, [r3, #0]
    ad7c:	f3bf 8f4f 	dsb	sy
    ad80:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    ad84:	f001 fe6c 	bl	ca60 <vPortExitCritical>
				return pdPASS;
    ad88:	2301      	movs	r3, #1
    ad8a:	e063      	b.n	ae54 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    ad8c:	687b      	ldr	r3, [r7, #4]
    ad8e:	2b00      	cmp	r3, #0
    ad90:	d103      	bne.n	ad9a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    ad92:	f001 fe65 	bl	ca60 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    ad96:	2300      	movs	r3, #0
    ad98:	e05c      	b.n	ae54 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
    ad9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ad9c:	2b00      	cmp	r3, #0
    ad9e:	d106      	bne.n	adae <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    ada0:	f107 0314 	add.w	r3, r7, #20
    ada4:	4618      	mov	r0, r3
    ada6:	f000 ffa5 	bl	bcf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    adaa:	2301      	movs	r3, #1
    adac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    adae:	f001 fe57 	bl	ca60 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    adb2:	f000 fd21 	bl	b7f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    adb6:	f001 fe25 	bl	ca04 <vPortEnterCritical>
    adba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    adbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    adc0:	b25b      	sxtb	r3, r3
    adc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    adc6:	d103      	bne.n	add0 <xQueueGenericSend+0x164>
    adc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    adca:	2200      	movs	r2, #0
    adcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    add0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    add2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    add6:	b25b      	sxtb	r3, r3
    add8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    addc:	d103      	bne.n	ade6 <xQueueGenericSend+0x17a>
    adde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ade0:	2200      	movs	r2, #0
    ade2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    ade6:	f001 fe3b 	bl	ca60 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    adea:	1d3a      	adds	r2, r7, #4
    adec:	f107 0314 	add.w	r3, r7, #20
    adf0:	4611      	mov	r1, r2
    adf2:	4618      	mov	r0, r3
    adf4:	f000 ff94 	bl	bd20 <xTaskCheckForTimeOut>
    adf8:	4603      	mov	r3, r0
    adfa:	2b00      	cmp	r3, #0
    adfc:	d124      	bne.n	ae48 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    adfe:	6b38      	ldr	r0, [r7, #48]	; 0x30
    ae00:	f000 fa96 	bl	b330 <prvIsQueueFull>
    ae04:	4603      	mov	r3, r0
    ae06:	2b00      	cmp	r3, #0
    ae08:	d018      	beq.n	ae3c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    ae0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ae0c:	3310      	adds	r3, #16
    ae0e:	687a      	ldr	r2, [r7, #4]
    ae10:	4611      	mov	r1, r2
    ae12:	4618      	mov	r0, r3
    ae14:	f000 febe 	bl	bb94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    ae18:	6b38      	ldr	r0, [r7, #48]	; 0x30
    ae1a:	f000 fa21 	bl	b260 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    ae1e:	f000 fcf9 	bl	b814 <xTaskResumeAll>
    ae22:	4603      	mov	r3, r0
    ae24:	2b00      	cmp	r3, #0
    ae26:	f47f af7c 	bne.w	ad22 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
    ae2a:	4b0c      	ldr	r3, [pc, #48]	; (ae5c <xQueueGenericSend+0x1f0>)
    ae2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    ae30:	601a      	str	r2, [r3, #0]
    ae32:	f3bf 8f4f 	dsb	sy
    ae36:	f3bf 8f6f 	isb	sy
    ae3a:	e772      	b.n	ad22 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    ae3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
    ae3e:	f000 fa0f 	bl	b260 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    ae42:	f000 fce7 	bl	b814 <xTaskResumeAll>
    ae46:	e76c      	b.n	ad22 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    ae48:	6b38      	ldr	r0, [r7, #48]	; 0x30
    ae4a:	f000 fa09 	bl	b260 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    ae4e:	f000 fce1 	bl	b814 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    ae52:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
    ae54:	4618      	mov	r0, r3
    ae56:	3738      	adds	r7, #56	; 0x38
    ae58:	46bd      	mov	sp, r7
    ae5a:	bd80      	pop	{r7, pc}
    ae5c:	e000ed04 	.word	0xe000ed04

0000ae60 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    ae60:	b580      	push	{r7, lr}
    ae62:	b08e      	sub	sp, #56	; 0x38
    ae64:	af00      	add	r7, sp, #0
    ae66:	60f8      	str	r0, [r7, #12]
    ae68:	60b9      	str	r1, [r7, #8]
    ae6a:	607a      	str	r2, [r7, #4]
    ae6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
    ae6e:	68fb      	ldr	r3, [r7, #12]
    ae70:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
    ae72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ae74:	2b00      	cmp	r3, #0
    ae76:	d109      	bne.n	ae8c <xQueueGenericSendFromISR+0x2c>
    ae78:	f04f 0350 	mov.w	r3, #80	; 0x50
    ae7c:	f383 8811 	msr	BASEPRI, r3
    ae80:	f3bf 8f6f 	isb	sy
    ae84:	f3bf 8f4f 	dsb	sy
    ae88:	627b      	str	r3, [r7, #36]	; 0x24
    ae8a:	e7fe      	b.n	ae8a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    ae8c:	68bb      	ldr	r3, [r7, #8]
    ae8e:	2b00      	cmp	r3, #0
    ae90:	d103      	bne.n	ae9a <xQueueGenericSendFromISR+0x3a>
    ae92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ae94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    ae96:	2b00      	cmp	r3, #0
    ae98:	d101      	bne.n	ae9e <xQueueGenericSendFromISR+0x3e>
    ae9a:	2301      	movs	r3, #1
    ae9c:	e000      	b.n	aea0 <xQueueGenericSendFromISR+0x40>
    ae9e:	2300      	movs	r3, #0
    aea0:	2b00      	cmp	r3, #0
    aea2:	d109      	bne.n	aeb8 <xQueueGenericSendFromISR+0x58>
    aea4:	f04f 0350 	mov.w	r3, #80	; 0x50
    aea8:	f383 8811 	msr	BASEPRI, r3
    aeac:	f3bf 8f6f 	isb	sy
    aeb0:	f3bf 8f4f 	dsb	sy
    aeb4:	623b      	str	r3, [r7, #32]
    aeb6:	e7fe      	b.n	aeb6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    aeb8:	683b      	ldr	r3, [r7, #0]
    aeba:	2b02      	cmp	r3, #2
    aebc:	d103      	bne.n	aec6 <xQueueGenericSendFromISR+0x66>
    aebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    aec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    aec2:	2b01      	cmp	r3, #1
    aec4:	d101      	bne.n	aeca <xQueueGenericSendFromISR+0x6a>
    aec6:	2301      	movs	r3, #1
    aec8:	e000      	b.n	aecc <xQueueGenericSendFromISR+0x6c>
    aeca:	2300      	movs	r3, #0
    aecc:	2b00      	cmp	r3, #0
    aece:	d109      	bne.n	aee4 <xQueueGenericSendFromISR+0x84>
    aed0:	f04f 0350 	mov.w	r3, #80	; 0x50
    aed4:	f383 8811 	msr	BASEPRI, r3
    aed8:	f3bf 8f6f 	isb	sy
    aedc:	f3bf 8f4f 	dsb	sy
    aee0:	61fb      	str	r3, [r7, #28]
    aee2:	e7fe      	b.n	aee2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    aee4:	f001 fe12 	bl	cb0c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
    aee8:	f3ef 8211 	mrs	r2, BASEPRI
    aeec:	f04f 0350 	mov.w	r3, #80	; 0x50
    aef0:	f383 8811 	msr	BASEPRI, r3
    aef4:	f3bf 8f6f 	isb	sy
    aef8:	f3bf 8f4f 	dsb	sy
    aefc:	61ba      	str	r2, [r7, #24]
    aefe:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
    af00:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    af02:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    af04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    af06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    af08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    af0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    af0c:	429a      	cmp	r2, r3
    af0e:	d302      	bcc.n	af16 <xQueueGenericSendFromISR+0xb6>
    af10:	683b      	ldr	r3, [r7, #0]
    af12:	2b02      	cmp	r3, #2
    af14:	d12c      	bne.n	af70 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    af16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    af18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    af1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    af20:	683a      	ldr	r2, [r7, #0]
    af22:	68b9      	ldr	r1, [r7, #8]
    af24:	6b38      	ldr	r0, [r7, #48]	; 0x30
    af26:	f000 f90b 	bl	b140 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    af2a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
    af2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    af32:	d112      	bne.n	af5a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    af34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    af36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    af38:	2b00      	cmp	r3, #0
    af3a:	d016      	beq.n	af6a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    af3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    af3e:	3324      	adds	r3, #36	; 0x24
    af40:	4618      	mov	r0, r3
    af42:	f000 fe75 	bl	bc30 <xTaskRemoveFromEventList>
    af46:	4603      	mov	r3, r0
    af48:	2b00      	cmp	r3, #0
    af4a:	d00e      	beq.n	af6a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    af4c:	687b      	ldr	r3, [r7, #4]
    af4e:	2b00      	cmp	r3, #0
    af50:	d00b      	beq.n	af6a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    af52:	687b      	ldr	r3, [r7, #4]
    af54:	2201      	movs	r2, #1
    af56:	601a      	str	r2, [r3, #0]
    af58:	e007      	b.n	af6a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    af5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    af5e:	3301      	adds	r3, #1
    af60:	b2db      	uxtb	r3, r3
    af62:	b25a      	sxtb	r2, r3
    af64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    af66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
    af6a:	2301      	movs	r3, #1
    af6c:	637b      	str	r3, [r7, #52]	; 0x34
		{
    af6e:	e001      	b.n	af74 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    af70:	2300      	movs	r3, #0
    af72:	637b      	str	r3, [r7, #52]	; 0x34
    af74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    af76:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
    af78:	693b      	ldr	r3, [r7, #16]
    af7a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    af7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    af80:	4618      	mov	r0, r3
    af82:	3738      	adds	r7, #56	; 0x38
    af84:	46bd      	mov	sp, r7
    af86:	bd80      	pop	{r7, pc}

0000af88 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
    af88:	b580      	push	{r7, lr}
    af8a:	b08c      	sub	sp, #48	; 0x30
    af8c:	af00      	add	r7, sp, #0
    af8e:	60f8      	str	r0, [r7, #12]
    af90:	60b9      	str	r1, [r7, #8]
    af92:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
    af94:	2300      	movs	r3, #0
    af96:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
    af98:	68fb      	ldr	r3, [r7, #12]
    af9a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
    af9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    af9e:	2b00      	cmp	r3, #0
    afa0:	d109      	bne.n	afb6 <xQueueReceive+0x2e>
	__asm volatile
    afa2:	f04f 0350 	mov.w	r3, #80	; 0x50
    afa6:	f383 8811 	msr	BASEPRI, r3
    afaa:	f3bf 8f6f 	isb	sy
    afae:	f3bf 8f4f 	dsb	sy
    afb2:	623b      	str	r3, [r7, #32]
    afb4:	e7fe      	b.n	afb4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    afb6:	68bb      	ldr	r3, [r7, #8]
    afb8:	2b00      	cmp	r3, #0
    afba:	d103      	bne.n	afc4 <xQueueReceive+0x3c>
    afbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    afbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    afc0:	2b00      	cmp	r3, #0
    afc2:	d101      	bne.n	afc8 <xQueueReceive+0x40>
    afc4:	2301      	movs	r3, #1
    afc6:	e000      	b.n	afca <xQueueReceive+0x42>
    afc8:	2300      	movs	r3, #0
    afca:	2b00      	cmp	r3, #0
    afcc:	d109      	bne.n	afe2 <xQueueReceive+0x5a>
    afce:	f04f 0350 	mov.w	r3, #80	; 0x50
    afd2:	f383 8811 	msr	BASEPRI, r3
    afd6:	f3bf 8f6f 	isb	sy
    afda:	f3bf 8f4f 	dsb	sy
    afde:	61fb      	str	r3, [r7, #28]
    afe0:	e7fe      	b.n	afe0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    afe2:	f000 ffdb 	bl	bf9c <xTaskGetSchedulerState>
    afe6:	4603      	mov	r3, r0
    afe8:	2b00      	cmp	r3, #0
    afea:	d102      	bne.n	aff2 <xQueueReceive+0x6a>
    afec:	687b      	ldr	r3, [r7, #4]
    afee:	2b00      	cmp	r3, #0
    aff0:	d101      	bne.n	aff6 <xQueueReceive+0x6e>
    aff2:	2301      	movs	r3, #1
    aff4:	e000      	b.n	aff8 <xQueueReceive+0x70>
    aff6:	2300      	movs	r3, #0
    aff8:	2b00      	cmp	r3, #0
    affa:	d109      	bne.n	b010 <xQueueReceive+0x88>
    affc:	f04f 0350 	mov.w	r3, #80	; 0x50
    b000:	f383 8811 	msr	BASEPRI, r3
    b004:	f3bf 8f6f 	isb	sy
    b008:	f3bf 8f4f 	dsb	sy
    b00c:	61bb      	str	r3, [r7, #24]
    b00e:	e7fe      	b.n	b00e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    b010:	f001 fcf8 	bl	ca04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    b014:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    b018:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    b01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b01c:	2b00      	cmp	r3, #0
    b01e:	d01f      	beq.n	b060 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    b020:	68b9      	ldr	r1, [r7, #8]
    b022:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b024:	f000 f8f6 	bl	b214 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    b028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b02a:	1e5a      	subs	r2, r3, #1
    b02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b02e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    b030:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b032:	691b      	ldr	r3, [r3, #16]
    b034:	2b00      	cmp	r3, #0
    b036:	d00f      	beq.n	b058 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    b038:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b03a:	3310      	adds	r3, #16
    b03c:	4618      	mov	r0, r3
    b03e:	f000 fdf7 	bl	bc30 <xTaskRemoveFromEventList>
    b042:	4603      	mov	r3, r0
    b044:	2b00      	cmp	r3, #0
    b046:	d007      	beq.n	b058 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
    b048:	4b3c      	ldr	r3, [pc, #240]	; (b13c <xQueueReceive+0x1b4>)
    b04a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    b04e:	601a      	str	r2, [r3, #0]
    b050:	f3bf 8f4f 	dsb	sy
    b054:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    b058:	f001 fd02 	bl	ca60 <vPortExitCritical>
				return pdPASS;
    b05c:	2301      	movs	r3, #1
    b05e:	e069      	b.n	b134 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    b060:	687b      	ldr	r3, [r7, #4]
    b062:	2b00      	cmp	r3, #0
    b064:	d103      	bne.n	b06e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    b066:	f001 fcfb 	bl	ca60 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    b06a:	2300      	movs	r3, #0
    b06c:	e062      	b.n	b134 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
    b06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b070:	2b00      	cmp	r3, #0
    b072:	d106      	bne.n	b082 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
    b074:	f107 0310 	add.w	r3, r7, #16
    b078:	4618      	mov	r0, r3
    b07a:	f000 fe3b 	bl	bcf4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    b07e:	2301      	movs	r3, #1
    b080:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    b082:	f001 fced 	bl	ca60 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    b086:	f000 fbb7 	bl	b7f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    b08a:	f001 fcbb 	bl	ca04 <vPortEnterCritical>
    b08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b090:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    b094:	b25b      	sxtb	r3, r3
    b096:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    b09a:	d103      	bne.n	b0a4 <xQueueReceive+0x11c>
    b09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b09e:	2200      	movs	r2, #0
    b0a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    b0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b0a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    b0aa:	b25b      	sxtb	r3, r3
    b0ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    b0b0:	d103      	bne.n	b0ba <xQueueReceive+0x132>
    b0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b0b4:	2200      	movs	r2, #0
    b0b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    b0ba:	f001 fcd1 	bl	ca60 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    b0be:	1d3a      	adds	r2, r7, #4
    b0c0:	f107 0310 	add.w	r3, r7, #16
    b0c4:	4611      	mov	r1, r2
    b0c6:	4618      	mov	r0, r3
    b0c8:	f000 fe2a 	bl	bd20 <xTaskCheckForTimeOut>
    b0cc:	4603      	mov	r3, r0
    b0ce:	2b00      	cmp	r3, #0
    b0d0:	d123      	bne.n	b11a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    b0d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b0d4:	f000 f916 	bl	b304 <prvIsQueueEmpty>
    b0d8:	4603      	mov	r3, r0
    b0da:	2b00      	cmp	r3, #0
    b0dc:	d017      	beq.n	b10e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    b0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b0e0:	3324      	adds	r3, #36	; 0x24
    b0e2:	687a      	ldr	r2, [r7, #4]
    b0e4:	4611      	mov	r1, r2
    b0e6:	4618      	mov	r0, r3
    b0e8:	f000 fd54 	bl	bb94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    b0ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b0ee:	f000 f8b7 	bl	b260 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    b0f2:	f000 fb8f 	bl	b814 <xTaskResumeAll>
    b0f6:	4603      	mov	r3, r0
    b0f8:	2b00      	cmp	r3, #0
    b0fa:	d189      	bne.n	b010 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
    b0fc:	4b0f      	ldr	r3, [pc, #60]	; (b13c <xQueueReceive+0x1b4>)
    b0fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    b102:	601a      	str	r2, [r3, #0]
    b104:	f3bf 8f4f 	dsb	sy
    b108:	f3bf 8f6f 	isb	sy
    b10c:	e780      	b.n	b010 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
    b10e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b110:	f000 f8a6 	bl	b260 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    b114:	f000 fb7e 	bl	b814 <xTaskResumeAll>
    b118:	e77a      	b.n	b010 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
    b11a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b11c:	f000 f8a0 	bl	b260 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    b120:	f000 fb78 	bl	b814 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    b124:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b126:	f000 f8ed 	bl	b304 <prvIsQueueEmpty>
    b12a:	4603      	mov	r3, r0
    b12c:	2b00      	cmp	r3, #0
    b12e:	f43f af6f 	beq.w	b010 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    b132:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
    b134:	4618      	mov	r0, r3
    b136:	3730      	adds	r7, #48	; 0x30
    b138:	46bd      	mov	sp, r7
    b13a:	bd80      	pop	{r7, pc}
    b13c:	e000ed04 	.word	0xe000ed04

0000b140 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    b140:	b580      	push	{r7, lr}
    b142:	b086      	sub	sp, #24
    b144:	af00      	add	r7, sp, #0
    b146:	60f8      	str	r0, [r7, #12]
    b148:	60b9      	str	r1, [r7, #8]
    b14a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
    b14c:	2300      	movs	r3, #0
    b14e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    b150:	68fb      	ldr	r3, [r7, #12]
    b152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    b154:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    b156:	68fb      	ldr	r3, [r7, #12]
    b158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b15a:	2b00      	cmp	r3, #0
    b15c:	d10d      	bne.n	b17a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    b15e:	68fb      	ldr	r3, [r7, #12]
    b160:	681b      	ldr	r3, [r3, #0]
    b162:	2b00      	cmp	r3, #0
    b164:	d14d      	bne.n	b202 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
    b166:	68fb      	ldr	r3, [r7, #12]
    b168:	689b      	ldr	r3, [r3, #8]
    b16a:	4618      	mov	r0, r3
    b16c:	f000 ff34 	bl	bfd8 <xTaskPriorityDisinherit>
    b170:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
    b172:	68fb      	ldr	r3, [r7, #12]
    b174:	2200      	movs	r2, #0
    b176:	609a      	str	r2, [r3, #8]
    b178:	e043      	b.n	b202 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    b17a:	687b      	ldr	r3, [r7, #4]
    b17c:	2b00      	cmp	r3, #0
    b17e:	d119      	bne.n	b1b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
    b180:	68fb      	ldr	r3, [r7, #12]
    b182:	6858      	ldr	r0, [r3, #4]
    b184:	68fb      	ldr	r3, [r7, #12]
    b186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b188:	461a      	mov	r2, r3
    b18a:	68b9      	ldr	r1, [r7, #8]
    b18c:	f001 fdde 	bl	cd4c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
    b190:	68fb      	ldr	r3, [r7, #12]
    b192:	685a      	ldr	r2, [r3, #4]
    b194:	68fb      	ldr	r3, [r7, #12]
    b196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b198:	441a      	add	r2, r3
    b19a:	68fb      	ldr	r3, [r7, #12]
    b19c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    b19e:	68fb      	ldr	r3, [r7, #12]
    b1a0:	685a      	ldr	r2, [r3, #4]
    b1a2:	68fb      	ldr	r3, [r7, #12]
    b1a4:	689b      	ldr	r3, [r3, #8]
    b1a6:	429a      	cmp	r2, r3
    b1a8:	d32b      	bcc.n	b202 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    b1aa:	68fb      	ldr	r3, [r7, #12]
    b1ac:	681a      	ldr	r2, [r3, #0]
    b1ae:	68fb      	ldr	r3, [r7, #12]
    b1b0:	605a      	str	r2, [r3, #4]
    b1b2:	e026      	b.n	b202 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
    b1b4:	68fb      	ldr	r3, [r7, #12]
    b1b6:	68d8      	ldr	r0, [r3, #12]
    b1b8:	68fb      	ldr	r3, [r7, #12]
    b1ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b1bc:	461a      	mov	r2, r3
    b1be:	68b9      	ldr	r1, [r7, #8]
    b1c0:	f001 fdc4 	bl	cd4c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
    b1c4:	68fb      	ldr	r3, [r7, #12]
    b1c6:	68da      	ldr	r2, [r3, #12]
    b1c8:	68fb      	ldr	r3, [r7, #12]
    b1ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b1cc:	425b      	negs	r3, r3
    b1ce:	441a      	add	r2, r3
    b1d0:	68fb      	ldr	r3, [r7, #12]
    b1d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    b1d4:	68fb      	ldr	r3, [r7, #12]
    b1d6:	68da      	ldr	r2, [r3, #12]
    b1d8:	68fb      	ldr	r3, [r7, #12]
    b1da:	681b      	ldr	r3, [r3, #0]
    b1dc:	429a      	cmp	r2, r3
    b1de:	d207      	bcs.n	b1f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
    b1e0:	68fb      	ldr	r3, [r7, #12]
    b1e2:	689a      	ldr	r2, [r3, #8]
    b1e4:	68fb      	ldr	r3, [r7, #12]
    b1e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b1e8:	425b      	negs	r3, r3
    b1ea:	441a      	add	r2, r3
    b1ec:	68fb      	ldr	r3, [r7, #12]
    b1ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    b1f0:	687b      	ldr	r3, [r7, #4]
    b1f2:	2b02      	cmp	r3, #2
    b1f4:	d105      	bne.n	b202 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    b1f6:	693b      	ldr	r3, [r7, #16]
    b1f8:	2b00      	cmp	r3, #0
    b1fa:	d002      	beq.n	b202 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    b1fc:	693b      	ldr	r3, [r7, #16]
    b1fe:	3b01      	subs	r3, #1
    b200:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    b202:	693b      	ldr	r3, [r7, #16]
    b204:	1c5a      	adds	r2, r3, #1
    b206:	68fb      	ldr	r3, [r7, #12]
    b208:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
    b20a:	697b      	ldr	r3, [r7, #20]
}
    b20c:	4618      	mov	r0, r3
    b20e:	3718      	adds	r7, #24
    b210:	46bd      	mov	sp, r7
    b212:	bd80      	pop	{r7, pc}

0000b214 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    b214:	b580      	push	{r7, lr}
    b216:	b082      	sub	sp, #8
    b218:	af00      	add	r7, sp, #0
    b21a:	6078      	str	r0, [r7, #4]
    b21c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    b21e:	687b      	ldr	r3, [r7, #4]
    b220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b222:	2b00      	cmp	r3, #0
    b224:	d018      	beq.n	b258 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
    b226:	687b      	ldr	r3, [r7, #4]
    b228:	68da      	ldr	r2, [r3, #12]
    b22a:	687b      	ldr	r3, [r7, #4]
    b22c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b22e:	441a      	add	r2, r3
    b230:	687b      	ldr	r3, [r7, #4]
    b232:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    b234:	687b      	ldr	r3, [r7, #4]
    b236:	68da      	ldr	r2, [r3, #12]
    b238:	687b      	ldr	r3, [r7, #4]
    b23a:	689b      	ldr	r3, [r3, #8]
    b23c:	429a      	cmp	r2, r3
    b23e:	d303      	bcc.n	b248 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
    b240:	687b      	ldr	r3, [r7, #4]
    b242:	681a      	ldr	r2, [r3, #0]
    b244:	687b      	ldr	r3, [r7, #4]
    b246:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
    b248:	687b      	ldr	r3, [r7, #4]
    b24a:	68d9      	ldr	r1, [r3, #12]
    b24c:	687b      	ldr	r3, [r7, #4]
    b24e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b250:	461a      	mov	r2, r3
    b252:	6838      	ldr	r0, [r7, #0]
    b254:	f001 fd7a 	bl	cd4c <memcpy>
	}
}
    b258:	bf00      	nop
    b25a:	3708      	adds	r7, #8
    b25c:	46bd      	mov	sp, r7
    b25e:	bd80      	pop	{r7, pc}

0000b260 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    b260:	b580      	push	{r7, lr}
    b262:	b084      	sub	sp, #16
    b264:	af00      	add	r7, sp, #0
    b266:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    b268:	f001 fbcc 	bl	ca04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
    b26c:	687b      	ldr	r3, [r7, #4]
    b26e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    b272:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    b274:	e011      	b.n	b29a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    b276:	687b      	ldr	r3, [r7, #4]
    b278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b27a:	2b00      	cmp	r3, #0
    b27c:	d012      	beq.n	b2a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    b27e:	687b      	ldr	r3, [r7, #4]
    b280:	3324      	adds	r3, #36	; 0x24
    b282:	4618      	mov	r0, r3
    b284:	f000 fcd4 	bl	bc30 <xTaskRemoveFromEventList>
    b288:	4603      	mov	r3, r0
    b28a:	2b00      	cmp	r3, #0
    b28c:	d001      	beq.n	b292 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
    b28e:	f000 fda7 	bl	bde0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    b292:	7bfb      	ldrb	r3, [r7, #15]
    b294:	3b01      	subs	r3, #1
    b296:	b2db      	uxtb	r3, r3
    b298:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
    b29a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    b29e:	2b00      	cmp	r3, #0
    b2a0:	dce9      	bgt.n	b276 <prvUnlockQueue+0x16>
    b2a2:	e000      	b.n	b2a6 <prvUnlockQueue+0x46>
					break;
    b2a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
    b2a6:	687b      	ldr	r3, [r7, #4]
    b2a8:	22ff      	movs	r2, #255	; 0xff
    b2aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
    b2ae:	f001 fbd7 	bl	ca60 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    b2b2:	f001 fba7 	bl	ca04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
    b2b6:	687b      	ldr	r3, [r7, #4]
    b2b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    b2bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
    b2be:	e011      	b.n	b2e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    b2c0:	687b      	ldr	r3, [r7, #4]
    b2c2:	691b      	ldr	r3, [r3, #16]
    b2c4:	2b00      	cmp	r3, #0
    b2c6:	d012      	beq.n	b2ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    b2c8:	687b      	ldr	r3, [r7, #4]
    b2ca:	3310      	adds	r3, #16
    b2cc:	4618      	mov	r0, r3
    b2ce:	f000 fcaf 	bl	bc30 <xTaskRemoveFromEventList>
    b2d2:	4603      	mov	r3, r0
    b2d4:	2b00      	cmp	r3, #0
    b2d6:	d001      	beq.n	b2dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
    b2d8:	f000 fd82 	bl	bde0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    b2dc:	7bbb      	ldrb	r3, [r7, #14]
    b2de:	3b01      	subs	r3, #1
    b2e0:	b2db      	uxtb	r3, r3
    b2e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
    b2e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
    b2e8:	2b00      	cmp	r3, #0
    b2ea:	dce9      	bgt.n	b2c0 <prvUnlockQueue+0x60>
    b2ec:	e000      	b.n	b2f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
    b2ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    b2f0:	687b      	ldr	r3, [r7, #4]
    b2f2:	22ff      	movs	r2, #255	; 0xff
    b2f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    b2f8:	f001 fbb2 	bl	ca60 <vPortExitCritical>
}
    b2fc:	bf00      	nop
    b2fe:	3710      	adds	r7, #16
    b300:	46bd      	mov	sp, r7
    b302:	bd80      	pop	{r7, pc}

0000b304 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    b304:	b580      	push	{r7, lr}
    b306:	b084      	sub	sp, #16
    b308:	af00      	add	r7, sp, #0
    b30a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    b30c:	f001 fb7a 	bl	ca04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    b310:	687b      	ldr	r3, [r7, #4]
    b312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    b314:	2b00      	cmp	r3, #0
    b316:	d102      	bne.n	b31e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
    b318:	2301      	movs	r3, #1
    b31a:	60fb      	str	r3, [r7, #12]
    b31c:	e001      	b.n	b322 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
    b31e:	2300      	movs	r3, #0
    b320:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    b322:	f001 fb9d 	bl	ca60 <vPortExitCritical>

	return xReturn;
    b326:	68fb      	ldr	r3, [r7, #12]
}
    b328:	4618      	mov	r0, r3
    b32a:	3710      	adds	r7, #16
    b32c:	46bd      	mov	sp, r7
    b32e:	bd80      	pop	{r7, pc}

0000b330 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    b330:	b580      	push	{r7, lr}
    b332:	b084      	sub	sp, #16
    b334:	af00      	add	r7, sp, #0
    b336:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    b338:	f001 fb64 	bl	ca04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    b33c:	687b      	ldr	r3, [r7, #4]
    b33e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    b340:	687b      	ldr	r3, [r7, #4]
    b342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    b344:	429a      	cmp	r2, r3
    b346:	d102      	bne.n	b34e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
    b348:	2301      	movs	r3, #1
    b34a:	60fb      	str	r3, [r7, #12]
    b34c:	e001      	b.n	b352 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
    b34e:	2300      	movs	r3, #0
    b350:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    b352:	f001 fb85 	bl	ca60 <vPortExitCritical>

	return xReturn;
    b356:	68fb      	ldr	r3, [r7, #12]
}
    b358:	4618      	mov	r0, r3
    b35a:	3710      	adds	r7, #16
    b35c:	46bd      	mov	sp, r7
    b35e:	bd80      	pop	{r7, pc}

0000b360 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    b360:	b480      	push	{r7}
    b362:	b085      	sub	sp, #20
    b364:	af00      	add	r7, sp, #0
    b366:	6078      	str	r0, [r7, #4]
    b368:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    b36a:	2300      	movs	r3, #0
    b36c:	60fb      	str	r3, [r7, #12]
    b36e:	e014      	b.n	b39a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
    b370:	4a0e      	ldr	r2, [pc, #56]	; (b3ac <vQueueAddToRegistry+0x4c>)
    b372:	68fb      	ldr	r3, [r7, #12]
    b374:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    b378:	2b00      	cmp	r3, #0
    b37a:	d10b      	bne.n	b394 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
    b37c:	490b      	ldr	r1, [pc, #44]	; (b3ac <vQueueAddToRegistry+0x4c>)
    b37e:	68fb      	ldr	r3, [r7, #12]
    b380:	683a      	ldr	r2, [r7, #0]
    b382:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
    b386:	4a09      	ldr	r2, [pc, #36]	; (b3ac <vQueueAddToRegistry+0x4c>)
    b388:	68fb      	ldr	r3, [r7, #12]
    b38a:	00db      	lsls	r3, r3, #3
    b38c:	4413      	add	r3, r2
    b38e:	687a      	ldr	r2, [r7, #4]
    b390:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
    b392:	e005      	b.n	b3a0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    b394:	68fb      	ldr	r3, [r7, #12]
    b396:	3301      	adds	r3, #1
    b398:	60fb      	str	r3, [r7, #12]
    b39a:	68fb      	ldr	r3, [r7, #12]
    b39c:	2b07      	cmp	r3, #7
    b39e:	d9e7      	bls.n	b370 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    b3a0:	bf00      	nop
    b3a2:	3714      	adds	r7, #20
    b3a4:	46bd      	mov	sp, r7
    b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    b3aa:	4770      	bx	lr
    b3ac:	0001e050 	.word	0x0001e050

0000b3b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    b3b0:	b580      	push	{r7, lr}
    b3b2:	b086      	sub	sp, #24
    b3b4:	af00      	add	r7, sp, #0
    b3b6:	60f8      	str	r0, [r7, #12]
    b3b8:	60b9      	str	r1, [r7, #8]
    b3ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
    b3bc:	68fb      	ldr	r3, [r7, #12]
    b3be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    b3c0:	f001 fb20 	bl	ca04 <vPortEnterCritical>
    b3c4:	697b      	ldr	r3, [r7, #20]
    b3c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    b3ca:	b25b      	sxtb	r3, r3
    b3cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    b3d0:	d103      	bne.n	b3da <vQueueWaitForMessageRestricted+0x2a>
    b3d2:	697b      	ldr	r3, [r7, #20]
    b3d4:	2200      	movs	r2, #0
    b3d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    b3da:	697b      	ldr	r3, [r7, #20]
    b3dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    b3e0:	b25b      	sxtb	r3, r3
    b3e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    b3e6:	d103      	bne.n	b3f0 <vQueueWaitForMessageRestricted+0x40>
    b3e8:	697b      	ldr	r3, [r7, #20]
    b3ea:	2200      	movs	r2, #0
    b3ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    b3f0:	f001 fb36 	bl	ca60 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    b3f4:	697b      	ldr	r3, [r7, #20]
    b3f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    b3f8:	2b00      	cmp	r3, #0
    b3fa:	d106      	bne.n	b40a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    b3fc:	697b      	ldr	r3, [r7, #20]
    b3fe:	3324      	adds	r3, #36	; 0x24
    b400:	687a      	ldr	r2, [r7, #4]
    b402:	68b9      	ldr	r1, [r7, #8]
    b404:	4618      	mov	r0, r3
    b406:	f000 fbe9 	bl	bbdc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    b40a:	6978      	ldr	r0, [r7, #20]
    b40c:	f7ff ff28 	bl	b260 <prvUnlockQueue>
	}
    b410:	bf00      	nop
    b412:	3718      	adds	r7, #24
    b414:	46bd      	mov	sp, r7
    b416:	bd80      	pop	{r7, pc}

0000b418 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
    b418:	b580      	push	{r7, lr}
    b41a:	b08e      	sub	sp, #56	; 0x38
    b41c:	af04      	add	r7, sp, #16
    b41e:	60f8      	str	r0, [r7, #12]
    b420:	60b9      	str	r1, [r7, #8]
    b422:	607a      	str	r2, [r7, #4]
    b424:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
    b426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    b428:	2b00      	cmp	r3, #0
    b42a:	d109      	bne.n	b440 <xTaskCreateStatic+0x28>
    b42c:	f04f 0350 	mov.w	r3, #80	; 0x50
    b430:	f383 8811 	msr	BASEPRI, r3
    b434:	f3bf 8f6f 	isb	sy
    b438:	f3bf 8f4f 	dsb	sy
    b43c:	623b      	str	r3, [r7, #32]
    b43e:	e7fe      	b.n	b43e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
    b440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b442:	2b00      	cmp	r3, #0
    b444:	d109      	bne.n	b45a <xTaskCreateStatic+0x42>
    b446:	f04f 0350 	mov.w	r3, #80	; 0x50
    b44a:	f383 8811 	msr	BASEPRI, r3
    b44e:	f3bf 8f6f 	isb	sy
    b452:	f3bf 8f4f 	dsb	sy
    b456:	61fb      	str	r3, [r7, #28]
    b458:	e7fe      	b.n	b458 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
    b45a:	235c      	movs	r3, #92	; 0x5c
    b45c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
    b45e:	693b      	ldr	r3, [r7, #16]
    b460:	2b5c      	cmp	r3, #92	; 0x5c
    b462:	d009      	beq.n	b478 <xTaskCreateStatic+0x60>
    b464:	f04f 0350 	mov.w	r3, #80	; 0x50
    b468:	f383 8811 	msr	BASEPRI, r3
    b46c:	f3bf 8f6f 	isb	sy
    b470:	f3bf 8f4f 	dsb	sy
    b474:	61bb      	str	r3, [r7, #24]
    b476:	e7fe      	b.n	b476 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
    b478:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
    b47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b47c:	2b00      	cmp	r3, #0
    b47e:	d01e      	beq.n	b4be <xTaskCreateStatic+0xa6>
    b480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    b482:	2b00      	cmp	r3, #0
    b484:	d01b      	beq.n	b4be <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
    b486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b488:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
    b48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b48c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    b48e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
    b490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b492:	2202      	movs	r2, #2
    b494:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
    b498:	2300      	movs	r3, #0
    b49a:	9303      	str	r3, [sp, #12]
    b49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b49e:	9302      	str	r3, [sp, #8]
    b4a0:	f107 0314 	add.w	r3, r7, #20
    b4a4:	9301      	str	r3, [sp, #4]
    b4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b4a8:	9300      	str	r3, [sp, #0]
    b4aa:	683b      	ldr	r3, [r7, #0]
    b4ac:	687a      	ldr	r2, [r7, #4]
    b4ae:	68b9      	ldr	r1, [r7, #8]
    b4b0:	68f8      	ldr	r0, [r7, #12]
    b4b2:	f000 f80b 	bl	b4cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
    b4b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
    b4b8:	f000 f896 	bl	b5e8 <prvAddNewTaskToReadyList>
    b4bc:	e001      	b.n	b4c2 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
    b4be:	2300      	movs	r3, #0
    b4c0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
    b4c2:	697b      	ldr	r3, [r7, #20]
	}
    b4c4:	4618      	mov	r0, r3
    b4c6:	3728      	adds	r7, #40	; 0x28
    b4c8:	46bd      	mov	sp, r7
    b4ca:	bd80      	pop	{r7, pc}

0000b4cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
    b4cc:	b580      	push	{r7, lr}
    b4ce:	b088      	sub	sp, #32
    b4d0:	af00      	add	r7, sp, #0
    b4d2:	60f8      	str	r0, [r7, #12]
    b4d4:	60b9      	str	r1, [r7, #8]
    b4d6:	607a      	str	r2, [r7, #4]
    b4d8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    b4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b4dc:	6b18      	ldr	r0, [r3, #48]	; 0x30
    b4de:	687b      	ldr	r3, [r7, #4]
    b4e0:	009b      	lsls	r3, r3, #2
    b4e2:	461a      	mov	r2, r3
    b4e4:	21a5      	movs	r1, #165	; 0xa5
    b4e6:	f001 fc3c 	bl	cd62 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
    b4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b4ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    b4ee:	687b      	ldr	r3, [r7, #4]
    b4f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    b4f4:	3b01      	subs	r3, #1
    b4f6:	009b      	lsls	r3, r3, #2
    b4f8:	4413      	add	r3, r2
    b4fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
    b4fc:	69bb      	ldr	r3, [r7, #24]
    b4fe:	f023 0307 	bic.w	r3, r3, #7
    b502:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
    b504:	69bb      	ldr	r3, [r7, #24]
    b506:	f003 0307 	and.w	r3, r3, #7
    b50a:	2b00      	cmp	r3, #0
    b50c:	d009      	beq.n	b522 <prvInitialiseNewTask+0x56>
    b50e:	f04f 0350 	mov.w	r3, #80	; 0x50
    b512:	f383 8811 	msr	BASEPRI, r3
    b516:	f3bf 8f6f 	isb	sy
    b51a:	f3bf 8f4f 	dsb	sy
    b51e:	617b      	str	r3, [r7, #20]
    b520:	e7fe      	b.n	b520 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
    b522:	68bb      	ldr	r3, [r7, #8]
    b524:	2b00      	cmp	r3, #0
    b526:	d01f      	beq.n	b568 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    b528:	2300      	movs	r3, #0
    b52a:	61fb      	str	r3, [r7, #28]
    b52c:	e012      	b.n	b554 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    b52e:	68ba      	ldr	r2, [r7, #8]
    b530:	69fb      	ldr	r3, [r7, #28]
    b532:	4413      	add	r3, r2
    b534:	7819      	ldrb	r1, [r3, #0]
    b536:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    b538:	69fb      	ldr	r3, [r7, #28]
    b53a:	4413      	add	r3, r2
    b53c:	3334      	adds	r3, #52	; 0x34
    b53e:	460a      	mov	r2, r1
    b540:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
    b542:	68ba      	ldr	r2, [r7, #8]
    b544:	69fb      	ldr	r3, [r7, #28]
    b546:	4413      	add	r3, r2
    b548:	781b      	ldrb	r3, [r3, #0]
    b54a:	2b00      	cmp	r3, #0
    b54c:	d006      	beq.n	b55c <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    b54e:	69fb      	ldr	r3, [r7, #28]
    b550:	3301      	adds	r3, #1
    b552:	61fb      	str	r3, [r7, #28]
    b554:	69fb      	ldr	r3, [r7, #28]
    b556:	2b0f      	cmp	r3, #15
    b558:	d9e9      	bls.n	b52e <prvInitialiseNewTask+0x62>
    b55a:	e000      	b.n	b55e <prvInitialiseNewTask+0x92>
			{
				break;
    b55c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    b55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b560:	2200      	movs	r2, #0
    b562:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    b566:	e003      	b.n	b570 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
    b568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b56a:	2200      	movs	r2, #0
    b56c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    b570:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b572:	2b37      	cmp	r3, #55	; 0x37
    b574:	d901      	bls.n	b57a <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    b576:	2337      	movs	r3, #55	; 0x37
    b578:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    b57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b57c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b57e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    b580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b582:	6aba      	ldr	r2, [r7, #40]	; 0x28
    b584:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
    b586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b588:	2200      	movs	r2, #0
    b58a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    b58c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b58e:	3304      	adds	r3, #4
    b590:	4618      	mov	r0, r3
    b592:	f7ff f9d9 	bl	a948 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    b596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b598:	3318      	adds	r3, #24
    b59a:	4618      	mov	r0, r3
    b59c:	f7ff f9d4 	bl	a948 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    b5a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b5a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    b5a4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    b5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b5a8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
    b5ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b5ae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    b5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b5b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    b5b4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    b5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b5b8:	2200      	movs	r2, #0
    b5ba:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    b5bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b5be:	2200      	movs	r2, #0
    b5c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    b5c4:	683a      	ldr	r2, [r7, #0]
    b5c6:	68f9      	ldr	r1, [r7, #12]
    b5c8:	69b8      	ldr	r0, [r7, #24]
    b5ca:	f001 f90b 	bl	c7e4 <pxPortInitialiseStack>
    b5ce:	4602      	mov	r2, r0
    b5d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b5d2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
    b5d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b5d6:	2b00      	cmp	r3, #0
    b5d8:	d002      	beq.n	b5e0 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    b5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b5dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    b5de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    b5e0:	bf00      	nop
    b5e2:	3720      	adds	r7, #32
    b5e4:	46bd      	mov	sp, r7
    b5e6:	bd80      	pop	{r7, pc}

0000b5e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    b5e8:	b580      	push	{r7, lr}
    b5ea:	b082      	sub	sp, #8
    b5ec:	af00      	add	r7, sp, #0
    b5ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    b5f0:	f001 fa08 	bl	ca04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
    b5f4:	4b2d      	ldr	r3, [pc, #180]	; (b6ac <prvAddNewTaskToReadyList+0xc4>)
    b5f6:	681b      	ldr	r3, [r3, #0]
    b5f8:	3301      	adds	r3, #1
    b5fa:	4a2c      	ldr	r2, [pc, #176]	; (b6ac <prvAddNewTaskToReadyList+0xc4>)
    b5fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
    b5fe:	4b2c      	ldr	r3, [pc, #176]	; (b6b0 <prvAddNewTaskToReadyList+0xc8>)
    b600:	681b      	ldr	r3, [r3, #0]
    b602:	2b00      	cmp	r3, #0
    b604:	d109      	bne.n	b61a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    b606:	4a2a      	ldr	r2, [pc, #168]	; (b6b0 <prvAddNewTaskToReadyList+0xc8>)
    b608:	687b      	ldr	r3, [r7, #4]
    b60a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    b60c:	4b27      	ldr	r3, [pc, #156]	; (b6ac <prvAddNewTaskToReadyList+0xc4>)
    b60e:	681b      	ldr	r3, [r3, #0]
    b610:	2b01      	cmp	r3, #1
    b612:	d110      	bne.n	b636 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    b614:	f000 fc08 	bl	be28 <prvInitialiseTaskLists>
    b618:	e00d      	b.n	b636 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    b61a:	4b26      	ldr	r3, [pc, #152]	; (b6b4 <prvAddNewTaskToReadyList+0xcc>)
    b61c:	681b      	ldr	r3, [r3, #0]
    b61e:	2b00      	cmp	r3, #0
    b620:	d109      	bne.n	b636 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    b622:	4b23      	ldr	r3, [pc, #140]	; (b6b0 <prvAddNewTaskToReadyList+0xc8>)
    b624:	681b      	ldr	r3, [r3, #0]
    b626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b628:	687b      	ldr	r3, [r7, #4]
    b62a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b62c:	429a      	cmp	r2, r3
    b62e:	d802      	bhi.n	b636 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
    b630:	4a1f      	ldr	r2, [pc, #124]	; (b6b0 <prvAddNewTaskToReadyList+0xc8>)
    b632:	687b      	ldr	r3, [r7, #4]
    b634:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    b636:	4b20      	ldr	r3, [pc, #128]	; (b6b8 <prvAddNewTaskToReadyList+0xd0>)
    b638:	681b      	ldr	r3, [r3, #0]
    b63a:	3301      	adds	r3, #1
    b63c:	4a1e      	ldr	r2, [pc, #120]	; (b6b8 <prvAddNewTaskToReadyList+0xd0>)
    b63e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    b640:	4b1d      	ldr	r3, [pc, #116]	; (b6b8 <prvAddNewTaskToReadyList+0xd0>)
    b642:	681a      	ldr	r2, [r3, #0]
    b644:	687b      	ldr	r3, [r7, #4]
    b646:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    b648:	687b      	ldr	r3, [r7, #4]
    b64a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b64c:	4b1b      	ldr	r3, [pc, #108]	; (b6bc <prvAddNewTaskToReadyList+0xd4>)
    b64e:	681b      	ldr	r3, [r3, #0]
    b650:	429a      	cmp	r2, r3
    b652:	d903      	bls.n	b65c <prvAddNewTaskToReadyList+0x74>
    b654:	687b      	ldr	r3, [r7, #4]
    b656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b658:	4a18      	ldr	r2, [pc, #96]	; (b6bc <prvAddNewTaskToReadyList+0xd4>)
    b65a:	6013      	str	r3, [r2, #0]
    b65c:	687b      	ldr	r3, [r7, #4]
    b65e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b660:	4613      	mov	r3, r2
    b662:	009b      	lsls	r3, r3, #2
    b664:	4413      	add	r3, r2
    b666:	009b      	lsls	r3, r3, #2
    b668:	4a15      	ldr	r2, [pc, #84]	; (b6c0 <prvAddNewTaskToReadyList+0xd8>)
    b66a:	441a      	add	r2, r3
    b66c:	687b      	ldr	r3, [r7, #4]
    b66e:	3304      	adds	r3, #4
    b670:	4619      	mov	r1, r3
    b672:	4610      	mov	r0, r2
    b674:	f7ff f975 	bl	a962 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    b678:	f001 f9f2 	bl	ca60 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
    b67c:	4b0d      	ldr	r3, [pc, #52]	; (b6b4 <prvAddNewTaskToReadyList+0xcc>)
    b67e:	681b      	ldr	r3, [r3, #0]
    b680:	2b00      	cmp	r3, #0
    b682:	d00e      	beq.n	b6a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    b684:	4b0a      	ldr	r3, [pc, #40]	; (b6b0 <prvAddNewTaskToReadyList+0xc8>)
    b686:	681b      	ldr	r3, [r3, #0]
    b688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b68a:	687b      	ldr	r3, [r7, #4]
    b68c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b68e:	429a      	cmp	r2, r3
    b690:	d207      	bcs.n	b6a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
    b692:	4b0c      	ldr	r3, [pc, #48]	; (b6c4 <prvAddNewTaskToReadyList+0xdc>)
    b694:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    b698:	601a      	str	r2, [r3, #0]
    b69a:	f3bf 8f4f 	dsb	sy
    b69e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    b6a2:	bf00      	nop
    b6a4:	3708      	adds	r7, #8
    b6a6:	46bd      	mov	sp, r7
    b6a8:	bd80      	pop	{r7, pc}
    b6aa:	bf00      	nop
    b6ac:	0001de94 	.word	0x0001de94
    b6b0:	0001d9c0 	.word	0x0001d9c0
    b6b4:	0001dea0 	.word	0x0001dea0
    b6b8:	0001deb0 	.word	0x0001deb0
    b6bc:	0001de9c 	.word	0x0001de9c
    b6c0:	0001d9c4 	.word	0x0001d9c4
    b6c4:	e000ed04 	.word	0xe000ed04

0000b6c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    b6c8:	b580      	push	{r7, lr}
    b6ca:	b084      	sub	sp, #16
    b6cc:	af00      	add	r7, sp, #0
    b6ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
    b6d0:	2300      	movs	r3, #0
    b6d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    b6d4:	687b      	ldr	r3, [r7, #4]
    b6d6:	2b00      	cmp	r3, #0
    b6d8:	d016      	beq.n	b708 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
    b6da:	4b13      	ldr	r3, [pc, #76]	; (b728 <vTaskDelay+0x60>)
    b6dc:	681b      	ldr	r3, [r3, #0]
    b6de:	2b00      	cmp	r3, #0
    b6e0:	d009      	beq.n	b6f6 <vTaskDelay+0x2e>
    b6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
    b6e6:	f383 8811 	msr	BASEPRI, r3
    b6ea:	f3bf 8f6f 	isb	sy
    b6ee:	f3bf 8f4f 	dsb	sy
    b6f2:	60bb      	str	r3, [r7, #8]
    b6f4:	e7fe      	b.n	b6f4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
    b6f6:	f000 f87f 	bl	b7f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    b6fa:	2100      	movs	r1, #0
    b6fc:	6878      	ldr	r0, [r7, #4]
    b6fe:	f000 fcd7 	bl	c0b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    b702:	f000 f887 	bl	b814 <xTaskResumeAll>
    b706:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    b708:	68fb      	ldr	r3, [r7, #12]
    b70a:	2b00      	cmp	r3, #0
    b70c:	d107      	bne.n	b71e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
    b70e:	4b07      	ldr	r3, [pc, #28]	; (b72c <vTaskDelay+0x64>)
    b710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    b714:	601a      	str	r2, [r3, #0]
    b716:	f3bf 8f4f 	dsb	sy
    b71a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    b71e:	bf00      	nop
    b720:	3710      	adds	r7, #16
    b722:	46bd      	mov	sp, r7
    b724:	bd80      	pop	{r7, pc}
    b726:	bf00      	nop
    b728:	0001debc 	.word	0x0001debc
    b72c:	e000ed04 	.word	0xe000ed04

0000b730 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    b730:	b580      	push	{r7, lr}
    b732:	b08a      	sub	sp, #40	; 0x28
    b734:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
    b736:	2300      	movs	r3, #0
    b738:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
    b73a:	2300      	movs	r3, #0
    b73c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
    b73e:	463a      	mov	r2, r7
    b740:	1d39      	adds	r1, r7, #4
    b742:	f107 0308 	add.w	r3, r7, #8
    b746:	4618      	mov	r0, r3
    b748:	f7ff f8aa 	bl	a8a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
    b74c:	6839      	ldr	r1, [r7, #0]
    b74e:	687b      	ldr	r3, [r7, #4]
    b750:	68ba      	ldr	r2, [r7, #8]
    b752:	9202      	str	r2, [sp, #8]
    b754:	9301      	str	r3, [sp, #4]
    b756:	2300      	movs	r3, #0
    b758:	9300      	str	r3, [sp, #0]
    b75a:	2300      	movs	r3, #0
    b75c:	460a      	mov	r2, r1
    b75e:	4920      	ldr	r1, [pc, #128]	; (b7e0 <vTaskStartScheduler+0xb0>)
    b760:	4820      	ldr	r0, [pc, #128]	; (b7e4 <vTaskStartScheduler+0xb4>)
    b762:	f7ff fe59 	bl	b418 <xTaskCreateStatic>
    b766:	4602      	mov	r2, r0
    b768:	4b1f      	ldr	r3, [pc, #124]	; (b7e8 <vTaskStartScheduler+0xb8>)
    b76a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
    b76c:	4b1e      	ldr	r3, [pc, #120]	; (b7e8 <vTaskStartScheduler+0xb8>)
    b76e:	681b      	ldr	r3, [r3, #0]
    b770:	2b00      	cmp	r3, #0
    b772:	d002      	beq.n	b77a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
    b774:	2301      	movs	r3, #1
    b776:	617b      	str	r3, [r7, #20]
    b778:	e001      	b.n	b77e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
    b77a:	2300      	movs	r3, #0
    b77c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    b77e:	697b      	ldr	r3, [r7, #20]
    b780:	2b01      	cmp	r3, #1
    b782:	d102      	bne.n	b78a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
    b784:	f000 fce8 	bl	c158 <xTimerCreateTimerTask>
    b788:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    b78a:	697b      	ldr	r3, [r7, #20]
    b78c:	2b01      	cmp	r3, #1
    b78e:	d115      	bne.n	b7bc <vTaskStartScheduler+0x8c>
    b790:	f04f 0350 	mov.w	r3, #80	; 0x50
    b794:	f383 8811 	msr	BASEPRI, r3
    b798:	f3bf 8f6f 	isb	sy
    b79c:	f3bf 8f4f 	dsb	sy
    b7a0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    b7a2:	4b12      	ldr	r3, [pc, #72]	; (b7ec <vTaskStartScheduler+0xbc>)
    b7a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b7a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    b7aa:	4b11      	ldr	r3, [pc, #68]	; (b7f0 <vTaskStartScheduler+0xc0>)
    b7ac:	2201      	movs	r2, #1
    b7ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
    b7b0:	4b10      	ldr	r3, [pc, #64]	; (b7f4 <vTaskStartScheduler+0xc4>)
    b7b2:	2200      	movs	r2, #0
    b7b4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    b7b6:	f001 f887 	bl	c8c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    b7ba:	e00d      	b.n	b7d8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    b7bc:	697b      	ldr	r3, [r7, #20]
    b7be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    b7c2:	d109      	bne.n	b7d8 <vTaskStartScheduler+0xa8>
    b7c4:	f04f 0350 	mov.w	r3, #80	; 0x50
    b7c8:	f383 8811 	msr	BASEPRI, r3
    b7cc:	f3bf 8f6f 	isb	sy
    b7d0:	f3bf 8f4f 	dsb	sy
    b7d4:	60fb      	str	r3, [r7, #12]
    b7d6:	e7fe      	b.n	b7d6 <vTaskStartScheduler+0xa6>
}
    b7d8:	bf00      	nop
    b7da:	3718      	adds	r7, #24
    b7dc:	46bd      	mov	sp, r7
    b7de:	bd80      	pop	{r7, pc}
    b7e0:	0000d14c 	.word	0x0000d14c
    b7e4:	0000bdf9 	.word	0x0000bdf9
    b7e8:	0001deb8 	.word	0x0001deb8
    b7ec:	0001deb4 	.word	0x0001deb4
    b7f0:	0001dea0 	.word	0x0001dea0
    b7f4:	0001de98 	.word	0x0001de98

0000b7f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    b7f8:	b480      	push	{r7}
    b7fa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    b7fc:	4b04      	ldr	r3, [pc, #16]	; (b810 <vTaskSuspendAll+0x18>)
    b7fe:	681b      	ldr	r3, [r3, #0]
    b800:	3301      	adds	r3, #1
    b802:	4a03      	ldr	r2, [pc, #12]	; (b810 <vTaskSuspendAll+0x18>)
    b804:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
    b806:	bf00      	nop
    b808:	46bd      	mov	sp, r7
    b80a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b80e:	4770      	bx	lr
    b810:	0001debc 	.word	0x0001debc

0000b814 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    b814:	b580      	push	{r7, lr}
    b816:	b084      	sub	sp, #16
    b818:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
    b81a:	2300      	movs	r3, #0
    b81c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
    b81e:	2300      	movs	r3, #0
    b820:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    b822:	4b41      	ldr	r3, [pc, #260]	; (b928 <xTaskResumeAll+0x114>)
    b824:	681b      	ldr	r3, [r3, #0]
    b826:	2b00      	cmp	r3, #0
    b828:	d109      	bne.n	b83e <xTaskResumeAll+0x2a>
    b82a:	f04f 0350 	mov.w	r3, #80	; 0x50
    b82e:	f383 8811 	msr	BASEPRI, r3
    b832:	f3bf 8f6f 	isb	sy
    b836:	f3bf 8f4f 	dsb	sy
    b83a:	603b      	str	r3, [r7, #0]
    b83c:	e7fe      	b.n	b83c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    b83e:	f001 f8e1 	bl	ca04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    b842:	4b39      	ldr	r3, [pc, #228]	; (b928 <xTaskResumeAll+0x114>)
    b844:	681b      	ldr	r3, [r3, #0]
    b846:	3b01      	subs	r3, #1
    b848:	4a37      	ldr	r2, [pc, #220]	; (b928 <xTaskResumeAll+0x114>)
    b84a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    b84c:	4b36      	ldr	r3, [pc, #216]	; (b928 <xTaskResumeAll+0x114>)
    b84e:	681b      	ldr	r3, [r3, #0]
    b850:	2b00      	cmp	r3, #0
    b852:	d162      	bne.n	b91a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    b854:	4b35      	ldr	r3, [pc, #212]	; (b92c <xTaskResumeAll+0x118>)
    b856:	681b      	ldr	r3, [r3, #0]
    b858:	2b00      	cmp	r3, #0
    b85a:	d05e      	beq.n	b91a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    b85c:	e02f      	b.n	b8be <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    b85e:	4b34      	ldr	r3, [pc, #208]	; (b930 <xTaskResumeAll+0x11c>)
    b860:	68db      	ldr	r3, [r3, #12]
    b862:	68db      	ldr	r3, [r3, #12]
    b864:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    b866:	68fb      	ldr	r3, [r7, #12]
    b868:	3318      	adds	r3, #24
    b86a:	4618      	mov	r0, r3
    b86c:	f7ff f8d6 	bl	aa1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    b870:	68fb      	ldr	r3, [r7, #12]
    b872:	3304      	adds	r3, #4
    b874:	4618      	mov	r0, r3
    b876:	f7ff f8d1 	bl	aa1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    b87a:	68fb      	ldr	r3, [r7, #12]
    b87c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b87e:	4b2d      	ldr	r3, [pc, #180]	; (b934 <xTaskResumeAll+0x120>)
    b880:	681b      	ldr	r3, [r3, #0]
    b882:	429a      	cmp	r2, r3
    b884:	d903      	bls.n	b88e <xTaskResumeAll+0x7a>
    b886:	68fb      	ldr	r3, [r7, #12]
    b888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b88a:	4a2a      	ldr	r2, [pc, #168]	; (b934 <xTaskResumeAll+0x120>)
    b88c:	6013      	str	r3, [r2, #0]
    b88e:	68fb      	ldr	r3, [r7, #12]
    b890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b892:	4613      	mov	r3, r2
    b894:	009b      	lsls	r3, r3, #2
    b896:	4413      	add	r3, r2
    b898:	009b      	lsls	r3, r3, #2
    b89a:	4a27      	ldr	r2, [pc, #156]	; (b938 <xTaskResumeAll+0x124>)
    b89c:	441a      	add	r2, r3
    b89e:	68fb      	ldr	r3, [r7, #12]
    b8a0:	3304      	adds	r3, #4
    b8a2:	4619      	mov	r1, r3
    b8a4:	4610      	mov	r0, r2
    b8a6:	f7ff f85c 	bl	a962 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    b8aa:	68fb      	ldr	r3, [r7, #12]
    b8ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b8ae:	4b23      	ldr	r3, [pc, #140]	; (b93c <xTaskResumeAll+0x128>)
    b8b0:	681b      	ldr	r3, [r3, #0]
    b8b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b8b4:	429a      	cmp	r2, r3
    b8b6:	d302      	bcc.n	b8be <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
    b8b8:	4b21      	ldr	r3, [pc, #132]	; (b940 <xTaskResumeAll+0x12c>)
    b8ba:	2201      	movs	r2, #1
    b8bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    b8be:	4b1c      	ldr	r3, [pc, #112]	; (b930 <xTaskResumeAll+0x11c>)
    b8c0:	681b      	ldr	r3, [r3, #0]
    b8c2:	2b00      	cmp	r3, #0
    b8c4:	d1cb      	bne.n	b85e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    b8c6:	68fb      	ldr	r3, [r7, #12]
    b8c8:	2b00      	cmp	r3, #0
    b8ca:	d001      	beq.n	b8d0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    b8cc:	f000 fb46 	bl	bf5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    b8d0:	4b1c      	ldr	r3, [pc, #112]	; (b944 <xTaskResumeAll+0x130>)
    b8d2:	681b      	ldr	r3, [r3, #0]
    b8d4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    b8d6:	687b      	ldr	r3, [r7, #4]
    b8d8:	2b00      	cmp	r3, #0
    b8da:	d010      	beq.n	b8fe <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    b8dc:	f000 f846 	bl	b96c <xTaskIncrementTick>
    b8e0:	4603      	mov	r3, r0
    b8e2:	2b00      	cmp	r3, #0
    b8e4:	d002      	beq.n	b8ec <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
    b8e6:	4b16      	ldr	r3, [pc, #88]	; (b940 <xTaskResumeAll+0x12c>)
    b8e8:	2201      	movs	r2, #1
    b8ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    b8ec:	687b      	ldr	r3, [r7, #4]
    b8ee:	3b01      	subs	r3, #1
    b8f0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    b8f2:	687b      	ldr	r3, [r7, #4]
    b8f4:	2b00      	cmp	r3, #0
    b8f6:	d1f1      	bne.n	b8dc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
    b8f8:	4b12      	ldr	r3, [pc, #72]	; (b944 <xTaskResumeAll+0x130>)
    b8fa:	2200      	movs	r2, #0
    b8fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    b8fe:	4b10      	ldr	r3, [pc, #64]	; (b940 <xTaskResumeAll+0x12c>)
    b900:	681b      	ldr	r3, [r3, #0]
    b902:	2b00      	cmp	r3, #0
    b904:	d009      	beq.n	b91a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    b906:	2301      	movs	r3, #1
    b908:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    b90a:	4b0f      	ldr	r3, [pc, #60]	; (b948 <xTaskResumeAll+0x134>)
    b90c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    b910:	601a      	str	r2, [r3, #0]
    b912:	f3bf 8f4f 	dsb	sy
    b916:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    b91a:	f001 f8a1 	bl	ca60 <vPortExitCritical>

	return xAlreadyYielded;
    b91e:	68bb      	ldr	r3, [r7, #8]
}
    b920:	4618      	mov	r0, r3
    b922:	3710      	adds	r7, #16
    b924:	46bd      	mov	sp, r7
    b926:	bd80      	pop	{r7, pc}
    b928:	0001debc 	.word	0x0001debc
    b92c:	0001de94 	.word	0x0001de94
    b930:	0001de54 	.word	0x0001de54
    b934:	0001de9c 	.word	0x0001de9c
    b938:	0001d9c4 	.word	0x0001d9c4
    b93c:	0001d9c0 	.word	0x0001d9c0
    b940:	0001dea8 	.word	0x0001dea8
    b944:	0001dea4 	.word	0x0001dea4
    b948:	e000ed04 	.word	0xe000ed04

0000b94c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    b94c:	b480      	push	{r7}
    b94e:	b083      	sub	sp, #12
    b950:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    b952:	4b05      	ldr	r3, [pc, #20]	; (b968 <xTaskGetTickCount+0x1c>)
    b954:	681b      	ldr	r3, [r3, #0]
    b956:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
    b958:	687b      	ldr	r3, [r7, #4]
}
    b95a:	4618      	mov	r0, r3
    b95c:	370c      	adds	r7, #12
    b95e:	46bd      	mov	sp, r7
    b960:	f85d 7b04 	ldr.w	r7, [sp], #4
    b964:	4770      	bx	lr
    b966:	bf00      	nop
    b968:	0001de98 	.word	0x0001de98

0000b96c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    b96c:	b580      	push	{r7, lr}
    b96e:	b086      	sub	sp, #24
    b970:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    b972:	2300      	movs	r3, #0
    b974:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    b976:	4b4e      	ldr	r3, [pc, #312]	; (bab0 <xTaskIncrementTick+0x144>)
    b978:	681b      	ldr	r3, [r3, #0]
    b97a:	2b00      	cmp	r3, #0
    b97c:	f040 8088 	bne.w	ba90 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    b980:	4b4c      	ldr	r3, [pc, #304]	; (bab4 <xTaskIncrementTick+0x148>)
    b982:	681b      	ldr	r3, [r3, #0]
    b984:	3301      	adds	r3, #1
    b986:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    b988:	4a4a      	ldr	r2, [pc, #296]	; (bab4 <xTaskIncrementTick+0x148>)
    b98a:	693b      	ldr	r3, [r7, #16]
    b98c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    b98e:	693b      	ldr	r3, [r7, #16]
    b990:	2b00      	cmp	r3, #0
    b992:	d11f      	bne.n	b9d4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
    b994:	4b48      	ldr	r3, [pc, #288]	; (bab8 <xTaskIncrementTick+0x14c>)
    b996:	681b      	ldr	r3, [r3, #0]
    b998:	681b      	ldr	r3, [r3, #0]
    b99a:	2b00      	cmp	r3, #0
    b99c:	d009      	beq.n	b9b2 <xTaskIncrementTick+0x46>
    b99e:	f04f 0350 	mov.w	r3, #80	; 0x50
    b9a2:	f383 8811 	msr	BASEPRI, r3
    b9a6:	f3bf 8f6f 	isb	sy
    b9aa:	f3bf 8f4f 	dsb	sy
    b9ae:	603b      	str	r3, [r7, #0]
    b9b0:	e7fe      	b.n	b9b0 <xTaskIncrementTick+0x44>
    b9b2:	4b41      	ldr	r3, [pc, #260]	; (bab8 <xTaskIncrementTick+0x14c>)
    b9b4:	681b      	ldr	r3, [r3, #0]
    b9b6:	60fb      	str	r3, [r7, #12]
    b9b8:	4b40      	ldr	r3, [pc, #256]	; (babc <xTaskIncrementTick+0x150>)
    b9ba:	681b      	ldr	r3, [r3, #0]
    b9bc:	4a3e      	ldr	r2, [pc, #248]	; (bab8 <xTaskIncrementTick+0x14c>)
    b9be:	6013      	str	r3, [r2, #0]
    b9c0:	4a3e      	ldr	r2, [pc, #248]	; (babc <xTaskIncrementTick+0x150>)
    b9c2:	68fb      	ldr	r3, [r7, #12]
    b9c4:	6013      	str	r3, [r2, #0]
    b9c6:	4b3e      	ldr	r3, [pc, #248]	; (bac0 <xTaskIncrementTick+0x154>)
    b9c8:	681b      	ldr	r3, [r3, #0]
    b9ca:	3301      	adds	r3, #1
    b9cc:	4a3c      	ldr	r2, [pc, #240]	; (bac0 <xTaskIncrementTick+0x154>)
    b9ce:	6013      	str	r3, [r2, #0]
    b9d0:	f000 fac4 	bl	bf5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    b9d4:	4b3b      	ldr	r3, [pc, #236]	; (bac4 <xTaskIncrementTick+0x158>)
    b9d6:	681b      	ldr	r3, [r3, #0]
    b9d8:	693a      	ldr	r2, [r7, #16]
    b9da:	429a      	cmp	r2, r3
    b9dc:	d349      	bcc.n	ba72 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    b9de:	4b36      	ldr	r3, [pc, #216]	; (bab8 <xTaskIncrementTick+0x14c>)
    b9e0:	681b      	ldr	r3, [r3, #0]
    b9e2:	681b      	ldr	r3, [r3, #0]
    b9e4:	2b00      	cmp	r3, #0
    b9e6:	d104      	bne.n	b9f2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    b9e8:	4b36      	ldr	r3, [pc, #216]	; (bac4 <xTaskIncrementTick+0x158>)
    b9ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b9ee:	601a      	str	r2, [r3, #0]
					break;
    b9f0:	e03f      	b.n	ba72 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    b9f2:	4b31      	ldr	r3, [pc, #196]	; (bab8 <xTaskIncrementTick+0x14c>)
    b9f4:	681b      	ldr	r3, [r3, #0]
    b9f6:	68db      	ldr	r3, [r3, #12]
    b9f8:	68db      	ldr	r3, [r3, #12]
    b9fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    b9fc:	68bb      	ldr	r3, [r7, #8]
    b9fe:	685b      	ldr	r3, [r3, #4]
    ba00:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
    ba02:	693a      	ldr	r2, [r7, #16]
    ba04:	687b      	ldr	r3, [r7, #4]
    ba06:	429a      	cmp	r2, r3
    ba08:	d203      	bcs.n	ba12 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    ba0a:	4a2e      	ldr	r2, [pc, #184]	; (bac4 <xTaskIncrementTick+0x158>)
    ba0c:	687b      	ldr	r3, [r7, #4]
    ba0e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
    ba10:	e02f      	b.n	ba72 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    ba12:	68bb      	ldr	r3, [r7, #8]
    ba14:	3304      	adds	r3, #4
    ba16:	4618      	mov	r0, r3
    ba18:	f7ff f800 	bl	aa1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    ba1c:	68bb      	ldr	r3, [r7, #8]
    ba1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ba20:	2b00      	cmp	r3, #0
    ba22:	d004      	beq.n	ba2e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    ba24:	68bb      	ldr	r3, [r7, #8]
    ba26:	3318      	adds	r3, #24
    ba28:	4618      	mov	r0, r3
    ba2a:	f7fe fff7 	bl	aa1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    ba2e:	68bb      	ldr	r3, [r7, #8]
    ba30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ba32:	4b25      	ldr	r3, [pc, #148]	; (bac8 <xTaskIncrementTick+0x15c>)
    ba34:	681b      	ldr	r3, [r3, #0]
    ba36:	429a      	cmp	r2, r3
    ba38:	d903      	bls.n	ba42 <xTaskIncrementTick+0xd6>
    ba3a:	68bb      	ldr	r3, [r7, #8]
    ba3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ba3e:	4a22      	ldr	r2, [pc, #136]	; (bac8 <xTaskIncrementTick+0x15c>)
    ba40:	6013      	str	r3, [r2, #0]
    ba42:	68bb      	ldr	r3, [r7, #8]
    ba44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ba46:	4613      	mov	r3, r2
    ba48:	009b      	lsls	r3, r3, #2
    ba4a:	4413      	add	r3, r2
    ba4c:	009b      	lsls	r3, r3, #2
    ba4e:	4a1f      	ldr	r2, [pc, #124]	; (bacc <xTaskIncrementTick+0x160>)
    ba50:	441a      	add	r2, r3
    ba52:	68bb      	ldr	r3, [r7, #8]
    ba54:	3304      	adds	r3, #4
    ba56:	4619      	mov	r1, r3
    ba58:	4610      	mov	r0, r2
    ba5a:	f7fe ff82 	bl	a962 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    ba5e:	68bb      	ldr	r3, [r7, #8]
    ba60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ba62:	4b1b      	ldr	r3, [pc, #108]	; (bad0 <xTaskIncrementTick+0x164>)
    ba64:	681b      	ldr	r3, [r3, #0]
    ba66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ba68:	429a      	cmp	r2, r3
    ba6a:	d3b8      	bcc.n	b9de <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
    ba6c:	2301      	movs	r3, #1
    ba6e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    ba70:	e7b5      	b.n	b9de <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    ba72:	4b17      	ldr	r3, [pc, #92]	; (bad0 <xTaskIncrementTick+0x164>)
    ba74:	681b      	ldr	r3, [r3, #0]
    ba76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ba78:	4914      	ldr	r1, [pc, #80]	; (bacc <xTaskIncrementTick+0x160>)
    ba7a:	4613      	mov	r3, r2
    ba7c:	009b      	lsls	r3, r3, #2
    ba7e:	4413      	add	r3, r2
    ba80:	009b      	lsls	r3, r3, #2
    ba82:	440b      	add	r3, r1
    ba84:	681b      	ldr	r3, [r3, #0]
    ba86:	2b01      	cmp	r3, #1
    ba88:	d907      	bls.n	ba9a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
    ba8a:	2301      	movs	r3, #1
    ba8c:	617b      	str	r3, [r7, #20]
    ba8e:	e004      	b.n	ba9a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    ba90:	4b10      	ldr	r3, [pc, #64]	; (bad4 <xTaskIncrementTick+0x168>)
    ba92:	681b      	ldr	r3, [r3, #0]
    ba94:	3301      	adds	r3, #1
    ba96:	4a0f      	ldr	r2, [pc, #60]	; (bad4 <xTaskIncrementTick+0x168>)
    ba98:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    ba9a:	4b0f      	ldr	r3, [pc, #60]	; (bad8 <xTaskIncrementTick+0x16c>)
    ba9c:	681b      	ldr	r3, [r3, #0]
    ba9e:	2b00      	cmp	r3, #0
    baa0:	d001      	beq.n	baa6 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
    baa2:	2301      	movs	r3, #1
    baa4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    baa6:	697b      	ldr	r3, [r7, #20]
}
    baa8:	4618      	mov	r0, r3
    baaa:	3718      	adds	r7, #24
    baac:	46bd      	mov	sp, r7
    baae:	bd80      	pop	{r7, pc}
    bab0:	0001debc 	.word	0x0001debc
    bab4:	0001de98 	.word	0x0001de98
    bab8:	0001de4c 	.word	0x0001de4c
    babc:	0001de50 	.word	0x0001de50
    bac0:	0001deac 	.word	0x0001deac
    bac4:	0001deb4 	.word	0x0001deb4
    bac8:	0001de9c 	.word	0x0001de9c
    bacc:	0001d9c4 	.word	0x0001d9c4
    bad0:	0001d9c0 	.word	0x0001d9c0
    bad4:	0001dea4 	.word	0x0001dea4
    bad8:	0001dea8 	.word	0x0001dea8

0000badc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    badc:	b480      	push	{r7}
    bade:	b085      	sub	sp, #20
    bae0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    bae2:	4b27      	ldr	r3, [pc, #156]	; (bb80 <vTaskSwitchContext+0xa4>)
    bae4:	681b      	ldr	r3, [r3, #0]
    bae6:	2b00      	cmp	r3, #0
    bae8:	d003      	beq.n	baf2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    baea:	4b26      	ldr	r3, [pc, #152]	; (bb84 <vTaskSwitchContext+0xa8>)
    baec:	2201      	movs	r2, #1
    baee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    baf0:	e040      	b.n	bb74 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
    baf2:	4b24      	ldr	r3, [pc, #144]	; (bb84 <vTaskSwitchContext+0xa8>)
    baf4:	2200      	movs	r2, #0
    baf6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    baf8:	4b23      	ldr	r3, [pc, #140]	; (bb88 <vTaskSwitchContext+0xac>)
    bafa:	681b      	ldr	r3, [r3, #0]
    bafc:	60fb      	str	r3, [r7, #12]
    bafe:	e00f      	b.n	bb20 <vTaskSwitchContext+0x44>
    bb00:	68fb      	ldr	r3, [r7, #12]
    bb02:	2b00      	cmp	r3, #0
    bb04:	d109      	bne.n	bb1a <vTaskSwitchContext+0x3e>
    bb06:	f04f 0350 	mov.w	r3, #80	; 0x50
    bb0a:	f383 8811 	msr	BASEPRI, r3
    bb0e:	f3bf 8f6f 	isb	sy
    bb12:	f3bf 8f4f 	dsb	sy
    bb16:	607b      	str	r3, [r7, #4]
    bb18:	e7fe      	b.n	bb18 <vTaskSwitchContext+0x3c>
    bb1a:	68fb      	ldr	r3, [r7, #12]
    bb1c:	3b01      	subs	r3, #1
    bb1e:	60fb      	str	r3, [r7, #12]
    bb20:	491a      	ldr	r1, [pc, #104]	; (bb8c <vTaskSwitchContext+0xb0>)
    bb22:	68fa      	ldr	r2, [r7, #12]
    bb24:	4613      	mov	r3, r2
    bb26:	009b      	lsls	r3, r3, #2
    bb28:	4413      	add	r3, r2
    bb2a:	009b      	lsls	r3, r3, #2
    bb2c:	440b      	add	r3, r1
    bb2e:	681b      	ldr	r3, [r3, #0]
    bb30:	2b00      	cmp	r3, #0
    bb32:	d0e5      	beq.n	bb00 <vTaskSwitchContext+0x24>
    bb34:	68fa      	ldr	r2, [r7, #12]
    bb36:	4613      	mov	r3, r2
    bb38:	009b      	lsls	r3, r3, #2
    bb3a:	4413      	add	r3, r2
    bb3c:	009b      	lsls	r3, r3, #2
    bb3e:	4a13      	ldr	r2, [pc, #76]	; (bb8c <vTaskSwitchContext+0xb0>)
    bb40:	4413      	add	r3, r2
    bb42:	60bb      	str	r3, [r7, #8]
    bb44:	68bb      	ldr	r3, [r7, #8]
    bb46:	685b      	ldr	r3, [r3, #4]
    bb48:	685a      	ldr	r2, [r3, #4]
    bb4a:	68bb      	ldr	r3, [r7, #8]
    bb4c:	605a      	str	r2, [r3, #4]
    bb4e:	68bb      	ldr	r3, [r7, #8]
    bb50:	685a      	ldr	r2, [r3, #4]
    bb52:	68bb      	ldr	r3, [r7, #8]
    bb54:	3308      	adds	r3, #8
    bb56:	429a      	cmp	r2, r3
    bb58:	d104      	bne.n	bb64 <vTaskSwitchContext+0x88>
    bb5a:	68bb      	ldr	r3, [r7, #8]
    bb5c:	685b      	ldr	r3, [r3, #4]
    bb5e:	685a      	ldr	r2, [r3, #4]
    bb60:	68bb      	ldr	r3, [r7, #8]
    bb62:	605a      	str	r2, [r3, #4]
    bb64:	68bb      	ldr	r3, [r7, #8]
    bb66:	685b      	ldr	r3, [r3, #4]
    bb68:	68db      	ldr	r3, [r3, #12]
    bb6a:	4a09      	ldr	r2, [pc, #36]	; (bb90 <vTaskSwitchContext+0xb4>)
    bb6c:	6013      	str	r3, [r2, #0]
    bb6e:	4a06      	ldr	r2, [pc, #24]	; (bb88 <vTaskSwitchContext+0xac>)
    bb70:	68fb      	ldr	r3, [r7, #12]
    bb72:	6013      	str	r3, [r2, #0]
}
    bb74:	bf00      	nop
    bb76:	3714      	adds	r7, #20
    bb78:	46bd      	mov	sp, r7
    bb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb7e:	4770      	bx	lr
    bb80:	0001debc 	.word	0x0001debc
    bb84:	0001dea8 	.word	0x0001dea8
    bb88:	0001de9c 	.word	0x0001de9c
    bb8c:	0001d9c4 	.word	0x0001d9c4
    bb90:	0001d9c0 	.word	0x0001d9c0

0000bb94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    bb94:	b580      	push	{r7, lr}
    bb96:	b084      	sub	sp, #16
    bb98:	af00      	add	r7, sp, #0
    bb9a:	6078      	str	r0, [r7, #4]
    bb9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
    bb9e:	687b      	ldr	r3, [r7, #4]
    bba0:	2b00      	cmp	r3, #0
    bba2:	d109      	bne.n	bbb8 <vTaskPlaceOnEventList+0x24>
    bba4:	f04f 0350 	mov.w	r3, #80	; 0x50
    bba8:	f383 8811 	msr	BASEPRI, r3
    bbac:	f3bf 8f6f 	isb	sy
    bbb0:	f3bf 8f4f 	dsb	sy
    bbb4:	60fb      	str	r3, [r7, #12]
    bbb6:	e7fe      	b.n	bbb6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    bbb8:	4b07      	ldr	r3, [pc, #28]	; (bbd8 <vTaskPlaceOnEventList+0x44>)
    bbba:	681b      	ldr	r3, [r3, #0]
    bbbc:	3318      	adds	r3, #24
    bbbe:	4619      	mov	r1, r3
    bbc0:	6878      	ldr	r0, [r7, #4]
    bbc2:	f7fe fef2 	bl	a9aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    bbc6:	2101      	movs	r1, #1
    bbc8:	6838      	ldr	r0, [r7, #0]
    bbca:	f000 fa71 	bl	c0b0 <prvAddCurrentTaskToDelayedList>
}
    bbce:	bf00      	nop
    bbd0:	3710      	adds	r7, #16
    bbd2:	46bd      	mov	sp, r7
    bbd4:	bd80      	pop	{r7, pc}
    bbd6:	bf00      	nop
    bbd8:	0001d9c0 	.word	0x0001d9c0

0000bbdc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    bbdc:	b580      	push	{r7, lr}
    bbde:	b086      	sub	sp, #24
    bbe0:	af00      	add	r7, sp, #0
    bbe2:	60f8      	str	r0, [r7, #12]
    bbe4:	60b9      	str	r1, [r7, #8]
    bbe6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
    bbe8:	68fb      	ldr	r3, [r7, #12]
    bbea:	2b00      	cmp	r3, #0
    bbec:	d109      	bne.n	bc02 <vTaskPlaceOnEventListRestricted+0x26>
    bbee:	f04f 0350 	mov.w	r3, #80	; 0x50
    bbf2:	f383 8811 	msr	BASEPRI, r3
    bbf6:	f3bf 8f6f 	isb	sy
    bbfa:	f3bf 8f4f 	dsb	sy
    bbfe:	617b      	str	r3, [r7, #20]
    bc00:	e7fe      	b.n	bc00 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    bc02:	4b0a      	ldr	r3, [pc, #40]	; (bc2c <vTaskPlaceOnEventListRestricted+0x50>)
    bc04:	681b      	ldr	r3, [r3, #0]
    bc06:	3318      	adds	r3, #24
    bc08:	4619      	mov	r1, r3
    bc0a:	68f8      	ldr	r0, [r7, #12]
    bc0c:	f7fe fea9 	bl	a962 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
    bc10:	687b      	ldr	r3, [r7, #4]
    bc12:	2b00      	cmp	r3, #0
    bc14:	d002      	beq.n	bc1c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
    bc16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bc1a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    bc1c:	6879      	ldr	r1, [r7, #4]
    bc1e:	68b8      	ldr	r0, [r7, #8]
    bc20:	f000 fa46 	bl	c0b0 <prvAddCurrentTaskToDelayedList>
	}
    bc24:	bf00      	nop
    bc26:	3718      	adds	r7, #24
    bc28:	46bd      	mov	sp, r7
    bc2a:	bd80      	pop	{r7, pc}
    bc2c:	0001d9c0 	.word	0x0001d9c0

0000bc30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    bc30:	b580      	push	{r7, lr}
    bc32:	b086      	sub	sp, #24
    bc34:	af00      	add	r7, sp, #0
    bc36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    bc38:	687b      	ldr	r3, [r7, #4]
    bc3a:	68db      	ldr	r3, [r3, #12]
    bc3c:	68db      	ldr	r3, [r3, #12]
    bc3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
    bc40:	693b      	ldr	r3, [r7, #16]
    bc42:	2b00      	cmp	r3, #0
    bc44:	d109      	bne.n	bc5a <xTaskRemoveFromEventList+0x2a>
    bc46:	f04f 0350 	mov.w	r3, #80	; 0x50
    bc4a:	f383 8811 	msr	BASEPRI, r3
    bc4e:	f3bf 8f6f 	isb	sy
    bc52:	f3bf 8f4f 	dsb	sy
    bc56:	60fb      	str	r3, [r7, #12]
    bc58:	e7fe      	b.n	bc58 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    bc5a:	693b      	ldr	r3, [r7, #16]
    bc5c:	3318      	adds	r3, #24
    bc5e:	4618      	mov	r0, r3
    bc60:	f7fe fedc 	bl	aa1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    bc64:	4b1d      	ldr	r3, [pc, #116]	; (bcdc <xTaskRemoveFromEventList+0xac>)
    bc66:	681b      	ldr	r3, [r3, #0]
    bc68:	2b00      	cmp	r3, #0
    bc6a:	d11d      	bne.n	bca8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    bc6c:	693b      	ldr	r3, [r7, #16]
    bc6e:	3304      	adds	r3, #4
    bc70:	4618      	mov	r0, r3
    bc72:	f7fe fed3 	bl	aa1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    bc76:	693b      	ldr	r3, [r7, #16]
    bc78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bc7a:	4b19      	ldr	r3, [pc, #100]	; (bce0 <xTaskRemoveFromEventList+0xb0>)
    bc7c:	681b      	ldr	r3, [r3, #0]
    bc7e:	429a      	cmp	r2, r3
    bc80:	d903      	bls.n	bc8a <xTaskRemoveFromEventList+0x5a>
    bc82:	693b      	ldr	r3, [r7, #16]
    bc84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    bc86:	4a16      	ldr	r2, [pc, #88]	; (bce0 <xTaskRemoveFromEventList+0xb0>)
    bc88:	6013      	str	r3, [r2, #0]
    bc8a:	693b      	ldr	r3, [r7, #16]
    bc8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bc8e:	4613      	mov	r3, r2
    bc90:	009b      	lsls	r3, r3, #2
    bc92:	4413      	add	r3, r2
    bc94:	009b      	lsls	r3, r3, #2
    bc96:	4a13      	ldr	r2, [pc, #76]	; (bce4 <xTaskRemoveFromEventList+0xb4>)
    bc98:	441a      	add	r2, r3
    bc9a:	693b      	ldr	r3, [r7, #16]
    bc9c:	3304      	adds	r3, #4
    bc9e:	4619      	mov	r1, r3
    bca0:	4610      	mov	r0, r2
    bca2:	f7fe fe5e 	bl	a962 <vListInsertEnd>
    bca6:	e005      	b.n	bcb4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    bca8:	693b      	ldr	r3, [r7, #16]
    bcaa:	3318      	adds	r3, #24
    bcac:	4619      	mov	r1, r3
    bcae:	480e      	ldr	r0, [pc, #56]	; (bce8 <xTaskRemoveFromEventList+0xb8>)
    bcb0:	f7fe fe57 	bl	a962 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    bcb4:	693b      	ldr	r3, [r7, #16]
    bcb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bcb8:	4b0c      	ldr	r3, [pc, #48]	; (bcec <xTaskRemoveFromEventList+0xbc>)
    bcba:	681b      	ldr	r3, [r3, #0]
    bcbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    bcbe:	429a      	cmp	r2, r3
    bcc0:	d905      	bls.n	bcce <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    bcc2:	2301      	movs	r3, #1
    bcc4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    bcc6:	4b0a      	ldr	r3, [pc, #40]	; (bcf0 <xTaskRemoveFromEventList+0xc0>)
    bcc8:	2201      	movs	r2, #1
    bcca:	601a      	str	r2, [r3, #0]
    bccc:	e001      	b.n	bcd2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
    bcce:	2300      	movs	r3, #0
    bcd0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
    bcd2:	697b      	ldr	r3, [r7, #20]
}
    bcd4:	4618      	mov	r0, r3
    bcd6:	3718      	adds	r7, #24
    bcd8:	46bd      	mov	sp, r7
    bcda:	bd80      	pop	{r7, pc}
    bcdc:	0001debc 	.word	0x0001debc
    bce0:	0001de9c 	.word	0x0001de9c
    bce4:	0001d9c4 	.word	0x0001d9c4
    bce8:	0001de54 	.word	0x0001de54
    bcec:	0001d9c0 	.word	0x0001d9c0
    bcf0:	0001dea8 	.word	0x0001dea8

0000bcf4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    bcf4:	b480      	push	{r7}
    bcf6:	b083      	sub	sp, #12
    bcf8:	af00      	add	r7, sp, #0
    bcfa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    bcfc:	4b06      	ldr	r3, [pc, #24]	; (bd18 <vTaskInternalSetTimeOutState+0x24>)
    bcfe:	681a      	ldr	r2, [r3, #0]
    bd00:	687b      	ldr	r3, [r7, #4]
    bd02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    bd04:	4b05      	ldr	r3, [pc, #20]	; (bd1c <vTaskInternalSetTimeOutState+0x28>)
    bd06:	681a      	ldr	r2, [r3, #0]
    bd08:	687b      	ldr	r3, [r7, #4]
    bd0a:	605a      	str	r2, [r3, #4]
}
    bd0c:	bf00      	nop
    bd0e:	370c      	adds	r7, #12
    bd10:	46bd      	mov	sp, r7
    bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
    bd16:	4770      	bx	lr
    bd18:	0001deac 	.word	0x0001deac
    bd1c:	0001de98 	.word	0x0001de98

0000bd20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    bd20:	b580      	push	{r7, lr}
    bd22:	b088      	sub	sp, #32
    bd24:	af00      	add	r7, sp, #0
    bd26:	6078      	str	r0, [r7, #4]
    bd28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    bd2a:	687b      	ldr	r3, [r7, #4]
    bd2c:	2b00      	cmp	r3, #0
    bd2e:	d109      	bne.n	bd44 <xTaskCheckForTimeOut+0x24>
    bd30:	f04f 0350 	mov.w	r3, #80	; 0x50
    bd34:	f383 8811 	msr	BASEPRI, r3
    bd38:	f3bf 8f6f 	isb	sy
    bd3c:	f3bf 8f4f 	dsb	sy
    bd40:	613b      	str	r3, [r7, #16]
    bd42:	e7fe      	b.n	bd42 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
    bd44:	683b      	ldr	r3, [r7, #0]
    bd46:	2b00      	cmp	r3, #0
    bd48:	d109      	bne.n	bd5e <xTaskCheckForTimeOut+0x3e>
    bd4a:	f04f 0350 	mov.w	r3, #80	; 0x50
    bd4e:	f383 8811 	msr	BASEPRI, r3
    bd52:	f3bf 8f6f 	isb	sy
    bd56:	f3bf 8f4f 	dsb	sy
    bd5a:	60fb      	str	r3, [r7, #12]
    bd5c:	e7fe      	b.n	bd5c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
    bd5e:	f000 fe51 	bl	ca04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    bd62:	4b1d      	ldr	r3, [pc, #116]	; (bdd8 <xTaskCheckForTimeOut+0xb8>)
    bd64:	681b      	ldr	r3, [r3, #0]
    bd66:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    bd68:	687b      	ldr	r3, [r7, #4]
    bd6a:	685b      	ldr	r3, [r3, #4]
    bd6c:	69ba      	ldr	r2, [r7, #24]
    bd6e:	1ad3      	subs	r3, r2, r3
    bd70:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    bd72:	683b      	ldr	r3, [r7, #0]
    bd74:	681b      	ldr	r3, [r3, #0]
    bd76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    bd7a:	d102      	bne.n	bd82 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    bd7c:	2300      	movs	r3, #0
    bd7e:	61fb      	str	r3, [r7, #28]
    bd80:	e023      	b.n	bdca <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    bd82:	687b      	ldr	r3, [r7, #4]
    bd84:	681a      	ldr	r2, [r3, #0]
    bd86:	4b15      	ldr	r3, [pc, #84]	; (bddc <xTaskCheckForTimeOut+0xbc>)
    bd88:	681b      	ldr	r3, [r3, #0]
    bd8a:	429a      	cmp	r2, r3
    bd8c:	d007      	beq.n	bd9e <xTaskCheckForTimeOut+0x7e>
    bd8e:	687b      	ldr	r3, [r7, #4]
    bd90:	685b      	ldr	r3, [r3, #4]
    bd92:	69ba      	ldr	r2, [r7, #24]
    bd94:	429a      	cmp	r2, r3
    bd96:	d302      	bcc.n	bd9e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    bd98:	2301      	movs	r3, #1
    bd9a:	61fb      	str	r3, [r7, #28]
    bd9c:	e015      	b.n	bdca <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    bd9e:	683b      	ldr	r3, [r7, #0]
    bda0:	681b      	ldr	r3, [r3, #0]
    bda2:	697a      	ldr	r2, [r7, #20]
    bda4:	429a      	cmp	r2, r3
    bda6:	d20b      	bcs.n	bdc0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
    bda8:	683b      	ldr	r3, [r7, #0]
    bdaa:	681a      	ldr	r2, [r3, #0]
    bdac:	697b      	ldr	r3, [r7, #20]
    bdae:	1ad2      	subs	r2, r2, r3
    bdb0:	683b      	ldr	r3, [r7, #0]
    bdb2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
    bdb4:	6878      	ldr	r0, [r7, #4]
    bdb6:	f7ff ff9d 	bl	bcf4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
    bdba:	2300      	movs	r3, #0
    bdbc:	61fb      	str	r3, [r7, #28]
    bdbe:	e004      	b.n	bdca <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
    bdc0:	683b      	ldr	r3, [r7, #0]
    bdc2:	2200      	movs	r2, #0
    bdc4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
    bdc6:	2301      	movs	r3, #1
    bdc8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
    bdca:	f000 fe49 	bl	ca60 <vPortExitCritical>

	return xReturn;
    bdce:	69fb      	ldr	r3, [r7, #28]
}
    bdd0:	4618      	mov	r0, r3
    bdd2:	3720      	adds	r7, #32
    bdd4:	46bd      	mov	sp, r7
    bdd6:	bd80      	pop	{r7, pc}
    bdd8:	0001de98 	.word	0x0001de98
    bddc:	0001deac 	.word	0x0001deac

0000bde0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    bde0:	b480      	push	{r7}
    bde2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
    bde4:	4b03      	ldr	r3, [pc, #12]	; (bdf4 <vTaskMissedYield+0x14>)
    bde6:	2201      	movs	r2, #1
    bde8:	601a      	str	r2, [r3, #0]
}
    bdea:	bf00      	nop
    bdec:	46bd      	mov	sp, r7
    bdee:	f85d 7b04 	ldr.w	r7, [sp], #4
    bdf2:	4770      	bx	lr
    bdf4:	0001dea8 	.word	0x0001dea8

0000bdf8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    bdf8:	b580      	push	{r7, lr}
    bdfa:	b082      	sub	sp, #8
    bdfc:	af00      	add	r7, sp, #0
    bdfe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    be00:	f000 f852 	bl	bea8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    be04:	4b06      	ldr	r3, [pc, #24]	; (be20 <prvIdleTask+0x28>)
    be06:	681b      	ldr	r3, [r3, #0]
    be08:	2b01      	cmp	r3, #1
    be0a:	d9f9      	bls.n	be00 <prvIdleTask+0x8>
			{
				taskYIELD();
    be0c:	4b05      	ldr	r3, [pc, #20]	; (be24 <prvIdleTask+0x2c>)
    be0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    be12:	601a      	str	r2, [r3, #0]
    be14:	f3bf 8f4f 	dsb	sy
    be18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
    be1c:	e7f0      	b.n	be00 <prvIdleTask+0x8>
    be1e:	bf00      	nop
    be20:	0001d9c4 	.word	0x0001d9c4
    be24:	e000ed04 	.word	0xe000ed04

0000be28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    be28:	b580      	push	{r7, lr}
    be2a:	b082      	sub	sp, #8
    be2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    be2e:	2300      	movs	r3, #0
    be30:	607b      	str	r3, [r7, #4]
    be32:	e00c      	b.n	be4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    be34:	687a      	ldr	r2, [r7, #4]
    be36:	4613      	mov	r3, r2
    be38:	009b      	lsls	r3, r3, #2
    be3a:	4413      	add	r3, r2
    be3c:	009b      	lsls	r3, r3, #2
    be3e:	4a12      	ldr	r2, [pc, #72]	; (be88 <prvInitialiseTaskLists+0x60>)
    be40:	4413      	add	r3, r2
    be42:	4618      	mov	r0, r3
    be44:	f7fe fd60 	bl	a908 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    be48:	687b      	ldr	r3, [r7, #4]
    be4a:	3301      	adds	r3, #1
    be4c:	607b      	str	r3, [r7, #4]
    be4e:	687b      	ldr	r3, [r7, #4]
    be50:	2b37      	cmp	r3, #55	; 0x37
    be52:	d9ef      	bls.n	be34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
    be54:	480d      	ldr	r0, [pc, #52]	; (be8c <prvInitialiseTaskLists+0x64>)
    be56:	f7fe fd57 	bl	a908 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    be5a:	480d      	ldr	r0, [pc, #52]	; (be90 <prvInitialiseTaskLists+0x68>)
    be5c:	f7fe fd54 	bl	a908 <vListInitialise>
	vListInitialise( &xPendingReadyList );
    be60:	480c      	ldr	r0, [pc, #48]	; (be94 <prvInitialiseTaskLists+0x6c>)
    be62:	f7fe fd51 	bl	a908 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    be66:	480c      	ldr	r0, [pc, #48]	; (be98 <prvInitialiseTaskLists+0x70>)
    be68:	f7fe fd4e 	bl	a908 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    be6c:	480b      	ldr	r0, [pc, #44]	; (be9c <prvInitialiseTaskLists+0x74>)
    be6e:	f7fe fd4b 	bl	a908 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    be72:	4b0b      	ldr	r3, [pc, #44]	; (bea0 <prvInitialiseTaskLists+0x78>)
    be74:	4a05      	ldr	r2, [pc, #20]	; (be8c <prvInitialiseTaskLists+0x64>)
    be76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    be78:	4b0a      	ldr	r3, [pc, #40]	; (bea4 <prvInitialiseTaskLists+0x7c>)
    be7a:	4a05      	ldr	r2, [pc, #20]	; (be90 <prvInitialiseTaskLists+0x68>)
    be7c:	601a      	str	r2, [r3, #0]
}
    be7e:	bf00      	nop
    be80:	3708      	adds	r7, #8
    be82:	46bd      	mov	sp, r7
    be84:	bd80      	pop	{r7, pc}
    be86:	bf00      	nop
    be88:	0001d9c4 	.word	0x0001d9c4
    be8c:	0001de24 	.word	0x0001de24
    be90:	0001de38 	.word	0x0001de38
    be94:	0001de54 	.word	0x0001de54
    be98:	0001de68 	.word	0x0001de68
    be9c:	0001de80 	.word	0x0001de80
    bea0:	0001de4c 	.word	0x0001de4c
    bea4:	0001de50 	.word	0x0001de50

0000bea8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    bea8:	b580      	push	{r7, lr}
    beaa:	b082      	sub	sp, #8
    beac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    beae:	e019      	b.n	bee4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
    beb0:	f000 fda8 	bl	ca04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    beb4:	4b0f      	ldr	r3, [pc, #60]	; (bef4 <prvCheckTasksWaitingTermination+0x4c>)
    beb6:	68db      	ldr	r3, [r3, #12]
    beb8:	68db      	ldr	r3, [r3, #12]
    beba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    bebc:	687b      	ldr	r3, [r7, #4]
    bebe:	3304      	adds	r3, #4
    bec0:	4618      	mov	r0, r3
    bec2:	f7fe fdab 	bl	aa1c <uxListRemove>
				--uxCurrentNumberOfTasks;
    bec6:	4b0c      	ldr	r3, [pc, #48]	; (bef8 <prvCheckTasksWaitingTermination+0x50>)
    bec8:	681b      	ldr	r3, [r3, #0]
    beca:	3b01      	subs	r3, #1
    becc:	4a0a      	ldr	r2, [pc, #40]	; (bef8 <prvCheckTasksWaitingTermination+0x50>)
    bece:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
    bed0:	4b0a      	ldr	r3, [pc, #40]	; (befc <prvCheckTasksWaitingTermination+0x54>)
    bed2:	681b      	ldr	r3, [r3, #0]
    bed4:	3b01      	subs	r3, #1
    bed6:	4a09      	ldr	r2, [pc, #36]	; (befc <prvCheckTasksWaitingTermination+0x54>)
    bed8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
    beda:	f000 fdc1 	bl	ca60 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
    bede:	6878      	ldr	r0, [r7, #4]
    bee0:	f000 f80e 	bl	bf00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    bee4:	4b05      	ldr	r3, [pc, #20]	; (befc <prvCheckTasksWaitingTermination+0x54>)
    bee6:	681b      	ldr	r3, [r3, #0]
    bee8:	2b00      	cmp	r3, #0
    beea:	d1e1      	bne.n	beb0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    beec:	bf00      	nop
    beee:	3708      	adds	r7, #8
    bef0:	46bd      	mov	sp, r7
    bef2:	bd80      	pop	{r7, pc}
    bef4:	0001de68 	.word	0x0001de68
    bef8:	0001de94 	.word	0x0001de94
    befc:	0001de7c 	.word	0x0001de7c

0000bf00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    bf00:	b580      	push	{r7, lr}
    bf02:	b084      	sub	sp, #16
    bf04:	af00      	add	r7, sp, #0
    bf06:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
    bf08:	687b      	ldr	r3, [r7, #4]
    bf0a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
    bf0e:	2b00      	cmp	r3, #0
    bf10:	d108      	bne.n	bf24 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
    bf12:	687b      	ldr	r3, [r7, #4]
    bf14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    bf16:	4618      	mov	r0, r3
    bf18:	f000 fe36 	bl	cb88 <vPortFree>
				vPortFree( pxTCB );
    bf1c:	6878      	ldr	r0, [r7, #4]
    bf1e:	f000 fe33 	bl	cb88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    bf22:	e017      	b.n	bf54 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
    bf24:	687b      	ldr	r3, [r7, #4]
    bf26:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
    bf2a:	2b01      	cmp	r3, #1
    bf2c:	d103      	bne.n	bf36 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
    bf2e:	6878      	ldr	r0, [r7, #4]
    bf30:	f000 fe2a 	bl	cb88 <vPortFree>
	}
    bf34:	e00e      	b.n	bf54 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
    bf36:	687b      	ldr	r3, [r7, #4]
    bf38:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
    bf3c:	2b02      	cmp	r3, #2
    bf3e:	d009      	beq.n	bf54 <prvDeleteTCB+0x54>
    bf40:	f04f 0350 	mov.w	r3, #80	; 0x50
    bf44:	f383 8811 	msr	BASEPRI, r3
    bf48:	f3bf 8f6f 	isb	sy
    bf4c:	f3bf 8f4f 	dsb	sy
    bf50:	60fb      	str	r3, [r7, #12]
    bf52:	e7fe      	b.n	bf52 <prvDeleteTCB+0x52>
	}
    bf54:	bf00      	nop
    bf56:	3710      	adds	r7, #16
    bf58:	46bd      	mov	sp, r7
    bf5a:	bd80      	pop	{r7, pc}

0000bf5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    bf5c:	b480      	push	{r7}
    bf5e:	b083      	sub	sp, #12
    bf60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    bf62:	4b0c      	ldr	r3, [pc, #48]	; (bf94 <prvResetNextTaskUnblockTime+0x38>)
    bf64:	681b      	ldr	r3, [r3, #0]
    bf66:	681b      	ldr	r3, [r3, #0]
    bf68:	2b00      	cmp	r3, #0
    bf6a:	d104      	bne.n	bf76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    bf6c:	4b0a      	ldr	r3, [pc, #40]	; (bf98 <prvResetNextTaskUnblockTime+0x3c>)
    bf6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    bf72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
    bf74:	e008      	b.n	bf88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    bf76:	4b07      	ldr	r3, [pc, #28]	; (bf94 <prvResetNextTaskUnblockTime+0x38>)
    bf78:	681b      	ldr	r3, [r3, #0]
    bf7a:	68db      	ldr	r3, [r3, #12]
    bf7c:	68db      	ldr	r3, [r3, #12]
    bf7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    bf80:	687b      	ldr	r3, [r7, #4]
    bf82:	685b      	ldr	r3, [r3, #4]
    bf84:	4a04      	ldr	r2, [pc, #16]	; (bf98 <prvResetNextTaskUnblockTime+0x3c>)
    bf86:	6013      	str	r3, [r2, #0]
}
    bf88:	bf00      	nop
    bf8a:	370c      	adds	r7, #12
    bf8c:	46bd      	mov	sp, r7
    bf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    bf92:	4770      	bx	lr
    bf94:	0001de4c 	.word	0x0001de4c
    bf98:	0001deb4 	.word	0x0001deb4

0000bf9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
    bf9c:	b480      	push	{r7}
    bf9e:	b083      	sub	sp, #12
    bfa0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    bfa2:	4b0b      	ldr	r3, [pc, #44]	; (bfd0 <xTaskGetSchedulerState+0x34>)
    bfa4:	681b      	ldr	r3, [r3, #0]
    bfa6:	2b00      	cmp	r3, #0
    bfa8:	d102      	bne.n	bfb0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    bfaa:	2301      	movs	r3, #1
    bfac:	607b      	str	r3, [r7, #4]
    bfae:	e008      	b.n	bfc2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    bfb0:	4b08      	ldr	r3, [pc, #32]	; (bfd4 <xTaskGetSchedulerState+0x38>)
    bfb2:	681b      	ldr	r3, [r3, #0]
    bfb4:	2b00      	cmp	r3, #0
    bfb6:	d102      	bne.n	bfbe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
    bfb8:	2302      	movs	r3, #2
    bfba:	607b      	str	r3, [r7, #4]
    bfbc:	e001      	b.n	bfc2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    bfbe:	2300      	movs	r3, #0
    bfc0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
    bfc2:	687b      	ldr	r3, [r7, #4]
	}
    bfc4:	4618      	mov	r0, r3
    bfc6:	370c      	adds	r7, #12
    bfc8:	46bd      	mov	sp, r7
    bfca:	f85d 7b04 	ldr.w	r7, [sp], #4
    bfce:	4770      	bx	lr
    bfd0:	0001dea0 	.word	0x0001dea0
    bfd4:	0001debc 	.word	0x0001debc

0000bfd8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    bfd8:	b580      	push	{r7, lr}
    bfda:	b086      	sub	sp, #24
    bfdc:	af00      	add	r7, sp, #0
    bfde:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
    bfe0:	687b      	ldr	r3, [r7, #4]
    bfe2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
    bfe4:	2300      	movs	r3, #0
    bfe6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
    bfe8:	687b      	ldr	r3, [r7, #4]
    bfea:	2b00      	cmp	r3, #0
    bfec:	d054      	beq.n	c098 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
    bfee:	4b2d      	ldr	r3, [pc, #180]	; (c0a4 <xTaskPriorityDisinherit+0xcc>)
    bff0:	681b      	ldr	r3, [r3, #0]
    bff2:	693a      	ldr	r2, [r7, #16]
    bff4:	429a      	cmp	r2, r3
    bff6:	d009      	beq.n	c00c <xTaskPriorityDisinherit+0x34>
    bff8:	f04f 0350 	mov.w	r3, #80	; 0x50
    bffc:	f383 8811 	msr	BASEPRI, r3
    c000:	f3bf 8f6f 	isb	sy
    c004:	f3bf 8f4f 	dsb	sy
    c008:	60fb      	str	r3, [r7, #12]
    c00a:	e7fe      	b.n	c00a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
    c00c:	693b      	ldr	r3, [r7, #16]
    c00e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    c010:	2b00      	cmp	r3, #0
    c012:	d109      	bne.n	c028 <xTaskPriorityDisinherit+0x50>
    c014:	f04f 0350 	mov.w	r3, #80	; 0x50
    c018:	f383 8811 	msr	BASEPRI, r3
    c01c:	f3bf 8f6f 	isb	sy
    c020:	f3bf 8f4f 	dsb	sy
    c024:	60bb      	str	r3, [r7, #8]
    c026:	e7fe      	b.n	c026 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
    c028:	693b      	ldr	r3, [r7, #16]
    c02a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    c02c:	1e5a      	subs	r2, r3, #1
    c02e:	693b      	ldr	r3, [r7, #16]
    c030:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    c032:	693b      	ldr	r3, [r7, #16]
    c034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c036:	693b      	ldr	r3, [r7, #16]
    c038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    c03a:	429a      	cmp	r2, r3
    c03c:	d02c      	beq.n	c098 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    c03e:	693b      	ldr	r3, [r7, #16]
    c040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    c042:	2b00      	cmp	r3, #0
    c044:	d128      	bne.n	c098 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    c046:	693b      	ldr	r3, [r7, #16]
    c048:	3304      	adds	r3, #4
    c04a:	4618      	mov	r0, r3
    c04c:	f7fe fce6 	bl	aa1c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    c050:	693b      	ldr	r3, [r7, #16]
    c052:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    c054:	693b      	ldr	r3, [r7, #16]
    c056:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    c058:	693b      	ldr	r3, [r7, #16]
    c05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c05c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
    c060:	693b      	ldr	r3, [r7, #16]
    c062:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
    c064:	693b      	ldr	r3, [r7, #16]
    c066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c068:	4b0f      	ldr	r3, [pc, #60]	; (c0a8 <xTaskPriorityDisinherit+0xd0>)
    c06a:	681b      	ldr	r3, [r3, #0]
    c06c:	429a      	cmp	r2, r3
    c06e:	d903      	bls.n	c078 <xTaskPriorityDisinherit+0xa0>
    c070:	693b      	ldr	r3, [r7, #16]
    c072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c074:	4a0c      	ldr	r2, [pc, #48]	; (c0a8 <xTaskPriorityDisinherit+0xd0>)
    c076:	6013      	str	r3, [r2, #0]
    c078:	693b      	ldr	r3, [r7, #16]
    c07a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c07c:	4613      	mov	r3, r2
    c07e:	009b      	lsls	r3, r3, #2
    c080:	4413      	add	r3, r2
    c082:	009b      	lsls	r3, r3, #2
    c084:	4a09      	ldr	r2, [pc, #36]	; (c0ac <xTaskPriorityDisinherit+0xd4>)
    c086:	441a      	add	r2, r3
    c088:	693b      	ldr	r3, [r7, #16]
    c08a:	3304      	adds	r3, #4
    c08c:	4619      	mov	r1, r3
    c08e:	4610      	mov	r0, r2
    c090:	f7fe fc67 	bl	a962 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    c094:	2301      	movs	r3, #1
    c096:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    c098:	697b      	ldr	r3, [r7, #20]
	}
    c09a:	4618      	mov	r0, r3
    c09c:	3718      	adds	r7, #24
    c09e:	46bd      	mov	sp, r7
    c0a0:	bd80      	pop	{r7, pc}
    c0a2:	bf00      	nop
    c0a4:	0001d9c0 	.word	0x0001d9c0
    c0a8:	0001de9c 	.word	0x0001de9c
    c0ac:	0001d9c4 	.word	0x0001d9c4

0000c0b0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    c0b0:	b580      	push	{r7, lr}
    c0b2:	b084      	sub	sp, #16
    c0b4:	af00      	add	r7, sp, #0
    c0b6:	6078      	str	r0, [r7, #4]
    c0b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    c0ba:	4b21      	ldr	r3, [pc, #132]	; (c140 <prvAddCurrentTaskToDelayedList+0x90>)
    c0bc:	681b      	ldr	r3, [r3, #0]
    c0be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    c0c0:	4b20      	ldr	r3, [pc, #128]	; (c144 <prvAddCurrentTaskToDelayedList+0x94>)
    c0c2:	681b      	ldr	r3, [r3, #0]
    c0c4:	3304      	adds	r3, #4
    c0c6:	4618      	mov	r0, r3
    c0c8:	f7fe fca8 	bl	aa1c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    c0cc:	687b      	ldr	r3, [r7, #4]
    c0ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    c0d2:	d10a      	bne.n	c0ea <prvAddCurrentTaskToDelayedList+0x3a>
    c0d4:	683b      	ldr	r3, [r7, #0]
    c0d6:	2b00      	cmp	r3, #0
    c0d8:	d007      	beq.n	c0ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    c0da:	4b1a      	ldr	r3, [pc, #104]	; (c144 <prvAddCurrentTaskToDelayedList+0x94>)
    c0dc:	681b      	ldr	r3, [r3, #0]
    c0de:	3304      	adds	r3, #4
    c0e0:	4619      	mov	r1, r3
    c0e2:	4819      	ldr	r0, [pc, #100]	; (c148 <prvAddCurrentTaskToDelayedList+0x98>)
    c0e4:	f7fe fc3d 	bl	a962 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    c0e8:	e026      	b.n	c138 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
    c0ea:	68fa      	ldr	r2, [r7, #12]
    c0ec:	687b      	ldr	r3, [r7, #4]
    c0ee:	4413      	add	r3, r2
    c0f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    c0f2:	4b14      	ldr	r3, [pc, #80]	; (c144 <prvAddCurrentTaskToDelayedList+0x94>)
    c0f4:	681b      	ldr	r3, [r3, #0]
    c0f6:	68ba      	ldr	r2, [r7, #8]
    c0f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
    c0fa:	68ba      	ldr	r2, [r7, #8]
    c0fc:	68fb      	ldr	r3, [r7, #12]
    c0fe:	429a      	cmp	r2, r3
    c100:	d209      	bcs.n	c116 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    c102:	4b12      	ldr	r3, [pc, #72]	; (c14c <prvAddCurrentTaskToDelayedList+0x9c>)
    c104:	681a      	ldr	r2, [r3, #0]
    c106:	4b0f      	ldr	r3, [pc, #60]	; (c144 <prvAddCurrentTaskToDelayedList+0x94>)
    c108:	681b      	ldr	r3, [r3, #0]
    c10a:	3304      	adds	r3, #4
    c10c:	4619      	mov	r1, r3
    c10e:	4610      	mov	r0, r2
    c110:	f7fe fc4b 	bl	a9aa <vListInsert>
}
    c114:	e010      	b.n	c138 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    c116:	4b0e      	ldr	r3, [pc, #56]	; (c150 <prvAddCurrentTaskToDelayedList+0xa0>)
    c118:	681a      	ldr	r2, [r3, #0]
    c11a:	4b0a      	ldr	r3, [pc, #40]	; (c144 <prvAddCurrentTaskToDelayedList+0x94>)
    c11c:	681b      	ldr	r3, [r3, #0]
    c11e:	3304      	adds	r3, #4
    c120:	4619      	mov	r1, r3
    c122:	4610      	mov	r0, r2
    c124:	f7fe fc41 	bl	a9aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
    c128:	4b0a      	ldr	r3, [pc, #40]	; (c154 <prvAddCurrentTaskToDelayedList+0xa4>)
    c12a:	681b      	ldr	r3, [r3, #0]
    c12c:	68ba      	ldr	r2, [r7, #8]
    c12e:	429a      	cmp	r2, r3
    c130:	d202      	bcs.n	c138 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
    c132:	4a08      	ldr	r2, [pc, #32]	; (c154 <prvAddCurrentTaskToDelayedList+0xa4>)
    c134:	68bb      	ldr	r3, [r7, #8]
    c136:	6013      	str	r3, [r2, #0]
}
    c138:	bf00      	nop
    c13a:	3710      	adds	r7, #16
    c13c:	46bd      	mov	sp, r7
    c13e:	bd80      	pop	{r7, pc}
    c140:	0001de98 	.word	0x0001de98
    c144:	0001d9c0 	.word	0x0001d9c0
    c148:	0001de80 	.word	0x0001de80
    c14c:	0001de50 	.word	0x0001de50
    c150:	0001de4c 	.word	0x0001de4c
    c154:	0001deb4 	.word	0x0001deb4

0000c158 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    c158:	b580      	push	{r7, lr}
    c15a:	b08a      	sub	sp, #40	; 0x28
    c15c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
    c15e:	2300      	movs	r3, #0
    c160:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    c162:	f000 faff 	bl	c764 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
    c166:	4b1c      	ldr	r3, [pc, #112]	; (c1d8 <xTimerCreateTimerTask+0x80>)
    c168:	681b      	ldr	r3, [r3, #0]
    c16a:	2b00      	cmp	r3, #0
    c16c:	d021      	beq.n	c1b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
    c16e:	2300      	movs	r3, #0
    c170:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
    c172:	2300      	movs	r3, #0
    c174:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
    c176:	1d3a      	adds	r2, r7, #4
    c178:	f107 0108 	add.w	r1, r7, #8
    c17c:	f107 030c 	add.w	r3, r7, #12
    c180:	4618      	mov	r0, r3
    c182:	f7fe fba7 	bl	a8d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
    c186:	6879      	ldr	r1, [r7, #4]
    c188:	68bb      	ldr	r3, [r7, #8]
    c18a:	68fa      	ldr	r2, [r7, #12]
    c18c:	9202      	str	r2, [sp, #8]
    c18e:	9301      	str	r3, [sp, #4]
    c190:	2302      	movs	r3, #2
    c192:	9300      	str	r3, [sp, #0]
    c194:	2300      	movs	r3, #0
    c196:	460a      	mov	r2, r1
    c198:	4910      	ldr	r1, [pc, #64]	; (c1dc <xTimerCreateTimerTask+0x84>)
    c19a:	4811      	ldr	r0, [pc, #68]	; (c1e0 <xTimerCreateTimerTask+0x88>)
    c19c:	f7ff f93c 	bl	b418 <xTaskCreateStatic>
    c1a0:	4602      	mov	r2, r0
    c1a2:	4b10      	ldr	r3, [pc, #64]	; (c1e4 <xTimerCreateTimerTask+0x8c>)
    c1a4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
    c1a6:	4b0f      	ldr	r3, [pc, #60]	; (c1e4 <xTimerCreateTimerTask+0x8c>)
    c1a8:	681b      	ldr	r3, [r3, #0]
    c1aa:	2b00      	cmp	r3, #0
    c1ac:	d001      	beq.n	c1b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
    c1ae:	2301      	movs	r3, #1
    c1b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    c1b2:	697b      	ldr	r3, [r7, #20]
    c1b4:	2b00      	cmp	r3, #0
    c1b6:	d109      	bne.n	c1cc <xTimerCreateTimerTask+0x74>
    c1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
    c1bc:	f383 8811 	msr	BASEPRI, r3
    c1c0:	f3bf 8f6f 	isb	sy
    c1c4:	f3bf 8f4f 	dsb	sy
    c1c8:	613b      	str	r3, [r7, #16]
    c1ca:	e7fe      	b.n	c1ca <xTimerCreateTimerTask+0x72>
	return xReturn;
    c1cc:	697b      	ldr	r3, [r7, #20]
}
    c1ce:	4618      	mov	r0, r3
    c1d0:	3718      	adds	r7, #24
    c1d2:	46bd      	mov	sp, r7
    c1d4:	bd80      	pop	{r7, pc}
    c1d6:	bf00      	nop
    c1d8:	0001def0 	.word	0x0001def0
    c1dc:	0000d154 	.word	0x0000d154
    c1e0:	0000c319 	.word	0x0000c319
    c1e4:	0001def4 	.word	0x0001def4

0000c1e8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    c1e8:	b580      	push	{r7, lr}
    c1ea:	b08a      	sub	sp, #40	; 0x28
    c1ec:	af00      	add	r7, sp, #0
    c1ee:	60f8      	str	r0, [r7, #12]
    c1f0:	60b9      	str	r1, [r7, #8]
    c1f2:	607a      	str	r2, [r7, #4]
    c1f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
    c1f6:	2300      	movs	r3, #0
    c1f8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
    c1fa:	68fb      	ldr	r3, [r7, #12]
    c1fc:	2b00      	cmp	r3, #0
    c1fe:	d109      	bne.n	c214 <xTimerGenericCommand+0x2c>
    c200:	f04f 0350 	mov.w	r3, #80	; 0x50
    c204:	f383 8811 	msr	BASEPRI, r3
    c208:	f3bf 8f6f 	isb	sy
    c20c:	f3bf 8f4f 	dsb	sy
    c210:	623b      	str	r3, [r7, #32]
    c212:	e7fe      	b.n	c212 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    c214:	4b19      	ldr	r3, [pc, #100]	; (c27c <xTimerGenericCommand+0x94>)
    c216:	681b      	ldr	r3, [r3, #0]
    c218:	2b00      	cmp	r3, #0
    c21a:	d02a      	beq.n	c272 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    c21c:	68bb      	ldr	r3, [r7, #8]
    c21e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    c220:	687b      	ldr	r3, [r7, #4]
    c222:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
    c224:	68fb      	ldr	r3, [r7, #12]
    c226:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    c228:	68bb      	ldr	r3, [r7, #8]
    c22a:	2b05      	cmp	r3, #5
    c22c:	dc18      	bgt.n	c260 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    c22e:	f7ff feb5 	bl	bf9c <xTaskGetSchedulerState>
    c232:	4603      	mov	r3, r0
    c234:	2b02      	cmp	r3, #2
    c236:	d109      	bne.n	c24c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    c238:	4b10      	ldr	r3, [pc, #64]	; (c27c <xTimerGenericCommand+0x94>)
    c23a:	6818      	ldr	r0, [r3, #0]
    c23c:	f107 0110 	add.w	r1, r7, #16
    c240:	2300      	movs	r3, #0
    c242:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    c244:	f7fe fd12 	bl	ac6c <xQueueGenericSend>
    c248:	6278      	str	r0, [r7, #36]	; 0x24
    c24a:	e012      	b.n	c272 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    c24c:	4b0b      	ldr	r3, [pc, #44]	; (c27c <xTimerGenericCommand+0x94>)
    c24e:	6818      	ldr	r0, [r3, #0]
    c250:	f107 0110 	add.w	r1, r7, #16
    c254:	2300      	movs	r3, #0
    c256:	2200      	movs	r2, #0
    c258:	f7fe fd08 	bl	ac6c <xQueueGenericSend>
    c25c:	6278      	str	r0, [r7, #36]	; 0x24
    c25e:	e008      	b.n	c272 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    c260:	4b06      	ldr	r3, [pc, #24]	; (c27c <xTimerGenericCommand+0x94>)
    c262:	6818      	ldr	r0, [r3, #0]
    c264:	f107 0110 	add.w	r1, r7, #16
    c268:	2300      	movs	r3, #0
    c26a:	683a      	ldr	r2, [r7, #0]
    c26c:	f7fe fdf8 	bl	ae60 <xQueueGenericSendFromISR>
    c270:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    c272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    c274:	4618      	mov	r0, r3
    c276:	3728      	adds	r7, #40	; 0x28
    c278:	46bd      	mov	sp, r7
    c27a:	bd80      	pop	{r7, pc}
    c27c:	0001def0 	.word	0x0001def0

0000c280 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    c280:	b580      	push	{r7, lr}
    c282:	b088      	sub	sp, #32
    c284:	af02      	add	r7, sp, #8
    c286:	6078      	str	r0, [r7, #4]
    c288:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    c28a:	4b22      	ldr	r3, [pc, #136]	; (c314 <prvProcessExpiredTimer+0x94>)
    c28c:	681b      	ldr	r3, [r3, #0]
    c28e:	68db      	ldr	r3, [r3, #12]
    c290:	68db      	ldr	r3, [r3, #12]
    c292:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    c294:	697b      	ldr	r3, [r7, #20]
    c296:	3304      	adds	r3, #4
    c298:	4618      	mov	r0, r3
    c29a:	f7fe fbbf 	bl	aa1c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    c29e:	697b      	ldr	r3, [r7, #20]
    c2a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    c2a4:	f003 0304 	and.w	r3, r3, #4
    c2a8:	2b00      	cmp	r3, #0
    c2aa:	d021      	beq.n	c2f0 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    c2ac:	697b      	ldr	r3, [r7, #20]
    c2ae:	699a      	ldr	r2, [r3, #24]
    c2b0:	687b      	ldr	r3, [r7, #4]
    c2b2:	18d1      	adds	r1, r2, r3
    c2b4:	687b      	ldr	r3, [r7, #4]
    c2b6:	683a      	ldr	r2, [r7, #0]
    c2b8:	6978      	ldr	r0, [r7, #20]
    c2ba:	f000 f8d1 	bl	c460 <prvInsertTimerInActiveList>
    c2be:	4603      	mov	r3, r0
    c2c0:	2b00      	cmp	r3, #0
    c2c2:	d01e      	beq.n	c302 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    c2c4:	2300      	movs	r3, #0
    c2c6:	9300      	str	r3, [sp, #0]
    c2c8:	2300      	movs	r3, #0
    c2ca:	687a      	ldr	r2, [r7, #4]
    c2cc:	2100      	movs	r1, #0
    c2ce:	6978      	ldr	r0, [r7, #20]
    c2d0:	f7ff ff8a 	bl	c1e8 <xTimerGenericCommand>
    c2d4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
    c2d6:	693b      	ldr	r3, [r7, #16]
    c2d8:	2b00      	cmp	r3, #0
    c2da:	d112      	bne.n	c302 <prvProcessExpiredTimer+0x82>
    c2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
    c2e0:	f383 8811 	msr	BASEPRI, r3
    c2e4:	f3bf 8f6f 	isb	sy
    c2e8:	f3bf 8f4f 	dsb	sy
    c2ec:	60fb      	str	r3, [r7, #12]
    c2ee:	e7fe      	b.n	c2ee <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    c2f0:	697b      	ldr	r3, [r7, #20]
    c2f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    c2f6:	f023 0301 	bic.w	r3, r3, #1
    c2fa:	b2da      	uxtb	r2, r3
    c2fc:	697b      	ldr	r3, [r7, #20]
    c2fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    c302:	697b      	ldr	r3, [r7, #20]
    c304:	6a1b      	ldr	r3, [r3, #32]
    c306:	6978      	ldr	r0, [r7, #20]
    c308:	4798      	blx	r3
}
    c30a:	bf00      	nop
    c30c:	3718      	adds	r7, #24
    c30e:	46bd      	mov	sp, r7
    c310:	bd80      	pop	{r7, pc}
    c312:	bf00      	nop
    c314:	0001dee8 	.word	0x0001dee8

0000c318 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
    c318:	b580      	push	{r7, lr}
    c31a:	b084      	sub	sp, #16
    c31c:	af00      	add	r7, sp, #0
    c31e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    c320:	f107 0308 	add.w	r3, r7, #8
    c324:	4618      	mov	r0, r3
    c326:	f000 f857 	bl	c3d8 <prvGetNextExpireTime>
    c32a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    c32c:	68bb      	ldr	r3, [r7, #8]
    c32e:	4619      	mov	r1, r3
    c330:	68f8      	ldr	r0, [r7, #12]
    c332:	f000 f803 	bl	c33c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
    c336:	f000 f8d5 	bl	c4e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    c33a:	e7f1      	b.n	c320 <prvTimerTask+0x8>

0000c33c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
    c33c:	b580      	push	{r7, lr}
    c33e:	b084      	sub	sp, #16
    c340:	af00      	add	r7, sp, #0
    c342:	6078      	str	r0, [r7, #4]
    c344:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    c346:	f7ff fa57 	bl	b7f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    c34a:	f107 0308 	add.w	r3, r7, #8
    c34e:	4618      	mov	r0, r3
    c350:	f000 f866 	bl	c420 <prvSampleTimeNow>
    c354:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
    c356:	68bb      	ldr	r3, [r7, #8]
    c358:	2b00      	cmp	r3, #0
    c35a:	d130      	bne.n	c3be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    c35c:	683b      	ldr	r3, [r7, #0]
    c35e:	2b00      	cmp	r3, #0
    c360:	d10a      	bne.n	c378 <prvProcessTimerOrBlockTask+0x3c>
    c362:	687a      	ldr	r2, [r7, #4]
    c364:	68fb      	ldr	r3, [r7, #12]
    c366:	429a      	cmp	r2, r3
    c368:	d806      	bhi.n	c378 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
    c36a:	f7ff fa53 	bl	b814 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    c36e:	68f9      	ldr	r1, [r7, #12]
    c370:	6878      	ldr	r0, [r7, #4]
    c372:	f7ff ff85 	bl	c280 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    c376:	e024      	b.n	c3c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
    c378:	683b      	ldr	r3, [r7, #0]
    c37a:	2b00      	cmp	r3, #0
    c37c:	d008      	beq.n	c390 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    c37e:	4b13      	ldr	r3, [pc, #76]	; (c3cc <prvProcessTimerOrBlockTask+0x90>)
    c380:	681b      	ldr	r3, [r3, #0]
    c382:	681b      	ldr	r3, [r3, #0]
    c384:	2b00      	cmp	r3, #0
    c386:	d101      	bne.n	c38c <prvProcessTimerOrBlockTask+0x50>
    c388:	2301      	movs	r3, #1
    c38a:	e000      	b.n	c38e <prvProcessTimerOrBlockTask+0x52>
    c38c:	2300      	movs	r3, #0
    c38e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    c390:	4b0f      	ldr	r3, [pc, #60]	; (c3d0 <prvProcessTimerOrBlockTask+0x94>)
    c392:	6818      	ldr	r0, [r3, #0]
    c394:	687a      	ldr	r2, [r7, #4]
    c396:	68fb      	ldr	r3, [r7, #12]
    c398:	1ad3      	subs	r3, r2, r3
    c39a:	683a      	ldr	r2, [r7, #0]
    c39c:	4619      	mov	r1, r3
    c39e:	f7ff f807 	bl	b3b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
    c3a2:	f7ff fa37 	bl	b814 <xTaskResumeAll>
    c3a6:	4603      	mov	r3, r0
    c3a8:	2b00      	cmp	r3, #0
    c3aa:	d10a      	bne.n	c3c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
    c3ac:	4b09      	ldr	r3, [pc, #36]	; (c3d4 <prvProcessTimerOrBlockTask+0x98>)
    c3ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    c3b2:	601a      	str	r2, [r3, #0]
    c3b4:	f3bf 8f4f 	dsb	sy
    c3b8:	f3bf 8f6f 	isb	sy
}
    c3bc:	e001      	b.n	c3c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
    c3be:	f7ff fa29 	bl	b814 <xTaskResumeAll>
}
    c3c2:	bf00      	nop
    c3c4:	3710      	adds	r7, #16
    c3c6:	46bd      	mov	sp, r7
    c3c8:	bd80      	pop	{r7, pc}
    c3ca:	bf00      	nop
    c3cc:	0001deec 	.word	0x0001deec
    c3d0:	0001def0 	.word	0x0001def0
    c3d4:	e000ed04 	.word	0xe000ed04

0000c3d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    c3d8:	b480      	push	{r7}
    c3da:	b085      	sub	sp, #20
    c3dc:	af00      	add	r7, sp, #0
    c3de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    c3e0:	4b0e      	ldr	r3, [pc, #56]	; (c41c <prvGetNextExpireTime+0x44>)
    c3e2:	681b      	ldr	r3, [r3, #0]
    c3e4:	681b      	ldr	r3, [r3, #0]
    c3e6:	2b00      	cmp	r3, #0
    c3e8:	d101      	bne.n	c3ee <prvGetNextExpireTime+0x16>
    c3ea:	2201      	movs	r2, #1
    c3ec:	e000      	b.n	c3f0 <prvGetNextExpireTime+0x18>
    c3ee:	2200      	movs	r2, #0
    c3f0:	687b      	ldr	r3, [r7, #4]
    c3f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    c3f4:	687b      	ldr	r3, [r7, #4]
    c3f6:	681b      	ldr	r3, [r3, #0]
    c3f8:	2b00      	cmp	r3, #0
    c3fa:	d105      	bne.n	c408 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    c3fc:	4b07      	ldr	r3, [pc, #28]	; (c41c <prvGetNextExpireTime+0x44>)
    c3fe:	681b      	ldr	r3, [r3, #0]
    c400:	68db      	ldr	r3, [r3, #12]
    c402:	681b      	ldr	r3, [r3, #0]
    c404:	60fb      	str	r3, [r7, #12]
    c406:	e001      	b.n	c40c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    c408:	2300      	movs	r3, #0
    c40a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
    c40c:	68fb      	ldr	r3, [r7, #12]
}
    c40e:	4618      	mov	r0, r3
    c410:	3714      	adds	r7, #20
    c412:	46bd      	mov	sp, r7
    c414:	f85d 7b04 	ldr.w	r7, [sp], #4
    c418:	4770      	bx	lr
    c41a:	bf00      	nop
    c41c:	0001dee8 	.word	0x0001dee8

0000c420 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    c420:	b580      	push	{r7, lr}
    c422:	b084      	sub	sp, #16
    c424:	af00      	add	r7, sp, #0
    c426:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    c428:	f7ff fa90 	bl	b94c <xTaskGetTickCount>
    c42c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
    c42e:	4b0b      	ldr	r3, [pc, #44]	; (c45c <prvSampleTimeNow+0x3c>)
    c430:	681b      	ldr	r3, [r3, #0]
    c432:	68fa      	ldr	r2, [r7, #12]
    c434:	429a      	cmp	r2, r3
    c436:	d205      	bcs.n	c444 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
    c438:	f000 f930 	bl	c69c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
    c43c:	687b      	ldr	r3, [r7, #4]
    c43e:	2201      	movs	r2, #1
    c440:	601a      	str	r2, [r3, #0]
    c442:	e002      	b.n	c44a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    c444:	687b      	ldr	r3, [r7, #4]
    c446:	2200      	movs	r2, #0
    c448:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
    c44a:	4a04      	ldr	r2, [pc, #16]	; (c45c <prvSampleTimeNow+0x3c>)
    c44c:	68fb      	ldr	r3, [r7, #12]
    c44e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
    c450:	68fb      	ldr	r3, [r7, #12]
}
    c452:	4618      	mov	r0, r3
    c454:	3710      	adds	r7, #16
    c456:	46bd      	mov	sp, r7
    c458:	bd80      	pop	{r7, pc}
    c45a:	bf00      	nop
    c45c:	0001def8 	.word	0x0001def8

0000c460 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    c460:	b580      	push	{r7, lr}
    c462:	b086      	sub	sp, #24
    c464:	af00      	add	r7, sp, #0
    c466:	60f8      	str	r0, [r7, #12]
    c468:	60b9      	str	r1, [r7, #8]
    c46a:	607a      	str	r2, [r7, #4]
    c46c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
    c46e:	2300      	movs	r3, #0
    c470:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    c472:	68fb      	ldr	r3, [r7, #12]
    c474:	68ba      	ldr	r2, [r7, #8]
    c476:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    c478:	68fb      	ldr	r3, [r7, #12]
    c47a:	68fa      	ldr	r2, [r7, #12]
    c47c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
    c47e:	68ba      	ldr	r2, [r7, #8]
    c480:	687b      	ldr	r3, [r7, #4]
    c482:	429a      	cmp	r2, r3
    c484:	d812      	bhi.n	c4ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    c486:	687a      	ldr	r2, [r7, #4]
    c488:	683b      	ldr	r3, [r7, #0]
    c48a:	1ad2      	subs	r2, r2, r3
    c48c:	68fb      	ldr	r3, [r7, #12]
    c48e:	699b      	ldr	r3, [r3, #24]
    c490:	429a      	cmp	r2, r3
    c492:	d302      	bcc.n	c49a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    c494:	2301      	movs	r3, #1
    c496:	617b      	str	r3, [r7, #20]
    c498:	e01b      	b.n	c4d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    c49a:	4b10      	ldr	r3, [pc, #64]	; (c4dc <prvInsertTimerInActiveList+0x7c>)
    c49c:	681a      	ldr	r2, [r3, #0]
    c49e:	68fb      	ldr	r3, [r7, #12]
    c4a0:	3304      	adds	r3, #4
    c4a2:	4619      	mov	r1, r3
    c4a4:	4610      	mov	r0, r2
    c4a6:	f7fe fa80 	bl	a9aa <vListInsert>
    c4aa:	e012      	b.n	c4d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    c4ac:	687a      	ldr	r2, [r7, #4]
    c4ae:	683b      	ldr	r3, [r7, #0]
    c4b0:	429a      	cmp	r2, r3
    c4b2:	d206      	bcs.n	c4c2 <prvInsertTimerInActiveList+0x62>
    c4b4:	68ba      	ldr	r2, [r7, #8]
    c4b6:	683b      	ldr	r3, [r7, #0]
    c4b8:	429a      	cmp	r2, r3
    c4ba:	d302      	bcc.n	c4c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    c4bc:	2301      	movs	r3, #1
    c4be:	617b      	str	r3, [r7, #20]
    c4c0:	e007      	b.n	c4d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    c4c2:	4b07      	ldr	r3, [pc, #28]	; (c4e0 <prvInsertTimerInActiveList+0x80>)
    c4c4:	681a      	ldr	r2, [r3, #0]
    c4c6:	68fb      	ldr	r3, [r7, #12]
    c4c8:	3304      	adds	r3, #4
    c4ca:	4619      	mov	r1, r3
    c4cc:	4610      	mov	r0, r2
    c4ce:	f7fe fa6c 	bl	a9aa <vListInsert>
		}
	}

	return xProcessTimerNow;
    c4d2:	697b      	ldr	r3, [r7, #20]
}
    c4d4:	4618      	mov	r0, r3
    c4d6:	3718      	adds	r7, #24
    c4d8:	46bd      	mov	sp, r7
    c4da:	bd80      	pop	{r7, pc}
    c4dc:	0001deec 	.word	0x0001deec
    c4e0:	0001dee8 	.word	0x0001dee8

0000c4e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
    c4e4:	b580      	push	{r7, lr}
    c4e6:	b08e      	sub	sp, #56	; 0x38
    c4e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    c4ea:	e0c6      	b.n	c67a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
    c4ec:	687b      	ldr	r3, [r7, #4]
    c4ee:	2b00      	cmp	r3, #0
    c4f0:	da17      	bge.n	c522 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
    c4f2:	1d3b      	adds	r3, r7, #4
    c4f4:	3304      	adds	r3, #4
    c4f6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
    c4f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c4fa:	2b00      	cmp	r3, #0
    c4fc:	d109      	bne.n	c512 <prvProcessReceivedCommands+0x2e>
    c4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
    c502:	f383 8811 	msr	BASEPRI, r3
    c506:	f3bf 8f6f 	isb	sy
    c50a:	f3bf 8f4f 	dsb	sy
    c50e:	61fb      	str	r3, [r7, #28]
    c510:	e7fe      	b.n	c510 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
    c512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c514:	681b      	ldr	r3, [r3, #0]
    c516:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c518:	6850      	ldr	r0, [r2, #4]
    c51a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c51c:	6892      	ldr	r2, [r2, #8]
    c51e:	4611      	mov	r1, r2
    c520:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    c522:	687b      	ldr	r3, [r7, #4]
    c524:	2b00      	cmp	r3, #0
    c526:	f2c0 80a7 	blt.w	c678 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    c52a:	68fb      	ldr	r3, [r7, #12]
    c52c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    c52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c530:	695b      	ldr	r3, [r3, #20]
    c532:	2b00      	cmp	r3, #0
    c534:	d004      	beq.n	c540 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    c536:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c538:	3304      	adds	r3, #4
    c53a:	4618      	mov	r0, r3
    c53c:	f7fe fa6e 	bl	aa1c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    c540:	463b      	mov	r3, r7
    c542:	4618      	mov	r0, r3
    c544:	f7ff ff6c 	bl	c420 <prvSampleTimeNow>
    c548:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
    c54a:	687b      	ldr	r3, [r7, #4]
    c54c:	2b09      	cmp	r3, #9
    c54e:	f200 8094 	bhi.w	c67a <prvProcessReceivedCommands+0x196>
    c552:	a201      	add	r2, pc, #4	; (adr r2, c558 <prvProcessReceivedCommands+0x74>)
    c554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c558:	0000c581 	.word	0x0000c581
    c55c:	0000c581 	.word	0x0000c581
    c560:	0000c581 	.word	0x0000c581
    c564:	0000c5f3 	.word	0x0000c5f3
    c568:	0000c607 	.word	0x0000c607
    c56c:	0000c64f 	.word	0x0000c64f
    c570:	0000c581 	.word	0x0000c581
    c574:	0000c581 	.word	0x0000c581
    c578:	0000c5f3 	.word	0x0000c5f3
    c57c:	0000c607 	.word	0x0000c607
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    c580:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c582:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    c586:	f043 0301 	orr.w	r3, r3, #1
    c58a:	b2da      	uxtb	r2, r3
    c58c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c58e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    c592:	68ba      	ldr	r2, [r7, #8]
    c594:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c596:	699b      	ldr	r3, [r3, #24]
    c598:	18d1      	adds	r1, r2, r3
    c59a:	68bb      	ldr	r3, [r7, #8]
    c59c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c59e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c5a0:	f7ff ff5e 	bl	c460 <prvInsertTimerInActiveList>
    c5a4:	4603      	mov	r3, r0
    c5a6:	2b00      	cmp	r3, #0
    c5a8:	d067      	beq.n	c67a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    c5aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c5ac:	6a1b      	ldr	r3, [r3, #32]
    c5ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c5b0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    c5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c5b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    c5b8:	f003 0304 	and.w	r3, r3, #4
    c5bc:	2b00      	cmp	r3, #0
    c5be:	d05c      	beq.n	c67a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    c5c0:	68ba      	ldr	r2, [r7, #8]
    c5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c5c4:	699b      	ldr	r3, [r3, #24]
    c5c6:	441a      	add	r2, r3
    c5c8:	2300      	movs	r3, #0
    c5ca:	9300      	str	r3, [sp, #0]
    c5cc:	2300      	movs	r3, #0
    c5ce:	2100      	movs	r1, #0
    c5d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c5d2:	f7ff fe09 	bl	c1e8 <xTimerGenericCommand>
    c5d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
    c5d8:	6a3b      	ldr	r3, [r7, #32]
    c5da:	2b00      	cmp	r3, #0
    c5dc:	d14d      	bne.n	c67a <prvProcessReceivedCommands+0x196>
    c5de:	f04f 0350 	mov.w	r3, #80	; 0x50
    c5e2:	f383 8811 	msr	BASEPRI, r3
    c5e6:	f3bf 8f6f 	isb	sy
    c5ea:	f3bf 8f4f 	dsb	sy
    c5ee:	61bb      	str	r3, [r7, #24]
    c5f0:	e7fe      	b.n	c5f0 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    c5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c5f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    c5f8:	f023 0301 	bic.w	r3, r3, #1
    c5fc:	b2da      	uxtb	r2, r3
    c5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c600:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
    c604:	e039      	b.n	c67a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    c606:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c608:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    c60c:	f043 0301 	orr.w	r3, r3, #1
    c610:	b2da      	uxtb	r2, r3
    c612:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c614:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    c618:	68ba      	ldr	r2, [r7, #8]
    c61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c61c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    c61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c620:	699b      	ldr	r3, [r3, #24]
    c622:	2b00      	cmp	r3, #0
    c624:	d109      	bne.n	c63a <prvProcessReceivedCommands+0x156>
    c626:	f04f 0350 	mov.w	r3, #80	; 0x50
    c62a:	f383 8811 	msr	BASEPRI, r3
    c62e:	f3bf 8f6f 	isb	sy
    c632:	f3bf 8f4f 	dsb	sy
    c636:	617b      	str	r3, [r7, #20]
    c638:	e7fe      	b.n	c638 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    c63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c63c:	699a      	ldr	r2, [r3, #24]
    c63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c640:	18d1      	adds	r1, r2, r3
    c642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c646:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c648:	f7ff ff0a 	bl	c460 <prvInsertTimerInActiveList>
					break;
    c64c:	e015      	b.n	c67a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    c64e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c650:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    c654:	f003 0302 	and.w	r3, r3, #2
    c658:	2b00      	cmp	r3, #0
    c65a:	d103      	bne.n	c664 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
    c65c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c65e:	f000 fa93 	bl	cb88 <vPortFree>
    c662:	e00a      	b.n	c67a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    c664:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c666:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    c66a:	f023 0301 	bic.w	r3, r3, #1
    c66e:	b2da      	uxtb	r2, r3
    c670:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c672:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
    c676:	e000      	b.n	c67a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
    c678:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    c67a:	4b07      	ldr	r3, [pc, #28]	; (c698 <prvProcessReceivedCommands+0x1b4>)
    c67c:	681b      	ldr	r3, [r3, #0]
    c67e:	1d39      	adds	r1, r7, #4
    c680:	2200      	movs	r2, #0
    c682:	4618      	mov	r0, r3
    c684:	f7fe fc80 	bl	af88 <xQueueReceive>
    c688:	4603      	mov	r3, r0
    c68a:	2b00      	cmp	r3, #0
    c68c:	f47f af2e 	bne.w	c4ec <prvProcessReceivedCommands+0x8>
	}
}
    c690:	bf00      	nop
    c692:	3730      	adds	r7, #48	; 0x30
    c694:	46bd      	mov	sp, r7
    c696:	bd80      	pop	{r7, pc}
    c698:	0001def0 	.word	0x0001def0

0000c69c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    c69c:	b580      	push	{r7, lr}
    c69e:	b088      	sub	sp, #32
    c6a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    c6a2:	e047      	b.n	c734 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    c6a4:	4b2d      	ldr	r3, [pc, #180]	; (c75c <prvSwitchTimerLists+0xc0>)
    c6a6:	681b      	ldr	r3, [r3, #0]
    c6a8:	68db      	ldr	r3, [r3, #12]
    c6aa:	681b      	ldr	r3, [r3, #0]
    c6ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    c6ae:	4b2b      	ldr	r3, [pc, #172]	; (c75c <prvSwitchTimerLists+0xc0>)
    c6b0:	681b      	ldr	r3, [r3, #0]
    c6b2:	68db      	ldr	r3, [r3, #12]
    c6b4:	68db      	ldr	r3, [r3, #12]
    c6b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    c6b8:	68fb      	ldr	r3, [r7, #12]
    c6ba:	3304      	adds	r3, #4
    c6bc:	4618      	mov	r0, r3
    c6be:	f7fe f9ad 	bl	aa1c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    c6c2:	68fb      	ldr	r3, [r7, #12]
    c6c4:	6a1b      	ldr	r3, [r3, #32]
    c6c6:	68f8      	ldr	r0, [r7, #12]
    c6c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    c6ca:	68fb      	ldr	r3, [r7, #12]
    c6cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    c6d0:	f003 0304 	and.w	r3, r3, #4
    c6d4:	2b00      	cmp	r3, #0
    c6d6:	d02d      	beq.n	c734 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    c6d8:	68fb      	ldr	r3, [r7, #12]
    c6da:	699b      	ldr	r3, [r3, #24]
    c6dc:	693a      	ldr	r2, [r7, #16]
    c6de:	4413      	add	r3, r2
    c6e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
    c6e2:	68ba      	ldr	r2, [r7, #8]
    c6e4:	693b      	ldr	r3, [r7, #16]
    c6e6:	429a      	cmp	r2, r3
    c6e8:	d90e      	bls.n	c708 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    c6ea:	68fb      	ldr	r3, [r7, #12]
    c6ec:	68ba      	ldr	r2, [r7, #8]
    c6ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    c6f0:	68fb      	ldr	r3, [r7, #12]
    c6f2:	68fa      	ldr	r2, [r7, #12]
    c6f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    c6f6:	4b19      	ldr	r3, [pc, #100]	; (c75c <prvSwitchTimerLists+0xc0>)
    c6f8:	681a      	ldr	r2, [r3, #0]
    c6fa:	68fb      	ldr	r3, [r7, #12]
    c6fc:	3304      	adds	r3, #4
    c6fe:	4619      	mov	r1, r3
    c700:	4610      	mov	r0, r2
    c702:	f7fe f952 	bl	a9aa <vListInsert>
    c706:	e015      	b.n	c734 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    c708:	2300      	movs	r3, #0
    c70a:	9300      	str	r3, [sp, #0]
    c70c:	2300      	movs	r3, #0
    c70e:	693a      	ldr	r2, [r7, #16]
    c710:	2100      	movs	r1, #0
    c712:	68f8      	ldr	r0, [r7, #12]
    c714:	f7ff fd68 	bl	c1e8 <xTimerGenericCommand>
    c718:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
    c71a:	687b      	ldr	r3, [r7, #4]
    c71c:	2b00      	cmp	r3, #0
    c71e:	d109      	bne.n	c734 <prvSwitchTimerLists+0x98>
    c720:	f04f 0350 	mov.w	r3, #80	; 0x50
    c724:	f383 8811 	msr	BASEPRI, r3
    c728:	f3bf 8f6f 	isb	sy
    c72c:	f3bf 8f4f 	dsb	sy
    c730:	603b      	str	r3, [r7, #0]
    c732:	e7fe      	b.n	c732 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    c734:	4b09      	ldr	r3, [pc, #36]	; (c75c <prvSwitchTimerLists+0xc0>)
    c736:	681b      	ldr	r3, [r3, #0]
    c738:	681b      	ldr	r3, [r3, #0]
    c73a:	2b00      	cmp	r3, #0
    c73c:	d1b2      	bne.n	c6a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
    c73e:	4b07      	ldr	r3, [pc, #28]	; (c75c <prvSwitchTimerLists+0xc0>)
    c740:	681b      	ldr	r3, [r3, #0]
    c742:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
    c744:	4b06      	ldr	r3, [pc, #24]	; (c760 <prvSwitchTimerLists+0xc4>)
    c746:	681b      	ldr	r3, [r3, #0]
    c748:	4a04      	ldr	r2, [pc, #16]	; (c75c <prvSwitchTimerLists+0xc0>)
    c74a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
    c74c:	4a04      	ldr	r2, [pc, #16]	; (c760 <prvSwitchTimerLists+0xc4>)
    c74e:	697b      	ldr	r3, [r7, #20]
    c750:	6013      	str	r3, [r2, #0]
}
    c752:	bf00      	nop
    c754:	3718      	adds	r7, #24
    c756:	46bd      	mov	sp, r7
    c758:	bd80      	pop	{r7, pc}
    c75a:	bf00      	nop
    c75c:	0001dee8 	.word	0x0001dee8
    c760:	0001deec 	.word	0x0001deec

0000c764 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    c764:	b580      	push	{r7, lr}
    c766:	b082      	sub	sp, #8
    c768:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    c76a:	f000 f94b 	bl	ca04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
    c76e:	4b15      	ldr	r3, [pc, #84]	; (c7c4 <prvCheckForValidListAndQueue+0x60>)
    c770:	681b      	ldr	r3, [r3, #0]
    c772:	2b00      	cmp	r3, #0
    c774:	d120      	bne.n	c7b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
    c776:	4814      	ldr	r0, [pc, #80]	; (c7c8 <prvCheckForValidListAndQueue+0x64>)
    c778:	f7fe f8c6 	bl	a908 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
    c77c:	4813      	ldr	r0, [pc, #76]	; (c7cc <prvCheckForValidListAndQueue+0x68>)
    c77e:	f7fe f8c3 	bl	a908 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
    c782:	4b13      	ldr	r3, [pc, #76]	; (c7d0 <prvCheckForValidListAndQueue+0x6c>)
    c784:	4a10      	ldr	r2, [pc, #64]	; (c7c8 <prvCheckForValidListAndQueue+0x64>)
    c786:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    c788:	4b12      	ldr	r3, [pc, #72]	; (c7d4 <prvCheckForValidListAndQueue+0x70>)
    c78a:	4a10      	ldr	r2, [pc, #64]	; (c7cc <prvCheckForValidListAndQueue+0x68>)
    c78c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
    c78e:	2300      	movs	r3, #0
    c790:	9300      	str	r3, [sp, #0]
    c792:	4b11      	ldr	r3, [pc, #68]	; (c7d8 <prvCheckForValidListAndQueue+0x74>)
    c794:	4a11      	ldr	r2, [pc, #68]	; (c7dc <prvCheckForValidListAndQueue+0x78>)
    c796:	2110      	movs	r1, #16
    c798:	200a      	movs	r0, #10
    c79a:	f7fe f9d1 	bl	ab40 <xQueueGenericCreateStatic>
    c79e:	4602      	mov	r2, r0
    c7a0:	4b08      	ldr	r3, [pc, #32]	; (c7c4 <prvCheckForValidListAndQueue+0x60>)
    c7a2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
    c7a4:	4b07      	ldr	r3, [pc, #28]	; (c7c4 <prvCheckForValidListAndQueue+0x60>)
    c7a6:	681b      	ldr	r3, [r3, #0]
    c7a8:	2b00      	cmp	r3, #0
    c7aa:	d005      	beq.n	c7b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
    c7ac:	4b05      	ldr	r3, [pc, #20]	; (c7c4 <prvCheckForValidListAndQueue+0x60>)
    c7ae:	681b      	ldr	r3, [r3, #0]
    c7b0:	490b      	ldr	r1, [pc, #44]	; (c7e0 <prvCheckForValidListAndQueue+0x7c>)
    c7b2:	4618      	mov	r0, r3
    c7b4:	f7fe fdd4 	bl	b360 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    c7b8:	f000 f952 	bl	ca60 <vPortExitCritical>
}
    c7bc:	bf00      	nop
    c7be:	46bd      	mov	sp, r7
    c7c0:	bd80      	pop	{r7, pc}
    c7c2:	bf00      	nop
    c7c4:	0001def0 	.word	0x0001def0
    c7c8:	0001dec0 	.word	0x0001dec0
    c7cc:	0001ded4 	.word	0x0001ded4
    c7d0:	0001dee8 	.word	0x0001dee8
    c7d4:	0001deec 	.word	0x0001deec
    c7d8:	0001df9c 	.word	0x0001df9c
    c7dc:	0001defc 	.word	0x0001defc
    c7e0:	0000d15c 	.word	0x0000d15c

0000c7e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    c7e4:	b480      	push	{r7}
    c7e6:	b085      	sub	sp, #20
    c7e8:	af00      	add	r7, sp, #0
    c7ea:	60f8      	str	r0, [r7, #12]
    c7ec:	60b9      	str	r1, [r7, #8]
    c7ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
    c7f0:	68fb      	ldr	r3, [r7, #12]
    c7f2:	3b04      	subs	r3, #4
    c7f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    c7f6:	68fb      	ldr	r3, [r7, #12]
    c7f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    c7fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    c7fe:	68fb      	ldr	r3, [r7, #12]
    c800:	3b04      	subs	r3, #4
    c802:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
    c804:	68bb      	ldr	r3, [r7, #8]
    c806:	f023 0201 	bic.w	r2, r3, #1
    c80a:	68fb      	ldr	r3, [r7, #12]
    c80c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    c80e:	68fb      	ldr	r3, [r7, #12]
    c810:	3b04      	subs	r3, #4
    c812:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    c814:	4a0c      	ldr	r2, [pc, #48]	; (c848 <pxPortInitialiseStack+0x64>)
    c816:	68fb      	ldr	r3, [r7, #12]
    c818:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    c81a:	68fb      	ldr	r3, [r7, #12]
    c81c:	3b14      	subs	r3, #20
    c81e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    c820:	687a      	ldr	r2, [r7, #4]
    c822:	68fb      	ldr	r3, [r7, #12]
    c824:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
    c826:	68fb      	ldr	r3, [r7, #12]
    c828:	3b04      	subs	r3, #4
    c82a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
    c82c:	68fb      	ldr	r3, [r7, #12]
    c82e:	f06f 0202 	mvn.w	r2, #2
    c832:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    c834:	68fb      	ldr	r3, [r7, #12]
    c836:	3b20      	subs	r3, #32
    c838:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    c83a:	68fb      	ldr	r3, [r7, #12]
}
    c83c:	4618      	mov	r0, r3
    c83e:	3714      	adds	r7, #20
    c840:	46bd      	mov	sp, r7
    c842:	f85d 7b04 	ldr.w	r7, [sp], #4
    c846:	4770      	bx	lr
    c848:	0000c84d 	.word	0x0000c84d

0000c84c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    c84c:	b480      	push	{r7}
    c84e:	b085      	sub	sp, #20
    c850:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
    c852:	2300      	movs	r3, #0
    c854:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    c856:	4b11      	ldr	r3, [pc, #68]	; (c89c <prvTaskExitError+0x50>)
    c858:	681b      	ldr	r3, [r3, #0]
    c85a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    c85e:	d009      	beq.n	c874 <prvTaskExitError+0x28>
    c860:	f04f 0350 	mov.w	r3, #80	; 0x50
    c864:	f383 8811 	msr	BASEPRI, r3
    c868:	f3bf 8f6f 	isb	sy
    c86c:	f3bf 8f4f 	dsb	sy
    c870:	60fb      	str	r3, [r7, #12]
    c872:	e7fe      	b.n	c872 <prvTaskExitError+0x26>
    c874:	f04f 0350 	mov.w	r3, #80	; 0x50
    c878:	f383 8811 	msr	BASEPRI, r3
    c87c:	f3bf 8f6f 	isb	sy
    c880:	f3bf 8f4f 	dsb	sy
    c884:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
    c886:	bf00      	nop
    c888:	687b      	ldr	r3, [r7, #4]
    c88a:	2b00      	cmp	r3, #0
    c88c:	d0fc      	beq.n	c888 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    c88e:	bf00      	nop
    c890:	3714      	adds	r7, #20
    c892:	46bd      	mov	sp, r7
    c894:	f85d 7b04 	ldr.w	r7, [sp], #4
    c898:	4770      	bx	lr
    c89a:	bf00      	nop
    c89c:	0001d18c 	.word	0x0001d18c

0000c8a0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
    c8a0:	4808      	ldr	r0, [pc, #32]	; (c8c4 <prvPortStartFirstTask+0x24>)
    c8a2:	6800      	ldr	r0, [r0, #0]
    c8a4:	6800      	ldr	r0, [r0, #0]
    c8a6:	f380 8808 	msr	MSP, r0
    c8aa:	f04f 0000 	mov.w	r0, #0
    c8ae:	f380 8814 	msr	CONTROL, r0
    c8b2:	b662      	cpsie	i
    c8b4:	b661      	cpsie	f
    c8b6:	f3bf 8f4f 	dsb	sy
    c8ba:	f3bf 8f6f 	isb	sy
    c8be:	df00      	svc	0
    c8c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
    c8c2:	bf00      	nop
    c8c4:	e000ed08 	.word	0xe000ed08

0000c8c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    c8c8:	b580      	push	{r7, lr}
    c8ca:	b086      	sub	sp, #24
    c8cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
    c8ce:	4b44      	ldr	r3, [pc, #272]	; (c9e0 <xPortStartScheduler+0x118>)
    c8d0:	681b      	ldr	r3, [r3, #0]
    c8d2:	4a44      	ldr	r2, [pc, #272]	; (c9e4 <xPortStartScheduler+0x11c>)
    c8d4:	4293      	cmp	r3, r2
    c8d6:	d109      	bne.n	c8ec <xPortStartScheduler+0x24>
    c8d8:	f04f 0350 	mov.w	r3, #80	; 0x50
    c8dc:	f383 8811 	msr	BASEPRI, r3
    c8e0:	f3bf 8f6f 	isb	sy
    c8e4:	f3bf 8f4f 	dsb	sy
    c8e8:	613b      	str	r3, [r7, #16]
    c8ea:	e7fe      	b.n	c8ea <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
    c8ec:	4b3c      	ldr	r3, [pc, #240]	; (c9e0 <xPortStartScheduler+0x118>)
    c8ee:	681b      	ldr	r3, [r3, #0]
    c8f0:	4a3d      	ldr	r2, [pc, #244]	; (c9e8 <xPortStartScheduler+0x120>)
    c8f2:	4293      	cmp	r3, r2
    c8f4:	d109      	bne.n	c90a <xPortStartScheduler+0x42>
    c8f6:	f04f 0350 	mov.w	r3, #80	; 0x50
    c8fa:	f383 8811 	msr	BASEPRI, r3
    c8fe:	f3bf 8f6f 	isb	sy
    c902:	f3bf 8f4f 	dsb	sy
    c906:	60fb      	str	r3, [r7, #12]
    c908:	e7fe      	b.n	c908 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
    c90a:	4b38      	ldr	r3, [pc, #224]	; (c9ec <xPortStartScheduler+0x124>)
    c90c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
    c90e:	697b      	ldr	r3, [r7, #20]
    c910:	781b      	ldrb	r3, [r3, #0]
    c912:	b2db      	uxtb	r3, r3
    c914:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
    c916:	697b      	ldr	r3, [r7, #20]
    c918:	22ff      	movs	r2, #255	; 0xff
    c91a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
    c91c:	697b      	ldr	r3, [r7, #20]
    c91e:	781b      	ldrb	r3, [r3, #0]
    c920:	b2db      	uxtb	r3, r3
    c922:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
    c924:	78fb      	ldrb	r3, [r7, #3]
    c926:	b2db      	uxtb	r3, r3
    c928:	f003 0350 	and.w	r3, r3, #80	; 0x50
    c92c:	b2da      	uxtb	r2, r3
    c92e:	4b30      	ldr	r3, [pc, #192]	; (c9f0 <xPortStartScheduler+0x128>)
    c930:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
    c932:	4b30      	ldr	r3, [pc, #192]	; (c9f4 <xPortStartScheduler+0x12c>)
    c934:	2207      	movs	r2, #7
    c936:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
    c938:	e009      	b.n	c94e <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
    c93a:	4b2e      	ldr	r3, [pc, #184]	; (c9f4 <xPortStartScheduler+0x12c>)
    c93c:	681b      	ldr	r3, [r3, #0]
    c93e:	3b01      	subs	r3, #1
    c940:	4a2c      	ldr	r2, [pc, #176]	; (c9f4 <xPortStartScheduler+0x12c>)
    c942:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
    c944:	78fb      	ldrb	r3, [r7, #3]
    c946:	b2db      	uxtb	r3, r3
    c948:	005b      	lsls	r3, r3, #1
    c94a:	b2db      	uxtb	r3, r3
    c94c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
    c94e:	78fb      	ldrb	r3, [r7, #3]
    c950:	b2db      	uxtb	r3, r3
    c952:	f003 0380 	and.w	r3, r3, #128	; 0x80
    c956:	2b80      	cmp	r3, #128	; 0x80
    c958:	d0ef      	beq.n	c93a <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
    c95a:	4b26      	ldr	r3, [pc, #152]	; (c9f4 <xPortStartScheduler+0x12c>)
    c95c:	681b      	ldr	r3, [r3, #0]
    c95e:	f1c3 0307 	rsb	r3, r3, #7
    c962:	2b04      	cmp	r3, #4
    c964:	d009      	beq.n	c97a <xPortStartScheduler+0xb2>
    c966:	f04f 0350 	mov.w	r3, #80	; 0x50
    c96a:	f383 8811 	msr	BASEPRI, r3
    c96e:	f3bf 8f6f 	isb	sy
    c972:	f3bf 8f4f 	dsb	sy
    c976:	60bb      	str	r3, [r7, #8]
    c978:	e7fe      	b.n	c978 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
    c97a:	4b1e      	ldr	r3, [pc, #120]	; (c9f4 <xPortStartScheduler+0x12c>)
    c97c:	681b      	ldr	r3, [r3, #0]
    c97e:	021b      	lsls	r3, r3, #8
    c980:	4a1c      	ldr	r2, [pc, #112]	; (c9f4 <xPortStartScheduler+0x12c>)
    c982:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
    c984:	4b1b      	ldr	r3, [pc, #108]	; (c9f4 <xPortStartScheduler+0x12c>)
    c986:	681b      	ldr	r3, [r3, #0]
    c988:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    c98c:	4a19      	ldr	r2, [pc, #100]	; (c9f4 <xPortStartScheduler+0x12c>)
    c98e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
    c990:	687b      	ldr	r3, [r7, #4]
    c992:	b2da      	uxtb	r2, r3
    c994:	697b      	ldr	r3, [r7, #20]
    c996:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
    c998:	4b17      	ldr	r3, [pc, #92]	; (c9f8 <xPortStartScheduler+0x130>)
    c99a:	681b      	ldr	r3, [r3, #0]
    c99c:	4a16      	ldr	r2, [pc, #88]	; (c9f8 <xPortStartScheduler+0x130>)
    c99e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    c9a2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
    c9a4:	4b14      	ldr	r3, [pc, #80]	; (c9f8 <xPortStartScheduler+0x130>)
    c9a6:	681b      	ldr	r3, [r3, #0]
    c9a8:	4a13      	ldr	r2, [pc, #76]	; (c9f8 <xPortStartScheduler+0x130>)
    c9aa:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
    c9ae:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
    c9b0:	f000 f87e 	bl	cab0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    c9b4:	4b11      	ldr	r3, [pc, #68]	; (c9fc <xPortStartScheduler+0x134>)
    c9b6:	2200      	movs	r2, #0
    c9b8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
    c9ba:	f000 f89d 	bl	caf8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
    c9be:	4b10      	ldr	r3, [pc, #64]	; (ca00 <xPortStartScheduler+0x138>)
    c9c0:	681b      	ldr	r3, [r3, #0]
    c9c2:	4a0f      	ldr	r2, [pc, #60]	; (ca00 <xPortStartScheduler+0x138>)
    c9c4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    c9c8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    c9ca:	f7ff ff69 	bl	c8a0 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
    c9ce:	f7ff f885 	bl	badc <vTaskSwitchContext>
	prvTaskExitError();
    c9d2:	f7ff ff3b 	bl	c84c <prvTaskExitError>

	/* Should not get here! */
	return 0;
    c9d6:	2300      	movs	r3, #0
}
    c9d8:	4618      	mov	r0, r3
    c9da:	3718      	adds	r7, #24
    c9dc:	46bd      	mov	sp, r7
    c9de:	bd80      	pop	{r7, pc}
    c9e0:	e000ed00 	.word	0xe000ed00
    c9e4:	410fc271 	.word	0x410fc271
    c9e8:	410fc270 	.word	0x410fc270
    c9ec:	e000e400 	.word	0xe000e400
    c9f0:	0001dfec 	.word	0x0001dfec
    c9f4:	0001dff0 	.word	0x0001dff0
    c9f8:	e000ed20 	.word	0xe000ed20
    c9fc:	0001d18c 	.word	0x0001d18c
    ca00:	e000ef34 	.word	0xe000ef34

0000ca04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    ca04:	b480      	push	{r7}
    ca06:	b083      	sub	sp, #12
    ca08:	af00      	add	r7, sp, #0
    ca0a:	f04f 0350 	mov.w	r3, #80	; 0x50
    ca0e:	f383 8811 	msr	BASEPRI, r3
    ca12:	f3bf 8f6f 	isb	sy
    ca16:	f3bf 8f4f 	dsb	sy
    ca1a:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
    ca1c:	4b0e      	ldr	r3, [pc, #56]	; (ca58 <vPortEnterCritical+0x54>)
    ca1e:	681b      	ldr	r3, [r3, #0]
    ca20:	3301      	adds	r3, #1
    ca22:	4a0d      	ldr	r2, [pc, #52]	; (ca58 <vPortEnterCritical+0x54>)
    ca24:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
    ca26:	4b0c      	ldr	r3, [pc, #48]	; (ca58 <vPortEnterCritical+0x54>)
    ca28:	681b      	ldr	r3, [r3, #0]
    ca2a:	2b01      	cmp	r3, #1
    ca2c:	d10e      	bne.n	ca4c <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    ca2e:	4b0b      	ldr	r3, [pc, #44]	; (ca5c <vPortEnterCritical+0x58>)
    ca30:	681b      	ldr	r3, [r3, #0]
    ca32:	b2db      	uxtb	r3, r3
    ca34:	2b00      	cmp	r3, #0
    ca36:	d009      	beq.n	ca4c <vPortEnterCritical+0x48>
    ca38:	f04f 0350 	mov.w	r3, #80	; 0x50
    ca3c:	f383 8811 	msr	BASEPRI, r3
    ca40:	f3bf 8f6f 	isb	sy
    ca44:	f3bf 8f4f 	dsb	sy
    ca48:	603b      	str	r3, [r7, #0]
    ca4a:	e7fe      	b.n	ca4a <vPortEnterCritical+0x46>
	}
}
    ca4c:	bf00      	nop
    ca4e:	370c      	adds	r7, #12
    ca50:	46bd      	mov	sp, r7
    ca52:	f85d 7b04 	ldr.w	r7, [sp], #4
    ca56:	4770      	bx	lr
    ca58:	0001d18c 	.word	0x0001d18c
    ca5c:	e000ed04 	.word	0xe000ed04

0000ca60 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    ca60:	b480      	push	{r7}
    ca62:	b083      	sub	sp, #12
    ca64:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
    ca66:	4b11      	ldr	r3, [pc, #68]	; (caac <vPortExitCritical+0x4c>)
    ca68:	681b      	ldr	r3, [r3, #0]
    ca6a:	2b00      	cmp	r3, #0
    ca6c:	d109      	bne.n	ca82 <vPortExitCritical+0x22>
    ca6e:	f04f 0350 	mov.w	r3, #80	; 0x50
    ca72:	f383 8811 	msr	BASEPRI, r3
    ca76:	f3bf 8f6f 	isb	sy
    ca7a:	f3bf 8f4f 	dsb	sy
    ca7e:	607b      	str	r3, [r7, #4]
    ca80:	e7fe      	b.n	ca80 <vPortExitCritical+0x20>
	uxCriticalNesting--;
    ca82:	4b0a      	ldr	r3, [pc, #40]	; (caac <vPortExitCritical+0x4c>)
    ca84:	681b      	ldr	r3, [r3, #0]
    ca86:	3b01      	subs	r3, #1
    ca88:	4a08      	ldr	r2, [pc, #32]	; (caac <vPortExitCritical+0x4c>)
    ca8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
    ca8c:	4b07      	ldr	r3, [pc, #28]	; (caac <vPortExitCritical+0x4c>)
    ca8e:	681b      	ldr	r3, [r3, #0]
    ca90:	2b00      	cmp	r3, #0
    ca92:	d104      	bne.n	ca9e <vPortExitCritical+0x3e>
    ca94:	2300      	movs	r3, #0
    ca96:	603b      	str	r3, [r7, #0]
	__asm volatile
    ca98:	683b      	ldr	r3, [r7, #0]
    ca9a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
    ca9e:	bf00      	nop
    caa0:	370c      	adds	r7, #12
    caa2:	46bd      	mov	sp, r7
    caa4:	f85d 7b04 	ldr.w	r7, [sp], #4
    caa8:	4770      	bx	lr
    caaa:	bf00      	nop
    caac:	0001d18c 	.word	0x0001d18c

0000cab0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
    cab0:	b480      	push	{r7}
    cab2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
    cab4:	4b0b      	ldr	r3, [pc, #44]	; (cae4 <vPortSetupTimerInterrupt+0x34>)
    cab6:	2200      	movs	r2, #0
    cab8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
    caba:	4b0b      	ldr	r3, [pc, #44]	; (cae8 <vPortSetupTimerInterrupt+0x38>)
    cabc:	2200      	movs	r2, #0
    cabe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    cac0:	4b0a      	ldr	r3, [pc, #40]	; (caec <vPortSetupTimerInterrupt+0x3c>)
    cac2:	681b      	ldr	r3, [r3, #0]
    cac4:	4a0a      	ldr	r2, [pc, #40]	; (caf0 <vPortSetupTimerInterrupt+0x40>)
    cac6:	fba2 2303 	umull	r2, r3, r2, r3
    caca:	099b      	lsrs	r3, r3, #6
    cacc:	4a09      	ldr	r2, [pc, #36]	; (caf4 <vPortSetupTimerInterrupt+0x44>)
    cace:	3b01      	subs	r3, #1
    cad0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
    cad2:	4b04      	ldr	r3, [pc, #16]	; (cae4 <vPortSetupTimerInterrupt+0x34>)
    cad4:	2207      	movs	r2, #7
    cad6:	601a      	str	r2, [r3, #0]
}
    cad8:	bf00      	nop
    cada:	46bd      	mov	sp, r7
    cadc:	f85d 7b04 	ldr.w	r7, [sp], #4
    cae0:	4770      	bx	lr
    cae2:	bf00      	nop
    cae4:	e000e010 	.word	0xe000e010
    cae8:	e000e018 	.word	0xe000e018
    caec:	0001d184 	.word	0x0001d184
    caf0:	10624dd3 	.word	0x10624dd3
    caf4:	e000e014 	.word	0xe000e014

0000caf8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
    caf8:	f8df 000c 	ldr.w	r0, [pc, #12]	; cb08 <vPortEnableVFP+0x10>
    cafc:	6801      	ldr	r1, [r0, #0]
    cafe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    cb02:	6001      	str	r1, [r0, #0]
    cb04:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
    cb06:	bf00      	nop
    cb08:	e000ed88 	.word	0xe000ed88

0000cb0c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
    cb0c:	b480      	push	{r7}
    cb0e:	b085      	sub	sp, #20
    cb10:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
    cb12:	f3ef 8305 	mrs	r3, IPSR
    cb16:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
    cb18:	68fb      	ldr	r3, [r7, #12]
    cb1a:	2b0f      	cmp	r3, #15
    cb1c:	d913      	bls.n	cb46 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
    cb1e:	4a16      	ldr	r2, [pc, #88]	; (cb78 <vPortValidateInterruptPriority+0x6c>)
    cb20:	68fb      	ldr	r3, [r7, #12]
    cb22:	4413      	add	r3, r2
    cb24:	781b      	ldrb	r3, [r3, #0]
    cb26:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
    cb28:	4b14      	ldr	r3, [pc, #80]	; (cb7c <vPortValidateInterruptPriority+0x70>)
    cb2a:	781b      	ldrb	r3, [r3, #0]
    cb2c:	7afa      	ldrb	r2, [r7, #11]
    cb2e:	429a      	cmp	r2, r3
    cb30:	d209      	bcs.n	cb46 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
    cb32:	f04f 0350 	mov.w	r3, #80	; 0x50
    cb36:	f383 8811 	msr	BASEPRI, r3
    cb3a:	f3bf 8f6f 	isb	sy
    cb3e:	f3bf 8f4f 	dsb	sy
    cb42:	607b      	str	r3, [r7, #4]
    cb44:	e7fe      	b.n	cb44 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
    cb46:	4b0e      	ldr	r3, [pc, #56]	; (cb80 <vPortValidateInterruptPriority+0x74>)
    cb48:	681b      	ldr	r3, [r3, #0]
    cb4a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
    cb4e:	4b0d      	ldr	r3, [pc, #52]	; (cb84 <vPortValidateInterruptPriority+0x78>)
    cb50:	681b      	ldr	r3, [r3, #0]
    cb52:	429a      	cmp	r2, r3
    cb54:	d909      	bls.n	cb6a <vPortValidateInterruptPriority+0x5e>
    cb56:	f04f 0350 	mov.w	r3, #80	; 0x50
    cb5a:	f383 8811 	msr	BASEPRI, r3
    cb5e:	f3bf 8f6f 	isb	sy
    cb62:	f3bf 8f4f 	dsb	sy
    cb66:	603b      	str	r3, [r7, #0]
    cb68:	e7fe      	b.n	cb68 <vPortValidateInterruptPriority+0x5c>
	}
    cb6a:	bf00      	nop
    cb6c:	3714      	adds	r7, #20
    cb6e:	46bd      	mov	sp, r7
    cb70:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb74:	4770      	bx	lr
    cb76:	bf00      	nop
    cb78:	e000e3f0 	.word	0xe000e3f0
    cb7c:	0001dfec 	.word	0x0001dfec
    cb80:	e000ed0c 	.word	0xe000ed0c
    cb84:	0001dff0 	.word	0x0001dff0

0000cb88 <vPortFree>:
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    cb88:	b580      	push	{r7, lr}
    cb8a:	b086      	sub	sp, #24
    cb8c:	af00      	add	r7, sp, #0
    cb8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
    cb90:	687b      	ldr	r3, [r7, #4]
    cb92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
    cb94:	687b      	ldr	r3, [r7, #4]
    cb96:	2b00      	cmp	r3, #0
    cb98:	d046      	beq.n	cc28 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
    cb9a:	2308      	movs	r3, #8
    cb9c:	425b      	negs	r3, r3
    cb9e:	697a      	ldr	r2, [r7, #20]
    cba0:	4413      	add	r3, r2
    cba2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
    cba4:	697b      	ldr	r3, [r7, #20]
    cba6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
    cba8:	693b      	ldr	r3, [r7, #16]
    cbaa:	685a      	ldr	r2, [r3, #4]
    cbac:	4b20      	ldr	r3, [pc, #128]	; (cc30 <vPortFree+0xa8>)
    cbae:	681b      	ldr	r3, [r3, #0]
    cbb0:	4013      	ands	r3, r2
    cbb2:	2b00      	cmp	r3, #0
    cbb4:	d109      	bne.n	cbca <vPortFree+0x42>
    cbb6:	f04f 0350 	mov.w	r3, #80	; 0x50
    cbba:	f383 8811 	msr	BASEPRI, r3
    cbbe:	f3bf 8f6f 	isb	sy
    cbc2:	f3bf 8f4f 	dsb	sy
    cbc6:	60fb      	str	r3, [r7, #12]
    cbc8:	e7fe      	b.n	cbc8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
    cbca:	693b      	ldr	r3, [r7, #16]
    cbcc:	681b      	ldr	r3, [r3, #0]
    cbce:	2b00      	cmp	r3, #0
    cbd0:	d009      	beq.n	cbe6 <vPortFree+0x5e>
    cbd2:	f04f 0350 	mov.w	r3, #80	; 0x50
    cbd6:	f383 8811 	msr	BASEPRI, r3
    cbda:	f3bf 8f6f 	isb	sy
    cbde:	f3bf 8f4f 	dsb	sy
    cbe2:	60bb      	str	r3, [r7, #8]
    cbe4:	e7fe      	b.n	cbe4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    cbe6:	693b      	ldr	r3, [r7, #16]
    cbe8:	685a      	ldr	r2, [r3, #4]
    cbea:	4b11      	ldr	r3, [pc, #68]	; (cc30 <vPortFree+0xa8>)
    cbec:	681b      	ldr	r3, [r3, #0]
    cbee:	4013      	ands	r3, r2
    cbf0:	2b00      	cmp	r3, #0
    cbf2:	d019      	beq.n	cc28 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
    cbf4:	693b      	ldr	r3, [r7, #16]
    cbf6:	681b      	ldr	r3, [r3, #0]
    cbf8:	2b00      	cmp	r3, #0
    cbfa:	d115      	bne.n	cc28 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    cbfc:	693b      	ldr	r3, [r7, #16]
    cbfe:	685a      	ldr	r2, [r3, #4]
    cc00:	4b0b      	ldr	r3, [pc, #44]	; (cc30 <vPortFree+0xa8>)
    cc02:	681b      	ldr	r3, [r3, #0]
    cc04:	43db      	mvns	r3, r3
    cc06:	401a      	ands	r2, r3
    cc08:	693b      	ldr	r3, [r7, #16]
    cc0a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
    cc0c:	f7fe fdf4 	bl	b7f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
    cc10:	693b      	ldr	r3, [r7, #16]
    cc12:	685a      	ldr	r2, [r3, #4]
    cc14:	4b07      	ldr	r3, [pc, #28]	; (cc34 <vPortFree+0xac>)
    cc16:	681b      	ldr	r3, [r3, #0]
    cc18:	4413      	add	r3, r2
    cc1a:	4a06      	ldr	r2, [pc, #24]	; (cc34 <vPortFree+0xac>)
    cc1c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    cc1e:	6938      	ldr	r0, [r7, #16]
    cc20:	f000 f80a 	bl	cc38 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
    cc24:	f7fe fdf6 	bl	b814 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    cc28:	bf00      	nop
    cc2a:	3718      	adds	r7, #24
    cc2c:	46bd      	mov	sp, r7
    cc2e:	bd80      	pop	{r7, pc}
    cc30:	0001e004 	.word	0x0001e004
    cc34:	0001e000 	.word	0x0001e000

0000cc38 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
    cc38:	b480      	push	{r7}
    cc3a:	b085      	sub	sp, #20
    cc3c:	af00      	add	r7, sp, #0
    cc3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    cc40:	4b28      	ldr	r3, [pc, #160]	; (cce4 <prvInsertBlockIntoFreeList+0xac>)
    cc42:	60fb      	str	r3, [r7, #12]
    cc44:	e002      	b.n	cc4c <prvInsertBlockIntoFreeList+0x14>
    cc46:	68fb      	ldr	r3, [r7, #12]
    cc48:	681b      	ldr	r3, [r3, #0]
    cc4a:	60fb      	str	r3, [r7, #12]
    cc4c:	68fb      	ldr	r3, [r7, #12]
    cc4e:	681b      	ldr	r3, [r3, #0]
    cc50:	687a      	ldr	r2, [r7, #4]
    cc52:	429a      	cmp	r2, r3
    cc54:	d8f7      	bhi.n	cc46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
    cc56:	68fb      	ldr	r3, [r7, #12]
    cc58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    cc5a:	68fb      	ldr	r3, [r7, #12]
    cc5c:	685b      	ldr	r3, [r3, #4]
    cc5e:	68ba      	ldr	r2, [r7, #8]
    cc60:	4413      	add	r3, r2
    cc62:	687a      	ldr	r2, [r7, #4]
    cc64:	429a      	cmp	r2, r3
    cc66:	d108      	bne.n	cc7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    cc68:	68fb      	ldr	r3, [r7, #12]
    cc6a:	685a      	ldr	r2, [r3, #4]
    cc6c:	687b      	ldr	r3, [r7, #4]
    cc6e:	685b      	ldr	r3, [r3, #4]
    cc70:	441a      	add	r2, r3
    cc72:	68fb      	ldr	r3, [r7, #12]
    cc74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
    cc76:	68fb      	ldr	r3, [r7, #12]
    cc78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
    cc7a:	687b      	ldr	r3, [r7, #4]
    cc7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    cc7e:	687b      	ldr	r3, [r7, #4]
    cc80:	685b      	ldr	r3, [r3, #4]
    cc82:	68ba      	ldr	r2, [r7, #8]
    cc84:	441a      	add	r2, r3
    cc86:	68fb      	ldr	r3, [r7, #12]
    cc88:	681b      	ldr	r3, [r3, #0]
    cc8a:	429a      	cmp	r2, r3
    cc8c:	d118      	bne.n	ccc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
    cc8e:	68fb      	ldr	r3, [r7, #12]
    cc90:	681a      	ldr	r2, [r3, #0]
    cc92:	4b15      	ldr	r3, [pc, #84]	; (cce8 <prvInsertBlockIntoFreeList+0xb0>)
    cc94:	681b      	ldr	r3, [r3, #0]
    cc96:	429a      	cmp	r2, r3
    cc98:	d00d      	beq.n	ccb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    cc9a:	687b      	ldr	r3, [r7, #4]
    cc9c:	685a      	ldr	r2, [r3, #4]
    cc9e:	68fb      	ldr	r3, [r7, #12]
    cca0:	681b      	ldr	r3, [r3, #0]
    cca2:	685b      	ldr	r3, [r3, #4]
    cca4:	441a      	add	r2, r3
    cca6:	687b      	ldr	r3, [r7, #4]
    cca8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    ccaa:	68fb      	ldr	r3, [r7, #12]
    ccac:	681b      	ldr	r3, [r3, #0]
    ccae:	681a      	ldr	r2, [r3, #0]
    ccb0:	687b      	ldr	r3, [r7, #4]
    ccb2:	601a      	str	r2, [r3, #0]
    ccb4:	e008      	b.n	ccc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
    ccb6:	4b0c      	ldr	r3, [pc, #48]	; (cce8 <prvInsertBlockIntoFreeList+0xb0>)
    ccb8:	681a      	ldr	r2, [r3, #0]
    ccba:	687b      	ldr	r3, [r7, #4]
    ccbc:	601a      	str	r2, [r3, #0]
    ccbe:	e003      	b.n	ccc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    ccc0:	68fb      	ldr	r3, [r7, #12]
    ccc2:	681a      	ldr	r2, [r3, #0]
    ccc4:	687b      	ldr	r3, [r7, #4]
    ccc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    ccc8:	68fa      	ldr	r2, [r7, #12]
    ccca:	687b      	ldr	r3, [r7, #4]
    cccc:	429a      	cmp	r2, r3
    ccce:	d002      	beq.n	ccd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    ccd0:	68fb      	ldr	r3, [r7, #12]
    ccd2:	687a      	ldr	r2, [r7, #4]
    ccd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    ccd6:	bf00      	nop
    ccd8:	3714      	adds	r7, #20
    ccda:	46bd      	mov	sp, r7
    ccdc:	f85d 7b04 	ldr.w	r7, [sp], #4
    cce0:	4770      	bx	lr
    cce2:	bf00      	nop
    cce4:	0001dff4 	.word	0x0001dff4
    cce8:	0001dffc 	.word	0x0001dffc

0000ccec <_ZdlPvj>:
    ccec:	f000 b800 	b.w	ccf0 <_ZdlPv>

0000ccf0 <_ZdlPv>:
    ccf0:	f000 b824 	b.w	cd3c <free>

0000ccf4 <__libc_init_array>:
    ccf4:	b570      	push	{r4, r5, r6, lr}
    ccf6:	4e0d      	ldr	r6, [pc, #52]	; (cd2c <__libc_init_array+0x38>)
    ccf8:	4c0d      	ldr	r4, [pc, #52]	; (cd30 <__libc_init_array+0x3c>)
    ccfa:	1ba4      	subs	r4, r4, r6
    ccfc:	10a4      	asrs	r4, r4, #2
    ccfe:	2500      	movs	r5, #0
    cd00:	42a5      	cmp	r5, r4
    cd02:	d109      	bne.n	cd18 <__libc_init_array+0x24>
    cd04:	4e0b      	ldr	r6, [pc, #44]	; (cd34 <__libc_init_array+0x40>)
    cd06:	4c0c      	ldr	r4, [pc, #48]	; (cd38 <__libc_init_array+0x44>)
    cd08:	f7fb f97a 	bl	8000 <_init>
    cd0c:	1ba4      	subs	r4, r4, r6
    cd0e:	10a4      	asrs	r4, r4, #2
    cd10:	2500      	movs	r5, #0
    cd12:	42a5      	cmp	r5, r4
    cd14:	d105      	bne.n	cd22 <__libc_init_array+0x2e>
    cd16:	bd70      	pop	{r4, r5, r6, pc}
    cd18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    cd1c:	4798      	blx	r3
    cd1e:	3501      	adds	r5, #1
    cd20:	e7ee      	b.n	cd00 <__libc_init_array+0xc>
    cd22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    cd26:	4798      	blx	r3
    cd28:	3501      	adds	r5, #1
    cd2a:	e7f2      	b.n	cd12 <__libc_init_array+0x1e>
    cd2c:	0001d174 	.word	0x0001d174
    cd30:	0001d174 	.word	0x0001d174
    cd34:	0001d174 	.word	0x0001d174
    cd38:	0001d17c 	.word	0x0001d17c

0000cd3c <free>:
    cd3c:	4b02      	ldr	r3, [pc, #8]	; (cd48 <free+0xc>)
    cd3e:	4601      	mov	r1, r0
    cd40:	6818      	ldr	r0, [r3, #0]
    cd42:	f000 b817 	b.w	cd74 <_free_r>
    cd46:	bf00      	nop
    cd48:	0001d190 	.word	0x0001d190

0000cd4c <memcpy>:
    cd4c:	b510      	push	{r4, lr}
    cd4e:	1e43      	subs	r3, r0, #1
    cd50:	440a      	add	r2, r1
    cd52:	4291      	cmp	r1, r2
    cd54:	d100      	bne.n	cd58 <memcpy+0xc>
    cd56:	bd10      	pop	{r4, pc}
    cd58:	f811 4b01 	ldrb.w	r4, [r1], #1
    cd5c:	f803 4f01 	strb.w	r4, [r3, #1]!
    cd60:	e7f7      	b.n	cd52 <memcpy+0x6>

0000cd62 <memset>:
    cd62:	4402      	add	r2, r0
    cd64:	4603      	mov	r3, r0
    cd66:	4293      	cmp	r3, r2
    cd68:	d100      	bne.n	cd6c <memset+0xa>
    cd6a:	4770      	bx	lr
    cd6c:	f803 1b01 	strb.w	r1, [r3], #1
    cd70:	e7f9      	b.n	cd66 <memset+0x4>
	...

0000cd74 <_free_r>:
    cd74:	b538      	push	{r3, r4, r5, lr}
    cd76:	4605      	mov	r5, r0
    cd78:	2900      	cmp	r1, #0
    cd7a:	d045      	beq.n	ce08 <_free_r+0x94>
    cd7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
    cd80:	1f0c      	subs	r4, r1, #4
    cd82:	2b00      	cmp	r3, #0
    cd84:	bfb8      	it	lt
    cd86:	18e4      	addlt	r4, r4, r3
    cd88:	f000 f842 	bl	ce10 <__malloc_lock>
    cd8c:	4a1f      	ldr	r2, [pc, #124]	; (ce0c <_free_r+0x98>)
    cd8e:	6813      	ldr	r3, [r2, #0]
    cd90:	4610      	mov	r0, r2
    cd92:	b933      	cbnz	r3, cda2 <_free_r+0x2e>
    cd94:	6063      	str	r3, [r4, #4]
    cd96:	6014      	str	r4, [r2, #0]
    cd98:	4628      	mov	r0, r5
    cd9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    cd9e:	f000 b838 	b.w	ce12 <__malloc_unlock>
    cda2:	42a3      	cmp	r3, r4
    cda4:	d90c      	bls.n	cdc0 <_free_r+0x4c>
    cda6:	6821      	ldr	r1, [r4, #0]
    cda8:	1862      	adds	r2, r4, r1
    cdaa:	4293      	cmp	r3, r2
    cdac:	bf04      	itt	eq
    cdae:	681a      	ldreq	r2, [r3, #0]
    cdb0:	685b      	ldreq	r3, [r3, #4]
    cdb2:	6063      	str	r3, [r4, #4]
    cdb4:	bf04      	itt	eq
    cdb6:	1852      	addeq	r2, r2, r1
    cdb8:	6022      	streq	r2, [r4, #0]
    cdba:	6004      	str	r4, [r0, #0]
    cdbc:	e7ec      	b.n	cd98 <_free_r+0x24>
    cdbe:	4613      	mov	r3, r2
    cdc0:	685a      	ldr	r2, [r3, #4]
    cdc2:	b10a      	cbz	r2, cdc8 <_free_r+0x54>
    cdc4:	42a2      	cmp	r2, r4
    cdc6:	d9fa      	bls.n	cdbe <_free_r+0x4a>
    cdc8:	6819      	ldr	r1, [r3, #0]
    cdca:	1858      	adds	r0, r3, r1
    cdcc:	42a0      	cmp	r0, r4
    cdce:	d10b      	bne.n	cde8 <_free_r+0x74>
    cdd0:	6820      	ldr	r0, [r4, #0]
    cdd2:	4401      	add	r1, r0
    cdd4:	1858      	adds	r0, r3, r1
    cdd6:	4282      	cmp	r2, r0
    cdd8:	6019      	str	r1, [r3, #0]
    cdda:	d1dd      	bne.n	cd98 <_free_r+0x24>
    cddc:	6810      	ldr	r0, [r2, #0]
    cdde:	6852      	ldr	r2, [r2, #4]
    cde0:	605a      	str	r2, [r3, #4]
    cde2:	4401      	add	r1, r0
    cde4:	6019      	str	r1, [r3, #0]
    cde6:	e7d7      	b.n	cd98 <_free_r+0x24>
    cde8:	d902      	bls.n	cdf0 <_free_r+0x7c>
    cdea:	230c      	movs	r3, #12
    cdec:	602b      	str	r3, [r5, #0]
    cdee:	e7d3      	b.n	cd98 <_free_r+0x24>
    cdf0:	6820      	ldr	r0, [r4, #0]
    cdf2:	1821      	adds	r1, r4, r0
    cdf4:	428a      	cmp	r2, r1
    cdf6:	bf04      	itt	eq
    cdf8:	6811      	ldreq	r1, [r2, #0]
    cdfa:	6852      	ldreq	r2, [r2, #4]
    cdfc:	6062      	str	r2, [r4, #4]
    cdfe:	bf04      	itt	eq
    ce00:	1809      	addeq	r1, r1, r0
    ce02:	6021      	streq	r1, [r4, #0]
    ce04:	605c      	str	r4, [r3, #4]
    ce06:	e7c7      	b.n	cd98 <_free_r+0x24>
    ce08:	bd38      	pop	{r3, r4, r5, pc}
    ce0a:	bf00      	nop
    ce0c:	0001e008 	.word	0x0001e008

0000ce10 <__malloc_lock>:
    ce10:	4770      	bx	lr

0000ce12 <__malloc_unlock>:
    ce12:	4770      	bx	lr

0000ce14 <__aeabi_uldivmod>:
    ce14:	b953      	cbnz	r3, ce2c <__aeabi_uldivmod+0x18>
    ce16:	b94a      	cbnz	r2, ce2c <__aeabi_uldivmod+0x18>
    ce18:	2900      	cmp	r1, #0
    ce1a:	bf08      	it	eq
    ce1c:	2800      	cmpeq	r0, #0
    ce1e:	bf1c      	itt	ne
    ce20:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    ce24:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    ce28:	f000 b972 	b.w	d110 <__aeabi_idiv0>
    ce2c:	f1ad 0c08 	sub.w	ip, sp, #8
    ce30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    ce34:	f000 f806 	bl	ce44 <__udivmoddi4>
    ce38:	f8dd e004 	ldr.w	lr, [sp, #4]
    ce3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    ce40:	b004      	add	sp, #16
    ce42:	4770      	bx	lr

0000ce44 <__udivmoddi4>:
    ce44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ce48:	9e08      	ldr	r6, [sp, #32]
    ce4a:	4604      	mov	r4, r0
    ce4c:	4688      	mov	r8, r1
    ce4e:	2b00      	cmp	r3, #0
    ce50:	d14b      	bne.n	ceea <__udivmoddi4+0xa6>
    ce52:	428a      	cmp	r2, r1
    ce54:	4615      	mov	r5, r2
    ce56:	d967      	bls.n	cf28 <__udivmoddi4+0xe4>
    ce58:	fab2 f282 	clz	r2, r2
    ce5c:	b14a      	cbz	r2, ce72 <__udivmoddi4+0x2e>
    ce5e:	f1c2 0720 	rsb	r7, r2, #32
    ce62:	fa01 f302 	lsl.w	r3, r1, r2
    ce66:	fa20 f707 	lsr.w	r7, r0, r7
    ce6a:	4095      	lsls	r5, r2
    ce6c:	ea47 0803 	orr.w	r8, r7, r3
    ce70:	4094      	lsls	r4, r2
    ce72:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    ce76:	0c23      	lsrs	r3, r4, #16
    ce78:	fbb8 f7fe 	udiv	r7, r8, lr
    ce7c:	fa1f fc85 	uxth.w	ip, r5
    ce80:	fb0e 8817 	mls	r8, lr, r7, r8
    ce84:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    ce88:	fb07 f10c 	mul.w	r1, r7, ip
    ce8c:	4299      	cmp	r1, r3
    ce8e:	d909      	bls.n	cea4 <__udivmoddi4+0x60>
    ce90:	18eb      	adds	r3, r5, r3
    ce92:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
    ce96:	f080 811b 	bcs.w	d0d0 <__udivmoddi4+0x28c>
    ce9a:	4299      	cmp	r1, r3
    ce9c:	f240 8118 	bls.w	d0d0 <__udivmoddi4+0x28c>
    cea0:	3f02      	subs	r7, #2
    cea2:	442b      	add	r3, r5
    cea4:	1a5b      	subs	r3, r3, r1
    cea6:	b2a4      	uxth	r4, r4
    cea8:	fbb3 f0fe 	udiv	r0, r3, lr
    ceac:	fb0e 3310 	mls	r3, lr, r0, r3
    ceb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    ceb4:	fb00 fc0c 	mul.w	ip, r0, ip
    ceb8:	45a4      	cmp	ip, r4
    ceba:	d909      	bls.n	ced0 <__udivmoddi4+0x8c>
    cebc:	192c      	adds	r4, r5, r4
    cebe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    cec2:	f080 8107 	bcs.w	d0d4 <__udivmoddi4+0x290>
    cec6:	45a4      	cmp	ip, r4
    cec8:	f240 8104 	bls.w	d0d4 <__udivmoddi4+0x290>
    cecc:	3802      	subs	r0, #2
    cece:	442c      	add	r4, r5
    ced0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    ced4:	eba4 040c 	sub.w	r4, r4, ip
    ced8:	2700      	movs	r7, #0
    ceda:	b11e      	cbz	r6, cee4 <__udivmoddi4+0xa0>
    cedc:	40d4      	lsrs	r4, r2
    cede:	2300      	movs	r3, #0
    cee0:	e9c6 4300 	strd	r4, r3, [r6]
    cee4:	4639      	mov	r1, r7
    cee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ceea:	428b      	cmp	r3, r1
    ceec:	d909      	bls.n	cf02 <__udivmoddi4+0xbe>
    ceee:	2e00      	cmp	r6, #0
    cef0:	f000 80eb 	beq.w	d0ca <__udivmoddi4+0x286>
    cef4:	2700      	movs	r7, #0
    cef6:	e9c6 0100 	strd	r0, r1, [r6]
    cefa:	4638      	mov	r0, r7
    cefc:	4639      	mov	r1, r7
    cefe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cf02:	fab3 f783 	clz	r7, r3
    cf06:	2f00      	cmp	r7, #0
    cf08:	d147      	bne.n	cf9a <__udivmoddi4+0x156>
    cf0a:	428b      	cmp	r3, r1
    cf0c:	d302      	bcc.n	cf14 <__udivmoddi4+0xd0>
    cf0e:	4282      	cmp	r2, r0
    cf10:	f200 80fa 	bhi.w	d108 <__udivmoddi4+0x2c4>
    cf14:	1a84      	subs	r4, r0, r2
    cf16:	eb61 0303 	sbc.w	r3, r1, r3
    cf1a:	2001      	movs	r0, #1
    cf1c:	4698      	mov	r8, r3
    cf1e:	2e00      	cmp	r6, #0
    cf20:	d0e0      	beq.n	cee4 <__udivmoddi4+0xa0>
    cf22:	e9c6 4800 	strd	r4, r8, [r6]
    cf26:	e7dd      	b.n	cee4 <__udivmoddi4+0xa0>
    cf28:	b902      	cbnz	r2, cf2c <__udivmoddi4+0xe8>
    cf2a:	deff      	udf	#255	; 0xff
    cf2c:	fab2 f282 	clz	r2, r2
    cf30:	2a00      	cmp	r2, #0
    cf32:	f040 808f 	bne.w	d054 <__udivmoddi4+0x210>
    cf36:	1b49      	subs	r1, r1, r5
    cf38:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    cf3c:	fa1f f885 	uxth.w	r8, r5
    cf40:	2701      	movs	r7, #1
    cf42:	fbb1 fcfe 	udiv	ip, r1, lr
    cf46:	0c23      	lsrs	r3, r4, #16
    cf48:	fb0e 111c 	mls	r1, lr, ip, r1
    cf4c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    cf50:	fb08 f10c 	mul.w	r1, r8, ip
    cf54:	4299      	cmp	r1, r3
    cf56:	d907      	bls.n	cf68 <__udivmoddi4+0x124>
    cf58:	18eb      	adds	r3, r5, r3
    cf5a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    cf5e:	d202      	bcs.n	cf66 <__udivmoddi4+0x122>
    cf60:	4299      	cmp	r1, r3
    cf62:	f200 80cd 	bhi.w	d100 <__udivmoddi4+0x2bc>
    cf66:	4684      	mov	ip, r0
    cf68:	1a59      	subs	r1, r3, r1
    cf6a:	b2a3      	uxth	r3, r4
    cf6c:	fbb1 f0fe 	udiv	r0, r1, lr
    cf70:	fb0e 1410 	mls	r4, lr, r0, r1
    cf74:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    cf78:	fb08 f800 	mul.w	r8, r8, r0
    cf7c:	45a0      	cmp	r8, r4
    cf7e:	d907      	bls.n	cf90 <__udivmoddi4+0x14c>
    cf80:	192c      	adds	r4, r5, r4
    cf82:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    cf86:	d202      	bcs.n	cf8e <__udivmoddi4+0x14a>
    cf88:	45a0      	cmp	r8, r4
    cf8a:	f200 80b6 	bhi.w	d0fa <__udivmoddi4+0x2b6>
    cf8e:	4618      	mov	r0, r3
    cf90:	eba4 0408 	sub.w	r4, r4, r8
    cf94:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    cf98:	e79f      	b.n	ceda <__udivmoddi4+0x96>
    cf9a:	f1c7 0c20 	rsb	ip, r7, #32
    cf9e:	40bb      	lsls	r3, r7
    cfa0:	fa22 fe0c 	lsr.w	lr, r2, ip
    cfa4:	ea4e 0e03 	orr.w	lr, lr, r3
    cfa8:	fa01 f407 	lsl.w	r4, r1, r7
    cfac:	fa20 f50c 	lsr.w	r5, r0, ip
    cfb0:	fa21 f30c 	lsr.w	r3, r1, ip
    cfb4:	ea4f 481e 	mov.w	r8, lr, lsr #16
    cfb8:	4325      	orrs	r5, r4
    cfba:	fbb3 f9f8 	udiv	r9, r3, r8
    cfbe:	0c2c      	lsrs	r4, r5, #16
    cfc0:	fb08 3319 	mls	r3, r8, r9, r3
    cfc4:	fa1f fa8e 	uxth.w	sl, lr
    cfc8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
    cfcc:	fb09 f40a 	mul.w	r4, r9, sl
    cfd0:	429c      	cmp	r4, r3
    cfd2:	fa02 f207 	lsl.w	r2, r2, r7
    cfd6:	fa00 f107 	lsl.w	r1, r0, r7
    cfda:	d90b      	bls.n	cff4 <__udivmoddi4+0x1b0>
    cfdc:	eb1e 0303 	adds.w	r3, lr, r3
    cfe0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    cfe4:	f080 8087 	bcs.w	d0f6 <__udivmoddi4+0x2b2>
    cfe8:	429c      	cmp	r4, r3
    cfea:	f240 8084 	bls.w	d0f6 <__udivmoddi4+0x2b2>
    cfee:	f1a9 0902 	sub.w	r9, r9, #2
    cff2:	4473      	add	r3, lr
    cff4:	1b1b      	subs	r3, r3, r4
    cff6:	b2ad      	uxth	r5, r5
    cff8:	fbb3 f0f8 	udiv	r0, r3, r8
    cffc:	fb08 3310 	mls	r3, r8, r0, r3
    d000:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
    d004:	fb00 fa0a 	mul.w	sl, r0, sl
    d008:	45a2      	cmp	sl, r4
    d00a:	d908      	bls.n	d01e <__udivmoddi4+0x1da>
    d00c:	eb1e 0404 	adds.w	r4, lr, r4
    d010:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    d014:	d26b      	bcs.n	d0ee <__udivmoddi4+0x2aa>
    d016:	45a2      	cmp	sl, r4
    d018:	d969      	bls.n	d0ee <__udivmoddi4+0x2aa>
    d01a:	3802      	subs	r0, #2
    d01c:	4474      	add	r4, lr
    d01e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    d022:	fba0 8902 	umull	r8, r9, r0, r2
    d026:	eba4 040a 	sub.w	r4, r4, sl
    d02a:	454c      	cmp	r4, r9
    d02c:	46c2      	mov	sl, r8
    d02e:	464b      	mov	r3, r9
    d030:	d354      	bcc.n	d0dc <__udivmoddi4+0x298>
    d032:	d051      	beq.n	d0d8 <__udivmoddi4+0x294>
    d034:	2e00      	cmp	r6, #0
    d036:	d069      	beq.n	d10c <__udivmoddi4+0x2c8>
    d038:	ebb1 050a 	subs.w	r5, r1, sl
    d03c:	eb64 0403 	sbc.w	r4, r4, r3
    d040:	fa04 fc0c 	lsl.w	ip, r4, ip
    d044:	40fd      	lsrs	r5, r7
    d046:	40fc      	lsrs	r4, r7
    d048:	ea4c 0505 	orr.w	r5, ip, r5
    d04c:	e9c6 5400 	strd	r5, r4, [r6]
    d050:	2700      	movs	r7, #0
    d052:	e747      	b.n	cee4 <__udivmoddi4+0xa0>
    d054:	f1c2 0320 	rsb	r3, r2, #32
    d058:	fa20 f703 	lsr.w	r7, r0, r3
    d05c:	4095      	lsls	r5, r2
    d05e:	fa01 f002 	lsl.w	r0, r1, r2
    d062:	fa21 f303 	lsr.w	r3, r1, r3
    d066:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    d06a:	4338      	orrs	r0, r7
    d06c:	0c01      	lsrs	r1, r0, #16
    d06e:	fbb3 f7fe 	udiv	r7, r3, lr
    d072:	fa1f f885 	uxth.w	r8, r5
    d076:	fb0e 3317 	mls	r3, lr, r7, r3
    d07a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    d07e:	fb07 f308 	mul.w	r3, r7, r8
    d082:	428b      	cmp	r3, r1
    d084:	fa04 f402 	lsl.w	r4, r4, r2
    d088:	d907      	bls.n	d09a <__udivmoddi4+0x256>
    d08a:	1869      	adds	r1, r5, r1
    d08c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
    d090:	d22f      	bcs.n	d0f2 <__udivmoddi4+0x2ae>
    d092:	428b      	cmp	r3, r1
    d094:	d92d      	bls.n	d0f2 <__udivmoddi4+0x2ae>
    d096:	3f02      	subs	r7, #2
    d098:	4429      	add	r1, r5
    d09a:	1acb      	subs	r3, r1, r3
    d09c:	b281      	uxth	r1, r0
    d09e:	fbb3 f0fe 	udiv	r0, r3, lr
    d0a2:	fb0e 3310 	mls	r3, lr, r0, r3
    d0a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    d0aa:	fb00 f308 	mul.w	r3, r0, r8
    d0ae:	428b      	cmp	r3, r1
    d0b0:	d907      	bls.n	d0c2 <__udivmoddi4+0x27e>
    d0b2:	1869      	adds	r1, r5, r1
    d0b4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    d0b8:	d217      	bcs.n	d0ea <__udivmoddi4+0x2a6>
    d0ba:	428b      	cmp	r3, r1
    d0bc:	d915      	bls.n	d0ea <__udivmoddi4+0x2a6>
    d0be:	3802      	subs	r0, #2
    d0c0:	4429      	add	r1, r5
    d0c2:	1ac9      	subs	r1, r1, r3
    d0c4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
    d0c8:	e73b      	b.n	cf42 <__udivmoddi4+0xfe>
    d0ca:	4637      	mov	r7, r6
    d0cc:	4630      	mov	r0, r6
    d0ce:	e709      	b.n	cee4 <__udivmoddi4+0xa0>
    d0d0:	4607      	mov	r7, r0
    d0d2:	e6e7      	b.n	cea4 <__udivmoddi4+0x60>
    d0d4:	4618      	mov	r0, r3
    d0d6:	e6fb      	b.n	ced0 <__udivmoddi4+0x8c>
    d0d8:	4541      	cmp	r1, r8
    d0da:	d2ab      	bcs.n	d034 <__udivmoddi4+0x1f0>
    d0dc:	ebb8 0a02 	subs.w	sl, r8, r2
    d0e0:	eb69 020e 	sbc.w	r2, r9, lr
    d0e4:	3801      	subs	r0, #1
    d0e6:	4613      	mov	r3, r2
    d0e8:	e7a4      	b.n	d034 <__udivmoddi4+0x1f0>
    d0ea:	4660      	mov	r0, ip
    d0ec:	e7e9      	b.n	d0c2 <__udivmoddi4+0x27e>
    d0ee:	4618      	mov	r0, r3
    d0f0:	e795      	b.n	d01e <__udivmoddi4+0x1da>
    d0f2:	4667      	mov	r7, ip
    d0f4:	e7d1      	b.n	d09a <__udivmoddi4+0x256>
    d0f6:	4681      	mov	r9, r0
    d0f8:	e77c      	b.n	cff4 <__udivmoddi4+0x1b0>
    d0fa:	3802      	subs	r0, #2
    d0fc:	442c      	add	r4, r5
    d0fe:	e747      	b.n	cf90 <__udivmoddi4+0x14c>
    d100:	f1ac 0c02 	sub.w	ip, ip, #2
    d104:	442b      	add	r3, r5
    d106:	e72f      	b.n	cf68 <__udivmoddi4+0x124>
    d108:	4638      	mov	r0, r7
    d10a:	e708      	b.n	cf1e <__udivmoddi4+0xda>
    d10c:	4637      	mov	r7, r6
    d10e:	e6e9      	b.n	cee4 <__udivmoddi4+0xa0>

0000d110 <__aeabi_idiv0>:
    d110:	4770      	bx	lr
    d112:	bf00      	nop

0000d114 <_exit>:
    d114:	e7fe      	b.n	d114 <_exit>

Disassembly of section .fini:

0000d118 <_fini>:
    d118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d11a:	bf00      	nop
    d11c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    d11e:	bc08      	pop	{r3}
    d120:	469e      	mov	lr, r3
    d122:	4770      	bx	lr
